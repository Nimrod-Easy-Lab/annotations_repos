commit 09a05b680da6e44918b76599b78e8e0cb0c19109
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Nov 27 13:53:12 2017 +0100

    Dont use ThreadDeathWatcher to cleanup PoolThreadCache if FastThreadLocalThread with wrapped Runnable is used
    
    Motivation:
    
    We dont need to use the ThreadDeathWatcher if we use a FastThreadLocalThread for which we wrap the Runnable and ensure we call FastThreadLocal.removeAll() once the Runnable completes.
    
    Modifications:
    
    - Dont use a ThreadDeathWatcher if we are sure we will call FastThreadLocal.removeAll()
    - Add unit test.
    
    Result:
    
    Less overhead / running theads if you only allocate / deallocate from FastThreadLocalThreads.

commit 9ef83234f36441cd63f56e1c1a5f796e5e253b8b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Nov 24 19:03:03 2017 +0100

    Add tests for HttpObjectDecoder related to limits
    
    Motivation:
    
    HttpObjectDecoder will throw a TooLongFrameException when either the max size for the initial line or the header size was exceeed. We have no tests for this.
    
    Modifications:
    
    Add test cases.
    
    Result:
    
    More tests.

commit d8cb9ce09f5e591c244f2c3b04ea5bf054865ebb
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Mon Nov 27 15:58:03 2017 -0800

    Throw FileNotFoundException when connecting to a missing UDS path
    
    Motivation:
    Exception handling is nicer when a more specific Exception is thrown
    
    Modification:
    Add a static reference for ENOENT, and throw FNFE if it is returned
    
    Result:
    More precise exception handling

commit 460d1251219e741e034efc083c7f8cd6f57c7238
Author: Tim Ward <timothyjward@apache.org>
Date:   Mon Nov 27 14:20:17 2017 +0000

    Provide a test for #6548 using the OSGi test suite
    
    Motiviation:
    
    The OSGi Test suite runs without access to sun.misc.Unsafe, and so is a good place to put a test to avoid regressing #6548.
    
    Modification:
    
    Added a test-case that failed before https://github.com/netty/netty/pull/7432.
    
    Result:
    
    Test for fix included.

commit 65cacc9b15fc88f221ca4c3dde4c301d32864c08
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Nov 22 21:05:34 2017 +0100

    Guard against NoClassDefFoundError when trying to load Unsafe.
    
    Motivation:
    
    OSGI and other enviroments may not allow to even load Unsafe which will lead to an NoClassDefFoundError when trying to access it. We should guard against this.
    
    Modifications:
    
    Catch NoClassDefFoundError when trying to load Unsafe.
    
    Result:
    
    Be able to use netty with a strict OSGI config.

commit f9cadc0a8cf8da5e6b90f9291151d140750e63aa
Author: Soner Kaya <soner.kaya@foreks.com>
Date:   Thu Nov 23 15:44:05 2017 +0300

    When System property is empty use def value.
    
    Motivation:
    
    When system property is empty, the default value should be used.
    
    Modification:
    
    - Correctly use the default value in all cases
    - Add unit tests
    
    Result:
    
    Correct behaviour

commit c1b1d6268aca287f310c5feefa6606eb6f3f6a70
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Nov 23 08:51:38 2017 +0100

    Allow to detect failed query caused by an Timeout / IO error and also not cache these.
    
    Motivation:
    
    At the moment there is not way for the user to know if resolving a domain was failed because the domain was unkown or because of an IO error / timeout. If it was caused by an timeout / IO error the user may want to retry the query. Also if the query was failed because of an IO error / timeout we should not cache it.
    
    Modifications:
    
    - Add DnsNameResolverTimeoutException and include it in the UnkownHostException if the domain could not be resolved because of an timeout. This will allow the user to retry the query when inspecting the cause.
    - Do not cache IO errors / timeouts
    - Add unit test
    
    Result:
    
    Easier for users to implement retries for DNS querys and not cache IO errors / timeouts.

commit 433dbeb149550a2bf0c35515ca1db8ab52a8343f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Nov 22 22:05:29 2017 +0100

    Revert "Allow to detect failed query caused by an Timeout / IO error and also not cache these."
    
    This reverts commit 12a413bf024e64946b28ed9aa3065a31b9420ad2 as it needs some more changes due some changes that were merged into 4.1 before.

commit 12a413bf024e64946b28ed9aa3065a31b9420ad2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Nov 15 18:49:47 2017 +0100

    Allow to detect failed query caused by an Timeout / IO error and also not cache these.
    
    Motivation:
    
    At the moment there is not way for the user to know if resolving a domain was failed because the domain was unkown or because of an IO error / timeout. If it was caused by an timeout / IO error the user may want to retry the query. Also if the query was failed because of an IO error / timeout we should not cache it.
    
    Modifications:
    
    - Add DnsNameResolverTimeoutException and include it in the UnkownHostException if the domain could not be resolved because of an timeout. This will allow the user to retry the query when inspecting the cause.
    - Do not cache IO errors / timeouts
    - Add unit test
    
    Result:
    
    Easier for users to implement retries for DNS querys and not cache IO errors / timeouts.

commit 7aca99f9869634d1f65e017e62b5520cd8df8cf5
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Nov 21 19:25:51 2017 +0100

    DefaultHttpHeader.names().toArray(...) may throw ArrayStoreException
    
    Motivation:
    
    DefaultHttpHeader.names() exposes HTTP header names as a Set<String>. Converting the resulting set to an array using toArray(String[]) throws an exception: java.lang.ArrayStoreException: io.netty.util.AsciiString.
    
    Modifications:
    
    - Remove our custom implementation of toArray(...) (and others) by just extending AbstractCollection.
    - Add unit test
    
    Result:
    
    Fixes [#7428].

commit 7d213240ca768d6dd35ef2336b1fda757bd4df3c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Nov 20 09:36:26 2017 -0800

    HttpConversionUtil TE filtering robustness
    
    Motivation:
    HttpConversionUtil#toHttp2Headers has special code to filter the TE header name. However this filtering code may result in adding the <TE, TRAILERS> tuple in scenarios that are not appropriate. For example if a value containing trailers is seen it will be added, but the value could not actually be equal to trailers. Also CSV values are not supported.
    
    Modifications:
    - Account for CSV header values
    - Account for the value containing 'trailers' but not actually being equal to 'trailers'
    
    Result:
    More robust parsing of the TE header.

commit e420f857fa0b9ab1df37359f7c0108475696b8dd
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Tue Nov 21 11:31:07 2017 +0100

    Optimize DefaultHeaders#toString and implement HttpHeaders#toString
    
    Motivation:
    
    For debugging/logging purpose, it would be convenient to have
    HttpHeaders#toString implemented.
    
    DefaultHeaders does implement toString be the implementation is suboptimal and allocates a Set for the names and Lists for values.
    
    Modification:
    
    * Introduce HeadersUtil#toString that provides a convenient optimized helper to implement toString for various headers implementations
    * Have DefaultHeaders#toString and HttpHeaders#toString delegate their toString implementation to HeadersUtil
    
    Result:
    
    Convenient HttpHeaders#toString. Optimized DefaultHeaders#toString.

commit b1cc5835acff2df9e5e5b06b70e88b7e9d3c9490
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Nov 21 12:12:15 2017 +0100

    Not directly call getsockopt but use exported helper function
    
    Motivation:
    
    To better isolate OS system calls we should not call getsockopt directly but use our netty_unix_socket_getOption0 function. See is a followup of f115bf5.
    
    Modifications:
    
    Export netty_unix_socket_getOption0 by declaring it in the header file and use it
    
    Result:
    
    Better isolation of system calls.

commit 7f4ade7e7d6f907a30926c54e16abefe88e81a8e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Nov 21 09:59:51 2017 +0100

    Correctly propagate channelInactive even if cleanup throws
    
    Motivation:
    
    Its possible that cleanup() will throw if invalid data is passed into the wrapped EmbeddedChannel. We need to ensure we still call channelInactive(...) in this case.
    
    Modifications:
    
    - Correctly forward Exceptions caused by cleanup()
    - Ensure all content is released when cleanup() throws
    - Add unit tests
    
    Result:
    
    Correctly handle the case when cleanup() throws.

commit e5e4c18c1be1d32c5bcb9e6aa0ee300e9c89c18d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Nov 19 09:19:07 2017 +0100

    Add testcase for writing empty last content with headers.
    
    Motivation:
    
    https://github.com/netty/netty/issues/7418 reported an issue with writing a LastHttpContent with trailers set.
    
    Modifications:
    
    Add unit test to ensure this issue is fixed in latest netty release.
    
    Result:
    
    Ensure code is correct.

commit a3e41ba6eb118dde7657af9a95d6ce34424f76da
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Nov 20 09:16:42 2017 -0800

    HttpConversionUtils avoid intermediate collection allocation
    
    Modifications:
    HttpConversionUtil#toLowercaseMap requires an intermediate List to be allocated. This can be avoided with the recently added value iterator methods.
    
    Modifications:
    - Use HttpHeaders#valueCharSequenceIterator instead of getAll
    
    Result:
    Less intermediate object allocation and copying.

commit 907ed79069584b6c4641bfe4bf9f64eea2c23564
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Nov 20 12:36:36 2017 -0800

    Reduce conditionals in DnsNameResovlerContext
    
    Motivation:
    Minor cleanup from 844d804 just to reduce the conditional statements and indentation level.
    
    Modifications:
    - combine the else + if into an else if statement
    
    Result:
    Code cleaned up.

commit 93b144b7b4872ea623a378c75b92d33bea28ab51
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Nov 11 22:37:26 2017 -0800

    HttpMethod#valueOf improvement
    
    Motivation:
    HttpMethod#valueOf shows up on profiler results in the top set of
    results. Since it is a relatively simple operation it can be improved in
    isolation.
    
    Modifications:
    - Introduce a special case map which assigns each HttpMethod to a unique
    index in an array and provides constant time lookup from a hash code
    algorithm. When the bucket is matched we can then directly do equality
    comparison instead of potentially following a linked structure when
    HashMap has hash collisions.
    
    Result:
    ~10% improvement in benchmark results for HttpMethod#valueOf
    
    Benchmark                                     Mode  Cnt   Score   Error   Units
    HttpMethodMapBenchmark.newMapKnownMethods    thrpt   16  31.831 ± 0.928  ops/us
    HttpMethodMapBenchmark.newMapMixMethods      thrpt   16  25.568 ± 0.400  ops/us
    HttpMethodMapBenchmark.newMapUnknownMethods  thrpt   16  51.413 ± 1.824  ops/us
    HttpMethodMapBenchmark.oldMapKnownMethods    thrpt   16  29.226 ± 0.330  ops/us
    HttpMethodMapBenchmark.oldMapMixMethods      thrpt   16  21.073 ± 0.247  ops/us
    HttpMethodMapBenchmark.oldMapUnknownMethods  thrpt   16  49.081 ± 0.577  ops/us

commit 0a47c590fe9eb23d65fbbeafcacb978b37ed7992
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Nov 11 18:22:22 2017 -0800

    HttpHeaders valuesIterator and contains improvements
    
    Motivation:
    In order to determine if a header contains a value we currently rely
    upon getAll(..) and regular expressions. This operation is commonly used
    during the encode and decode stage to determine the transfer encoding
    (e.g. HttpUtil#isTransferEncodingChunked). This operation requires an
    intermediate collection and possibly regular expressions for the
    CombinedHttpHeaders use case which can be expensive.
    
    Modifications:
    - Add a valuesIterator to HttpHeaders and specializations of this method
    for DefaultHttpHeaders, ReadOnlyHttpHeaders, and CombinedHttpHeaders.
    
    Result:
    Less intermediate collections and allocation overhead when determining
    if HttpHeaders contains a name/value pair.

commit e6126215e03a038c5d34993ea16518af35c2bafa
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Nov 17 23:22:29 2017 -0800

    DefaultHttp2FrameWriter reduce object allocation
    
    Motivation:
    DefaultHttp2FrameWriter#writeData allocates a DataFrameHeader for each write operation. DataFrameHeader maintains internal state and allocates multiple slices of a buffer which is a maximum of 30 bytes. This 30 byte buffer may not always be necessary and the additional slice operations can utilize retainedSlice to take advantage of pooled objects. We can also save computation and object allocations if there is no padding which is a common case in practice.
    
    Modifications:
    - Remove DataFrameHeader
    - Add a fast path for padding == 0
    
    Result:
    Less object allocation in DefaultHttp2FrameWriter

commit 844d804aba4b459215f05c9ade59157f6c2cfb4b
Author: Stanley Shyiko <stanley.shyiko@gmail.com>
Date:   Thu Nov 16 23:15:30 2017 -0800

    Fix DN resolution when ndots is greater than 1
    
    Motivation:
    
    DN resolution does not fall back to the "original name" lookup after search list is checked. This results in a failure to resolve any name (outside of search list) that has number of dots less than resolv.conf's ndots value (which, for example, is often the case in the context of Kubernetes where kubelet passes on resolv.conf containing "options ndots:5").
    
    It also does not go through the search list in a situation described in resolv.conf man:
    "The default for n[dots] is 1, meaning that if there are any dots in a name, the name will be tried first as an absolute name before any search list elements are appended to it."
    
    Modifications:
    
    DnsNameResolverContext::resolve was updated to match Go's https://github.com/golang/go/blob/release-branch.go1.9/src/net/dnsclient_unix.go#L338 logic.
    
    Result:
    DnsNameResolverContext::resolve will now try to resolve "original name" if search list yields no results when number of dots in the original name is less than resolv.conf's ndots value. It will also go through the search list in case "origin name" resolution fails and number of dots is equal or larger than resolv.conf's ndots value.

commit a8bb9dc1802f59a3a97d555e245f0b8826700bc6
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Nov 17 14:50:09 2017 -0800

    AbstractByteBuf readSlice bound check bug
    
    Motivation:
    AbstractByteBuf#readSlice relied upon the bounds checking of the slice operation in order to detect index out of bounds conditions. However the slice bounds checking operation allows for the slice to go beyond the writer index, and this is out of bounds for a read operation.
    
    Modifications:
    - AbstractByteBuf#readSlice and AbstractByteBuf#readRetainedSlice should ensure the desired amount of bytes are readable before taking a slice
    
    Result:
    No reading of undefined data in AbstractByteBuf#readSlice and AbstractByteBuf#readRetainedSlice.

commit 78522cf3f066c9a311478a0a08529331cf85f6d2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Nov 17 17:19:36 2017 +0100

    Remove unused allocation introduced by d976dc108d587e84c6ffb4dfdb3a9704442db29f

commit 48b4502d1d19208fb46d1ecbe4fb1f3b42248df2
Author: Dan McNulty <dkmcnulty@gmail.com>
Date:   Wed Nov 15 08:54:59 2017 -0600

    Move EmptyHttpHeaders.INSTANCE initialization to inner class.
    
    Motivation:
    
    If the HttpUtil class is initialized before HttpHeaders or
    EmptyHttpHeaders, EmptyHttpHeaders.INSTANCE will be null. This
    can lead to NPEs in code that relies on this field being
    non-null. One example is the
    LastHttpContent.EMPTY_LAST_CONTENT.trailingHeaders method.
    
    Modifications:
    
    - Move HttpUtil.EMPTY_HEADERS to a private static final inner class
      of EmptyHttpHeaders called InstanceInitializer.
    - Add tests, that when run in isolation, validate the fix for the issue.
    
    Result:
    
    Any initialization order of HttpUtil, EmptyHttpHeaders or
    HttpHeaders will result in EmptyHttpHeaders.INSTANCE being initialized
    correctly.

commit d976dc108d587e84c6ffb4dfdb3a9704442db29f
Author: Moses Nakamura <mnakamura@twitter.com>
Date:   Fri Nov 10 16:56:55 2017 -0500

    codec-http2: Improve h1 to h2 header conversion
    
    Motivation:
    
    Netty could handle "connection" or "te" headers more gently when
    converting from http/1.1 to http/2 headers.  Http/2 headers don't
    support single-hop headers, so when we convert from http/1.1 to http/2,
    we should drop all single-hop headers.  This includes headers like
    "transfer-encoding" and "connection", but also the headers that
    "connection" points to, since "connection" can be used to designate
    other headers as single-hop headers.  For the "te" header, we can more
    permissively convert it by just dropping non-conforming headers (ie
    non-"trailers" headers) which is what we do for all other headers when
    we convert.
    
    Modifications:
    
    Add a new blacklist to the http/1.1 to http/2 conversion, which is
    constructed from the values of the "connection" header, and stop
    throwing an exception when a "te" header is passed with a non-"trailers"
    value.  Instead, drop all values except for "trailers".  Add unit tests
    for "connection" and "te" headers when converting from http/1.1 to http/2.
    
    Result:
    
    This will improve the h2c upgrade request, and also conversions from
    http/1.1 to http/2.  This will simplify implementing spec-compliant
    http/2 servers that want to share code between their http/1.1 and http/2
    implementations.
    
    [Fixes #7355]

commit c921742a4281817052e06ce3bf28c859699e2cbf
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Nov 5 18:53:13 2017 +0100

    Dont fire an SslHandshakeEvent if the handshake was not started at all.
    
    Motivation:
    
    We should not fire a SslHandshakeEvent if the channel is closed but the handshake was not started.
    
    Modifications:
    
    - Add a variable to SslHandler which tracks if an handshake was started yet or not and depending on this fire the event.
    - Add a unit test
    
    Result:
    
    Fixes [#7262].

commit f115bf50cbda70964130236a09fd3045f1b250be
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Nov 14 11:16:21 2017 +0100

    EpollSocketChannelConfig.getOptions() must not throw if TCP_FASTOPEN_CONNECT is not supported
    
    Motivation:
    
    If a user calls EpollSocketChannelConfig.getOptions() and TCP_FASTOPEN_CONNECT is not supported we throw an exception.
    
    Modifications:
    
    - Just return 0 if ENOPROTOOPT is set.
    - Add testcase
    
    Result:
    
    getOptions() works as epxected.

commit 3648ab0355979b2ac706d50db2cb9129b0375e0a
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Nov 14 12:49:25 2017 -0800

    Add comments for ApplicationProtocolConfig
    
    Motivation:
    The behavior for SelectorFailureBehavior and SelectedListenerFailureBehavior enum values are not clear. Additional comments would clarify the expected behavior.
    
    Modifications:
    - Add comments for each value in SelectedListenerFailureBehavior and SelectorFailureBehavior which clarify the expected behavior
    
    Result:
    The behavior of SelectedListenerFailureBehavior and SelectorFailureBehavior are more clearly communicated.

commit 72a216625f16617579f0c0102a7d6624865148d6
Author: Violeta Georgieva <milesg78@gmail.com>
Date:   Fri Nov 10 10:33:29 2017 +0200

    Correctly handle 205 Reset Content response with transfer-encoding
    
    Motivation:
    
    According to RFC 7231 the server may choose to:
    ```
    indicate a zero-length payload for the response by including a
    Transfer-Encoding header field with a value of chunked and a message
    body consisting of a single chunk of zero-length
    ```
    https://tools.ietf.org/html/rfc7231#page-53
    
    In such cases the exception below appears during decoding phase:
    ```
    java.lang.IllegalArgumentException: invalid version format: 0
    	at io.netty.handler.codec.http.HttpVersion.<init>(HttpVersion.java:121)
    	at io.netty.handler.codec.http.HttpVersion.valueOf(HttpVersion.java:76)
    	at io.netty.handler.codec.http.HttpResponseDecoder.createMessage(HttpResponseDecoder.java:118)
    	at io.netty.handler.codec.http.HttpObjectDecoder.decode(HttpObjectDecoder.java:219)
    ```
    
    Modifications:
    
    HttpObjectDecoder.isContentAlwaysEmpty specifies content NOT empty
    when 205 Reset Content response
    
    Result:
    
    There is no `IllegalArgumentException: invalid version format: 0`
    when handling 205 Reset Content response with transfer-encoding

commit 25d146038cd825311b93bbabeb3f979796bd71d3
Author: lutovich <konstantin.lutovich@neotechnology.com>
Date:   Mon Nov 13 15:50:14 2017 +0100

    Improved error message in FixedChannelPool
    
    Motivation:
    
    `FixedChannelPool` allows users to configure `acquireTimeoutMillis`
    and expects given value to be greater or equal to zero when timeout
    action is supplied. However, validation error message said that
    value is expected to be greater or equal to one. Code performs
    check against zero.
    
    Modifications:
    
    Changed error message to say that value greater or equal to
    zero is expected. Added test to check that zero is an acceptable
    value.
    
    Result:
    
    Exception with right error message is thrown.

commit 0013567cd89bd3c3b042f44ccdcafc21fc126704
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Nov 13 13:40:27 2017 +0100

    Don't try to use UnixResolverDnsServerAddressStreamProvider when on Windows.
    
    Motivation:
    
    We should not try to use UnixResolverDnsServerAddressStreamProvider when on Windows as it will log some error that will produce noise and may confuse users.
    
    Modifications:
    
    Just use DefaultDnsServerAddressStreamProvider if windows is used.
    
    Result:
    
    Less noise in the logs. This was reported in vert.x: https://github.com/eclipse/vert.x/issues/2204

commit 1f1a60ae7dfe458d94d64886d01216b75b0884e1
Author: Anuraag Agrawal <anuraaga@gmail.com>
Date:   Sat Nov 11 16:09:32 2017 +0900

    Use Netty's DefaultPriorityQueue instead of JDK's PriorityQueue for scheduled tasks
    
    Motivation:
    
    `AbstractScheduledEventExecutor` uses a standard `java.util.PriorityQueue` to keep track of task deadlines. `ScheduledFuture.cancel` removes tasks from this `PriorityQueue`. Unfortunately, `PriorityQueue.remove` has `O(n)` performance since it must search for the item in the entire queue before removing it. This is fast when the future is at the front of the queue (e.g., already triggered) but not when it's randomly located in the queue.
    
    Many servers will use `ScheduledFuture.cancel` on all requests, e.g., to manage a request timeout. As these cancellations will be happen in arbitrary order, when there are many scheduled futures, `PriorityQueue.remove` is a bottleneck and greatly hurts performance with many concurrent requests (>10K).
    
    Modification:
    
    Use netty's `DefaultPriorityQueue` for scheduling futures instead of the JDK. `DefaultPriorityQueue` is almost identical to the JDK version except it is able to remove futures without searching for them in the queue. This means `DefaultPriorityQueue.remove` has `O(log n)` performance.
    
    Result:
    
    Before - cancelling futures has varying performance, capped at `O(n)`
    After - cancelling futures has stable performance, capped at `O(log n)`
    
    Benchmark results
    
    After - cancelling in order and in reverse order have similar performance within `O(log n)` bounds
    ```
    Benchmark                                           (num)   Mode  Cnt       Score      Error  Units
    ScheduledFutureTaskBenchmark.cancelInOrder            100  thrpt   20  137779.616 ± 7709.751  ops/s
    ScheduledFutureTaskBenchmark.cancelInOrder           1000  thrpt   20   11049.448 ±  385.832  ops/s
    ScheduledFutureTaskBenchmark.cancelInOrder          10000  thrpt   20     943.294 ±   12.391  ops/s
    ScheduledFutureTaskBenchmark.cancelInOrder         100000  thrpt   20      64.210 ±    1.824  ops/s
    ScheduledFutureTaskBenchmark.cancelInReverseOrder     100  thrpt   20  167531.096 ± 9187.865  ops/s
    ScheduledFutureTaskBenchmark.cancelInReverseOrder    1000  thrpt   20   33019.786 ± 4737.770  ops/s
    ScheduledFutureTaskBenchmark.cancelInReverseOrder   10000  thrpt   20    2976.955 ±  248.555  ops/s
    ScheduledFutureTaskBenchmark.cancelInReverseOrder  100000  thrpt   20     362.654 ±   45.716  ops/s
    ```
    
    Before - cancelling in order and in reverse order have significantly different performance at higher queue size, orders of magnitude worse than the new implementation.
    ```
    Benchmark                                           (num)   Mode  Cnt       Score       Error  Units
    ScheduledFutureTaskBenchmark.cancelInOrder            100  thrpt   20  139968.586 ± 12951.333  ops/s
    ScheduledFutureTaskBenchmark.cancelInOrder           1000  thrpt   20   12274.420 ±   337.800  ops/s
    ScheduledFutureTaskBenchmark.cancelInOrder          10000  thrpt   20     958.168 ±    15.350  ops/s
    ScheduledFutureTaskBenchmark.cancelInOrder         100000  thrpt   20      53.381 ±    13.981  ops/s
    ScheduledFutureTaskBenchmark.cancelInReverseOrder     100  thrpt   20  123918.829 ±  3642.517  ops/s
    ScheduledFutureTaskBenchmark.cancelInReverseOrder    1000  thrpt   20    5099.810 ±   206.992  ops/s
    ScheduledFutureTaskBenchmark.cancelInReverseOrder   10000  thrpt   20      72.335 ±     0.443  ops/s
    ScheduledFutureTaskBenchmark.cancelInReverseOrder  100000  thrpt   20       0.743 ±     0.003  ops/s
    ```

commit 2adb8bd80f5d19d049ffb7257172cb8d6f1273d2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Nov 7 19:10:19 2017 -0800

    Use Parameterized to run SslHandler tests with different SslProviders.
    
    Motivation:
    
    At the moment use loops to run SslHandler tests with different SslProviders which is error-prone and also make it difficult to understand with which provider these failed.
    
    Modifications:
    
    - Move unit tests that should run with multiple SslProviders to extra class.
    - Use junit Parameterized to run with different SslProvider combinations
    
    Result:
    
    Easier to understand which SslProvider produced test failures

commit cc069722a2d3ecdd6ec1dc9ae8245eca3e8d734f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Nov 9 08:48:19 2017 -0800

    CompositeBytebuf.copy() and copy(...) should respect the allocator
    
    Motivation:
    
    When calling CompositeBytebuf.copy() and copy(...) we currently use Unpooled to allocate the buffer. This is not really correct and may produce more GC then needed. We should use the allocator that was used when creating the CompositeByteBuf to allocate the new buffer which may be for example the PooledByteBufAllocator.
    
    Modifications:
    
    - Use alloc() to allocate the new buffer.
    - Add tests
    - Fix tests that depend on the copy to be backed by an byte-array without checking hasArray() first.
    
    Result:
    
    Fixes [#7393].

commit 188ea59c9d5be75ee0879c114a20e6b633e3714b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Nov 8 22:36:53 2017 +0000

    [maven-release-plugin] prepare for next development iteration

commit 812354cf1f5835d9c2627a48c4c50e18daa43f61
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Nov 8 22:36:33 2017 +0000

    [maven-release-plugin] prepare release netty-4.1.17.Final

commit 3554646a600d8b20570cad498d7a5c5ce7a966de
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Nov 8 07:41:23 2017 -0800

    Correctly convert empty HttpContent to ByteBuf
    
    Motivation:
    
    93130b172a61815354267f0f3d8f5af52de39754 introduced a regression where we not "converted" an empty HttpContent to ByteBuf and just passed it on in the pipeline. This can lead to the situation that other handlers in the pipeline will see HttpContent instances which is not expected.
    
    Modifications:
    
    - Correctly convert HttpContent to ByteBuf when empty
    - Add unit test.
    
    Result:
    
    Handlers in the pipeline will see the expected message type.

commit 73e8122fc1d1d5ba1b913ad5df377067cdf37242
Author: Ning Sun <sunng@about.me>
Date:   Wed Nov 8 23:29:14 2017 +0800

    Fix sharable check logic
    Motivation:
    
    There is an logic issue when checking if ChannelHandler is sharable.
    
    Modification:
    
    Corrected || to &&

commit ef5ebb40c98eb1d329e8c451f402f03bf5425e52
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Mon Nov 6 15:33:28 2017 -0800

    Keep all leak records up to the target amount
    
    Motivation:
    When looking for a leak, its nice to be able to request at least a
    number of leaks.
    
    Modification:
    
    * Made all leak records up to the target amoutn recorded, and only
      then enable backing off.
    * Enable recording more than 32 elements.  Previously the shift
      amount made this impossible.
    
    Result:
    Ability to record all accesses.

commit 7511c15187429404f70b64ead9b7693206ff9d54
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Nov 7 09:54:17 2017 -0800

    AbstractCoalescingBufferQueue addFirst void promise handling
    
    Motivation:
    AbstractCoalescingBufferQueue#add accounts for void promises, but AbstractCoalescingBufferQueue#addFirst does not. These methods should be consistent.
    
    Modifications:
    - AbstractCoalescingBufferQueue#addFirst should account for void promises and share code with AbstractCoalescingBufferQueue#add
    
    Result:
    More correct void promise handling in AbstractCoalescingBufferQueue.

commit 8c5eeb581e2deb64e6f7bfc9dabee4475bebbbf3
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Nov 7 07:46:14 2017 -0800

    SslHandler promise completion incorrect if write doesn't immediately
    complete
    
    Motivation:
    SslHandler removes a Buffer/Promise pair from
    AbstractCoalescingBufferQueue when wrapping data. However it is possible
    the SSLEngine will not consume the entire buffer. In this case
    SslHandler adds the Buffer back to the queue, but doesn't add the
    Promise back to the queue. This may result in the promise completing
    immediately in finishFlush, and generally not correlating to the
    completion of writing the corresponding Buffer
    
    Modifications:
    - AbstractCoalescingBufferQueue#addFirst should also support adding the
    ChannelPromise
    - In the event of a handshake timeout we should immediately fail pending
    writes immediately to get a more accurate exception
    
    Result:
    Fixes https://github.com/netty/netty/issues/7378.

commit 8618a3351cbecc68562c06c409538b182077f8d9
Author: Scott Mitchell <scott.k.mitch1@gmail.com>
Date:   Sat Nov 4 16:37:06 2017 -0700

    ReadOnlyHttpHeaders
    
    Motivation:
    For use cases that create headers, but do not need to modify them a read only variant of HttpHeaders would be useful and may be able to provide better iteration performance for encoding.
    
    Modifications:
    - Introduce ReadOnlyHttpHeaders that is backed by a flat array
    
    Result:
    ReadOnlyHttpHeaders exists for non-modifiable HttpHeaders use cases.

commit e7f02b1dc0af2024a4ce3fa132f175da34e16303
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Sep 28 08:52:04 2017 +0200

    Set readPending to false when EOF is detected while issue an read
    
    Motivation:
    
    We need to set readPending to false when we detect a EOF while issue a read as otherwise we may not unregister from the Selector / Epoll / KQueue and so keep on receving wakeups.
    
    The important bit is that we may even get a wakeup for a read event but will still will only be able to read 0 bytes from the socket, so we need to be very careful when we clear the readPending. This can happen because we generally using edge-triggered mode for our native transports and because of the nature of edge-triggered we may schedule an read event just to find out there is nothing left to read atm (because we completely drained the socket on the previous read).
    
    Modifications:
    
    Set readPending to false when EOF is detected.
    
    Result:
    
    Fixes [#7255].

commit 570d96d8c212092186144cdcb9fe205750dfa8e1
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Nov 6 10:05:21 2017 -0800

    SslHandler leak
    
    Motivation:
    SslHandler only supports ByteBuf objects, but will not release objects of other types. SslHandler will also not release objects if its internal state is not correctly setup.
    
    Modifications:
    - Release non-ByteBuf objects in write
    - Release all objects if the SslHandler queue is not setup
    
    Result:
    Less leaks in SslHandler.

commit 35b0cd58fb5efce1b00474058b44474676cd6321
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Nov 3 17:09:42 2017 -0700

    HTTP/2 write of released buffer should not write and should fail the promise
    
    Motivation:
    HTTP/2 allows writes of 0 length data frames. However in some cases EMPTY_BUFFER is used instead of the actual buffer that was written. This may mask writes of released buffers or otherwise invalid buffer objects. It is also possible that if the buffer is invalid AbstractCoalescingBufferQueue will not release the aggregated buffer nor fail the associated promise.
    
    Modifications:
    - DefaultHttp2FrameCodec should take care to fail the promise, even if releasing the data throws
    - AbstractCoalescingBufferQueue should release any aggregated data and fail the associated promise if something goes wrong during aggregation
    
    Result:
    More correct handling of invalid buffers in HTTP/2 code.

commit bcad9dbf97b1f5fe77e9e7e4369064a9cb1e2139
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Nov 6 09:21:42 2017 -0800

    Revert "Set readPending to false when ever a read is done"
    
    This reverts commit 413c7c2cd82e09dac481ea52ba2cb88ffcd58624 as it introduced an regression when edge-triggered mode is used which is true for our native transports by default. With 413c7c2cd82e09dac481ea52ba2cb88ffcd58624 included it was possible that we set readPending to false by mistake even if we would be interested in read more.

commit e0bbff74f7097f000472785982ad86c0ce891567
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Nov 3 08:28:34 2017 +0100

    Correctly handle WebSockets 00 when using HttpClientCodec.
    
    Motivation:
    
    7995afee8f1cb9047709239321d84ccb279fe4d1 introduced a change that broke special handling of WebSockets 00.
    
    Modifications:
    
    Correctly delegate to super method which has special handling for WebSockets 00.
    
    Result:
    
    Fixes [#7362].

commit 93130b172a61815354267f0f3d8f5af52de39754
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Nov 2 15:08:28 2017 -0700

    HttpObjectEncoder and MessageAggregator EMPTY_BUFFER usage
    
    Motivation:
    HttpObjectEncoder and MessageAggregator treat buffers that are not readable special. If a buffer is not readable, then an EMPTY_BUFFER is written and the actual buffer is ignored. If the buffer has already been released then this will not be correct as the promise will be completed, but in reality the original content shouldn't have resulted in any write because it was invalid.
    
    Modifications:
    - HttpObjectEncoder should retain/write the original buffer instead of using EMPTY_BUFFER
    - MessageAggregator should retain/write the original ByteBufHolder instead of using EMPTY_BUFFER
    
    Result:
    Invalid write operations which happen to not be readable correctly reflect failed status in the promise, and do not result in any writes to the channel.

commit fbe0e3506e779a9d5c93dfa203b56eec4fdabf1c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Oct 30 20:45:24 2017 -0700

    OpenSslEngine support unwrap plaintext greater than 2^14 and avoid
    infinite loop
    
    Motivation:
    If SslHandler sets jdkCompatibilityMode to false and ReferenceCountedOpenSslEngine sets jdkCompatibilityMode to true there is a chance we will get stuck in an infinite loop if the peer sends a TLS packet with length greater than 2^14 (the maximum length allowed in the TLS 1.2 RFC [1]). However there are legacy implementations which actually send larger TLS payloads than 2^14 (e.g. OpenJDK's SSLSessionImpl [2]) and in this case ReferenceCountedOpenSslEngine will return BUFFER_OVERFLOW in an attempt to notify that a larger buffer is to be used, but if the buffer is already at max size this process will repeat indefinitely.
    
    [1] https://tools.ietf.org/html/rfc5246#section-6.2.1
    [2] http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/d5a00b1e8f78/src/share/classes/sun/security/ssl/SSLSessionImpl.java#l793
    
    Modifications:
    - Support TLS payload sizes greater than 2^14 in ReferenceCountedOpenSslEngine
    - ReferenceCountedOpenSslEngine should throw an exception if a
    BUFFER_OVERFLOW is impossible to rectify
    
    Result:
    No more infinite loop in ReferenceCountedOpenSslEngine due to
    BUFFER_OVERFLOW and large TLS payload lengths.

commit 7321418eb550ff5737b11acbc2843b29b466e968
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Nov 1 08:09:04 2017 +0100

    Fix possible NPE in ReferenceCountedOpenSslEngine.rejectRemoteInitiatedRenegotiation()
    
    Motivation:
    
    ReferenceCountedOpenSslEngine.rejectRemoteInitiatedRenegotiation() is called in a finally block to ensure we always check for renegotiation. The problem here is that sometimes we will already shutdown the engine before we call the method which will lead to an NPE in this case as the ssl pointer was already destroyed.
    
    Modifications:
    
    Check that the engine is not destroyed yet before calling SSL.getHandshakeCount(...)
    
    Result:
    
    Fixes [#7353].

commit fa584c146f96bd3448f0b06fac8708e5d5b48480
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Oct 31 13:20:02 2017 -0700

    SslHandler dervies jdkCompatibilityMode from SSLEngine
    
    Motivation:
    Some SSLEngine implementations (e.g. ReferenceCountedOpenSslContext) support unwrapping/wrapping multiple packets at a time. The SslHandler behaves differently if the SSLEngine supports this feature, but currently requires that the constructor argument between the SSLEngine creation and SslHandler are coordinated. This can be difficult, or require package private access, if extending the SslHandler.
    
    Modifications:
    - The SslHandler should inspect the SSLEngine to see if it supports jdkCompatibilityMode instead of relying on getting an extra constructor argument which maybe out of synch with the SSLEngine
    
    Result:
    Easier to override SslHandler and have consistent jdkCompatibilityMode between SSLEngine and SslHandler.

commit ad1f0d46b38b711b45456768135df055eec04280
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Oct 24 19:52:55 2017 +0200

    Take the architecture into account when loading netty-tcnative
    
    Motivation:
    
    We should ensure we only try to load the netty-tcnative version that was compiled for the architecture we are using.
    
    Modifications:
    
    Include architecture into native lib name.
    
    Result:
    
    Only load native lib if the architecture is supported.

commit cdb2a27857e2dc0bc12ac97eaf2edd23a6467568
Author: Janusz Dziemidowicz <rraptorr@nails.eu.org>
Date:   Thu Oct 26 17:17:02 2017 +0200

    Add TCP_FASTOPEN_CONNECT epoll option
    
    Motivation:
    
    Linux kernel 4.11 introduced a new socket option,
    TCP_FASTOPEN_CONNECT, that greatly simplifies making TCP Fast Open
    connections on client side. Usually simply setting the flag before
    connect() call is enough, no more changes are required.
    
    Details can be found in kernel commit:
    https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=19f6d3f3
    
    Modifications:
    
    TCP_FASTOPEN_CONNECT socket option was added to EpollChannelOption
    class.
    
    Result:
    
    Netty clients can easily make TCP Fast Open connections. Simply
    calling option(EpollChannelOption.TCP_FASTOPEN_CONNECT, true) in
    client bootstrap is enough (given recent enough kernel).

commit 7995afee8f1cb9047709239321d84ccb279fe4d1
Author: Piotr Kołaczkowski <pkolaczk@datastax.com>
Date:   Fri Oct 13 12:40:53 2017 +0200

    Don't disable HttpObjectDecoder on upgrade from HTTP/1.x to HTTP/1.x over TLS
    
    This change allows to upgrade a plain HTTP 1.x connection to TLS
    according to RFC 2817. Switching the transport layer to TLS should be
    possible without removing HttpClientCodec from the pipeline,
    because HTTP/1.x layer of the protocol remains untouched by the switch
    and the HttpClientCodec state must be retained for proper
    handling the remainder of the response message,
    per RFC 2817 requirement in point 3.3:
    
      Once the TLS handshake completes successfully, the server MUST
      continue with the response to the original request.
    
    After this commit, the upgrade can be established by simply
    inserting an SslHandler at the front of the pipeline after receiving
    101 SWITCHING PROTOCOLS response, exactly as described in SslHander
    documentation.
    
    Modifications:
    - Don't set HttpObjectDecoder into UPGRADED state if
      101 SWITCHING_PROTOCOLS response contains HTTP/1.0 or HTTP/1.1 in
      the protocol stack described by the Upgrade header.
    - Skip pairing comparison for 101 SWITCHING_PROTOCOLS, similar
      to 100 CONTINUE, since 101 is not the final response to the original
      request and the final response is expected after TLS handshake.
    
    Fixes #7293.

commit 58e74e9fee1c12eb3a73c38109cfd081750992b6
Author: Trask Stalnaker <trask.stalnaker@gmail.com>
Date:   Wed Oct 25 20:05:42 2017 -0700

    Support running Netty in bootstrap class loader
    
    Motivation:
    
    Fix NullPointerExceptions that occur when running netty-tcnative inside the bootstrap class loader.
    
    Modifications:
    
    - Replace loader.getResource(...) with ClassLoader.getSystemResource(...) when loader is null.
    - Replace loader.loadClass(...) with Class.forName(..., false, loader) which works when loader is both null and non-null.
    
    Result:
    
    Support running native libs in bootstrap class loader

commit 911b2acc5086415d762a2050609827b13c521dfd
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Oct 23 14:53:53 2017 -0700

    HTTP/2 Child Channel reading and flushing
    
    Motivation:
    If a child channel's read is triggered outside the parent channel's read
    loop then it is possible a WINDOW_UPDATE will be written, but not
    flushed.
    If a child channel's beginRead processes data from the inboundBuffer and
    then readPending is set to false, which will result in data not being
    delivered if in the parent's read loop and more data is attempted to be
    delievered to that child channel.
    
    Modifications:
    - The child channel must force a flush if a frame is written as a result
    of reading a frame, and this is not in the parent channel's read loop
    - The child channel must allow a transition from dequeueing from
    beginRead into the parent channel's read loop to deliver more data
    
    Result:
    The child channel flushes data when reading outside the parent's read
    loop, and has frames delivered more reliably.

commit 413c7c2cd82e09dac481ea52ba2cb88ffcd58624
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Oct 23 11:38:25 2017 -0700

    Set readPending to false when ever a read is done
    
    Motivation:
    readPending is currently only set to false if data is delivered to the application, however this may result in duplicate events being received from the selector in the event that the socket was closed.
    
    Modifications:
    - We should set readPending to false before each read attempt for all
    transports besides NIO.
    - Based upon the Javadocs it is possible that NIO may have spurious
    wakeups [1]. In this case we should be more cautious and only set
    readPending to false if data was actually read.
    
    [1] https://docs.oracle.com/javase/7/docs/api/java/nio/channels/SelectionKey.html
    That a selection key's ready set indicates that its channel is ready for some operation category is a hint, but not a guarantee, that an operation in such a category may be performed by a thread without causing the thread to block.
    
    Result:
    Notification from the selector (or simulated events from kqueue/epoll ET) in the event of socket closure.
    Fixes https://github.com/netty/netty/issues/7255

commit 424bb09d2424114ee0f81a397f1079ccd21ebf64
Author: Lionel Li <lionel_li@apple.com>
Date:   Mon Oct 16 15:18:31 2017 -0700

    Http2StreamFrameToHttpObjectCodec should handle 100-Continue properly
    
    Motivation:
    Http2StreamFrameToHttpObjectCodec was not properly encoding and
    decoding 100-Continue HttpResponse/Http2SettingsFrame properly. It was
    encoding 100-Continue FullHttpResponse as an Http2SettingFrame with
    endStream=true, causing the child channel to terminate. It was not
    decoding 100-Continue Http2SettingsFrame (endStream=false) as
    FullHttpResponse. This should be fixed as it would cause http2 child
    stream to prematurely close, and could cause HttpObjectAggregator to
    fail if it's in the pipeline.
    
    Modification:
    - Fixed encode() to properly encode 100-Continue FullHttpResponse as
      Http2SettingsFrame with endStream=false
    - Reject 100-Continue HttpResponse that are NOT FullHttpResponse
    - Fixed decode() to properly decode 100-Continue Http2SettingsFrame
      (endStream=false) as a FullHttpResponse
    - made Http2StreamFrameToHttpObjectCodec sharable so that it can b used
      among child streams within the same Http2MultiplexCodec
    
    Result:
    Now Http2StreamFrameToHttpObjectCodec should be properly handling
    100-Continue responses.

commit 8aeba78ecc9c9c3806ca729120c57e521f3d0501
Author: Dmitry Minkovsky <dminkovsky@gmail.com>
Date:   Tue Oct 24 19:28:07 2017 +0200

    HttpPostMultipartRequestDecoder should decode header field parameters
    
    Motivation:
    
    I am receiving a multipart/form_data upload from a Mailgun webhook. This webhook used to send parts like this:
    
    --74e78d11b0214bdcbc2f86491eeb4902
    Content-Disposition: form-data; name="attachment-2"; filename="attached_Ñ�Ð°Ð¹Ð».txt"
    Content-Type: text/plain
    Content-Length: 32
    
    This is the content of the file
    
    --74e78d11b0214bdcbc2f86491eeb4902--
    but now it posts parts like this:
    
    --74e78d11b0214bdcbc2f86491eeb4902
    Content-Disposition: form-data; name="attachment-2"; filename*=utf-8''attached_%D1%84%D0%B0%D0%B9%D0%BB.txt
    
    This is the content of the file
    
    --74e78d11b0214bdcbc2f86491eeb4902--
    This new format uses field parameter encoding described in RFC 5987. More about this encoding can be found here.
    
    Netty does not parse this format. The result is the filename is not decoded and the part is not parsed into a FileUpload.
    
    Modification:
    
    Added failing test in HttpPostRequestDecoderTest.java and updated HttpPostMultipartRequestDecoder.java
    Refactored to please Netkins
    Result:
    
    Fixes:
    
    HttpPostMultipartRequestDecoder identifies the RFC 5987 format and parses it.
    Previous functionality is retained.

commit e62e6df4acd8d66623fdce271e009d3fe76d203d
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Mon Oct 23 13:34:12 2017 -0700

    Use WeakReferences for Resource Leaks
    
    Motivation:
    Phantom references are for cleaning up resources that were
    forgotten, which means they keep their referent alive.   This
    means garbage is kept around until the refqueue is drained, rather
    than when the reference is unreachable.
    
    Modification:
    Use Weak References instead of Phantoms
    
    Result:
    More punctual leak detection.

commit 92b786e2f33a44f16be224305fe4fb716422b14a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Oct 24 14:19:32 2017 +0200

    Fix possible leak in SslHandler if wrap(...) throws.
    
    Motivation:
    
    We can end up with a buffer leak if SSLEngine.wrap(...) throws.
    
    Modifications:
    
    Correctly release the ByteBuf if SSLEngine.wrap(...) throws.
    
    Result:
    
    Fixes [#7337].

commit dcbbae7f9006f5b995d055702dd1c9f55f0e0c9d
Author: Ned Twigg <ned.twigg@diffplug.com>
Date:   Sun Oct 22 22:18:24 2017 -0700

    Added QueryStringDecoder.rawPath() and rawQuery()
    
    Motivation:
    
    Before this commit, it is impossible to access the path component of the
    URI before it has been decoded.  This makes it impossible to distinguish
    between the following URIs:
    
    /user/title?key=value
    /user%2Ftitle?key=value
    
    The user could already access the raw uri value, but they had to calculate
    pathEndIdx themselves, even though it might already be cached inside
    QueryStringDecoder.
    
    Result:
    
    The user can easily and efficiently access the undecoded path and query.

commit baf273aea88b5c8124cacd4b4bf17a6807bf88fc
Author: Lionel Li <lionel_li@apple.com>
Date:   Mon Oct 23 10:30:25 2017 -0700

    Trigger user event when H2 conn preface & SETTINGS frame are sent
    
    Motivation:
    Previously client Http2ConnectionHandler trigger a user event
    immediately when the HTTP/2 connection preface is sent. Any attempt to
    immediately send a new request could cause the server to terminate the
    connection, as it might not have received the SETTINGS frame from the
    client. Per RFC7540 Section 3.5, the preface "MUST be followed by a
    SETTINGS frame (Section 6.5), which MAY be empty."
    (https://tools.ietf.org/html/rfc7540#section-3.5)
    
    This event could be made more meaningful if it also indicates that the
    initial client SETTINGS frame has been sent to signal that the channel
    is ready to send new requests.
    
    Modification:
    - Renamed event to Http2ConnectionPrefaceAndSettingsFrameWrittenEvent.
    - Modified Http2ConnectionHandler to trigger the user event only if it
      is a client and it has sent both the preface and SETTINGS frame.
    
    Result:
    It is now safe to use the event as an indicator that the HTTP/2
    connection is ready to send new requests.

commit 55b501d0d47c24a5db84386be11994b2eaf14579
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Oct 21 14:30:16 2017 +0200

    Correctly update Channel writability when queueing data in SslHandler.
    
    Motivation:
    
    A regression was introduced in 86e653e which had the effect that the writability was not updated for a Channel while queueing data in the SslHandler.
    
    Modifications:
    
    - Factor out code that will increment / decrement pending bytes and use it in AbstractCoalescingBufferQueue and PendingWriteQueue
    - Add test-case
    
    Result:
    
    Channel writability changes are triggered again.

commit d8e187ff2c30ce75d610e0079164841d919d839e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Oct 5 15:08:00 2017 +0200

    Ensure setting / getting the traffic class on an ipv4 only system works when using the native transport.
    
    Motivation:
    
    We tried to set IPV6 opts on an ipv4 only system and so failed to set / get the traffic opts. This resulted in a test-error when trying to compile netty on ipv4 only systems.
    
    Modifications:
    
    Use the correct opts depending on if the system is ipv4 only or not.
    
    Result:
    
    Be able to build and use on ipv4 only systems.

commit dcc39e5b21eda7bdd9563ed86253a693923f6432
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Tue Oct 24 00:53:31 2017 +0500

    Fixes a LoggingHandler#format method with two arguments
    
    Motivation:
    Bug in capacity calculation: occurs auto convert to string instead of sum up.
    
    Modifications:
    Use `eventName.length()` in sum.
    
    Result:
    Less trash in logs.

commit 521e87984dcff49d556a5696ed5de0b72a8a1797
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Oct 5 15:10:41 2017 +0200

    SslHandler.setHandshakeTimeout*(...) should also been enforced on the server side.
    
    Motivation:
    
    We should also enforce the handshake timeout on the server-side to allow closing connections which will not finish the handshake in an expected amount of time.
    
    Modifications:
    
    - Enforce the timeout on the server and client side
    - Add unit test.
    
    Result:
    
    Fixes [#7230].

commit dcb828f02fd69aaa1d77b70d41a2a1c4799f2527
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Oct 11 14:50:45 2017 -0700

    DnsResolver CNAME redirect bug
    
    Motviation:
    DnsNameResolverContext#followCname attempts to build a query to follow a CNAME, but puts the original hostname in the DnsQuery instead of the CNAME hostname. This will result in not following CNAME redirects correctly.
    
    Result:
    - DnsNameResolverContext#followCname should use the CNAME instead of the original hostname when building the DnsQuery
    
    Result:
    More correct handling of redirect queries.

commit dc98eae5a5a3ac4d4e7b50d4d38018993d52616b
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Sun Oct 22 21:39:36 2017 +0500

    Correct filling an `origin` header for WS client
    
    Motivation:
    An `origin`/`sec-websocket-origin` header value in websocket client is filling incorrect in some cases:
    - Hostname is not converting to lower-case as prescribed by RFC 6354 (see [1]).
    - Selecting a `http` scheme when source URI has `wss`/`https` scheme and non-standard port.
    
    Modifications:
    - Convert uri-host to lower-case.
    - Use a `https` scheme if source URI scheme is `wss`/`https`, or if source scheme is null and port == 443.
    
    Result:
    Correct filling an `origin` header for WS client.
    
    [1] https://tools.ietf.org/html/rfc6454#section-4

commit d93c607f9317633c0741ae157d4ec9fc590867ec
Author: Idel Pivnitskiy <idel.pivnitskiy@gmail.com>
Date:   Sun Oct 22 15:20:52 2017 -0700

    Update links for actual Protobuf repo and documentation
    
    Motivation:
    
    Use actual links to new locations of Protobuf repo and documentation to
    avoid problems when redirect will not work.
    
    Modification:
    
    Links in comments and all/pom.xml
    
    Result:
    
    Correct links to Protobuf resources

commit 740c68faed4b6c5b5f7b5daec195cf5fc5926d70
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Oct 22 13:23:06 2017 +0200

    Add supresswarnings to cleanup 16b1dbdf9244f831aa0cd92d5531d8cb61010b07.
    
    Motivation:
    
    We should add @SupressWarnings
    
    Modifications:
    
    Add annotations.
    
    Result:
    
    Less warnings

commit 4793daa589ffeb52886409a01e607d3dbe42551a
Author: Idel Pivnitskiy <idel.pivnitskiy@gmail.com>
Date:   Sat Oct 14 07:28:54 2017 -0700

    Make Comparators Serializable
    
    Motivation:
    
    Objects of java.util.TreeMap or java.util.TreeSet will become
    non-Serializable if instantiated with Comparators, which are not also
     Serializable. This can result in unexpected and difficult-to-diagnose
     bugs.
    
    Modifications:
    
    Implements Serializable for all classes, which implements Comparator.
    
    Result:
    
    Proper Comparators which will not force collections to
    non-Serializable mode.

commit 50a067a8f72b518fd1c9a2539cd777e00625436e
Author: Idel Pivnitskiy <idel.pivnitskiy@gmail.com>
Date:   Sat Oct 14 06:49:45 2017 -0700

    Make methods 'static' where it possible
    
    Motivation:
    
    Even if it's a super micro-optimization (most JVM could optimize such
     cases in runtime), in theory (and according to some perf tests) it
     may help a bit. It also makes a code more clear and allows you to
     access such methods in the test scope directly, without instance of
     the class.
    
    Modifications:
    
    Add 'static' modifier for all methods, where it possible. Mostly in
    test scope.
    
    Result:
    
    Cleaner code with proper 'static' modifiers.

commit 17e1a26d64fa2d2bfcd068bbaf68803bad949b42
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Sat Oct 14 00:48:30 2017 +0500

    Fixes a javadoc for ByteBufUtil#copy method
    
    Motivation:
    Javadoc of the `ByteBufUtil#copy(AsciiString, int, ByteBuf, int, int)` is incorrect.
    
    Modifications:
    Fix it.
    
    Result:
    The description of the `#copy` method is not misleading.

commit 09dd6a5d4d96fed5364187e5df678f063ab5c6e0
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Sat Oct 14 00:17:55 2017 +0500

    Minor improvements in ByteBufOutputStream
    
    Motivation:
    In the `ByteBufOutputStream` we can use an appropriate methods of `ByteBuf`
    to reduce calls of virtual methods and do not copying converting logic.
    
    Modifications:
    - Use an appropriate methods of `ByteBuf`
    - Remove redundant conversions (int -> byte, int -> char).
    - Use `ByteBuf#writeCharSequence` in the `writeBytes(String)'.
    
    Result:
    Less code duplication. A `writeBytes(String)` method is faster.
    No unnecessary conversions. More consistent and cleaner code.

commit 558097449cb9719f0ebd5332b954d06fe8280e86
Author: Idel Pivnitskiy <idel.pivnitskiy@gmail.com>
Date:   Sat Oct 14 07:16:04 2017 -0700

    Add missed 'serialVersionUID' field for Serializable classes
    
    Motivation:
    
    Without a 'serialVersionUID' field, any change to a class will make
    previously serialized versions unreadable.
    
    Modifications:
    
    Add missed 'serialVersionUID' field for all Serializable
    classes.
    
    Result:
    
    Proper deserialization of previously serialized objects.

commit 1b0a5459210181ac076c026981655f6757672377
Author: Cory Benfield <lukasa@apple.com>
Date:   Fri Oct 13 17:53:02 2017 -0700

    Do not send Content-Length: 0 on 101 responses.
    
    Motivation:
    
    During code read of the Netty codebase I noticed that the Netty
    HttpServerUpgradeHandler unconditionally sets a Content-Length: 0
    header on 101 Switching Protocols responses. This explicitly
    contravenes RFC 7230 Section 3.3.2 (Content-Length), which notes
    that:
    
        A server MUST NOT send a Content-Length header field in any
        response with a status code of 1xx (Informational) or 204
        (No Content).
    
    While it is unlikely that any client will ever be confused by
    this behaviour, there is no reason to contravene this part of the
    specification.
    
    Modifications:
    
    Removed the line of code setting the header field and changed the
    only test that expected it to be there.
    
    Result:
    
    When performing the server portion of HTTP upgrade, the 101
    Switching Protocols response will no longer contain a
    Content-Length: 0 header field.

commit 16b1dbdf9244f831aa0cd92d5531d8cb61010b07
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Mon Sep 18 17:46:39 2017 -0700

    Motivation: Resource Leak Detector (RLD) tries to helpfully indicate where an object was last accessed and report the accesses in the case the object was not cleaned up. It handles lightly used objects well, but drops all but the last few accesses.
    
    Configuring this is tough because there is split between highly shared (and accessed) objects and lightly accessed objects.
    
    Modification:
    There are a number of changes here.  In relative order of importance:
    
    API / Functionality changes:
    * Max records and max sample records are gone.  Only "target" records, the number of records tries to retain is exposed.
    * Records are sampled based on the number of already stored records.  The likelihood of recording a new sample is `2^(-n)`, where `n` is the number of currently stored elements.
    * Records are stored in a concurrent stack structure rather than a list.  This avoids a head and tail.  Since the stack is only read once, there is no need to maintain head and tail pointers
    * The properties of this imply that the very first and very last access are always recorded.  When deciding to sample, the top element is replaced rather than pushed.
    * Samples that happen between the first and last accesses now have a chance of being recorded.  Previously only the final few were kept.
    * Sampling is no longer deterministic.  Previously, a deterministic access pattern meant that you could conceivably always miss some access points.
    * Sampling has a linear ramp for low values and and exponentially backs off roughly equal to 2^n.  This means that for 1,000,000 accesses, about 20 will actually be kept.  I have an elegant proof for this which is too large to fit in this commit message.
    
    Code changes:
    * All locks are gone.  Because sampling rarely needs to do a write, there is almost 0 contention.  The dropped records counter is slightly contentious, but this could be removed or changed to a LongAdder.  This was not done because of memory concerns.
    * Stack trace exclusion is done outside of RLD.  Classes can opt to remove some of their methods.
    * Stack trace exclusion is faster, since it uses String.equals, often getting a pointer compare due to interning.  Previously it used contains()
    * Leak printing is outputted fairly differently.  I tried to preserve as much of the original formatting as possible, but some things didn't make sense to keep.
    
    Result:
    More useful leak reporting.
    
    Faster:
    ```
    Before:
    Benchmark                                           (recordTimes)   Mode  Cnt       Score      Error  Units
    ResourceLeakDetectorRecordBenchmark.record                      8  thrpt   20  136293.404 ± 7669.454  ops/s
    ResourceLeakDetectorRecordBenchmark.record                     16  thrpt   20   72805.720 ± 3710.864  ops/s
    ResourceLeakDetectorRecordBenchmark.recordWithHint              8  thrpt   20  139131.215 ± 4882.751  ops/s
    ResourceLeakDetectorRecordBenchmark.recordWithHint             16  thrpt   20   74146.313 ± 4999.246  ops/s
    
    After:
    Benchmark                                           (recordTimes)   Mode  Cnt       Score      Error  Units
    ResourceLeakDetectorRecordBenchmark.record                      8  thrpt   20  155281.969 ± 5301.399  ops/s
    ResourceLeakDetectorRecordBenchmark.record                     16  thrpt   20   77866.239 ± 3821.054  ops/s
    ResourceLeakDetectorRecordBenchmark.recordWithHint              8  thrpt   20  153360.036 ± 8611.353  ops/s
    ResourceLeakDetectorRecordBenchmark.recordWithHint             16  thrpt   20   78670.804 ± 2399.149  ops/s
    ```

commit 9bcf31977c69d2b70c486ac7af3c07e9f0db29c9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Oct 6 08:27:56 2017 +0200

    Fail the connectPromise with the correct exception if the connection is refused when using the native kqueue transport.
    
    Motivation:
    
    Due a bug we happen to sometimes fail the connectPromise with a ClosedChannelException when using the kqueue transport and the remote peer refuses the connection. We need to ensure we fail it with the correct exception.
    
    Modifications:
    
    Call finishConnect() before calling close() to ensure we preserve the correct exception.
    
    Result:
    
    KQueueSocketConnectionAttemptTest.testConnectionRefused will pass always on macOS.

commit 3fe1f715117d03d1597fc066ec2f8bc7abb51473
Author: Jason Tedor <jason@tedor.me>
Date:   Wed Oct 4 12:06:59 2017 -0400

    Do not treat errors as decoder exception (redux)
    
    Motivation: Today when Netty encounters a general error while decoding
    it treats this as a decoder exception. However, for fatal causes this
    should not be treated as such, instead the fatal error should be carried
    up the stack without the callee having to unwind causes. This was
    probably done for byte to byte message decoder but is now done for all
    decoders.
    
    Modifications: Instead of translating any error to a decoder exception,
    we let those unwind out the stack (note that finally blocks still
    execute) except in places where an event needs to fire where we fire
    with the error instead of wrapping in a decoder exception.
    
    Result: Fatal errors will not be treated as innocent decoder exceptions.

commit 3cca5dfa9257ff21643392bd2c413b5322252dc4
Author: Johno Crawford <johno.crawford@gmail.com>
Date:   Sat Oct 7 14:25:44 2017 +0200

    Update JCTools version
    
    Motivation:
    
    JCTools 2.1.0 contains package-info.class which doesn't load on JRE 6.
    
    Modifications:
    
    Change pom JCTools version.
    
    Result:
    
    Really fixes https://github.com/netty/netty/issues/7117

commit f301edfb9d91fedcdde63468eccde266efb05e50
Author: Johno Crawford <johno.crawford@gmail.com>
Date:   Sat Oct 7 10:28:06 2017 +0200

    Upgrade dependencies to versions which use ASM 6.0.0+
    
    Motivation:
    
    We need to upgrade our dependencies to versions which use ASM 6.0.0+ to support compiling on java9.
    
    Modifications:
    
    Update animal-sniffer-maven-plugin and maven-shade-plugin.
    
    Result:
    
    Fixes https://github.com/netty/netty/issues/6100

commit 5eca326c3568566f334b31b18f7866af19a989c8
Author: Jason Tedor <jason@tedor.me>
Date:   Wed Oct 4 12:06:59 2017 -0400

    Do not treat errors as decoder exception
    
    Motivation: Today when Netty encounters a general error while decoding
    it treats this as a decoder exception. However, for fatal causes this
    should not be treated as such, instead the fatal error should be carried
    up the stack without the callee having to unwind causes.
    
    Modifications: Instead of translating any error to a decoder exception,
    we let those unwind out the stack (note that finally blocks still
    execute).
    
    Result: Fatal errors will not be treated as innocent decoder exceptions.

commit d3ca087f6b35f8db3417324a62d43790f3d5fc62
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Mon Sep 25 21:44:12 2017 -0700

    Propagate all exceptions when loading native code
    
    Motivation:
    There are 2 motivations, the first depends on the second:
    
    Loading Netty Epoll statically stopped working in 4.1.16, due to
    `Native` always loading the arch specific shared object.  In a
    static binary, there is no arch specific SO.
    
    Second, there are a ton of exceptions that can happen when loading
    a native library.  When loading native code, Netty tries a bunch of
    different paths but a failure in any given may not be fatal.
    
    Additionally: turning on debug logging is not always feasible so
    exceptions get silently swallowed.
    
    Modifications:
    
    * Change Epoll and Kqueue to try the static load second
    * Modify NativeLibraryLoader to record all the locations where
      exceptions occur.
    * Attempt to use `addSuppressed` from Java 7 if available.
    
    Alternatives Considered:
    
    An alternative would be to record log messages at each failure.  If
    all load attempts fail, the log messages are printed as warning,
    else as debug. The problem with this is there is no `LogRecord` to
    create like in java.util.logging.  Buffering the args to
    logger.log() at the end of the method loses the call site, and
    changes the order of events to be confusing.
    
    Another alternative is to teach NativeLibraryLoader about loading
    the SO first, and then the static version.  This would consolidate
    the code fore Epoll, Kqueue, and TCNative.   I think this is the
    long term better option, but this PR is changing a lot already.
    Someone else can take a crack at it later
    
    Results:
    Epoll Still Loads and easier debugging.

commit 83a19d565064ee36998eb94f946e5a4264001065
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Mon Sep 25 15:55:23 2017 -0700

    Optimistically update ref counts
    
    Motivation:
    Highly retained and released objects have contention on their ref
    count.  Currently, the ref count is updated using compareAndSet
    with care to make sure the count doesn't overflow, double free, or
    revive the object.
    
    Profiling has shown that a non trivial (~1%) of CPU time on gRPC
    latency benchmarks is from the ref count updating.
    
    Modification:
    Rather than pessimistically assuming the ref count will be invalid,
    optimistically update it assuming it will be.  If the update was
    wrong, then use the slow path to revert the change and throw an
    execption.  Most of the time, the ref counts are correct.
    
    This changes from using compareAndSet to getAndAdd, which emits a
    different CPU instruction on x86 (CMPXCHG to XADD).  Because the
    CPU knows it will modifiy the memory, it can avoid contention.
    
    On a highly contended machine, this can be about 2x faster.
    
    There is a downside to the new approach.  The ref counters can
    temporarily enter invalid states if over retained or over released.
    The code does handle these overflow and underflow scenarios, but it
    is possible that another concurrent access may push the failure to
    a different location.  For example:
    
    Time 1 Thread 1: obj.retain(INT_MAX - 1)
    Time 2 Thread 1: obj.retain(2)
    Time 2 Thread 2: obj.retain(1)
    
    Previously Thread 2 would always succeed and Thread 1 would always
    fail on the second access.  Now, thread 2 could fail while thread 1
    is rolling back its change.
    
    ====
    
    There are a few reasons why I think this is okay:
    
    1. Buggy code is going to have bugs.  An exception _is_ going to be
       thrown.  This just causes the other threads to notice the state
       is messed up and stop early.
    2. If high retention counts are a use case, then ref count should
       be a long rather than an int.
    3. The critical section is greatly reduced compared to the previous
       version, so the likelihood of this happening is lower
    4. On error, the code always rollsback the change atomically, so
       there is no possibility of corruption.
    
    Result:
    Faster refcounting
    
    ```
    BEFORE:
    
    Benchmark                                                                                             (delay)    Mode      Cnt         Score    Error  Units
    AbstractReferenceCountedByteBufBenchmark.retainRelease_contended                                            1  sample  2901361       804.579 ±  1.835  ns/op
    AbstractReferenceCountedByteBufBenchmark.retainRelease_contended                                           10  sample  3038729       785.376 ± 16.471  ns/op
    AbstractReferenceCountedByteBufBenchmark.retainRelease_contended                                          100  sample  2899401       817.392 ±  6.668  ns/op
    AbstractReferenceCountedByteBufBenchmark.retainRelease_contended                                         1000  sample  3650566      2077.700 ±  0.600  ns/op
    AbstractReferenceCountedByteBufBenchmark.retainRelease_contended                                        10000  sample  3005467     19949.334 ±  4.243  ns/op
    AbstractReferenceCountedByteBufBenchmark.retainRelease_uncontended                                          1  sample   456091        48.610 ±  1.162  ns/op
    AbstractReferenceCountedByteBufBenchmark.retainRelease_uncontended                                         10  sample   732051        62.599 ±  0.815  ns/op
    AbstractReferenceCountedByteBufBenchmark.retainRelease_uncontended                                        100  sample   778925       228.629 ±  1.205  ns/op
    AbstractReferenceCountedByteBufBenchmark.retainRelease_uncontended                                       1000  sample   633682      2002.987 ±  2.856  ns/op
    AbstractReferenceCountedByteBufBenchmark.retainRelease_uncontended                                      10000  sample   506442     19735.345 ± 12.312  ns/op
    
    AFTER:
    Benchmark                                                                                             (delay)    Mode      Cnt         Score    Error  Units
    AbstractReferenceCountedByteBufBenchmark.retainRelease_contended                                            1  sample  3761980       383.436 ±  1.315  ns/op
    AbstractReferenceCountedByteBufBenchmark.retainRelease_contended                                           10  sample  3667304       474.429 ±  1.101  ns/op
    AbstractReferenceCountedByteBufBenchmark.retainRelease_contended                                          100  sample  3039374       479.267 ±  0.435  ns/op
    AbstractReferenceCountedByteBufBenchmark.retainRelease_contended                                         1000  sample  3709210      2044.603 ±  0.989  ns/op
    AbstractReferenceCountedByteBufBenchmark.retainRelease_contended                                        10000  sample  3011591     19904.227 ± 18.025  ns/op
    AbstractReferenceCountedByteBufBenchmark.retainRelease_uncontended                                          1  sample   494975        52.269 ±  8.345  ns/op
    AbstractReferenceCountedByteBufBenchmark.retainRelease_uncontended                                         10  sample   771094        62.290 ±  0.795  ns/op
    AbstractReferenceCountedByteBufBenchmark.retainRelease_uncontended                                        100  sample   763230       235.044 ±  1.552  ns/op
    AbstractReferenceCountedByteBufBenchmark.retainRelease_uncontended                                       1000  sample   634037      2006.578 ±  3.574  ns/op
    AbstractReferenceCountedByteBufBenchmark.retainRelease_uncontended                                      10000  sample   506284     19742.605 ± 13.729  ns/op
    
    ```

commit 940f15f0d2cbdbb05397832a0b3e8ac4d5dd1420
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Mon Oct 2 09:19:23 2017 +0200

    Use predefined HttpResponseStatus constant instead of hardcoded 101 code
    
    Motivation:
    
    #7269 removed an unnecessary instanciation for verifying WebSocket
    handshake status code.
    But it uses a hardcoded status code value for 101 instead of using the
    intended `HttpResponseStatus#SWITCHING_PROTOCOLS` constant.
    
    Modidication:
    
    Compare actual `HttpResponseStatus` against predefined constant. Note
    that `HttpResponseStatus#equals` is implemented in respect with the RFC
    (only honor code, not text) so it’s intended to be used this way.
    
    Result:
    
    Cleaner code, use intended constant instead of hard coded value.

commit bb1833f22c1e43cd5ea2d75fbc2c5587d062ac04
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Sep 28 09:16:03 2017 +0200

    Fix Java9SslEngine implementation of ApplicationProtocolAccessor and so fix ApplicationProtocolNegationHandler
    
    Motivation:
    
    Java9SslEngine did not correctly implement ApplicationProtocolAccessor and so returned an empty String when no extension was used while the interface contract is to return null. This lead to the situation that ApplicationProtocolNegationHandler did not correct work.
    
    Modifications:
    
    - Rename ApplicationProtocolAccessor.getApplicationProtocol() to getNegotiatedApplicationProtocol() which resolves the clash with the method exposed by Java9s SSLEngine.
    - Correctly implement getNegotiatedApplicationProtocol() for Java9Sslengine
    - Add delegate in Java9Sslengine.getApplicationProtocol() which is provided by Java9
    - Adjust tests to test the correct behaviour.
    
    Result:
    
    Fixes [#7251].

commit ad548a6a0add6a98723cfa119bf2c4c55b75a367
Author: Matt Belisle <matthew.belisle@workiva.com>
Date:   Thu Sep 28 10:49:35 2017 -0400

    Fixing CorsHandler response Content-Length
    
    Motivation:
    
    https://github.com/netty/netty/issues/7253
    
    Modifications:
    
    Adding `Content-Length: 0` to `CorsHandler.forbidden()` and `CorsHandler.handlePreflight()`
    
    Result:
    
    Contexts that are terminated by the CorsHandler will always include a Content-Length header

commit 06da0ceb64fc9ffecec5611aaccfb5db19a299a5
Author: 回眸,境界 <1162223173@qq.com>
Date:   Sun Oct 1 20:24:06 2017 +0800

    Fix typo in comment.

commit 78786e6052d108c29b407aa93a505692d0a8fe20
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Sun Oct 1 00:59:26 2017 +0500

    Remove unnecessary instantiation of HttpResponseStatus
    
    Motivation:
    - In the `HttpResponseStatus#equals` checks only status code. No need to create new instance of `HttpResponseStatus` for comparison with response status.
    - The RFC says: `the HTTP version and reason phrase aren't important` [1].
    
    Modifications:
    Use comparison by status code without creating new `HttpResponseStatus`.
    
    Result:
    Less allocations, more clear code.
    
    [1] https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00

commit 47f016bf564e9b86571fcb04d42f3ae327d0f58d
Author: Sky Ao <aoxiaojian@gmail.com>
Date:   Tue Sep 19 00:49:49 2017 +0800

    extract self() method to avoid too many unchecked @SuppressWarnings
    
    Motivation:
    
    There are many @SuppressWarnings("unchecked") in the code for the same purpose that we want to do this return:
    
    @SuppressWarnings("unchecked")
    public B someMethod() {
        ......
        return (B) this;
    }
    Modification:
    
    Add a method self() and reuse in all these return lines:
    
    @SuppressWarnings("unchecked")
        private B self() {
            return (B) this;
        }
    Result:
    
    Then only one @SuppressWarnings("unchecked") left in the code.

commit 5a6ee27cee9df99404016f124d3768f9793dff59
Author: nmittler <nmittler@gmail.com>
Date:   Wed Sep 20 17:51:00 2017 -0700

    Upgrade Conscrypt to 1.0.0.RC11
    
    Motivation:
    
    Getting the latest Conscrypt goodies.
    
    Modifications:
    
    A few API changes have occurred, specifically in the Conscrypt
    class.
    
    Result:
    
    Netty now builds and tests against Conscrypt 1.0.0.RC11

commit 625a7426cd970eaca78fd1a5cbe5ea177857045c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Sep 25 06:12:32 2017 +0200

    [maven-release-plugin] prepare for next development iteration

commit f57d8f00e17a3cbd127aeb2b499c3f2787c002e4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Sep 25 06:12:16 2017 +0200

    [maven-release-plugin] prepare release netty-4.1.16.Final

commit e069079aff5111b45d333bcce5432260fad99076
Author: Lionel Li <lionel_li@apple.com>
Date:   Tue Sep 19 17:48:37 2017 -0700

    Adapt Http2ServerDowngrader to work with clients
    
    Motivation:
    Http2ServerDowngrader is specifically built for server channels where
    inbound Http2StreamFrames are converted into HttpRequests, and outbound
    HttpResponses are converted into Http2StreamFrames. It can be easily
    made to be more generic to work with client channels where inbound
    Http2StreamFrames are converted into HttpResponses, and outbound
    HttpRequests are converted into Http2StreamFrames.
    
    Modification:
    - Renamed Http2ServerDowngrader to a more general
      Http2StreamFrameToHttpObjectCodec
    - Made it take in an "isServer" parameter to determine whether encoding
      inbound Http2StreamFrames should create HttpRequests (for server) or
      HttpResponses (for client)
    - Norman fixed a leak in the unit test. Thanks! :-)
    
    Result:
    Now Http2StreamFrameToHttpObjectCodec can be used to translate
    Http2StreamFrame to HttpObject for both server and client.

commit 9d5daa37ccc9df1d9c557b67e4ab81e64a92ff26
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Sep 21 12:23:37 2017 -0700

    Check for latest centos release version when doing a release
    
    Motivation:
    
    We used to check for version 6.8 but the latest is 6.9
    
    Modifications:
    
    Update version to 6.9 in the check.
    
    Result:
    
    Be able to cut a release on latest centos version

commit c3298a3836c244c94fae9a9cbc1598ea3820d357
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Sep 21 08:56:49 2017 -0700

    Fix regression in reporting leaks introduced by 3c8c7fc7e9c27f87e64aad5bd1df6c58ed8ef36e.
    
    Motivation:
    
    3c8c7fc7e9c27f87e64aad5bd1df6c58ed8ef36e introduced some changes to the ResourceLeakDetector that introduced a regression and so would always log that paranoid leak detection should be enabled even it was already.
    
    Modifications:
    
    Correctly not clear the recorded stacktraces when we process the reference queue so we can log these.
    
    Result:
    
    ResourceLeakDetector works again as expected.

commit 003c8cc7abcfbe0c7a3ce97a23413ba4c336034a
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Wed Sep 20 14:57:28 2017 -0700

    Expose all defaults on PooledByteBufAllocator
    
    Motivation:
    Most, but not all defaults are statically exposed on
    PooledByteBufAllocator.  This makes it cumbersome to make a custom
    allocator where most of the defaults remain the same.
    
    Modification:
    Expose useCacheForAllThreads, and Direct preferred.  The latter is
    needed because it is under the internal package, and public code
    should probably not depend on it.
    
    Result:
    More customizeable allocators

commit 28d2560679d4e075fb76f7d7448ab6a257914fc5
Author: Lionel Li <lionel_li@apple.com>
Date:   Wed Sep 20 20:50:47 2017 -0700

    Update SSLEngineTest certificate validity
    
    Motivation:
    A bunch of unit tests are failing due to certificates having expired.
    This has to be replaced with a newly generated certificate that has a
    longer validity.
    
    Modifications:
    - generated a certificate with validity of 100 years from now
    
    Results:
    Unit tests are passing again

commit 1ff2e1fb5d6bb20d4165c7503ecf2c6e66dfcdf7
Author: Moses Nakamura <mnakamura@twitter.com>
Date:   Mon Sep 18 17:25:20 2017 -0700

    Match Http2ClientUpgradeCodec to the new upgrade policy
    
    Motivation:
    
    We changed Http2ConnectionHandler to expect the upgrade method to be
    called *after* we send the preface (ie add the handler to the pipeline)
    but we forgot to change the Http2ClientUpgradeCodec to match the new
    policy.  This meant that client-side h2c upgrades failed.
    
    Modifications:
    
    Reverse sending the preface and calling the upgrade method to match the
    new policy.
    
    Result:
    
    Clients can initiate h2c upgrades successfully.

commit 70c5c48eab5a172bf7132bd6cd6f160284a1f7cb
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Sep 13 15:12:25 2017 -0700

    Correctly not write any body when 1xx, 204 or 304 is used as response status code.
    
    Motivation:
    
    We need to ensure we not write any body when a response with status code of 1xx, 204 or 304 is used as stated in rfc:
    https://tools.ietf.org/html/rfc7230#section-3.3.3
    
    Modifications:
    
    - Correctly handle status codes
    - Add unit tests
    
    Result:
    
    Correctly handle responses with 1xx, 204, 304 status codes.

commit 4d5f0e7ad5d20a754a484d0ce9ae2d771c0f8c1e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Sep 18 21:32:31 2017 -0700

    NativeLibraryLoader should check the result of ClassLoader#getResource method
    
    Motivation:
    
    NativeLibraryLoader uses ClassLoader#getResource method that can return nulls when the resource cannot be found. The returned url variable should be checked for nullity and fail in a more usable manner than a NullPointerException
    
    Modifications:
    
    Fail with a FileNotFoundException
    
    Result:
    
    Fixes [#7222].

commit 9d56439aa1c221d38ee3b526c63d268c2e6f16c7
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Sep 1 07:59:18 2017 +0200

    Make UnpooledDirectByteBuf, UnpooledHeapByteBuf and UnpooledUnsafeDirectByteBuf constructors public.
    
    Motivation:
    
    The constrcutors a protected atm but the classes are public. We should make the constructors public as well to make it easier to write your own ByteBufAllocator.
    
    Modifications:
    
    Change constructors to be public and add some javadocs.
    
    Result:
    
    Easier to create own ByteBufAllocator.

commit 3c8c7fc7e9c27f87e64aad5bd1df6c58ed8ef36e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Sep 17 07:32:31 2017 -0700

    Reduce performance overhead of ResourceLeakDetector
    
    Motiviation:
    
    The ResourceLeakDetector helps to detect and troubleshoot resource leaks and is often used even in production enviroments with a low level. Because of this its import that we try to keep the overhead as low as overhead. Most of the times no leak is detected (as all is correctly handled) so we should keep the overhead for this case as low as possible.
    
    Modifications:
    
    - Only call getStackTrace() if a leak is reported as it is a very expensive native call. Also handle the filtering and creating of the String in a lazy fashion
    - Remove the need to mantain a Queue to store the last access records
    - Add benchmark
    
    Result:
    
    Huge decrease of performance overhead.
    
    Before the patch:
    
    Benchmark                                           (recordTimes)   Mode  Cnt     Score     Error  Units
    ResourceLeakDetectorRecordBenchmark.record                      8  thrpt   20  4358.367 ± 116.419  ops/s
    ResourceLeakDetectorRecordBenchmark.record                     16  thrpt   20  2306.027 ±  55.044  ops/s
    ResourceLeakDetectorRecordBenchmark.recordWithHint              8  thrpt   20  4220.979 ± 114.046  ops/s
    ResourceLeakDetectorRecordBenchmark.recordWithHint             16  thrpt   20  2250.734 ±  55.352  ops/s
    
    With this patch:
    
    Benchmark                                           (recordTimes)   Mode  Cnt      Score      Error  Units
    ResourceLeakDetectorRecordBenchmark.record                      8  thrpt   20  71398.957 ± 2695.925  ops/s
    ResourceLeakDetectorRecordBenchmark.record                     16  thrpt   20  38643.963 ± 1446.694  ops/s
    ResourceLeakDetectorRecordBenchmark.recordWithHint              8  thrpt   20  71677.882 ± 2923.622  ops/s
    ResourceLeakDetectorRecordBenchmark.recordWithHint             16  thrpt   20  38660.176 ± 1467.732  ops/s

commit aa8bdb5d6b7f89d56712c2d177c27857a17d79cd
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Sep 16 17:20:01 2017 -0700

    Fix assertion error when closing / shutdown native channel and SO_LINGER is set.
    
    Motivation:
    
    When SO_LINGER is used we run doClose() on the GlobalEventExecutor by default so we need to ensure we schedule all code that needs to be run on the EventLoop on the EventLoop in doClose. Beside this there are also threading issues when calling shutdownOutput(...)
    
    Modifications:
    
    - Schedule removal from EventLoop to the EventLoop
    - Correctly handle shutdownOutput and shutdown in respect with threading-model
    - Add unit tests
    
    Result:
    
    Fixes [#7159].

commit ff592c8d5c54d6a81b17050f980c5d57299a5148
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Sep 18 13:44:22 2017 -0700

    Remove @Deprecated from package-info.java as intellij not likes it

commit 80676863492aff7dd32841bc45a74e9a6b76975f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Sep 18 11:27:06 2017 -0700

    Correctly filter out native tcnative lib
    
    Motivation:
    
    c93e58c453147ab5b34a708a85530d2372bbac81 changed to use _ for the tcnative lib name but missed to also adjust the filtering.
    
    Modifications:
    
    Fix filtering to look for _
    
    Result:
    
    Not include native tcnative lib as expected.

commit 80b8a91b704c6418581a9d540998d7f4446faaef
Author: Jackie.Meng <jackie.meng@dji.com>
Date:   Wed Sep 13 16:40:33 2017 +0800

    Use offset finding eol avoid repeated scaning.
    
    Motivation:
    
    A large frame will be componsed by many packages. Every time the package
    arrived, findEndOfLine will be called from the start of the buffer. It
    will cause the complexity of reading frame equal to  O(n^2). This can be
    eliminated by using a offset to mark the last scan position, when new
    package arrived, just find the delimter from the mark. The complexity
    will be O(n).
    
    Modification:
    
    Add a offset to mark the last scan position.
    
    Result:
    
    Better performance for read large frame.

commit 282aa35682e9f610f71e7f08220131822609f131
Author: durigon <durigon@nate.com>
Date:   Fri Sep 15 16:19:30 2017 +0900

    Fix NPE in InboundHttp2ToHttpAdapter
    
    Motiviation:
    
    At the moment an NPE is thrown if someone tries to use the InboundHttp2ToHttpAdapter.
    
    Modifications:
    - Ensure the status was null in "InboundHttp2ToHttpAdapter::onPushPromiseRead" before calling "HttpConversionUtil.parseStatus" methods.
    - Fix setting status to OK in "InboundHttp2ToHttpAdapter::onPushPromiseRead".
    
    Result:
    Fixes [#7214].

commit 44bb3b6f3afcd15ec26a08c5feea132aed80c00d
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Sep 15 15:55:30 2017 -0700

    DefaultHeaders value iterator
    
    Motivation:
    The Headers interface supports an interface to get all the headers values corresponding to a particular name. This API returns a List which requires intermediate storage and increases GC pressure.
    
    Modifications:
    - Add a method which returns an iterator over all the values for a specific name
    
    Result:
    Ability to iterator over values for a specific name with no intermediate collection.

commit b32cd26a961c71cc5ad0e9f88fa8c15fbfd89930
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Thu Sep 14 19:08:23 2017 -0700

    Remove allocation from ResourceLeakDetector
    
    Motivation:
    RLD allocates an ArrayDeque in anticipation of recording access
    points.  If the leak detection level is less than ADVANCED though,
    the dequeue is never used.  Since SIMPLE is the default level,
    there is a minor perf win to not preemptively allocate it.
    
    This showed up in garbage profiling when creation a high number of
    buffers.
    
    Modifications:
    Only allocate the dequeue if it will be used.
    
    Result:
    Less garbage created.

commit b1332bf12e75432260dbcdae9dadfe06ef06e969
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Sep 14 22:45:16 2017 -0700

    NativeLibraryLoader logging clarify
    
    Motivation:
    NativeLibraryLoader may only log a debug statement if the library is successfully loaded from java.library.path, but will log failure statements the if load for java.library.path fails which can mislead users to believe the load actually failed when it may have succeeded.
    
    Modifications:
    - Always load a debug statement when a library was successfully loaded
    
    Result:
    NativeLibraryLoader log statements more clear.

commit 14189140a0e07ab1cac8b91b49a787143870890e
Author: 杨浩 <takeseem@gmail.com>
Date:   Fri Sep 8 21:17:28 2017 +0800

    log in PatternLayout (%F:%L)%c.%M
    
    Motivation:
    
    When Log4j2Logger is used with PatternLayout (%F:%L)%c.%M, the log message incorrect shows:
    
    (Log4J2Logger.java:73)io.netty.util.internal.PlatformDependent0.debug ....
    
    Modification:
    
    Extend AbstractLogger
    
    Result:
    
    Fixes [#7186].

commit 8c8779669e1acdd8307e5faafb7ca9b378348831
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Sep 10 09:05:17 2017 +0200

    Mark transport-rxtx as @deprecated
    
    Motivation:
    
    transport-rxtx has no tests and there is really no easy way to add some. Beside this this transport is not really well maintained.
    
    Modifications:
    
    Mark transport-rxtx as @deprecated so we can drop it in next major version.
    
    Result:
    
    Notify users of plan to drop the transport.

commit 901c66fa813a759c9dbfe64eed10ba4d6095d4ea
Author: Paolo Patierno <ppatierno@live.com>
Date:   Wed Sep 13 17:47:30 2017 +0200

    MQTT encode doesn't complain if password is set but username not
    
    Motivation:
    
    The MQTT decoder should raise an exception trying to build a CONNECT packet where password field is set but not the username one (as by MQTT 3.1/3.1.1 spec).
    
    Modification:
    
    Throw exception if password field is set but not the username
    
    Result:
    
    Fixes [#7205].

commit 426938307ddcbd6f2db3e86afe6390b6fbe74918
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Sep 11 11:38:52 2017 -0700

    Use the correct osname in the Bundle-NativeCode declaration.
    
    Motivation:
    
    We need to ensure we use the correct osname in the Bundle-NativeCode declaration as declared in:
    
    https://www.osgi.org/developer/specifications/reference/
    
    Modifications:
    
    Update osname to match the spec.
    
    Result:
    
    Correct Bundle-NativeCode entry in the MANIFEST

commit bf0a53179a3057ac075c1192f80917ddd5ee1d9e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Sep 6 09:05:51 2017 +0200

    Correctly update writability state of Http2StreamChannel created by Http2MultiplexCodec.
    
    Motivation:
    
    We missed to mark the Http2StreamChannel as writable in some cases which could lead to the situation that a Channel never becomes writable. Also when a Http2StreamChannel was created we always marked it non-writable at the beginning which means if the user will only start writing once the Channel becomes writable it will never happen as it only became writable after the first header was written.
    
    Modifications:
    
    - Correctly handle updates for writability in all cases
    - Change unit tests to cover this.
    
    Result:
    
    Fixes [#7179].

commit 15611dadbbf8f8c217c03ce33da89beb54602023
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Sep 7 08:22:12 2017 +0200

    Fix NPE when using Http2ServerUpgradeCodec with Http2FrameCodec and Http2MultiplexCodec
    
    Motiviation:
    
    At the moment an NPE is thrown if someone tries to use the Http2ServerUpgradeCodec with Http2FrameCodec and Http2MultiplexCodec.
    
    Modifications:
    
    - Ensure the handler was added to the pipeline before calling on*Upgrade(...) methods.
    - Add tests
    - Fix adding of handlers after upgrade.
    
    Result:
    
    Fixes [#7173].

commit de9e666493469d40fa9107a78f9ae421a05f9cf4
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Fri Sep 8 00:48:35 2017 +0500

    Fix hashCode() in Http2StreamChannelId
    
    Motivation:
    In `Http2StreamChannelId` a `hashCode()` is not consistent with `equals()`.
    
    Modifications:
    Make a `Http2StreamChannelId.hashCode()` consistent with `equals()`.
    
    Result:
    Faster hash map's operations where the Http2StreamChannelId as keys.

commit e40469057483c6b3ce9cf69af12dd19a68392cfd
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Fri Sep 8 00:39:32 2017 +0500

    Optimize DefaultChannelId.equals
    
    Motivation:
    A `DefaultChannelId` has final `hashCode` field calculated in the constructor. We can use it in `equals` to the fast return for different objects.
    
    Modifications:
    Use `hashCode` field in `DefaultChannelId.equals()`.
    
    Result:
    Fast `equals` on negative scenarios.

commit d2cb51bc2e86ac485d84cb1a0313b22f4de988d0
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Thu Sep 7 19:40:36 2017 -0700

    Enable PooledByteBufAllocator to work, event without a cache
    
    Motivation:
    `useCacheForAllThreads` may be false which disables memory caching
    on non netty threads.  Setting this argument or the system property
    makes it impossible to use `PooledByteBufAllocator`.
    
    Modifications:
    
    Delayed the check of `freeSweepAllocationThreshold` in
    `PoolThreadCache` to after it knows there will be any caches in
    use.  Additionally, check if the caches will have any data in them
    (rather than allocating a 0-length array).
    
    A test case is also added that fails without this change.
    
    Results:
    
    Fixes #7194

commit c0396818cafc4d3b6a5c8230b9f91b180e813645
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Sep 7 13:51:36 2017 +0200

    Print out the actual cause when an assertion failure happens during DatagramUnicastTest.testSimpleSendWithConnect
    
    Motivation:
    
    We recently saw an assertion failure when running DatagramUnicastTest.testSimpleSendWithConnect.
    
    Modifications:
    
    - Adding more debug infos
    - Ensure we always correctly release the buffers.
    
    Result:
    
    More informations when tests fail.

commit a739d89792dbc21ad2f1384e018e547dadff2763
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Sep 6 14:01:42 2017 +0200

    Not log notify failure for DelegatingChannelPromiseNotifier when promise is VoidChannelPromise
    
    Motivation:
    
    We should not log by default if the promise is a VoidChannelPromise as its try* methods will always return false.
    
    Modifications:
    
    Do an instanceof check to determine if we should log or not by default
    
    Result:
    
    No more noise in the logs when using a VoidChannelPromise.

commit e50075508611e3cdabf60f37d9ba52f0be46c414
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Thu Sep 7 00:00:21 2017 +0500

    Remove double comparing of content out of the DefaultHttp2GoAwayFrame.equals()
    
    Motivation:
    In `DefaultHttp2GoAwayFrame.equals()` a content compared twice: explicitly and in the `super` method.
    
    Modifications:
    Remove explicit content comparision.
    Make `hashCode()` consistent with `equals()`.
    
    Result:
    A `DefaultHttp2GoAwayFrame.equals()` work faster.

commit 870b5f5e4b4eef8ea3baf650fa9c592533b2fda2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Sep 5 18:34:34 2017 +0100

    Not add inboundStreamHandler for outbound streams created by Http2MultiplexCodec.
    
    Motivation:
    
    We must not add the inboundStreamHandler for outbound streams creates by Http2MultiplexCodec as the user will specify a handler via Http2StreamChannelBootstrap.
    
    Modifications:
    
    - Check if the stream is for outbound and if so not add the inboundStreamHandler to the pipeline
    - Update tests so this is covered.
    
    Result:
    
    Fixes [#7178]

commit 5c572f0f63da22392d477697c4c289072915d483
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Sep 4 14:34:03 2017 +0200

    Ensure the tests complete on java7 and java9 as well.
    
    Motivation:
    
    379ac890f4dbec15d19714711f85455a12112c3f introduced the usage of the inline mock maker. This unfortunally not work on java7 and java9.
    
    Modifications:
    
    Just use reflection to create the event for now.
    
    Result:
    
    Netty tests pass again on java7 and java9 as well.

commit 0fffc844d6d4c8e196a8448a45e7ff542446f708
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Aug 29 14:13:49 2017 +0200

    Only load native transport if running architecture match the compiled library architecture.
    
    Motivation:
    
    We should only try to load the native artifacts if the architecture we are currently running on is the same as the one the native libraries were compiled for.
    
    Modifications:
    
    Include architecture in native lib name and append the current arch when trying to load these. This will fail then if its not the same as the arch of the compiled arch.
    
    Result:
    
    Fixes [#7150].

commit 379ac890f4dbec15d19714711f85455a12112c3f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Sep 1 12:17:58 2017 +0200

    Fix reference count issue when using Http2FrameCodec / Http2MultiplexCodec with HttpServerUpgradeHandler
    
    Motivation:
    
    When using  Http2FrameCodec / Http2MultiplexCodec with HttpServerUpgradeHandler reference count exception will be triggered.
    
    Modifications:
    
    - Correctly retain before calling InboundHttpToHttp2Adapter.handle
    - Add unit test
    
    Result:
    
    Fixes [#7172].

commit bca35b0449d2ce16a39a86a4be7aa9d5ae2bdb70
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Aug 31 10:00:47 2017 +0200

    Allow to construct UnpooledByteBufAllocator that explictly always use sun.misc.Cleaner
    
    Motivation:
    
    When the user want to have the direct memory explicitly managed by the GC (just as java.nio does) it is useful to be able to construct an UnpooledByteBufAllocator that allows this without the chances to see any memory leak.
    
    Modifications:
    
    Allow to explicitly disable the usage of reflection to construct direct ByteBufs and so be sure these will be collected by GC.
    
    Result:
    
    More flexible way to use the UnpooledByteBufAllocator.

commit 9bd6d8129ef12ff509e7b5c2b331bbff1c271d40
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Aug 28 17:58:00 2017 -0700

    HttpObjectEncoder buffer size estimation
    
    Motivation:
    HttpObjectEncoder allocates a new buffer when encoding the initial line and headers, and also allocates a buffer when encoding the trailers. The allocation always uses the default size of 256. This may lead to consistent under allocation and require a few resize/copy operations which can cause GC/memory pressure.
    
    Modifications:
    - Introduce a weighted average which tracks the historical size of encoded data and uses this as an estimate for future buffer allocations
    
    Result:
    Better approximation of buffer sizes.

commit 7528e5a11e6edeb847d7913437a1c88b1bb30e9d
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Tue Aug 29 23:34:13 2017 -0700

    Use threadsafe setter on Atomic Updaters
    
    Motivation:
    The documentation for field updates says:
    
    > Note that the guarantees of the {@code compareAndSet}
    > method in this class are weaker than in other atomic classes.
    > Because this class cannot ensure that all uses of the field
    > are appropriate for purposes of atomic access, it can
    > guarantee atomicity only with respect to other invocations of
    > {@code compareAndSet} and {@code set} on the same updater.
    
    This implies that volatiles shouldn't use normal assignment; the
    updater should set them.
    
    Modifications:
    Use setter for field updaters that make use of compareAndSet.
    
    Result:
    Concurrency compliant code

commit cc336ef2f898db83de46e8d48879b03c1a4895d1
Author: amizurov <andreymi@playtika.com>
Date:   Mon Aug 28 23:58:26 2017 +0300

    Fix StompSubframeDecoder.readHeaders produce not any notification when parsed line that contains multiple colon
    
    Motivation:
    
    By STOMP 1.2 specification - header name or value include any octet except CR or LF or ":".
    
    Modification:
    
    Add constructor argument that allows to enable / disable validation.
    
    Result:
    
    Fixes [#7083]

commit c891c9c13fe9a04c714536e2c2be14ffc5b7b26e
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Wed Aug 23 19:31:09 2017 -0700

    Include more detail why Unsafe is not available
    
    Motivation:
    PD and PD0 Both try to find and use Unsafe.  If unavailable, they
    try to log why and continue on.  However, it is not always east to
    enable this logging.  Chaining exceptions together is much easier
    to reach, and the original exception is relevant when Unsafe is
    needed.
    
    Modifications:
    * Make PD log why PD0 could not be loaded with a trace level log
    * Make PD0 remember why Unsafe wasn't available
    * Expose unavailability cause through PD for higher level use.
    * Make Epoll and KQueue include the reason when failing
    
    Result:
    Easier debugging in hard to reconfigure environments

commit f5bea11ee486640f28e96d38d066a7813666e27c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Aug 28 10:58:34 2017 +0200

    DefaultSocks5CommandRequest incorrectly rejects SOCKS5 commands with dstPort=0
    
    Motivation:
    
    According to SOCKS 5 spec, dstPort = 0 is a valid value in case of UDP ASSOCIATE.
    
    Modifications:
    
    - Allow 0 as port.
    - Add unit tests.
    
    Result:
    
    Fixes [#7156].

commit d9d0e633dc69b9b93139d822eaa17b97ff3826ab
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Mon Aug 28 11:15:58 2017 +0200

    Fix ServerCookieEncoder javadoc, close #7115
    
    Motivation:
    
    ServerCookieEncoder’s javadoc contains some invalid copy-pasting from
    ClientCookieEncoder.
    
    Modifications:
    * As per RFC6265, multiple cookies are sent as separate Set-Cookie
    response headers.
    * Fix code sample
    
    Result:
    
    Proper javadoc

commit 6780183a89066a4de0449d3be57caa8dcf1be9ce
Author: Francesco Nigro <nigro.fra@gmail.com>
Date:   Thu Aug 24 11:32:33 2017 +0200

    Makes LengthFieldBasedFrameDecoder::decode inlineable
    
    Motivation:
    
    The decode method is too large to be inlined with default compiler settings, hence the uncommon paths need to be packed and moved away form the common one.
    
    Modifications:
    
    The uncommon paths of the decode call (eg failures with thrown exceptions) are packed and moved in private methods in order to reduce the size of the common one
    and let it being inlined.
    
    Result:
    
    The decode method is being inlined if the stack depth allows it.

commit 0b0de76adc4e564607964535c2078940969967d8
Author: Paul Gross <pgross@gmail.com>
Date:   Fri Aug 25 13:15:58 2017 -0700

    Fix typo in error message
    
    Motivation:
    
    Fix typo in error message.
    
    Modification:
    
    could not fine -> could not find

commit 89ecb4b4a4ead78f6362e05b2128771d629c593c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Aug 24 19:46:46 2017 -0700

    AutoClose behavior may infinite loop
    
    Motivation:
    If AutoClose is false and there is a IoException then AbstractChannel will not close the channel but instead just fail flushed element in the ChannelOutboundBuffer. AbstractChannel also notifies of writability changes, which may lead to an infinite loop if the peer has closed its read side of the socket because we will keep accepting more data but continuously fail because the peer isn't accepting writes.
    
    Modifications:
    - If the transport throws on a write we should acknowledge that the output side of the channel has been shutdown and cleanup. If the channel can't accept more data because it is full, and still healthy it is not expected to throw. However if the channel is not healthy it will throw and is not expected to accept any more writes. In this case we should shutdown the output for Channels that support this feature and otherwise just close.
    - Connection-less protocols like UDP can remain the same because the channel may disconnected temporarily.
    - Make sure AbstractUnsafe#shutdownOutput is called because the shutdown on the socket may throw an exception.
    
    Result:
    More correct handling of write failure when AutoClose is false.

commit b967805f327415c612847b70631faabd1d7f56bc
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Aug 24 15:38:22 2017 +0200

    [maven-release-plugin] prepare for next development iteration

commit da8e010a42d01081dc2b2232a0c0f563f86b2455
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Aug 24 15:37:59 2017 +0200

    [maven-release-plugin] prepare release netty-4.1.15.Final

commit dd9ad15b127117ecb5f620a3470f7b3ee34df792
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Aug 24 10:24:57 2017 +0200

    Add Unit test for [#7143]

commit c80fdc8241e15455632d10effa156b1ba99e25a8
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Aug 24 01:04:06 2017 -0700

    AbstractChannel should call doClose even after shutdownOutput
    
    Motivation:
    ShutdownOutput now fails all pending writes in the ChannelOutboundBuffer and sets it to null. However the Close code path uses the ChannelOutboundBuffer as an indication that the close operation is in progress and exits early and will not call doClose. This will lead to the Channel not actually being fully closed.
    
    Bug introduced by 237a4da1b76ef7f303eca8f6ec8539efc9fe4d26
    
    Modifications:
    - AbstractChannel#close shouldn't exit early just because outboundBuffer is null, and instead should use additional state closeInitiated to avoid duplicate close operations
    
    Result:
    AbstractChannel#close(..) after AbstractChannel#shutdownOutbound() will still invoke doClose and cleanup Channel state.

commit 1065e0f26e0d47a67c479b0fad81efab5d9438d9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Aug 18 20:22:01 2017 +0200

    Support JDK9-native ALPN
    
    Motivation:
    
    Netty is unable to use Java9s ALPN support atm.
    
    Modifications:
    
    When running on Java9+ we invoke the correct methods that are exposed on the Java9+ implementation of SSLEngine and so be able to support ALPN.
    This patch is based on the work of @rschmitt and so https://github.com/netty/netty/pull/6992.
    
    Result:
    
    Fixes #6933.

commit c93e58c453147ab5b34a708a85530d2372bbac81
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Aug 23 17:14:51 2017 -0700

    OpenSsl should use _ instead of -
    
    Motivation:
    netty-tcnative recently change the name of the native libraries from using - to _.
    
    Modifications:
    - OpenSsl should use _ instead of - even for the classifiers to be consistent with netty-tcnative
    
    Result:
    Loading netty-tcnative works.

commit 6e859469ca49f2029ad68f1d32e5b8bfa054eeba
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Aug 22 11:14:30 2017 +0200

    Deprecate ApplicationProtocolNegotiator and its implementation as people should use ApplicationProtocolConfig
    
    Motivation:
    
    We should deprecate ApplicationProtocolNegotiator as the users should use ApplicationProtocolConfig these days.
    
    Modifications:
    
    Add deprecation annotations and javadocs.
    
    Result:
    
    Be able to make package-private in next major release.

commit 7290cbc48aea4971aa66c64c2f43d8a2611012ab
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Aug 21 10:30:58 2017 +0200

    More bullet-proof way of detecting if ipv6 is supported or not when using native transport
    
    Motivation:
    
    We should try to bind to an ipv6 only socket before we enable ipv6 support in the native transport as it may not work due setup of the platform.
    
    Modifications:
    
    Try to bind to ::1 use IPV6 later on if this works
    
    Result:
    
    Fixes [#7021].

commit b18a201d02ad024aa5f37eda7646c96de4f64aa0
Author: Derek Perez <dp@blockparty.team>
Date:   Tue Aug 15 23:13:29 2017 -0700

    various errorprone fixes.
    
    Motivation:
    
    Continuing to make netty happy when compiling through errorprone.
    
    Modification:
    
    Mostly comments, some minor switch statement changes.
    
    Result:
    
    No more compiler errors!

commit cbce95eae12918ad95a2c7d37aed4f1f9bfa3ef5
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Aug 21 11:19:47 2017 -0700

    SslHandlerTest#testCompositeBufSizeEstimationGuaranteesSynchronousWrite print SslProvider on failure
    
    Motivation:
    When SslHandlerTest#testCompositeBufSizeEstimationGuaranteesSynchronousWrite fails it would be useful to know the SslProvider type
    
    Modifications:
    - Print the sever and client SslProvider upon failure
    - Increase test timeout to 8 minutes to allow more time to run
    
    Result:
    Failures include more info to help diagnose issues.

commit 566566db3a02de9f2170a6a42c95e69b4a628548
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Aug 18 19:16:51 2017 -0700

    Decouple DnsCache and DnsCacheEntry
    
    Motivation:
    DnsCache (an interface) is coupled to DnsCacheEntry (a final class). This means that DnsCache implementations can't implement their own DnsCacheEntry objects if the default behavior isn't appropriate.
    
    Modifications:
    - DnsCacheEntry should be moved to DefaultDnsCache as it is an implementation detail
    - DnsCache#cache(..) should return a new DnsCacheEntry
    - The methods which from DnsCacheEntry that were used outside the scope of DefaultDnsCache should be moved into an interface
    
    Result:
    DnsCache is more extensible and not tightly coupled to a default implementation of DnsCacheEntry.

commit 2beb5fc8ee93b9d2c2b75764ebcd53dc8a1bd4e8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Aug 21 17:36:43 2017 +0200

    DelegatingSslContext should also be able to configure the SslHandler
    
    Motivation:
    
    DelegatingSslContext at the moment intercept newEngine calls and allow to init the SslEngine after it is created. The problem here is that this may not work the SSLEngine that is wrapped in the SslHandler when calling newHandler(...). This is because some SslContext implementations not delegate to newEngine(...) when creating the SslHandler to allow some optimizations. For this we should also allow to init the SslHandler after its creation and by default just delegate to initEngine(...).
    
    Modifications:
    
    Allow the user to also init the SslHandler after creation while by default init its SSLEngine after creation.
    
    Result:
    
    More flexible and correct code.

commit 5b4d2d9807303a0ca27d3d481c0f4afbb43ec50d
Author: nitsanw <nitsanw@yahoo.com>
Date:   Mon Aug 21 14:14:42 2017 +0200

    Update JCTools version, fixes #7117
    
    Motivation:
    
    Remove Unsafe dependency for Atomic queues in JCTools, resolved in version 2.1.0
    
    Modification:
    
    Change pom JCTools version
    
    Result:
    
    Fixes #7117

commit 7f1051b6ca9d1a146f4142844bfead43bce452c8
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Fri Aug 18 12:58:35 2017 -0700

    Include JNIEXPORT on exported symbols
    
    Motivation:
    As noticed in https://stackoverflow.com/questions/45700277/
    compilation can fail if the definition of a method doesn't
    match the declaration.  It's easy enough to add this in, and make
    it easy to compile.
    
    Modifications:
    Add JNIEXPORT to the entry points.
    
    * On Windows this adds: `__declspec(dllexport)`
    * On Mac this adds: `__attribute__((visibility("default")))`
    * On Linux (GCC 4.2+) this adds: ` __attribute__((visibility("default")))`
    * On other it doesn't add anything.
    
    Result:
    Easier compilation

commit fe2dd973e9cc537027f75cefa447a6d8ebe5695d
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Aug 2 00:15:18 2017 -0700

    Unify KQueue and Epoll wait timeout approach
    
    Motivation:
    KQueueEventLoop and EpollEventLoop implement different approaches to applying a timeout of their respective poll calls. Epoll attempts to ensure the desired timeout is satisfied at the java layer and at the JNI layer, but it should be sufficient to account for spurious wakups at the JNI layer. Epoll timeout granularity is also limited to milliseconds which may be too large for some latency sensitive applications.
    
    Modifications:
    - Make EpollEventLoop wait method look like KQueueEventLoop
    - Epoll should support a finer timeout granularity via timerfd_create. We can hide most of these details behind the epollWait0 JNI call to avoid crossing additional JNI boundaries.
    
    Result:
    More consistent timeout approach between KQueue and Epoll.

commit 1d7c3fb7ee9420df2261acd42c439572d8e74769
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Aug 16 23:44:57 2017 -0700

    KQueue detect peer close without EVFILT_READ
    
    Motivation:
    The EPOLL transport uses EPOLLRDHUP to detect when the peer closes the write side of the socket. Currently KQueue is not able to mimic this behavior and the only way to detect if the peer has closed is to read. It may not always be appropriate to read for backpressure and other reasons at the application level.
    
    Modifications:
    - Support EVFILT_SOCK filter which provides notification when the peer closes the socket
    
    Result:
    KQueue transport has more consistent behavior with Epoll transport for detecting peer closure.

commit ba2745665367a13931ab3999e171d51f50df030c
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Wed Aug 16 23:35:33 2017 +0500

    Use the index-based AsciiString constructor instead of substring()
    
    Motivation:
    The construction `new AsciiString(string.substring(...))` can be replaced with the `new AsciiString(string, start, length)` to avoid extra allocation.
    
    Modifications:
    Apply the described replacement in `HttpConversionUtil#setHttp2Authority`.
    
    Result:
    Less allocations.

commit 0234878c4ba0999a464a1acee2983d6cba9de940
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Tue Aug 15 23:23:35 2017 +0500

    Fix the commands cache and hashCode() in SmtpCommand
    
    Motivation:
    - A `hashCode` of the SmtpCommand is recalculated on each call of `hashCode()`. Cached hash code value can be just replaced with call of `name.hashCode()`.
    - The commands cache don't work for strings: `SmtpCommand.valueOf("HELO")` returns a new instance.
    - Field `contentExpected` is redundant and can be replaced with `equals(DATA)`.
    
    Modifications:
    - Use the `name.hashCode()` as hash code result.
    - Fix a command cache: use strings as map keys.
    - Replace field `contentExpected` to using `this.equals(DATA)`.
    - Add unit tests.
    
    Result:
    More correct and clean code.

commit 03d89c222279a8f1d9b70061a0e5e36c6fcf88fc
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Thu Aug 17 20:17:36 2017 -0700

    Use Constructor for reflective class instantiation.
    
    Motivation:
    Calling `newInstance()` on a Class object can bypass compile time
    checked Exception propagation.  This is noted in Java Puzzlers,
    as well as in ErrorProne:
    http://errorprone.info/bugpattern/ClassNewInstance
    
    Modifications:
    Use the niladic constructor to create a new instance.
    
    Result:
    Compile time safety for checked exceptions

commit e4af881bdbae26ebb9b5bfd3b0417be9b1a8115d
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Thu Aug 17 12:30:36 2017 -0700

    Do not define JNI_OnLoad when not dynamic
    
    Motivation:
    Due to an oversight (by myself), linking two JNI modules with
    duplicate symbols fails in linking.  This only seems to happen
    some of the time (the behavior seems to be different between GCC
    and Clang toolchains).  For instance, including both netty tcnative
    and netty epoll fails to link because of duplicate JNI_OnLoad
    symobols.
    
    Modification:
    Do not define the JNI_OnLoad and JNI_OnUnload symbols when
    compiling for static linkage, as indicated by the NETTY_BUILD_STATIC
    preprocessor define.  They are never directly called when
    statically linked.
    
    Result:
    Able to statically compile epoll and tcnative code into a single
    binary.

commit 123e07ca80bb9cc58ebee598ff0a9379ad9a09fd
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Aug 17 19:00:19 2017 +0200

    Revert "Only call ctx.fireChannelReadComplete() if ByteToMessageDecoder decoded at least one message."
    
    This reverts commit d63bb4811ed8ccd5d9e45853f3ac6aee9da7ecab as this not covered correctly all cases and so could lead to missing fireChannelReadComplete() calls. We will re-evalute d63bb4811ed8ccd5d9e45853f3ac6aee9da7ecab and resbumit a pr once we are sure all is handled correctly

commit 5de38051c973b5558bb30379a2f44db7d6f309c3
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Aug 17 08:09:01 2017 +0200

    Update netty-tcnative native library names to use underscores.
    
    Motivation:
    
    We recently changed netty-tcnative to use underscores in its native library names.
    
    Modifications:
    
    Update code to use underscores when loading native library.
    
    Result:
    
    More consistent code.

commit da86b85a28fae8459fcbfcd9ac22d0cad8aacf55
Author: Aron Wieck <aw@crown.de>
Date:   Tue Aug 15 07:56:28 2017 +0200

    Make NativeLibraryLoader check java.library.path first
    Motivation:
    
    On restricted systems (e.g. grsecurity), it might not be possible to write a .so on disk and load it afterwards. On those system Netty should check java.library.path for libraries to load.
    
    Modifications:
    
    Changed NativeLibraryLoader.java to first try to load libs from java.library.path before exporting the .so to disk.
    
    Result:
    
    Libraries load fine on restricted systems.

commit 053e6184f2d6fb2847338d807730d2edf7cfc94a
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Aug 16 08:00:22 2017 -0700

    Increase visibility for SslHandlerTest#testCompositeBufSizeEstimationGuaranteesSynchronousWrite
    
    Motivation:
    SslHandlerTest#testCompositeBufSizeEstimationGuaranteesSynchronousWrite has been observed to fail on CI servers, but it is not clear why.
    
    Modifications:
    - Add more visibility into what the state was and what the condition that caused the failure was.
    
    Result:
    More visibility when the test fails.

commit 5d9a5d3e8d81ec26be609bafb000833a7745a21b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Aug 16 08:33:46 2017 +0200

    Revert SslEngineWrapperFactory api breakage introduced by 4448b8f42f599e79db1744cd8f5fdfee702c195e.
    
    Motivation:
    
    Commit 4448b8f42f599e79db1744cd8f5fdfee702c195e introduced some API breakage which we need to revert before we release.
    
    Modifications:
    
    - Introduce an AllocatorAwareSslEngineWrapperFactory which expose an extra method that takes a ByteBufAllocator as well.
    - Revert API changes to SslEngineWrapperFactory.
    
    Result:
    
    API breakage reverted.

commit 346900443234b2d39b07007b8878fe4f2905569c
Author: Derek Perez <perezd@users.noreply.github.com>
Date:   Tue Aug 15 12:41:22 2017 -0700

    Adding explicit comment about case statement
    
    Motivation:
    
    When compiling this code and running it through errorprone[1], this message appears:
    ```
    StringUtil.java:493: error: [FallThrough] Switch case may fall through; add a `// fall through` comment if it was deliberate
                        case LINE_FEED:
                        ^
        (see http://errorprone.info/bugpattern/FallThrough)
    ```
    By adding that comment, it silences the error and also makes clear the intention of that statement.
    
    [1]http://errorprone.info/index
    
    Modification:
    
    Add simple comment.
    
    Result:
    
    Errorprone is happier with the code.

commit e487db783673c9c153a011c8156083bbd86bf8e6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Aug 15 13:33:21 2017 +0200

    Use the ByteBufAllocator when copy a ReadOnlyByteBufferBuf and so also be able to release it without the GC when the Cleaner is present.
    
    Motivation:
    
    In ReadOnlyByteBufferBuf.copy(...) we just allocated a ByteBuffer directly and wrapped it. This way it was not possible for us to free the direct memory that was used by the copy without the GC.
    
    Modifications:
    
    - Ensure we use the allocator when create the copy and so be able to release direct memory in a timely manner
    - Add unit test
    - Depending on if the to be copied buffer is direct or heap based we also allocate the same type on copy.
    
    Result:
    
    Fixes [#7103].

commit bbcab32874711f856040a47ee8e45cfbf4b29846
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Aug 15 12:19:10 2017 +0200

    Ensure netty builds with java9 (build 9+181)
    
    Motivation:
    
    To be able to build with latest java9 release we need to adjust commons-lang version and maven-enforcer-plugin.
    
    Modifications:
    
    - Use commons-lang 2.6.0
    - Use maven-enforcer-plugin 3.0.0.M1 when building with java9
    
    Result:
    
    Netty builds again with latest java9 release

commit 0774c9145642bb9f08d9961dd0c25352dd9a944a
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Sun Aug 13 00:42:44 2017 +0500

    Support the little endian floats and doubles by ByteBuf
    
    Motivation:
    `ByteBuf` does not have the little endian variant of float/double access methods.
    
    Modifications:
    Add support for little endian floats and doubles into `ByteBuf`.
    
    Result:
    `ByteBuf` has get/read/set/writeFloatLE() and get/read/set/writeDoubleLE() methods. Fixes [#6576].

commit 4875a2aad4c82204caedb2d121fb5ef03c09fe44
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Sun Aug 13 00:18:22 2017 +0500

    Immediate caching the strings wrapped to AsciiString
    
    Motivation:
    The `AsciiString#toString` method calculate string value and cache it into field. If an `AsciiString` created from the `String` value, we can avoid rebuilding strings if we cache them immediately when creating `AsciiString`. It would be useful for constants strings, which already stored in the JVMs string table, or in cases where an unavoidable `#toString `method call is assumed.
    
    Modifications:
    - Add new static method `AsciiString#cache(String)` which save string value into cache field.
    - Apply a "benign" data race in the `#hashCode` and `#toString` methods.
    
    Result:
    Less memory usage in some `AsciiString` use cases.

commit 19dcb15062ff93c5968c78df2de3c8ef6a181036
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Aug 14 09:11:07 2017 +0200

    Use underscore in native library names for consistency.
    
    Motivation:
    
    At the moment we try to load the library using multiple names which includes names using - but also _ . We should just use _ all the time.
    
    Modifications:
    
    Replace - with _
    
    Result:
    
    Fixes [#7069]

commit e249b453a053d2fcc2e08eb5fbec37dba0a9c29d
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Mon Aug 14 21:33:57 2017 +0500

    Make configurable the initial and max size of InternalThreadLocalMap#stringBuilder
    
    Motivation:
    In some cases of using an `InternalThreadLocalMap#stringBuilder`, the `StringBuilder`s size can often exceed the exist limit (1024 bytes). This can lead to permanent memory reallocation.
    
    Modifications:
    Add custom properties for the initial capacity and maximum size (after which the `StringBuilder`s capacity will be reduced to the initial capacity).
    
    Result:
    An `InternalThreadLocalMap#stringBuilder`s initial and max size is configurable. Fixes [#7092].

commit 505993a2fb6016c58d0f95392d7317a6d80f2ac7
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Aug 12 11:18:00 2017 -0700

    Increase test timeout for SocketStringEchoTest
    
    Motivation:
    SocketStringEchoTest has been observed to fail on CI servers, but the stack traces still indicate work was being done.
    
    Modifications:
    - Increase the test timeout
    
    Result:
    Tests have more time to complete, and hopefully less false positive test failures.

commit 52e19d5c631d9cbe6cc41b5ea34d7493160f26ee
Author: Daniel Schobel <dschobel@twitter.com>
Date:   Thu Aug 10 17:50:00 2017 -0600

    Strip http 'expect' headers when expectation response is produced
    
    Motivation:
    
    HttpObjectAggregator differs from HttpServerExpectContinueHandler's handling
    of expect headers by not stripping the 'expect' header when a response
    is generated.
    
    Modifications:
    
    HttpObjectAggregator now removes the 'expect' header in cases where it generates
    a response.
    
    Result:
    
    Consistent and correct behavior between HttpObjectAggregator and HttpServerExpectContinueHandler.

commit 8be9a63c1c4beb3f43ffcc3ea978e67f138b5050
Author: louyl <louyl@fenbi.com>
Date:   Sat Aug 12 15:46:55 2017 +0800

    FIX endless loop in ByteBufUtil#writeAscii
    
    Motivation:
    
    Missing return in ByteBufUtil#writeAscii causes endless loop
    
    Modifications:
    
    Add return after write finished
    
    Result:
    
    ByteBufUtil#writeAscii is ok

commit 08284dbbcd4f4e4a3ad7756cbb9eb71d180fcdfa
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Aug 11 13:04:03 2017 +0200

    Ensure we call promise.setUncancellable() before trying to process in DefaultHttp2StreamChannel.
    
    Motivation:
    
    We should call promise.setUncancellable() in DefaultHttp2StreamChannel.Unsafe impl to detect if the operation was cancelled.
    
    Modifications:
    
    Add promise.setUncancellable() calls
    
    Result:
    
    More correct handling of cancelled promises

commit 74f24a5c19f8f351e9c6a7a84bdd9fbcc7a07ada
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Aug 11 07:51:45 2017 +0200

    Finish work on http2 child channel implementation and http2 frame api.
    
    Motivation:
    
    Our http2 child channel implementation was not 100 % complete and had a few bugs. Beside this the performance overhead was non-trivial.
    
    Modifications:
    
    There are a lot of modifications, the most important....
      * Http2FrameCodec extends Http2ConnectionHandler and Http2MultiplexCodec extends Http2FrameCodec to reduce performance heads and inter-dependencies on handlers in the pipeline
      * Correctly handle outbound flow control for child channels
      * Support unknow frame types in Http2FrameCodec and Http2MultiplexCodec
      * Use a consistent way how to create Http2ConnectionHandler, Http2FrameCodec and Http2MultiplexCodec (via a builder)
      * Remove Http2Codec and Http2CodecBuilder as the user should just use Http2MultipleCodec and Http2MultiplexCodecBuilder now
      * Smart handling of flushes from child channels to reduce overhead
      * Reduce object allocations
      * child channels always use the same EventLoop as the parent Channel to reduce overhead and simplify implementation.
      * Not extend AbstractChannel for the child channel implementation to reduce overhead in terms of performance and memory usage
      * Remove Http2FrameStream.managedState(...) as the user of the child channel api should just use Channel.attr(...)
    
    Result:
    
    Http2MultiplexCodec (and so child channels) and Http2FrameCodec are more correct, faster and more feature complete.

commit 3a2b462a67bd5985e4f452f48cfabf725e5b8914
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Wed Oct 19 12:12:14 2016 +0200

    Remove the concept of pending streams. The close future can only be accessed once a stream is active.

commit 5380c7c3e395f5e690e4f36d1a6d7bc86eb5b07c
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Tue Aug 23 13:03:39 2016 +0200

    HTTP/2 Child Channel and FrameCodec Feature Parity.
    
    Motivation:
    
    This PR (unfortunately) does 4 things:
    1) Add outbound flow control to the Http2MultiplexCodec:
       The HTTP/2 child channel API should interact with HTTP/2 outbound/remote flow control. That is,
       if a H2 stream used up all its flow control window, the corresponding child channel should be
       marked unwritable and a writability-changed event should be fired. Similarly, a unwritable
       child channel should be marked writable and a writability-event should be fired, once a
       WINDOW_UPDATE frame has been received. The changes are (mostly) contained in ChannelOutboundBuffer,
       AbstractHttp2StreamChannel and Http2MultiplexCodec.
    
    2) Introduce a Http2Stream2 object, that is used instead of stream identifiers on stream frames. A
       Http2Stream2 object allows an application to attach state to it, and so a application handler
       no longer needs to maintain stream state (i.e. in a map(id -> state)) himself.
    
    3) Remove stream state events, which are no longer necessary due to the introduction of Http2Stream2.
       Also those stream state events have been found hard and complex to work with, when porting gRPC
       to the Http2FrameCodec.
    
    4) Add support for HTTP/2 frames that have not yet been implemented, like PING and SETTINGS. Also add
       a Http2FrameCodecBuilder that exposes options from the Http2ConnectionHandler API that couldn't else
       be used with the frame codec, like buffering outbound streams, window update ratio, frame logger, etc.
    
    Modifications:
    
    1) A child channel's writability and a H2 stream's outbound flow control window interact, as described
       in the motivation. A channel handler is free to ignore the channel's writability, in which case the
       parent channel is reponsible for buffering writes until a WINDOW_UPDATE is received.
    
       The connection-level flow control window is ignored for now. That is, a child channel's writability
       is only affected by the stream-level flow control window. So a child channel could be marked writable,
       even though the connection-level flow control window is zero.
    
    2) Modify Http2StreamFrame and the Http2FrameCodec to take a Http2Stream2 object intstead of a primitive
       integer. Introduce a special Http2ChannelDuplexHandler that has newStream() and forEachActiveStream()
       methods. It's recommended for a user to extend from this handler, to use those advanced features.
    
    3) As explained in the documentation, a new inbound stream active can be detected by checking if the
       Http2Stream2.managedState() of a Http2HeadersFrame is null. An outbound stream active can be detected
       by adding a listener to the ChannelPromise of the write of the first Http2HeadersFrame. A stream
       closed event can be listened to by adding a listener to the Http2Stream2.closeFuture().
    
    4) Add a simple Http2FrameCodecBuilder and implement the missing frame types.
    
    Result:
    
    1) The Http2MultiplexCodec supports outbound flow control.
    2) The Http2FrameCodec API makes it easy for a user to manage custom stream specific state and to create
       new outbound streams.
    3) The Http2FrameCodec API is much cleaner and easier to work with. Hacks like the ChannelCarryingHeadersFrame
       are no longer necessary.
    4) The Http2FrameCodec now also supports PING and SETTINGS frames. The Http2FrameCodecBuilder allows the Http2FrameCodec
       to use some of the rich features of the Http2ConnectionHandler API.

commit 8cb5d0fa8ceba19e5df5062b57d806556589770c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Aug 11 00:12:21 2017 -0700

    SocketGatheringWriteTest increase timeouts
    
    Motivation:
    EpollDomainSocketGatheringWriteTest. testGatheringWriteBig takes on average about 20-25 seconds on the CI servers, but there is a 30 second timeout being applied which leads to what maybe false positive test failures.
    
    Modifications:
    - Increase the test timeout to 120 seconds globally and 60 seconds to wait for all writes per test
    
    Result:
    Higher timeout for potentially less false positive test failures.

commit d0c43c9e42d393ff0cc9f1ab97551e5778ec0b7e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Aug 8 10:39:58 2017 +0200

    We should prefer heap buffers when using the OIO transport to reduce memory copies.
    
    Motivation:
    
    When using the OIO transport we need to act on byte[] when writing and reading from / to the underyling Socket. So we should ensure we use heap buffers by default to reduce memory copies.
    
    Modifications:
    
    Ensure we prefer heap buffers by default for the OIO transport.
    
    Result:
    
    Possible less memory copies.

commit 0bf614d9e9395320f1712fc8e47b245df648fee0
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Aug 10 16:20:41 2017 -0700

    SocketGatheringWriteTest improvements
    
    Motivation:
    SocketGatherWriteTest has been observed to fail and it has numerous issues which when resolved may help reduce the test failures.
    
    Modifications:
    - A volatile counter and a spin/sleep loop is used to trigger test termination. Incrementing a volatile is generally bad practice and can be avoided in this situation. This mechanism can be replaced by a promise. This mechanism should also trigger upon exception or channel inactive.
    - The TestHandler maintains an internal buffer, but it is not released. We now only create a buffer on the server side and release it after comparing the expected results.
    - The composite buffer creation logic can be simplified, also the existing composite buffer doesn't take into account the buffer's reader index when building buf2.
    
    Result:
    Cleaner test.

commit 1ba592049c3ccfc89b8fe3d6fab2d75ee1fb0559
Author: Michael Andre Pearce <Michael.Andre.Pearce@me.com>
Date:   Thu Aug 10 01:30:58 2017 +0100

    Add null checks before converting to string to avoid NPE.
    
    Motivation:
    
    Fixing an introduced NPE by #6817
    
    Modification:
    
    Add null checks.
    
    Result:
    
    Fixes #7076 .

commit ce4b4da5838dbb343c216f51af05ce3e75b1a39a
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Aug 10 16:48:38 2017 -0700

    SocketStringEchoTest improvements
    
    Motivation:
    SocketStringEchoTest has been observed to fail and it has numerous issues which when resolved may help reduce the test failures.
    
    Modifications:
    - A volatile counter and a spin/sleep loop is used to trigger test termination. Incrementing a volatile is generally bad practice and can be avoided in this situation. This mechanism can be replaced by a promise. This mechanism should also trigger upon exception or channel inactive.
    - Asserts are done in the Netty threads. Although these should result in a exceptionCaught the test may not observe these failures because it is spinning waiting for the count to reach the desired value.
    
    Result:
    Cleaner test.

commit 85f5d6bf0521732358ed6dc5ca6fbcbda5fc207b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Aug 8 09:19:03 2017 +0200

    Ensure we null out the previous set InetAddress on java.net.DatagramPacket when using OioDatagramChannel.
    
    Motivation:
    
    We need to ensure we always null out (or set) the address on the java.net.DatagramPacket when doing read or write operation as the same instance is used across different calls.
    
    Modifications:
    
    Null out the address if needed.
    
    Result:
    
    Ensure the correct remote address is used when connect / disconnect between calls and also mix these with calls that directly specify the remote address for adatagram packets.

commit b30c4f899f0f77031da31e1e76baa912acd1071c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Aug 8 17:01:31 2017 +0200

    Remove debug cruft from e218759c0c36b78ac8c5a75ffb37c610d4e053bc

commit e218759c0c36b78ac8c5a75ffb37c610d4e053bc
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Aug 8 10:39:22 2017 +0200

    Fix regression in detecting macOS/osx platform introduced by bdb0a39c8a01e934de4e0a75b073a0842d92a511

commit f8b495b2f248ac9c908664c3ff1a7236a483b3cc
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Aug 3 20:36:41 2017 +0200

    Correctly support SO_TIMEOUT for OioDatagramChannel
    
    Motivation:
    
    We need to support SO_TIMEOUT for the OioDatagramChannel but we miss this atm as we not have special handling for it in the DatagramChannelConfig impl that we use. Because of this the following log lines showed up when running the testsuite:
    
    20:31:26.299 [main] WARN  io.netty.bootstrap.Bootstrap - Unknown channel option 'SO_TIMEOUT' for channel '[id: 0x7cb9183c]'
    
    Modifications:
    
    - Add OioDatagramChannelConfig and impl
    - Correctly set SO_TIMEOUT in testsuite
    
    Result:
    
    Support SO_TIMEOUT for OioDatagramChannel and so faster execution of datagram related tests in the testsuite

commit bdb0a39c8a01e934de4e0a75b073a0842d92a511
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Aug 6 16:04:14 2017 +0200

    Remove code-duplication from NativeLibraryLoader
    
    Motivation:
    
    NativeLibraryLoader has some code-duplication that can be removed.
    
    Modifications:
    
    Remove duplicated code and just use provided methods of PlatformDependent.
    
    Result:
    
    Less code duplication, fixes [#3756].

commit db4781282f364b3a57b829db4362d77f449b612c
Author: Violeta Georgieva <milesg78@gmail.com>
Date:   Fri Aug 4 14:33:00 2017 +0300

    Handle partially decoded elements while streaming Json array
    
    Motivation:
    
    'insideString' and 'openBraces' need a proper handling when streaming
    Json array over multiple writes and an element decoding was started but
    not completed.
    Related to #6969
    
    Modifications:
    
    If the idx is reset:
    - 'insideString' has to be reset to 'false' in order to indicate that
      array element will be decoded from the beginning
    - 'openBraces' has to be reset to '1' to indicate that Json array
      decoding is in progress.
    
    Result:
    Json array is properly decoded when in streaming mode

commit 348745608faae89c33d5dbae40be8e81b239177d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Aug 4 19:52:01 2017 +0200

    Fix incorrect javadocs in Http2RemoteFlowController
    
    Motivation:
    
    The javadocs of Http2RemoteFlowController.isWritable(...) are incorrect.
    
    Modifications:
    
    Update javadocs to reflect reality.
    
    Result:
    
    Correct javadocs.

commit 0f8ecdcad59fc421a31c27175b587fd969fd46e1
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Aug 7 08:19:32 2017 -0700

    Http2FrameLogger frame labels incorrect
    
    Motivation:
    The labels identifying the frame types in Http2FrameLogger are not always correct.
    
    Modification:
    - Correct the string labels to indicate the right frame type in Http2FrameLogger
    
    Result:
    Logs are more correct.

commit 918fde82f8efa64a6f9d3abb8e108c773f2ccf46
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Aug 6 15:27:52 2017 +0200

    Add testcases to prove HttpResponseEncoder correctly handles empty content
    
    Motivation:
    
    Issue #6695 states that there is an issue when writing empty content via HttpResponseEncoder.
    
    Modifications:
    
    Add two test-cases.
    
    Result:
    
    Verified that all works as expected.

commit bd029503ae60ea5583879e1e1de597e49ebb6069
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Aug 4 20:41:19 2017 +0200

    asm 6.0_BETA was released so we should use it when building on java9
    
    Motivation:
    
    We used asm 6.0_ALPHA when building on java9 as the latest stable release not works with java9. asm 6.0_BETA was just released so we should update.
    
    Modifications:
    
    Upgrade asm version
    
    Result:
    
    Not use ALPHA release anymore

commit 237a4da1b76ef7f303eca8f6ec8539efc9fe4d26
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Aug 1 09:18:08 2017 -0700

    Shutting down the outbound side of the channel should not accept future writes
    
    Motivation:
    Implementations of DuplexChannel delegate the shutdownOutput to the underlying transport, but do not take any action on the ChannelOutboundBuffer. In the event of a write failure due to the underlying transport failing and application may attempt to shutdown the output and allow the read side the transport to finish and detect the close. However this may result in an issue where writes are failed, this generates a writability change, we continue to write more data, and this may lead to another writability change, and this loop may continue. Shutting down the output should fail all pending writes and not allow any future writes to avoid this scenario.
    
    Modifications:
    - Implementations of DuplexChannel should null out the ChannelOutboundBuffer and fail all pending writes
    
    Result:
    More controlled sequencing for shutting down the output side of a channel.

commit d56f403c69d38683294b2d090f10b971b4888ff9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jul 28 12:18:44 2017 +0200

    First call channelReadComplete(...) before flush(...) for better performance
    
    Motivation:
    
    In Http2ConnectionHandler we call flush(...) in channelReadComplete(...) to ensure we update the flow-controller and write stuff to the remote peer. We should better flip the order and so may be able to pick up more bytes.
    
    Modifications:
    
    Change order of calls.
    
    Result:
    
    Better performance

commit d63bb4811ed8ccd5d9e45853f3ac6aee9da7ecab
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jun 14 11:40:25 2017 +0200

    Only call ctx.fireChannelReadComplete() if ByteToMessageDecoder decoded at least one message.
    
    Motivation:
    
    Its wasteful and also confusing that channelReadComplete() is called even if there was no message forwarded to the next handler.
    
    Modifications:
    
    - Only call ctx.fireChannelReadComplete() if at least one message was decoded
    - Add unit test
    
    Result:
    
    Less confusing behavior. Fixes [#4312].

commit a75ac747f06483060070b2a303bf8917a6d7847c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Aug 3 22:35:54 2017 -0700

    Remove io.netty.packagePrefix system property
    
    Motivation:
    Now that the NativeLibraryLoader implicitly detects the shaded package prefix we no longer need the io.netty.packagePrefix system property.
    
    Modifications:
    - Remove io.netty.packagePrefix processing from NativeLibraryLoader
    
    Result:
    Code is cleaner.

commit 32f497760f4fc18b797d53ed26b690f268f2ee2b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Aug 4 08:06:36 2017 +0200

    Ensure no java.lang.UnsupportedClassVersionError are thrown if running on Java7 and try to check if conscrypt is available.
    
    Motivation:
    
    We need to ensure we not try to load any conscrypt classes directly (which means without using reflection) in the same class that is used to check if conscrypt is available. This is needed as otherwise we will have the following problem when try to use netty on java7:
    
    java.lang.UnsupportedClassVersionError: org/conscrypt/BufferAllocator : Unsupported major.minor version 52.0
    	at io.netty.handler.ssl.ConscryptJdkSslEngineInteropTest.checkConscrypt(ConscryptJdkSslEngineInteropTest.java:49)
    
    This regression was introduced by 4448b8f42f599e79db1744cd8f5fdfee702c195e and detected on the CI when using:
    
    mvn clean package -DtestJavaHome=$JAVA7_HOME
    
    Modifications:
    
    Move the detection code in an extra class and use it.
    
    Result:
    
    Works correctly also when using Java7.

commit 4bb89dcc5480503b7500270af1a580e224862ab1
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jan 9 14:15:48 2017 +0100

    Correctly handle connect/disconnect in EpollDatagramChannel / KQueueDatagramChannel
    
    Motivation:
    
    We did not correctly handle connect() and disconnect() in EpollDatagramChannel / KQueueDatagramChannel and so the behavior was different compared to NioDatagramChannel.
    
    Modifications:
    
    - Correct implement connect and disconnect methods
    - Share connect and related code
    - Add tests
    
    Result:
    
    EpollDatagramChannel / KQueueDatagramChannel also supports correctly connect() and disconnect() methods.

commit 4448b8f42f599e79db1744cd8f5fdfee702c195e
Author: Nathan Mittler <nathanmittler@google.com>
Date:   Thu Aug 3 14:21:32 2017 -0700

    Upgrading to Conscrypt 1.0.0.RC9. (#7044)
    
    Motivation:
    
    Starting with 1.0.0.RC9, conscrypt supports a buffer allocator.
    
    Modifications:
    
    - Updated the creation process for the engine to pass through the
    ByteBufAllocator.
    - Wrap a ByteBufAllocator with an adapter for conscrypt.
    - Added a property to optionally control whether conscrypt uses
    Netty's buffer allocator.
    
    Result:
    
    Netty+conscrypt will support using Netty's ByteBufAllocator.

commit 52f384b37f80176ace3e71fd6da3ad19c2619426
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Aug 2 12:55:10 2017 +0000

    [maven-release-plugin] prepare for next development iteration

commit 8cc1071881e90b0130bdd35a0441abcd0df6ffa9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Aug 2 12:54:51 2017 +0000

    [maven-release-plugin] prepare release netty-4.1.14.Final

commit 8320a45c156f87afcdb545218f49d561b42843f9
Author: chhsiao90 <chhsiao90@gmail.com>
Date:   Fri Jul 7 20:51:16 2017 +0800

    Configures HTTP2 pipeline with more proper way
    
    Motivation:
    
    When we use pipeline.replace and we still had ongoing inbound, then
    there will be some problem that inbound message would go to wrong
    handlers. So we add handler first, and remove self after add, so that
    the next handler will be the correct one.
    
    Modifications:
    
    Uses remove after addAfter instead of replace.
    
    Result:
    
    Fixed #6881

commit 6ab9c177acdd87c7fd0a10f128e3ea21402bc05e
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Mon Jul 31 00:55:07 2017 +0500

    Fix hash function and hash table size in Snappy
    
    Motivation:
    
    1. Hash function in the Snappy encoding is wrong probably: used '+' instead of '*'. See the reference implementation [1].
    2. Size of the hash table is calculated, but not applied.
    
    Modifications:
    
    1. Fix hash function: replace addition by multiplication.
    2. Allocate hash table with calculated size.
    3. Use an `Integer.numberOfLeadingZeros` trick for calculate log2.
    4. Release buffers in tests.
    
    Result:
    
    1. Better compression. In the test `encodeAndDecodeLongTextUsesCopy` now compressed size is 175 instead of 180 before this change.
    2. No redundant allocations for hash table.
    3. A bit faster the calc of shift (less an expensive math operations).
    
    [1] https://github.com/google/snappy/blob/513df5fb5a2d51146f409141f9eb8736935cc486/snappy.cc#L67

commit 2988fb8eeb7cc136b6b7660bcc5774cccc313744
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Jul 30 07:33:17 2017 +0200

    Ensure Http2FrameCodec uses Http2Settings.defaultSettings()
    
    Motivation:
    
    Http2FrameCodec should use Http2Settings.defaultSettings() when no Http2Settings were specified by the user.
    
    Modifications:
    
    Replace new Http2Settings() with Http2Settings.defaultSettings()
    
    Result:
    
    Use correct Http2Settings by default when using Http2FrameCodec in all cases.

commit 068e64dbcfc6b3af30d218a12d6145c0881c45d0
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Mon Jul 31 23:35:36 2017 +0500

    Fix a potential NPE

commit 21b7ab1f25f8c7032d74a82305bc12f18f863faf
Author: Alberto K <albertok@gmail.com>
Date:   Sun Jul 30 19:48:57 2017 +1000

    Allows IP_TRANSPARENT to be set on a redirecting socket
    
    Motivation:
    
    IP_TRANSPARENT support is not complete, the option can currently only be set on EpollServerSocket. Setting the option on an EpollSocket is also requires so as to be able to bind a socket to a non-local address as described in ip(7)
    http://man7.org/linux/man-pages/man7/ip.7.html
    
    "TProxy redirection with the iptables TPROXY target also
    requires that this option be set on the redirected socket."
    
    Modifications:
    
    Added IP_TRANSPARENT socket option to EpollSocketChannelConfig
    
    Result:
    
    A redirecting socket can be created with a non-local IP address as required for TPROXY

commit 580ac8cd41a426c30aeee363a9bf3dab2f9e303f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jul 28 12:52:50 2017 +0200

    Only flush on channelReadComplete(...) in http2 hello world examples.
    
    Motivation:
    
    In our http1 hello world example we only flush on channelReadComplete(...) to make better use of gathering writes. We should do the same in http2.
    
    Modifications:
    
    Only flush in channelReadComplete(...)
    
    Result:
    
    Better performance and more consistent examples.

commit 8adb30bbe2785094c92d085757cb1fdc2c1edec9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jun 23 14:34:57 2017 +0200

    Correctly run all pending tasks for EmbeddedChannel when the Channel was closed.
    
    Motivation:
    
    When a user called ctx.close() and used the EmbeddedChannel we did not correctly run all pending tasks which means channelInactive was never called.
    
    Modifications:
    
    Ensure we run all pending tasks after all operations that may change the Channel state and are part of the Channel.Unsafe impl.
    
    Result:
    
    Fixes [#6894].

commit d9d3d65716dfe8f5a8d83e5fa83286185bcf0657
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Jul 30 06:55:22 2017 +0200

    Add comment why the ResourceLeak creation is happening as last in the constructor. Followup of c5b5d363601a0d9ae294034c1e68a6de54a0958f

commit c5b5d363601a0d9ae294034c1e68a6de54a0958f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jul 28 13:37:39 2017 +0200

    Fix false-positive leak detection report when ReferenceCountedOpenSslEngine constructor throws.
    
    Motivation:
    
    We need to ensure we only create the ResourceLeak when the constructor not throws.
    
    Modifications:
    
    Ensure ResourceLeakDetector.track(...) is only called if the constructor of ReferenceCoundedOpenSslEngine not throws.
    
    Result:
    
    No more false-positves.

commit 60250f3795d4082e59df6806dade2966ec583859
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Wed Jul 26 16:32:12 2017 -0700

    Make DelegatingChannelPromiseNotifier use Vararg overload
    
    Motivation:
    ErrorProne complains that the array override doesn't match the
    vararg super call.  See http://errorprone.info/bugpattern/Overrides
    
    Additionally, almost every other Future uses the vararg form, so
    it would be stylistically consistent to keep it that way.
    
    Modifications:
    Use vararg override.
    
    Result:
    Cleaner, less naggy code.

commit 339131c660950cef894b13bc0422c8ae49f7766b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jul 26 20:00:31 2017 +0200

    DefaultChannelPipeline.estimatorHandle needs to be volatile
    
    Motivation:
    
    DefaultChannelPipeline.estimatorHandle needs to be volatile as its accessed from different threads.
    
    Modifications:
    
    Make DefaultChannelPipeline.estimatorHandle volatile and correctly init it via CAS
    
    Result:
    
    No more race.

commit fe8ecea36610f8c23fc19ceb0dac8a518de0561c
Author: Vladimir Gordiychuk <folyga@gmail.com>
Date:   Wed Jul 26 16:00:47 2017 +0300

    Http2FrameLogger avoid hex dump of the ByteBufs when log disabled
    
    Motivation:
    
    Currentry logger create hex dump even if log write will not apply.
    It's unecessary GC overhead.
    
    Modifications:
    
    Restore optimization from #3492
    
    Result:
    
    Fixes #7025

commit 732b145842d1442c946998559cbed61747a9cf9a
Author: Spencer Fang <spencerfang@google.com>
Date:   Fri Jul 7 11:07:02 2017 -0700

    Http2ConnectionHandler: allow graceful shutdown to wait forever
    
    Motivation:
    
    There should be a way to allow graceful shutdown to wait for all open streams to close without a timeout. Using gracefulShutdownTimeoutMillis with a large value is a bit of a hack, and has a gotcha that sufficiently large values will overflow the long, resulting in a ClosingChannelFutureListener that executes immediately.
    
    Modification:
    
    Allow to use gracefulShutdownTimeoutMillis(-1) to express waiting until all streams are closed.
    
    Result:
    
    We can now shutdown the connection without a forced timeout.

commit 529025d9d59280ad9e2f173e1bd0562a1e111280
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jul 24 19:21:54 2017 +0200

    Allow to use oldest Channel out of the Simple / FixedChannelPool on acquire
    
    Motivation:
    
    We previously used pollLast() to retrieve a Channel from the queue that backs SimpleChannelPool. This could lead to the problem that some Channels are very unfrequently used and so when these are used the connection was already be closed and so could not be reused.
    
    Modifications:
    
    Allow to configure if the last recent used Channel should be used or the "oldest".
    
    Result:
    
    More flexible usage of ChannelPools

commit 359beff56fbb61254d6b1924c7cc63c69a67842a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jul 25 21:14:55 2017 +0200

    Choose ipv4 or ipv6 google dns servers as default fallback based on the settings for this system / jvm
    
    Motivation:
    
    We should not use ipv4 google dns servers if the app is configured to run ipv6.
    
    Modifications:
    
    Use either ipv4 or ipv6 dns servers depending on the system config.
    
    Result:
    
    More correct behaviour

commit efb2d141c1de9ef19443bb04678ef753894fcbe2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Jul 22 16:31:42 2017 +0200

    Correctly handle unsigned int values returned from TCP_INFO
    
    Motivation:
    
    We used an int[] to store all values that are returned in the struct for TCP_INFO which is not good enough as it uses usigned int values.
    
    Modifications:
    
    - Change int[] to long[] and correctly cast values.
    
    Result:
    
    No more truncated values.

commit 34fdc7a33e2468d389364a22024d269d5a189bb3
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jul 24 12:03:25 2017 +0200

    Skip invalid hostnames when construct default dns servers to use.
    
    Motivation:
    
    When the hostname portion can not be extracted we should just skip the server as otherwise we will produce and exception when trying to create the InetSocketAddress.
    
    This was happing when trying to run the test-suite on a system and using java7:
    
    java.lang.IllegalArgumentException: hostname can't be null
    	at java.net.InetSocketAddress.checkHost(InetSocketAddress.java:149)
    	at java.net.InetSocketAddress.<init>(InetSocketAddress.java:216)
    	at io.netty.util.internal.SocketUtils$10.run(SocketUtils.java:171)
    	at io.netty.util.internal.SocketUtils$10.run(SocketUtils.java:168)
    	at java.security.AccessController.doPrivileged(Native Method)
    	at io.netty.util.internal.SocketUtils.socketAddress(SocketUtils.java:168)
    	at io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider.<clinit>(DefaultDnsServerAddressStreamProvider.java:74)
    	at io.netty.resolver.dns.DnsServerAddressesTest.testDefaultAddresses(DnsServerAddressesTest.java:39)
    
    Modifications:
    
    Skip if hostname can not be extracted.
    
    Result:
    
    No more java.lang.ExceptionInInitializerError.

commit 486f96225239592fc47ca036e96121050dbef166
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jul 24 13:12:53 2017 +0200

    Respect DNS port that is specified via JNDI
    
    Motivation:
    
    JNDI allows to specify an port so we should respect it.
    
    Modifications:
    
    Use the specified port and if none is specifed use 53.
    
    Result:
    
    Correct handling of JNDI configured DNS.

commit d8f4547f5cbe95e3b46260556a27bdc7f76e0249
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Fri Jul 21 12:37:18 2017 -0700

    Unify {Epoll,KQueue}EventLoopGroup initialization.
    
    Motivation:
    `Epoll.ensureAvailability()` is called multiple times, once in
    static initialization and in a couple of the constructors.  This is
    redundant and confusing to read.
    
    Modifications:
    Move `Epoll.ensureAvailability()` call into an instance initializer
    and remove all other references.  This ensures that every EELG
    checks availability, while still delaying the check until
    construction.  This pattern is used when there are multiple ctors,
    as in this class.
    
    Result:
    Easier to read code.

commit 452fd3624081553ed0d2b9b6f59c21789a274f69
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Jul 20 17:52:54 2017 -0700

    ByteBufs which are not resizable should not throw in ensureWritable(int,boolean)
    
    Motivation:
    ByteBuf#ensureWritable(int,boolean) returns an int indicating the status of the resize operation. For buffers that are unmodifiable or cannot be resized this method shouldn't throw but just return 1.
    ByteBuf#ensureWriteable(int) should throw unmodifiable buffers.
    
    Modifications:
    - ReadOnlyByteBuf should be updated as described above.
    - Add a unit test to SslHandler which verifies the read only buffer can be tolerated in the aggregation algorithm.
    
    Result:
    Fixes https://github.com/netty/netty/issues/7002.

commit 2fbce6d470862b8896a44cddf1a061b3b738d206
Author: Eric Anderson <ejona@google.com>
Date:   Fri Jul 21 11:39:44 2017 -0700

    Delete temporary self-signed certs in SSLEngineTest-based tests
    
    Motivation:
    
    Lots of usages of SelfSignedCertificates were not deleting the certs at
    the end of the test. This includes setupHandlers() which is used by
    extending classes. Although these files will be deleted at JVM exit and
    deleting them early does not free the JVM from trying to delete them at
    shutdown, it's good practice to delete eagerly and since users sometimes
    use tests as a form of documentation, it'd be good for them to see the
    explicit deletes.
    
    Modifications:
    
    Add missing delete() calls to ½ of the SelfSignedCertificates-using
    tests.
    
    Result:
    
    Tests that more clearly communicates which resources are created and
    may accumulate without early delete.

commit 8a25c359393ba4567f2f8ea8acd2826f1d8a49b8
Author: Eric Anderson <ejona@google.com>
Date:   Thu Jul 20 16:38:40 2017 -0700

    Filter user-provided ciphers using RFC cipher names
    
    Motivation:
    
    Previously filterCipherSuites was being passed the OpenSSL-formatted
    cipher names. Commit 43ae974 introduced a regression as it swapped to the
    RFC/JDK format, except that user-provided ciphers were not converted and
    remained in the OpenSSL format.
    
    This mis-match would cause all user-provided to be thrown away, leading
    to failure trying to set zero ciphers:
    Exception in thread "main" javax.net.ssl.SSLException: failed to set cipher suite: []
    	at io.netty.handler.ssl.ReferenceCountedOpenSslContext.<init>(ReferenceCountedOpenSslContext.java:299)
    	at io.netty.handler.ssl.OpenSslContext.<init>(OpenSslContext.java:43)
    	at io.netty.handler.ssl.OpenSslServerContext.<init>(OpenSslServerContext.java:347)
    	at io.netty.handler.ssl.OpenSslServerContext.<init>(OpenSslServerContext.java:335)
    	at io.netty.handler.ssl.SslContext.newServerContextInternal(SslContext.java:421)
    	at io.netty.handler.ssl.SslContextBuilder.build(SslContextBuilder.java:441)
    Caused by: java.lang.Exception: Unable to configure permitted SSL ciphers (error:100000b1:SSL routines:OPENSSL_internal:NO_CIPHER_MATCH)
    	at io.netty.internal.tcnative.SSLContext.setCipherSuite(Native Method)
    	at io.netty.handler.ssl.ReferenceCountedOpenSslContext.<init>(ReferenceCountedOpenSslContext.java:295)
    	... 7 more
    
    Modifications:
    
    Remove the reformatting of user-provided ciphers, as they are already in
    the RFC/JDK format.
    
    Result:
    
    No regression, and the internals stay sane using the RFC/JDK format.

commit d141ba11bf0c8df8c1b36f65264abd486e5a276d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jul 21 08:23:39 2017 +0200

    Fix flacky multipart test introduced by 08748344d852a07011be6e74bb5ddc6dcf221c45.
    
    Motivation:
    
    08748344d852a07011be6e74bb5ddc6dcf221c45 introduced two new tests which did not take into account that the multipart delimiter can be between 2 and 16 bytes long.
    
    Modifications:
    
    Take the multipart delimiter length into account.
    
    Result:
    
    Fixes [#7001]

commit 06f64948d5da798ed75c892f6cbba18566857937
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jul 7 16:34:08 2017 +0100

    Add tests to ensure an IllegalReferenceCountException is thrown if set/writeCharSequence is called on a released buffer
    
    Motivation:
    
    We need to ensure we not allow calling set/writeCharsequence on an released ByteBuf.
    
    Modifications:
    
    Add test-cases
    
    Result:
    
    Proves fix of [#6951].

commit f897507b09d61baca231f43bfc701c134966bd11
Author: martin vseticka <vseticka.martin@gmail.com>
Date:   Thu Jul 20 12:14:48 2017 +0200

    Handle handshake failure in Websocket Client example
    
    Motivation:
    
    We need to fail the promise if a failure during handshake happens.
    
    Modification:
    
    Correctly fail the promise.
    
    Result:
    
    Correct websocket client example. Fixes [#6998]

commit f23b2fc25d05134ce9a3811043df274ee4685720
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jul 20 10:24:18 2017 +0200

    Use 4 spaces and not 2 spaces (cleanup of 3d22b24244d4480661a1c17c8d9d67c33f82706b)

commit 3cdff368211af25720d85441e38edbdd1bddfae7
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jul 18 15:41:51 2017 +0200

    Update tests to not use TestUtils.getFreePort() and so ensure we not try to use a port that is used by the system in the meantime.
    
    Motivation:
    
    We should not try to detect a free port in tests put just use 0 when bind so there is no race in which the system my bind something to the port we choosen before.
    
    Modifications:
    
    - Remove the usage of TestUtils.getFreePort() in the testsuite
    - Remove hack to workaround bind errors which will not happen anymore now
    
    Result:
    
    Less flacky tests.

commit e5a31a4282072a792c4ab1edec5e8446a38b303a
Author: Eric Anderson <ejona@google.com>
Date:   Wed Jul 19 15:50:38 2017 -0700

    Automatically detect shaded packagePrefix
    
    Motivation:
    
    Shading requires renaming binary components (.so, .dll; for tcnative,
    epoll, etc). But the rename then requires setting the
    io.netty.packagePrefix system property on the command line or runtime,
    which is either a burden or not feasible.
    
    If you don't rename the binary components everything appears to
    work, until a dependency on a second version of the binary component is
    added. At that point, only one version of the binary will be loaded...
    which is what shading is supposed to prevent. So for valid shading, the
    binaries must be renamed.
    
    Modifications:
    
    Automatically detect the package prefix by comparing the actual class
    name to the non-shaded expected class name. The expected class name must
    be obfuscated to prevent shading utilities from changing it.
    
    Result:
    
    When shading and using binary components, runtime configuration is no
    longer necessary.
    
    Pre-existing shading users that were not renaming the binary components
    will break, because the packagePrefix previously defaulted to "". Since
    these pre-existing users had broken configurations that only _appeared_
    to work, this breakage is considered a Good Thing. Users may workaround
    this breakage temporarily by setting -Dio.netty.packagePrefix= to
    restore packagePrefix to "".
    
    Fixes #6963

commit 3d22b24244d4480661a1c17c8d9d67c33f82706b
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Wed Jul 19 13:14:06 2017 -0700

    Allowed Netty Epoll/Kqueue to work in IPv6 Only environments
    
    Motivation:
    In some environments, IPv4 may be disabled (at a kernel level).
    Google has such an environment for testing v4 -> v6 transition
    paths.  This give confidence that code is v6 ready.
    
    Modifications:
    Change native socket code to ignore failures of trying to enter
    dual stack mode.  This change has been made to Google's internal
    JDK, and will/should be upstreamed to OpenJDK eventually.
    
    Results:
    Netty works in IPv6 only environments
    
    Fixes: #6993

commit a91df58ca17d5b30c57c46dde5b1d60bb659b029
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jul 11 14:53:49 2017 -0700

    HTTP/2 enforce HTTP message flow
    
    Motivation:
    codec-http2 currently does not strictly enforce the HTTP/1.x semantics with respect to the number of headers defined in RFC 7540 Section 8.1 [1]. We currently don't validate the number of headers nor do we validate that the trailing headers should indicate EOS.
    
    [1] https://tools.ietf.org/html/rfc7540#section-8.1
    
    Modifications:
    - DefaultHttp2ConnectionDecoder should only allow decoding of a single headers and a single trailers
    - DefaultHttp2ConnectionEncoder should only allow encoding of a single headers and optionally a single trailers
    
    Result:
    Constraints of RFC 7540 restricting the number of headers/trailers is enforced.

commit 4af47f0ced39d86a1ef6a644e7c1506d81c0ea1b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jul 10 11:06:19 2017 +0200

    AbstractByteBuf.setCharSequence(...) must not expand buffer
    
    Motivation:
    
    AbstractByteBuf.setCharSequence(...) must not expand the buffer if not enough writable space is present in the buffer to be consistent with all the other set operations.
    
    Modifications:
    
    - Ensure we only exand the buffer on writeCharSequence(...) but not on setCharSequence(...)
    - Add unit tests.
    
    Result:
    
    Consistent and correct behavior.

commit ef22e65b570dd91591aafd5fadae73ded4bbfa8d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jul 18 16:14:30 2017 +0200

    Allow to delay registration when creating a EmbeddedChannel
    
    Motivation:
    
    Some ChannelOptions must be set before the Channel is really registered to have the desired effect.
    
    Modifications:
    
    Add another constructor argument which allows to not register the EmbeddedChannel to its EventLoop until the user calls register().
    
    Result:
    
    More flexible usage of EmbeddedChannel. Also Fixes [#6968].

commit 08748344d852a07011be6e74bb5ddc6dcf221c45
Author: Violeta Georgieva <milesg78@gmail.com>
Date:   Wed Jul 19 10:46:27 2017 +0300

    Fix NPEs in HttpPostRequestEncoder#nextChunk
    
    Motivation:
    
    HttpPostRequestEncoder maintains an internal buffer that holds the
    current encoded data. There are use cases when this internal buffer
    becomes null, the next chunk processing implementation should take
    this into consideration.
    
    Modifications:
    
    - When preparing the last chunk if currentBuffer is null, mark
    isLastChunkSent as true and send LastHttpContent.EMPTY_LAST_CONTENT
    - When calculating the remaining size take into consideration that the
    currentBuffer might be null
    - Tests are based on those provided in the issue by @nebhale and @bfiorini
    
    Result:
    
    Fixes #5478

commit deb5c4520492e2bed02ccd58cd43318f1a52db3d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jul 19 10:32:32 2017 +0200

    Correct typo in artifactId of dependency in bom pom.xml
    
    Motivation:
    
    There was a typo in a dependency in the bom pom.xml which lead to have it specify a non-existing artifact and also so not have the maven release plugin update the version correctly.
    
    Modifications:
    
    Rename netty-transport-unix-common to netty-transport-native-unix-common and also fix the version.
    
    Result:
    
    Fixes [#6979]

commit dbd82e07b11a644c151d22c63123de4be3519098
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jul 3 10:13:08 2017 +0200

    Let Http2ServerUpgradeCodec support Http2FrameCodec
    
    Motivation:
    
    Http2ServerUpgradeCodec should support Http2FrameCodec.
    
    Modifications:
    
    - Add support for Http2FrameCodec
    - Add example that uses Http2FrameCodec
    
    Result:
    
    More flexible use of Http2ServerUpgradeCodec

commit 0afe4e09643c457c452ef0d9563c46f8e7c24ad1
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jul 18 19:29:55 2017 -0700

    Increase timeout for DnsNameResolverTest
    
    Motivation:
    DnsNameResolverTest has been observed to timeout on the CI servers. We should increase the timeout from 5 seconds to 30 seconds.
    
    Modifications:
    - Increase timeout from 5 to 30 seconds.
    
    Result:
    Less false failures due to slower CI machines.

commit d125adec38a0fa64011e5d77c5e4eadad69d4368
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jul 17 15:44:46 2017 +0200

    AbstractByteBuf.ensureWritable(...) should check if buffer was released
    
    Motivation:
    
    AbstractByteBuf.ensureWritable(...) should check if buffer was released and if so throw an IllegalReferenceCountException
    
    Modifications:
    
    Ensure we throw in all cases.
    
    Result:
    
    More consistent and correct behaviour

commit 96e06aa74d4d7b0923ae60f5aa8de5fd88a729ee
Author: louxiu <lou.0211@gmail.com>
Date:   Mon Jul 17 11:04:35 2017 +0800

    Calculate correct lastRecords size
    
    Motivation:
    ResourceLeakDetector records at most MAX_RECORDS+1 records
    
    Modifications:
    Make room before add to lastRecords
    
    Result:
    ResourceLeakDetector will record at most MAX_RECORDS records

commit c43e09da5a2f12d10754eb005846ff0d082f2488
Author: kashike <kashike@vq.lc>
Date:   Tue Jul 18 10:19:58 2017 -0700

    Use the correct murmur3 C1 value
    introduced in a7f7d9c8e004aa13801424e6e665b1ec525a822f

commit b8d3d9655039b40bbe5df0446bfa50eb3543dd60
Author: ppatierno <ppatierno@live.com>
Date:   Tue Jul 18 12:26:54 2017 +0200

    MQTT unknown message type isn't handled as decoding error
    
    Motivation:
    
    MQTT unknown message type isn't handled as decoding error
    
    Modification:
    
    Catching exception during the MQTT decoding of the fixed header
    Adding a unit test for unknown MQTT message type
    
    Result:
    
    Fixes #6984.

commit 3e9f617504adb6f3ac984a9320020dd2c202739e
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Tue Jun 20 03:56:01 2017 +0500

    Deduplicate and simplify code in HttpPostMultipartRequestDecoder
    
    Motivation:
    
    - A `HttpPostMultipartRequestDecoder` contains two pairs of the same methods: `readFileUploadByteMultipartStandard`+`readFileUploadByteMultipart` and `loadFieldMultipartStandard`+`loadFieldMultipart`.
    - These methods use `NotEnoughDataDecoderException` to detecting not last data chunk (exception handling is very expensive).
    - These methods can be greatly simplified.
    - Methods `loadFieldMultipart` and `loadFieldMultipartStandard` has an unnecessary catching for the `IndexOutOfBoundsException`.
    
    Modifications:
    
    - Remove duplicate methods.
    - Replace handling `NotEnoughDataDecoderException` by the return of a boolean result.
    - Simplify code.
    
    Result:
    
    The code is cleaner and easier to support. Less exception handling logic.

commit 64a3e6c69c1ba49ccd7fe0410e6b2131cda9315c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jul 17 10:31:57 2017 +0200

    SSLEngineTest should not depend on OpenSsl* class.
    
    Motivation:
    
    6152990073607602b2263109139cf829f3d2f7e4 introduced a test-case in SSLEngineTest which used OpenSsl.* which should not be done as this is am abstract bass class that is also used for non OpenSsl tests.
    
    Modifications:
    
    Move the protocol definations into SslUtils.
    
    Result:
    
    Cleaner code.

commit 0ad99310f5c02363f9402872d9b3d803654a794d
Author: louxiu <lou.0211@gmail.com>
Date:   Sun Jul 16 15:38:16 2017 +0800

    Record release when enable detailed leak detection
    
    Motivation:
    It would be easier to find where is missing release call in several retain release calls on a ByteBuf
    
    Modifications:
    Remove final modifier on SimpleLeakAwareByteBuf and SimpleLeakAwareByteBuf release function and override it to record release in AdvancedLeakAwareByteBuf and AdvancedLeakAwareCompositeByteBuf
    
    Result:
    Release will be recorded when enable detailed leak detection

commit f1e14d0cb2a7a7cb574428df4a9b561b413af8bc
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jul 10 14:42:01 2017 +0200

    Only add / to uri if really needed.
    
    Motivation:
    
    We not need to include the start index in the check. See https://github.com/netty/netty/pull/6924#discussion_r125263918
    
    Modifications:
    
    Change <= to <
    
    Result:
    
    More correct code.

commit e6a399a7785b41dc941e8037257a30a0df1d92d4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Jul 16 14:07:43 2017 +0200

    Explicit specify hostaddress during tests to ensure testsuite pass on docker (mac)
    
    Motivation:
    
    When run the current testsuite on docker (mac) it will fail a few tests with:
    
    io.netty.channel.AbstractChannel$AnnotatedConnectException: connect(..) failed: Cannot assign requested address: /0:0:0:0:0:0:0:0%0:46607
    Caused by: java.net.ConnectException: connect(..) failed: Cannot assign requested address
    
    Modifications:
    
    Specify host explicit as done in other tests to only use ipv6 when really supported.
    
    Result:
    
    Build pass on docker as well

commit d4b9f3e4aa76f5633da575b4e1de5001ce64db72
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jul 17 10:38:26 2017 +0200

    Use array initializer expression
    
    Motivation:
    
    Code introduced in 6152990073607602b2263109139cf829f3d2f7e4 can be cleaned up and use array initializer expressions.
    
    Modifications:
    
    Use array initializer expressions.
    
    Result:
    
    Cleaner code.

commit 4c14d1198b58e9660c116ce151b077d98b9bd2a2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Jul 15 18:42:51 2017 +0200

    Add testcase to ensure NioEventLoop.rebuildSelector() works correctly.
    
    Motivation:
    
    We had recently a report that the issue [#6607] is still not fixed.
    
    Modifications:
    
    Add a testcase to prove the issue is fixed.
    
    Result:
    
    More tests.

commit 96f52e05bf9f9cbf210bfe97007ddcd690e394ce
Author: Violeta Georgieva <milesg78@gmail.com>
Date:   Fri Jul 14 21:57:17 2017 +0300

    Fix #6969: Do not reset the states while streaming Json array
    
    Motivation:
    
    Calling JsonObjectDecoder#reset while streaming Json array over multiple
    writes causes CorruptedFrameException to be thrown.
    
    Modifications:
    
    While streaming Json array and if the current readerIndex has been reset,
    ensure that the states will not be reset.
    
    Result:
    
    Fixes #6969

commit 6152990073607602b2263109139cf829f3d2f7e4
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jul 12 09:46:26 2017 -0700

    OpenSslEngine protocol selection must be contiguous
    
    Motivation:
    TLS doesn't support a way to advertise non-contiguous versions from the client's perspective, and the client just advertises the max supported version. The TLS protocol also doesn't support all different combinations of discrete protocols, and instead assumes contiguous ranges. OpenSSL has some unexpected behavior (e.g. handshake failures) if non-contiguous protocols are used even where there is a compatible set of protocols and ciphers. For these reasons this method will determine the minimum protocol and the maximum protocol and enabled a contiguous range from [min protocol, max protocol] in OpenSSL.
    
    Modifications:
    - ReferenceCountedOpenSslEngine#setEnabledProtocols should determine the min/max protocol versions and enable a contiguous range
    
    Result:
    OpenSslEngine is more consistent with the JDK's SslEngineImpl and no more unexpected handshake failures due to protocol selection quirks.

commit 43ae9748d0d2e33813b2d5e13cca951ab04dd033
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jul 12 12:53:39 2017 -0700

    Unify default cipher suites betweek JDK and OpenSSL
    
    Motivation:
    Currently the default cipher suites are set independently between JDK and OpenSSL. We should use a common approach to setting the default ciphers. Also the OpenSsl default ciphers are expressed in terms of the OpenSSL cipher name conventions, which is not correct and may be exposed to the end user. OpenSSL should also use the RFC cipher names like the JDK defaults.
    
    Modifications:
    - Move the default cipher definition to a common location and use it in JDK and OpenSSL initialization
    - OpenSSL should not expose OpenSSL cipher names externally
    
    Result:
    Common initialization and OpenSSL doesn't expose custom cipher names.

commit b249714a2d26f923ef2ede5d3488c3c3ed2bada3
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jul 12 13:54:57 2017 -0700

    DNS Resovler tests should be more explicit about ndots
    
    Motivation:
    The DNS resolver may use default configuration inherited from the environment. This means the ndots value may change and result in test failure if the tests don't explicitly set the assumed value.
    
    Modifications:
    - Explicitly set ndots in resolver-dns unit tests so we don't fail if the environment overrides the search domain and ndots
    
    Result:
    Unit tests are less dependent upon the enviroment they run in.
    Fixes https://github.com/netty/netty/issues/6966.

commit e5455d31b3cfe74b5c6008b68955a10d7d539f9d
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Mon Jul 10 20:46:11 2017 -0700

    Fix Race in ReferenceCountedOpenSslEngine
    
    Motivation:
    ReferenceCountedOpenSslEngine is careful to lock access to `ssl`
    almost everywhere (manually verified) *except* in the constructor.
    Since `ssl` is non-final, it does not enjoy automatic thread safety
    of the code that uses it.  Specifically, that means netty tcnative
    code is not thread safe.
    
    Modifications:
    
    Ensure that all ssl engine intialization and variables related to
    it are properly synchronized  by adding in the constructor.
    
    Result:
    Less noisy race detector.
    
    Notes:
    The specific racing threads are:
    ```
      Read of size 8 at 0x7b5400019ff8 by thread T52 (mutexes: write M215300):
        #0 ssl_do_info_callback .../src/ssl/ssl_lib.c:2602:24 (f077793ecd812aeebb37296c987f655c+0x23c6834)
        #1 ssl_process_alert .../src/ssl/tls_record.c:473:3 (f077793ecd812aeebb37296c987f655c+0x23a5346)
        #2 tls_open_record .../src/ssl/tls_record.c:338:12 (f077793ecd812aeebb37296c987f655c+0x23a5289)
        #3 ssl3_get_record .../src/ssl/s3_pkt.c:146:7 (f077793ecd812aeebb37296c987f655c+0x23a3da0)
        #4 ssl3_read_app_data .../src/ssl/s3_pkt.c:388:17 (f077793ecd812aeebb37296c987f655c+0x23a368f)
        #5 ssl_read_impl .../src/ssl/ssl_lib.c:722:15 (f077793ecd812aeebb37296c987f655c+0x23c0895)
        #6 SSL_read .../src/ssl/ssl_lib.c:743:10 (f077793ecd812aeebb37296c987f655c+0x23c075b)
        #7 netty_internal_tcnative_SSL_readFromSSL .../netty_tcnative/openssl-dynamic/src/main/c/ssl.c:946:12 (f077793ecd812aeebb37296c987f655c+0x23827f7)
        #8 <null> <null> (0x7fc0760193be)
        #9 io.netty.handler.ssl.ReferenceCountedOpenSslEngine.readPlaintextData(Ljava/nio/ByteBuffer;)I (ReferenceCountedOpenSslEngine.java:449)
        #10 io.netty.handler.ssl.ReferenceCountedOpenSslEngine.unwrap([Ljava/nio/ByteBuffer;II[Ljava/nio/ByteBuffer;II)Ljavax/net/ssl/SSLEngineResult; (ReferenceCountedOpenSslEngine.java:882)
        #11 io.netty.handler.ssl.ReferenceCountedOpenSslEngine.unwrap([Ljava/nio/ByteBuffer;[Ljava/nio/ByteBuffer;)Ljavax/net/ssl/SSLEngineResult; (ReferenceCountedOpenSslEngine.java:985)
        #12 io.netty.handler.ssl.ReferenceCountedOpenSslEngine.unwrap(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)Ljavax/net/ssl/SSLEngineResult; (ReferenceCountedOpenSslEngine.java:1028)
        #13 io.netty.handler.ssl.SslHandler$SslEngineType$1.unwrap(Lio/netty/handler/ssl/SslHandler;Lio/netty/buffer/ByteBuf;IILio/netty/buffer/ByteBuf;)Ljavax/net/ssl/SSLEngineResult; (SslHandler.java:206)
        #14 io.netty.handler.ssl.SslHandler.unwrap(Lio/netty/channel/ChannelHandlerContext;Lio/netty/buffer/ByteBuf;II)Z (SslHandler.java:1162)
        #15 io.netty.handler.ssl.SslHandler.decode(Lio/netty/channel/ChannelHandlerContext;Lio/netty/buffer/ByteBuf;Ljava/util/List;)V (SslHandler.java:1084)
        #16 io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(Lio/netty/channel/ChannelHandlerContext;Lio/netty/buffer/ByteBuf;Ljava/util/List;)V (ByteToMessageDecoder.java:489)
        #17 io.netty.handler.codec.ByteToMessageDecoder.callDecode(Lio/netty/channel/ChannelHandlerContext;Lio/netty/buffer/ByteBuf;Ljava/util/List;)V (ByteToMessageDecoder.java:428)
        #18 io.netty.handler.codec.ByteToMessageDecoder.channelRead(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Object;)V (ByteToMessageDecoder.java:265)
        #19 io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(Ljava/lang/Object;)V (AbstractChannelHandlerContext.java:362)
        #20 io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(Lio/netty/channel/AbstractChannelHandlerContext;Ljava/lang/Object;)V (AbstractChannelHandlerContext.java:348)
        #21 io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(Ljava/lang/Object;)Lio/netty/channel/ChannelHandlerContext; (AbstractChannelHandlerContext.java:340)
        #22 io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Object;)V (DefaultChannelPipeline.java:1334)
        #23 io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(Ljava/lang/Object;)V (AbstractChannelHandlerContext.java:362)
        #24 io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(Lio/netty/channel/AbstractChannelHandlerContext;Ljava/lang/Object;)V (AbstractChannelHandlerContext.java:348)
        #25 io.netty.channel.DefaultChannelPipeline.fireChannelRead(Ljava/lang/Object;)Lio/netty/channel/ChannelPipeline; (DefaultChannelPipeline.java:926)
        #26 io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read()V (AbstractNioByteChannel.java:134)
        #27 io.netty.channel.nio.NioEventLoop.processSelectedKey(Ljava/nio/channels/SelectionKey;Lio/netty/channel/nio/AbstractNioChannel;)V (NioEventLoop.java:644)
        #28 io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized()V (NioEventLoop.java:579)
        #29 io.netty.channel.nio.NioEventLoop.processSelectedKeys()V (NioEventLoop.java:496)
        #30 io.netty.channel.nio.NioEventLoop.run()V (NioEventLoop.java:458)
        #31 io.netty.util.concurrent.SingleThreadEventExecutor$5.run()V (SingleThreadEventExecutor.java:858)
        #32 io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run()V (DefaultThreadFactory.java:138)
        #33 java.lang.Thread.run()V (Thread.java:745)
        #34 (Generated Stub)
    
      Previous write of size 8 at 0x7b5400019ff8 by thread T97:
        #0 SSL_CTX_set_info_callback .../ssl/ssl_session.c:1136:22 (f077793ecd812aeebb37296c987f655c+0x23bd621)
        #1 netty_internal_tcnative_SSL_newSSL .../netty_tcnative/openssl-dynamic/src/main/c/ssl.c:830:5 (f077793ecd812aeebb37296c987f655c+0x2382306)
        #2 <null> <null> (0x7fc0760193be)
        #3 io.netty.handler.ssl.ReferenceCountedOpenSslEngine.<init>(Lio/netty/handler/ssl/ReferenceCountedOpenSslContext;Lio/netty/buffer/ByteBufAllocator;Ljava/lang/String;IZ)V (ReferenceCountedOpenSslEngine.java:237)
        #4 io.netty.handler.ssl.OpenSslEngine.<init>(Lio/netty/handler/ssl/OpenSslContext;Lio/netty/buffer/ByteBufAllocator;Ljava/lang/String;I)V (OpenSslEngine.java:31)
        #5 io.netty.handler.ssl.OpenSslContext.newEngine0(Lio/netty/buffer/ByteBufAllocator;Ljava/lang/String;I)Ljavax/net/ssl/SSLEngine; (OpenSslContext.java:49)
        #6 io.netty.handler.ssl.ReferenceCountedOpenSslContext.newEngine(Lio/netty/buffer/ByteBufAllocator;Ljava/lang/String;I)Ljavax/net/ssl/SSLEngine; (ReferenceCountedOpenSslContext.java:409)
        #7 io.netty.handler.ssl.ReferenceCountedOpenSslContext.newEngine(Lio/netty/buffer/ByteBufAllocator;)Ljavax/net/ssl/SSLEngine; (ReferenceCountedOpenSslContext.java:423)
        #8 io.grpc.netty.ProtocolNegotiators$ServerTlsHandler.handlerAdded(Lio/netty/channel/ChannelHandlerContext;)V (ProtocolNegotiators.java:133)
        #9 io.netty.channel.DefaultChannelPipeline.callHandlerAdded0(Lio/netty/channel/AbstractChannelHandlerContext;)V (DefaultChannelPipeline.java:597)
        #10 io.netty.channel.DefaultChannelPipeline.addLast(Lio/netty/util/concurrent/EventExecutorGroup;Ljava/lang/String;Lio/netty/channel/ChannelHandler;)Lio/netty/channel/ChannelPipeline; (DefaultChannelPipeline.java:226)
        #11 io.netty.channel.DefaultChannelPipeline.addLast(Lio/netty/util/concurrent/EventExecutorGroup;[Lio/netty/channel/ChannelHandler;)Lio/netty/channel/ChannelPipeline; (DefaultChannelPipeline.java:392)
        #12 io.netty.channel.DefaultChannelPipeline.addLast([Lio/netty/channel/ChannelHandler;)Lio/netty/channel/ChannelPipeline; (DefaultChannelPipeline.java:379)
        #13 io.grpc.netty.NettyServerTransport.start(Lio/grpc/internal/ServerTransportListener;)V (NettyServerTransport.java:99)
        #14 io.grpc.netty.NettyServer$1.initChannel(Lio/netty/channel/Channel;)V (NettyServer.java:164)
        #15 io.netty.channel.ChannelInitializer.initChannel(Lio/netty/channel/ChannelHandlerContext;)Z (ChannelInitializer.java:113)
        #16 io.netty.channel.ChannelInitializer.handlerAdded(Lio/netty/channel/ChannelHandlerContext;)V (ChannelInitializer.java:105)
        #17 io.netty.channel.DefaultChannelPipeline.callHandlerAdded0(Lio/netty/channel/AbstractChannelHandlerContext;)V (DefaultChannelPipeline.java:597)
        #18 io.netty.channel.DefaultChannelPipeline.access$000(Lio/netty/channel/DefaultChannelPipeline;Lio/netty/channel/AbstractChannelHandlerContext;)V (DefaultChannelPipeline.java:44)
        #19 io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask.execute()V (DefaultChannelPipeline.java:1387)
        #20 io.netty.channel.DefaultChannelPipeline.callHandlerAddedForAllHandlers()V (DefaultChannelPipeline.java:1122)
        #21 io.netty.channel.DefaultChannelPipeline.invokeHandlerAddedIfNeeded()V (DefaultChannelPipeline.java:647)
        #22 io.netty.channel.AbstractChannel$AbstractUnsafe.register0(Lio/netty/channel/ChannelPromise;)V (AbstractChannel.java:506)
        #23 io.netty.channel.AbstractChannel$AbstractUnsafe.access$200(Lio/netty/channel/AbstractChannel$AbstractUnsafe;Lio/netty/channel/ChannelPromise;)V (AbstractChannel.java:419)
        #24 io.netty.channel.AbstractChannel$AbstractUnsafe$1.run()V (AbstractChannel.java:478)
        #25 io.netty.util.concurrent.AbstractEventExecutor.safeExecute(Ljava/lang/Runnable;)V (AbstractEventExecutor.java:163)
        #26 io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(J)Z (SingleThreadEventExecutor.java:403)
        #27 io.netty.channel.nio.NioEventLoop.run()V (NioEventLoop.java:462)
        #28 io.netty.util.concurrent.SingleThreadEventExecutor$5.run()V (SingleThreadEventExecutor.java:858)
        #29 io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run()V (DefaultThreadFactory.java:138)
        #30 java.lang.Thread.run()V (Thread.java:745)
        #31 (Generated Stub)
    
    ```

commit 74140dbf53456c30600d7870316c5ac79878a003
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jul 11 18:15:25 2017 -0700

    Correct merge error from f7b3caeddc5bb1da75aaafa4a66dec88ed585d69

commit 81fb2eede866433be8455c040b0455d4791775ca
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Jun 2 09:26:27 2017 -0700

    Revert "Revert "SslHandler avoid calling wrap/unwrap when unnecessary""
    
    Motivation:
    PR https://github.com/netty/netty/pull/6803 corrected an error in the return status of the OpenSslEngine. We should now be able to restore the SslHandler optimization.
    
    Modifications:
    - This reverts commit 7f3b75a5091dcd6d882102fdb92daa6931e02c30.
    
    Result:
    SslHandler optimization is restored.

commit 7cfe4161823dec6192543e916b927e7de40190be
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Dec 6 09:52:13 2016 -0800

    Use unbounded queues from JCTools 2.0.2
    
    Motivation:
    JCTools 2.0.2 provides an unbounded MPSC linked queue. Before we shaded JCTools we had our own unbounded MPSC linked queue and used it in various places but gave this up because there was no public equivalent available in JCTools at the time.
    
    Modifications:
    - Use JCTool's MPSC linked queue when no upper bound is specified
    
    Result:
    Fixes https://github.com/netty/netty/issues/5951

commit 24263c2bd80f483184b2e8593f2aad1f684e94bf
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Jul 10 12:31:16 2017 -0700

    Fix merge issue from 86e653e04fb452c92154e39cd7189615dc0ec323

commit 86e653e04fb452c92154e39cd7189615dc0ec323
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon May 8 18:06:42 2017 -0700

    SslHandler aggregation of plaintext data on write
    
    Motivation:
    Each call to SSL_write may introduce about ~100 bytes of overhead. The OpenSslEngine (based upon OpenSSL) is not able to do gathering writes so this means each wrap operation will incur the ~100 byte overhead. This commit attempts to increase goodput by aggregating the plaintext in chunks of <a href="https://tools.ietf.org/html/rfc5246#section-6.2">2^14</a>. If many small chunks are written this can increase goodput, decrease the amount of calls to SSL_write, and decrease overall encryption operations.
    
    Modifications:
    - Introduce SslHandlerCoalescingBufferQueue in SslHandler which will aggregate up to 2^14 chunks of plaintext by default
    - Introduce SslHandler#setWrapDataSize to control how much data should be aggregated for each write. Aggregation can be disabled by setting this value to <= 0.
    
    Result:
    Better goodput when using SslHandler and the OpenSslEngine.

commit f7b3caeddc5bb1da75aaafa4a66dec88ed585d69
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Feb 3 17:54:13 2017 -0800

    OpenSslEngine option to wrap/unwrap multiple packets per call
    
    Motivation:
    The JDK SSLEngine documentation says that a call to wrap/unwrap "will attempt to consume one complete SSL/TLS network packet" [1]. This limitation can result in thrashing in the pipeline to decode and encode data that may be spread amongst multiple SSL/TLS network packets.
    ReferenceCountedOpenSslEngine also does not correct account for the overhead introduced by each individual SSL_write call if there are multiple ByteBuffers passed to the wrap() method.
    
    Modifications:
    - OpenSslEngine and SslHandler supports a mode to not comply with the limitation to only deal with a single SSL/TLS network packet per call
    - ReferenceCountedOpenSslEngine correctly accounts for the overhead of each call to SSL_write
    - SslHandler shouldn't cache maxPacketBufferSize as aggressively because this value may change before/after the handshake.
    
    Result:
    OpenSslEngine and SslHanadler can handle multiple SSL/TLS network packet per call.
    
    [1] https://docs.oracle.com/javase/7/docs/api/javax/net/ssl/SSLEngine.html

commit df568c739e2a73b4a1aea533a4fea934fdf9d0f7
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Tue Jul 4 01:57:07 2017 +0500

    Use ByteBuf#writeShort/writeMedium instead of writeBytes
    
    Motivation:
    
    1. Some encoders used a `ByteBuf#writeBytes` to write short constant byte array (2-3 bytes). This can be replaced with more faster `ByteBuf#writeShort` or `ByteBuf#writeMedium` which do not access the memory.
    2. Two chained calls of the `ByteBuf#setByte` with constants can be replaced with one `ByteBuf#setShort` to reduce index checks.
    3. The signature of method `HttpHeadersEncoder#encoderHeader` has an unnecessary `throws`.
    
    Modifications:
    
    1. Use `ByteBuf#writeShort` or `ByteBuf#writeMedium` instead of `ByteBuf#writeBytes` for the constants.
    2. Use `ByteBuf#setShort` instead of chained call of the `ByteBuf#setByte` with constants.
    3. Remove an unnecessary `throws` from `HttpHeadersEncoder#encoderHeader`.
    
    Result:
    
    A bit faster writes constants into buffers.

commit 83db2b07b46d6096c9963c87d2530155dba06d58
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jul 5 10:21:22 2017 +0200

    Also use realloc when shrink the buffer.
    
    Motivation:
    
    We should also use realloc when shrink the buffer to eliminate extra allocations / memory copies when possible.
    
    Modifications:
    
    Use realloc for expanding and shrinking when possible.
    
    Result:
    
    Less memory copies and allocations

commit ec490b2a88acae596cbc08c7648a22ac18d19c63
Author: Spencer Fang <spencerfang@google.com>
Date:   Fri May 12 16:30:38 2017 -0700

    HttpProxyHandler: allow setting headers
    
    Motivation:
    
    In some environments, the HTTP CONNECT handshake requires special headers to work.
    
    Modification:
    
    Update HttpProxyHandler to accept a HttpHeaders argument.
    
    Result:
    
    The header is passed along in the HTTP CONNECT request, and the proxy request can be successfully completed.

commit 2a376eeb1b14b1f2e23e1c30ac2f2a213dbea25b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jul 6 13:24:06 2017 +0200

    [maven-release-plugin] prepare for next development iteration

commit c7f8168324eeba89e4a8e4086948bacbdc3e6a14
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jul 6 13:23:51 2017 +0200

    [maven-release-plugin] prepare release netty-4.1.13.Final

commit 016e00bf7a914c2db3d53128291a953bf3ea0fa8
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Wed Jul 5 23:29:34 2017 +0500

    Clarify the appointment of the intermediate collection
    
    Motivation:
    
    An intermediate list is creating in the `EpollEventLoop#closeAll` to prevent ConcurrentModificationException. But this is not the obvious purpose has no comment.
    
    Modifications:
    
    Add comment to clarify the appointment of the intermediate collection.
    
    Result:
    
    More clear code.

commit d3581b575eea6c9cc2ab6f7ee7db9be965660fc7
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jul 5 13:12:13 2017 -0400

    UnixResolverDnsServerAddressStreamProvider should allow for empty /etc/resolver dir
    
    Motivation:
    UnixResolverDnsServerAddressStreamProvider currently throws an exception if /etc/resolver exists but it empty. This shouldn't be an exception and can be tolerated as if there is no contribution from /etc/resolver.
    
    Modifications:
    - Treat /etc/resolver as present and empty the same as not being present
    
    Result:
    UnixResolverDnsServerAddressStreamProvider initialization can tolerate empty /etc/resolver directory.

commit d040c939e54cee8b390dd5ab0219c2bd8944610f
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jul 5 13:03:29 2017 -0400

    UnixResolverDnsServerAddressStreamProviderTest failure
    
    Motivation:
    InetSocketAddress#getHostName() may attempt a reverse lookup which may lead to test failures because the expected address will not match.
    
    Modifications:
    - Use InetSocketAddress#getHostString() which will not attempt any lookups and instead return the original String
    
    Result:
    UnixResolverDnsServerAddressStreamProviderTest is more reliable.

commit 4d51eca21828a100a583769a7ec8c266892cd9f1
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jul 5 14:05:35 2017 -0400

    SslHandlerTest#testCompositeBufSizeEstimationGuaranteesSynchronousWrite debug info
    
    Motivation:
    SslHandlerTest#testCompositeBufSizeEstimationGuaranteesSynchronousWrite has been observed to fail on CI servers. Knowing how many bytes were seen by the client would be helpful.
    
    Modifications:
    - Add bytesSeen to the exception if the client closes early.
    
    Result:
    More debug info available.

commit c318fc7ceaecad8321374c13395c67e369467e86
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jul 5 10:06:05 2017 +0200

    Remove not needed intermediate collection while reading DatagramPackets in native transports
    
    Motivation:
    
    We used an intermediate collection to store the read DatagramPackets and only fired these through the pipeline once wewere done with the reading loop. This is not needed and can also increase memory usage.
    
    Modifications:
    
    Remove intermediate collection
    
    Result:
    
    Less overhead and possible less memory usage during read loop.

commit 6d80c641e92588a5317c0b9a9631918a521d52bc
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Jul 3 17:46:36 2017 -0400

    DNS Resolver should be more consistent with JDK resolution
    
    Motivation:
    If there are multiple DNS servers to query Java's DNS resolver will attempt to resolve A and AAAA records in sequential order and will terminate with a failure once all DNS servers have been exhausted. Netty's DNS server will share the same DnsServerAddressStream for the different record types which may send the A question to the first host and the AAAA question to the second host. Netty's DNS resolution also may not progress to the next DNS server in all situations and doesn't have a means to know when resolution has completed.
    
    Modifications:
    - DnsServerAddressStream should support new methods to allow the same stream to be used to issue multiple queries (e.g. A and AAAA) against the same host.
    - DnsServerAddressStream should support a method to determine when the stream will start to repeat, and therefore a failure can be returned.
    - Introduce SequentialDnsServerAddressStreamProvider for sequential use cases
    
    Result:
    Fixes https://github.com/netty/netty/issues/6926.

commit 449befa0034e2cf77b3033f62d4f2153cef5a1d7
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jul 4 13:27:25 2017 -0400

    Workaround IBM's J9 JVM getSupportedCipherSuites() returning SSL_ prefix cipher names
    
    Motivation:
    IBM's J9 JVM utilizes a custom cipher naming scheme with SSL_ prefix [1] instead of the TLS_ prefix defined by TLS RFCs and the JSSE cihper suite names [2]. IBM's documentation says that the SSL_ prefix are "interchangeable" with cipher names with the TLS_ prefix [1]. To work around this issue we parse the supported cipher list and see an SSL_ prefix we can also add the same cipher with the TLS_ prefix. For more details see a discussion on IBM's forums [3] and IBM's issue tracker [4].
    
    [1] https://www.ibm.com/support/knowledgecenter/en/SSYKE2_8.0.0/com.ibm.java.security.component.80.doc/security-component/jsse2Docs/ciphersuites.html
    [2] http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#ciphersuites
    [3] https://www.ibm.com/developerworks/community/forums/html/topic?id=9b5a56a9-fa46-4031-b33b-df91e28d77c2
    [4] https://www.ibm.com/developerworks/rfe/execute?use_case=viewRfe&CR_ID=71770
    
    Modifications:
    - When parsing the supported cipher list to get the supported ciphers and we encounter a SSL_ prefix we should also add a TLS_ prefix cipher.
    - Remove SSL_ prefix ciphers from Http2SecurityUtil.
    
    Result:
    Work around for IBM JVM's custom naming scheme covers more cases for supported cipher suites.

commit 1ba265ad4d14163e346996a5c0a663b4600e7d29
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Wed Jul 5 03:25:16 2017 +0500

    AbstractMethodError with barchart-udt
    
    Motivation:
    
    `SocketChannelUDT` from barchart-udt does not have the java 7 `public abstract SocketChannel bind(SocketAddress local)` method. Calling the abstract method `SocketChannel.bind(SocketAddress localAddress)` for `SocketChannelUDT` leads to an `AbstractMethodError` runtime error.
    
    Modifications:
    
    Make workaround with explicit call of `SocketChannelUDT.bind(SocketAddress local)` as it done in `NioUdtByteConnectorChannel`.
    
    Result:
    
    Fixes [#6934].

commit 91b62da8c150b6202acd812772479856ab4c3dad
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jun 29 13:18:27 2017 +0200

    Remove @deprecation keyword on AbstractUnsafe.ensureOpen(...)
    
    Motivation:
    
    e84567004324c0bfd04b0ca9e1e182ed89394b16 marked AbstractUnsafe.ensureOpen(...) as deprecated for no reason.
    
    Modifications:
    
    Remove `@deprecation`
    
    Result:
    
    Remove incorrect annotation

commit 1df8f2ccd1f12a7b5c455d7b8e44d5b28fa4be7c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jun 28 14:03:47 2017 -0400

    KQueue crash due to close/cleanup sequencing
    
    Motivation:
    The kqueue documentation states that 'Calling close() on a file descriptor will remove any kevents that reference the descriptor.' [1], but doesn't mention if this cleanup will be done synchronously. Under some circumstances it has been observed that cleanup was not done immediately and when KQueueEventLoop attempted to access the channel associated with the event the JVM would crash, a ClassCastException, or generally undefined behavior would occur because of invalid pointer references.
    
    [1] https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2
    
    Modifications:
    - AbstractKqueueChannel#doClose should not rely upon this assumption and instead should call doDeregister() to ensure cleanup is done synchronously.
    - Deleting a kevent should also set the jniSelfPtr stored in the udata of that kevent to NULL, to ensure we will not dereference it later.
    
    Result:
    No more kqueue crash due to close/cleanup sequencing.

commit 8d0e0922a512a08a287c25bed6462fa244738603
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Wed Jun 28 15:54:55 2017 +0500

    SocksCmdRequest and SocksCmdResponse are trying to convert host from IDN for the non-DOMAIN address types
    
    Motivation:
    
    In the SocksCmdRequest and SocksCmdResponse constructors a host param converts from IDN to ascii compatible form regardless address type.
    
    Modifications:
    
    Use `IDN#toASCII` only for `DOMAIN` address type.
    
    Result:
    
    More correct host handling in socks commands.

commit f35047765f00de1d642d23bc0f980fa8eceacf3b
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Wed Jun 28 15:42:03 2017 +0500

    Avoid a double check ByteBuf#ensureWritable in ByteBufUtil
    
    Motivation:
    
    Methods `ByteBufUtil#writeUtf8` and `ByteBufUtil#writeAscii` contains a check `ByteBuf#ensureWritable` before the calling `ByteBuf#writeBytes`. But the `ByteBuf#writeBytes` also do a such check inside.
    
    Modifications:
    
    Make checks more targeted.
    
    Result:
    
    Less redundant method calls.

commit b7a5743e8be5df2d5b109a35881690bac3939fd3
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jun 27 11:55:23 2017 +0200

    Return the correct Future from FixedChannelPool.release()
    
    Motivation:
    
    The behaviour of the FixedChannelPool.release was inconsistent with the
    SimpleChannelPool implementation, in that given promise is returned.
    
    In the FixedChannelPool implementation a new promise was return and
    this meant that the completion of that promise can be different.
    Specifically on releasing a channel to a closed pool, the parameter
    promise is failed with an IllegalStateException but the returned one
    will have been successful (as it was completed by call to super
    .release)
    
    Modification:
    
    Return the given promise as the result of FixedChannelPool.release
    
    Result:
    
    Returned promise will reflect the result of the release operation.

commit 32b3f58f6308f0d7cc22fad4a94406c4fe16a402
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jun 27 11:34:05 2017 +0200

    Close channels that are released to a closed FixedChannelPool.
    
    Motivation:
    
    Channels returned to a FixedChannelPool after closing it remain active.
    
    Since channels that where acquired from the pool are not closed during the close operation, they remain open even after releasing the channel back to the pool where they are then in accessible and become in-effect a connection leak.
    
    Modification:
    
    Close the released channel on releasing back to a closed pool.
    
    Result:
    
    Much harder to create a connection leak by closing an active
    FixedChannelPool instance.

commit bc46a99eaa448136ae3a54c248cc3f9dfb8f87e9
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jun 27 15:27:42 2017 -0400

    DefaultHttp2ConnectionEncoder#writeHeaders shouldn't send GO_AWAY if stream is closed
    
    Motivation:
    DefaultHttp2ConnectionEncoder#writeHeaders attempts to find a stream object, and if one doesn't exist it tries to create one. However in the event that the local endpoint has received a RST_STREAM frame before writing the response headers we attempt to create a stream. Since this stream ID is for the incorrect endpoint we then generate a GO_AWAY for what appears to be a protocol error, but can instead be failed locally.
    
    Modifications:
    - Just fail the local promise in the above situation instead of sending a GO_AWAY
    
    Result:
    Less severe consequences if the server asynchronously sends headers after a RST_STREAM has been received.
    Fixes https://github.com/netty/netty/issues/6906.

commit 07a641900c55652d71018c0c1474aba20059432a
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jun 27 15:54:04 2017 -0400

    transport-native-kqueue libraries should not lazy link
    
    Motivation:
    We rely upon the linker being non-lazy to test compatibility the native library compatibility for kqueue, but the default mode of operation is to lazy link.
    
    Modifications:
    - We should modify the build scripts to inform the linker that this library should not be lazy linked
    - Error messages changes
    dyld: lazy symbol binding failed: Symbol not found: _clock_gettime
    
    java.lang.UnsatisfiedLinkError: unsupported JNI version 0xFFFFFFFF required by .../libnetty-transport-native-kqueue.dylib
    
    Result:
    Link errors are detected upon library load time.

commit d3c44ef9853755ffbd6417109c12e59b9a783564
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jun 27 21:21:02 2017 -0400

    Update Http2SecurityUtil cipher suites
    
    Motivation:
    Mozilla's Server Side cipher suite recommendations have been updated [1].
    
    [1] https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility
    
    Modifications:
    - Update Http2SecurityUtil to exclude older ciphers.
    - Remove support for DHE ciphersuites because they are now Intermediate and BoringSSL dropped support for these ciphers [2]
    
    [2] https://boringssl.googlesource.com/boringssl/+/7e06de5d2d1b53c57c0c81e8d6ba4122b64cf626
    
    Result:
    Updated default ciphers for HTTP/2.

commit 773757f2ddb04797d2b109297d4122ab6f2d015a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jun 27 19:07:27 2017 +0200

    Introduce  EpollSocketChannelConfig.setTcpKeepCnt as replacement for setTcpKeepCntl.
    
    Motivation:
    
    We had a typo in the method name of the EpollSocketChannelConfig.
    
    Modifications:
    
    Deprecate old method and introduce a new one.
    
    Result:
    
    Fixes [#6909]

commit dd69a813d46c2db2b8071445ecddb4bf939ba2e9
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Wed Jun 14 15:09:28 2017 +0300

    Performance improvement for HttpRequestEncoder. Insert char into the string optimized.
    
    Motivation:
    
    Right now HttpRequestEncoder does insertion of slash for url like http://localhost?pararm=1 before the question mark. It is done not effectively.
    
    Modification:
    
    Code:
    
    new StringBuilder(len + 1)
                    .append(uri, 0, index)
                    .append(SLASH)
                    .append(uri, index, len)
                    .toString();
    Replaced with:
    
    new StringBuilder(uri)
                    .insert(index, SLASH)
                    .toString();
    Result:
    
    Faster HttpRequestEncoder. Additional small test. Attached benchmark in PR.
    
    Benchmark                                      Mode  Cnt        Score        Error  Units
    HttpRequestEncoderInsertBenchmark.newEncoder  thrpt   40  3704843.303 ±  98950.919  ops/s
    HttpRequestEncoderInsertBenchmark.oldEncoder  thrpt   40  3284236.960 ± 134433.217  ops/s

commit 3b5dd4e9dc0b6e350d27a2628b3f37b2483fe4a9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jun 27 08:37:46 2017 +0200

    Change type of X_FRAME_OPTIONS and CONTENT_SECURITY_POLICY to AsciiString as a followup to cc1a2091857b6201337815330c942f52fd60f65c

commit ba3616da3edf843412bc366f5dde533f3aef1add
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Fri Jun 23 15:00:01 2017 +0500

    Apply appropriate methods for writing CharSequence into ByteBuf
    
    Motivation:
    
    1. `ByteBuf` contains methods to writing `CharSequence` which optimized for UTF-8 and ASCII encodings. We can also apply optimization for ISO-8859-1.
    2. In many places appropriate methods are not used.
    
    Modifications:
    
    1. Apply optimization for ISO-8859-1 encoding in the `ByteBuf#setCharSequence` realizations.
    2. Apply appropriate methods for writing `CharSequences` into buffers.
    
    Result:
    
    Reduce overhead from string-to-bytes conversion.

commit 322fe8ec85d72271a5ac0ed3f0149c4ea1323168
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Fri Jun 23 20:04:43 2017 -0700

    Exhaust non-exhaustive switch cases
    
    Motivation:
    ErrorProne warns about missing cases in switch statements that
    appear as an oversight.
    
    Modifcation:
    Add the last case to statement to ensure all cases are covered.
    
    Result:
    Able to enable Error Prone static analysis

commit cc1a2091857b6201337815330c942f52fd60f65c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jun 26 11:24:56 2017 +0200

    Add content-security-policy and x-frame-options to HttpHeaderNames
    
    Motivation:
    
    These headers can be used to prevent clickjacking.
    
    Modifications:
    
    Add static fields for content-security-policy and x-frame-options
    
    Result:
    
    Expose general useful names

commit 42789d43de7ca0a89d3f510efa04551563c2f44c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Jun 25 08:35:43 2017 +0200

    Upgrade to netty-tcnative 2.0.5.Final

commit c8a23028adb35330d9bb8dd707b2bd76ee5b7957
Author: tonyshenkk <906265000@qq.com>
Date:   Sat Jun 24 08:15:35 2017 +0800

    fix UnixChannelUtil#isBufferCopyNeededForWrite
    fix not execute unit test in transport-native-unix-common-tests module
    
    Motivation:
    
    - Commit 047da11 introduced an bug for still copy byteBuf for composed of n(n <= IOV_MAX) NIO direct buffers
    - Commit 3c4dfed add UnixChannelUtilTest in transport-native-unix-common-tests module, but not execute in maven compile
    
    as issue #6825, #6870
    
    Modifications:
    
    - modified UnixChannelUtil#isBufferCopyNeededForWrite(ByteBuf), and UnixChannelUtilTest
    - move UnixChannelUtilTest into transport-native-unix-common module, and add packet scope method UnixChannelUtil#isBufferCopyNeededForWrite(ByteBuf, int)
    
    Result:
    
    - no copy byteBuf for composed of n(n <= IOV_MAX) NIO direct buffers
    - auto execute unit tests in UnixChannelUtilTest and it is easier to mock IOV_MAX

commit efe37e0d28d220deb9e5f745a2aebcb94261d7e5
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Jun 22 00:13:13 2017 -0700

    UnknownHostException should mention search domain if used
    
    Motivation:
    ba80fbbe05489227d64dcbd4f5e91bef68072c37 modified the UnknownHostException to not include the search domain if the DNS query failed, but this masks what DNS query actually failed. Have the full hostname (including the search domain) provides more visibility and may help diagnose a configuration error if queries are unexpectedly failing.
    
    Modifications:
    - Remove DnsNameResolverContext#pristineHostname
    
    Result:
    UnknownHostException is more accurate and reflect what hostname actually resulted in failure.

commit d672a5a483d0c919279dc9d9724011b6d9dcfd9f
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Wed Jun 21 11:40:12 2017 +0500

    Optimizations in QueryStringEncoder
    
    Motivation:
    
    A life cycle of QueryStringEncoder is simple: create, append params, convert to String. Current realization collect params in the list, and calculate an URI string in `toString` method. We can simplify this: don't store params to the list, and immediately append parameters to the `StringBuilder`.
    
    Modifications:
    
    - Remove list for params and remove a tuple class `Param`.
    - Use one common `StringBuilder` and append parameters into it.
    - Resolve `TODO` in the `encodeParam` method.
    
    Result:
    
    Less allocations (no `ArrayList`, no `Param` tuples). Second `toString` call is faster.

commit 83de77fbe5385130ba9afc666fecbe9b59bd8032
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Wed Jun 21 11:06:08 2017 -0700

    Make Native loading work better with Java 8
    
    Motivation:
    Enable static linking for Java 8.  These commits are the same as those introduced to netty tcnative.  The goal is to allow lots of JNI libraries to be statically linked together without having conflict `JNI_OnLoad` methods.
    
    Modification:
    * add JNI_OnLoad suffixes to enable static linking
    * Add static names to the list of libraries that try to be loaded
    * Enable compiling with JNI 1.8
    * Sort includes
    
    Result:
    Enable statically linked JNI code.

commit c3bd1245c56a47727d8f94c30910ecb2b27bce68
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Fri Jun 23 16:21:17 2017 +0500

    SocksCommonUtils cleanup
    
    Motivation:
    
    1. Internal class `SocksCommonUtils` contains a method `intToIp` that also exists in the `NetUtil`.
    2. A `SocksCommonUtils#ipv6toCompressedForm` is never used.
    
    Modifications:
    
    1. Replace `intToIp` method usage with `NetUtil#intToIpAddress`.
    2. Remove unused methods from `SocksCommonUtils`.
    
    Result:
    
    Less code for supports.

commit 01eb428b39156e61624dae303ae9772ba3424b36
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Fri Jun 23 02:44:09 2017 +0500

    Move methods for decode hex dump into StringUtil
    
    Motivation:
    
    PR #6811 introduced a public utility methods to decode hex dump and its parts, but they are not visible from netty-common.
    
    Modifications:
    
    1. Move the `decodeHexByte`, `decodeHexDump` and `decodeHexNibble` methods into `StringUtils`.
    2. Apply these methods where applicable.
    3. Remove similar methods from other locations (e.g. `HpackHex` test class).
    
    Result:
    
    Less code duplication.

commit 1767814a466f9fc6a51c87a84bd73d93eb0ca1d7
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Jun 22 01:20:23 2017 -0700

    Replace DnsNameResolverContext#trace special code with an implementation of DnsQueryLifecycleObserver
    
    Motivation:
    DnsQueryLifecycleObserver is designed to capture the life cycle of every query. DnsNameResolverContext has a custom trace mechanism which consists of a StringBuilder and manual calls throughout the class. We can remove some special case code in DnsNameResolverContext and instead use a special implementation of DnsQueryLifecycleObserver when trace is enabled.
    
    Modifications:
    - Remove all references to the boolean trace variables in DnsNameResolverContext and DnsNameResolver
    - Introduce TraceDnsQueryLifecycleObserver which will be used when trace is enabled and will log similar data as what trace currently provides
    
    Result:
    Less special case code in DnsNameResolverContext and instead delegate to TraceDnsQueryLifecycleObserver to capture trace information.

commit 1df722f65bc8aa3fc01dd3b82cb29a72c1a35a2d
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Jun 23 08:23:28 2017 -0700

    kqueue version of 7baef4fbe89559b10fbeed7e17b16f953ff3b7ab

commit 58386aea43a1efa7c8ec7c3dc2e015405e4f6065
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jun 23 08:47:41 2017 +0200

    Upgrade to netty-tcnative 2.0.4.Final

commit cbde38f6e96ee2a8af3fdca0527c1a16a1f2e82d
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Thu Jun 22 18:17:50 2017 -0700

    Add cause to thrown exception in SelfSignedCert
    
    Motivation:
    Exceptions with causes are easier to debug
    
    Modification:
    Add the cause when generating a SelfSignedCert
    
    Results:
    More debugging context

commit 7baef4fbe89559b10fbeed7e17b16f953ff3b7ab
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Thu Jun 22 15:25:25 2017 -0700

    Move "fallthrough" statement to where fall actually happens Motivation: Static analysis looks for error prone switch case statements. Accidental fall through is one such case, but it is sometimes intentional. To indicate this, the "//fallthrough" comment can be added before the fall.
    
    The code in question has this comment, but it is *after* the fall
    so the static analysis flags it.
    
    This is described in http://errorprone.info/bugpattern/FallThrough
    
    Modifications:
    Move fall through comment to where the fall actually occurs
    
    Result:
    More compatible with Error Prone tools

commit b98561552292240aed69b80bd5bc1cdca67a9137
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Tue Jun 20 16:41:29 2017 -0700

    Fix compiler warnings in netty Epoll and unix common
    
    Motivation:
    Google requires stricter compilation by adding -Werror and enabling many other warnings.
    
    Modification:
    
    * fix warning caused by -Wmissing-braces
    
    * Use the address of `sendmmsg` rather than the function itself when
    checking for presence.  This resovles the warning caused by
    `-Wpointer-bool-conversion`.
    
    More detail:
    When compiling on Linux, `sendmmsg` is always present, so the
    function is always nonnull.  When compiling elsewhere, the
    function is defined as `__attribute__((weak))` which means it
    may be absent at link time.  This is controlled by
    `IO_NETTY_SENDMMSG_NOT_FOUND`, which is off by default.
    
    The reason for the error is due to the risk of accidentally not
    calling the function.  By adding `&` before the function, there
    is no ambiguity.  (the result of the fn call cannot have its
    address taken.)
    
    * use != to check for sendmmsg
    
    Result:
    Easier compilation.

commit 9ad74e72e66e36ec7323ca9594611d2cb8b9fc89
Author: Jason Tedor <jason@tedor.me>
Date:   Mon Jun 19 11:16:39 2017 -0400

    Remove content-length header leniency
    
    Motivation:
    
    If the content-length does not parse as a number, leniency causes this
    to instead be parsed as the default value. This leads to bodies being
    silently ignored on requests which can be incredibly dangerous. Instead,
    if the content-length header is invalid, an exception should be thrown
    for upstream handling.
    
    Modifications:
    
    This commit removes the leniency in parsing the content-length header by
    allowing a number format exception, if thrown, to escape from the method
    rather than falling back to the default value.
    
    Result:
    
    In invalid content-length header will not be silently ignored.

commit 6cd086050f0af1c81f8155472cd4160e7a185718
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jun 21 13:48:45 2017 -0700

    DNS Resolver Search Domain Bugs
    
    Motivation:
    The DNS resolver supports search domains. However the ndots are not correctly enforced. The search domain should only be appended under the following scenario [1]:
    
    > Resolver queries having fewer than ndots dots (default is 1) in them will be attempted using each component of the search path in turn until a match is found.
    
    The DNS resolver current appends the search domains if ndots is 0 which should never happen (because no domain can have less than 0 dots).
    
    [1] https://linux.die.net/man/5/resolv.conf
    
    Modifications:
    - Parse /etc/resolv.conf to get the default value for ndots on Unix platforms
    - The search domain shouldn't be used if ndots is 0
    - Avoid failing a promise to trigger the search domain queries in DnsNameResolverContext#resolve
    
    Result:
    More correct usage of search domains in the DNS resolver.
    Fixes https://github.com/netty/netty/issues/6844.

commit 5934ae8fd28b2a7b2b9eb892c2192428c2a113d1
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jun 20 17:22:56 2017 -0700

    Http2FrameLogger Updates
    
    Motivation:
    The Http2FrameLogger uses a custom format when logging events. We should use the more familiar format of 'channel event type: details' and single line logging for more consistent debugging.
    
    Modifications:
    - Http2FrameLogger should not use a StringBuilder and instead should directly use the Logger
    - Http2FrameLogger should use the more consistent format defined above
    
    Result:
    Http2FrameLogger's logging formate is more consistent with other log events.

commit 8f8be3122622745929bd634e920559e453920426
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Thu Jun 22 00:42:01 2017 +0500

    Remove unnecessary conversions
    
    Motivation:
    
    In a `HttpConversionUtil#toHttp2Headers` a status code conversion can be replaced with using `HttpResponseStatus#codeAsText` method.
    
    Modifications:
    
    Apply `HttpResponseStatus#codeAsText` method.
    
    Result:
    
    Less allocations.

commit 6b25909f6b586ac22c32e570ed82cc8fc7b188c8
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jun 20 17:28:10 2017 -0700

    HTTP/2 HelloWorld clear text NPE
    
    Motivation:
    HelloWorldHttp2Handler throws a NPE when converting from HTTP/1.x headers to HTTP/2 headers because there is no Host header.
    
    Modifications:
    - HelloWorldHttp2Handler should check if the Host header is present before setting it in the HTTP/2 headers
    
    Result:
    No more NPE in HelloWorldHttp2Handler.

commit 568fa998b1dfd0af5c5571d89b61beb6d6e6c54b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jun 20 07:05:48 2017 +0200

    Deploy transport-native-unix-common-tests
    
    Motivation:
    
    To be able to easily build only one of the native sub-modules its needed that all the dependencies can be fetched from maven. At the moment we dont deploy transport-native-unix-common and so an attempt to just build for example the native epoll transport fails with:
    
    [ERROR] Failed to execute goal on project netty-transport-native-epoll: Could not resolve dependencies for project io.netty:netty-transport-native-epoll:jar:4.1.13.Final-SNAPSHOT: Could not find artifact io.netty:netty-transport-native-unix-common-tests:jar:4.1.13.Final-SNAPSHOT in sonatype-nexus-snapshots (https://oss.sonatype.org/content/repositories/snapshots) -> [Help 1]
    
    Modifications:
    
    Deploy jar
    
    Result:
    
    All dependencies on maven repository.

commit 6d029ad3acb2214192c73657d6febcbfa44dadf6
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jun 20 14:46:59 2017 -0700

    OpenSSL CHACHA20 CipherSuiteConverter updates
    
    Motivation:
    For historical reasons OpenSSL's internal naming convention for CHACHA20 based cipher suites does not include the HMAC algorithm in the cipher name. This will prevent the CHACHA20 cipher suites from being used if the RFC cipher names are specified.
    
    Modifications:
    - Add a special case for CHACHA20 cipher name conversions in CipherSuiteConverter
    - Update OPENSSL_CIPHERSUITE_PATTERN to accommodate the new naming scheme for CHACHA20 cipher suites
    
    Result:
    CipherSuiteConverter now works with CHACHA20 cipher suites.

commit 81f9434ec70136ac2c7277937c3c837cbd7c80d2
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Wed Jun 14 21:15:58 2017 +0300

    Added test for multi header, HttpObjectDecoder performance improvement for multi header, removed empty else block.
    
    Motivation:
    
    For multi-line headers HttpObjectDecoder uses StringBuilder.append(a).append(b) pattern that could be easily replaced with regular a + b. Also oparations with a and b moved out from concat operation to make it friendly for StringOptimizeConcat optimization and thus - faster.
    
    Modification:
    
    StringBuilder.append(a).append(b) reaplced with a + b. Operations with a and b moved out from concat oparation.
    
    Result:
    Code simpler to read and faster.

commit 82a43727c308f2401468d4306c1ba2b5095f54b5
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jun 9 10:52:18 2017 +0200

    Fix testcase introduced by a2bd9a4

commit 14ea69cdc1ad3c77b9c5ec088f6a69e7ec565447
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Jun 19 11:01:31 2017 -0700

    NullPointerException in Lz4FrameEncoder
    
    Motivation:
    Lz4FrameEncoder maintains internal state, but the life cycle of the buffer is not consistently managed. The buffer is allocated in handlerAdded but freed in close, but the buffer can still be used until handlerRemoved is called.
    
    Modifications:
    - Move the cleanup of the buffer from close to handlerRemoved
    - Explicitly throw an EncoderException from Lz4FrameEncoder if the encode operation has finished and there isn't enough space to write data
    
    Result:
    No more NPE in Lz4FrameEncoder on the buffer.

commit 7460d90a67bd9724d8fdac839c384bf36cbbce37
Author: Roger Kapsi <rkapsi@squarespace.com>
Date:   Thu Jun 15 11:44:28 2017 -0400

    Add listener to returned Future rather than passed in Promise
    
    Motivation
    
    It's cleaner to add listeners to returned Futures rather than provided Promises because the latter can have strange side effects in terms of listeners firing and called methods returning. Adding listeners preemtively may yield also to more OPS than necessary when there's an Exception in the to be called method.
    
    Modifications
    
    Add listener to returned ChannelFuture rather than given ChannelPromise
    
    Result
    
    Cleaner completion and exception handling

commit 575baf505020f270873e9d7f79a4cf80e16583cf
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jun 15 06:51:13 2017 +0200

    Use more aggressive expanding strategy in HpackHuffmanDecoder
    
    Motivation:
    
    Before we always expanded the buffer by the initialCapacity which by default is 32 bytes. This may lead to many expansions of the buffer until we finally reached the point that the buffer can fin everything.
    
    Modifications:
    
    Double the buffer size until the threshold of >= 1024 is hit. After this will grow it by the initialCapacity
    
    Result:
    
    Less expansion of the buffer (and so allocations / copies) when the intialCapacity is not big enough. Fixes [#6864].

commit e597756a56398a73f851f97ac667f3ae198f4545
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jun 14 20:18:50 2017 +0200

    Remove synchronized (ReferenceCountedOpenSslContext.class) blocks
    
    Motivation:
    
    We had some useless synchronized (ReferenceCountedOpenSslContext.class) blocks in our code which could slow down concurrent collecting and creating of ReferenceCountedOpenSslContext instances. Beside this we missed a few guards.
    
    Modifications:
    
    Use ReadWriteLock to correctly guard. A ReadWriteLock was choosen as SSL.newSSL(...) will be called from multiple threads all the time so using synchronized would be worse and there would be no way for the JIT to optimize it away
    
    Result:
    
    Faster concurrent creating and collecting of ReferenceCountedOpenSslContext instances and correctly guard in all cases.

commit 2af895994dde5d17fb56e191b15a12bbe17df8da
Author: Stephane Nicoll <snicoll@pivotal.io>
Date:   Tue Jun 13 13:50:32 2017 +0200

    Add dependency management for missing entries
    
    Motivation:
    
    The bom does not provide entries for a number of netty modules, in
    particular those that are deployed with classifiers. As a result, they
    can't be used without defining a version.
    
    Modifications:
    
    Provide dependency management for the missing modules.
    
    Result:
    
    Fixes [#6852]

commit b8a418d53d961227981e7060d632aacbdeeac111
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Wed Jun 14 02:35:41 2017 +0500

    Remove redundant code block in HttpPostRequestEncoder and make some cleanup
    
    Motivation:
    
    The class `HttpPostRequestEncoder` has minor issues:
    - The `encodeNextChunkMultipart()` method contains two identical blocks of code with a difference only in the cast interfaces: `Attribute` vs `HttpData`. Because the `Attribute` is extended by `HttpData`, the block with the `Attribute` can be safely deleted.
    - The `getNewMultipartDelimiter()` method contains a redundant `toLowerCase()`.
    - The `addBodyFileUploads()` method throws `NPE` instead of `IllegalArgumentException`.
    
    Modifications:
    
    - Remove duplicated code block from `encodeNextChunkMultipart()`.
    - Remove redundant `toLowerCase()` from `getNewMultipartDelimiter()`.
    - Replace `NPE` with `IllegalArgumentException` in `addBodyFileUploads()`.
    - Use `ObjectUtil#checkNotNull` where possible.
    
    Result:
    
    More correct and clean code.

commit aa38b6a7695bd67e9b6bd7ac90872931cef9f4cd
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Tue Jun 13 22:58:54 2017 +0500

    Prevent unnecessary allocations in the `StringUtil#escapeCsv`
    
    Motivation:
    
    A `StringUtil#escapeCsv` creates new `StringBuilder` on each value even if the same string is returned in the end.
    
    Modifications:
    
    Create new `StringBuilder` only if it really needed. Otherwise, return the original string (or just trimmed substring).
    
    Result:
    
    Less GC load. Up to 4x faster work for not changed strings.

commit 94c0ef3c96189b3fb02ee68a4e229d1e3ba6e2df
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jun 12 11:10:10 2017 +0200

    Not fail the promise when a closed Channel is offered back to the ChannelPool
    
    Motivation:
    
    We should not fail the promise when a closed Channel is offereed back to the ChannelPool as we explicit mention that the Channel must always be returned.
    
    Modifications:
    
    - Not fail the promise
    - Add test-case
    
    Result:
    
    Fixes [#6831]

commit 66c83f7b74b3ea28baa4a0702d621aba8331993a
Author: Subhobrata Dey <sbcd90@gmail.com>
Date:   Mon Jun 5 17:32:44 2017 -0700

    codec.mqtt: password and willMessage field types should be byte[]
    
    Motivation:
    
    Update the mqtt-codec based on mqtt spec (3.1.3.5).
    
    Modification:
    
    Changes made to the file MqttConnectPayload.java.
    Subsequent changes have been made to files MqttDecoder.java, MqttEncoder.java, MqttMessageBuilders.java.
    Test cases have been updated.
    Result:
    
    Fixes #6750 .

commit ea2af3593cbe5ab70b2a7433b07cc96780d88124
Author: Andy Wilkinson <awilkinson@pivotal.io>
Date:   Tue Jun 13 09:53:29 2017 +0100

    Correct bom entry for netty-transport-native-unix-common
    
    Motivation:
    
    The entry for the netty-transport-native-unix-common module in the bom
    was using the wrong artifact ID and version.
    
    Modifications:
    
    Correct the artifact ID for the netty-transport-native-unix-common
    module in the bom.
    
    Result:
    
    Fixes [#6849]

commit ca5ed7c114120e6d45522be0bb231fedae065cf3
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Tue Jun 13 10:51:48 2017 +0200

    Let DnsNameResolver constructor use a default value for searchDomains
    
    Motivation:
    
    It’s currently complicated to extend `DnsNameResolver` as the default
    value for `searchDomain` is package private.
    
    Modifications:
    
    * let `DnsNameResolver` accept a null `searchDomains` and then default
    to `DEFAULT_SEARCH_DOMAINS`, just like it’s being done with
    `resolvedAddressTypes`.
    * set default `DnsNameResolverBuilder#searchDomains` value to null to
    avoid cloning internal `DnsNameResolver.DEFAULT_SEARCH_DOMAINS` in
    `DnsNameResolver` constructor.
    
    Result:
    
    More versatile `DnsNameResolver` constructor.
    No array copy when using default search domains.

commit 3f0085c267b5f59a7ca70729e14a18f13581dac2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Jun 11 12:47:56 2017 +0200

    Do proper bounds-checking in HpackHuffmanDecoder to reduce overhead of IndexOutOfBoundsException creation
    
    Motivation:
    
    HpackHuffmanDecoder.Decoder did not do any bound-checking but just catched IndexOutOfBoundsException to detect if the array needs to grow. This can be very expensive because of fillInStackTrace()
    
    Modifications:
    
    Add proper bounds checking and grow the array if needed without catching IndexOutOfBoundsException.
    
    Result:
    
    Less overhead if the array needs to grow.

commit f00638af52eb3f87edd8eddbedd7ccaeb3d8522b
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Jun 12 12:37:57 2017 -0700

    AbstractHttp2ConnectionHandlerBuilder support for HPACK huffman decoder initial size
    
    Motivation:
    Depending on the use case it may make sense to increase or decrease the initial size of the buffer used during the HPACK huffman decode process. This is currently not exposed through the AbstractHttp2ConnectionHandlerBuilder.
    
    Modifications:
    - Add a method to AbstractHttp2ConnectionHandlerBuilder which allows the initial size of the buffer used during the HPACK huffman decode prcoess to be configured.
    
    Result:
    AbstractHttp2ConnectionHandlerBuilder provides more control of codec-http2 knobs.

commit 1cc4607f07961622cfa3fb4351320ed54359be33
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Jun 12 10:46:30 2017 -0700

    AppendableCharSequence not to depend upon IndexOutOfBoundsException for resize
    
    Motivation:
    AppendableCharSequence depends upon IndexOutOfBoundsException to trigger a resize operation under the assumption that the resize operation will be rare if the initial size guess is good. However if the initial size guess is not good then the performance will be more unpredictable and likely suffer.
    
    Modifications:
    - Check the position in AppendableCharSequence#append to determine if a resize is necessary
    
    Result:
    More predictable performance in AppendableCharSequence#append.

commit 051e0ad4becaffe059e2f18d13207d0c8237ec40
Author: Rogan Dawes <rogan@dawes.za.net>
Date:   Fri Jun 9 14:38:26 2017 +0200

    Add support for IP_TRANSPARENT socket option
    
    Motivation:
    
    This allows netty to operate in 'transparent proxy' mode, intercepting connections
    to other addresses by means of Linux firewalling rules, as per
    
    https://www.kernel.org/doc/Documentation/networking/tproxy.txt
    
    The original destination address can be obtained by referencing
    ch.localAddress().
    
    Modification:
    
    Add methods similar to those for ipFreeBind, to set the IP_TRANSPARENT option.
    
    Result:
    
    Allows setting and getting of the IP_TRANSPARENT option, which allows retrieval of the ultimate socket address originally requested.

commit b6c27b9f6befa7a66bf23f9a2aa0c9c943981c6a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jun 8 09:38:28 2017 +0200

    Not force to run autoconf and compile multiple times
    
    Motivation:
    
    We should not force autoconf and compile as this will result in multiple executions and so slow down the build.
    
    Modifications:
    
    Remove force declarations
    
    Result:
    
    Faster build of native modules

commit acc07fac32e019451b2a1ade3e30068b1740ee70
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Fri Jun 9 16:55:29 2017 +0300

    disabling leak detection micro benchmark
    
    Motivation:
    
    When I run Netty micro benchmarks I get many warnings like:
    
    WARNING: -Dio.netty.noResourceLeakDetection is deprecated. Use '-Dio.netty.leakDetection.level=simple' instead.
    
    Modification:
    
    -Dio.netty.noResourceLeakDetection replaced with -Dio.netty.leakDetection.level=disabled.
    
    Result:
    
    No warnings.

commit fd67a2354df72f420187dde00c74f719234e0099
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jun 8 21:06:24 2017 +0200

    [maven-release-plugin] prepare for next development iteration

commit 3acd5c68ea4739e500610d1783059c04fa01f5d8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jun 8 21:06:01 2017 +0200

    [maven-release-plugin] prepare release netty-4.1.12.Final

commit 80aa5dcdcc870b9bd82cae4b0be2d7c9bc893491
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jun 8 19:50:17 2017 +0200

    Revert "Not add ChannelHandler to ChannelPipeline once the pipeline was destroyed."
    
    This reverts commit 4aa800259674bab303edd9427802574fcb4a3131.

commit f208b147a6c1748092f1d23f71865e9082b00534
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jun 8 07:56:02 2017 +0200

    Use FQCN to prevent classloader issues on java6
    
    Motivation:
    
    We need to use FQCN to prevent classloader issues for classes that are > Java6. This is a cleanup of ed5fcbb7732d9ffd16d9675fe40711360763c9a4.
    
    Modifications:
    
    Just remove the imports and use FQCN.
    
    Result:
    
    No classloader issues with java6

commit cdf3acb6a2a1733fc903a36b3166230ee67eb21f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jun 7 19:25:57 2017 +0200

    Update to latest netty-tcnative release

commit 047da1108674f0c425f0f00d159cdec41d697268
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jun 7 17:12:19 2017 +0200

    Correctly handle ByteBuf implementations which have no memoryAddress when writing to native transport
    
    Motivation:
    
    Commit 3c4dfed08ae2ce300f6ac1d0794d42a14c344b79 introduced a regression in handling buffers that have no memoryAddress.
    
    Modifications:
    
    Fix regression and also add unit tests.
    
    Result:
    
    It's possible again to write buffers without memory address.

commit 7922757575b942d5de5f38d3566857f70b9b4ce6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jun 7 10:33:54 2017 +0200

    Allow to access memoryAddress of wrapped ByteBuf for ReadOnlyByteBuf
    
    Motivation:
    
    We should allow to access the memoryAddress of the wrapped ByteBuf when using ReadOnlyByteBuf for peformance reasons. If a user act on a memoryAddress its his responsible anyway to do nothing "stupid".
    
    Modifications:
    
    Delegate to wrapped ByteBuf.
    
    Result:
    
    Less performance overhead for various operations and also when writing to a native transport (which needs the memoryAddress).

commit 629b83e0a50c48d206916451ebc152944872f618
Author: Renjie Sun <sunrenjie6@gmail.com>
Date:   Sat Jun 3 08:27:44 2017 +0800

    Move QueryStringDecoder.decodeHexByte into ByteBufUtil
    
    Motivations:
    1. There are duplicated implementations of decoding hex strings. #6797
    2. ByteBufUtil.HexUtil.decodeHexDump does not handle substring start
    index properly and does not decode hex byte rigorously.
    
    Modifications:
    1. Function decodeHexByte is moved from QueryStringDecoder into ByteBufUtil.
    2. ByteBufUtil.HexUtil.decodeHexDump is changed to use decodeHexByte.
    3. Tests are Updated accordingly.
    
    Result:
    Fixed #6797 and made hex decoding functions more robust.

commit ed5fcbb7732d9ffd16d9675fe40711360763c9a4
Author: Michael K. Werle <mkw-github@coruscations.com>
Date:   Fri May 5 10:44:23 2017 -0500

    Add explicit message when `noexec` prevents library loading.
    
    Motivation:
    
    Docker's `--tmpfs` flag mounts the temp volume with `noexec` by default,
    resulting in an UnsatisfiedLinkError.  While this is good security
    practice, it is a surprising failure from a seemingly innocuous flag.
    
    Modifications:
    
    Add a best-effort attempt in `NativeLibraryLoader` to detect when temp
    files beng loaded cannot be executed even when execution permissions
    are set, often because the `noexec` flag is set on the volume.
    
    Requires numerous additional exclusions to the Animal Sniffer config
    for Java7 POSIX permissions manipulation.
    
    Result:
    
    Fixes [#6678].

commit 1f0d47dee797df8d437b4151aaa39fcfae73b513
Author: Georg Held <georg.held@dc-square.de>
Date:   Wed Sep 28 23:04:07 2016 +0200

    Added PROXY Protocol TLV support
    
    Motivation:
    
    The current PROXY protocol implementation does not have support for optional Type-Length-Value fields. This pull requests adds the TLV values as specified in the PROXY protocol specification (http://www.haproxy.org/download/1.5/doc/proxy-protocol.txt) and adds support for arbitrary TLVs.
    
    Modifications:
    
    The existing HAProxyMessage implements an additional TLV reading operation. A small bug in the AF_UNIX reader which didn’t set the reader index correctly was also fixed.
    
    Result:
    
    The PROXY protocol supports TLVs

commit b03b0f22d1e54733c2d39c7f913f971dab14ebfa
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Wed Jun 7 01:41:33 2017 +0500

    Removing a SeekAheadNoBackArrayException to avoid exception handling
    
    Motivation:
    
    A `SeekAheadNoBackArrayException` used as check for `ByteBuf#hasArray`. The catch of exceptions carries a large overhead on stack trace filling, and this should be avoided.
    
    Modifications:
    
    - Remove the class `SeekAheadNoBackArrayException` and replace its usage with `if` statements.
    - Use methods from `ObjectUtils` for better readability.
    - Make private methods static where it make sense.
    - Remove unused private methods.
    
    Result:
    
    Less of exception handling logic, better performance.

commit e06cb82c4c1c27273e4811107e5b9ac6a66ef1fb
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Jun 5 15:41:34 2017 -0700

    JdkZlibDecoder and JZlibDecoder consistency
    
    Motivation:
    JdkZlibDecoder will allocate a new buffer when the previous buffer is filled with inflated data, but JZlibDecoder will attempt to use the same buffer by resizing. This leads to inconsistent results when these two decoders that are intended to be functionality equivalent.
    
    Modifications:
    - JdkZlibDecoder should attempt to resize and reuse the existing buffer instead of creating multiple buffers
    
    Result:
    Fixes https://github.com/netty/netty/issues/6804

commit 474bf036ff9783fa739063984c893c82c9fa7c13
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jun 6 20:57:40 2017 +0200

    Update to new netty-tcnative release

commit 9fa3e556f3a223c366f5ee7f706dd9645a06e196
Author: Bryce Anderson <banderson@twitter.com>
Date:   Fri Jun 2 14:54:09 2017 -0600

    Adjust Content-Length header when encoding Full Responses
    
    Motivation:
    If a full HttpResponse with a Content-Length header is encoded by the HttpContentEncoder subtypes the Content-Length header is removed and the message is set to Transfer-Encoder: chunked. This is an unnecessary loss of information about the message content.
    
    Modifications:
    - If a full HttpResponse has a Content-Length header, the header is adjusted after encoding.
    
    Result:
    Complete messages continue to have the Content-Length header after encoding.

commit f8788a9f6cbad154c505c63be9602f2eb324e0c8
Author: Pavel Drankov <titantins@ya.ru>
Date:   Tue Jun 6 00:21:49 2017 +0400

    Issue №6802. Not specified field in MQTT codec (#6807)

commit 24f801c7d1d1e66193d6ff0da3b93ce427b2b329
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Jun 1 15:40:05 2017 -0700

    OpenSslEngine return NEED_WRAP if the destination buffered filled
    
    Motivation:
    If the destination buffer is completely filled during a call to OpenSslEngine#wrap(..) we may return NEED_UNWRAP because there is no data pending in the SSL buffers. However during a handshake if the SSL buffers were just drained, and filled up the destination buffer it is possible OpenSSL may produce more data on the next call to SSL_write. This means we should keep trying to call SSL_write as long as the destination buffer is filled and only return NEED_UNWRAP when the destination buffer is not full and there is no data pending in OpenSSL's buffers.
    
    Modifications:
    - If the handshake produces data in OpenSslEngine#wrap(..) we should return NEED_WRAP if the destination buffer is completely filled
    
    Result:
    OpenSslEngine returns the correct handshake status from wrap().
    Fixes https://github.com/netty/netty/issues/6796.

commit 270e9d66c5a422b007312cb282097a8cc9b1b091
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Wed May 31 10:04:55 2017 +0500

    Fixes in QueryStringDecoder
    
    Motivation:
    
    QueryStringDecoder has several problems:
    - doesn't decode correctly path part with `+` (plus) sign in it,
    - doesn't cut a `fragment` (after `#`) from query string (see RFC 3986),
    - doesn't work correctly with encoding,
    - treat `%%` as a percent character escaping (it's don't described in RFC).
    
    Modifications:
    
    - leave `+` chars in a `path` part of uri string,
    - ignore `fragment` part (after `#`),
    - correctly work with encoding.
    - don't treat `%%` as escaping for the `%`.
    
    Result:
    
    Fixed issues from #6745.

commit 4aa800259674bab303edd9427802574fcb4a3131
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 23 22:08:45 2017 +0200

    Not add ChannelHandler to ChannelPipeline once the pipeline was destroyed.
    
    Motivation:
    
    ChannelPipeline will happily add a handler to a closed Channel's pipeline and will call handlerAdded(...) but will not call handlerRemoved(...).
    
    Modifications:
    
    Check if pipeline was destroyed and if so not add the handler at all but propergate an exception.
    
    Result:
    
    Fixes [#6768]

commit eee0ec390231389b32e27f9ab52e279140abd82e
Author: Julien Viet <julien@julienviet.com>
Date:   Mon May 29 14:40:35 2017 +0200

    HttpObjectEncoder#isContentAlwaysEmpty cannot be overridden by subclasses
    
    Motivation:
    
    Allow subclasses of HttpObjectEncoder other than HttpServerCodec to override the isContentAlwaysEmpty method
    
    Modification:
    
    Change the method visibility from package private to protected
    
    Result:
    
    Fixes #6761

commit 1504abd474efd055e73ae75154f879c11e137465
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 30 21:11:59 2017 +0200

    Correctly exclude netty-tcnative classes from the all jar.
    
    Motivation:
    
    We need to exclude the netty-tcnative classes from the all jar when building it as otherwise there may be classloader issues.
    
    Modifications:
    
    Add io/netty/internal/tcnative to the exclude list.
    
    Result:
    
    Fixes [#6791]

commit b71abcedd12af1ac4a3249569583db5ee49dd001
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue May 30 11:24:34 2017 -0700

    ByteBufUtil#decodeHexDump
    
    Motivation:
    ByteBufUtil provides a hexDump method. For debugging purposes it is often useful to decode that hex dump to get the original content, but no such method exists.
    
    Modifications:
    - Add ByteBufUtil#decodeHexDump
    
    Result:
    ByteBufUtil#decodeHexDump is available to make debugging easier.

commit 742ee764241b7db536b320d1c572d78e069142c3
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri May 26 18:24:42 2017 -0700

    RedisDecoder infinite loop
    
    Motivation:
    RedisDecoder can get into an infinite loop while decoding bulk strings if the final \r and \n to indicate the end of content are split on ByteBuf boundaries.
    
    Modifications:
    - We should break out of the decode loop if remainingBulkLength is 0 and we don't have enough data to read EOL
    
    Result:
    No more infinite loop in RedisDecoder#decodeBulkStringContent.

commit 0b0309624a5c13f6059a647a73b3c6d9799c604f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri May 26 13:54:53 2017 +0200

    Correctly parse package-prefix if the jni lib is contained in a path that matches the library name.
    
    Motivation:
    
    We used strstr to find the path to the library, which fails if the library is contained in a directory that also matches the library name.
    
    Modifications:
    
    - Introduce netty_unix_util_strstr_last which will return a pointer which points to the last accourance and so not fails if the direct also matches the library name.
    
    Result:
    
    Be able to load the library in all cases.

commit d56a7560ead181f987677c71713b8dc815dab67a
Author: Nolan O'Brien <nobrien@twitter.com>
Date:   Fri May 26 15:49:35 2017 -0700

    Netty force encodes already encoded responses
    
    Motivation:
    
    Fix the regression recently introduced that causes already encoded responses to be encoded again as gzip
    
    Modification:
    
    instead of just looking for IDENTITY, anything set for Content-Encoding should be respected and left as-is
    
    added unit tests to capture this use case
    
    Result:
    
    Fixes #6784

commit 3c4dfed08ae2ce300f6ac1d0794d42a14c344b79
Author: louxiu <lou.0211@gmail.com>
Date:   Sun May 21 19:24:14 2017 +0800

    Fix handle of ByteBuf with multi nioBuffer in EpollDatagramChannel and KQueueDatagramChannel
    
    Motivation:
    1. special handling of ByteBuf with multi nioBuffer rather than type of CompositeByteBuf (eg. DuplicatedByteBuf with CompositeByteBuf)
    2. EpollDatagramUnicastTest and KQueueDatagramUnicastTest passed because CompositeByteBuf is converted to DuplicatedByteBuf before write to channel
    3. uninitalized struct msghdr will raise error
    
    Modifications:
    1. isBufferCopyNeededForWrite(like isSingleDirectBuffer in NioDatgramChannel) checks wether a new direct buffer is needed
    2. special handling of ByteBuf with multi nioBuffer in EpollDatagramChannel, AbstractEpollStreamChannel, KQueueDatagramChannel, AbstractKQueueStreamChannel and IovArray
    3. initalize struct msghdr
    
    Result:
    handle of ByteBuf with multi nioBuffer in EpollDatagramChannel and KQueueDatagramChannel are ok

commit b419bd152a7ea4946bff824ce1c6eff62d2c56ce
Author: Roger Kapsi <rkapsi@squarespace.com>
Date:   Thu May 25 11:29:24 2017 -0400

    Handle the possibility of HTTP/0.9 with a better error message
    
    Motivation
    
    RFC 1945 (see section 3.1) says that request lines may not have a version in which case the request is assumed to be HTTP/0.9. We don't necessarily want to support that but the existing Exception should indicate the possibility of the request being HTTP/0.9 and give the user a chance to track it down.
    
    Modifications
    
    Indicate in the Exception's message that the request is possibly HTTP/0.9.
    
    Result
    
    Fixes #6739

commit ca9d1658a00fef7be53abeaf499cb78bdc3a5017
Author: YuQi <yuqi@cmhi.chinamobile.com>
Date:   Wed May 24 12:00:08 2017 +0800

    Fix parameter order in SctpOutboundByteStreamHandler.
    
    Motivation:
    
    The first parameter of SctpMessage is protocolIdentifier, and the second is streamIdentifier. So we need to swap the parameters in encode method
    
    Modification:
    
    Fix order
    
    Result:
    
    SctpOutboundByteStreamHandler works correctly.

commit 61efd81952499aa36ea53b703f94696907364e79
Author: Cédric L <u2032@users.noreply.github.com>
Date:   Wed May 24 11:46:17 2017 +0200

    Add HTTP Status code 308 in HttpResponseStatus.java
    
    Motivation:
    
    The status 308 is defined by RFC7538.
    This RFC has currently the state Proposed Standard since 2 years, but the status code is already handle by all browsers (Chrome, Firefox, Edge, Safari, …).
    To let developer handles easily this status code, it is added into this list.
    
    Modifications:
    
    Added this status code in the list of all status codes and changed the valudOf() method
    
    Result:
    
    Status code 308 included

commit 2f8fe2af01c1bd5f6e02a3a10ea949318705a325
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 23 17:40:22 2017 +0200

    Only try to deregister from EventLoop when the native Channel was registered before.
    
    Motivation:
    
    We only can call eventLoop() if we are registered on an EventLoop yet. As we just did this without checking we spammed the log with an error that was harmless.
    
    Modifications:
    
    Check if registered on eventLoop before try to deregister on close.
    
    Result:
    
    Fixes [#6770]

commit 12a57545690aec0a263305442769fe0cf726aa44
Author: Michael O'Brien <mobrien@hubspot.com>
Date:   Tue May 23 11:44:29 2017 +0100

    Don't add null to SmtpResponse.details()
    
    Motivation:
    
    If the remote server returns an invalid response in the form "000 \r\n"
    (i.e. a three digit code, then space, but no details), null is added
    as a singletonList to the response being constructed.
    
    This seems unexpected and it would be easier to handle an empty
    details list in client code.
    
    Modifications:
    
    If detail is null (because frame.isReadable() returned false after
    reading the separator), initialise DefaultSmtpResponse with an empty
    list instead of a list containing a single null value.
    
    Result:
    
    When encountering this malformed server response, a DefaultSmtpResponse
    with a code but no details will be created.

commit 2db4f2557d16afac45299a2a6fe129c97cb9beda
Author: Roger Kapsi <rkapsi@squarespace.com>
Date:   Mon May 8 14:11:16 2017 -0400

    The SNI extension value is ASCII encoded but Netty uses UTF-8.
    
    Motivation
    
    RFC 6066 (https://tools.ietf.org/html/rfc6066#page-6) says that the hostname in the SNI extension is ASCII encoded but Netty decodes it using UTF-8.
    
    Modifications
    
    Use ASCII instead of UTF-8
    
    Result
    
    Fixes #6717

commit 6a8532acd1451f34bf4f7b93bc7967b6b857238e
Author: Michael O'Brien <mobrien@hubspot.com>
Date:   Fri May 19 14:53:20 2017 +0100

    Reset the contentExpected flag when RSET is written
    
    Motivation:
    
    If the remote server returns a 4xx/5xx error in response to
    a DATA command (or earlier command if using pipelining),
    SmtpRequestEncoder can become stuck in an invalid state,
    not allowing any requests to be sent.
    
    This makes the channel unusable and the connection has to be closed,
    or the encoder handler has to be replaced.
    
    Modifications:
    
    If a RSET command is written to the channel, the contentExpected
    flag is set to false, and the RSET is written to the channel.
    
    Result:
    
    Sending a RSET command after a server 4xx/5xx error will make it
    possible to use the current connection for new mail transactions.

commit 61b11651362445f788d4ab806d691074cbe760c0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri May 19 08:07:33 2017 +0200

    Add support to wrap an existing filedescriptor when using native kqueue transport
    
    Motivation:
    
    The native epoll transport allows to wrap an existing filedescriptor, we should support the same in the native kqueue transport.
    
    Modifications:
    
    Add constructors that allow to wrap and existing filedescriptor.
    
    Result:
    
    Featureset of native transports more on par.

commit 201d9b6536e45ce6bb261659678dafd7216beffe
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri May 19 09:14:52 2017 +0200

    Share code that is needed to support shaded native libraries.
    
    Motivation:
    
    For our native libraries in netty we support shading, to have this work on runtime the user needs to set a system property. This code should shared.
    
    Modifications:
    
    Move logic to NativeLbiraryLoader and so share for all native libs.
    
    Result:
    
    Less code duplication and also will work for netty-tcnative out of the box once it support shading

commit 915bf5f5b7d0afa40c9921bea0025d80cb29a51a
Author: Roger Kapsi <rkapsi@squarespace.com>
Date:   Fri May 19 10:19:10 2017 -0400

    SslHandler#handlerRemoved0() shouldn't care about the SSLEngine being a specific type but only if it's ReferenceCounted
    
    Motivation
    
    SslHandler should release any type of SSLEngine if it implements the ReferenceCounted interface
    
    Modifications
    
    Change condition to check for ReferenceCounted interface
    
    Result
    
    Better use of interfaces

commit d768c5e628cd6d6e516b2a2d315daa0343fe3899
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Mon May 15 02:07:16 2017 +0500

    MessageFormatter improvements
    
    Motivation:
    
    `FormattingTuple.getArgArray()` is never used.
    In the `MessageFormatter` it is possible to make
    some improvements, e.g. replace `StringBuffer`
    with `StringBuilder`, avoid redundant allocations, etc.
    
    Modifications:
    
    - Remove `argArray` field from the `FormattingTuple`.
    - In `MessageFormatter`:
      - replace `StringBuffer` with `StringBuilder`,
      - replace `HashMap` with `HashSet` and make it lazy initialized.
      - avoid redundant allocations (`substring()`, etc.)
      - use appropriate StringBuilder's methods for the some `Number` values.
    - Porting unit tests from `slf4j`.
    
    Result:
    
    Less GC load on logging with internal `MessageFormatter`.

commit ba5d1880bc7178b9ec90eeae02bdeb9456b01a0a
Author: Anuraag Agrawal <anuraaga@gmail.com>
Date:   Tue May 2 18:06:35 2017 +0900

    Make HttpHeadersEncoder.encodeHeader package private to match class visibility.

commit e4531918a394ba87058d37c595e296e669f07a19
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Fri May 19 00:14:01 2017 +0500

    Optimizations in NetUtil
    
    Motivation:
    
    IPv4/6 validation methods use allocations, which can be avoided.
    IPv4 parse method use StringTokenizer.
    
    Modifications:
    
    Rewriting IPv4/6 validation methods to avoid allocations.
    Rewriting IPv4 parse method without use StringTokenizer.
    
    Result:
    
    IPv4/6 validation and IPv4 parsing faster up to 2-10x.

commit 0f1a2ca5ae01edff1f5ef667122b43f581ef92f4
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed May 17 16:36:33 2017 -0700

    UnixResolverDnsServerAddressStreamProvider default name server selection and ordering bug
    
    Motivation:
    UnixResolverDnsServerAddressStreamProvider allows the default name server address stream to be null, but there should always be a default stream to fall back to ([1] Search Strategy).
    UnixResolverDnsServerAddressStreamProvider currently shuffles the names servers are multiple are present, but the defined behavior is to try them sequentially [2].
    
    [1] Search Strategy Section - https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man5/resolver.5.html
    [2] DESCRIPTION/nameserver Section - https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man5/resolver.5.html
    
    Modifications:
    - UnixResolverDnsServerAddressStreamProvider should always use the first file provided to derive the default domain server address stream. Currently if there are multiple domain names in the file identified by the first argument of the constructor then one will be selected at random.
    - UnixResolverDnsServerAddressStreamProvider should return name servers sequentially.
    - Reduce access level on some methods which don't have known use-cases externally.
    
    Result:
    Fixes https://github.com/netty/netty/issues/6736

commit 4c6d946fbadfb14806f8232b844c5e6a26eff2de
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed May 17 19:15:40 2017 -0700

    KQueueSocket#setTrafficClass exceptions
    
    Motivation:
    MacOS will throw an error when attempting to set the IP_TOS socket option if IPv6 is available, and also when getting the value for IP_TOS.
    
    Modifications:
    - Socket#setTrafficClass and Socket#getTrafficClass should try to use IPv6 first, and check if the error code indicates the protocol is not supported before trying IPv4
    
    Result:
    Fixes https://github.com/netty/netty/issues/6741.

commit 732948b3c4be68c2f5e4b3d3f0dc595363e18abe
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 8 05:54:37 2017 +0200

    Ensure SslUtils and so SslHandler works when using with Little-Endian buffers.
    
    Motivation:
    
    We not correctly handle LE buffers when try to read the packet length out of the buffer and just assume it always is a BE buffer.
    
    Modifications:
    
    Correctly account for the endianess of the buffer when reading the packet lenght.
    
    Result:
    
    Fixes [#6709].

commit 8811041cc66c40bb8ccfba974b2357c52ccc1634
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat May 13 00:01:01 2017 +0200

    Correctly include native modules
    
    Motivation:
    
    We need to include the native modules on the bom to ensure there is no version missmatch.
    
    Modifications:
    
    Add native modules.
    
    Result:
    
    Fixes [#6738]

commit f20063d26b640cb4121e092b5a3a0bb4c0a10eb5
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue May 16 19:12:58 2017 -0700

    SslHandler#wrapNonAppData return early
    
    Motivation:
    
    SslHandler#wrapNonAppData may be able to return early if it is called from a unwrap method and the status is NEED_UNWRAP. This has been observed to occur while using the OpenSslEngine and can avoid allocation of an extra ByteBuf of size 2048.
    
    Modifications:
    - Return early from SslHandler#wrapNonAppData if NEED_UNWRAP and we are called from an unwrap method
    
    Result:
    Less buffer allocations and early return from SslHandler#wrapNonAppData.

commit 0ee49e6d668bd100320003b7d6b287bc289db28f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri May 12 08:49:25 2017 +0200

    Eliminate noisy logging when using sun.misc.Unsafe and running on pre Java9
    
    Motivation:
    
    We should only try to load jdk.internal.misc.Unsafe if we run on Java9+ to eliminate noise in the log.
    
    Modifications:
    
    - Move javaVersion() and related methods to PlatformDependent0 to be able to use these in the static initializer without creating a cycle.
    - Only try to load jdk.internal.misc.Unsafe when running in Java9+
    
    Result:
    
    Less noise in the log when running pre java9.

commit 827c4096567b0ef10bab192b1140acd1d1d15b87
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri May 12 08:02:58 2017 +0200

    Add uber-staging and uber-snapshot profile that can be used to generate uber all jars.
    
    Motivation:
    
    As we now include native code for multiple platforms we need to generate an uber all jar before release it from the staging repository. For this the uber-staging profile can be used. To create a snapshot uber jar the uber-snapshot profile can be used.
    
    Modifications:
    
    - Add uber-staging and uber-snapshot profile
    - Correct comment in pom.xml file to show usage.
    
    Result:
    
    Easier to create snapshot and release uber jars.

commit d88cd23bfc3d1cc2422ca73d63b281990bbcb8a5
Author: Jason Tedor <jason@tedor.me>
Date:   Fri May 5 15:30:03 2017 -0400

    Trim thread local string builder if large
    
    Motivation:
    
    A previous change allocated a new thread local string builder if it
    was getting too large. This is a good change, these string builders
    can accidentally get too large and then never shrunk and that is sort
    of a memory leak. However, the change allocates an entirely new string
    builder which is more allocations than necessary. Instead, we can trim
    the string builder if its too large, this only allocates an extra
    backing array instead of a whole new object.
    
    Modifications:
    
    If the string builder is above a threshold, we trim the string builder
    and then ensure its capacity is reasonable to we do not allocate too
    much as we start using the string builder.
    
    Result:
    
    The thread local string builder do not serve as a memory yet we do not
    allocate too many new objects.

commit 0db2901f4db2d3f12b2febe220da113a9e3ed100
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu May 11 16:00:55 2017 +0200

    [maven-release-plugin] prepare for next development iteration

commit f7a19d330c725316c56ff8690ca453f7998d532d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu May 11 16:00:16 2017 +0200

    [maven-release-plugin] prepare release netty-4.1.11.Final

commit 5643cc6a103141103ea594054d1d4ec91140a6f6
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Tue May 9 17:32:36 2017 +0500

    IPv6 validation fixes
    
    Motivation:
    
    `NetUtil`'s methods `isValidIpV6Address` and `getIPv6ByName` incorrectly validate some IPv6 addresses.
    
    Modifications:
    
    - `getIPv6ByName`: add checks for single colon at the start or end.
    - `isValidIpV6Address`: fix checks for the count of colons and use `endOffset` instead of `ipAddress.length()` for the cases with the brackets or '%'.
    
    Result:
    
    More correct implementation of `NetUtil#isValidIpV6Address` and `NetUtil#getIPv6ByName`.

commit 9e62c795740ed0780b56e1ec2ef4bca675d7b5a4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu May 11 15:14:31 2017 +0200

    Correctly include all modules during build
    
    Motivation:
    
    To ensure the release plugin works correctly we need to ensure all modules are included during build.
    
    Modification:
    
    - Include all modules
    - Skip compilation and tests for native code when not supported but still include the module and build the jar
    
    Result:
    
    Build and release works again

commit a093b89bfef7efe8a1c8ad1d3ab07a7c17ac59c4
Author: Nitesh Kant <nitesh_kant@apple.com>
Date:   Mon May 8 13:45:13 2017 -0700

    Allow HTTP decoding post CONNECT in `HttpClientCode`
    
    __Motivation__
    
    `HttpClientCodec` skips HTTP decoding on the connection after a successful HTTP CONNECT response is received.
     This behavior follows the spec for a client but pragmatically, if one creates a client to use a proxy transparently, the codec becomes useless after HTTP CONNECT.
     Ideally, one should be able to configure whether HTTP CONNECT should result in pass-through or not. This will enable client writers to continue using HTTP decoding even after HTTP CONNECT.
    
     __Modification__
    
     Added overloaded constructors to accept `parseHttpPostConnect`. If this parameter is `true` then the codec continues decoding even after a successful HTTP CONNECT.
    
     Also fixed a bug in the codec that was incrementing request count post HTTP CONNECT but not decrementing it on response. Now, the request count is only incremented if the codec is not `done`.
    
     __Result__
    
     Easier usage by HTTP client writers who wants to connect to a proxy but still decode HTTP for their users for subsequent requests.

commit dd837fe803e965f198024c9cbe1875c2faf6a6c8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 9 12:53:55 2017 +0200

    Remove some dead-code and cleanup

commit ce2ce9d7a4c375511e6f0f33a5892492f6297702
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue May 9 12:58:29 2017 -0700

    ByteToMessageDecoder#handlerRemoved may release cumulation buffer prematurely
    
    Motivation:
    ByteToMessageDecoder#handlerRemoved will immediately release the cumulation buffer, but it is possible that a child class may still be using this buffer, and therefore use a dereferenced buffer.
    
    Modifications:
    - ByteToMessageDecoder#handlerRemoved and ByteToMessageDecoder#decode should coordinate to avoid the case where a child class is using the cumulation buffer but ByteToMessageDecoder releases that buffer.
    
    Result:
    Child classes of ByteToMessageDecoder are less likely to reference a released buffer.

commit c053c5144d412535a0efb79fa5da4b7346138dee
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 9 11:41:04 2017 +0200

    Correctly detect if Ocsp is supported
    
    Motivation:
    
    We only used the openssl version to detect if Ocsp is supported or not which is not good enough as even the version is correct it may be compiled without support for OCSP (like for example on ubuntu).
    
    Modifications:
    
    Try to enable OCSP while static init OpenSsl and based on if this works return true or false when calling OpenSsl.isOcspSupported().
    
    Result:
    
    Correctly detect if OSCP is supported.

commit 94e9448ae391a9ced70a17ea01b3ad5e5ce32f61
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Tue May 9 18:20:05 2017 +0500

    Simplify JUnit assertions
    
    Motivation:
    
    Some JUnit assert calls can be replaced by simpler.
    
    Modifications:
    
    Replacement with a more suitable methods.
    
    Result:
    
    More informative JUnit reports.

commit ec935c5a7b91c77a0e0e55f54978fb0cf8338dbe
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 8 19:57:26 2017 +0200

    Correctly delete SelfSignedCertificate once done with it.
    
    Motivation:
    
    In OpenSsl init code we create a SelfSignedCertificate which we not explicitly delete. This can lead to have the deletion delayed.
    
    Modifications:
    
    Delete the SelfSignedCertificate once done with it.
    
    Result:
    
    Fixes [#6716]

commit 63f5cdb0d5e53f91e69edd66ea026d18f0284a55
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon May 8 18:19:57 2017 -0700

    ByteBuf#ensureWritable(int, boolean) should not throw
    
    Motivation:
    The javadocs for ByteBuf#ensureWritable(int, boolean) indicate that it should not throw, and instead the return code should indicate the result of the operation. Due to a bug in AbstractByteBuf it is possible for a resize to be attempted on a buffer that may exceed maxCapacity() and therefore throw.
    
    Modifications:
    - If there is not enough space in the buffer, and force is false, then a resize should not be attempted
    
    Result:
    AbstractByteBuf#ensureWritable(int, boolean) enforces the javadoc constraints and does not throw.

commit 141089998fbb5951e98483ecabb9bf0f95bcdb20
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon May 8 10:13:53 2017 -0700

    OpenSslEngine wrap may generate bad data if multiple src buffers
    
    Motivation:
    SSL_write requires a fixed amount of bytes for overhead related to the encryption process for each call. OpenSslEngine#wrap(..) will attempt to encrypt multiple input buffers until MAX_PLAINTEXT_LENGTH are consumed, but the size estimation provided by calculateOutNetBufSize may not leave enough room for each call to SSL_write. If SSL_write is not able to completely write results to the destination buffer it will keep state and attempt to write it later. Netty doesn't account for SSL_write keeping state and assumes all writes will complete synchronously (by attempting to allocate enough space to account for the overhead) and feeds the same data to SSL_write again later which results in corrupted data being generated.
    
    Modifications:
    - OpenSslEngine#wrap should only produce a single TLS packet according to the SSLEngine API specificaiton [1].
    [1] https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/SSLEngine.html#wrap-java.nio.ByteBuffer:A-int-int-java.nio.ByteBuffer-
    - OpenSslEngine#wrap should only consider a single buffer when determining if there is enough space to write, because only a single buffer will ever be consumed.
    
    Result:
    OpenSslEngine#wrap will no longer produce corrupted data due to incorrect accounting of space required in the destination buffers.

commit cd80b6c2d8677ccee372fe43deaf8509da6eb45f
Author: jiachun.fjc <jiachun.fjc@alibaba-inc.com>
Date:   Sun May 7 23:56:32 2017 +0800

    Use simple volatile read for SingleThreadEventExecutor#state instead of UNSAFE(AtomicIntegerFieldUpdater#get), CAS operation still to use AtomicIntegerFieldUpdater
    
    Motivation:
    
    AtomicIntegerFieldUpdater#get is unnecessary, I think use simple volatile read is cleaner
    
    Modifications:
    
    Replace code STATE_UPDATER.get(this) to state in SingleThreadEventExecutor
    
    Result:
    
    Cleaner code

commit cf26227c6ca6cf405d2b4140e47548a31da1b305
Author: Moses Nakamura <mnakamura@twitter.com>
Date:   Tue Apr 4 17:19:54 2017 -0700

    Supply a builder for Http2Codec
    
    Motivation:
    
    DefaultHttp2FrameWriter has constructors that it would be a hassle to
    expose as configuration parameters on Http2Codec. We should instead
    make a builder for Http2Codec.
    
    Modifications:
    
    Get rid of the public constructors on Http2Codec and instead make sure
    you can always use the builder where you would have used the constructor
    before.
    
    Result:
    
    Http2Codec can be configured more flexibly, and the SensitivityDetector
    can be configured.

commit 963cd22a051a40d8dcb496727342375020b28640
Author: jiachun.fjc <jiachun.fjc@alibaba-inc.com>
Date:   Thu May 4 11:36:34 2017 +0800

    InternalThreadLocalMap#stringBuilder: ensure memory overhead
    
    Motivation:
    
    InternalThreadLocalMap#stringBuilder: ensure memory overhead
    
    Modification:
    
    If the capacity of StringBuilder is greater than 65536 then release it on the next time you get StringBuilder and re-create a StringBuilder.
    
    Result:
    
    Possible less memory usage.

commit f65885fc5493da63cb875047f57cb299849988b6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu May 4 17:01:29 2017 -0700

    Make DnsNameResolverTest pass on Java7
    
    Motivation:
    
    IDN.toUnicode(...) removes trailing dots when used in Java7 while it not does on java8.
    
    Modifications:
    
    Check if we should test with the trailing dot removed or not.
    
    Result:
    
    Test pass on Java7 as well.

commit aab89b058e2e31fb50f5df98325dc40db61fbced
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu May 4 07:57:10 2017 -0700

    Ensure Netty is usable on Java7
    
    Motivation:
    
    When adding SNIMatcher support we missed to use static delegating methods and so may try to load classes that not exists in Java7. Which will lead to errors.
    
    Modifications:
    
    - Correctly only try to load classes when running on java8+
    - Ensure Java8+ related tests only run when using java8+
    
    Result:
    
    Fixes [#6700]

commit 174f4ea005e448785725034223dc757cfe146976
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Thu May 4 00:36:26 2017 +0300

    HttpServerKeepAliveHandler doesn't correctly handle VoidChannelPromise
    
    Motivation:
    
    HttpServerKeepAliveHandler throws unexpected error when I do ctx.writeAndFlush(msg, ctx.voidPromise()); where msg is with header "Connection:close".
    
    Modification:
    
    HttpServerKeepAliveHandler does promise.unvoid() before adding close listener.
    
    Result:
    
    No error for VoidChannelPromise with HttpServerKeepAliveHandler. Fixes [#6698].

commit 464ae9fb7a1710c63646467fd0ca34c78bd1747a
Author: Dmitry Spikhalskiy <dmitry@spikhalskiy.com>
Date:   Tue Nov 15 22:24:07 2016 +0300

    Expose CharSequence version of HttpUtil#getMimeType and HttpUtil#getCharset
    
    Motivation:
    
    It would be more flexible to make getCharset and getMimeType code usable not only for HttpMessage entity but just for any CharSequence. This will improve usability in general purpose code and will help to avoid multiple fetching of ContentType header from a message. It could be done in an external code once and CharSequence method versions could be applied.
    
    Modification:
    Expose HttpUtil#getMimeType, HttpUtil#getCharsetAsString, HttpUtil#getCharset versions which works with CharSequence. New methods are reused in the old ones which work with HttpMessage entity.
    
    Result:
    
    More flexible methods set with a good code reusing.

commit 02a2738cd21038af7e437e67bb4aa1410b3ad43d
Author: Jason Tedor <jason@tedor.me>
Date:   Wed May 3 13:15:54 2017 -0400

    Do not try to use cleaner if no unsafe
    
    Motivation:
    
    If unsafe is unavailable, we can not use the cleaner anyway. If we try
    to set it up, we get an annoying log message about unsafe being
    unavailable (when debug logging is enabled). We know this will fail, so
    we should not even bother and avoid the log message.
    
    Modifications:
    
    This commit adds a guard against setting up the cleaner if it is not
    going to be available because unsafe is unavailable.
    
    Result:
    
    We do not try to set up the cleaner if unsafe is unavailable, and we do
    not get an annoying log message.

commit 9a0fd3a7b892438fccff3d63946756160a8647fe
Author: Jason Tedor <jason@tedor.me>
Date:   Wed May 3 12:50:05 2017 -0400

    Do not log on explicit no unsafe again
    
    Motivation:
    
    Users should not see a scary log message when Netty is initialized if
    Netty configuration explicitly disables unsafe. The log message that
    produces this warning was previously guarded but the guard was
    lost.
    
    Modifications:
    
    This commit brings back the guard against the scary log message if
    unsafe is explicitly disabled.
    
    Result:
    
    No log message is produced when unsafe is unavailable because Netty was
    told to not look for it.

commit e70fbe316d63c28c81e175095297b2205e656eca
Author: Michael K. Werle <mkw-github@coruscations.com>
Date:   Mon May 1 12:48:55 2017 -0500

    Fire exceptionCaught before exception-caused close for WebSockets.
    
    Motivation:
    
    WebSocket decoding throws exceptions on failure that should cause the
    pipline to close.  These are currently ignored in the
    `WebSocketProtocolHandler` and `WebSocketServerProtocolHandler`.  In
    particular, this means that messages exceding the max message size will
    cause the channel to close with no reported failure.
    
    Modifications:
    
    Re-fire the event just before closing the socket to allow it to be
    handled appropriately.
    
    Result:
    
    Closes [#3063].

commit a3e496a521550669b48a7d027b4098107f07c30f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 1 20:28:16 2017 -0700

    Not try to compresses HttpMessage if IDENTITY header value is set.
    
    Motivation:
    
    If Content-Encoding: IDENTITY is used we should not try to compress the http message but just let it pass-through.
    
    Modifications:
    
    Remove "!"
    
    Result:
    
    Fixes [#6689]

commit 3cc405296310643bccddc8c81998c97f25b3201c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Jan 19 08:31:34 2017 -0800

    New native transport for kqueue
    
    Motivation:
    We currently don't have a native transport which supports kqueue https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2. This can be useful for BSD systems such as MacOS to take advantage of native features, and provide feature parity with the Linux native transport.
    
    Modifications:
    - Make a new transport-native-unix-common module with all the java classes and JNI code for generic unix items. This module will build a static library for each unix platform, and included in the dynamic libraries used for JNI (e.g. transport-native-epoll, and eventually kqueue).
    - Make a new transport-native-unix-common-tests module where the tests for the transport-native-unix-common module will live. This is so each unix platform can inherit from these test and ensure they pass.
    - Add a new transport-native-kqueue module which uses JNI to directly interact with kqueue
    
    Result:
    JNI support for kqueue.
    Fixes https://github.com/netty/netty/issues/2448
    Fixes https://github.com/netty/netty/issues/4231

commit 2d38a4453c360bcd72dbefe4ec04adcdb19f8ddd
Author: Guanpeng Xu <herberteuler@gmail.com>
Date:   Sat Apr 22 09:14:51 2017 +0800

    Remove the comment which is a bit misleading
    
    This fixes #6652.
    
    Rationale
    
    The invocation of initChannel of ChannelInitializer has been moved to as
    early as during handlerAdded is invoked in 26aa34853, whereas it was
    only invoked during channelRegistered is invoked before that. So the
    comment does not describe how handlers are added in normal circumstances
    anymore.
    
    However, the code is kept as-is since there might be unusual cases, and
    adding ServerBootstrapAcceptor via the event loop is always safe to
    enforce the correct order.

commit e58095c4f22f5637d6eb90898ecbbbbb057490d4
Author: jiachun.fjc <jiachun.fjc@alibaba-inc.com>
Date:   Wed May 3 00:37:09 2017 +0800

    Simplify code
    
    Motivation:
    
    Code can be simplified
    
    Modification:
    
    Refactor code to remove extra branching
    
    Result:
    
    Cleaner code.

commit ed37cf20ef1ce2c792d57b02ef6494880b24f72d
Author: Vladimir Kostyukov <vkostyukov@twitter.com>
Date:   Thu Apr 27 23:42:18 2017 -0700

    Introduce HashedWheelTimer.pendingTimeouts()
    
    Motivation:
    
    Fixes #6681.
    
    Modification:
    
    For the sake of better timer observability, expose the number of pending timeouts through the new HashedWheelTimer.pendingTimeouts method .
    
    Result:
    
    It's now ridiculously easy to observe Netty timer's very basic and yet important metric, the number of pending tasks/timeouts.

commit 6915ec3bb9f5ff20ca8a3ac9264117d208dc4ab7
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Apr 29 14:10:00 2017 +0200

    [maven-release-plugin] prepare for next development iteration

commit f30f242fee89ec37e2c65b49693ad386aa870c00
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Apr 29 14:09:32 2017 +0200

    [maven-release-plugin] prepare release netty-4.1.10.Final

commit 3ba4da8a79acfdbe6daf35da96f5a0bf36fb9fe4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Apr 28 13:05:12 2017 +0200

    Mark conscrypt as optional
    
    Motivation:
    
    Conscrypt is not needed when using the handler module, so it should be marked as optional
    
    Modifications:
    
    Mark conscrypt as optional
    
    Result:
    
    Be able to use handler module without conscrypt

commit 92efa3c916e0459111382b65cb08a309ac657554
Author: kennylbj <632786081@qq.com>
Date:   Fri Apr 7 13:33:49 2017 +0800

    Add UptimeServer and adjust UptimeClient's code style.
    
    Motivation:
    
    Uptime example is lack of server.
    UptimeClient's code style is a little bit different from others, which make reader feel confused.
    We don't need to create a new Bootstrap instance each time client reconnect to server.
    
    Modification:
    
    Add UptimeServer and UptimeServerHandler which simply accept all connection and discard all message.
    Change UptimeClient's code style.
    Share a single Bootstrap instance.
    
    Result:
    
    Uptime server support.
    Consistent code style.
    Single Bootstrap for all reconnection.

commit ea1cb20c90dde394f288cee5e8090d730d5fafbb
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Apr 27 15:12:02 2017 -0700

    Netutil IPv6 bugs
    
    Motivation:
    NetUtil#isValidIpV6Address and NetUtil#getIPv6ByName allowed an invalid form of mapped IPv4 addresses which lead to accepting invalid IPv6 addresses as valid.
    
    Modifications:
    - NetUtil#isValidIpV6Address and NetUtil#getIPv6ByName should only allow 7 colons for an IPv4 address if they are the first 2 characters.
    
    Result:
    More correct implementation of NetUtil#isValidIpV6Address and NetUtil#getIPv6ByName

commit b1cb059540ecfc17c1f2b4d54c0db8e7cc743d8e
Author: Daniel Schobel <dschobel@twitter.com>
Date:   Tue Feb 28 18:30:52 2017 -0700

    Motivation:
    
    It is generally useful to have origin http servers respond to
    "expect: continue-100" as soon as possible but applications without a
    HttpObjectAggregator in their pipelines must use boiler plate to do so.
    
    Modifications:
    
    Introduce the HttpServerExpectContinueHandler handler to make it easier.
    
    Result:
    
    Less boiler plate for http application authors.

commit ffd69115864e472aa07e095782065e8f1c94aec2
Author: Aron Wieck <aw@crown.de>
Date:   Fri Jul 1 09:07:40 2016 +0200

    Use constant string instead of user provided file name for DiskFileUpload temp file names.
    
    Motivation:
    
    DiskFileUpload creates temporary files for storing user uploads containing the user provided file name as part of the temporary file name. While most security problems are prevented by using "new File(userFileName).getName()" a small risk for bugs or security issues remains.
    
    Modifications:
    
    Use a constant string as file name and rely on the callers use of File.createTemp to ensure unique disk file names.
    
    Result:
    
    A slight security improvement at the cost of a little more obfuscated temp file names.

commit 5a2d04684ed22e2e170de4121e358776179671be
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Apr 6 18:09:28 2017 -0700

    DNS Resolver visibility into individual queries
    
    Motivation:
    A single DNS query may follow many different paths through resolver-dns. The query may fail for various reasons related to the DNS protocol, general IO errors, it may be cancelled due to the query count being exceeded, or other reasons. A query may also result in other queries as we follow the DNS protocol (e.g. redirects, CNAME, etc...). It is currently impossible to collect information about the life cycle of an individual query though resolver-dns. This information may be valuable when considering which DNS servers are preferred over others.
    
    Modifications:
    - Introduce an interface which can provide visibility into all the potential outcomes of an individual DNS query
    
    Result:
    resolver-dns provides visibility into individual DNS queries which can be used to avoid poorly performing DNS servers.

commit 0123190214c59d764a6d3c79a9570cd20fe6715a
Author: Johno Crawford <johno@sulake.com>
Date:   Thu Apr 27 12:03:08 2017 +0200

    Netty BOM inherit from parent and its own dependency management
    
    Motivation:
    
    A BOM should only expose dependency management for the artifacts that the project produces (so in this case, netty artifacts). It should not have an opinion about third party dependencies (otherwise including that BOM in a project potentially overrides decisions that were made about them).
    
    Modifications:
    
    Stop inheriting from netty-parent and explicitly set the versions for the artifacts.
    
    Result:
    
    Valid BOM.

commit 231e6a5b7d92a7455b5c64f8e4a71a6fcc73cfd1
Author: Andrew McCall <andrew@andrewmccall.com>
Date:   Fri Dec 23 21:10:26 2016 +0000

    Calls to discardSomeReadBytes() causes the JsonDecoder to get corrupted
    
    Modification:
    
    Added a lastReaderIndex value and if the current readerIndex has been reset, resets the idx and the decoder.
    
    Result:
    
    Fixes #6156.

commit b662afeece60faf349e82c8a624f6bfd7cfe7b1f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 18 19:51:24 2017 +0200

    Correctly release all buffers in UnpooledTest
    
    Motivation:
    
    We not correctly released all buffers in the UnpooledTest and so showed "bad" way of handling buffers to people that inspect our code to understand when a buffer needs to be released.
    
    Modifications:
    
    Explicit release all buffers.
    
    Result:
    
    Cleaner and more correct code.

commit 8b13d9656af35469673b4f8109f88d0457de2e90
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Apr 26 08:17:55 2017 +0200

    Notify connect promise of ProxyHandler after codecs are removed
    
    Motivation:
    
    We need to notify the promise after the codecs are removed to allow writing from the listener and ensure we not try to do any encoding anymore. If we not do we will end up with corrupt data.
    
    Modifications:
    
    Notify promise after codecs are removed.
    
    Result:
    
    Fixes [#6671].

commit 57d3393527a9dba78eda4365eae13c655e7b3f28
Author: Roger Kapsi <rkapsi@squarespace.com>
Date:   Tue Apr 11 12:39:42 2017 -0400

    Ability to extend SniHandler and configure it with arbitrary runtime data
    
    Motivation
    
    SniHandler is "hardcoded" to use hostname -> SslContext mappings but there are use-cases where it's desireable and necessary to return more information than a SslContext. The only option so far has been to use a delegation pattern
    
    Modifications
    
    Extract parts of the existing SniHandler into an abstract base class and extend SniHandler from it. Users can do the same by extending the new abstract base class and implement custom behavior that is possibly very different from the common/default SniHandler.
    
    Touches
    
    - https://github.com/netty/netty/commit/f97866dbc6e7edc987de9bf7d31f563ce726833e
    - https://github.com/netty/netty/commit/b604a22395f64bca52d155127e2453aa3178af6c
    
    Result
    
    Fixes #6603

commit 9cb858fcf6ad55ec0770f81595f23ae04687f52e
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Apr 6 10:47:24 2017 -0700

    NetUtil IPv6 bugs related to IPv4 and compression
    
    Motivation:
    NetUtil#getByName and NetUtil#isValidIpV6Address do not strictly enforce the format of IPv4 addresses that are allowed to be embedded in IPv6 addresses as specified in https://tools.ietf.org/html/rfc4291#section-2.5.5. This may lead to invalid addresses being parsed, or invalid addresses being considered valid. Compression of a single IPv6 word was also not handled correctly if there are 7 : characters.
    
    Modifications:
    - NetUtil#isValidIpV6Address should enforce the IPv4-Compatible and IPv4-Mapped are the only valid formats for including IPv4 addresses as specified in https://tools.ietf.org/html/rfc4291#section-2.5.5
    - NetUtil#getByName should more stritcly parse IPv6 addresses which contain IPv4 addresses as specified in https://tools.ietf.org/html/rfc4291#section-2.5.5
    - NetUtil should allow compression even if the number of : characters is 7.
    - NetUtil#createByteArrayFromIpAddressString should use the same IP string to byte[] translation which is used in NetUtil#getByName
    
    Result:
    NetUtil#getByName and NetUtil#isValidIpV6Address respect the IPv6 RFC which defines the valid formats for embedding IPv4 addresses.

commit a45f9d7939e0e121011e09526015c2719007a6f5
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Mon Apr 24 21:01:56 2017 +0300

    Improvement : allocate less object during multipart form parsing.

commit d21f2adb98bf87bca8190f86888a3a8399397322
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Apr 22 10:19:28 2017 -0700

    HTTP/2 StreamByteDistributor improve parameter validation
    
    Motivation:
    Each StreamByteDistributor may allow for priority in different ways, but there are certain characteristics which are invalid regardless of the distribution algorithm. We should validate these invalid characteristics at the flow controller level.
    
    Modifications:
    - Disallow negative stream IDs from being used. These streams may be accepted by the WeightedFairQueueByteDistributor and cause state for other valid streams to be evicted.
    - Improve unit tests to verify limits are enforced.
    
    Result:
    Boundary conditions related to the priority parameters are validated more strictly.

commit 3ac6d071689d7c8ce8e881243a9015e7fb37204f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Apr 24 09:52:06 2017 +0200

    Skip forbidden API check when running examples
    
    Motivation:
    
    We should skip the forbidden API check when run the examples as otherwise it may fail.
    
    Modifications:
    
    Skip the API check in run-example.sh
    
    Result:
    
    Be able to run the examples in all cases.

commit 7f3b75a5091dcd6d882102fdb92daa6931e02c30
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Apr 23 21:08:03 2017 +0200

    Revert "SslHandler avoid calling wrap/unwrap when unnecessary"
    
    This reverts commit 6353c229fd11c6e6306011d55993775f7685d122 to "fix" [#6578].

commit 1c63cc8067c7cd40c3e58772b4222560e67e6092
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Apr 23 20:17:55 2017 +0200

    Skip forbidden API check when building with java9 for now
    
    Motivation:
    
    There needs to be some work be done to allow using forbidden API check plugin when using java9.
    
    Modifications:
    
    Skip forbidden API check when using java9
    
    Result:
    
    Builds again with java9

commit 98beb777f81f092aa0fddf49ed08b426b2c72f01
Author: Jason Tedor <jason@tedor.me>
Date:   Mon Jan 16 12:36:32 2017 -0500

    Enable configuring available processors
    
    Motivation:
    
    In cases when an application is running in a container or is otherwise
    constrained to the number of processors that it is using, the JVM
    invocation Runtime#availableProcessors will not return the constrained
    value but rather the number of processors available to the virtual
    machine. Netty uses this number in sizing various resources.
    Additionally, some applications will constrain the number of threads
    that they are using independenly of the number of processors available
    on the system. Thus, applications should have a way to globally
    configure the number of processors.
    
    Modifications:
    
    Rather than invoking Runtime#availableProcessors, Netty should rely on a
    method that enables configuration when the JVM is started or by the
    application. This commit exposes a new class NettyRuntime for enabling
    such configuraiton. This value can only be set once. Its default value
    is Runtime#availableProcessors so that there is no visible change to
    existing applications, but enables configuring either a system property
    or configuring during application startup (e.g., based on settings used
    to configure the application).
    
    Additionally, we introduce the usage of forbidden-apis to prevent future
    uses of Runtime#availableProcessors from creeping. Future work should
    enable the bundled signatures and clean up uses of deprecated and
    other forbidden methods.
    
    Result:
    
    Netty can be configured to not use the underlying number of processors,
    but rather the constrained number of processors.

commit e78ccd6d52450f30e648abca22b8f2afec62f45d
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Sat Apr 22 20:14:03 2017 +0300

    #6657 do not throw ClassCastException when rule subnet version doesn't match remote IP version

commit 799350c369e68462b61c6aef97db2a33ea937434
Author: Eric Anderson <ejona@google.com>
Date:   Fri Apr 21 17:05:30 2017 -0700

    Fix HTTP/2 dependency tree corruption
    
    Motivation:
    
    Chrome was randomly getting stuck loading the tiles examples.
    Investigation showed that the Netty flow controller thought it had
    nothing to send for the connection even though some streams has queued
    data and window available.
    
    Modifications:
    
    Fixed an accounting error where an implicitly created parent was not
    being added to the dependency tree, thus it and all of its children were
    orphaned from the connection's tree and would never have data written.
    
    Result:
    
    Fixes #6621

commit c6ad9338b3db285978013fb060dda01dc927024d
Author: Eric Anderson <ejona@google.com>
Date:   Fri Apr 21 17:15:18 2017 -0700

    Avoid infinite loop in HTTP/2 distributor toString()
    
    Motivation:
    
    Although effectively unused, the toString() of
    WeightedFairQueueByteDistributor.State is useful for debugging. It
    accidentally had an infinite loop, as it would recurse infinitely
    between a parent and its child, which makes it less useful for
    debugging.
    
    Modifications:
    
    Prune the infinite loop by using the parent's streamId instead of the
    parent's toString().
    
    Result:
    
    Faster, less stack-overflowing toString()

commit 7214740c06b5225d3fef46486bf5c3c6cd860431
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Mar 12 15:31:25 2017 +0100

    Add support for SNIMatcher when using SslProvider.OPENSSL* and Java8+
    
    Motivation:
    
    Java8 adds support for SNIMatcher to reject SNI when the hostname not matches what is expected. We not supported doing this when using SslProvider.OPENSSL*.
    
    Modifications:
    
    - Add support for SNIMatcher when using SslProvider.OPENSSL*
    - Add unit tests
    
    Result:
    
    SNIMatcher now support with our own SSLEngine as well.

commit 34ff9cf5f246efddec9da2994d039cd40e896c5e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Apr 19 14:16:06 2017 +0200

    Fix possible overflow when calculate in the size of the out buffer in Base64
    
    Motivation:
    
    We not correctly guarded against overflow and so call Base64.encode(...) with a big buffer may lead to an overflow when calculate the size of the out buffer.
    
    Modifications:
    
    Correctly guard against overflow.
    
    Result:
    
    Fixes [#6620].

commit c663a94359b70069b67b8d7f7bc9d0c43dca7674
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Apr 20 08:08:40 2017 +0200

    Fix buffer leak in local transport when a close triggers the close of a remote peer and there are still messages in the inbound buffer.
    
    Motivation:
    
    We need to release all the buffers that may be put into our inbound queue since we closed the Channel to ensure we not leak any memory. This is fine as it basically gives the same guarantees as TCP which  means even if the promise was notified before its not really guaranteed that the "remote peer" will see the buffer at all.
    
    Modifications:
    
    Ensure we release all buffers in the inbound buffer if a doClose() is called.
    
    Result:
    
    No more leaks.

commit 4dd6c14ba275384ce8561ec4a5f139a740a79f7f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Apr 20 15:42:50 2017 +0200

    Only use test SslProviders that are supported in SslHandlerTest.testCompositeBufSizeEstimationGuaranteesSynchronousWrite().
    
    Motivation:
    
    We need to ensure we only try to to test with the SslProviders that are supported when running the SslHandlerTest.testCompositeBufSizeEstimationGuaranteesSynchronousWrite test.
    
    Modifications:
    
    Skip SslProvider.OPENSSL* if not supported.
    
    Result:
    
    No more test-failures if openssl is not installed on the system.

commit bf0beb772c83fb5fa2240369ec7602a65000e089
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Apr 19 15:22:06 2017 +0200

    Fix IllegalArgumentException when release a wrapped ByteBuffer on Java9
    
    Motivation:
    
    Unsafe.invokeCleaner(...) checks if the passed in ByteBuffer is a slice or duplicate and if so throws an IllegalArgumentException on Java9. We need to ensure we never try to free a ByteBuffer that was provided by the user directly as we not know if its a slice / duplicate or not.
    
    Modifications:
    
    Never try to free a ByteBuffer that was passed into UnpooledUnsafeDirectByteBuf constructor by an user (via Unpooled.wrappedBuffer(....)).
    
    Result:
    
    Build passes again on Java9

commit 970d310ec9ae3d0581adf48eec815d54e93b4960
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Wed Apr 19 23:54:23 2017 +0500

    Regulation of the InternetProtocolFamily usage
    
    Motivation:
    
    1. The use of InternetProtocolFamily is not consistent:
       the DnsNameResolverContext and DnsNameResolver contains switches
       instead of appropriate methods usage.
    2. The InternetProtocolFamily class contains redundant switches in the
       constructor.
    
    Modifications:
    
    1. Replacing switches to the use of an appropriate methods.
    2. Simplifying the InternetProtocolFamily constructor.
    
    Result:
    
    Code is cleaner and simpler.

commit 0692bf1b6a6764dee22132630bef7ee2f850771e
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Thu Apr 20 01:37:03 2017 +0500

    fix the typos

commit 38483e8790438e78ba98b46389d2beaa0c3c934c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Apr 19 12:08:56 2017 +0200

    Correctly manage buffer life-cycle in http2 multiplex example
    
    Motivation:
    
    We not correctly managed the life-cycle of the buffer / frames in our http2 multiplex example which lead to a memory leak.
    
    Modifications:
    
    - Correctly release frame if not echo'ed back the remote peer.
    - Not retain content before echo back to remote peer.
    
    Result:
    
    No more leak in the example, fixes [#6636].

commit a0fcb72e5d999cd1f260c0d6da078bb29ae69fc4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Mar 31 08:05:46 2017 +0200

    Use jndi-dns to obtain default name servers
    
    Motivation:
    
    Using reflection to obtain the default name servers may fail in Java9 and also in previous Java versions if a SecurityManager is present.
    
    Modifications:
    
    Try using jndi-dns to obtain default name servers and only try using reflection if this fails.
    
    Result:
    
    Be able to detect default name servers in all cases. Fixes [#6347].

commit e482d933f755d42f2ed0a29776e2599ae07f1806
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Mar 25 19:06:31 2017 -0700

    Add 'io.netty.tryAllocateUninitializedArray' system property which allows to allocate byte[] without memset in Java9+
    
    Motivation:
    
    Java9 added a new method to Unsafe which allows to allocate a byte[] without memset it. This can have a massive impact in allocation times when the byte[] is big. This change allows to enable this when using Java9 with the io.netty.tryAllocateUninitializedArray property when running Java9+. Please note that you will need to open up the jdk.internal.misc package via '--add-opens java.base/jdk.internal.misc=ALL-UNNAMED' as well.
    
    Modifications:
    
    Allow to allocate byte[] without memset on Java9+
    
    Result:
    
    Better performance when allocate big heap buffers and using java9.

commit fb113dce3a200005261020ce7fd02e2630b064ed
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 18 06:44:44 2017 +0200

    HttpPostRequestEncoder may return a slice which is not retained.
    
    Motivation:
    
    We miss to retain a slice before return it to the user and so an reference count error may accour later on.
    
    Modifications:
    
    Use readRetainedSlice(...) and so ensure we retain the buffer before hand it of to the user.
    
    Result:
    
    Fixes [#6626].

commit 1b0b8f80cdf5d5ef0919d30232c090c5a495d4b6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 18 07:12:58 2017 +0200

    AbstractScheduledEventExecutor.schedule(...) must accept delay <= 0.
    
    Motivation:
    
    As the javadoc of ScheduledExecutorService state:
    
    Zero and negative delays (but not periods) are also allowed in schedule methods,and are treated as requests for immediate execution.
    
    Modifications:
    
    - Correctly handle delay <= 0.
    - Add unit tests.
    
    Result:
    
    Fixes [#6627].

commit 119383873d84e0da24916e4240e5fdfc4dc0016d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 18 07:52:23 2017 +0200

    VoidChannelPromise not notified when exception is thrown.
    
    Motivation:
    
    When a VoidChannelPromise is used by the user we need to ensure we propergate the exception through the ChannelPipeline otherwise the exception will just be swallowed and so the user has no idea whats going on.
    
    Modifications:
    
    - Always call tryFailure / trySuccess even when we use the VoidChannelPromise
    - Add unit test
    
    Result:
    
    Fixes [#6622].

commit 38b054c65cc655bb4966517abeb32c1246c5c7e3
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 18 20:51:11 2017 +0200

    Correctly handle read-only ByteBuf in ByteToMessageDecoder
    
    Motivation:
    
    If a read-only ByteBuf is passed to the ByteToMessageDecoder.channelRead(...) method we need to make a copy of it once we try to merge buffers for cumulation. This usually is not the case but can for example happen if the local transport is used. This was the cause of the leak report we sometimes saw during the codec-http2 tests, as we are using the local transport and write a read-only buffer. This buffer will then be passed to the peer channel and fired through the pipeline and so end up as the cumulation buffer in the ByteToMessageDecoder. Once the next fragement is received we tried to merge these and failed with a ReadOnlyBufferException which then produced a leak.
    
    Modifications:
    
    Ensure we copy the buffer if its read-only.
    
    Result:
    
    No more exceptions and so leak when a read-only buffer is passed to ByteToMessageDecoder.channelRead(...)

commit 4436d697a6e4a01342a364c05592647f00eb85fc
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 18 10:13:19 2017 +0200

    Update to netty-tcnative 2.0.1.Final

commit 1dfd852dffebdc7e293d42d82d0d304aafe9a04d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 18 13:43:03 2017 +0200

    Revert "Add support for SNIMatcher when using SslProvider.OPENSSL* and Java8+"
    
    This reverts commit cc5d1d0a7e6475c6dc3628321c17a62785016163.

commit cc5d1d0a7e6475c6dc3628321c17a62785016163
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Mar 12 15:31:25 2017 +0100

    Add support for SNIMatcher when using SslProvider.OPENSSL* and Java8+
    
    Motivation:
    
    Java8 adds support for SNIMatcher to reject SNI when the hostname not matches what is expected. We not supported doing this when using SslProvider.OPENSSL*.
    
    Modifications:
    
    - Add support for SNIMatcher when using SslProvider.OPENSSL*
    - Add unit tests
    
    Result:
    
    SNIMatcher now support with our own SSLEngine as well.

commit 7bd090596973a26b3185cbebba24857d6c810797
Author: Lukasz Strzalkowski <lukasz@squareup.com>
Date:   Sat Apr 8 17:54:55 2017 -0700

    Introduce ReferenceCounted.refCnt()
    
    Motivation:
    
    When debugging netty memory leaks, it's sometimes helpful to
    print the object's reference count.
    
    Modifications:
    
    Add `refCnt` methods to set of already exitsting helpers for ref coutned
    objects.
    
    Result:
    
    Users will have utility to print object's ref count without much of a
    boilerplate.

commit 7b6119a0a478b40f12e85c0e92e603f9f6ee5b6c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Mar 23 18:13:45 2017 -0700

    Allow to free direct buffers on java9 again
    
    Motivation:
    
    Java9 adds a new method to Unsafe which allows to free direct ByteBuffer via the cleaner without the need to use an commandline arguments.
    
    Modifications:
    
    - Add Cleaner interface
    - Add CleanerJava9 which will be used when using Java9+ and take care of release direct ByteBuffer
    - Let Cleaner0 implement Cleaner
    
    Result:
    
    Be able to free direct ByteBuffer on Java9+ again without any commandline arguments.

commit 4c77e7c55ab4b69870536b2bcd41511ede348d80
Author: Vladimir Kostyukov <vkostyukov@twitter.com>
Date:   Tue Apr 4 17:21:28 2017 -0700

    netty-codec: Manage read-flow explicitly in MessageAggregator

commit dcd322dda2dfd1e0567017d2e02c53728c310032
Author: Brendt Lucas <brendt.lucas@shakatechnologies.com>
Date:   Sun Apr 16 11:47:54 2017 +0100

    Fix regression in QueryStringEncoder
    
    Motivation:
    
    Commit #d675febf07d14d4dff82471829f974369705655a introduced a regression in QueryStringEncoder, resulting in whitespace being converted into a literal `+` sign instead of `%20`.
    
    Modification:
    
    Modify `encodeComponent` to pattern match and replace on the result of the call to `URLEncoder#encode`
    
    Result:
    
    Fixes regression

commit 155983f1a1384b2dc31a637da50bf7ecd3622927
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Mar 31 13:52:46 2017 -0700

    DNS move JDK DNS resolution out of DnsServerAddresses static initialization
    
    Motivation:
    DnsServerAddresses loads the default DNS servers used for DNS resolution in a static initialization block. This is subject to blocking and may cause unexpected delays. We can move this initialization to DefaultDnsServerAddressStreamProvider where it is more expected to load the JDK's default configuration.
    
    Modifications:
    - Move all the static initialization from DnsServerAddresses to DefaultDnsServerAddressStreamProvider
    - Deprecate static methods in DnsServerAddresses which have moved to DefaultDnsServerAddressStreamProvider
    - Remove usage of deprecated methods in DnsServerAddresses
    
    Result:
    Usage of JDK's blocking DNS resolver is not required to use resolver-dns.

commit 08646afc1ef078407cd97d2d0e86c08a7b179277
Author: Trustin Lee <t@motd.kr>
Date:   Tue Apr 4 17:23:34 2017 +0900

    Do not fail a DNS query promise prematurely
    
    Motivation:
    
    DnsNameResolverContext completes its DNS query promise automatically
    when no queries are in progress, which means there's no need to fail the
    promise explicitly.
    
    Modifications:
    
    - Do not fail a DNS query promise explicitly but add an informational
      trace
    
    Result:
    
    - Fixes #6600
    - Unexpected exception on one question type does not fail the promise
      too soon. If the other question succeeds, the query will succeed,
      making the resolver more robust.

commit 1bc5bc69e3c757934fe4c324572716a35ba1d000
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Apr 6 17:53:04 2017 -0700

    HTTP/2 Allow more time for EventLoopGroup to shutdown in test that use LocalChannel
    
    Motivation:
    The CI servers have reported leaks while building the HTTP/2 unit tests. The unit tests attempt to wait for the channels to be closed before exiting the test, but we should wait in case there are any tasks pending on the EventLoopGroup's task queues.
    
    Modifications:
    - Change the Future.sync() operations to Future.syncUninterruptibly()
    - HTTP/2 unit tests which use local channel should wait for 5 seconds before shutting down the EventLoopGroups
    
    Result:
    More likely that any cleanup related tasks will execute before the unit tests are shutdown.

commit c37267d682de9702dda4ad567cb0d0786fc0c130
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Apr 5 10:28:59 2017 -0700

    NioEventLoop#rebuildSelector0 throws ClassCastException
    
    Motivation:
    Commit 795f318 simplified some code related to the special case Set for the selected keys and introduced a Selector wrapper to make sure this set was properly reset. However the JDK makes assumptions about the type of Selector and this type is not extensible. This means whenever we call into the JDK we must provide the unwrapped version of the Selector or we get a ClassCastException. We missed a case of unwrapping in NioEventLoop#rebuildSelector0.
    
    Modificaitons:
    - NioEventLoop#openSelector should return a tuple so we can atomically set the wrapped and unwrapped Selector
    - NioEventLoop#rebuildSelector0 should use the unwrapped version of the selector
    
    Result:
    Fixes https://github.com/netty/netty/issues/6607.

commit 077a1988b9c96b5f3e5693a3bb1b2e118992f3a8
Author: Roger Kapsi <rkapsi@squarespace.com>
Date:   Mon Dec 26 18:04:56 2016 -0500

    OCSP stapling support for Netty using netty-tcnative.
    
    https://github.com/netty/netty-tcnative/pull/215
    
    Motivation
    
    OCSP stapling (formally known as TLS Certificate Status Request extension) is alternative approach for checking the revocation status of X.509 Certificates. Servers can preemptively fetch the OCSP response from the CA's responder, cache it for some period of time, and pass it along during (a.k.a. staple) the TLS handshake. The client no longer has to reach out on its own to the CA to check the validity of a cetitficate. Some of the key benefits are:
    
    1) Speed. The client doesn't have to crosscheck the certificate.
    2) Efficiency. The Internet is no longer DDoS'ing the CA's OCSP responder servers.
    3) Safety. Less operational dependence on the CA. Certificate owners can sustain short CA outages.
    4) Privacy. The CA can lo longer track the users of a certificate.
    
    https://en.wikipedia.org/wiki/OCSP_stapling
    https://letsencrypt.org/2016/10/24/squarespace-ocsp-impl.html
    
    Modifications
    
    https://www.openssl.org/docs/man1.0.2/ssl/SSL_set_tlsext_status_type.html
    
    Result
    
    High-level API to enable OCSP stapling

commit 34e0007f0721ff2e90116a8b64e1ae4ec2ba27e3
Author: Kevin Oliver <koliver@twitter.com>
Date:   Thu Mar 23 21:24:19 2017 -0700

    LoggingHandler does not override channelReadComplete or channelWritabilityChanged
    
    Motivation:
    
    `io.netty.handler.logging.LoggingHandler` does not log when these
    events happen.
    
    Modifiations:
    
    Add overrides with logging to these methods.
    
    Result:
    
    Logging now happens for these two events.

commit 225d10e1ade6906ce75257261729412ad5a80e6f
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Mar 31 17:56:59 2017 -0700

    HTTP/2 Make DefaultHttp2HeadersDecoder's Http2Headers object creation extensible
    
    Motivation:
    It is generally useful to override DefaultHttp2HeadersDecoder's creation of a new Http2Headers object so more optimized versions can be substituted if the use case allows for it.
    
    Modifications:
    - DefaultHttp2HeadersDecoder should support an overridable method to generate the new Http2Headers object for each decode operation
    
    Result:
    DefaultHttp2HeadersDecoder is more extensible.
    Fixes https://github.com/netty/netty/issues/6591.

commit e8da5e5162ef70572ca74af4df336c1cb1b4cece
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Mar 31 17:49:32 2017 -0700

    Revert "Expose HTTP/2 HpackDecoder (#6589)"
    
    This reverts commit f4c635d30b23be6ce51866704c178232e98015e7.

commit 4bcfa07a7d8baae64998c97d4e35e3333dbbd727
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Mar 29 11:20:31 2017 +0200

    Fix OpenSslCertificateException error code validation
    
    Motivation:
    
    In OpenSslCertificateException we tried to validate the supplied error code but did not correctly account for all different valid error codes and so threw an IllegalArgumentException.
    
    Modifications:
    
    - Fix validation by updating to latest netty-tcnative and use CertificateVerifier.isValid
    - Add unit tests
    
    Result:
    
    Validation of error code works as expected.

commit 00bf06e97b96ce98cd707783d80fac38294dd1dc
Author: kennylbj <632786081@qq.com>
Date:   Mon Apr 3 13:16:44 2017 +0800

    Fix spelling mistake of HttpStaticFileServerHandler.java

commit 5163869439c47e782cbeed26bbcfb49996aca753
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Apr 1 22:51:51 2017 +0200

    Only try to load conscrypt class in tests when supported.
    
    Motivation:
    
    1419f5b601ec7f50938a5e745ec2312f881a580f added support for conscrypt but the CI started to fail when running tests with java7 as conscrypt is compiled with java8. This was partly fixed in c4832cd9d989788f32dc1321d3e4c72bffa3587a but we also need to ensure we not try to even load the classes.
    
    Modifications:
    
    Only try to load conscrypt classes when on java8+-
    
    Result:
    
    CI not fails anymore.

commit c4832cd9d989788f32dc1321d3e4c72bffa3587a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Apr 1 20:38:33 2017 +0200

    Only support using Conscrypt on Java8+
    
    Motivation:
    
    1419f5b601ec7f50938a5e745ec2312f881a580f added support for conscrypt but the CI started to fail when running tests with java7 as conscrypt is compiled with java8.
    
    Modifications:
    
    Only support conscrypt on Java8+
    
    Result:
    
    CI not fails anymore.

commit 21562d8808718c6a7609d6f79f6961a66c3eaad9
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Mar 30 14:17:13 2017 -0700

    Retained[Duplicate|Slice] operations should not increase the reference count for UnreleasableByteBuf
    
    Motivation:
    UnreleasableByteBuf operations are designed to not modify the reference count of the underlying buffer. The Retained[Duplicate|Slice] operations violate this assumption and can cause the underlying buffer's reference count to be increased, but never allow for it to be decreased. This may lead to memory leaks.
    
    Modifications:
    - UnreleasableByteBuf's Retained[Duplicate|Slice] should leave the reference count of the parent buffer unchanged after the operation completes.
    
    Result:
    No more memory leaks due to usage of the Retained[Duplicate|Slice] on an UnreleasableByteBuf object.

commit b041f1a7a92f200cf02cd9a208a5033e143b1e39
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Mar 30 15:59:14 2017 -0700

    HttpServerKeepAliveHandler 204 response with no Content-Length should keepalive
    
    Motivation:
    https://tools.ietf.org/html/rfc7230#section-3.3.2 states that a 204 response MUST NOT include a Content-Length header. If the HTTP version permits keep alive these responses should be treated as keeping the connection alive even if there is no Content-Length header.
    
    Modifications:
    - HttpServerKeepAliveHandler#isSelfDefinedMessageLength should account for 204 respones
    
    Result:
    Fixes https://github.com/netty/netty/issues/6549.

commit e074df2ae6501d99921543369198c53e4d99ed1b
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Mar 30 17:02:16 2017 -0700

    DNS Resolve ambiguity in which DNS servers are used during resolution
    
    Motivation:
    Recently DnsServerAddressStreamProvider was introduced to allow control for each query as to which DNS server should be used for resolution to respect the local host's default DNS server configuration. However resolver-dns also accepts a stream of DNS servers to use by default, but this stream is not host name aware. This creates an ambiguity as to which method is used to determine the DNS server to user during resolution, and in which order. We can remove this ambiguity and provide a more general API by just supporting DnsServerAddressStreamProvider.
    
    Modifications:
    - Remove the fixed DnsServerAddresses and instead only accept a DnsServerAddressStreamProvider.
    - Add utility methods to help use DnsServerAddressStreamProvider for a single entry, a list of entries, and get the default for the current machine.
    
    Result:
    Fixes https://github.com/netty/netty/issues/6573.

commit 36c6a61d33c480798511723486459f4eea04cb47
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Mar 29 18:54:44 2017 -0700

    HTTP/2 remove unnecessary buffer operations
    
    Motivation:
    codec-http2 has some helper methods to write to ByteBuf in a big endian fashion. This is the default memory structure for ByteBuf so these helper methods are not necessary.
    
    Modifications:
    - remove writeUnsignedInt and writeUnsignedShort
    
    Result:
    codec-http2 has less ByteBuf helper methods which are not necessary.

commit 0ee36fef006dc47e0f3d88bfd0ff8eda27dc7651
Author: chhsiao90 <chhsiao90@gmail.com>
Date:   Sun Mar 5 23:22:54 2017 +0800

    Accept two ways to start HTTP/2 over clear text
    
    Motivation:
    
    HTTP/2 support two ways to start on a no-tls tcp connection,
    http/1.1 upgrade and prior knowlege methodology to start HTTP/2.
    Currently, the http2-server from example only support
    starting by upgrade. I think we can do a simple dispatch by peek first
    bytes from inbound that match to prior knowledge preface or not and
    determine which handlers to set into pipeline.
    
    Modifications:
    
    Add ClearTextHttp2ServerUpgradeHandler to support start HTTP/2 via clear
    text with two approach. And update example/http2-server to support
    this functionality.
    
    Result:
    
    netty HTTP/2 and the example http2-server accept for two ways to start
    HTTP/2 over clear text.
    
    Fixed memory leak problem
    
    Update fields to final
    
    Rename ClearText to cleartext
    
    Addressed comments for code improvement
    
    - Always prefer static, final, and private if possible
    - Add UnstableApi annotation
    - Used EmbeddedChannel.readInbound instead of unhandled inbound handler
    - More assertion
    
    Update javadoc for CleartextHttp2ServerUpgradeHandler
    
    Rename ClearTextHttp2ServerUpgradeHandler to CleartextHttp2ServerUpgradeHandler
    
    Removed redundant code about configure pipeline
    
    nit: PriorKnowledgeHandler
    
    Removed Mockito.spy, investigate conn state instead
    
    Add Http2UpgradeEvent
    
    Check null of the constructor arguments
    
    Rename Http2UpgradeEvent to PriorKnowledgeUpgradeEvent
    
    Update unit test

commit 1419f5b601ec7f50938a5e745ec2312f881a580f
Author: Nathan Mittler <nathanmittler@google.com>
Date:   Fri Mar 31 13:55:59 2017 -0700

    Adding support for Conscrypt (#6271)
    
    Motivation:
    
    Conscrypt is a Java Security provider that wraps OpenSSL (specifically BoringSSL). It's a possible alternative to Netty-tcnative that we should explore. So this commit is just to enable us to further investigate its use.
    
    Modifications:
    
    Modifying the SslContext creation path to support the Conscrypt provider.
    
    Result:
    
    Netty will support OpenSSL with conscrypt.

commit f4c635d30b23be6ce51866704c178232e98015e7
Author: Nathan Mittler <nathanmittler@google.com>
Date:   Fri Mar 31 10:51:01 2017 -0700

    Expose HTTP/2 HpackDecoder (#6589)
    
    Motivation:
    
    gRPC (and potentially other libraries) has an optimized header processor that requires direct access to the HpackDecoder.
    
    Modifications:
    
    Make the HpackDecoder and its constructors public.
    
    Result:
    
    Fixes #6579

commit ed1071d327cdd77bf520befda7f62081374e77bc
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Mar 25 17:14:53 2017 -0700

    Limit the maximum size of the allocated outbound buffer to MAX_ENCRYPTED_PACKET_LENGTH
    
    Motivation:
    
    We should limit the size of the allocated outbound buffer to MAX_ENCRYPTED_PACKET_LENGTH to ensure we not cause an OOME when the user tries to encrypt a very big buffer.
    
    Modifications:
    
    Limit the size of the allocated outbound buffer to MAX_ENCRYPTED_PACKET_LENGTH
    
    Result:
    
    Fixes [#6564]

commit 40bead56c4d57b33e751ef243c7fb3cfe861bfac
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Mar 31 07:45:56 2017 +0200

    Revert "http2: Http2StreamChannel now shares options of its parent channel"
    
    This reverts commit 7467106630ad6b2522f7953c244546b91b107efe.

commit ef21d5f4caf904e9035e6e8ffec503e554cb6d61
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Mar 29 16:37:28 2017 -0700

    UnsafeByteBufUtil errors and simplification
    
    Motiviation:
    UnsafeByteBufUtil has some bugs related to using an incorrect index, and also omitting the array paramter when dealing with byte[] objects. There is also some simplification possible with respect to type casting, and minor formatting consistentcy issues.
    
    Modifications:
    - Ensure indexing is correct when dealing with native memory
    - Fix the native access and endianness for the medium/unsigned medium methods
    - Ensure array is used when dealing with heap memory
    - Remove unecessary casts when using long
    - Fix formating and alignment
    
    Result:
    UnsafeByteBufUtil is more correct and won't access direct memory when heap arrays are used.

commit 493a8135f835dd06120f10390be7483125ec4fe1
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Mar 29 22:43:00 2017 +0200

    Ensure test introduced in 5c1c14286d29d57acddf32b227722f7b2e113ed4 also works on Java9

commit 5c1c14286d29d57acddf32b227722f7b2e113ed4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Mar 28 08:24:40 2017 +0200

    Allow negative memoryAddress when calling PlatformDependent0.newDirectBuffer(...)
    
    Motivation:
    
    When UNSAFE.allocateMemory is returning an address whose high bit is set we currently throw an IllegalArgumentException. This is not correct as it may return a negative number on at least sparc.
    
    Modifications:
    
    - Allow to pass in negative memoryAddress
    - Add unit tests
    
    Result:
    
    Correctly validate the memoryAddress and so also work on sparc as expected. Fixes [#6574].

commit 016629fe3b65b3797e7e9de39a661bac196c41e0
Author: Ade Setyawan Sajim <asajim@student.tudelft.nl>
Date:   Tue Mar 14 18:56:57 2017 +0100

    Replace system.out.println with InternalLoggerFactory
    
    Motivation:
    
    There are two files that still use `system.out.println` to log their status
    
    Modification:
    
    Replace `system.out.println` with a `debug` function inside an instance of `InternalLoggerFactory`
    
    Result:
    
    Introduce an instance of `InternalLoggerFactory` in class `AbstractMicrobenchmark.java` and `AbstractSharedExecutorMicrobenchmark.java`

commit 71b338ce17036bcb448c6c73e9a35b4971254733
Author: cdn <cdn@n5.csteam.net>
Date:   Fri Mar 24 14:07:43 2017 +0900

    Non-latin character broken on HttpHeader by HttpObjectDecoder.
    
    Motivation:
    
    Currently netty is receiving HTTP request by ByteBuf and store it as "CharSequence" on HttpObjectDecoder. During this operation, all character on ByteBuf is moving to char[] without breaking encoding.
    But in process() function, type casting from byte to char does not consider msb (sign-bit). So the value over 127 can be casted wrong value. (ex : 0xec in byte -> 0xffec in char). This is type casting bug.
    
    Modification:
    
    Fix type casting
    
    Result:
    
    Non-latin characters work.

commit 13cd69c5ec3bba7d3efbd99ba171e9d3591a8f86
Author: R Kaja Mohideen <kaja_mohideen.rasool@nokia.com>
Date:   Thu Mar 9 21:24:57 2017 +0530

    Recognizing TLS Extension "HeartBeat" as Valid TLS Packet
    
    Motivation:
    
    The widely used SSL Implementation, OpenSSL, already supports Heartbeat Extension; both sending and responding to Heartbeat Messages. But, since Netty is not recognizing that extension as valid packet, peers won't be able to use this extension.
    
    Modification:
    
    Update SslUtils.java to recognize Heartbeat Extension as valid tls packet.
    
    Result:
    
    With this change, softwares using Netty + OpenSSL will be able to respond for TLS Heartbeat requests (actually taken care by OpenSSL - no need of any extra implementation from Clients)

commit 6036b3f6eac7b54562dcddd3b2b97175d041335a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Mar 27 05:20:02 2017 +0200

    Fix buffer leak in EmptyByteBufTest introduced by aa2f16f3143e46412e3c043b097e0f70f5026196

commit 7467106630ad6b2522f7953c244546b91b107efe
Author: Vladimir Kostyukov <vkostyukov@twitter.com>
Date:   Mon Mar 20 13:14:34 2017 -0700

    http2: Http2StreamChannel now shares options of its parent channel
    
    Motivation
    
    Http2StreamChannel ignores options of its parent channel when being created. That leads to surprising results when, for example, unpooled allocator could be silently replaced with pooled allocator (default setting).
    
    Modification
    
    Copy parent channel's options over to the Http2StreamChannel.
    
    Result
    
    Channel options are now consistent between Http2StreamChannel and its parent channel. Newly added test passes on this branch and fails on master. Fixes #6551.

commit bf08ed0b93e54e8e21f23e9d948fd2732dc52171
Author: Boaz Avital <boazavital@gmail.com>
Date:   Mon Mar 20 14:30:23 2017 -0700

    fix failure logging of value on channel option set
    
    Motivation:
    
    The code accidentally passes channel twice instead of value, resulting in logs like:
    Failed to set channel option 'SO_SNDBUF' with value '[id: 0x2c5b2eb4]' for channel '[id: 0x2c5b2eb4]'
    
    Modifications:
    
    Pass value instead of channel where it needs to be.
    
    Result:
    
    Failed to set channel option 'SO_SNDBUF' with value '0' for channel '[id: 0x9bd3c5b8]'

commit aa2f16f3143e46412e3c043b097e0f70f5026196
Author: Bryce Anderson <banderson@twitter.com>
Date:   Tue Mar 21 10:14:13 2017 -0700

    EmptyByteBuf allows writing ByteBufs with 0 readable bytes
    
    Motivation:
    
    The contract of `ByteBuf.writeBytes(ByteBuf src)` is such that it will
    throw an `IndexOutOfBoundsException if `src.readableBytes()` is greater than
    `this.writableBytes()`. The EmptyByteBuf class will throw the exception,
    even if the source buffer has zero readable bytes, in violation of the
    contract.
    
    Modifications:
    
    Use the helper method `checkLength(..)` to check the length and throw
    the exception, if appropriate.
    
    Result:
    
    Conformance with the stated behavior of ByteBuf.

commit 9c1a1916962354f1e69fe43107219c25a86e6cef
Author: David Dossot <ddossot@apple.com>
Date:   Fri Feb 24 12:45:23 2017 -0800

    Trim optional white space in CombinedHttpHeaders values
    
    Motivation:
    
    The updated HTTP/1.x RFC allows for header values to be CSV and separated by OWS [1]. CombinedHttpHeaders should remove this OWS on insertion.
    
    [1] https://tools.ietf.org/html/rfc7230#section-7
    
    Modification:
    
    CombinedHttpHeaders doesn't account for the OWS and returns it back to the user as part of the value.
    
    Result:
    
    Fixes #6452

commit 9e6e1a3e7b451779a0aa8db07271a7befd69e02c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Mar 9 12:15:34 2017 +0100

    Use SystemPropertyUtil to access system properties
    
    Motivation:
    
    We should use SystemPropertyUtil to access system properties and so always handle SecurityExceptions.
    
    Modifications:
    
    Use SystemPropertyUtil everywhere.
    
    Result:
    
    Better and consist handling of SecurityException.

commit 476d2aea76847ccae6831d0f41a4d06d7a6e3b77
Author: Jeff Evans <jeffrey.wayne.evans@gmail.com>
Date:   Wed Mar 15 13:20:03 2017 -0500

    Adding method to assert XML decoder framing works
    
    Motivation:
    
    In an effort to better understand how the XmlFrameDecoder works, I consulted the tests to find a method that would reframe the inputs as per the Javadocs for that class. I couldn't find any methods that seemed to be doing it, so I wanted to add one to reinforce my understanding.
    
    Modification:
    
    Add a new test method to XmlFrameDecoder to assert that the reframing works as described.
    
    Result:
    
    New test method is added to XmlFrameDecoder

commit 61f53c4d07bb5a883673f31b798046427fb7d55f
Author: Michael O'Brien <mobrien@hubspot.com>
Date:   Fri Mar 10 16:19:45 2017 +0000

    ChunkedWriteHandler flushes too often
    
    Motivation:
    
    ChunkedWriteHandler queues written messages and actually writes them
    when flush is called. In its doFlush method, it needs to flush after
    each chunk is written to preserve memory. However, non-chunked messages
    (those that aren't of type ChunkedInput) are treated in the same way,
    which means that flush is called after each message is written.
    
    Modifications:
    
    Moved the call to flush() inside the if block that tests if the message
    is an instance of ChunkedInput. To ensure flush is called at least once,
    the existing boolean flushed is checked at the end of doFlush. This
    check was previously in ChunkedWriteHandler.flush(), but wasn't checked in
    other invocations of doFlush, e.g. in channelInactive.
    
    Result:
    
    When this handler is present in a pipeline, writing a series
    of non-chunked messages will be flushed as the developer intended.

commit 2b8c8e0805e343f7c06d4fb81d958aed357ecc6a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Mar 10 07:46:17 2017 +0100

    [maven-release-plugin] prepare for next development iteration

commit 1db58ea9800a3839ccf495103e5918debf8479d0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Mar 10 07:45:28 2017 +0100

    [maven-release-plugin] prepare release netty-4.1.9.Final

commit e12f504ac1d0fa5e798cc21806fbcb031335e6ad
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Mar 9 17:10:38 2017 +0100

    Remove deprecated usage of Mockito methods
    
    Motivation:
    
    We used some deprecated Mockito methods.
    
    Modifications:
    
    - Replace deprecated method usage
    - Some cleanup
    
    Result:
    
    No more usage of deprecated Mockito methods. Fixes [#6482].

commit 01012fc5b7550af189a1fb2d35819347a85dd112
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Mar 8 18:57:51 2017 -0800

    HTTP/2 SETTINGS ACK sequencing issue
    
    Motivation:
    DefaultHttp2ConnectionDecoder#onSettingsRead processes the settings, and then sends a SETTINGS ACK to the remote peer. Processing the settings may result in frames which violate the previous settings being send to the remote peer. The remote peer will not apply the new settings until it has received the SETTINGS ACK, and therefore we may violate the settings from the remote peer's perspective and the connection will be shutdown.
    
    Modifications:
    - We should send the SETTINGS ACK before we process the settings to ensure the peer receives the SETTINGS ACK before other frames which assume the settings have already been applied
    
    Result:
    Fixes https://github.com/netty/netty/issues/6520.

commit e8673632a6f0478a342746bb0f5ec23fd12d9ba4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Mar 9 10:29:46 2017 +0100

    Update to netty-tcnative 2.0.0.Final

commit 9ade81ab5b56fcd0574688dd899dc7c07685caf7
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Mar 7 10:37:35 2017 +0100

    Use system property to detect if root is running the program
    
    Motivation:
    
    We forked a new process to detect if the program is run by root. We should better just use user.name system property
    
    Modifications:
    
    - Change PlatformDependent.isRoot0() to read the user.name system property to detect if root runs the program and rename it to maybeSuperUser0().
    - Rename PlatformDependent.isRoot() to maybeSuperUser() and let it init directly in the static block
    
    Result:
    
    Less heavy way to detect if the program is run by root.

commit c6a3cae269f9305be7de088fe89500bb1137a2fe
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Mar 8 21:04:45 2017 +0100

    UnorderedThreadPoolEventExecutor consumes 100% CPU when idle
    
    Motivation:
    
    When UnorderedThreadPoolEventExecutor.execute / submit etc is called it will consume up to 100 % CPU even after the task was executed.
    
    Modifications:
    
    Add a special wrapper which we will be used in execute(...) to wrap the submitted Runnable. This is needed as  ScheduledThreadPoolExecutor.execute(...) will delegate to submit(...) which will then use decorateTask(...). The problem with this is that decorateTask(...) needs to ensure we only do our own decoration if we not call from execute(...) as otherwise we may end up creating an endless loop because DefaultPromise will call  EventExecutor.execute(...) when notify the listeners of the promise.
    
    Result:
    
    Fixes [#6507].

commit cfebaa36c0923458e4c5ef870a1e6a912db05a80
Author: Johno Crawford <johno@sulake.com>
Date:   Tue Mar 7 23:31:05 2017 +0100

    Support for handling SSL and non-SSL in pipeline
    
    Motivation:
    
    Some pipelines require support for both SSL and non-SSL messaging.
    
    Modifications:
    
    Add utility decoder to support both SSL and non-SSL handlers based on the initial message.
    
    Result:
    
    Less boilerplate code to write for developers.

commit a94b23df7d367ecb57ed89a9e882e2f47df59306
Author: Fabian Lange <lange.fabian@gmail.com>
Date:   Wed Mar 8 19:55:15 2017 +0100

    Support SSL_ prefixed cipher suites in addition to TLS_ prefixed ones.
    
    Motivation:
    Http2SecurityUtil currently lists HTTP/2 ciphers as documented by
    JSSE docs [1] and the IANA [2] using the TLS_ prefix.
    In some IBM J9 implementations the SSL_ prefix is used, which is also
    covered by the JSSE.
    
    [1] http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html
    [2] http://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml
    
    Modifications:
    Add both variants of the cipher names (prefixed with SSL_ in additon to TLS_)
    
    Result:
    HTTP/2 connections can now be created using the SslProvider.JDK on IBM J9
    and potentially other JVMs which use the SSL_ prefix.

commit 2993760e9261f046db88a0e8ccf9edf4e9b0acad
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Thu Mar 9 00:16:06 2017 +0500

    Fix misordered 'assertEquals' arguments in tests
    
    Motivation:
    
    Wrong argument order in some 'assertEquals' applying.
    
    Modifications:
    
    Flip compared arguments.
    
    Result:
    
    Correct `assertEquals` usage.

commit f49bf4b201389bbeeb61991981945adcbe38db3c
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Wed Mar 8 22:03:23 2017 +0500

    Convert fields to the local variable when possible
    
    Motivation:
    
    Some classes have fields which can be local.
    
    Modifications:
    
    Convert fields to the local variable when possible.
    
    Result:
    
    Clean up. More chances for young generation or scalar replacement.

commit 10d9f82f1467f9637898e221db12d7600f0381b9
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Mar 8 12:55:31 2017 -0800

    Remove duplicate call to SSLContext.setVerify from ReferenceCountedOpenSslServerContext
    
    Motivation:
    5e649850898889a8d2f1e526db610a8fca19c1ff introduced support for the KeyManagerFactory while using OpenSSL. This same commit also introduced 2 calls to SSLContext.setVerify when 1 should be sufficient.
    
    Modifications:
    - Remove the duplicate call to SSLContext.setVerify
    
    Result:
    Less duplicate code in ReferenceCountedOpenSslServerContext.

commit 3ad3356892e841b5e2cd7f6e87882fdf3fa2e68d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Mar 2 08:50:47 2017 +0100

    Expose ByteBufAllocator metric in a more general way
    
    Motivation:
    
    PR [#6460] added a way to access the used memory of an allocator. The used naming was not very good and how things were exposed are not consistent.
    
    Modifications:
    
    - Add a new ByteBufAllocatorMetric and ByteBufAllocatorMetricProvider interface
    - Let the ByteBufAllocator implementations implement ByteBufAllocatorMetricProvider
    - Move exposed stats / metric from PooledByteBufAllocator to PooledByteBufAllocatorMetric and mark old methods as `@Deprecated`.
    
    Result:
    
    More consistent way to expose metric / stats for ByteBufAllocator

commit 8b21cd9e356850b4cb8dee3083d64b6e7dd1894e
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Mar 8 09:20:54 2017 -0800

    PlatformDependent0 should enforce array index scale for byte[] explicitly
    
    Motivation:
    PlatformDependent0 makes assumptions that the array index scale for byte[] is always 1. If this is not the case the results from methods which make this assumption will be undefined.
    
    Modifications:
    - PlatformDependent0 should check if unsafe.arrayIndexScale(byte[].class) is not 1, and if so not use unsafe
    
    Result:
    Assumptions made by optimizations in PlatformDependent0 which use byte[] are explicitly enforced.

commit d702c47cab3c04a03dff56a1fddd696d25f92ada
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Wed Mar 8 11:15:45 2017 +0500

    TODO for the method with typo in name

commit a2304287a170dc14031928d6d2a3374705305839
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Mar 7 19:39:31 2017 -0800

    SslContext to support TLS/SSL protocols
    
    Motivation:
    SslContext and SslContextBuilder do not support a way to specify the desired TLS protocols. This currently requires that the user extracts the SSLEngine once a context is built and manually call SSLEngine#setEnabledProtocols(String[]). Something this critical should be supported at the SslContext level.
    
    Modifications:
    - SslContextBuilder should accept a list of protocols to configure for each SslEngine
    
    Result:
    SslContext consistently sets the supported TLS/SSL protocols.

commit e18c85b7685f19851189e653b370bfd3cef0cf79
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Mar 7 20:32:31 2017 -0800

    Add missing methods to Http2ConnectionHandlerBuilder
    
    Motivation:
    A previous commit added methods to AbstractHttp2ConnectionHandlerBuilder but forgot to expose them in Http2ConnectionHandlerBuilder.
    
    Modifications:
    - expose the new methods in Http2ConnectionHandlerBuilder
    
    Result:
    Http2ConnectionHandlerBuilder supports the new configuration options.

commit 1e5d33f8d507fc4700d3e3fd2ea534f46c5ab531
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Mar 7 10:49:22 2017 +0100

    Remove unused code
    
    Motivation:
    
    Cleanup PlatformDependent* and remove unused code.
    
    Modifications:
    
    Code cleanup
    
    Result:
    
    Removed unused code

commit 5963279e58c021e8190c2f4da2d78a4ba0e5d58f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Mar 7 10:47:19 2017 +0100

    Remove reference to akka code and ArrayDeque which is not part of netty anymore
    
    Motivation:
    
    We not ship any forked code of akka and ArrayDeque anymore.
    
    Modifications:
    
    Remove reference from NOTICE.txt and license folder.
    
    Result:
    
    Correctly document license related things.

commit a9d7c72cde9d522161e7275df6490a8b9765d57f
Author: ulinnuha <md.ulinnuha@gmail.com>
Date:   Sun Mar 5 21:17:33 2017 +0100

    Update links from code.google.com to github.com
    
    Motivation:
    
    This pull request does not solve any problem but we find that several links in the code refer to project websites under the domain of http://code.google.com which are either moved to github or not maintained anymore.
    
    Modification:
    
    Update the project links from code.google.com to the relevant project in github.com

commit 6bb661302f45173a381c0cab5be7b64710d188f8
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Mar 6 13:43:47 2017 -0800

    OpenSsl tests incomplete check for supporting key manager
    
    Motivaiton:
    It is possible that if the OpenSSL library supports the interfaces required to use the KeyManagerFactory, but we fail to get the io.netty.handler.ssl.openssl.useKeyManagerFactory system property (or this property is set to false) that SSLEngineTest based unit tests which use a KeyManagerFactory will fail.
    
    Modifications:
    - We should check if the OpenSSL library supports the KeyManagerFactory interfaces and if the system property allows them to be used in OpenSslEngineTests
    
    Result:
    Unit tests which use OpenSSL and KeyManagerFactory will be skipped instead of failing.

commit 3861b7de2bd1c1e845ba11f80c73c2e1c466c009
Author: Jason Brown <jasedbrown@gmail.com>
Date:   Mon Mar 6 10:17:03 2017 -0800

    Motivation:
    
    Make the FileRegion comments about which transports are supported more accurate.
    Also, eleminate any outstanding references to FileRegion.transfered as the method was renamed for spelling.
    
    Modifications:
    
    Class-level comment on FileRegion, can call renamed method.
    
    Result:
    
    More accurate documentation and less calls to deprecated methods.

commit 743d2d374cf4578cce4fbdaf54c73947a9c8c06e
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Feb 25 19:12:54 2017 -0800

    SslHandler benchmark and SslEngine multiple packets benchmark
    
    Motivation:
    We currently don't have a benchmark which includes SslHandler. The SslEngine benchmarks also always include a single TLS packet when encoding/decoding. In practice when reading data from the network there may be multiple TLS packets present and we should expand the benchmarks to understand this use case.
    
    Modifications:
    - SslEngine benchmarks should include wrapping/unwrapping of multiple TLS packets
    - Introduce SslHandler benchmarks which can also account for wrapping/unwrapping of multiple TLS packets
    
    Result:
    SslHandler and SslEngine benchmarks are more comprehensive.

commit 53fc69390130f7a5a33d454a59ad214f6b4176f5
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Mar 3 09:22:26 2017 -0800

    SslHandler and OpenSslEngine miscalculation of wrap destination buffer size
    
    Motivation:
    When we do a wrap operation we calculate the maximum size of the destination buffer ahead of time, and return a BUFFER_OVERFLOW exception if the destination buffer is not big enough. However if there is a CompositeByteBuf the wrap operation may consist of multiple ByteBuffers and each incurs its own overhead during the encryption. We currently don't account for the overhead required for encryption if there are multiple ByteBuffers and we assume the overhead will only apply once to the entire input size. If there is not enough room to write an entire encrypted packed into the BIO SSL_write will return -1 despite having actually written content to the BIO. We then attempt to retry the write with a bigger buffer, but because SSL_write is stateful the remaining bytes from the previous operation are put into the BIO. This results in sending the second half of the encrypted data being sent to the peer which is not of proper format and the peer will be confused and ultimately not get the expected data (which may result in a fatal error). In this case because SSL_write returns -1 we have no way to know how many bytes were actually consumed and so the best we can do is ensure that we always allocate a destination buffer with enough space so we are guaranteed to complete the write operation synchronously.
    
    Modifications:
    - SslHandler#allocateNetBuf should take into account how many ByteBuffers will be wrapped and apply the encryption overhead for each
    - Include the TLS header length in the overhead computation
    
    Result:
    Fixes https://github.com/netty/netty/issues/6481

commit f343de8fb178103d6dd966a9e81e09f67c201aac
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Mar 3 12:22:04 2017 +0100

    Update to netty-tcnative 2.0.0.Beta7

commit 2cff91804426399ac1293ed5056b1ecb2e87981a
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Mar 2 09:09:27 2017 -0800

    Correct usages of internalNioBuffer
    
    Motivation:
    There are numerous usages of internalNioBuffer which hard code 0 for the index when the intention was to use the readerIndex().
    
    Modifications:
    - Remove hard coded 0 for the index and use readerIndex()
    
    Result:
    We are less susceptible to using the wrong index, and don't make assumptions about the ByteBufAllocator.

commit 675980c7ffbca8d05218c352bccca4ca09e57582
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Mar 2 10:28:52 2017 -0800

    Lz4FrameEncoder incorrect usage of internalNioBuffer
    
    Motivation:
    Lz4FrameEncoder uses internalNioBuffer but always passes in a value of 0 for the index. This should be readerIndex().
    
    Modifications:
    - change 0 to readerIndex()
    
    Result:
    More correct usage of internalNioBuffer in Lz4FrameEncoder.

commit 1f6782894a543580572611beffc52621381e822b
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Mar 2 10:38:23 2017 -0800

    OpenSslEngine wrap with heap buffer bug
    
    Motivation:
    ReferenceCountedOpenSslEngine#wrap must have a direct buffer for a destination to interact with JNI. If the user doesn't supply a direct buffer we internally allocate one to write the results of wrap into. After this operation completes we copy the contents of the direct buffer into the heap buffer and use internalNioBuffer to get the content. However we pass in the end index but the internalNioBuffer expects a length.
    
    Modifications:
    - pass the length instead of end index to internalNioBuffer
    
    Result:
    ReferenceCountedOpenSslEngine#wrap will copy the correct amount of data into the destination buffer when heap buffers are wrapped.

commit f9001b9fc07a71a9d6eaf0462470416780302107
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Mar 1 21:30:55 2017 -0800

    HTTP/2 move internal HPACK classes to the http2 package
    
    Motivation:
    The internal.hpack classes are no longer exposed in our public APIs and can be made package private in the http2 package.
    
    Modifications:
    - Make the hpack classes package private in the http2 package
    
    Result:
    Less APIs exposed as public.

commit 7e7e10fb1e32d67254c925fea68eba7a683516b9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Mar 2 08:02:11 2017 +0100

    Correct SslContextBuilder javadocs
    
    Motivation:
    
    SslContextBuilder sill state the KeyManagerFactory and TrustManagerFactory are only supported when SslProvider.JDK is used. This is not correct anymore.
    
    Modifications:
    
    Fix javadocs.
    
    Result:
    
    Correct javadocs.

commit 52aecabe43333655b65f854576bf3ec49d0d24df
Author: Christopher Exell <cexell@twitter.com>
Date:   Wed Mar 1 11:00:54 2017 -0800

    Allow GOAWAY to be sent from handlers after the Http2MultiplexCodec so that app developers can shed load by issuing GOAWAY

commit 2902ca122a57d1540a639382f202dc2a09f07069
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Mar 1 21:06:56 2017 +0100

    Remove annotation from package-info.java as IDEA not like it, cleanup of 4734ef61a57b15df3e313b071956218fde98da2c

commit 1392bc351f9b20277a62e273c270f2a4b455927d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Mar 1 20:05:00 2017 +0100

    Correctly build socketaddress string, followup of 8b2badf44f9b43a4ff247ada81f93e486ea9dfbf

commit 0514b0c61be19119b420fa661123990acbdd8305
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 27 17:56:42 2017 +0100

    Only add port to HOST header value if needed
    
    Motivation:
    
    We only need to add the port to the HOST header value if its not a standard port.
    
    Modifications:
    
    - Only add port if needed.
    - Fix parsing of ipv6 address which is enclosed by [].
    
    Result:
    
    Fixes [#6426].

commit 461f9a121245ef625108c4eaa723b7153462c90f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Feb 24 20:06:17 2017 +0100

    Allow to obtain informations of used direct and heap memory for ByteBufAllocator implementations
    
    Motivation:
    
    Often its useful for the user to be able to get some stats about the memory allocated via an allocator.
    
    Modifications:
    
    - Allow to obtain the used heap and direct memory for an allocator
    - Add test case
    
    Result:
    
    Fixes [#6341]

commit 93f5f62a20cc4842d76c580db8da9a2040716a10
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Mar 1 04:00:35 2017 -0800

    Cleanup EPOLL native exceptions
    
    Motivation:
    Exceptions generated from transport-native-epoll may include duplicate error string description or inconsistent usage of the method name in the string description.
    
    Modifications:
    - Ensure the method name from static exceptions and dynamic exceptions is of the same format
    - Remove duplicate string rational from the exception messages
    
    Result:
    More consistent error messages with no duplicate error description.

commit df6796153b2ac25448189de1b432a39a9c0d16e0
Author: Johno Crawford <johno@sulake.com>
Date:   Sun Feb 19 11:41:55 2017 +0100

    Add a 'bill of materials' project for Maven users
    
    Motivation:
    
    Projects may import multiple libraries which use different versions of Netty.
    
    Modifications:
    
    Add 'netty-bom' meta-project that contains the other projects in a dependencyManagement section.
    
    Result:
    
    Developers can import the BOM to enforce specific version of Netty.

commit d1b02257248adc250cc3ac61cb5efd179675519b
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Mon Feb 27 18:40:02 2017 +0200

    Improvement : WebSocketServerProtocolHandshakeHandler.getWebSocketLocation now applies concat optimization and WebSocket path check moved to separated method.
    
    Motivation:
    
    Make code easier to read, make WebSocketServerProtocolHandshakeHandler.getWebSocketLocation method faster.
    
    Modification:
    
    WebSocket path check moved to separate method. Get header operation moved out from concat operation.
    
    Result:
    
    WebSocketServerProtocolHandshakeHandler.getWebSocketLocation is faster as OptimizeStringConcat could be applied. Code easier to read.

commit 79e24d1a174e4ef1ecc542bb584600fee9977f02
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Tue Feb 28 17:10:44 2017 +0100

    Add javadoc warning on SslContext#newHandler client-side
    
    Motivation:
    
    SslContext#newHandler currently creates underlying SSLEngine without
    enabling HTTPS endpointIdentificationAlgorithm. This behavior in
    unsecured when used on the client side.
    
    We can’t harden the behavior for now, as it would break existing
    behavior, for example tests using self signed certificates.
    
    Proper hardening will happen in a future major version when we can
    break behavior.
    
    Modifications:
    
    Add javadoc warnings with code snippets.
    
    Result:
    
    Existing unsafe behavior and workaround documented.

commit d675febf07d14d4dff82471829f974369705655a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 27 10:49:40 2017 +0100

    Optimize / Cleanup QueryStringDecoder / QueryStringEncoder
    
    Motivation:
    
    QueryStringDecoder and QueryStringEncoder contained some code that could either cleaned-up or optimized.
    
    Modifications:
    
    - Fix typos in exception messages and javadocs
    - Precompile Pattern
    - Make use of StringUtil.EMPTY_STRING
    
    Result:
    
    Faster and cleaner code.

commit ca2c349a4a95f79e1f8b5315bf7e7617386f266e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 23 20:44:11 2017 +0100

    Correctly have exceptions thrown from decode(...) method be wrapped with DecodingException
    
    Motivation:
    
    Normally if a decoder produces an exception its wrapped with DecodingException. This is not the cause for NotSslRecordException in SslHandler and SniHandler.
    
    Modifications:
    
    Just throw the NotSslRecordException exception for decode(...) and so ensure its correctly wrapped in a DecodingException before its passed through the pipeline.
    
    Result:
    
    Consist behavior.

commit a7fe6c01539d3ad92d7cd94a25daff9e10851088
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 27 21:09:07 2017 +0100

    Metrics exposed by PooledByteBufAllocator needs to be correctly synchronized
    
    Motivation:
    
    As we may access the metrics exposed of PooledByteBufAllocator from another thread then the allocations happen we need to ensure we synchronize on the PoolArena to ensure correct visibility.
    
    Modifications:
    
    Synchronize on the PoolArena to ensure correct visibility.
    
    Result:
    
    Fix multi-thread issues on the metrics

commit 4734ef61a57b15df3e313b071956218fde98da2c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Feb 28 14:29:00 2017 +0100

    Mark transport udt as deprecated as barchart-udt is not maintained anymore
    
    Motivation:
    
    barchart-udt is not maintained anymore so there is not way for us to get fixes for udt. Because of this we should mark the transport as deprecated.
    
    Modifications:
    
    Deprecate all udt classes.
    
    Result:
    
    transport udt is deprecated and so the user knows it will be removed in the future.

commit 70bcb408555b38c58fac236efddc082710686f93
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Feb 27 19:33:05 2017 -0800

    OpenSslEngine may use networkBIO after calling shutdown
    
    Motivation:
    To ensure that all bytes queued in OpenSSL/tcnative internal buffers we invoke SSL_shutdown again to stimulate OpenSSL to write any pending bytes. If this call fails we may call SSL_free and the associated shutdown method to free resources. At this time we may attempt to use the networkBIO which has already been freed and get a NPE.
    
    Modifications:
    - Don't call bioLengthByteBuffer(networkBIO) if we have called shutdown() in ReferenceCountedOpenSslEngine
    
    Result:
    Fixes https://github.com/netty/netty/issues/6466

commit 90a61046c7be6515d52577397cebb06a713f58e0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Feb 24 13:35:37 2017 +0100

    Add benchmarks for UnpooledUnsafeNoCleanerDirectByteBuf vs UnpooledUnsafeDirectByteBuf
    
    Motivation:
    
    Issue [#6349] brought up the idea to not use UnpooledUnsafeNoCleanerDirectByteBuf by default. To decide what to do a benchmark is needed.
    
    Modifications:
    
    Add benchmarks for UnpooledUnsafeNoCleanerDirectByteBuf vs UnpooledUnsafeDirectB
    yteBuf
    
    Result:
    
    Better idea about impact of using UnpooledUnsafeNoCleanerDirectByteBuf.

commit c0cd3db5b12d87d76f8c3372c5b1026a6fd3a4da
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Sat Feb 25 23:19:31 2017 +0500

    Fix class references of its subclass issue
    
    Motivation:
    
    Realization of `AbstractTrafficShapingHandler.userDefinedWritabilityIndex()` has references to subclasses.
    In addition, one of the subclasses overriding it, but the other does not.
    
    Modifications:
    
    Add overriding to the second subclass. Remove references to subclasses from parent class.
    
    Result:
    
    More consistent and clean code (OOP-stylish).

commit 22ccf6c7b1d4e4bbd674be3bc79d5e0e545e72ba
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Feb 24 08:33:39 2017 +0100

    Fix test-failures introduced 325cc84a2ebbf4f5e362ec9ca09202b4647bd100 on Java7
    
    Motivation:
    
    325cc84a2ebbf4f5e362ec9ca09202b4647bd100 introduced new tests which uses classes only provided by Java8+. We need to ensure we only try to load classes needed for these when we run the tests on Java8+ so we still can run the testsuite with Java7.
    
    Modifications:
    
    Add extra class which only gets loaded when Java8+ is used and move code there.
    
    Result:
    
    No more class-loader issue when running tests with Java7.

commit d73477c7bd1fe7665a382a90796efba87c95dd18
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 2 20:01:42 2017 +0100

    Add benchmarks for SSLEngine implementations
    
    Motivation:
    
    As we provide our own SSLEngine implementation we should have benchmarks to compare it against JDK impl.
    
    Modifications:
    
    Add benchmarks for wrap / unwrap and handshake performance.
    
    Result:
    
    Benchmarks FTW.

commit 7aff6b0330694d17c4fb7e887f28ec7b36db9a9d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 23 20:57:47 2017 +0100

    Increase timeouts in Http2ConnectionRoundtripTest
    
    Motivation:
    
    The timeouts used in the Http2ConnectionRoundtripTest seems to be too low when leak-detection is enabled so we sometimes get failed tests due timeout.
    
    Modifications:
    
    Increase timeouts.
    
    Result:
    
    Fixes [#6442].

commit 4f78bae2eb756ccd95e879c9d049ba56046ab90e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Feb 22 08:44:04 2017 +0100

    DatagramPacketEncoder|Decoder should take into account if wrapped handler is sharable
    
    Motivation:
    
    DatagramPacketEncoder|Decoder should respect if the wrapped handler is sharable or not and depending on that be sharable or not.
    
    Modifications:
    
    - Delegate isSharable() to wrapped handler
    - Add test-cases
    
    Result:
    
    Correct behavior

commit 325cc84a2ebbf4f5e362ec9ca09202b4647bd100
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 23 09:42:00 2017 +0100

    Throw if SSLParameters contains settings that are not supported by ReferenceCountedOpenSslEngine
    
    Motivation:
    
    We not support all SSLParameters settings so we should better throw if a user try to use them.
    
    Modifications:
    
    - Check for unsupported parameters
    - Add unit test
    
    Result:
    
    Less surprising behavior.

commit a80d3411ee1ec76be81a8c1c982968f252f67b0e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 23 15:23:34 2017 +0100

    Move all the microbenchmark code into one directory.
    
    Motivation:
    
    Allmost all our benchmarks are in src/main/java but a few are in src/test/java. We should make it consistent.
    
    Modifications:
    
    Move everything to src/main/java
    
    Result:
    
    Consistent code base.

commit deb90923a2f4f5a766597ec241f62a94a25d837e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 23 10:58:19 2017 +0100

    Ensure PooledByteBuf.initUnpooled(...) correctly set the allocator
    
    Motivation:
    
    Commit 8dda984afe9477fa09fe166305381d9ed1afa7c4 introduced a regression which lead to the situation that the allocator is not set when PooledByteBuf.initUnpooled(...) is called. Thus it was possible that PooledByteBuf.alloc() returns null or the wrong allocator if multiple PooledByteBufAllocator are used in an application.
    
    Modifications:
    
    - Correctly set the allocator
    - Add test-case
    
    Result:
    
    Fixes [#6436].

commit 943f4ec7ff6c5753fb79c76cabc043f5e4cdcd32
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Wed Feb 22 23:24:24 2017 +0500

    Make methods 'static' where it missed
    
    Motivation:
    
    Calling a static method is faster then dynamic
    
    Modifications:
    
    Add 'static' keyword for methods where it missed
    
    Result:
    
    A bit faster method calls

commit 7d08b4fc357e12ee2487e87d8fdcbeee1152e5a0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Feb 21 20:33:11 2017 +0100

    Remove optional dependency on javassist
    
    Motivation:
    
    We shipped a javassist based implementation for typematching and logged a confusing debug message about missing javassist. We never were able to prove it really gives any perf improvements so we should just remove it.
    
    Modifications:
    
    - Remove javassist dependency and impl
    - Fix possible classloader deadlock as reported by intellij
    
    Result:
    
    Less code to maintain and less confusing log message.

commit 77e65fe6bb2141151b4d5b4e3d477092be7ee9bf
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Feb 22 09:43:31 2017 -0800

    Base64 reduce byte manipulation operations
    
    Motivation:
    Base64#decode4to3 generally calculates an int value where the contents of the decodabet straddle bytes, and then uses a byte shifting or a full byte swapping operation to get the resulting contents. We can directly calculate the contents and avoid any intermediate int values and full byte swap operations. This will reduce the number of operations required during the decode operation.
    
    Modifications:
    - remove the intermediate int in the Base64#decond4to3 method.
    - manually do the byte shifting since we are already doing bit/byte manipulations here anyways.
    
    Result:
    Base64#decode4to3 requires less operations to compute the end result.

commit 7feb92959e80628d47f8e61b0d171d7d837c22f3
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Feb 17 14:35:39 2017 +0100

    Improve performance of Base64.decode and encode methods.
    
    Motivation:
    
    The decode and encode method uses getByte(...) and setByte(...) in loops which can be very expensive because of bounds / reference-count checking. Beside this it also slows-down a lot when paranoid leak-detection is enabled as it will track each access.
    
    Modifications:
    
    - Pack bytes into int / short and so reduce operations on the ByteBuf
    - Use ByteProcessor to reduce getByte calls.
    
    Result:
    
    Better performance in general. Also when you run the build with -Pleak the handler module will build in 1/4 of the time it took before.

commit 0623c6c5334bf43299e835cfcf86bfda19e2d4ce
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Wed Feb 22 01:27:23 2017 +0500

    Fix javadoc issues
    
    Motivation:
    
    Invalid javadoc in project
    
    Modifications:
    
    Fix it
    
    Result:
    
    More correct javadoc

commit 634a8afa533ca0efcc49242681cde581339962dc
Author: Nikolay Fedorovskikh <fenik17@gmail.com>
Date:   Tue Feb 21 23:56:57 2017 +0500

    Fix some warnings at generics usage
    
    Motivation:
    
    Existing warnings from java compiler
    
    Modifications:
    
    Add/fix type parameters
    
    Result:
    
    Less warnings

commit ce222308a6d0e3df009dbcce3288b2aff0834992
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Feb 21 13:42:28 2017 +0100

    Update to netty-tcnative 2.0.0.Beta6
    
    Motivation:
    
    New version of netty-tcnative was released.
    
    Modifications:
    
    Bump up version number
    
    Result:
    
    Using latest netty-tcnative

commit 2a72c876734abfdfa1fe12041b7d3f0e808cc4ab
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 20 14:06:48 2017 +0100

    Move AutobahnTestsuite to extra module
    
    Motivation:
    We should move the AutobahnTestsuite to an extra module. This allows easier to run only the testsuite or only the autobahntestsuite
    
    Modifications:
    
    Create a new module (testsuite-autobahn)
    
    Result:
    
    Better project structure.

commit e148b53c67b482544be0cc4ce540ed1dfe3d7383
Author: chhsiao90 <chhsiao90@gmail.com>
Date:   Sat Feb 18 16:39:11 2017 +0800

    Add unit test for DefaultHttp2FrameWriter
    
    Motivation:
    
    DefaultHttp2FrameWriter contains important logic for how http2
    frame encode into binary, currently, netty had no unit test
    just for DefaultHttp2FrameWriter.
    
    Modifications:
    
    Write DefaultHttp2FrameWriterTest to test DefaultHttp2FrameWriter
    
    Result:
    
    The coverage of DefaultHttp2FrameWriter is increased, and the
    class was more reliable

commit b1436e80ef2b39049c0fcb1a963b6541bac7a5a9
Author: chhsiao90 <chhsiao90@gmail.com>
Date:   Sat Feb 18 13:14:54 2017 +0800

    Cleanup DefaultHttp2FrameReader about verifyUnknownFrame
    
    Motivation:
    
    In previous PR about handling unknwon frame in the middle of header
    block, I didn't notice and re-use about checking is processing header
    . And I added a redundant method for same functionality.
    I think that the redundant method would lead to some misleading
    situation.
    
    Modifications:
    
    Removed redundant code on DefaultHttp2FrameReader
    
    Result:
    
    The code is more readable

commit e08a3b1f3570c930592540e6391bb52f2f2da7f2
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Feb 20 21:38:04 2017 -0800

    Fix SSLException check for JDK work around missed by 2dffc2f9fb89966e4a7d227e52a8d937ef0875b0

commit 08e0c612cf1670a263c5a0c3198b27213c55fd78
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Feb 20 11:16:56 2017 -0800

    HTTP/2 Unit Test LocalChannel Leaks
    
    Motivation:
    Some unit HTTP/2 unit tests use LocalChannel. LocalChannel's doClose method will ensure any pending items in the queue will be released, but it may execute a Runnable on the peer's EventLoop to ensure the peer's queue is also cleaned up. The HTTP/2 unit tests close the event loop groups with no wait time so that unit tests will execute quickly, but if the doClose Runnable is in the EventLoop's queue it will not run and thus the items in the queue will not be released.
    
    Modifications:
    - Ensure all HTTP/2 unit tests which use LocalChannel wait for both client and server channels to be closed before closing the EventLoop.
    
    Result:
    Related to https://github.com/netty/netty/issues/5850.

commit 2dffc2f9fb89966e4a7d227e52a8d937ef0875b0
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Feb 20 10:14:38 2017 -0800

    SSLEngineTest issue introduced by d8e6fbb9c3656663f41797a15f38bb25fdcab834
    
    Motivation:
    d8e6fbb9c3656663f41797a15f38bb25fdcab834 attempted to account for the JDK not throwing the expected SSLHandshakeException by allowing a SSLException to also pass the test. However in some situations the SSLException will not be the top level exception and the Throwable must be unwrapped to see if the root cause is an SSLException.
    
    Modifications:
    - Unwrap exceptions thrown by the JDK's SSLEngine to check for SSLException.
    
    Result:
    SSLEngineTest (and derived classes) are more reliable.

commit 576baf8e6c2cfaebdbb2c85022d57e3d0dcc74ff
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 20 08:18:27 2017 +0100

    Update to autobahntestsuite-maven-plugin 0.1.4 to support Java9
    
    Motivation:
    
    autobahntestsuite-maven-plugin 0.1.4 was released and supports Java9.
    
    Modifications:
    
    Update plugin to be able to run tests on Java9
    
    Result:
    
    Autobahntestsuite can also be run on Java9.

commit c57a1bdb2d4471af543399f46d344802986c6cd9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Feb 19 13:34:15 2017 +0100

    Log used native library by netty-tcnative
    
    Motivation:
    
    As netty-tcnative can be build against different native libraries and versions we should log the used one.
    
    Modifications:
    
    Log the used native library after netty-tcnative was loaded.
    
    Result:
    
    Easier to understand what native SSL library was used.

commit 007e8969c1ed652169e37b1039f3c5f87baac3f1
Author: Johno Crawford <johno@sulake.com>
Date:   Mon Feb 20 10:49:15 2017 +0100

    Missing release modules in netty-all project
    
    Motivation:
    
    codec-redis and codec-xml are release modules and should be included in netty-all.
    
    Modifications:
    
    Add codec-redis and codec-xml modules to netty-all pom.
    
    Result:
    
    codec-redis and codec-xml can be used with the netty-all artifact.

commit d0a3877535814153306f8f934e2120204cd22fd7
Author: Hanson <huangsheng.hs@alibaba-inc.com>
Date:   Tue Nov 22 11:43:26 2016 +0800

    Ensure trying to recover from exceptionCaught on the ServerChannel works as expected
    
    Motivation:
    
    When "Too many open files" happens,the URLClassLoader cannot do any classloading because URLClassLoader need a FD  for findClass. Because of this the anonymous inner class that is created to re-enable auto read may cause a problem.
    
    Modification:
    
    Pre-create Runnable that is scheduled and so ensure it is not lazy loaded.
    
    Result:
    
    No more problems when try to recover.

commit ad51cda2cd96400ef07a3b0107baba3b13b473a4
Author: andsel <selva.andre@gmail.com>
Date:   Fri Feb 17 21:48:58 2017 +0100

    Introduced MqttMessageBuilders to fluently create MQTT messages

commit d8e6fbb9c3656663f41797a15f38bb25fdcab834
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Feb 16 20:25:25 2017 -0800

    OpenSslEngine should respect hostname verification
    
    Motivation:
    OpenSSL doesn't automatically verify hostnames and requires extract method calls to enable this feature [1]. We should allow this to be configured.
    
    Modifications:
    - SSLParamaters#getEndpointIdentificationAlgorithm() should be respected and configured via tcnative interfaces.
    
    Result:
    OpenSslEngine respects hostname verification.
    
    [1] https://wiki.openssl.org/index.php/Hostname_validation

commit 67be7c5b9f5920d5f99d40e8b483df112e103ba8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 16 20:23:28 2017 +0100

    Log why it was not possible to use ByteBuffer.cleaner
    
    Motivation:
    
    We should log why we can not use ByteBuffer.cleaner and so maybe allow the user to fix it.
    
    Modifications:
    
    - Use Unsafe to access the field
    - Log the exception when we can not use ByteBuffer.cleaner
    
    Result:
    
    Easier to debug why using cleaner is not possible.

commit 5de4029b43cbd6ab257480066d655008a573371c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Feb 16 22:28:56 2017 -0800

    Checkstyle fix from 56694eb

commit 56694ebc0f3f9711d9a5e29e8763b3bf87902718
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Feb 16 15:56:21 2017 -0800

    Cleanup from fbf0e5f4ddad88a9d593cfb357c5f466c72ae977
    
    Motivation:
    ThreadLocalInsecureRandom still referenced ThreadLocalRandom directly, but shouldn't.
    
    Modifications:
    ThreadLocalInsecureRandom should reference PlatformDependent#threadLocalRandom() in comments
    
    Result:
    Less usage of internal.ThreadLocalRandom.

commit fbf0e5f4ddad88a9d593cfb357c5f466c72ae977
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Feb 15 08:12:40 2017 +0100

    Prefer JDK ThreadLocalRandom implementation over ours.
    
    Motivation:
    
    We have our own ThreadLocalRandom implementation to support older JDKs . That said we should prefer the JDK provided when running on JDK >= 7
    
    Modification:
    
    Using ThreadLocalRandom implementation of the JDK when possible.
    
    Result:
    
    Make use of JDK implementations when possible.

commit 38496a23da6eba10f719c68678cae35f8ac1c75c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 16 20:54:18 2017 +0100

    Update to netty-tcnative 2.0.0.Beta4

commit 795f318c3c11ec0520e7acd963ad4b310c287c20
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Nov 23 13:50:42 2016 -0800

    Use a single array in SelectedSelectionKeySet
    
    Motivation:
    SelectedSelectionKeySet currently uses 2 arrays internally and users are expected to call flip() to access the underlying array and switch the active array. However we do not concurrently use 2 arrays at the same time and we can get away with using a single array if we are careful about when we reset the elements of the array.
    
    Modifications:
    - Introduce SelectedSelectionKeySetSelector which wraps a Selector and ensures we reset the underlying SelectedSelectionKeySet data structures before we select
    - The loop bounds in NioEventLoop#processSelectedKeysOptimized can be defined more precisely because we know the real size of the underlying array
    
    Result:
    Fixes https://github.com/netty/netty/issues/6058

commit 4d7d478a3dd7ef79e8d18707e573e46b3babe64e
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Feb 16 11:48:37 2017 -0800

    Update JCTools to 2.0.1

commit 6ac5f35077925ebe2d76e9e2e1eab51a8b5eb35b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 16 15:36:10 2017 +0100

    Use Unsafe to read ByteBuffer.address field to make it work on Java9 as well.
    
    Motivation:
    
    Java9 does not allow changing access level via reflection by default. This lead to the situation that netty disabled Unsafe completely as ByteBuffer.address could not be read.
    
    Modification:
    
    Use Unsafe to read the address field as this works on all Java versions.
    
    Result:
    
    Again be able to use Unsafe optimisations when using Netty with Java9

commit c5324ea48c1f1e2d4bacbf84899a67034474c4e0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 16 16:57:28 2017 +0100

    Make netty build work on Java9
    
    Motivation:
    
    We missed some stuff in 5728e0eb2cf0d2fe267d25c9f85a0a061dc7ab5f and so the build failed on java9
    
    Modifications:
    
    - Add extra cmdline args when needed
    - skip the autobahntestsuite as jython not works with java9
    - skip the osgi testsuite as the maven plugin not works with java9
    
    Result:
    
    Build finally passed on java9

commit ddd0e2f1842340eac03b2954145324712b078549
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 16 08:25:20 2017 +0100

    Enforce java8 for compilation
    
    Motivation:
    
    Commit 591293bfb4f6a48a311d195303ce772fb801ec95 changed the build to need java8 but missed to adjust the enforce rule as well.
    
    Modifications:
    
    Enforce java8+
    
    Result:
    
    Quickly fail when user tries to compile with pre java8

commit 0befcd8431dc9debc0fc78961d79116d69f4e8b1
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Feb 16 08:05:48 2017 -0800

    EpollDatagramChannel avoid getOption
    
    Motivation:
    EpollDatagramChannel uses getOption in the isActive method. getOption is backed by a relatively large conditional if/else if block and this conditional checking can be avoided in the epoll transport.
    
    Modifications:
    - Add EpollDatagramChannelConfig#getActiveOnOpen and use this in EpollDatagramChannel
    
    Result:
    Conditional checking due to getOption is removed from EpollDatagramChannel.

commit f3dd4101425165496490f9c975ca2e556773c663
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Feb 15 15:04:38 2017 -0800

    EPOLLRDHUP prematurely marking input as shutdown
    
    Motivation:
    When the EPOLLRDHUP event is received we assume that the read side of the FD is no longer functional and force the input state to be shutdown. However if the channel is still active we should rely upon EPOLLIN and read to indicate there is no more data before we update the shutdown state. If we do not do this we may not read all pending data in the FD if the RecvByteBufAllocator doesn't want to consume it all in a single read operation.
    
    Modifications:
    - AbstractEpollChannel#epollRdHupReady() shouldn't force shutdown the input if the channel is active
    
    Result:
    All data can be read even if the RecvByteBufAllocator doesn't read it all in the current read loop.
    Fixes https://github.com/netty/netty/issues/6303

commit 9ee4cc0ada3d8e46b139671dabfbfd35c8be3308
Author: Stephen E. Baker <baker.stephen.e@gmail.com>
Date:   Wed Feb 15 14:03:59 2017 -0500

    Correct comment for allowMaskMismatch parameter
    
    Motivation:
    
    The allowMaskMismatch parameter used throughout websocketx allows frames
    with noncompliant masks when set to true, not false.
    
    Modification:
    
    Changed the javadoc comment everywhere it appears.
    
    Result:
    
    Fixes #6387

commit 1843b318850ac7a3990c13b1d275e0e37491301e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Feb 15 19:43:52 2017 +0100

    Guard against having NetworkInterface.getNetworkInterfaces() return null
    
    Motivation:
    
    NetworkInterface.getNetworkInterfaces() may return null if no network interfaces are found. We should guard against it.
    
    Modifications:
    
    Check for null return value.
    
    Result:
    
    Fixes [#6384]

commit 8a3a3245df64351283714773dc23cee8322b14d3
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Feb 15 13:19:31 2017 +0100

    Ensure Unsafe buffer implementations are used when sun.misc.Unsafe is present
    
    Motivation:
    
    When sun.misc.Unsafe is present we want to use *Unsafe*ByteBuf implementations. We missed to do so in PooledByteBufAllocator when the heapArena is null.
    
    Modifications:
    
    - Correctly use UnpooledUnsafeHeapByteBuf
    - Add unit tests
    
    Result:
    
    Use most optimal ByteBuf implementation.

commit b2f7e8648eaa1c18ef6fb7c1d60c6bf1fe77a627
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Feb 15 09:15:07 2017 +0100

    Fix ReferenceCountedOpenSslEngine.getEnabledProtocols() when using boringssl
    
    Motivation:
    
    Commit cd3bf3df58c3ab4462578284e7378571603a1721 made netty observe the latest version of netty-tcnative which changed the way how static fields are computed for various SSL.* values. This lead to have SSL_OP_NO_SSLv2 become 0 when using boringssl as boringssl not supports SSLv2 at all. In the logic of ReferenceCountedOpenSslEngine.getEnabledProtocols() we not expect to have a zero value and so our logic fails.
    
    Modifications:
    
    Check we actual support the protocol before return it as enabled.
    
    Result:
    
    SSLEngineTest.testEnablingAnAlreadyDisabledSslProtocol passes again with boringssl

commit 4431ad894dab3848ec2f80d1da16fad2cc253ad7
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Feb 14 19:22:13 2017 -0800

    OpenSslEngine may lose data if the non-application buffer is small/full
    
    Motivation:
    If an event occurs which generates non-application data (shutdown, handshake failure, alert generation, etc...) and the non-application buffer in the ByteBuffer BIO is full (or sufficiently small) we may not propagate all data to our peer before tearing down the socket.
    
    Modifications:
    - when wrap() detects the outbound is closed, but there is more data pending in the non-application buffers, we must also check if OpenSSL will generate more data from calling SSL_shutdown again
    - when wrap() detects a handshakeExcpetion during failure we should check if OpenSSL has any pending data (in addition to the non-application buff) before throwing the handshake exception
    
    Result:
    OpenSslEngine more reliably transmits data to the peer before closing the socket.

commit 544d771152a128d24a3bad77c68f00a31adc112c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Feb 15 12:03:11 2017 -0800

    Checkstyle cleanup from d59b4840c15d80f34a208aa090054c2e363b4426

commit d59b4840c15d80f34a208aa090054c2e363b4426
Author: Jason Tedor <jason@tedor.me>
Date:   Tue Feb 14 21:26:11 2017 -0500

    Cleanup ChannelId handling of basic methods
    
    Motiviation:
    
    Simplify implementation of compareTo/equals/hashCode for ChannelIds.
    
    Modifications:
    
    We simplfy the hashCode implementation for DefaultChannelId by not
    making it random, but making it based on the underlying data. We fix the
    compareTo implementation for DefaultChannelId by using lexicographic
    comparison of the underlying data array. We fix the compareTo
    implementation for CustomChannelId to avoid the possibility of overflow.
    
    Result:
    
    Cleaner code that is easier to maintain.

commit 84188395be36893b214fcf63cea1544e35b2a654
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Feb 14 19:20:01 2017 +0100

    Remove backports of JDK8 classes
    
    Motivation:
    
    Java8 is out now for some time and JDK7 is no longer supported officially. We should remove all our backports and just use what the JDK provides us. This also will allow us to use intrinsics that are offered by the JDK implementations.
    
    Modifications:
    
    Remove all backports of jdk8 classes.
    
    Result:
    
    Use what the JDK offers us. This also fixes [#5458]

commit 847359fd36c28fa360090459d1243a9603e47786
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Feb 15 14:47:14 2017 +0100

    Fix incorrect delegate in overriden method in JdkOpenSslEngineInteroptTest
    
    Motivation:
    
    JdkOpenSslEngineInteroptTest.mySetupMutualAuthServerIsValidClientException(...) delegated to the wrong super method.
    
    Modifications:
    
    Fix delegate
    
    Result:
    
    Correct test-code.

commit 43a2315372a8d642ce4df14db2ebfd001b9538e0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Feb 15 14:34:03 2017 +0100

    Skip SSLEngineTests that depend on KeyManagerFactory when this is not supported by the openssl version.
    
    Motivation:
    
    Some version of openssl dont support the needed APIs to use a KeyManagerFactory. In this case we should skip the tests.
    
    Modifications:
    
    - Use assumeTrue(...) to skip tests that need a KeyManagerFactory and its not supported.
    
    Result:
    
    Tests pass on all openssl versions we support.

commit c92565d5c7000d2bd74355fe18cbdf98bfc5ba0d
Author: Jason Tedor <jason@tedor.me>
Date:   Tue Feb 14 12:09:52 2017 -0500

    Correct expect header handling
    
    Motivation:
    
    Today, the HTTP codec in Netty responds to HTTP/1.1 requests containing
    an "expect: 100-continue" header and a content-length that exceeds the
    max content length for the server with a 417 status (Expectation
    Failed). This is a violation of the HTTP specification. The purpose of
    this commit is to address this situation by modifying the HTTP codec to
    respond in this situation with a 413 status (Request Entity Too
    Large). Additionally, the HTTP codec ignores expectations in the expect
    header that are currently unsupported. This commit also addresses this
    situation by responding with a 417 status.
    
    Handling the expect header is tricky business as the specification (RFC
    2616) is more complicated than it needs to be. The specification defines
    the legitimate values for this header as "100-continue" and defines the
    notion of expectatation extensions. Further, the specification defines a
    417 status (Expectation Failed) and this is where implementations go
    astray. The intent of the specification was for servers to respond with
    417 status when they do not support the expectation in the expect
    header.
    
    The key sentence from the specification follows:
    
        The server MUST respond with a 417 (Expectation Failed) status if
        any of the expectations cannot be met or, if there are other
        problems with the request, some other 4xx status.
    
    That is, a server should respond with a 417 status if and only if there
    is an expectation that the server does not support (whether it be
    100-continue, or another expectation extension), and should respond with
    another 4xx status code if the expectation is supported but there is
    something else wrong with the request.
    
    Modifications:
    
    This commit modifies the HTTP codec by changing the handling for the
    expect header in the HTTP object aggregator. In particular, the codec
    will now respond with 417 status if any expectation other than
    100-continue is present in the expect header, the codec will respond
    with 413 status if the 100-continue expectation is present in the expect
    header and the content-length is larger than the max content length for
    the aggregator, and otherwise the codec will respond with 100 status.
    
    Result:
    
    The HTTP codec can now be used to correctly reply to clients that send a
    100-continue expectation with a content-length that is too large for the
    server with a 413 status, and servers that use the HTTP codec will now
    no longer ignore expectations that are not supported (any value other
    than 100-continue).

commit b7acae03f286d8374f19db067348b247d503b883
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Feb 10 16:25:47 2017 +0100

    Update tcnative package names
    
    Motivation:
    
    tcnative was moved into an internal package.
    
    Modifications:
    
    Update package for tcnative imports.
    
    Result:
    
    Use correct package names for tcnative.

commit 5728e0eb2cf0d2fe267d25c9f85a0a061dc7ab5f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Feb 14 20:54:28 2017 +0100

    Use the correct arguments when run with jdk9
    
    Motivation:
    
    We need to pass special arguments to run with jdk9 as otherwise some tests will not be able to run.
    
    Modifications:
    
    Allow to define extra arguments when running with jdk9
    
    Result:
    
    Tests pass with jdk9

commit c12908d608114856900d0f1a37dafd4cdcd6eacf
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Feb 14 19:33:22 2017 +0100

    Allow to compile and run tests with different java versions
    
    Motivation:
    
    As we now need to compile with java8 we should still allow to run the tests with a different java version to ensure everythin also works with java 7 and 6.
    
    Modifications:
    
    Allow to pass "-DtestJavaHome" to the build and so use a different java version during running the tests.
    
    Result:
    
    Be able to run tests with different java versions.

commit d60e37cb3da83af9541709284bb3532f489e0318
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Feb 14 17:24:03 2017 -0800

    OpenSslEngine wrap may not consume all data
    
    Motivation:
    If the OpenSslEngine has bytes pending in the non-application buffer and also generates wrapped data during the handshake then the handshake data will be missed. This will lead to a handshake stall and eventually timeout. This can occur if the non-application buffer becomes full due to a large certificate/hello message.
    
    Modification:
    - ReferenceCountedOpenSslEngine should not assume if no data is flushed from the non-application buffer that no data will be produced by the handshake.
    
    Result:
    New unit tests with larger certificate chains don't fail.

commit c521c72178691dc9a0fe12a726c09590ca085738
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Feb 14 17:28:11 2017 -0800

    SSLEngineTest cleanup
    
    Motivation:
    OpenSslEngineTest has unused imports and SSLEngineTest uses a fixed port which was used for debugging.
    
    Modifications:
    - Remove unused imports
    - Use ephemeral port
    
    Result:
    Cleaner test code.

commit 84ebb4c315eb741e9ddc848422cf544706811434
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Feb 14 14:49:22 2017 -0800

    Fix checkstyle issues introduced by fdcad3150efde5676a4b895236703710ae15e9e4

commit fdcad3150efde5676a4b895236703710ae15e9e4
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Feb 7 20:37:51 2017 -0800

    Use tcnative's new setVerify modes
    
    Modifications:
    tcnative made some fixes and API changes related to setVerify. We should absorb these changes in Netty.
    
    Modifications:
    - Use tcnatives updated APIs
    - Add unit tests to demonstrate correct behavior
    
    Result:
    Updated to latest tcnative code and more unit tests to verify expected behavior.

commit cd3bf3df58c3ab4462578284e7378571603a1721
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sun Feb 5 23:48:02 2017 -0800

    Consume tcnative options update
    
    Motivation:
    tcnative has updated how constants are defined and removed some constants which are either obsolete or now set directly in tcnative.
    
    Modifications:
    - update to compile against tcnative changes.
    
    Result:
    Netty compiles with tcnative options changes.

commit 591293bfb4f6a48a311d195303ce772fb801ec95
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jun 28 15:21:27 2016 +0200

    Change minimum JDK version for compilation to 1.8
    
    Motivation:
    
    We previously changed netty to always compile with java7 as otherwise source compatibility was broken.
    
    This was reported in [#3548] but was fixed in the meantime:
    - https://bugs.openjdk.java.net/browse/JDK-8029240
    - https://bugs.openjdk.java.net/browse/JDK-8030855
    
    Modifications:
    
    Change minimum JDK version for compilation to 1.8
    
    Result:
    
    Easier to maintain code.

commit 506f0d8f8c10e1b24924f7d992a726d7bdd2e486
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Mon Feb 13 23:31:09 2017 +0200

    Cleanup : String.length() == 0 replaced with String.isEmpty, removed unnecessary assert, class cast

commit 90bc60547784877366a3294e6b945a5241b7099f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 13 07:48:41 2017 +0100

    Initialization of PlatformDependent0 fails on Java 9
    
    Motivation:
    
    Initialization of PlatformDependent0 fails on Java 9 in static initializer when calling setAccessible(true).
    
    Modifications:
    
    Add RefelectionUtil which can be used to safely try if setAccessible(true) can be used or not and if not fail back to non reflection.
    
    Result:
    
    Fixed [#6345]

commit 78586a99b6c23dc7f847838aaae6be70d6d7ca9b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Feb 8 16:13:20 2017 +0100

    Ensure CombinedChannelDuplexHandler can not be shared.
    
    Motivation:
    
    CombinedChannelDuplexHandler must not be shared as it contains state.
    
    Modifications:
    
    Enforce that it is not shared.
    
    Result:
    
    Fixes [#6333]

commit fd2e142e745b8e99983d74c71a0fd3574449e188
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 13 10:44:30 2017 +0100

    Update to latest jmh version
    
    Motivation:
    
    We use an outdated jmh version.
    
    Modifications:
    
    Update to jmh 1.17.4.
    
    Result:
    
    Using latest jmh version.

commit f09a721d7fa62ca951e7bed17ba94180aaa1d8ae
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Feb 3 20:07:39 2017 +0100

    Expose the chunkSize used by PooledByteBufAllocator.
    
    Motivation:
    
    Sometimes it may be useful to know the used chunkSize.
    
    Modifications:
    
    Add method to expose chunkSize.
    
    Result:
    
    More exposed details.

commit 371c0ca0f855b5c03ac7a784d5767a86bccbf2e8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 13 15:27:40 2017 +0100

    Eliminate unnessary wrapping when call ByteBuf.asReadOnly() in some cases
    
    Motivation:
    
    We can eliminate unnessary wrapping when call ByteBuf.asReadOnly() in some cases to reduce indirection.
    
    Modifications:
    
    - Check if asReadOnly() needs to create a new instance or not
    - Add test cases
    
    Result:
    
    Less object creation / wrapping.

commit adcde84253e7ae6d6ae8e64c73c176d9272b26da
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Feb 8 21:55:10 2017 +0100

    Allow to unwrap ByteBuffer > MAX_ENCRYPTED_PACKET_LENGTH
    
    Motivation:
    
    We should remove the restriction to only allow to call unwrap with a ByteBuffer[] whose cumulative length exceeds MAX_ENCRYPTED_PACKET_LENGTH.
    
    Modifications:
    
    Remove guard.
    
    Result:
    
    Fixes [#6335].

commit 0cf3f54a8d284d76726150a72d1b109969f8b72a
Author: fenik17 <fenik17@gmail.com>
Date:   Tue Feb 14 01:48:33 2017 +0500

    Adding 'final' keyword for private fields where possible
    
    Motivation
    
    Missing 'final' keyword for fields
    
    Modifications
    
    Add 'final' for fields where possible
    
    Result
    
    More safe and consistent code

commit 974a251de892681aa9e363c1c7c0751412b77770
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 13 08:40:42 2017 +0100

    Not fail tests when running on JDK9+ and init of MarshallingFactory fails
    
    Motivation:
    
    To use jboss-marshalling extra command-line arguments are needed on JDK9+ as it makes use of reflection internally.
    
    Modifications:
    
    Skip jboss-marshalling tests when running on JDK9+ and init of MarshallingFactory fails.
    
    Result:
    
    Be able to build on latest JDK9 release.

commit f7c8cf9cb913e6bb5e55a1676f36187bfccba808
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Feb 10 15:03:00 2017 +0100

    Cleanup code in ssl package.
    
    Motivation:
    
    There were some warnings for the code in the ssl package.
    
    Modifications:
    
    - Remove not needed else blocks
    - Use correctly base class for static usage
    - Replace String.length() == 0 with String.isEmpty()
    - Remove unused code
    
    Result:
    
    Less warnings and cleaner code.

commit 34ea09e5524fa9da4f482822bf7b1a16ef69731f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Feb 14 08:17:33 2017 +0100

    Add missing assumeTrue(...) that were not added in 54339c08ac8dbba2ad72216293ad6d2eaa931314

commit 9b2b3e251263f101fb594651659cb6aed01a4a42
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 13 08:35:45 2017 +0100

    Ensure tests pass when sun.misc.Unsafe is not present
    
    Motivation:
    
    We need to ensure we pass all tests when sun.misc.Unsafe is not present.
    
    Modifications:
    
    - Make *ByteBufAllocatorTest work whenever sun.misc.Unsafe is present or not
    - Let Lz4FrameEncoderTest not depend on AbstractByteBufAllocator implementation details which take into account if sun.misc.Unsafe is present or not
    
    Result:
    
    Tests pass even without sun.misc.Unsafe.

commit 54339c08ac8dbba2ad72216293ad6d2eaa931314
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 13 07:42:22 2017 +0100

    Only try to calculate direct memory offset when sun.misc.Unsafe is present
    
    Motivation:
    
    We should only try to calculate the direct memory offset when sun.misc.Unsafe is present as otherwise it will fail with an NPE as PlatformDependent.directBufferAddress(...) will throw it.
    This problem was introduced by 66b9be3a469a2cdcc5d18a8b94c679940ce002a9.
    
    Modifications:
    
    Use offset of 0 if no sun.misc.Unsafe is present.
    
    Result:
    
    PooledByteBufAllocator also works again when no sun.misc.Unsafe is present.

commit d8596d2d9065002072235d81dbb70fe1a9bcf3b3
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 13 15:10:38 2017 +0100

    Two tests are missing `@Test` annotations
    
    Motivation:
    
    ReadOnlyByteBufTest contains two tests which are missing the `@Test` annotation and so will never run.
    
    Modifications:
    
    Add missing annotation.
    
    Result:
    
    Tests run as expected.

commit 413d6eba53232778703e76689c7e6481d5dc8f0f
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Feb 8 11:45:19 2017 -0800

    EPOLL include error description and cause in exceptions
    
    Motivation:
    EPOLL annotates some exceptions to provide the remote address, but the original exception is not preserved. This may make determining a root cause more difficult. The static EPOLL exceptions references the native method that failed, but does not provide a description of the actual error number. Without the description users have to know intimate details about the native calls and how they may fail to debug issues.
    
    Modifications:
    - annotated exceptions should preserve the original exception
    - static exceptions should include the string description of the expected errno
    
    Result:
    EPOLL exceptions provide more context and are more useful to end users.

commit 9ce74d46c19a5f7ad12d8d814ef6e779f29dbfef
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Feb 13 18:36:03 2017 -0800

    Correct unit test flaw introduced in 54c9ecf682eeafaaf7c826903c60f1c783b84dea
    
    Motivation:
    54c9ecf682eeafaaf7c826903c60f1c783b84dea introduced a unit tests which attempted to exclude addresses which resolved to loop back addresses from an assert statement. This was done with a static check for localhost but depending on machine configuration it is possible for other interfaces to be resolved.
    
    Modifications:
    - Use InetAddress#isLoopbackAddress() instead of string match on localhost
    
    Result:
    DnsNameResolverTest#testNameServerCache is more reliable.

commit a1b5b5dcca8542e51b69bcd4d7ccbc51fe7ce7f4
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Feb 2 10:15:10 2017 -0800

    EpollRecvByteAllocatorHandle doesn't inform delegate of more data
    
    Motivation:
    EpollRecvByteAllocatorHandle intends to override the meaning of "maybe more data to read" which is a concept also used in all existing implementations of RecvByteBufAllocator$Handle but the interface doesn't support overriding. Because the interfaces lack the ability to propagate this computation EpollRecvByteAllocatorHandle attempts to implement a heuristic on top of the delegate which may lead to reading when we shouldn't or not reading data.
    
    Modifications:
    - Create a new interface ExtendedRecvByteBufAllocator and ExtendedHandle which allows the "maybe more data to read" between interfaces
    - Deprecate RecvByteBufAllocator and change all existing implementations to extend ExtendedRecvByteBufAllocator
    - transport-native-epoll should require ExtendedRecvByteBufAllocator so the "maybe more data to read" can be propagated to the ExtendedHandle
    
    Result:
    Fixes https://github.com/netty/netty/issues/6303.

commit 6765e9f99db352a7f814e10d77338760432db155
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Feb 8 19:44:07 2017 -0800

    CipherSuiteConverter NPE
    
    Motivation:
    CipherSuiteConverter may throw a NPE if a cipher suite from OpenSSL does not match the precomputed regular expression for OpenSSL ciphers. This method shouldn't throw and instead just return null.
    
    Modifications:
    - if cacheFromOpenSsl(..) fails the conversion toJava should return null
    
    Result:
    Fixes https://github.com/netty/netty/issues/6336.

commit b91dd0678d290a70817ddc44bb5ced2baed275fd
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Feb 9 09:27:24 2017 -0800

    Resolver package is unstable
    
    Motivation:
    The resolver package had some changes late in the 4.1.CR phase and the intention was to mark this package as unstable until these interfaces solidify, but we forgot to mark the package and public classes with the unstable annotation.
    
    Modifications:
    - resolver package public interfaces and package-info should be annotated with @UnstableApi
    
    Result:
    The unstable nature of the resolver package is more clearly communicated.

commit 54c9ecf682eeafaaf7c826903c60f1c783b84dea
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Feb 2 01:32:33 2017 -0800

    DnsNameResolver should respect /etc/resolv.conf and /etc/resolver
    
    Motivation:
    The JDK uses gethostbyname for blocking hostname resoltuion. gethostbyname can be configured on Unix systems according to [1][2]. This may impact the name server that is used to resolve particular domains or just override the default fall-back resolver. DnsNameResolver currently ignores these configuration files which means the default resolution behavior is different than the JDK. This may lead to unexpected resolution failures which succeed when using the JDK's resolver.
    
    Modifications:
    - Add an interface which can override what DnsServerAddressStream to use for a given hostname
    - Provide a Unix specific implementation of this interface and implement [1][2]. Some elements may be ignored sortlist, timeout, etc...
    
    Result:
    DnsNameResolver behaves more like the JDK resolver by default.
    
    [1] https://linux.die.net/man/5/resolver
    [2] https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man5/resolver.5.html

commit fe522fb18e829226ffcc4cdb92fe4b98e2664d08
Author: md-5 <md-5@users.noreply.github.com>
Date:   Fri Feb 10 22:48:25 2017 +1100

    Update Groovy to 2.4.8 for Java 9-ea+154 support.
    
    Motivation:
    
    Update of Groovy is needed to compile on recent java9 releases.
    
    Modification:
    
    Update to Groovy 2.4.8
    
    Result:
    
    This change allows Netty to be successfully compiled on more recent Java 9 previews.

commit 667cbe992314c28bf7a8cfda353874841d2bc91f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Feb 11 09:17:13 2017 +0100

    Fix compilation error introduced by 81f9de423c03ec4538f1ba04b89ae049959b698c

commit 81f9de423c03ec4538f1ba04b89ae049959b698c
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Wed Feb 8 16:43:15 2017 +0100

    HostsFileParser should allow both IPv4 and IPv6 for a given host
    
    Motivation:
    
    HostsFileParser only retains the first address for each given hostname.
    This is wrong, and it’s allowed to have both an IPv4 and an IPv6.
    
    Modifications:
    
    * Have `HostsFileParser` now return a `HostsFileEntries` that contains IPv4 entries and IPv6 entries
    * Introduce `ResolvedAddressTypes` to describe resolved address types preferences
    * Add a new `ResolvedAddressTypes` parameter to `HostsFileEntriesResolver::address` to account for address types preferences
    * Change `DnsNameResolver` constructor to take a `ResolvedAddressTypes`, allowing for a null value that would use default
    * Change `DnsNameResolverBuilder::resolvedAddressTypes` to take a `ResolvedAddressTypes`
    * Make `DnsNameResolver::resolvedAddressTypes` return a `ResolvedAddressTypes`
    * Add a static `DnsNameResolverBuilder::computeResolvedAddressTypes` to ease converting from `InternetProtocolFamily`
    
    Result:
    
    We now support hosts files that contains IPv4 and IPv6 pairs for a same
    hostname.

commit 64abef5f5b283551f85fab4a1b20627275cffc3f
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Thu Feb 9 21:48:24 2017 +0100

    Add exposeHeaders and allowedRequestHeaders that accept CharSequence, close #6328
    
    Motivation:
    
    Netty 4.1 introduced AsciiString and defines HttpHeaderNames constants
    as such.
    
    It would be convenient to be able to pass them to `exposeHeaders` and
    `allowedRequestHeaders` directly without having to call `toString`.
    
    Modifications:
    
    Add `exposeHeaders` and `allowedRequestHeaders` overloads that take a
    `CharSequence`.
    
    Result:
    
    More convenient API

commit 64838f150584385f6d8608ae11959836c5a8eaf9
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Thu Feb 9 20:10:49 2017 +0200

    Cleanup : validatePromise ranamed to isNotValidPromise and added more tests for corner cases.
    
    Motivation:
    
    Result of validatePromise() is always inverted with if (!validatePromise()).
    
    Modification:
    
    validatePromise() renamed to isNotValidPromise() and now returns inverted state so you don't need to invert state in conditions. Also name is now more meaningful according to returned result.
    Added more tests for validatePromise corner cases with Exceptions.
    
    Result:
    
    Code easier to read. No need in inverted result.

commit c95517f7592b4c629cd6d9111c4c0021390841f7
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Thu Feb 9 16:27:10 2017 +0200

    Cleanup : removed unnecessary 'continue', explicit array creation, unwrapping

commit 9c03d49f144f15b796294f2221c85cfe1a3c73a6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Feb 10 08:41:43 2017 +0100

    Update to netty-tcnative 2.0.0.Beta2
    
    Motivation:
    
    A new version of netty-tcnative is out.
    
    Modifications:
    
    Update to netty-tcnative 2.0.0.Beta2
    
    Result:
    
    Use latest release.

commit d06990f43458e9ac7cea803269e83d072ada61f6
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Dec 21 14:53:11 2016 -0800

    OpenSSL ByteBuffer BIO
    
    Motivation:
    Currently Netty utilizes BIO_new_bio_pair so we can control all FD lifetime and event notification but delegates to OpenSSL for encryption/decryption. The current implementation sets up a pair of BIO buffers to read/write encrypted/plaintext data. This approach requires copying of data from Java ByteBuffers to native memory BIO buffers, and also requires both BIO buffers to be sufficiently large to hold application data. If direct ByteBuffers are used we can avoid coyping to/from the intermediate BIO buffer and just read/write directly from the direct ByteBuffer memory. We still need an internal buffer because OpenSSL may generate write data as a result of read calls (e.g. handshake, alerts, renegotiation, etc..), but this buffer doesn't have to be be large enough to hold application data.
    
    Modifications:
    - Take advantage of the new ByteBuffer based BIO provided by netty-tcnative instead of using BIO_read and BIO_write.
    
    Result:
    Less copying and lower memory footprint requirement per TLS connection.

commit 007048dddda0eb922952f8b07ea2521d9a5eadef
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Feb 7 14:09:55 2017 -0800

    DnsNameResolver empty/null hostname missed by a416b79
    
    Motivation:
    a416b79 introduced a check for null or empty host name to be compatible with the JDK resolution. However the doResolve(String, Promise) method, and if the doResolve(String, DnsRecord[], Promise, DnsCache) method was overridden the empty/null hostname would not be correctly resolved.
    
    Modifications:
    - Move the empty/null host name check into the lowest level doResolve method in DnsNameResolver
    - Remove the duplicate logic in InetNameResolver.java which can be bypassed anyways
    
    Result:
    By default (unless behavior is overridden) DnsNameResolver resolves null/empty host names to local host just like the JDK.

commit 9d45f514a47ee8ad5259ee782fcca240017fc3a3
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Tue Feb 7 16:30:03 2017 +0100

    Add a constant for Cookie "undefined maxAge"
    
    Motivation:
    
    DefaultCookie currently used an undocumented magic value for undefined
    maxAge.
    
    Clients need to be able to identify such value so they can implement a
    proper CookieJar.
    
    Ideally, we should add a `Cookie::isMaxAgeDefined` method but I guess
    we can’t add a new method without breaking API :(
    
    Modifications:
    
    Add a new constant on `Cookie` interface so clients can use it to
    compare with value return by `Cookie.maxAge` and decide if `maxAge` was
    actually defined.
    
    Result:
    
    Clients have a better documented way to check if the maxAge attribute
    was defined.

commit 3462a86a3ac41230965e3f06d527da6db9b39e04
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jan 25 12:51:06 2017 +0100

    Ensure we release the previous retained AddressedEnvelope when we fail to notify the promise.
    
    Motivation:
    
    We need to ensure we release the AddressedEnvelope if we fail to notify the future (as it may be notified before because of an timeout). Otherwise we may leak.
    
    Modifications:
    
    Call release() if we fail to notify the future.
    
    Result:
    
    No more memory leak on notify failure.

commit 14b902fced27440c499bc2500d2410a6bab99805
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jan 18 10:56:25 2017 -0800

    Deprecate and ignore ResourceLeakDetector's maxActive parameter
    
    Motivation:
    ResourceLeakDetector supports a parameter called maxActive. This parameter is used in attempt to limit the amount of objects which are being tracked for leaks at any given time, and generates an error log message if this limit is exceeded. This assumes that there is a relationship between leak sample rate and object lifetime for objects which are already being tracked. This relationship may appear to work in cases were there are a single leak record per object and those leak records live for the lifetime of the application but in general this relationship doesn't exist. The original motivation was to provide a limit for cases such as HashedWheelTimer to limit the number of instances which exist at any given time. This limit is not enforced in all circumstances in HashedWheelTimer (e.g. if the thread is a daemon) and can be implemented outside ResourceLeakDetector.
    
    Modifications:
    - Deprecate all methods which interact with maxActive in ResourceLeakDetectorFactory and ResourceLeakDetector
    - Remove all logic related to maxActive in ResourceLeakDetector
    - HashedWheelTimer implements its own logic to impose a limit and warn users if too many instances exists at any given time.
    
    Result:
    Fixes https://github.com/netty/netty/issues/6225.

commit ccd1d777144d88edd78cb25c17887347d2b80bb2
Author: fenik17 <fenik17@gmail.com>
Date:   Wed Feb 8 01:54:09 2017 +0500

    Simplification of boolean expression
    
    Motivation:
    
    Simplify code and reduction the logical operations.
    
    Modifications:
    
    Simplify boolean expression.
    
    Result:
    
    Code less and simpler.

commit 6353c229fd11c6e6306011d55993775f7685d122
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Feb 3 16:19:27 2017 -0800

    SslHandler avoid calling wrap/unwrap when unnecessary
    
    Motivation:
    The SSLEngine wrap and unwrap methods can be called in a way that has no side effects, but this could involve costly validation and allocation. The SslHandler should avoid calling into these methods if possible.
    
    Modifications:
    - wrapNonAppData should provide additional status which can be used by wrap to breakout early if possible
    
    Result:
    SslHandler invokes the SSLEngine less.

commit 72916b99606b3ddb71ee5a8ace7e4914dd81efec
Author: chhsiao90 <chhsiao90@gmail.com>
Date:   Tue Feb 7 15:10:48 2017 +0800

    Add unit test on DefaultHttp2FrameReader
    
    Motivation:
    
    DefaultHttp2FrameReader contains the logic for how it parsed the network
    traffic from http2 client,
    it also validate the content is legal or not.
    So keep high coverage rate on it will increase the stability of api.
    
    Modifications:
    
    Add unit test on DefaultHttp2FrameReader
    
    Result:
    
    Coverage rate increased

commit a7c0ff665cf47dd4ce98e268fda5fcee335cbbb8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jan 9 22:04:18 2017 +0100

    Only use Mockito for mocking.
    
    Motivation:
    
    We used various mocking frameworks. We should only use one...
    
    Modifications:
    
    Make usage of mocking framework consistent by only using Mockito.
    
    Result:
    
    Less dependencies and more consistent mocking usage.

commit 42c035982093d6e08201af9572ea43c7cf269adf
Author: Jason Tedor <jason@tedor.me>
Date:   Thu Feb 2 21:14:07 2017 -0500

    Do not prefer empty MAC address
    
    Motivation:
    
    When comparing MAC addresses searching for the best MAC address, if
    locally-administered address (e.g., from a Docker container) is compared
    against an empty MAC address, the empty MAC address will be marked as
    preferred. In cases this is the only available MAC address, this leaves
    Netty using a random machine ID instead of using a perfectly valid
    machine ID from the locally-adminstered address.
    
    Modifications:
    
    This commit modifies the MAC address logic so that the empty MAC address
    is not preferred over a locally-administered address. This commit also
    simplifies the comparison logic here.
    
    Result:
    
    Empty MAC addresses will not be preferred over locally-administered
    addresses thus permitting the default machine ID to be the
    locally-adminstered MAC address if it is the only available MAC address.

commit 661ff2538e48977b974a78a870fec0712452dd93
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jan 25 09:28:22 2017 +0100

    Implement correct handling of recursive DNS
    
    Motivation:
    
    DnsNameResolver does not handle recursive DNS and so fails if you query a DNS server (for example a ROOT dns server) which provides the correct redirect for a domain.
    
    Modification:
    
    Add support for redirects (a.k.a. handling of AUTHORITY section').
    
    Result:
    
    Its now possible to use a DNS server that redirects.

commit 8a5e42ad2ea091ccc88e02993927f9dd9d4c8205
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jan 9 22:04:18 2017 +0100

    Correct fail write with NotYetConnectedException when OioDatagramChannel is not connected yet.
    
    Motivation:
    
    NioDatagramChannel fails a write with NotYetConnectedException when the DatagramChannel was not yet connected and a ByteBuf is written. The same should be done for OioDatagramChannel as well.
    
    Modifications:
    
    Make OioDatagramChannel consistent with NioDatagramChannel
    
    Result:
    
    Correct and consistent implementations of DatagramChannel

commit 66b9be3a469a2cdcc5d18a8b94c679940ce002a9
Author: Kiril Menshikov <kiril@kiril.me>
Date:   Sun Jan 29 23:26:40 2017 +0200

    Allow to allign allocated Buffers
    
    Motivation:
    
    64-byte alignment is recommended by the Intel performance guide (https://software.intel.com/en-us/articles/practical-intel-avx-optimization-on-2nd-generation-intel-core-processors) for data-structures over 64 bytes.
    Requiring padding to a multiple of 64 bytes allows for using SIMD instructions consistently in loops without additional conditional checks. This should allow for simpler and more efficient code.
    
    Modification:
    
    At the moment cache alignment must be setup manually. But probably it might be taken from the system. The original code was introduced by @normanmaurer https://github.com/netty/netty/pull/4726/files
    
    Result:
    
    Buffer alignment works better than miss-align cache.

commit 48f6541cb3b70c4d6b1aeffa0301b88d0e200581
Author: 周岑 <zhoucencl@gmail.com>
Date:   Mon Feb 6 11:41:24 2017 +0800

    delete no useful intermediate variables
    
    delete no useful intermediate variables

commit 756b78b7dfcf235ea84450a741312d6292b2040b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 26 12:15:10 2017 +0100

    Add common tests for ByteBufAllocator / AbstractByteBufAllocator implementations.
    
    Motivation:
    
    We not had tests for ByteBufAllocator implementations in general.
    
    Modifications:
    
    Added ByteBufAllocatorTest, AbstractByteBufAllocatorTest and UnpooledByteBufAllocatorTest
    
    Result:
    
    More tests for allocator implementations.

commit 0f9b739508ccb57ec6a5fe3296ec138a669cbbc8
Author: Vladimir Kostyukov <vkostyukov@twitter.com>
Date:   Sat Feb 4 15:56:40 2017 -0800

    AggregatedFullHttpMessage.replace should also copy a decoder result
    
    Motivation:
    
    HttpObjectAggregator yields full HTTP messgaes (AggregatedFullHttpMessages) that don't respect decoder result when copied/replaced.
    
    Modifications:
    
    Copy the decoding result over to a new instance produced by AggregatedFullHttpRequest.replace or AggregatedFullHttpResponse.replace .
    
    Result:
    
    DecoderResult is now copied over when an original AggregatedFullHttpMessage is being replaced (i.e., AggregatedFullHttpRequest.replace or AggregatedFullHttpResponse.replace is being called).
    
    New unit tests are passing on this branch but are failing on master.

commit b9abd3c9fc90cda1781a6f2f181735460a13b75d
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Sat Feb 4 01:08:46 2017 +0200

    Cleanup : for loops for arrays to make code easier to read and removed unnecessary toLowerCase()

commit 1a05463c56c5d93d21de6cfed125969a1033b72f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 2 16:24:54 2017 +0100

    More strict testing of handshake behaviour
    
    Motiviation:
    
    We should ensure we not need any extra wrap / unwrap calls during handshake once the handshake was signaled as finished
    
    Modifications:
    
    More strict testing
    
    Result:
    
    Better testing of handshake behaviour

commit d688e35e70ea307759976fc32d177b2748d0a14e
Author: Roger Kapsi <rkapsi@squarespace.com>
Date:   Thu Feb 2 16:14:12 2017 -0500

    Fixing argument names
    
    Motivation
    
    Misleading argument names
    
    Modifications
    
    Stripping xMillis suffix from arguments because there's a TimeUnit
    
    Result
    
    Less confusion

commit 1d128c7a6594e1ffd986fee9723c4305082e23cf
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Aug 10 08:55:30 2016 +0200

    Switch to netty-tcnative 2.0.0 which uses different package names
    
    Motivation:
    
    Previous versions of netty-tcnative used the org.apache.tomcat namespace which could lead to problems when a user tried to use tomcat and netty in the same app.
    
    Modifications:
    
    Use netty-tcnative which now uses a different namespace and adjust code to some API changes.
    
    Result:
    
    Its now possible to use netty-tcnative even when running together with tomcat.

commit 3482651e0c29edfa02f189751c704ebe4fe8f54c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jan 24 12:50:39 2017 -0800

    HTTP/2 Non Active Stream RFC Corrections
    
    Motivation:
    codec-http2 couples the dependency tree state with the remainder of the stream state (Http2Stream). This makes implementing constraints where stream state and dependency tree state diverge in the RFC challenging. For example the RFC recommends retaining dependency tree state after a stream transitions to closed [1]. Dependency tree state can be exchanged on streams in IDLE. In practice clients may use stream IDs for the purpose of establishing QoS classes and therefore retaining this dependency tree state can be important to client perceived performance. It is difficult to limit the total amount of state we retain when stream state and dependency tree state is combined.
    
    Modifications:
    - Remove dependency tree, priority, and weight related items from public facing Http2Connection and Http2Stream APIs. This information is optional to track and depends on the flow controller implementation.
    - Move all dependency tree, priority, and weight related code from DefaultHttp2Connection to WeightedFairQueueByteDistributor. This is currently the only place which cares about priority. We can pull out the dependency tree related code in the future if it is generally useful to expose for other implementations.
    - DefaultHttp2Connection should explicitly limit the number of reserved streams now that IDLE streams are no longer created.
    
    Result:
    More compliant with the HTTP/2 RFC.
    Fixes https://github.com/netty/netty/issues/6206.
    
    [1] https://tools.ietf.org/html/rfc7540#section-5.3.4

commit 6e5b25733f49d2ea843a89b4d547b856142212ec
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Jan 30 14:50:55 2017 -0800

    HTTP/2 Connection Preface User Event
    
    Motivation:
    If an HTTP/2 client writes data before the connection preface the peer will shutdown the socket. Depending on what is in the pipeline (SslHandler) may require different evaluation criteria to infer when the codec-http2 has written the connection preface on behalf of the client. This can lead to unnecessarily complexity and error prone/racy application code.
    
    Modifications:
    - Introduce a user event that is fired up the pipeline when codec-http2 writes the connection preface
    
    Result:
    Reliable mechanism for applications to use to know when connection preface has been written (related to https://github.com/netty/netty/issues/6272).

commit 66b17310418230d12c21f1f91287c22022d8d847
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 26 11:22:16 2017 +0100

    PooledByteBuf.capacity(...) not enforces maxCapacity()
    
    Motivation:
    
    PooledByteBuf.capacity(...) miss to enforce maxCapacity() and so its possible to increase the capacity of the buffer even if it will be bigger then maxCapacity().
    
    Modifications:
    
    - Correctly enforce maxCapacity()
    - Add unit tests for capacity(...) calls.
    
    Result:
    
    Correctly enforce maxCapacity().

commit 0d5b665fba20035d805377f668b021d37984d4df
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jan 18 10:00:01 2017 +0100

    Automatically decode DNS domain name to unicode
    
    Motivation:
    
    DnsNameResolver will return the domain / host name as ascii code using punycode (https://tools.ietf.org/html/rfc3492). This is different to what the JDK does which always convert it to unicode. We should do the same by default but allow to also not do it.
    
    Modifications:
    
    - Add new builder method on DnsNameResolverBuilder which allow to disable / enable converting. Default is to convert just like the JDK does.
    - Add unit tests for it.
    
    Result:
    
    DnsNameResolver and JDK impl behave the same way.

commit ead993898002a8252b5c005cb26693911c934871
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Wed Jan 25 14:37:45 2017 -0800

    Include Http 1 request in error message
    
    Motivation:
    
    When An HTTP server is listening in plaintext mode, it doesn't have
    a chance to negotiate "h2" in the tls handshake.  HTTP 1 clients
    that are not expecting an HTTP2 server will accidentally a request
    that isn't an upgrade, which the HTTP/2 decoder will not
    understand.  The decoder treats the bytes as hex and adds them to
    the error message.
    
    These error messages are hard to understand by humans, and result
    in extra, manual work to decode.
    
    Modification:
    
    If the first bytes of the request are not the preface, the decoder
    will now see if they are an HTTP/1 request first.  If so, the error
    message will include the method and path of the original request in
    the error message.
    
    In case the path is long, the decoder will check up to the first
    1024 bytes to see if it matches.  This could be a DoS vector if
    tons of bad requests or other garbage come in.  A future optimization
    would be to treat the first few bytes as an AsciiString and not do
    any Charset decoding.  ByteBuf.toCharSequence alludes to such an
    optimization.
    
    The code has been left simple for the time being.
    
    Result:
    
    Faster identification of errant HTTP requests.

commit 735d6dd63687b5bb5a6cb87b8074468fe9ea4991
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jan 30 15:14:02 2017 +0100

    [maven-release-plugin] prepare for next development iteration

commit 76e22e63f35f52d17b407a7f29f709e4c1efb46b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jan 30 15:12:36 2017 +0100

    [maven-release-plugin] prepare release netty-4.1.8.Final

commit 7736534b34bff54b6c874b2f45ab73138071d3ee
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jan 30 08:44:14 2017 +0100

    Ensure tests added in 91f050d2ef6b22b7aec187aa1cf4593955dcea82 work with different openssl installations
    
    Motivation:
    
    Tests were added in 91f050d2ef6b22b7aec187aa1cf4593955dcea82 to run with different protocols / ciphers. These may fail currently when openssl was compiled without support for the protocol / ciphers.
    
    Modifications:
    
    - Refactor tests to easier understand for which protocol / cipher it failed
    - Not fail the test if the protocol is not supported with the used openssl version.
    
    Result:
    
    More robust testing.

commit f10f8a31318a2e408b979de6a8ed49caa615d86a
Author: ming.ma <isdom.maming@gmail.com>
Date:   Fri Jan 27 16:28:19 2017 +0800

    Calculate correct count for tiny/small/normal allocation
    
    Motivation:
    
    Disable ThreadLocal Cache, then allocate Pooled ByteBuf and release all these buffers, PoolArena's tiny/small/normal allocation count is incorrect.
    
    Modifications:
    
    - Calculate PoolArena's tiny/small/normal allocation one time
    - Add testAllocationCounter TestCase
    
    Result:
    
    Fixes #6282 .

commit 94cb389c04bd084f698345aac4cb70b02e5da086
Author: Jon Chambers <jon.chambers@gmail.com>
Date:   Sat Jan 28 20:25:22 2017 -0500

    Restore add(Promise) and addAll(Promise...) methods to PromiseCombiner.
    
    Motivation:
    
    A testing goof in 7c630fe introduced a binary incompatibility when the old Promise-specific `add` and `addAll` methods in PromiseCombiner were generalized to accept `Futures`.
    
    Modification:
    
    - Restore (but mark as `@Deprecated`) old PromiseCombiner methods.
    - Fixed a couple minor documentation typos because sure why not.
    
    Result:
    
    `PromiseCombiner` is binary-compatible with previous versions of Netty.

commit 7a39afd031accea9ee38653afbd58eb1c466deda
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jan 27 11:54:11 2017 +0100

    Correctly detect which protocols are supported when using OpenSSL
    
    Motivation:
    
    We failed to properly test if a protocol is supported on an OpenSSL installation and just always returned all protocols.
    
    Modifications:
    
    - Detect which protocols are supported on a platform.
    - Skip protocols in tests when not supported. This fixes a build error on some platforms introduced by [#6276].
    
    Result:
    
    Correctly return only the supported protocols

commit 91f050d2ef6b22b7aec187aa1cf4593955dcea82
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jan 24 11:49:10 2017 +0100

    More precise calculate the maximum record size when using SslProvider.OPENSSL* and so decrease mem usage.
    
    Motivation:
    
    We used ca 2k as maximum overhead for encrypted packets which is a lot more then what is needed in reality by OpenSSL. This could lead to the need of more memory.
    
    Modification:
    
    - Use a lower overhead of 86 bytes as defined by the spec and openssl itself
    - Fix unit test to use the correct session to calculate needed buffer size
    
    Result:
    
    Less memory usage.

commit e13da218e9509058d99ba2ec9b60bbf46d6d67ce
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Jan 26 09:03:42 2017 -0800

    HTTP/2 revert Http2FrameWriter throws API change
    
    Motivation:
    2fd42cfc6b32dacb812c6f2ecef8522cd94718d4 fixed a bug related to encoding headers but it also introduced a throws statement onto the Http2FrameWriter methods which write headers. This throws statement makes the API more verbose and is not necessary because we can communicate the failure in the ChannelFuture that is returned by these methods.
    
    Modifications:
    - Remove throws from all Http2FrameWriter methods.
    
    Result:
    Http2FrameWriter APIs do not propagate checked exceptions.

commit 81735c2535591a036a534efd41c5f2b56fa04fbb
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jan 17 16:12:26 2017 +0100

    Check if Epoll is avaible when construct EpollEventLoopGroup
    
    Motivation:
    
    We should call Epoll.ensureAvailability() when init EpollEventLoopGroup to fail fast and with a proper exception.
    
    Modifications:
    
    Call Epoll.ensureAvailability() during EpollEventLoopGroup init.
    
    Result:
    
    Fail fast if epoll is not availability (for whatever reason).

commit 8dda984afe9477fa09fe166305381d9ed1afa7c4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jan 25 20:12:45 2017 +0100

    Null out references to tmpNioBuf and chunk to allow quicker collecting
    
    Motivation:
    
    In PooledByteBuf we missed to null out the chunk and tmpNioBuf fields before recycle it to the Recycler. This could lead to keep objects longer alive then necessary which may hold a lot of memory.
    
    Modifications:
    
    Null out tmpNioBuf and chunk before recycle.
    
    Result:
    
    Possible to earlier GC objects.

commit f4c2c1926f47e38a9d6156af1e651daa79ea0e0a
Author: chhsiao90 <chhsiao90@gmail.com>
Date:   Sat Jan 14 18:51:30 2017 +0800

    Fixed rfc violation about sending extension frame in the middle of headers
    
    Motivation:
    
    At rfc7540 5.5, it said that it's not permitted to send extension
    frame in the middle of header block and need be treated as
    protocol error
    
    Modifications:
    
    When received a extension frame, in netty it's called unknown frame,
    will verify that is there an headersContinuation exists
    
    Result:
    
    When received a extension frame in the middle of header block,
    will throw connection error and closed the connection

commit 5cd8133477aa87445fe4277550094237fd2585ed
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 19 12:12:17 2017 +0100

    Add unit test that shows we correctly return BUFFER_UNDERFLOW
    
    Motivation:
    
    We should test that we correctly return BUFFER_UNDERFLOW if the src buffer not contains enough data to unwrap it.
    
    Modification:
    
    Add unit test to verify behaviour.
    
    Result:
    
    Better test coverrage of SSLEngine implementations.

commit b69c7723f2cb54ce52d2f1b5a19febd66b725772
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jan 20 16:42:58 2017 +0100

    Update jetty-alpn-agent to support latest JDK releases.
    
    Motivation:
    
    We need to update jetty-alpn-agent to support latest JDK releases.
    
    Modifications:
    
    Update jetty-alpn-agent to 2.0.6
    
    Result:
    
    Be able to run tests with latest JDK releases.

commit 44add3c5255479eb0a6bdd266e53f50d11c76684
Author: ming.ma <isdom.maming@gmail.com>
Date:   Tue Jan 24 21:26:23 2017 +0800

    Log correct value for useCacheForAllThreads
    
    Motivation:
    
    Log about "-Dio.netty.allocator.useCacheForAllThreads" is missing log placeholder, and so can't output correct value.
    
    Modification:
    
    - Add placeholder
    
    Result:
    
    Fixes #6265 .

commit 9bec25a6eb491a3aa2b680d098113581bbc29bf1
Author: Chris Conroy <cconroy@squareup.com>
Date:   Tue Jan 24 13:56:25 2017 -0500

    Set the Transfer-Encoding header instead of adding
    
    Motivation:
    
    HttpUtil.setTransferEncodingChunked could add a second Transfer-Encoding
    header if one was already present. While this is technically valid, it
    does not appear to be the intent of the method.
    
    Result:
    
    Only one Transfer-Encoding header is present after calling this method.

commit d5093659743ee8cc67c06c0ecfa72ba70bb6dae5
Author: Christopher Exell <cexell@twitter.com>
Date:   Tue Jan 24 11:44:55 2017 -0800

    Move location of where oversized headers that don't exceed the go away limit is done
    so that the check occurs after all headers have been read

commit a416b79d865fd6ce11ecce74d53ce2dfd8be007f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jan 20 15:46:46 2017 +0100

    DnsNameResolver.resolve*(...) never notifies the Future when empty hostname is used.
    
    Motivation:
    
    When an empty hostname is used in DnsNameResolver.resolve*(...) it will never notify the future / promise. The root cause is that we not correctly guard against errors of IDN.toASCII(...) which will throw an IllegalArgumentException when it can not parse its input. That said we should also handle an empty hostname the same way as the JDK does and just use "localhost" when this happens.
    
    Modifications:
    
    - If the try to resolve an empty hostname we use localhost
    - Correctly guard against errors raised by IDN.toASCII(...) so we will always noify the future / promise
    - Add unit test.
    
    Result:
    
    DnsNameResolver.resolve*(...) will always notify the future.

commit 640ef615be1bbf48f8506151518c0c55065e7f99
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jan 11 16:07:47 2017 +0100

    Allow to configure SslHandler to wait for close_notify response before closing the Channel and fix racy flush close_notify timeout scheduling.
    
    Motivation:
    
    SslHandler closed the channel as soon as it was able to write out the close_notify message. This may not be what the user want as it may make sense to only close it after the actual response to the close_notify was received in order to guarantee a clean-shutdown of the connection in all cases.
    
    Beside this closeNotifyFlushTimeoutMillis is volatile so may change between two reads. We need to cache it in a local variable to ensure it not change int between. Beside this we also need to check if the flush promise was complete the schedule timeout as this may happened but we were not able to cancel the timeout yet. Otherwise we will produce an missleading log message.
    
    Modifications:
    
    - Add new setter / getter to SslHandler which allows to specify the behavior (old behavior is preserved as default)
    - Added unit test.
    - Cache volatile closeNotifyTimeoutMillis.
    - Correctly check if flush promise was complete before we try to forcibly close the Channel and log a warning.
    - Add missing javadocs.
    
    Result:
    
    More clean shutdown of connection possible when using SSL and fix racy way of schedule close_notify flush timeouts and javadocs.

commit 907726988dec6841933afa18d70f07830097b56a
Author: Christopher Exell <cexell@twitter.com>
Date:   Fri Jan 20 15:14:42 2017 -0800

    Update hpack Decoder CTOR to allow for overflow in maxHeaderList size, as we do when we apply our ack'ed settings
    This prevents us from having the first request, that hasn't ack'ed the setting causing a GOAWAY when we'd would
    be under the maxHeaderListSizeGoAway that would have been set after the settings ack.

commit e9fa40d7707d08ecc3c1f649a13817670b76613a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jan 20 21:38:48 2017 +0100

    Ensure calling ReferenceCountedOpenSslEngine.wrap(...) after closeOutbound() was called will not throw an SSLException
    
    Motivation:
    
    PR [#6238] added guards to be able to call wrap(...) / unwrap(...) after the engine was shutdown. Unfortunally one case was missed which is when closeOutbound() was called and produced some data while closeInbound() was not called yet.
    
    Modifications:
    
    Correctly guard against SSLException when closeOutbound() was called, produced data and someone calls wrap(...) after it.
    
    Result:
    
    No more SSLException. Fixes [#6260].

commit 4e04b63746d66aa1c1ef38d1505a9f0cdd62c26b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jan 20 17:52:34 2017 +0100

    Update netty-tcnative
    
    Motivation:
    
    We released a new netty-tcnative version as a memory leak was fixed.
    
    Modifications:
    
    Update netty-tcnative.
    
    Result:
    
    Fixes [#6249].

commit 1b313972492c1259db23c5481986bb21d2309dec
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 12 11:25:24 2017 +0100

    Deprecate methods on SslHandler that have other replacements
    
    Motivation:
    
    SslHandler has multiple methods which have better replacements now or are obsolete. We should mark these as `@Deprecated`.
    
    Modifications:
    
    Mark methods as deprecated.
    
    Result:
    
    API cleanup preparation.

commit ac5f701a5c33b5565d7762bc52d29911829bce8e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 19 12:18:10 2017 +0100

    Use less memory during writes when using SslHandler with SslProvider.OpenSsl
    
    Motivation:
    
    In commit fc3c9c9523150190760801dd0fbf014909519942 I changes the way how we calculate the capacity of the needed ByteBuf for wrap operations that happen during writes when the SslHandler is used. This had the effect that the same capacity for ByteBufs is needed for the JDK implementation of SSLEngine but also for our SSLEngine implementation that uses OpenSSL / BoringSSL / LibreSSL. Unfortunally this had the side-effect that applications that used our SSLEngine implementation now need a lot more memory as bascially the JDK implementation always needs a 16kb buffer for each wrap while we can do a lot better for our SSLEngine implementation.
    
    Modification:
    
    - Resurrect code that calculate a better ByteBuf capacity when using our SSLEngine implementation and so be able to safe a lot of memory
    - Add test-case to ensure it works as expected and is not removed again later on.
    
    Result:
    
    Memory footprint of applications that uses our SSLEngine implementation based on OpenSSL / BoringSSL / LibreSSL is back to the same amount of before commit fc3c9c9523150190760801dd0fbf014909519942.

commit 3344cd21acc61819c327976ed5281daa49b0c05e
Author: Tim Brooks <tim@uncontended.net>
Date:   Mon Dec 19 14:13:43 2016 -0600

    Wrap operations requiring SocketPermission with doPrivileged blocks
    
    Motivation:
    
    Currently Netty does not wrap socket connect, bind, or accept
    operations in doPrivileged blocks. Nor does it wrap cases where a dns
    lookup might happen.
    
    This prevents an application utilizing the SecurityManager from
    isolating SocketPermissions to Netty.
    
    Modifications:
    
    I have introduced a class (SocketUtils) that wraps operations
    requiring SocketPermissions in doPrivileged blocks.
    
    Result:
    
    A user of Netty can grant SocketPermissions explicitly to the Netty
    jar, without granting it to the rest of their application.

commit 2d113315917bee1991bc2ee409287477edfd8fc9
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Thu Jan 19 00:37:05 2017 +0200

    Typo fix in post encoder and replaced static hashmap with array.

commit 2fd42cfc6b32dacb812c6f2ecef8522cd94718d4
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Jan 13 17:09:44 2017 -0800

    HTTP/2 Max Header List Size Bug
    
    Motivation:
    If the HPACK Decoder detects that SETTINGS_MAX_HEADER_LIST_SIZE has been violated it aborts immediately and sends a RST_STREAM frame for what ever stream caused the issue. Because HPACK is stateful this means that the HPACK state may become out of sync between peers, and the issue won't be detected until the next headers frame. We should make a best effort to keep processing to keep the HPACK state in sync with our peer, or completely close the connection.
    If the HPACK Encoder is configured to verify SETTINGS_MAX_HEADER_LIST_SIZE it checks the limit and encodes at the same time. This may result in modifying the HPACK local state but not sending the headers to the peer if SETTINGS_MAX_HEADER_LIST_SIZE is violated. This will also lead to an inconsistency in HPACK state that will be flagged at some later time.
    
    Modifications:
    - HPACK Decoder now has 2 levels of limits related to SETTINGS_MAX_HEADER_LIST_SIZE. The first will attempt to keep processing data and send a RST_STREAM after all data is processed. The second will send a GO_AWAY and close the entire connection.
    - When the HPACK Encoder enforces SETTINGS_MAX_HEADER_LIST_SIZE it should not modify the HPACK state until the size has been checked.
    - https://tools.ietf.org/html/rfc7540#section-6.5.2 states that the initial value of SETTINGS_MAX_HEADER_LIST_SIZE is "unlimited". We currently use 8k as a limit. We should honor the specifications default value so we don't unintentionally close a connection before the remote peer is aware of the local settings.
    - Remove unnecessary object allocation in DefaultHttp2HeadersDecoder and DefaultHttp2HeadersEncoder.
    
    Result:
    Fixes https://github.com/netty/netty/issues/6209.

commit ead87b7df8d923417475ead2d7680747b1a72f07
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 19 13:18:19 2017 +0100

    Respect resolvedAddressTypes when follow CNAME records.
    
    Motivation:
    
    When we follow CNAME records we should respect resolvedAddressTypes and only query A / AAAA depending on which address types are expected.
    
    Modifications:
    
    Check if we should query A / AAAA when follow CNAMEs depending on resolvedAddressTypes.
    
    Result:
    
    Correct behaviour when follow CNAMEs.

commit 71efb0b39e4410001abb9d96c6a87316a567c16f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 19 19:28:01 2017 +0100

    Do not replace System.err during Slf4JLoggerFactory construction
    
    Motivation:
    
    Replacing System.err during Slf4JLoggerFactory construction is problematic as another class may optain the System.err reference before we set it back to the original value.
    
    Modifications:
    
    Remove code that temporary replaced System.err.
    
    Result:
    
    Fixes [#6212].

commit cf8e07f62f91f1963d501f6f670a6eef8e548da0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jan 13 08:38:55 2017 +0100

    Run all tests in SSLEngineTest with heap, direct and mixed buffers
    
    Motivation:
    
    As we use different execution path in our SSLEngine implementation depending on if heap, direct or mixed buffers are used we should run the tests with all of them.
    
    Modification:
    
    Ensure we run all tests with different buffer types.
    
    Result:
    
    Better test-coverage

commit d55c321306dc6f3c01cbbd5f5c080fabe1128583
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 19 09:31:35 2017 +0100

    Add SslCloseCompletionEvent that is fired once a close_notify was received
    
    Motivation:
    
    For the completion of a handshake we already fire a SslHandshakeCompletionEvent which the user can intercept. We should do the same for the receiving of close_notify.
    
    Modifications:
    
    Add SslCloseCompletionEvent and test-case.
    
    Result:
    
    More consistent API.

commit cd9008f95b61f92d30eff7c351cb0bf5db97643a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 19 19:13:57 2017 +0100

    Remove unnecessray for loop missed by fac0ca83194252e3ea231e927972c1d2c74aa459

commit 0e654f77e24d15100332648ed3f910e7760b553f
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Sun Jan 15 17:51:58 2017 +0200

    Level initialization cleanup.

commit 9a4aa617f42578c87c6d500a627d90d844b6ef49
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jan 18 15:53:20 2017 -0800

    PlatformDependent#getClassLoader fails in restrictive classloader environment
    
    Motivation:
    https://github.com/netty/netty/pull/6042 only addressed PlatformDependent#getSystemClassLoader but getClassLoader is also called in an optional manner in some common code paths but fails to catch a general enough exception to continue working.
    
    Modifications:
    - Calls to getClassLoader which can continue if results fail should catch Throwable
    
    Result:
    More resilient code in the presense of restrictive class loaders.
    Fixes https://github.com/netty/netty/issues/6246.

commit 86020a2858de8c8cf31892a3bf1010d6f9defa4a
Author: 周岑 <zhoucencl@gmail.com>
Date:   Thu Jan 19 17:10:37 2017 +0800

    Typo error: Method invoker() no longer exists
    
    Method invoker() no longer exists

commit 141554f5d15d0014eccefa8de42388bda1bfa255
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Wed Jan 18 18:16:49 2017 +0200

    Removed unnecessary pattern matching during number paring and unnecessary toLowerCase() invocation.
    
    Motivation:
    
    Pattern matching not necessary for number parsing.
    
    Modification:
    
    Removed pattern matching for number parsing and removed unnecessary toLowerCase() operation.
    
    Result:
    
    No static variable with pattern, removed unnecessary matching operation and toLowerCase() operation.

commit fac0ca83194252e3ea231e927972c1d2c74aa459
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jan 17 11:58:20 2017 +0100

    Warn about not-supported ChannelOption when bootstrap Channels.
    
    Motivation:
    
    We not warned about not-supported ChannelOptions when set the options for the ServerChannel.
    
    Modifications:
    
    - Share code for setting ChannelOptions during bootstrap
    
    Result:
    
    Warning is logged when a ChannelOption is used that is not supported during bootstrap a Channel. See also [#6192]

commit 4f6ef695822253715dc75cd7355f3325505cae67
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 19 08:01:14 2017 +0100

    Follow-up cleanup of 0c4826586f48106267092160b8b9343d3f3e88df

commit 0c4826586f48106267092160b8b9343d3f3e88df
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jan 17 21:11:01 2017 +0100

    Cleanup PlatformDependent* code
    
    Motivation:
    
    PlatformDependent* contains some methods that are not used and some other things that can be cleaned-up.
    
    Modifications:
    
    - Remove unused methods
    - cleanup
    
    Result:
    
    Code cleanup.

commit d7ff71a3d1d0ba16818ebe8ab44691197c2ffd48
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jan 16 13:06:13 2017 +0100

    Check if DnsCache is null in DnsNameResolver constructor.
    
    Motivation:
    
    We miss checking if DnsCache is null in DnsNameResolver constructor which will later then lead to a NPE. Better fail fast here.
    
    Modifications:
    
    Check for null and if so throw a NPE.
    
    Result:
    
    Fail fast.

commit d37702aa69b67e419c83fb170ccaec164598857d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jan 11 14:31:53 2017 +0100

    Ensure SslHandler.sslCloseFuture() is notified in all cases.
    
    Motivation:
    
    The SslHandler.sslCloseFuture() may not be notified when the Channel is closed before a closify_notify is received.
    
    Modifications:
    
    Ensure we try to fail the sslCloseFuture() when the Channel is closed.
    
    Result:
    
    Correctly notify the ssl close future.

commit 91951a51addb6a16115e34f2556c04efe5fbcb81
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jan 13 15:25:07 2017 +0100

    Ensure calling ReferenceCountedSslEngine.unwrap(...) / wrap(...) can be called after it was closed
    
    Motivation:
    
    The JDK implementation of SSLEngine allows to have unwrap(...) / wrap(...) called even after closeInbound() and closeOutbound() were called. We need to support the same in ReferenceCountedSslEngine.
    
    Modification:
    
    - Allow calling ReferenceCountedSslEngine.unwrap(...) / wrap(...) after the engine was closed
    - Modify unit test to ensure correct behaviour.
    
    Result:
    
    Implementation works as expected.

commit 821501717ba3215a81863ad1c329ab8cb130dec4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 12 20:10:22 2017 +0100

    Fix possible IOOBE when calling ReferenceCountedSslEngine.unwrap(...) with heap buffers.
    
    Motivation:
    
    fc3c9c9523150190760801dd0fbf014909519942 introduced a bug which will have ReferenceCountedSslEngine.unwrap(...) produce an IOOBE when be called with an BŷteBuffer as src that contains multiple SSLRecords and has a position != 0.
    
    Modification:
    
    - Correctly set the limit on the ByteBuffer and so fix the IOOBE.
    - Add test-case to verify the fix
    
    Result:
    
    Correctly handle heap buffers as well.

commit b701da8d1c79b4a2f02e3ff2d22a31f1bf084d00
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Jan 12 20:44:52 2017 -0800

    HTTP/2 HPACK Integer Encoding Bugs
    
    Motivation:
    - Decoder#decodeULE128 has a bounds bug and cannot decode Integer.MAX_VALUE
    - Decoder#decodeULE128 doesn't support values greater than can be represented with Java's int data type. This is a problem because there are cases that require at least unsigned 32 bits (max header table size).
    - Decoder#decodeULE128 treats overflowing the data type and invalid input the same. This can be misleading when inspecting the error that is thrown.
    - Encoder#encodeInteger doesn't support values greater than can be represented with Java's int data type. This is a problem because there are cases that require at least unsigned 32 bits (max header table size).
    
    Modifications:
    - Correct the above issues and add unit tests.
    
    Result:
    Fixes https://github.com/netty/netty/issues/6210.

commit 3ea807e375e6f311c26aca92e3445c7fbd58a7e5
Author: Jason Brown <jasedbrown@gmail.com>
Date:   Fri Oct 14 15:44:32 2016 -0700

    Flush LZ4FrameEncoder buffer when channel flush() is received.
    
    Motivation:
    
    LZ4FrameEncoder maintains an internal buffer of incoming data compress, and only writes out compressed data when a size threshold is reached. LZ4FrameEncoder does not override the flush() method, and thus the only way to flush data down the pipeline is via more data or close the channel.
    
    Modifications:
    
    Override the flush() function to flush on demand. Also overrode the allocateBuffer() function so we can more accurately size the output buffer (instead of needing to potatntially realloc via buffer.ensureWritable()).
    
    Result:
    
    Implementation works as described.

commit c590e3bd63c43e9c1104ce2ab3a5307f14bee960
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jan 17 15:44:15 2017 -0800

    HTTP/2 relax test timeouts
    
    Motivation:
    Build failures have been observed with 2 second timeouts on the CI servers. We should make the timeouts longer to reduce false positive test failures due to tests timing out prematurely.
    
    Modifications:
    - Increase timeouts from 2 and 3 seconds to 5 seconds.
    
    Result:
    Less false positive test failures.

commit 7f01da8d0f65b5254ce515ef21d11ec603fea9fe
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 12 11:36:51 2017 +0100

    [maven-release-plugin] prepare for next development iteration

commit 7a21eb1178c8ed0072adcd5f2ac6e8d68c7caa05
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 12 11:35:58 2017 +0100

    [maven-release-plugin] prepare release netty-4.1.7.Final

commit be8c16cd0c54f9013b539741bf2a1db13ddc0126
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Dec 19 13:48:15 2016 +0100

    [#6141] OpenSSLContext Mutual Auth does not announce acceptable CAs
    
    Motivation:
    
    Openssl provider should behave same as JDK provider when mutual authentication is required and a specific set of trusted Certificate Authorities are specified. The SSL handshake should return back to the connected peer the same list of configured Certificate Authorities.
    
    Modifications:
    
    Correctly set the CA list.
    
    Result:
    
    Correct and same behaviour as the JDK implementation.

commit dd055c01c78c3a6ce5b9195890486a6e1ab072d2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Jan 7 22:42:04 2017 +0100

    Ensure ReferenceCountedOpenSslEngine not swallow the close_notify
    
    Motivation:
    
    We need to ensure we not swallow the close_notify that should be send back to the remote peer. See [#6167]
    
    Modifications:
    
    - Only call shutdown() in closeInbound() if there is nothing pending that should be send back to the remote peer.
    - Return the correct HandshakeStatus when the close_notify was received.
    - Only shutdown() when close_notify was received after closeOutbound() was called.
    
    Result:
    
    close_notify is correctly send back to the remote peer and handled when received.

commit eb5dc4bcedc7503738e19ee8635f4df58f7062a2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Dec 22 10:27:03 2016 +0100

    Correctly handle IPV6 in HttpProxyHandler
    
    Motivation:
    
    The HttpProxyHandler is expected to be capable of issuing a valid CONNECT request for a tunneled connection to an IPv6 host.
    
    Modifications:
    
    - Correctly format the IPV6 address.
    - Add unit tests
    
    Result:
    
    HttpProxyHandler works with IPV6 as well. Fixes [#6152].

commit 84410f97af5223876071c4601b80fa76ebc8a57b
Author: Johno Crawford <johno@sulake.com>
Date:   Wed Jan 11 13:52:01 2017 +0100

    Add unit test that shows LineBasedFrameDelimiter correctly handles fragmented data.
    
    Motivation:
    
    Verify everything works as expected.
    
    Modifications:
    
    Added testcase.
    
    Result:
    
    More test-coverage.

commit d771526f8cfe262914ef40f0613e1e4b9e3a3aca
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Jan 7 12:10:01 2017 -0800

    HTTP/2 HelloWorld Client Example Bug
    
    Motivation:
    The HTTP/2 helloworld client example has 2 bugs:
    1. HttpResponseHandler has a map which is accessed from multiple threads, but the map is not thread safe.
    2. Requests are flushed and maybe completely written and the responses may be received/processed by Netty before an element is inserted into the HttpResponseHandler map. This may result in an 'unexpected message' error even though the message has actually been sent.
    
    Modifications:
    - HttpResponseHandler should use a thread safe map
    - Http2Client shouldn't flush until entries are added to the HttpResponseHandler map
    
    Result:
    Fixes https://github.com/netty/netty/issues/6165.

commit ec3d077e0d7058eec332b46d8b87d73d821be734
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Dec 31 15:57:09 2016 -0800

    DefaultHttp2Connection modifying child map while iterating
    
    Motivation:
    When DefaultHttp2Connection removes a stream it iterates over all children and adds them as children to the parent of the stream being removed. This process may remove elements from the child map while iterating without using the iterator's remove() method. This is generally unsafe and may result in an undefined iteration.
    
    Modifications:
    - We should use the Iterator's remove() method while iterating over the child map
    
    Result:
    Fixes https://github.com/netty/netty/issues/6163

commit 3c5e677964f3bc1bc8588a60116b4c35b6225e72
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Dec 22 13:53:15 2016 +0100

    Add assert to ensure we not create an endless loop and fix unsafe publication
    
    Motivation:
    
    [#6153] reports an endless loop that existed in the Recycler, while this was fixed adding a few asserts to ensure this remains fixed is a good thing. Beside this we also should ensure this can not escape the constructor to avoid unsafe publication.
    
    Modifications:
    
    - Add asserts
    - Fix unsafe publication
    
    Result:
    
    More correct code.

commit 7a4b0c32972b5d3b8d440f98e151b25d6d135ad3
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Dec 22 10:30:31 2016 +0100

    Add unit test that shows LineBasedFrameDelimiter correctly splits line.
    
    Motivation:
    
    Thought there may be a bug so added a testcase to verify everything works as expected.
    
    Modifications:
    
    Added testcase
    
    Result:
    
    More test-coverage.

commit 631077c79391fde22afdb1e43d0f642ba530101e
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Jan 7 01:04:29 2017 -0800

    EPOLL RDHUP processing
    
    Motivation:
    EpollRecvByteAllocatorHandle will read unconditionally if EPOLLRDHUP has been received. However we can just treat this the same was we do as data maybe pending in ET mode, and let LT mode notify us if we haven't read all data.
    
    Modifications:
    - EpollRecvByteAllocatorHandle should not always force a read just because EPOLLRDHUP has been received, but just treated as an indicator that there maybe more data to read in ET mode
    
    Result:
    Fixes https://github.com/netty/netty/issues/6173.

commit 583a59abb1c1b2cd99aeac5cbbd2e58c4b087880
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jan 3 09:51:00 2017 -0800

    ByteBufUtil.compare int underflow
    
    Motivation:
    ByteBufUtil.compare uses long arithmetic but doesn't check for underflow on when converting from long to int to satisfy the Comparable interface. This will result in incorrect comparisons and violate the Comparable interface contract.
    
    Modifications:
    - ByteBufUtil.compare should protect against int underflow
    
    Result:
    Fixes https://github.com/netty/netty/issues/6169

commit 2368f238ad75935f68221f35330934c4ee734ee8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jan 10 08:28:27 2017 +0100

    Fix typo in inner-class name
    
    Motivation:
    
    There is a typo in the inner-class name.
    
    Modifications:
    
    Fix typo.
    
    Result:
    
    One typo less. Fixes [#6185].

commit 72c9fc20844ba83295ad3df60c0251db6a736458
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Jan 7 21:19:14 2017 +0100

    Use href in WebSocketServer javadoc
    
    Motivation:
    
    We should use <a href=....> in the javadoc of WebSocketServer. See [#6172].
    
    Modifications:
    
    Use href.
    
    Result:
    
    Fix link in xref.

commit c1830c8b4ecf15fd3f06787e333dcd3b775dd5fb
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Jan 7 21:08:55 2017 +0100

    Fix missleading comment in AbstractChannelHandlerContext.invokeHandler()
    
    Motivation:
    
    The comment on AbstractChannelHandlerContext.invokeHandler() is incorrect and missleading. See [#6177]
    
    Modifications:
    
    Change true to false to correct the comment.
    
    Result:
    
    Fix missleading and incorrect comment.

commit 2457f386d8873d4b401571eb676c0b8b84288c76
Author: Shixiong Zhu <zsxwing@gmail.com>
Date:   Fri Jan 6 13:12:43 2017 -0800

    Set `prev` to null when setting `cursor` to `head` in `scavengeSome`.
    
    Motivation:
    
    `scavengeSome()` has a corner case: when setting `cursor` to `head`, `this.prev` may point to the tail of the  `WeakOrderQueue` linked list. Then it's possible that the following while loop will link the tail to the head, and cause endless loop.
    
    I made a reproducer in https://github.com/zsxwing/netty/commit/36522e7b72d61af8e4455162b2e33ce42194774d . The unit test will just run forever. Unfortunately, I cannot change it to a unit test because it needs to add some codes to `scavengeSome` to control the execution flow.
    
    Modification:
    
    Set `prev` to null when setting `cursor` to `head` in `scavengeSome`
    
    Result:
    
    Fixes #6153.

commit a8950dfc4cd0f0acc9900e315b98f518c3694e8f
Author: Max Zhuravkov <shhwwa@gmail.com>
Date:   Tue Jan 3 13:25:33 2017 +0300

    InternalThreadLocalMap.arrayList should create a reusable ArrayList only if arrayList field is NULL.
    
    Motivation:
    
    InternalThreadLocalMap.arrayList returns a new ArrayList every time it's called that defeats the purpose of having a reusable ArrayList.
    
    Modification:
    
    Modified InternalThreadLocalMap.arrayList to create an ArrayList only if arrayList field is NULL.
    
    Result:
    
    InternalThreadLocalMap.arrayList now creates a reusable ArrayList only if arrayList field is NULL.

commit 68a941c091f5a5b5d69715327db9ca77b53e1864
Author: Roger Kapsi <rkapsi@squarespace.com>
Date:   Wed Dec 28 11:24:52 2016 -0500

    Detecting actual Channel write idleness vs. slowness
    
    Motivation
    
    The IdleStateHandler tracks write() idleness on message granularity but does not take into consideration that the client may be just slow and has managed to consume a subset of the message's bytes in the configured period of time.
    
    Modifications
    
    Adding an optional configuration parameter to IdleStateHandler which tells it to observe ChannelOutboundBuffer's state.
    
    Result
    
    Fixes https://github.com/netty/netty/issues/6150

commit 56ddc47f23611f6e1c8009caf0b67f535a41802c
Author: Frederic BREGIER <frederic.bregier@culture.gouv.fr>
Date:   Thu Dec 22 18:08:59 2016 +0100

    Extends HttpPostRequestEncoder to support all methods except TRACE
    
    Motivation:
    
    In Netty, currently, the HttpPostRequestEncoder only supports POST, PUT, PATCH and OPTIONS, while the RFC 7231 allows with a warning that GET, HEAD, DELETE and CONNECT use a body too (but not TRACE where it is explicitely not allowed).
    The RFC in chapter 4.3 says:
    "A payload within a XXX request message has no defined semantics;
    sending a payload body on a XXX request might cause some existing
    implementations to reject the request."
    where XXX can be replaced by one of GET, HEAD, DELETE or CONNECT.
    
    Current usages, on particular in REST mode, tend to use those extra HttpMethods for such queries.
    
    So this PR proposes to remove the current restrictions, leaving only TRACE as explicitely not supported.
    
    Modification:
    
    In the constructor, where the test is done, replacing all by checking only against TRACE, and adding one test to check that all methods are supported or not.
    
    Result:
    
    Fixes #6138.

commit 0eeeb764391490585f690c8b424d9ce2d43e6a9b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Dec 21 14:35:53 2016 +0100

    Fix handling of FullHttpResponse when respond to HEAD in HttpServerCodec
    
    Motivation:
    
    cb139043f321836746915e7ada2d507ca45ed734 introduced special handling of response to HEAD requests. Due a bug we failed to handle FullHttpResponse correctly.
    
    Modifications:
    
    Correctly handle FullHttpResponse for HEAD requests.
    
    Result:
    
    Works as expected.

commit 074075de7ee8b67867af3494e6bc3dc1a7952522
Author: Jon Chambers <jon@turo.com>
Date:   Fri Dec 16 15:08:11 2016 -0500

    Expose channel pool configuration to subclasses.
    
    Motivation:
    
    `SimpleChannelPool` subclasses are likely to override the `connectChannel` method, and are likely to clobber the cloned `Bootstrap` handler in the process. To allow subclasses to properly notify the pool listener of new connections, we should expose (at least) the `handler` property of the pool to subclasses.
    
    Modifications:
    
    Expose `SimpleChannelPool` properties to subclasses via `protected` getters.
    
    Result:
    
    Subclasses can now use the bootstrap, handler, health checker, and health-check-on-release preoperties from their superclass.

commit 31da0ddbac1a07e6efa5e50334e09955b94ae62b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Dec 21 15:14:53 2016 +0100

    Revert "Disallow setting logger factory twice"
    
    This reverts commit 3c92f2b64a1c6803860ab310348abc9f1cb47ff4 which needs more thoughts and so will go into the next release.

commit 28c39a31832145cd7568099d65201a6f01f651c5
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Dec 20 15:15:57 2016 +0100

    Ensure we use a MPMC queue in ThreadDeathWatcher as it may be used from multiple threads at the same time.
    
    Motivation:
    
    We used a MPSC queue in ThreadDeathWatcher and checked if it empty via isEmpty() from multiple threads if very unlucky. Depending on the implementation this is not safe and may even produce things like live-locks.
    
    Modifications:
    
    Change to use a MPMC queue.
    
    Result:
    
    No more risk to run into issues when multiple threads call watch(...) / unwatch(...) concurrently.

commit 3d1133415179daab602db1709bdf01d7a297e9f3
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Dec 14 12:13:16 2016 -0800

    Fix DefaultChannelId MAC address parsing bug
    
    Motivation:
    DefaultChannelId provides a regular expression which validates if a user provided MAC address is valid. This regular expression may allow invalid MAC addresses and also not allow valid MAC addresses.
    
    Modifications:
    - Introduce a MacAddressUtil#parseMac method which can parse and validate the MAC address at the same time. The regular expression check before hand is additional overhead if we have to parse the MAC address.
    
    Result:
    Fixes https://github.com/netty/netty/issues/6132.

commit 3f82b53bae4120eaf452269f204595b78353ec2b
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Dec 16 11:55:32 2016 -0800

    Add unit test for HttpObjectDecoder with message split on buffer boundaries
    
    Motivation:
    We should have a unit test which explicitly tests a HTTP message being split between multiple ByteBuf objects.
    
    Modifications:
    - Add a unit test to HttpRequestDecoderTest which splits a request between 2 ByteBuf objects
    
    Result:
    More unit test coverage for HttpObjectDecoder.

commit 7c630feefc62b739afea123547165b9efb4281c0
Author: Jon Chambers <jon.chambers@gmail.com>
Date:   Sun Dec 18 18:48:43 2016 -0500

    Document and generalize `PromiseCombiner`
    
    Motivation:
    
    `PromiseCombiner` is really handy, but it's not obvious how to use it from its existing documentation/method signatures.
    
    Modification:
    
    - Added javadoc comments to explain the theory of operation of `PromiseCombiner`.
    - Generalized `PromiseCombiner` to work with `Futures` so it's clearer that the things for which it's listening won't be modified.
    
    Result:
    
    `PromiseCombiner` is easier to understand.

commit 16ddf460a62d9946f49d7169a077840bcdf6dc0e
Author: Malik Baktiyarov <malikbakt@gmail.com>
Date:   Fri Dec 16 02:59:11 2016 +0300

    Added checkStartsWith option for WebSocketServerProtocolHandler
    
    Motivation:
    
    Enables optional .startsWith() matching of req.uri() with websocketPath.
    
    Modifications:
    
    New checkStartsWith boolean option with default false value added to both WebSocketServerProtocolHandler and WebSocketServerProtocolHandshakeHandler. req.uri() matching is based on this option.
    
    Result:
    
    By default old behavior matching via .equal() is preserved. To use checkStartsWith use constructor shortcut: new WebSocketServerProtocolHandler(websocketPath, true) or fill this flag on full form of constructor among other options.

commit cfd8fb10db1df77183ffe464a7f2c7228f834715
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Dec 15 14:57:43 2016 +0000

    [#6134] Do not limit the PID to be <= 4194304
    
    Motivation:
    
    On some platforms the PID my be bigger then 4194304 so we should not limit it to 4194304.
    
    Modifications:
    
    Only check that the PID is a valid Integer
    
    Result:
    
    No more warnings on systems where the PID is bigger then 4194304.

commit 06e7627b5f39b96c05042d7bd85218560293fc19
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Nov 12 10:40:35 2016 -0800

    Read Only Http2Headers
    
    Motivation:
    A read only implementation of Http2Headers can allow for a more efficient usage of memory and more performant combined construction and iteration during serialization.
    
    Modifications:
    - Add a new ReadOnlyHttp2Headers class
    
    Result:
    ReadOnlyHttp2Headers exists and can be used for performance reasons when appropriate.
    
    ```
    Benchmark                                            (headerCount)  Mode  Cnt    Score   Error  Units
    ReadOnlyHttp2HeadersBenchmark.defaultClientHeaders               1  avgt   20   96.156 ± 1.902  ns/op
    ReadOnlyHttp2HeadersBenchmark.defaultClientHeaders               5  avgt   20  157.925 ± 3.847  ns/op
    ReadOnlyHttp2HeadersBenchmark.defaultClientHeaders              10  avgt   20  236.257 ± 2.663  ns/op
    ReadOnlyHttp2HeadersBenchmark.defaultClientHeaders              20  avgt   20  392.861 ± 3.932  ns/op
    ReadOnlyHttp2HeadersBenchmark.defaultServerHeaders               1  avgt   20   48.759 ± 0.466  ns/op
    ReadOnlyHttp2HeadersBenchmark.defaultServerHeaders               5  avgt   20  113.122 ± 0.948  ns/op
    ReadOnlyHttp2HeadersBenchmark.defaultServerHeaders              10  avgt   20  192.698 ± 1.936  ns/op
    ReadOnlyHttp2HeadersBenchmark.defaultServerHeaders              20  avgt   20  348.974 ± 3.111  ns/op
    ReadOnlyHttp2HeadersBenchmark.defaultTrailers                    1  avgt   20   35.694 ± 0.271  ns/op
    ReadOnlyHttp2HeadersBenchmark.defaultTrailers                    5  avgt   20   98.993 ± 2.933  ns/op
    ReadOnlyHttp2HeadersBenchmark.defaultTrailers                   10  avgt   20  171.035 ± 5.068  ns/op
    ReadOnlyHttp2HeadersBenchmark.defaultTrailers                   20  avgt   20  330.621 ± 3.381  ns/op
    ReadOnlyHttp2HeadersBenchmark.readOnlyClientHeaders              1  avgt   20   40.573 ± 0.474  ns/op
    ReadOnlyHttp2HeadersBenchmark.readOnlyClientHeaders              5  avgt   20   56.516 ± 0.660  ns/op
    ReadOnlyHttp2HeadersBenchmark.readOnlyClientHeaders             10  avgt   20   76.890 ± 0.776  ns/op
    ReadOnlyHttp2HeadersBenchmark.readOnlyClientHeaders             20  avgt   20  117.531 ± 1.393  ns/op
    ReadOnlyHttp2HeadersBenchmark.readOnlyServerHeaders              1  avgt   20   29.206 ± 0.264  ns/op
    ReadOnlyHttp2HeadersBenchmark.readOnlyServerHeaders              5  avgt   20   44.587 ± 0.312  ns/op
    ReadOnlyHttp2HeadersBenchmark.readOnlyServerHeaders             10  avgt   20   64.458 ± 1.169  ns/op
    ReadOnlyHttp2HeadersBenchmark.readOnlyServerHeaders             20  avgt   20  107.179 ± 0.881  ns/op
    ReadOnlyHttp2HeadersBenchmark.readOnlyTrailers                   1  avgt   20   21.563 ± 0.202  ns/op
    ReadOnlyHttp2HeadersBenchmark.readOnlyTrailers                   5  avgt   20   41.019 ± 0.440  ns/op
    ReadOnlyHttp2HeadersBenchmark.readOnlyTrailers                  10  avgt   20   64.053 ± 0.785  ns/op
    ReadOnlyHttp2HeadersBenchmark.readOnlyTrailers                  20  avgt   20  113.737 ± 4.433  ns/op
    ```

commit fe2b55cea124507a9613955d698ca8788f9ed225
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Dec 6 16:37:17 2016 +0100

    Allow to disable deleting of the native library file after it is loaded.
    
    Motivation:
    
    When profiling it is sometimes needed to still have the native library file avaible. We should allow to disable the explicit deletion and just delete it when the JVM stops.
    
    This is related to #6110
    
    Modifications:
    
    Add io.netty.native.deleteLibAfterLoading system property which allows to disable the explicit delete after laoding
    
    Result:
    
    Possible to profile native libraries better.

commit 89cb50aefaceac53dfafa7bf8d20637bcbb3bfa8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Dec 15 15:28:06 2016 +0000

    Explicit disable support of SSL / TLS Compression
    
    Motivation:
    
    Our ReferenceCountedOpenSslEngine does not support compression so we should explicit disable it.
    This is related to #3722.
    
    Modifications:
    
    Set SSL_OP_NO_COMPRESSION option.
    
    Result:
    
    Not use compression.

commit cd458f10bcd0ecd0532515c4b880c6a30a6c02f5
Author: Nikolaj Hald Nielsen <nnielsen@twitter.com>
Date:   Wed Nov 23 11:32:41 2016 -0800

    Server returns status 431 on header size errors
    
    Motivation:
    
    Currently clients attempting to send headers that are too large recieve
    a RST frame. This makes it harder than needed for implementations on top
    of netty to handle this in a graceful way.
    
    Modifications:
    
    When the Decoder throws a StreamError of type FRAME_SIZE_ERROR, the
    Http2ConnectionHandler will now attempt to send an Http2Header with
    status 431 and endOfStream=true
    
    Result:
    
    Implementations now do not have to subclass parts of netty to handle
    431s

commit 89e93968ac601cbe3d6ca105abbefc99adcb56be
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Dec 9 15:51:14 2016 +0100

    Remove usage of own Atomic*FieldUpdater in favor of JDKs
    
    Motivation:
    
    In later Java8 versions our Atomic*FieldUpdater are slower then the JDK implementations so we should not use ours anymore. Even worse the JDK implementations provide for example an optimized version of addAndGet(...) using intrinsics which makes it a lot faster for this use-case.
    
    Modifications:
    
    - Remove methods that return our own Atomic*FieldUpdaters.
    - Use the JDK implementations everywhere.
    
    Result:
    
    Faster code.

commit 5fec897ef789a4004c59d844c971230da6a6949c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Dec 12 14:26:33 2016 +0100

    Fail build when unused c code is detected
    
    Motivation:
    
    To keep our code clean we should fail the build when unused c code is detected.
    
    Modifications:
    
    - Add '-Wunused-variable' to build flags
    
    Result:
    
    Cleaner code.

commit cb139043f321836746915e7ada2d507ca45ed734
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Dec 12 07:54:58 2016 +0100

    [#5831] HttpServerCodec cannot encode a respons e to HEAD
     request with a 'content-encoding: chunked' header
    
    Motivation:
    
    It is valid to send a response to a HEAD request that contains a transfer-encoding: chunked header, but it is not valid to include a body, and there is no way to do this using the netty4 HttpServerCodec.
    
    The root cause is that the netty4 HttpObjectEncoder will transition to the state ST_CONTENT_CHUNK and the only way to transition back to ST_INIT is through the encodeChunkedContent method which will write the terminating length (0\r\n\r\n\r\n), a protocol error when responding to a HEAD request
    
    Modifications:
    
    - Keep track of the method of the request and depending on it handle the response differently when encoding it.
    - Added a unit test.
    
    Result:
    
    Correclty handle HEAD responses that are chunked.

commit 4639d56596f5dd023bcb515d3d9e3f16cbc3217e
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Dec 6 12:28:11 2016 -0800

    HttpToHttp2ConnectionHandlerTest increase setup timeout
    
    Motivation:
    The 2 second timeout to bootstrap the test can timeout on the build servers. We should increase the timeout so it is less likely under powered or over worked machines are less likely to generate false failures.
    
    Modifications:
    - HttpToHttp2ConnectionHandlerTest setup timeout changed from 2 to 5 seconds
    
    Result:
    Less false build failures.

commit 712c16ad83f892933f16916f8586354daf3d731a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Dec 5 08:10:17 2016 +0100

    Ensure leak aware buffers correctly close the ResourceLeakTracker
    
    Motivation:
    
    We should assert that the leak aware buffers correctly close the ResourceLeakTracker in the unit tests.
    
    Modifications:
    
    - Keep track of NoopResourceLeakTrackers and check if these were closed once the test completes
    - Fix bugs in tests so the buffers are all released.
    
    Result:
    
    Better tests for leak aware buffers

commit f6ac8b5d321fff908446c72a8546643f53e7c277
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Dec 8 10:28:34 2016 +0100

    [#6114] Increase test timeout for test introduced in c2f4daa7398a9363fde8e51bf52c0d0323f870a5
    
    Motivation:
    
    c2f4daa7398a9363fde8e51bf52c0d0323f870a5 added a unit test but used a too small test timeout.
    
    Modifications:
    
    Increase timeout.
    
    Result:
    
    Test should have enough time to complete on the CI.

commit 42fca7a2fb71835ee64f3dd1a55c881038f00b19
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Dec 5 14:30:52 2016 +0100

    Allow to run tests with extra commandline arguments
    
    Motivation:
    
    Often its useful to run the tests with different commandline arguments (like different system properties).
    
    Modifications:
    
    Introduce argLine.javaProperties which can be set from the commandline as well to add arguments that should be append when run the unit tests.
    
    Result:
    
    More flexible way to run the tests.

commit 3c92f2b64a1c6803860ab310348abc9f1cb47ff4
Author: Jason Tedor <jason@tedor.me>
Date:   Mon Dec 5 08:19:51 2016 -0500

    Disallow setting logger factory twice
    
    Motivation:
    
    InternalLoggerFactory either sets a default logger factory
    implementation based on the logging implementations on the classpath, or
    applications can set a logger factory explicitly. If applications wait
    too long to set the logger factory, Netty will have already set a logger
    factory leading to some objects using one logging implementation and
    other objets using another logging implementation. This can happen too
    if the application tries to set the logger factory twice, which is
    likely a bug in the application. Yet, the Javadocs for
    InternalLoggerFactory warn against this saying that
    InternalLoggerFactory#setLoggerFactory "should be called as early as
    possible and shouldn't be called more than once". Instead, Netty should
    guard against this.
    
    Modications:
    
    We replace the logger factory field with an atomic reference on which we
    can do CAS operations to safely guard against it being set twice. We
    also add an internal holder class that captures the static interface of
    InternalLoggerFactory that can aid in testing.
    
    Result:
    
    The logging factory can not be set twice, and applications that want to
    set the logging factory must do it before any Netty classes are
    initialized (or the default logger factory will be set).

commit 24b39bc2874fd87d7f892727d45bf8cc102e5955
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Dec 1 09:58:54 2016 +0100

    Only schedule a ThreadDeathWatcher task if caches are used.
    
    Motivation:
    
    If caches are disabled it does not make sense to schedule a task that will free up memory consumed by the caches.
    
    Modifications:
    
    Do not schedule if caches are disabled.
    
    Result:
    
    Less overhead.

commit 2055f4cf127519e337e19fb236a107587dd03950
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Dec 5 20:55:45 2016 +0100

    Correctly handle the case when BUFFER_OVERFLOW happens during unwrap but the readable bytes are bigger then the expected applicationBufferSize
    
    Motivation:
    
    We need to ensure we handle the case when BUFFER_OVERFLOW happens during unwrap but the readable bytes are bigger then the expected applicationBufferSize. Otherwise we may produce an IllegalArgumentException as we will try to allocate a buffer with capacity < 0.
    
    Modifications:
    
    - Guard against this case.
    - Ensure we not double release buffer on exception when doing unwrap.
    
    Result:
    
    No more exception when running testsuite with java 9.

commit 3539ba6f08a6c832dc9048cf5d6a6c71d6513708
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Nov 30 17:34:14 2016 -0800

    Use GitHub Issue/PR Template Feature
    
    Motivation:
    GitHub recently added the ability to setup PR and Issue templates https://github.com/blog/2111-issue-and-pull-request-templates. We should take advantage of this feature to ensure Issues / PRs are properly formed.
    
    Modifications:
    - add a .github directory with a CONTRIBUTING.md, ISSUE_TEMPLATE.md, and PULL_REQUEST_TEMPLATE.md file
    
    Result:
    Fixes https://github.com/netty/netty/issues/6074.

commit 41ea9fa3b6ea463d82f043f9d7c0f4c34f1c6376
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Dec 7 14:06:04 2016 +0100

    Ensure SSLErrorTest also works with boringssl
    
    Motivation:
    
    boringssl uses different messages for the ssl alerts which are all uppercase. As we try to match case as well this fails in SSLErrorTest as we expect lower-case.
    
    This test was introduced by 9b7fb2f3620449c8cfafa62fd294cb82600f043a.
    
    Modifications:
    
    Ensure we first translate everything to lower-case before doing the assert.
    
    Result:
    
    SSLErrorTest also pass when boringssl is used.

commit 8d664fa0fdf05339e52e195709838dc7cc290eca
Author: T Jake Luciani <jake@apache.org>
Date:   Tue Dec 6 10:19:43 2016 -0500

    Include frame-pointer to improve epoll flamegraph tracing
    
    Motivation:
    
    When attempting to flamegraph netty w/ epoll it was noticed the stacks are lost going from
    java to epoll lib.
    
    Modifications:
    
    added the -fno-omit-framepointer flag to compiler flags to ensure the fp is kept intact
    
    Result:
    
    Flamegraphs will now show native code in the same stack as java code using perf-java-flames

commit 002c99e751ec24e80236a310bd46e0098bdb636d
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Dec 5 08:50:30 2016 -0800

    NIO ServerChannel shouldn't close because of Exception
    
    Motivation:
    e102a008b63d0063581ba242539f0a8d473cae00 changed a conditional where previously the NIO ServerChannel would not be closed in the event of an exception.
    
    Modifications:
    - Restore the logic prior to e102a008b63d0063581ba242539f0a8d473cae00 which does not automatically close ServerChannels for IOExceptions
    
    Result:
    NIO ServerChannel doesn't close automatically for an IOException.

commit eed6791f8e9ce0a37f655a0bccfc521794d86e99
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Dec 5 12:18:35 2016 +0100

    Cleanup after commit fc1cdc991e71f504cf0d9fdb5aa60034fda04a28

commit 13a8ebade49781c7a645c7595d39020604d65490
Author: Norman Maurer <norman.maurer@googlemail.com>
Date:   Sun Dec 4 23:09:23 2016 +0100

    Correctly handle the case when no ResourceLeakTracker was created for derived pooled buffers. This was missed in c2f4daa7398a9363fde8e51bf52c0d0323f870a5

commit fc1cdc991e71f504cf0d9fdb5aa60034fda04a28
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Dec 2 22:03:56 2016 +0100

    [#6095] Remove catching of ConcurrentModificationException as this can not happen.
    
    Motivation:
    
    We should not catch ConcurrentModificationException as this can never happen because things are executed on the EventLoop thread.
    
    Modifications:
    
    Remove try / catch
    
    Result:
    
    Cleaner code.

commit c2f4daa7398a9363fde8e51bf52c0d0323f870a5
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Dec 1 08:36:16 2016 +0100

    Fix false-positives when using ResourceLeakDetector.
    
    Motivation:
    
    We need to ensure the tracked object can not be GC'ed before ResourceLeak.close() is called as otherwise we may get false-positives reported by the ResourceLeakDetector. This can happen as the JIT / GC may be able to figure out that we do not need the tracked object anymore and so already enqueue it for collection before we actually get a chance to close the enclosing ResourceLeak.
    
    Modifications:
    
    - Add ResourceLeakTracker and deprecate the old ResourceLeak
    - Fix some javadocs to correctly release buffers.
    - Add a unit test for ResourceLeakDetector that shows that ResourceLeakTracker has not the problems.
    
    Result:
    
    No more false-positives reported by ResourceLeakDetector when ResourceLeakDetector.track(...) is used.

commit 7ce0f35b69a30fcfcd37c9602a1be30077336d3e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Dec 1 09:41:30 2016 +0100

    Correctly not try to call handshake() when engine is already closed.
    
    Motivation:
    
    We need to ensure we not call handshake() when the engine is already closed. Beside this our implementation of isOutboundDone() was not correct as it not took the pending data in the outbound buffer into acount (which may be also generated as part of an ssl alert). Beside this we also called SSL_shutdown(...) while we were still in init state which will produce an error and so noise in the log with openssl later versions.
    
    This is also in some extend related to #5931 .
    
    Modifications:
    
    - Ensure we not call handshake() when already closed
    - Correctly implement isOutboundDone()
    - Not call SSL_shutdown(...) when still in init state
    - Added test-cases
    
    Result:
    
    More correct behaviour of our openssl SSLEngine implementation.

commit 0ca2c3016b1e8aa1fa8d789ce3eac68ffff3d912
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Dec 1 09:30:26 2016 +0100

    Correct guard against non SSL data in ReferenceCountedOpenSslEngine
    
    Motivation:
    
    When non SSL data is passed into SSLEngine.unwrap(...) we need to throw an SSLException. This was not done at the moment. Even worse we threw an IllegalArgumentException as we tried to allocate a direct buffer with capacity of -1.
    
    Modifications:
    
    - Guard against non SSL data and added an unit test.
    - Make code more consistent
    
    Result:
    
    Correct behaving SSLEngine implementation.

commit ae1234c3033d81027c766c0f6d01eafd811b3a08
Author: Norman Maurer <norman.maurer@googlemail.com>
Date:   Sat Dec 3 21:01:36 2016 +0100

    Replace internal class usage to make it compile on java9. This was missed in f332a00.

commit f332a00e1a1b131d866dc2b86916d97f3a1bcf17
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Dec 1 09:20:14 2016 +0100

    Support compiling netty with Java9
    
    Motivation:
    
    Java9 will be released soon so we should ensure we can compile netty with Java9 and run all our tests. This will help to make sure Netty will be usable with Java9.
    
    Modification:
    
    - Add some workarounds to be able to compile with Java9, note that the full profile is not supported with Java9 atm.
    - Remove some usage of internal APIs to be able to compile on java9
    - Not support Alpn / Npn and so not run the tests when using Java9 for now. We will do a follow up PR to add support.
    
    Result:
    
    Its possible to build netty and run its testsuite with Java9.

commit 39aefdfa06f89ae69cdb42481bdea2194ad2b62c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Dec 2 11:06:02 2016 +0100

    Fix buffer leaks in tests
    
    Motivation:
    
    While working on #6087 some buffer leaks showed up.
    
    Modifications:
    
    Correctly release buffers.
    
    Result:
    
    No more buffer leaks in memcache and stomp codec tests.

commit efeb4cd8cbb148bb252a07f8a2664cd77ea7b5ea
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Dec 2 13:55:37 2016 +0100

    Add codec-smtp to all jar.
    
    Motivation:
    
    562d8d220028fbb3d62028bc5879a121dff2fdbd added codec-smtp but we missed to add it to the all jar.
    
    Modifications:
    
    Include codec-smtp in the all jar.
    
    Result:
    
    Include all codecs in the all jar.

commit 243b2b9f193c8459c56ad9196401c46f9584b7e4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Nov 23 13:26:56 2016 +0100

    PooledByteBufAllocatorTest may has memory visiblity issues as it uses non concurrent queue
    
    Motivation:
    
    PooledByteBufAllocatorTest uses an ArrayQueue but access it from multiple threads (not concurrently but still from different threads). This may leak to memory visibility issues.
    
    Modifications:
    
    - Use a concurrent queue
    - Some cleanup
    
    Result:
    
    Non racy test code.

commit 2b8fd8d43be916e29836943fc9d57ec494251756
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Nov 22 16:18:23 2016 +0100

    Allow to disable caching in PooledByteBufAllocator for non FastThreadLocalThreads
    
    Motivation:
    
    If a user allocates a lot from outside the EventLoop we may end up creating a lot of caches in the PooledByteBufAllocator. This may be wasteful and so it may be useful for an other to configure that caches should only be used from within EventLoops.
    
    Modifications:
    
    Add new constructor which allows to configure the caching behaviour.
    
    Result:
    
    More flexible configuration of PooledByteBufAllocator possible

commit fd0ae840b64120efd2a29ba96f0467fda0f21dad
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Dec 1 08:13:33 2016 +0100

    Small performance improvements in ResourceLeakDetector
    
    Motivation:
    
    42fba015ce82ab4ab30e547c888db82fe74094e9 changed the implemention of ResourceLeakDetector to improve performance. While this was done a branch was missed that can be removed. Beside this  using a Boolean as value for the ConcurrentMap is sub-optimal as when calling remove(key, value) an uncessary instanceof check and cast is needed on each removal.
    
    Modifications:
    
    - Remove branch which is not needed anymore
    - Replace usage of Boolean as value type of the ConcurrentMap and use our own special type which only compute hash-code one time and use a == operation for equals(...) to reduce overhead present when using Boolean.
    
    Result:
    
    Faster and cleaner ResourceLeakDetector.

commit 2de644224cfa383d282c960107a88ebbd5d1409c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Nov 25 08:06:28 2016 +0100

    Correctly mark EpollServerDomainSocketChannel.isActive() as true after bind is complete.]
    
    Motivation:
    
    We missed to set active = true in EpollServerDomainSocketChannel.doBind(...) which also means that channelActive(...) was never triggered.
    
    Modifications:
    
    Correct set active = true in doBind(...)
    
    Result:
    
    EpollServerDomainSocketChannel is correctly set to active when bound.

commit 5bc447c539e3560391bd9df78f23055d69971a66
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Nov 29 14:35:06 2016 +0100

    Allow to build netty when sun.misc.Unsafe is not avaible or -Dio.netty.noUnsafe=true is used.
    
    Motivation:
    
    We support using Netty without sun.misc.Unsafe, so we should also support building it without it. This way we can also run all tests without sun.misc.Unsafe and so see if it works as expected.
    
    Modifications:
    
    Correctly skip tests that depend on sun.misc.Unsafe if its not present or -Dio.netty.noUnsafe=true is used.
    
    Result:
    
    Be able to build netty without sun.misc.Unsafe

commit feae0435b5bc17d6e72a5370947564c891517387
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Nov 24 14:01:13 2016 +0100

    SwappedByteBuf.unwrap() should return wrapped buffer.
    
    Motivation:
    
    SwappedByteBuf.unwrap() not returned the wrapped buffer but the buffer that was wrapped by the original buffer. This is not correct.
    
    Modifications:
    
    Correctly return wrapped buffer and fix test.
    
    Result:
    
    SwappedByteBuf.unwrap() works as expected.

commit 6dbec4181cabe2d836e4a46b253d2f400fa296ac
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Dec 1 08:06:06 2016 +0100

    Ensure we not complete the same promise that may be failed because of outbound handler exception.
    
    Motivation:
    
    It's important that we do not pass in the original ChannelPromise to safeClose(...) as when flush(...) will throw an Exception it will be propagated to the AbstractChannelHandlerContext which will try to fail the promise because of this. This will then fail as it was already completed by safeClose(...).
    
    Modifications:
    
    Create a new ChannelPromise and pass it to safeClose(...).
    
    Result:
    
    No more confusing logs because of failing to fail the promise.

commit d1c8b099a50b5960c91f3ac938f2dc202cd3cec7
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Nov 24 13:52:28 2016 +0100

    Correct release buffers in RedisEncoderTest
    
    Motivation:
    
    RedisEncoderTest did not release all buffers correctly which could lead to leaks.
    
    Modifications:
    
    Call ByteBuf.release() after buffer is read.
    
    Result:
    
    No more leaks in RedisEncoderTest.

commit f70757da2a71db93c3b2108cef86d8a45ef67c08
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Nov 21 08:23:42 2016 +0100

    [#6015] Fix racy PooledByteBufAllocatorTests
    
    Motivation:
    
    We had a few tests PooledByteBufAllocatorTests which used parkNanos(...) to give a resource enough time to get destroyed. This is race and may not be good enough.
    
    Modifications:
    
    Ensure the ThreadCache is really destroyed.
    
    Result:
    
    No more racy tests that depend on ThreadCaches.

commit ea0ddc0ea2cd11071bb960c7ff1aeade7bc1c1cb
Author: Stephane Maldini <smaldini@pivotal.io>
Date:   Mon Nov 28 12:49:36 2016 +0000

    fix #6066 Support optional filename in HttpPostRequestEncoder
    
    Motivation:
    
    According to https://www.ietf.org/rfc/rfc2388.txt 4.4, filename after "content-disposition" is optional and arbitrary (does not need to match a real filename).
    
    Modifications:
    
    This change supports an extra addBodyFileUpload overload to precise the filename (default to File.getName). If empty or null this argument should be ignored during encoding.
    
    Result:
    - A backward-compatible addBodyFileUpload(String, File, String, boolean) to use file.getName() as filename.
    - A new addBodyFileUpload(String, String, File, String, boolean) overload to precise filename
    - Couple of tests for the empty use case

commit 55c291ae5bdb7ac79464c4f838ca0aaaba6518fe
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Nov 22 15:26:16 2016 -0800

    SslHandlerTest ByteBuf leak
    
    Motivation:
    We are now more careful to flush alerts that are generated when errors occur. We should also be more careful in unit tests to release any buffers that may be queued due to potential errors wich result in alerts.
    
    Modifications:
    - When SslHandlerTest uses EmbeddedChannel we should always call finishAndReleaseAll
    
    Results:
    Fixes https://github.com/netty/netty/issues/6057

commit 7dac4fdd250c5638e02511e00d22ddf2a6ecf4d1
Author: Jason Tedor <jason@tedor.me>
Date:   Mon Nov 28 17:25:24 2016 -0500

    Do not try to be unsafe when told not to be unsafe
    
    Motivation:
    
    Netty has a flag (io.netty.noUnsafe) for specifying to Netty to not be
    unsafe. Yet, when initializing PlatformDependent0, Netty still tries to
    be unsafe. For application that specify to Netty to not be unsafe and
    run under a security manager, this can lead to an obnoxious (debug
    level) stack trace. Since Netty was told not to be unsafe, Netty should
    not try to be unsafe.
    
    Modifications:
    
    The initialization logic in PlatformDependent0 should take into account
    that Netty was told not to be unsafe. This means that we need to
    initialize PlatformDependent#IS_EXPLICIT_NO_UNSAFE as soon as possible,
    before the static initializer for PlatformDependent0 has a chance to
    run. Thus the following modifications are made:
     - initialize PlatformDependent#IS_EXPLICIT_NO_UNSAFE before any other
       code in PlatformDependent causes PlatformDependent0 to initialize
     - expose the value of PlatformDependent#IS_EXPLICIT_NO_UNSAFE for
       reading in PlatformDependent0
     - take the value of PlatformDependent#IS_EXPLICIT_NO_UNSAFE into
       account in PlatformDependent0
    
    Result:
    
    Netty does not try to be unsafe when told not to be unsafe.

commit b9959c869b49a57316de034d94404d372cfbe571
Author: Jason Tedor <jason@tedor.me>
Date:   Mon Nov 28 18:20:23 2016 -0500

    Do not eagerly initialize the logger factory
    
    Motivation:
    
    For applications that set their own logger factory, they want that
    logger factory to be the one logger factory. Yet, Netty eagerly
    initializes this and then triggers initialization of other classes
    before the application has had a chance to set its preferred logger
    factory.
    
    Modifications:
    
    With this commit there are two key changes:
     - Netty does not attempt to eagerly initialize the default logger
       factory, only doing so if the application layer above Netty has not
       already set a logger factory
     - do not eagerly initialize unrelated classes from the logger factory;
       while the motivation behind this was to initialize ThreadLocalRandom
       as soon as possible in case it has to block reading from /dev/random,
       this can be worked around for applications where it is problematic by
       setting securerandom.source=file:/dev/urandom in their Java system
       security policy (no, it is not less secure; do not even get me
       started on myths about /dev/random)
    
    Result:
    
    Netty uses the logger factory that the application prefers, and does not
    initialize unrelated classes.

commit f6b37a38bac6dbea5dd2282c68a0f41c456f67a2
Author: Derbylock <derbylock@gmail.com>
Date:   Wed Nov 23 14:11:34 2016 +0300

    Removed final keyword from FixedChannelPool

commit ba95c401a7cf8c7923fce660e16c8ba567d62f30
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Mon Nov 21 22:18:47 2016 +0100

    Misc clean up
    
    Motivation:
    IntelliJ issues several warnings.
    
    Modifications:
    
    * `ClientCookieDecoder` and `ServerCookieDecoder`:
      * `nameEnd`, `valueBegin` and `valueEnd` don't need to be initialized
      * `keyValLoop` loop doesn't been to be labelled, as it's the most inner one (same thing for labelled breaks)
      * Remove `if (i != headerLen)` as condition is always true
    * `ClientCookieEncoder` javadoc still mention old logic
    * `DefaultCookie`, `ServerCookieEncoder` and `DefaultHttpHeaders` use ternary ops that can be turned into simple boolean ones
    * `DefaultHeaders` uses a for(int) loop over an array. It can be turned into a foreach one as javac doesn't allocate an iterator to iterate over arrays
    * `DefaultHttp2Headers` and `AbstractByteBuf` `equal` can be turned into a single boolean statement
    Result:
    
    Cleaner code

commit 4e2530c171edc98a94ea91fda1e988963b0cbf38
Author: radai-rosenblatt <radai.rosenblatt@gmail.com>
Date:   Thu Sep 29 12:32:26 2016 -0700

    fix 5868 -fix DefaultHostsFileEntriesResolverTest to pass on windows 7
    
    Motivation:
    
    Windows 7 hosts file is empty by default (at least on my machine? see
    http://serverfault.com/questions/4689/windows-7-localhost-name-resolution-is-handled-within-dns-itself-why
    for details and reasoning.
    
    the test relies on the file containing an entry for localhost.
    
    Modifications:
    
    refactor class code to 1st normalize the input host name and then look it up, change the test to verify
    that hostnames are normalized in a case-insensitive way before being looked up (which was the intent
    of the original test)
    
    Result:
    
    test should pass on vanilla windows 7 (and any other machine with no
    localhost in the hosts file). no effect anywhere else or on actual netty
    code.
    
    Signed-off-by: radai-rosenblatt <radai.rosenblatt@gmail.com>

commit f755e584638e20a4ae62466dd4b7a14954650348
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Mon Nov 21 21:29:44 2016 +0100

    Clean up following #6016
    Motivation:
    
    * DefaultHeaders from netty-codec has some duplicated logic for header date parsing
    * Several classes keep on using deprecated HttpHeaderDateFormat
    
    Modifications:
    
    * Move HttpHeaderDateFormatter to netty-codec and rename it into HeaderDateFormatter
    * Make DefaultHeaders use HeaderDateFormatter
    * Replace HttpHeaderDateFormat usage with HeaderDateFormatter
    
    Result:
    
    Faster and more consistent code

commit 930633350d6b42831bc079675e521ee8f4d4e7e4
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Nov 17 20:56:19 2016 -0800

    Consistency between pooled/unpooled derived buffers
    
    Motivation:
    4bba7526e2f58018817972f38279cc232f519100 introduced changes which made pooled and unpooled derived buffers inconsistent in a few ways:
    - Pooled derived buffers always generated a duplicate buffer when duplicate() was called and always generated a sliced buffer when slice() was called. Unpooled derived buffers some times generated a sliced buffer when duplicate() was called.
    - The indexes that were set for duplicate buffers generated from slices were not always consistent.
    There were also some various bugs in the derived pooled buffer implementation.
    
    Modifications:
    - Make pooled/unpooled consistently generate duplicate buffers when duplicate() is called and sliced buffers when slice() is called.
    - Fix bugs in the derived pooled buffer
    
    Result:
    More consistent behavior from the derived pooled/unpooled buffers.

commit f289ebf7fab65c9a9bf491a5060ce75c294ca60c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Nov 16 15:47:07 2016 +0100

    Ensure alert is send when SSLException happens during calling SslHandler.unwrap(...)
    
    Motivation:
    
    When the SslHandler.unwrap(...) (which is called via decode(...)) method did produce an SSLException it was possible that the produced alert was not send to the remote peer. This could lead to staling connections if the remote peer did wait for such an alert and the connection was not closed.
    
    Modifications:
    
    - Ensure we try to flush any pending data when a SSLException is thrown during unwrapping.
    - Fix SniHandlerTest to correct test this
    - Add explicit new test in SslHandlerTest to verify behaviour with all SslProviders.
    
    Result:
    
    The alert is correctly send to the remote peer in all cases.

commit a25101dd0bb040d340b999dcec48953314202182
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Nov 21 10:46:21 2016 -0800

    Now that LocalChannel#releaseInboundBuffers is only called from the EventLoop (eb4d317b9d64f3945a209804fec4c3fe695f4f9f) it should clear readInProgress and drain/release the queue. Otherwise if a read event is pending (doBeginRead) was called we may later call channelRead or channelReadComplete after we have closed the channel.
    
    Modifications:
    LocalChannel#releaseInboundBuffers should always clear/release the queue and set readInProgress to false
    
    Result:
    LocalChannel queue is more reliably cleaned up.

commit eb4d317b9d64f3945a209804fec4c3fe695f4f9f
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Nov 16 14:03:57 2016 -0800

    Fix LocalChannel close sequence
    
    Motivation:
    LocalChannel attempts to close its peer socket when ever it is closed. However if the channels are on different EventLoops we may attempt to process events for the peer channel on the wrong EventLoop.
    
    Modifications:
    - Ensure the close process ensures we are on the correct thread before accessing data
    
    Result:
    More correct LocalChannel close code.

commit 886a7aae465cceb5f90ede01d98de31e35ae404a
Author: radai-rosenblatt <radai.rosenblatt@gmail.com>
Date:   Sun Nov 20 17:06:52 2016 -0800

    Fix timestamp parsing in HttpHeaderDateFormatter
    
    Motivation:
    code assumes a numeric value of 0 means no digits were read between separators, which fails for timestamps like 00:00:00.
    also code accepts invalid timestamps like 0:0:000
    
    Modifications:
    explicitly check for number of digits between separators instead of relying on the numeric value.
    also add tests.
    
    Result:
    timestamps with 00 successfully parse, timestamps with 000 no longer
    
    Signed-off-by: radai-rosenblatt <radai.rosenblatt@gmail.com>

commit 9b7fb2f3620449c8cfafa62fd294cb82600f043a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Nov 16 15:16:19 2016 +0100

    Use the correct alert depending on the CertificateException when using OpenSslEngine
    
    Motivation:
    
    We tried to detect the correct alert to use depending on the CertificateException that is thrown by the TrustManager. This not worked all the time as depending on the TrustManager implementation it may also wrap a CertPathValidatorException.
    
    Modification:
    
    - Try to unwrap the CertificateException if needed and detect the right alert via the CertPathValidatorException.
    - Add unit to verify
    
    Result:
    
    Send the correct alert depending on the CertificateException when using OpenSslEngine.

commit e5070b726613cc6c1297ce2cc2dd5ab377cf0fbc
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Nov 18 11:39:21 2016 +0000

    [#6023] Ensure LastInboundHandler correctly handle different events / data
    
    Motivation:
    
    LastInboundHandler maintains 2 queues which may contain the same data and tries to match these up when you read elements out of it. Because of this it can happen that you remove an element only out of one queue and so double free stuff later.
    
    Modifications:
    
    Just use one "queue" to store things.
    
    Result:
    
    Not possible to only remove things from one queue and so get into trouble later when release everything that sits in the handler.

commit 0b3122d8ff632e409524b6f3d54435156e70ffa2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Nov 16 08:13:39 2016 +0100

    Deprecate HttpUtil.getCharsetAsString(...) and introduce HttpUtil.getCharsetAsSequence(...).
    
    Motivation:
    
    The method HttpUtil.getCharsetAsString(...) is missleading as its return type is CharSequence and not String.
    
    Modifications:
    
    Deprecate HttpUtil.getCharsetAsString(...) and introduce HttpUtil.getCharsetAsSe
    quence(...).
    
    Result:
    
    Less confusing method name.

commit 782b7bcf4a1db5f33078fe8f7ded8059770f7fc4
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Nov 16 14:03:57 2016 -0800

    Fix HTTP/2 test cleanup with LocalChannel
    
    Motivation:
    When a LocalChannel is closed it is responsible to ensure all queued objects are released. When a LocalChannel is closed it will also close its peer channel. However in HTTP/2 unit tests we may not wait until all channels have completed the shutdown process before destroying the threads and exiting the test. This may mean buffers are GCed before they are released and be reported as a leak.
    
    Modifications:
    - In HTTP/2 tests when we use LocalChannel we should wait for all channels to close before exiting the test and cleaning up the associated EventLoopGroups.
    
    Result:
    More correct usage of LocalChannel in HTTP/2 tests.

commit a043cf4a983465cd7c221cefc8915121a30f621e
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Nov 18 09:04:09 2016 -0800

    Catch exceptions from PlatformDependent#getSystemClassLoader
    
    Motivation:
    PlatformDependent#getSystemClassLoader may throw a wide variety of exceptions based upon the environment. We should handle all exceptions and continue initializing the slow path if an exception occurs.
    
    Modifications:
    - Catch Throwable in cases where PlatformDependent#getSystemClassLoader is used
    
    Result:
    Fixes https://github.com/netty/netty/issues/6038

commit c2565d8dd224e8c3cfd6138d80fc8ef9dfac8725
Author: Norman Maurer <norman.maurer@googlemail.com>
Date:   Fri Nov 18 14:47:42 2016 +0000

    Remove usage of releaseLater(...) that was missed in 0bc30a123e88bc7b038e0c260937581097a903f7

commit edc4842309ad0491b7f2088c8116318b3d680db8
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Mon Nov 14 12:33:03 2016 +0100

    Fix cookie date parsing, close #6016
    
    Motivation:
    * RFC6265 defines its own parser which is different from RFC1123 (it accepts RFC1123 format but also other ones). Basically, it's very lax on delimiters, ignores day of week and timezone. Currently, ClientCookieDecoder uses HttpHeaderDateFormat underneath, and can't parse valid cookies such as Github ones whose expires attribute looks like "Sun, 27 Nov 2016 19:37:15 -0000"
    * ServerSideCookieEncoder currently uses HttpHeaderDateFormat underneath for formatting expires field, and it's slow.
    
    Modifications:
    * Introduce HttpHeaderDateFormatter that correctly implement RFC6265
    * Use HttpHeaderDateFormatter in ClientCookieDecoder and ServerCookieEncoder
    * Deprecate HttpHeaderDateFormat
    
    Result:
    * Proper RFC6265 dates support
    * Faster ServerCookieEncoder and ClientCookieDecoder
    * Faster tool for handling headers such as "Expires" and "Date"

commit 0bc30a123e88bc7b038e0c260937581097a903f7
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Nov 3 08:04:57 2016 +0100

    Eliminate usage of releaseLater(...) to reduce memory usage during tests
    
    Motiviation:
    
    We used ReferenceCountUtil.releaseLater(...) in our tests which simplifies a bit the releasing of ReferenceCounted objects. The problem with this is that while it simplifies stuff it increase memory usage a lot as memory may not be freed up in a timely manner.
    
    Modifications:
    
    - Deprecate releaseLater(...)
    - Remove usage of releaseLater(...) in tests.
    
    Result:
    
    Less memory needed to build netty while running the tests.

commit a0e375bbc0a33ad083fd090046c1ec2c74d730ff
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Nov 15 20:07:43 2016 -0800

    00fc239995ce7b683993c88bb82b30dbd5fe7982 HashedWheelTimer introduced test failure
    
    Motivation:
    00fc239995ce7b683993c88bb82b30dbd5fe7982 introduced a change to HashedWheelTimerTest which attempted to wait for an explicit event notification until more timer events can be added. However HashedWheelTimer will execute the timer Runnable before removing it from the queue and decrementing the total count. This make it difficult for users to know when it is safe to add another timer task as the limit is approached.
    
    Modifications:
    - HashedWheelTimer should remove the timer Runnable before executing the task.
    
    Result:
    Users can more reliably add new timers when the limit is reached and HashedWheelTimerTest will no longer fail spuriously due to this race condition.

commit 4bce554c905a85a51094b0ad8f2f058d0eaca75f
Author: Dmitry Spikhalskiy <dmitry@spikhalskiy.com>
Date:   Thu Nov 10 21:23:52 2016 +0300

    Revert counter optimization in RoundRobin until better implementation found

commit 9725a4d004f10dc60d0406c197e1583f91461341
Author: nmittler <nathanmittler@google.com>
Date:   Fri Nov 11 09:36:34 2016 -0800

    Restructuring SslHandler to support new engines
    
    Motivation:
    
    In preparation for support of Conscrypt, I'm consolidating all of the engine-specific details so that it's easier to add new engine types that affect the behavior of SslHandler.
    
    Modifications:
    
    Added an enum SslEngineType that provides SSL engine-specific details.
    
    Result:
    
    SslHandler is more extensible for other engine types.

commit 4bba7526e2f58018817972f38279cc232f519100
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Nov 14 12:44:25 2016 -0800

    retained[Slice|Duplicate] buffer reference count bug
    
    Motivation:
    Currently the ByteBuf created as a result of retained[Slice|Duplicate] maintains its own reference count, and when this reference count is depleated it will release the ByteBuf returned from unwrap(). The unwrap() buffer is designed to be the 'root parent' and will skip all intermediate layers of buffers. If the intermediate layers of buffers contain a retained[Slice|Duplicate] then these reference counts will be ignored during deallocation. This may lead to deallocating the 'root parent' before all derived pooled buffers are actually released. This same issue holds if a retained[Slice|Duplicate] is in the heirachy and a 'regular' slice() or duplicate() buffer is created.
    
    Modifications:
    - AbstractPooledDerivedByteBuf must maintain a reference to the direct parent (the buffer which retained[Slice|Duplicate] was called on) and release on this buffer instead of the 'root parent' returned by unwrap()
    - slice() and duplicate() buffers created from AbstractPooledDerivedByteBuf must also delegate reference count operations to their immediate parent (or first ancestor which maintains an independent reference count).
    
    Result:
    Fixes https://github.com/netty/netty/issues/5999

commit e7631867d30e26961e121ca05f5e3c078345984f
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Nov 16 09:55:38 2016 -0800

    LzmaFrameEncoderTest double release
    
    Motivation:
    2c78902ebc7a81caa0ee6e3892438455f06dec9c ensured buffers were released in the general case but didn't clean up an extra release in LzmaFrameEncoderTest#testCompressionOfBatchedFlowOfData which lead to a double release.
    
    Modifications:
    LzmaFrameEncoderTest#testCompressionOfBatchedFlowOfData should not explicitly release the buffer because decompress will release the buffer
    
    Result:
    No more reference count exception and failed test.

commit 86bbf242b4775183de1012645103ddf8e83bdcaa
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Nov 16 07:59:21 2016 +0100

    [#5874] [#5971] Ensure SniHandlerTest.testServerNameParsing not fails with SslProvider.JDK
    
    Motivation:
    
    The SniHandlerTest.testServerNameParsing did fail when SslProvider.JDK was used as it the JDK SSLEngineImpl does not send an alert.
    
    Modifications:
    
    Ensure tests pass with JDK and OPENSSL ssl implementations.
    
    Result:
    
    SniHandlerTest will run with all SslProvider and not fail when SslProvider.JDK is used.

commit 2c78902ebc7a81caa0ee6e3892438455f06dec9c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Nov 15 17:06:03 2016 -0800

    LzmaFrameEncoderTest leak due to LzmaInputStream close behavior
    
    Motivation:
    c1932a8537b742aaf15a7cfacf9f76ad8239f3c7 made an assumption that the LzmaInputStream which wraps a ByteBufInputStream would delegate the close operation to the wrapped stream. This assumption is not true and thus we still had a leak. An issue has been logged with our LZMA dependency https://github.com/jponge/lzma-java/issues/14.
    
    Modifications:
    - Force a close on the wrapped stream
    
    Result:
    No more leak.

commit c8575c42d0964812c0d2617f98efa7cb64c46be8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Nov 10 11:53:59 2016 +0100

    [#5976] Ensure we only consume as much data on wrap(...) as we can handle.
    
    Motiviation:
    
    We need to ensure we only consume as much da as we can maximal put in one ssl record to not produce a BUFFER_OVERFLOW when calling wrap(...).
    
    Modification:
    
    - Limit the amount of data that we consume based on the maximal plain text size that can be put in one ssl record
    - Add testcase to verify the fix
    - Tighten up testcases to ensure the amount of produced and consumed data in SslEngineResult matches the buffers. If not the tests will fail now.
    
    Result:
    
    Correct and conform behavior of OpenSslEngine.wrap(...) and better test coverage during handshaking in general.

commit c4e96d010e3d16810d7130c93169817b3d72b421
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Nov 4 18:45:49 2016 -0700

    HTTP/2 WeightedFairQueueByteDistributor Bug
    
    Motivation:
    If a stream is not able to send any data (flow control window for the stream is exhausted) but has descendants who can send data then WeightedFairQueueByteDistributor may incorrectly modify the pseudo time and also double add the associated state to the parent's priority queue. The pseudo time should only be modified if a node is moved in the priority tree, and not if there happens to be no active streams in its descendent tree and a descendent is moved (e.g. removed from the tree because it wrote all data and the last data frame was EOS). Also the state objects for WeightedFairQueueByteDistributor should only appear once in any queue. If this condition is violated the pseudo time accounting would be biased at and assumptions in WeightedFairQueueByteDistributor would be invalidated.
    
    Modifications:
    - WeightedFairQueueByteDistributor#isActiveCountChangeForTree should not allow re-adding to the priority queue if we are currently processing a node in the distribution algorithm. The distribution algorithm will re-evaluate if the node should be re-added on the tail end of the recursion.
    
    Result:
    Fixes https://github.com/netty/netty/issues/5980

commit c1932a8537b742aaf15a7cfacf9f76ad8239f3c7
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Oct 27 11:38:19 2016 -0700

    ByteBuf Input Stream Reference Count Ownership
    
    Motivation:
    Netty provides a adaptor from ByteBuf to Java's InputStream interface. The JDK Stream interfaces have an explicit lifetime because they implement the Closable interface. This lifetime may be differnt than the ByteBuf which is wrapped, and controlled by the interface which accepts the JDK Stream. However Netty's ByteBufInputStream currently does not take reference count ownership of the underlying ByteBuf. There may be no way for existing classes which only accept the InputStream interface to communicate when they are done with the stream, other than calling close(). This means that when the stream is closed it may be appropriate to release the underlying ByteBuf, as the ownership of the underlying ByteBuf resource may be transferred to the Java Stream.
    
    Motivation:
    - ByteBufInputStream.close() supports taking reference count ownership of the underyling ByteBuf
    
    Result:
    ByteBufInputStream can assume reference count ownership so the underlying ByteBuf can be cleaned up when the stream is closed.

commit d479e939b03cf37746647647917e028b1817e413
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Nov 10 17:36:53 2016 -0800

    Buffer Leaks in Compression Tests
    
    Motivation:
    The unit tests for the compression encoders/decoders may write buffers to an EmbeddedChannel but then may not release buffer or close the channel after the test. This may result in buffer leaks.
    
    Modifications:
    - Call channel.finishAndReleaseAll() after each test
    
    Result:
    Fixes https://github.com/netty/netty/issues/6007

commit 00fc239995ce7b683993c88bb82b30dbd5fe7982
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Nov 9 09:19:55 2016 -0800

    HashWheelTimerTest cleanup
    
    Motivation:
    HashWheelTimerTest has busy/wait and sleep statements which are not necessary. We also depend upon a com.google.common.base.Supplier which isn't necessary.
    
    Modifications:
    - Remove buys wait loops and timeouts where possible
    
    Result:
    HashWheelTimerTest more explicit in verifying conditions and less reliant on wait times.

commit baac352f74d7e5b2980ed9c1071515e6f85598eb
Author: Adrian Gonzalez <adrian.gonzalez@ef.com>
Date:   Wed Nov 9 16:37:51 2016 -0500

    WebSocketClientHandshaker.rawPath(URI) should use the raw query
    
    Motivation:
    
    If the wsURL contains an encoded query, it will be decoded when generating the raw path.  For example if the wsURL is http://test.org/path?a=1%3A5, the returned raw path would be /path?a=1:5
    
    Modifications:
    
    Use wsURL.getRawQuery() rather than wsURL.getQuery()
    
    Result:
    
    rawPath will now return /path?a=1%3A5

commit 75728faf9b7748a268502d6b986f8bba24d82835
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Tue Jun 14 14:10:45 2016 +0200

    Add more HttpHeaders values
    
    Motivation:
    Some commons values are missing from HttpHeader values constants.
    
    Modifications:
    - Add constants for "application/json" Content-Type
    - Add constants for "gzip,deflate" Content-Encoding
    
    Result:
    More HttpHeader values constants available, both in
    `HttpHeaders.Values` and `HttpHeaderValues`.

commit fc3c9c9523150190760801dd0fbf014909519942
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Nov 4 10:09:24 2016 +0100

    Let OpenSslEngine.wrap(...) / OpenSslEngine.unwrap(...) behave like stated in the javadocs.
    
    Motivation:
    
    OpenSslEngine.wrap(...) and OpenSslEngie.unwrap(...) may consume bytes even if an BUFFER_OVERFLOW / BUFFER_UNDERFLOW is detected. This is not correct as it should only consume bytes if it can process them without storing data between unwrap(...) / wrap(...) calls. Beside this it also should only process one record at a time.
    
    Modifications:
    
    - Correctly detect BUFFER_OVERFLOW / BUFFER_UNDERFLOW and only consume bytes if non of them is detected.
    - Only process one record per call.
    
    Result:
    
    OpenSslEngine behaves like stated in the javadocs of SSLEngine.

commit e47da7be778ec1a56d06cbdafe2b8af1e3951610
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Oct 31 10:21:58 2016 -0700

    CompatibleObjectEncoder cached ObjectOutputStream backed by release buffer bug
    
    Motivation:
    ObjectOutputStream uses a Channel Attribute to cache a ObjectOutputStream which is backed by a ByteBuf that may be released after an object is encoded and the underlying buffer is written to the channel. On subsequent encode operations the cached ObjectOutputStream will be invalid and lead to a reference count exception.
    
    Modifications:
    - CompatibleObjectEncoder should not cache a ObjectOutputStream.
    
    Result:
    CompatibleObjectEncoder doesn't use a cached object backed by a released ByteBuf.

commit 705e3f629ab802539586c7d92f7888697a44c450
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Oct 31 07:23:22 2016 +0100

    Not use InternalThreadLocalMap where access may be done from outside the EventLoop.
    
    Motivation:
    
    We should not use the InternalThreadLocalMap where access may be done from outside the EventLoop as this may create a lot of memory usage while not be reused anyway.
    
    Modifications:
    
    Not use InternalThreadLocalMap in places where the code-path will likely be executed from outside the EventLoop.
    
    Result:
    
    Less memory bloat.

commit 3f20b8adee1d86285acc508308c07d67b36c1fc6
Author: Aniket Bhatnagar <aniket.bhatnagar@teamaol.com>
Date:   Thu Sep 22 14:46:47 2016 +0100

    Added optional pending timeouts counter parameter to HashedWheelTimer constructor and ensured that pending timeouts don't exceed provided max pending timeouts.
    
    Motivation:
    If the rate at which new timeouts are created is very high and the created timeouts are not cancelled, then the JVM can crash because of out of heap space. There should be a guard in the implementation to prevent this.
    
    Modifications:
    The constructor of HashedWheelTimer now takes an optional max pending timeouts parameter beyond which it will reject new timeouts by throwing RejectedExecutionException.
    
    Result:
    After this change, if the max pending timeouts parameter is passed as constructor argument to HashedWheelTimer, then it keeps a track of pending timeouts that aren't yet expired or cancelled. When a new timeout is being created, it checks for current pending timeouts and if it's equal to or greater than provided max pending timeouts, then it throws RejectedExecutionException.

commit 5b5f6a60317eceff8726c4bb9802f8b1f00dea47
Author: Nikolaj Hald Nielsen <nnielsen@twitter.com>
Date:   Mon Nov 7 09:49:02 2016 -0800

    Allow non-default Http/2 server initial settings
    
    Motivation:
    
    Currently it is not possible to have an Http/2 server send non default
    initial settings to clients when doing the initial connection handshake
    
    Modifications:
    
    Add additional constructors to Http2Codec allowing users to specify the
    initial settings to send to the client and apply locally
    
    Result:
    
    You can now specify non default initial settings

commit 895a92cb2208906e0cabba21063e604c10c4d5ae
Author: Johno Crawford <johno@sulake.com>
Date:   Mon Nov 7 22:59:12 2016 +0100

    Unable to initialize PlatformDependent when sun.misc.Unsafe is unavailable
    
    Motivation:
    
    PlatformDependent0 should not be referenced directly when sun.misc.Unsafe is unavailable.
    
    Modifications:
    
    Guard byteArrayBaseOffset with hasUnsafe check.
    
    Result:
    
    PlatformDependent can be initialized when sun.misc.Unsafe is unavailable.

commit f0f0edbf7829ddaf9d795124cf6ce6a8ec5b2f51
Author: Bryce Anderson <banderson@twitter.com>
Date:   Fri Nov 4 14:22:16 2016 -0700

    HttpObjectAggregator adds 'Connection: close' header if necessary
    
    Motivation:
    
    The HttpObjectAggregator never appends a 'Connection: close' header to
    the response of oversized messages even though in the majority of cases
    its going to close the connection.
    
    Modification:
    
    This PR addresses that by ensuring the requisite header is present when
    the connection is going to be closed.
    
    Result:
    
    Gracefully signal that we are about to close the connection.

commit 5eebe9a06c6873e797b5f8c847086c35ae990ef5
Author: Dmitry Spikhalskiy <dmitry@spikhalskiy.com>
Date:   Thu Nov 3 03:22:24 2016 +0300

    Implement RoundRobin logic in RoundRobinInetAddressResolver#resolveAll
    
    Motivation:
    Now the ```resolveAll``` method of RoundRobinInetAddressResolver returns results without any rotation and shuffling. As a result, it doesn't force any round-robin for clients that get a result of ```resolveAll``` and use addresses from the result one by one for a connection establishing until success. This commit implements round-robin in RoundRobinInetAddressResolver#resolveAll. These improvements inspired by the discussion here: https://github.com/AsyncHttpClient/async-http-client/issues/1285
    
    Modifications:
    Rotate collection from internal ```resolveAll``` call by index, which is incremented every call to RoundRobinInetAddressResolver#resolveAll method.
    Random replaced by an incrementing counter, which makes code cheaper and guarantees predictable address order in tests.
    
    Result:
    Improved ```RoundRobinInetAddressResolver``` is compatible with clients that use ```resolveAll``` result.

commit b4e5965424e2c90e653cc4cfb2f45da046743b99
Author: Dmitry Spikhalskiy <dmitry@spikhalskiy.com>
Date:   Fri Nov 4 17:05:51 2016 +0300

    Cleanup inappropriate @throws javadoc of some AsciiString util methods

commit b3fa976028960be96ecefb2097180c8ae142e92c
Author: Demetrius <dcomes@godaddy.com>
Date:   Sat Oct 22 00:19:37 2016 +0000

    Added support to fetch the UID, GID, and PID of the connected unix domain socket (EG: SO_PEERCREDS)
    
    Motivation:
    
    I had a need to know the user credentials of a connected unix domain socket.
    
    Modifications:
    
    Added a class to encapsulate user credentials (UID, GID, and the PID).
    Augemented the Socket class to provide the JNI native interface to return this new class
    Augemented the c code to call getSockOpts passing <a href=http://man7.org/linux/man-pages/man7/socket.7.html>SO_PEERCRED</a>
    Then surfaced the ability to get user credentials in the EpollDomainSocketChannel
    
    Result:
    
    The EpollDomainSocketChannel now has a the following function signature:
    public PeerCredentials peerCredentials() throws IOException allowing a caller to get the UID, GID, and PID of the linux process
    connected to the unix domain socket.

commit e3cb9935c0b63357e3d51867cffe624129e7e1dd
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Oct 13 14:50:09 2016 +0200

    Take memory overhead of ChannelOutboundBuffer / PendingWriteQueue into account
    
    Motivation:
    
    To guard against the case that a user will enqueue a lot of empty or small buffers and so raise an OOME we need to also take the overhead of the ChannelOutboundBuffer / PendingWriteQueue into account when detect if a Channel is writable or not. This is related to #5856.
    
    Modifications:
    
    When calculate the memory for an message that is enqueued also add some extra bytes depending on the implementation.
    
    Result:
    
    Better guard against OOME.

commit 4ee361e3024b33ac3a160e8124ee7f0e5a1f4b42
Author: Evgeny Slutsky <slutskiy.i@gmail.com>
Date:   Sun Oct 30 17:32:56 2016 +0300

    OpenSslSession#initPeerCerts creates too long almost empty arrays.
    
    Motivation:
    
    https://github.com/netty/netty/issues/5945
    
    Modifications:
    
    Refactored initialization of arrays. Fixed arrays length
    
    Result:
    
    Cert arrays have proper length. Testing added

commit 42fba015ce82ab4ab30e547c888db82fe74094e9
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Fri Oct 21 16:58:32 2016 -0700

    reduce lock contention in resource leak
    
    Motivation:
    ResourceLeakDetector shows two main problems, racy access and heavy lock contention.
    
    Modifications:
    This PR fixes this by doing two things:
    1.  Replace the sampling counter with a ThreadLocalRandom.  This has two benefits.
        First, it makes the sampling ration no longer have to be a power of two.  Second,
        it de-noises the continuous races that fight over this single value.  Instead,
        this change uses slightly more CPU to decide if it should sample by using TLR.
    2.  DefaultResourceLeaks need to be kept alive in order to catch leaks.  The means
        by which this happens is by a singular, doubly-linked list.  This creates a
        large amount of contention when allocating quickly.  This is noticeable when
        running on a multi core machine.
    
        Instead, this uses a concurrent hash map to keep track of active resources
        which has much better contention characteristics.
    
    Results:
    Better concurrent hygiene.  Running the gRPC QPS benchmark showed RLD taking about
    3 CPU seconds for every 1 wall second when runnign with 12 threads.
    
    There are some minor perks to this as well.  DefaultResourceLeak accounting is
    moved to a central place which probably has better caching behavior.

commit eb7f8e4dc5802fa7ec1ffbfbc8ac8ef1aacf8918
Author: Dmitry Spikhalskiy <dmitry@spikhalskiy.com>
Date:   Thu Oct 13 00:56:22 2016 +0300

    Expose RoundRobinInetAddressResolver
    
    Motivation:
    Make small refactoring for recently merged PR #5867 to make the code more flexible and expose aggressive round robin as a NameResolver too with proper code reuse.
    
    Modifications:
    Round robin is a method of hostname resolving - so Round robin related code fully moved to RoundRobinInetAddressResolver implements NameResolver<InetAddress>, RoundRobinInetSocketAddressResolver is deleted as a separate class, instance with the same functionality could be created by calling #asAddressResolver.
    
    Result:
    New forced Round Robin code exposed not only as an AddressResolver but as a NameResolver too, more proper code and semantic reusing of InetNameResolver and InetSocketAddressResolver classes.

commit 8269e0f046debf561b42adf4bd9aa9b3c18d6672
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Oct 10 08:43:27 2016 +0200

    [#5892] Correct handle HttpMessage that is EOF terminated
    
    Motivation:
    
    We need to ensure we not add the Transfer-Encoding header if the HttpMessage is EOF terminated.
    
    Modifications:
    
    Only add the Transfer-Encoding header if an Content-Length header is present.
    
    Result:
    
    Correctly handle HttpMessage that is EOF terminated.

commit b6099bc193368259cd7db1ae6848ca410b571086
Author: Christoph Ingwersen <ingwerse@adobe.com>
Date:   Thu Oct 27 22:50:14 2016 +0200

    Fix unbalanced quotes in Bundle-NativeCode manifest header
    
    Motivation:
    
    The previously generated manifest causes a parse exception when loaded into an Apache Felix OSGI container.
    
    Modifications:
    
    Fix parameter delimiter and unbalanced quotes in manifest entry. Suffixed with asterisk so the bundle is resolved on other architectures as well even if native libs won't be loaded.
    
    Result:
    
    Bundle will load properly in OSGI containers.

commit 273778c96c32cf093b99f1118cc01187192d2b96
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Oct 10 14:33:21 2016 +0200

    Correctly add futures to list in test
    
    Motivation:
    
    We missed to add the futures to the list in the test.
    
    Modifications:
    
    Add futures to list.
    
    Result:
    
    More correct test.

commit 947216b70e775f0d5f65a22e61b67de393ea5342
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Oct 11 14:11:41 2016 +0200

    Use latest centos/redhat version to verify against when release.
    
    Motivation:
    
    A new version of centos was released we should verify against it when release.
    
    Modifications:
    
    Bump up version.
    
    Result:
    
    Release on latest centos version.

commit bff951ca07da117f1086dc928b452dd94bc8978d
Author: Moses Nakamura <mnakamura@twitter.com>
Date:   Sun Oct 30 20:51:55 2016 -0700

    codec-http: HttpClientUpgradeHandler can handle streamed responses
    
    Motivation:
    
    We want to reject the upgrade as quickly as possible, so that we can
    support streamed responses.
    
    Modifications:
    
    Reject the upgrade as soon as we inspect the headers if they're wrong,
    instead of waiting for the entire response body.
    
    Result:
    
    If a remote server doesn't know how to use the http upgrade and tries to
    responsd with a streaming response that never ends, the client doesn't
    buffer forever, but can instead pass it along.  Fixes #5954

commit b2379e62f4ae50b55bce7c43e5bd008cf9aacfd1
Author: Roger Kapsi <rkapsi@squarespace.com>
Date:   Fri Oct 14 10:21:01 2016 -0400

    Allow customization of LocalChannel instances that are being created by LocalServerChannel.
    
    Motivation
    
    It's possible to extend LocalChannel as well as LocalServerChannel but the LocalServerChannel's serve(peer) method is hardcoded to create only instances of LocalChannel.
    
    Modifications
    
    Add a protected factory method that returns by default new LocalChannel(...) but users may override it to customize it.
    
    Result
    
    It's possible to customize the LocalChannel instance on either end of the virtual connection.

commit 23f033ac08906b8db4dbb5695d6f0701ad14e4d3
Author: Vladimir Kostyukov <vkostyukov@twitter.com>
Date:   Mon Oct 24 10:52:42 2016 -0700

    Read if needed on ProxyHandler's handshake. Fixes #5933.
    
    Motivation:
    
    When auto-read is disabled and no reads are issued by a user, ProxyHandler will stall the connection on the proxy handshake phase waiting for the first response from a server (that was never read).
    
    Modifications:
    
    Read if needed when very first handshake message is send by ProxyHandler.
    
    Result:
    
    Proxy handshake now succeeds no matter if auto-read disabled or enabled. Without the fix, the new test is failing on master.

commit 9cfa4675548e368f3c905c0df31d18912d43cf08
Author: Scott Mitchell <scott.k.mitch1@gmail.com>
Date:   Fri Oct 21 17:43:39 2016 -0700

    PlatformDependent ASCII hash code broken on big endian machines
    
    Motivation:
    PlatformDependent has a hash code algorithm which utilizes UNSAFE for performance reasons. This hash code algorithm must also be consistent with CharSequence objects that represent a collection of ASCII characters. In order to make the UNSAFE versions and CharSequence versions the endianness should be taken into account. However the big endian code was not correct in a few places.
    
    Modifications:
    - Correct bugs in PlatformDependent class related to big endian ASCII hash code computation
    
    Result:
    Fixes https://github.com/netty/netty/issues/5925

commit cfa5b85075f9f3a74e7eb46e344f44775dbcea57
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Oct 18 12:51:53 2016 -0700

    DefaultDnsRecordDecoder compression and index decode bug
    
    Motivation:
    8cf90f05127e3eda77a8749342709ab5776f7129 switch a duplicate opreration to a slice operation. Typically this would be fine but DNS supports a compression (https://www.ietf.org/rfc/rfc1035 4.1.4. Message compression) where the payload contains absolute indexes which refer back to previously referenced content. Using a slice will break the ability for the indexes in the payload to correctly self reference to the index of the originial payload, and thus decoding may fail.
    
    Modifications:
    - Use duplicate instead of slice so DNS message compression and index references are preserved.
    
    Result:
    Fixes DefaultDnsRecordDecoder regression

commit efca9d180e239db4c3ee57919b41deb7c836f543
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Oct 17 09:25:49 2016 -0700

    HTTP/2 HPACK Encoder remove unsued import

commit c9918de37b630396a21e58ca733a89dc763372d4
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Mon Oct 17 14:33:27 2016 +0200

    http2: Make MAX_HEADER_LIST_SIZE exceeded a stream error when encoding.
    
    Motivation:
    
    The SETTINGS_MAX_HEADER_LIST_SIZE limit, as enforced by the HPACK Encoder, should be a stream error and not apply to the whole connection.
    
    Modifications:
    
    Made the necessary changes for the exception to be of type StreamException.
    
    Result:
    
    A HEADERS frame exceeding the limit, only affects a specific stream.

commit 5f533b7358b84868904baa5d8eb690d8f12eb4d4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Oct 14 13:20:41 2016 +0200

    [maven-release-plugin] prepare for next development iteration

commit 35fb0babe269d8e584521d069492c910569b244c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Oct 14 12:47:19 2016 +0200

    [maven-release-plugin] prepare release netty-4.1.6.Final

commit af8ef3e40cb8a4e7d9648fbd8f1574ce55eaa8be
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Fri Oct 14 10:42:03 2016 +0200

    Correctly release debugData and notify the promise when goAway was already sent
    
    Motivation:
    
    Commit 908464f161385361c450826bb1242c06f78d931e also introduced a change to guard against re-entrance but failed to correctly handle the debugData and promise.
    
    Modifications:
    
    Release debugData and correctly notify the promise.
    
    Result:
    
    No more buffer leak and promise is always notified.

commit 97bf3c0a9bcd6e3f7f9ad5465779242c0edde390
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Sep 27 12:56:56 2016 +0200

    Correctly throw IndexOutOfBoundsException when dst.remaining() is too big.
    
    Motivation:
    
    In some ByteBuf implementations we not correctly implement getBytes(index, ByteBuffer).
    
    Modifications:
    
    Correct code to do what is defined in the javadocs and adding test.
    
    Result:
    
    Implementation works as described.

commit 0b7bf49c165e682644a53279f75a44ba084201cd
Author: Trustin Lee <t@motd.kr>
Date:   Wed Oct 12 14:30:32 2016 +0900

    Convert X509TrustManager into X509ExtendedTrustManager for Java 7+
    
    Motivation:
    
    Since Java 7, X509TrustManager implementation is wrapped by a JDK class
    called AbstractTrustManagerWrapper, which performs an additional
    certificate validation for Socket or SSLEngine-backed connections.
    
    This makes the TrustManager implementations provided by
    InsecureTrustManagerFactory and FingerprintTrustManagerFactory not
    insecure enough, where their certificate validation fails even when it
    should pass.
    
    Modifications:
    
    - Add X509TrustManagerWrapper which adapts an X509TrustManager into an
      X509ExtendedTrustManager
    - Make SimpleTrustManagerFactory wrap an X509TrustManager with
      X509TrustManagerWrapper is the provided TrustManager does not extend
      X509ExtendedTrustManager
    
    Result:
    
    - InsecureTrustManagerFactory and FingerprintTrustManagerFactory are now
      insecure as expected.
    - Fixes #5910

commit 7e62f9fcdb319661b303266bc15296ddc44bb324
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Oct 11 15:48:21 2016 -0700

    SocketSslEchoTest failure
    
    Motivation:
    8ba5b5f740d0d87eebd2aedacff8bd196d6da795 removed some ciphers from the default list, and SocketSslEchoTest had one of these ciphers hard coded in the test. The test will fail if the cihper is not supported by default.
    
    Modifications:
    SocketSslEchoTest should ensure a cipher is used which will be supported by the peer
    
    Result:
    Test result no longer depends upon default cipher list.

commit 8ba5b5f740d0d87eebd2aedacff8bd196d6da795
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sun Sep 25 19:08:22 2016 -0700

    Update Default Cipher List
    
    Motivation:
    Our default cipher list has not been updated in a while. We current support some older ciphers not commonly in use and we don't support some newer ciphers which are more commonly used.
    
    Modifications:
    - Update the default list of ciphers for JDK and OpenSSL.
    
    Result:
    Default cipher list is more likely to connect to peers.
    Fixes https://github.com/netty/netty/issues/5859

commit eb1dfb8f5e797e9da3268322ac74440d50d41644
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Sep 21 23:08:25 2016 -0700

    SingleThreadEventLoopTest failures
    
    Motivation:
    Some unit tests in SingleThreadEventLoopTest rely upon Thread.sleep for sequencing events between threads. This can be unreliable and result in spurious test failures if thread scheduling does not occur in a fair predictable manner.
    
    Modifications:
    - Reduce the reliance on Thread.sleep in SingleThreadEventLoopTest
    
    Result:
    Fixes https://github.com/netty/netty/issues/5851

commit 32a560e42ccf7c74645969bb541c90800959052e
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sun Sep 25 19:19:39 2016 -0700

    Update AlpnAgent version

commit 6c8cd023bf896ac9f6ceb9674e96e320371180e0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Sep 2 10:15:28 2016 +0200

    [#5770] Use heapbuffers by default when using LocalChannel and LocalServerChannel.
    
    Motivation:
    
    The local transport is used to communicate in the same JVM so we should use heap buffers.
    
    Modifications:
    
    Use heapbuffers by default if not requested otherwise.
    
    Result:
    
    No allocating of direct buffers by default when using local transport

commit efd118ddec47a31676bb53342ce8861124c41a18
Author: James Yuzawa <jyuzawa@triplelift.com>
Date:   Mon Sep 26 20:45:41 2016 -0400

    Support aggressive round-robin dns
    
    Motivation:
    
    Suppose the domain `foo.example.com` resolves to the following ip
    addresses `10.0.0.1`, `10.0.0.2`, `10.0.0.3`. Round robin DNS works by
    having each client probabilistically getting a different ordering of
    the set of target IP’s, so connections from different clients (across
    the world) would be split up across each of the addresses. Example: In
    a `ChannelPool` to manage connections to `foo.example.com`, it may be
    desirable for high QPS applications to spread the requests across all
    available network addresses. Currently, Netty’s resolver would return
    only the first address (`10.0.0.1`) to use. Let say we are making
    dozens of connections. The name would be resolved to a single IP and
    all of the connections would be made to `10.0.0.1`. The other two
    addresses would not see any connections. (they may see it later if new
    connections are made and `10.0.0.2` is the first in the list at that
    time of a subsequent resolution). In these changes, I add support to
    select a random one of the resolved addresses to use on each resolve
    call, all while leveraging the existing caching and inflight request
    detection. This way in my example, the connections would be make to
    random selections of the resolved IP addresses.
    
    Modifications:
    
    I added another method `newAddressResolver` to
    `DnsAddressResolverGroup` which can be overriden much like
    `newNameResolver`. The current functionality which creates
    `InetSocketAddressResolver` is still used. I added
    `RoundRobinDnsAddressResolverGroup` which extends
    DnsAddressResolverGroup and overrides the `newAddressResolver` method
    to return a subclass of the `InetSocketAddressResolver`. This subclass
    is called `RoundRobinInetSocketAddressResolver` and it contains logic
    that takes a `resolve` request, does a `resolveAll` under the hood, and
    returns a single element at random from the result of the `resolveAll`.
    
    Result:
    
    The existing functionality of `DnsAddressResolverGroup` is left
    unchanged. All new functionality is in the
    `RoundRobinInetSocketAddressResolver` which users will now have the
    option to use.

commit 39997814bfa3ea70d5f63a7c9bacdf34c962d823
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Sep 28 10:26:06 2016 +0200

    [#5860] Ensure removal of SslHandler not produce IllegalReferenceCountException
    
    Motivation:
    
    If the user removes the SslHandler while still in the processing loop we will produce an IllegalReferenceCountException. We should stop looping when the handlerwas removed.
    
    Modifications:
    
    Ensure we stop looping when the handler is removed.
    
    Result:
    
    No more IllegalReferenceCountException.

commit be8b6c6f24e21eb8704720200b84a4a9c8b0ce9f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Oct 3 18:36:18 2016 +0200

    Correctly add STREAM_WEIGHT header in InboundHttp2ToHttpAdapter.onPushPromiseRead(...)
    
    Motivation:
    
    The weight header with the default value is not set but it should be (rfc7540#5.3.5: …Pushed streams initially depend on their associated stream … are assigned a default weight of 16).
    
    Modifications:
    
    Add STREAM_WEIGHT header.
    
    Result:
    
    Correctly add headers.

commit e102a008b63d0063581ba242539f0a8d473cae00
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Oct 5 08:29:17 2016 -0500

    [#5893] Ensure we not close NioDatagramChannel when SocketException is received.
    
    Motivation:
    
    When using java.nio.DatagramChannel we should not close the channel when a SocketException was thrown as we can still use the channel.
    
    Modifications:
    
    Not close the Channel when SocketException is thrown
    
    Result:
    
    More robust and correct handling of exceptions when using NioDatagramChannel.

commit a09e56850e96577fcdb84835f194a39aded046b5
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Sep 30 14:14:13 2016 +0200

    [#5882] Ensure we even process tasks if processing of ready channels throws an Exception in event loop.
    
    Motivation:
    
    If an exception is thrown while processing the ready channels in the EventLoop we should still run all tasks as this may allow to recover. For example a OutOfMemoryError may be thrown and runAllTasks() will free up memory again. Beside this we should also ensure we always allow to shutdown even if an exception was thrown.
    
    Modifications:
    
    - Call runAllTasks() in a finally block
    - Ensure shutdown is always handles.
    
    Result:
    
    More robust EventLoop implementations for NIO and Epoll.

commit 3cf7ccbd3cabbbf8e799255b3e7f9e9e3aa87bcf
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Sep 29 16:02:58 2016 +0200

    Process OP_WRITE before OP_READ to free memory faster
    
    Motivation:
    
    We should better first process OP_WRITE before OP_READ as this may allow us to free memory in a faster fashion for previous queued writes.
    
    Modifications:
    
    Process OP_WRITE before OP_READ
    
    Result:
    
    Free memory faster for queued writes.

commit 0b939a96cf5f87686bfa3cf16a47a44632a9097b
Author: knoyrok <knoyrok@gmail.com>
Date:   Sun Oct 9 13:34:13 2016 +0200

    Fix typo in ProtobufDecoder comment

commit 540c26bb56067523e3a76eb484205997fa6727e7
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Sep 16 06:57:33 2016 -0700

    HTTP/2 Ensure default settings are correctly enforced and interfaces clarified
    
    Motivation:
    The responsibility for retaining the settings values and enforcing the settings constraints is spread out in different areas of the code and may be initialized with different values than the default specified in the RFC. This should not be allowed by default and interfaces which are responsible for maintaining/enforcing settings state should clearly indicate the restrictions that they should only be set by the codec upon receipt of a SETTINGS ACK frame.
    
    Modifications:
    - Encoder, Decoder, and the Headers Encoder/Decoder no longer expose public constructors that allow the default settings to be changed.
    - Http2HeadersDecoder#maxHeaderSize() exists to provide some bound when headers/continuation frames are being aggregated. However this is roughly the same as SETTINGS_MAX_HEADER_LIST_SIZE (besides the 32 byte octet for each header field) and can be used instead of attempting to keep the two independent values in sync.
    - Encoding headers now enforces SETTINGS_MAX_HEADER_LIST_SIZE at the octect level. Previously the header encoder compared the number of header key/value pairs against SETTINGS_MAX_HEADER_LIST_SIZE instead of the number of octets (plus 32 bytes overhead).
    - DefaultHttp2ConnectionDecoder#onData calls shouldIgnoreHeadersOrDataFrame but may swallow exceptions from this method. This means a STREAM_RST frame may not be sent when it should for an unknown stream and thus violate the RFC. The exception is no longer swallowed.
    
    Result:
    Default settings state is enforced and interfaces related to settings state are clarified.

commit f010033590ab8b9498a9c486bc8f9c21c65fecac
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Tue Aug 16 15:22:39 2016 +0200

    h2childchan: Ability to open outbound/local streams. Fixes #4913
    
    Motivation:
    
    The HTTP/2 child channel API does not allow to create local/outbound HTTP/2 streams.
    
    Modifications:
    
    Add a Http2StreamChannelBootstrap that allows to create outbound streams.
    
    Result:
    
    The HTTP/2 child channel API now supports outbound streams.

commit d1d954da3539d3bdaa0578bb27a4f7e9c174b039
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Sep 28 08:43:15 2016 +0200

    [#5866] HttpToHttp2ConnectionHandler / InboundHttp2ToHttpAdapter ignores STREAM_DEPENDENCY_ID and STREAM_WEIGHT.
    
    Motivation:
    
    HttpToHttp2ConnectionHandler.write(ctx, msg, promise) ignores HttpConversionUtil.ExtensionHeaderNames.STREAM_DEPENDENCY_ID header in outbound message. Beside this InboundHttp2ToHttpAdapter also not add the STREAM_DEPENDENCY_ID and STREAM_WEIGHT headers.
    
    Modifications:
    
    Respect STREAM_DEPENDENCY_ID and STREAM_WEIGHT
    
    Result:
    
    Correctly respect STREAM_DEPENDENCY_ID and STREAM_WEIGHT.

commit 01af0baaf7ab2da23ffbf46b2a35cbe11fdbf494
Author: qiaodaimadelaowang <tinyhui.wang@gmail.com>
Date:   Fri Sep 30 13:11:47 2016 +0800

    Fix typo in UnstableApi javadocs

commit 1c588ce7e9573a6327f0a8a86cf1d754fd10e775
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Sep 21 14:05:28 2016 -0700

    [#5841] Add test-case for mutual auth when using certificate chain
    
    Motivation:
    
    Add test-case for doing mutal auth with a certificate chain that holds more then one certificate.
    
    Modifications:
    
    Add test case
    
    Result:
    
    more tests.

commit 15ac6c4a1f8c9283177715899c7cf334590a64be
Author: radai-rosenblatt <radai.rosenblatt@gmail.com>
Date:   Thu Sep 29 16:53:35 2016 -0700

    Clean-up unused imports
    
    Motivation:
    
    the build doesnt seem to enforce this, so they piled up
    
    Modifications:
    
    removed unused import lines
    
    Result:
    
    less unused imports
    
    Signed-off-by: radai-rosenblatt <radai.rosenblatt@gmail.com>

commit cf8f6e3e2f608f3ac35b1cdf34934bd885108dd0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Sep 27 05:50:14 2016 +0200

    [#5861] HttpUtil.getContentLength(HttpMessage, long) throws unexpected NumberFormatException
    
    Motivation:
    
    The Javadocs of HttpUtil.getContentLength(HttpMessage, long) and its int overload state that the provided default value is returned if the Content-Length value is not a number. NumberFormatException is thrown instead.
    
    Modifications:
    
    Correctly handle when the value is not a number.
    
    Result:
    
    API works as stated in javadocs.

commit 20da5383ce50570ecda48ce84fd13d432fef83b2
Author: Masaru Nomura <massa.nomura@gmail.com>
Date:   Fri Sep 30 00:59:37 2016 +0900

    Upgrade JMH to 1.14.1
    
    Motivation:
    It'd be usually good to use the latest library version.
    
    Modification:
    Bumped JMH to the latest version as of today.
    
    Result:
    Now we use JMH version 1.14.1 for our benchmark.

commit 5bb677e7c2a37d40c7dac6bb770df5915cbda90d
Author: Dominik Obermaier <dominik.obermaier@dc-quare.de>
Date:   Thu Sep 29 15:30:18 2016 +0200

    This PR fixes an issue with the PROXY protocol where the reader index of a consumed byte array was not set correctly.
    
    Motivation:
    
    When using the AF_UNIX PROXY protocol, the reader index was not set correctly after consuming the message bytes of the original header ByteBuf. This caused no immediate harm because after the codepath there is no consumer of the ByteBuf in the current implementation. It’s a bug nevertheless, because consumers of the ByteBuf for extensions (like TLVs, which are allowed by the PROXY protocol spec) would consume a ByteBuf that has a wrong readerIndex when using AF_UNIX instead of e.g. IPv4 (which has correct behaviour)
    
    Modifications:
    
    Increase the reader index of the ByteBuf after it was read
    
    Result:
    
    Correct and consistent behaviour of the AF_UNIX codepath

commit 3240e9742021354dddf3d182526e350f73a4315e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Sep 26 06:48:58 2016 +0200

    [#5862] Http2EventAdapter#onUnknownFrame(...) should throw Http2Exception
    
    Motivation:
    
    Http2EventAdapter implements the Http2FrameListener interface but implements the #onUnknownFrame(...) method without the interface's throws Http2Exception.
    
    Modifications:
    
    Add throws Http2Exception.
    
    Result:
    
    More correct method signature.

commit 789c9a53df5e6a973ab096a3b024d235d30ed1e2
Author: rdhabalia <rdhabalia@yahoo-inc.com>
Date:   Wed Sep 28 14:35:25 2016 -0700

    Pre-increment leakCheckCnt to prevent false leak-detectation for very first time
    
    Motivation:
    ResourceLeakDetector reports leak for first call to open(obj) as its leakCheckCnt starts with value 0 and increment subsequently. with value of leakCheckCnt =0, it always returns ResourceLeak. Our application calls ResourceLeakDetector.open(obj) to validate Leak and it fails at very first call even though there is no leak in application.
    
    Modifications:
    ResourceLeakDetector.leakCheckCnt value will not be 0 while deriving leak and it will not return incorrect value of ResourceLeak.
    
    Result:
    Fix false leak report on first call on ResourceLeakDetector.

commit 149916d052180dd2b0e0e98598f349454ea200ba
Author: Roger Kapsi <rkapsi@squarespace.com>
Date:   Wed Aug 10 14:55:38 2016 -0400

    Adding ability omit the implicit #flush() call in EmbeddedChannel#writeOutbound() and
    the implicit #fireChannelReadComplete() in EmbeddedChannel#writeInbound().
    
    Motivation
    
    We use EmbeddedChannels to implement a ProxyChannel of some sorts that shovels
    messages between a source and a destination Channel. The latter are real network
    channels (such as Epoll) and they may or may not be managed in a ChannelPool. We
    could fuse both ends directly together but the EmbeddedChannel provides a nice
    disposable section of a ChannelPipeline that can be used to instrument the messages
    that are passing through the proxy portion.
    
    The ideal flow looks abount like this:
    
    source#channelRead() -> proxy#writeOutbound() -> destination#write()
    source#channelReadComplete() -> proxy#flushOutbound() -> destination#flush()
    
    destination#channelRead() -> proxy#writeInbound() -> source#write()
    destination#channelReadComplete() -> proxy#flushInbound() -> source#flush()
    
    The problem is that #writeOutbound() and #writeInbound() emit surplus #flush()
    and #fireChannelReadComplete() events which in turn yield to surplus #flush()
    calls on both ends of the pipeline.
    
    Modifications
    
    Introduce a new set of write methods that reain the same sematics as the #write()
    method and #flushOutbound() and #flushInbound().
    
    Result
    
    It's possible to implement the above ideal flow.
    
    Fix for EmbeddedChannel#ensureOpen() and Unit Tests for it
    
    Some PR stuff.

commit 6a6d422702735f6af73a55036e2e12629e8a1f2f
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Fri Sep 23 22:42:05 2016 +0200

    Complete documentation of StreamBufferingEncoder.
    
    Motivation:
    
    The StreamBufferingEncoder is missing documentation of what happens
    to buffered frames when it's closed.
    
    Modifications:
    
    Added this missing piece of documentation.
    
    Result:
    
    Improved documentation.

commit 3a8b8c9219901bb3fe6dd8b8b87b41eec3e275fc
Author: olim7t <omichallat+github@gmail.com>
Date:   Tue Aug 30 09:46:37 2016 -0700

    Consolidate flushes even when no read in progress
    
    Motivation:
    
    Currently FlushConsolidationHandler only consolidates if a read loop is
    active for a Channel, otherwise each writeAndFlush(...) call will still
    be flushed individually. When these calls are close enough, it can be
    beneficial to consolidate them even outside of a read loop.
    
    Modifications:
    
    When we allow a flush to "go through", don't perform it immediately, but
    submit it on the channel's executor. Under high pressure, this gives
    other writes a chance to enqueue before the task gets executed, and so
    we flush multiple writes at once.
    
    Result:
    
    Lower CPU usage and less context switching.

commit 5986c229c463f064e7b787a4547c0689d2302a03
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Sep 16 19:43:51 2016 -0700

    [#5833] Ensure direct memory is released when DirectPoolArena is collected
    
    Motivation:
    
    We need to ensure we release all direct memory once the DirectPoolArena is collected. Otherwise we may never reclaim the memory and so leak memory.
    
    Modifications:
    
    Ensure we destroy all PoolChunk memory when DirectPoolArena is collected.
    
    Result:
    
    Free up unreleased memory when DirectPoolArena is collected.

commit 0d2baaf6aeb1ffdb9b9a9e2bb26f4c21c5e949b0
Author: Moses Nakamura <mnakamura@twitter.com>
Date:   Wed Sep 21 16:44:43 2016 -0700

    codec-http2: Let users configure per-frame logs
    
    Motivation:
    
    codec-http2 is really loud!
    
    Modification:
    
    Allow users to select how to log in the Http2Codec.
    
    Result:
    
    We can run Http2Codec and log however we like.

commit 506ac2ca71ab44ebb8db9441da954422a75fe251
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Sep 14 19:51:21 2016 -0700

    NetUtil.bytesToIpAddress bug
    
    Motivation:
    NetUtil.bytesToIpAddress does not correctly translate IPv4 address to String. Also IPv6 addresses may not follow minimization conventions when converting to a String (see rfc 5952).
    
    Modifications:
    - NetUtil.bytesToIpAddress should correctly handle negative byte values for IPv4
    - NetUtil.bytesToIpAddress should leverage existing to string conversion code in NetUtil
    
    Result:
    Fixes https://github.com/netty/netty/issues/5821

commit dd1ba2a2521dca5f25bbe34314a8d66fe462b053
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Sep 20 20:45:03 2016 -0700

    HttpObjectDecoder resetRequested not updated after reset
    
    Motivation:
    HttpObjectDecoder maintains a resetRequested flag which is used to determine if internal state should be reset when a decode occurs. However after a reset is done the resetRequested flag is not set to false. This leads to all data after this point being discarded.
    
    Modifications:
    - Set resetRequested to false when a reset is done
    
    Result:
    HttpObjectDecoder can still function after a reset.

commit 4145fae91909ee42be1013290d2a6873f7f14eef
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Aug 12 19:27:32 2016 -0700

    HTTP/2 HPACK Decoder VarInt Improvement
    
    Motivation:
    HTTP/2 Decoder#decodeULE128 current will tolerate more bytes than necessary when attempted to detect overflow. The usage of this method also currently requires an additional overflow conditional.
    
    Modifications:
    - Integrate the first byte into Decoder#decodeULE128 which allows us to detect overflow reliably and avoid overflow checks outside of this method.
    
    Result:
    Less conditionals and earlier overflow detection in Decoder#decodeULE128

commit 9b6cbf8ab1b3cd651e9ad6ef19af21605f270dac
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Sep 21 17:33:04 2016 -0700

    Fix typo for max leak records system property
    
    Motivation:
    For the leak profile we attempted to increase the number of leak hints that were retained to make debugging easier, but there was a typo.
    
    Modifications:
    - maxRecord -> maxRecords
    
    Result:
    Fix typo in pom.xml so leak profile provides more context for leaks.

commit 9a18159bfedd1a3185a45dd860526d3afb2f15ea
Author: Roger Kapsi <rkapsi@squarespace.com>
Date:   Fri Sep 16 12:26:12 2016 -0400

    Catch+fire Exceptions thrown from SniHandler's select() method
    
    Motivation
    
    Give the user the ability to back out from SNI negoations.
    
    Modifications
    
    Put a try-catch around the select() call and re-fire any caught Exceptions.
    
    Result
    
    Fixes #5787

commit 8d6f0a3ce4c2d61c843021b77c924087a5f6ea19
Author: Frédérik Rouleau <frouleau@gmail.com>
Date:   Sat Sep 17 13:16:47 2016 +0200

    Improve SctpMessageCompletionHandler
    
    Motivation:
    
    Avoid multiple search in fragments map
    
    Modifications:
    
    Replace usage of Map.containsKey by Map.remove
    
    Result:
    
    During packet process, fragment is only search once in the map instead of 3 times in the previous worst case

commit 4a5340eae738058263e9cc232a5c3172b9eed90a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Sep 8 06:51:43 2016 +0200

    Fix IndexOutOfBoundsException in HelloWorldHttp2Handler
    
    Motivation:
    
    We need to duplicate the buffer before passing it to writeBytes(...) as it will increase the readerIndex().
    
    Modifications:
    
    Call duplicate().
    
    Result:
    
    No more IndexOutOfBoundsException when runing the multiplex example.

commit e94db103c96587d00429dcd68e7dcc4489fc80e8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Sep 12 16:10:08 2016 -0700

    Ensure flowController().writePendingBytes() is triggered when writing response in example
    
    Motivation:
    
    We called ctx.flush() which is not correct as it will not call flowController().writePendingBytes().
    
    Modifications:
    
    Call flush(ChannelHandlerContext) and so also call flowController().writePendingBytes().
    
    Result:
    
    Correct http2 example

commit e3fbfe564178470f4bf52a9cf5a9944d321ecb1c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Sep 16 09:09:21 2016 -0700

    HTTP/2 example upgrade refcnt bug
    
    Motivation:
    Http2ServerInitializer uses a SimpleChannelHandler in an attempt to ease putting an HttpObjectAggregator in the pipeline when no upgrade is attempted. However the message is double released because it is fired up the pipeline (which will be released) and also released by SimpleChannelHandler in a finally block.
    
    Modifications:
    - Retain the message if we fire it up the pipeline
    
    Result:
    HTTP/2 examples don't encounter a reference count error if no upgrade was attempted.

commit 3c62a2051942190ea7ecd7df06d9ce6911132a09
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Sep 16 08:51:11 2016 -0700

    Revert "Ensure we only call debugData.release() if we called  debugData.retain()"
    
    This reverts commit 4beb075dd3244d940c34de07a77ab15b7555f3a4.

commit 2c4a7a253912458908d45dc653b52ff3a3aaab99
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Sep 11 09:27:58 2016 +0200

    [#5800] Support any FileRegion implementation when using epoll transport
    
    Motivation:
    
    At the moment only DefaultFileRegion is supported when using the native epoll transport.
    
    Modification:
    
    - Add support for any FileRegion implementation
    - Add test case
    
    Result:
    
    Also custom FileRegion implementation are supported when using the epoll transport.

commit c57d4bed91eff61515f25713618101cc4072ade5
Author: Christopher O'Toole <otoolec@gmail.com>
Date:   Thu Sep 1 11:07:58 2016 -0500

    Add HttpServerKeepAliveHandler
    
    Motivation:
    
    As discussed in #5738, developers need to concern themselves with setting
    connection: keep-alive on the response as well as whether to close a
    connection or not after writing a response.  This leads to special keep-alive
    handling logic in many different places.  The purpose of the HttpServerKeepAliveHandler
    is to allow developers to add this handler to their pipeline and therefore
    free themselves of having to worry about the details of how Keep-Alive works.
    
    Modifications:
    
    Added HttpServerKeepAliveHandler to the io.netty.handler.codec.http package.
    
    Result:
    
    Developers can start using HttpServerKeepAliveHandler in their pipeline instead
    of worrying about when to close a connection for keep-alive.

commit da8734a6f9213cfdcf92b63fe8d014989e0ced18
Author: Moses Nakamura <mnakamura@twitter.com>
Date:   Fri Sep 9 16:54:43 2016 -0400

    codec-http2: Mark requests as chunked in Http2ServerDowngrader
    
    Motivation:
    
    Http2ServerDowngrader doesn't mark chunked requests as chunked, even
    though the natural conversion from http/2 requests to http/1.1 requests
    is to chunked ones.
    
    Modifications:
    
    Mark requests that aren't already complete as chunked.
    
    Result:
    
    Requests will be chunked, and can later be aggregated if necessary.

commit 0b5e75a614ca29810c7ef1b695c0ca962ec7b004
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Sep 13 17:03:05 2016 -0700

    IdleStateHandler volatile member variables
    
    Motivation:
    IdleStateHandler has a number of volatile member variables which are only accessed from the EventLoop thread. These do not have to be volatile. The accessibility of these member variables are not consistent between private and package private. The state variable can also use a byte instead of an int.
    
    Modifications:
    - Remove volatile from member variables
    - Change access to private for member variables
    - Change state from int to byte
    
    Result:
    IdleStateHandler member variables cleaned up.

commit 908464f161385361c450826bb1242c06f78d931e
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Mon Sep 12 19:40:26 2016 +0200

    make the http2 codec void promise ready.
    
    Motivation:
    
    Void promises need special treatment, as they don't behave like normal promises. One
    cannot add a listener to a void promise for example.
    
    Modifications:
    
    Inspected the code for addListener() calls, and added extra logic for void promises
    where necessary. Essentially, when writing a frame with a void promise, any errors
    are reported via the channel pipeline's exceptionCaught event.
    
    Result:
    
    The HTTP/2 codec has better support for void promises.

commit e3462a79c74b9d8f775e05ca256e130a66845566
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Aug 4 22:14:48 2016 -0700

    MessageAggregator Potential Leak
    
    Motivation:
    MessageAggregator has a potential to leak if a new message is received before the existing message has completed, and if a HttpContent is received but maxContentLength has been exceeded, or the content length is too long.
    
    Modifications:
    
    - Make the HttpObjectAggregator more robust to leaks
    - Reduce dependance on handlingOversizedMessage but instead rely on the more general check of a null currentMessage
    
    Result:
    More robust MessageAggregator with less chance of leaks

commit eb7f751ba519cbcab47d640cd18757f09d077b55
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Sep 9 11:16:25 2016 +0200

    Log less confusing message when try to load native library
    
    Motivation:
    
    At the moment we log very confusing messages when trying to load a native library which kind of suggest that the whole loading process failed even if just one mechanism failed and the library could be loaded at the end.
    
    Modifications:
    
    Make the mesage less confusing and also log a successful load of the native library.
    
    Result:
    
    Less confusing logs.

commit 4a18a143d2907812f5ab6ddeaa99063ecabc5614
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Sep 11 10:33:43 2016 +0200

    Only set lastReadTime if an read actually happened before in IdleStateHandler.
    
    Motivation:
    
    IdleStateHandler and ReadTimeoutHandler could mistakely not fire an event even if no channelRead(...) call happened.
    
    Modifications:
    
    Only set lastReadTime if a read happened before.
    
    Result:
    
    More correct IdleStateHandler / ReadTimeoutHandler.

commit f375772ff0b3dc1ddc005cd8c98391907883b4e1
Author: Fabian Lange <lange.fabian@gmail.com>
Date:   Fri Sep 9 13:04:51 2016 +0200

    Remove OSGi import of JCTools since it is shaded.
    
    Motivation:
    
    Since netty shaded JCTools the OSGi manifest no longer is correct. It claims to
    have an optional import "org.jctools.queues;resolution:=optional,org.jctools.qu
    eues.atomic;resolution:=optional,org.jctools.util;resolution:=optional"
    However since it is shaded, this is no longer true.
    This was noticed when making JCTools a real bundle and netty resolved it as
    optional import.
    
    Modifications:
    
    Modify the generated manifest by no longer analyzing org.jctools for imports.
    A manual setting of sun.misc as optional was required.
    
    Result:
    
    Netty OSGi bundle will no longer interfere with a JCTools bundle.

commit 4beb075dd3244d940c34de07a77ab15b7555f3a4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Sep 11 10:40:10 2016 +0200

    Ensure we only call debugData.release() if we called  debugData.retain()
    
    Motivation:
    
    We need to ensure we only call debugData.release() if we called debugData.retain(), otherwise we my see an IllegalReferenceCountException.
    
    Modifications:
    
    Only call release() if we called retain().
    
    Result:
    
    No more IllegalReferenceCountException possible.

commit 51629245d041718ca7d704a61474c7a365577cbb
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Sep 11 08:52:25 2016 +0200

    Call debugData.retain() before we forward the frame to the pipeline
    
    Motivation:
    
    We need to call debugData.retain() before we forward the frame to the pipeline as ByteToMessageDecoder will call release() on the buffer.
    
    Modifications:
    
    Correctly retain debugData and fix the unit test to test for it.
    
    Result:
    
    No more IllegalReferenceCountException when using the Http2FrameCodec.

commit 9008e72c2b6855d024db54f283cb627bb322fec7
Author: ChuntaoLu <chuntaolu13@gmail.com>
Date:   Sun Sep 11 12:46:42 2016 -0700

    Fix javadoc
    
    Removes unmatched brace

commit 245fb52c901a4de59d9444757fa5672a16bbbeec
Author: Gaston Tonietti <gaston.tonietti@gmail.com>
Date:   Fri Aug 26 02:41:34 2016 +1000

    Provide extra info together with handshake complete event.
    
    Motivation:
    
    As described in #5734
    
    Before this change, if the server had to do some sort of setup after a
    handshake was completed based on handshake's information, the only way
    available was to wait (in a separate thread) for the handshaker to be
    added as an attribute to the channel. Too much hassle.
    
    Modifications:
    
    Handshake completed event need to be stateful now, so I've added a tiny
    class holding just the HTTP upgrade request and the selected subprotocol
    which is fired as an event after the handshake has finished.
    I've also deprecated the old enum used as stateless event and I left the
    code that fires it for backward compatibility. It should be removed in
    the next mayor release.
    
    Result:
    
    It should be much simpler now to do initialization stuff based on
    subprotocol or request headers on handshake completion. No asynchronous
    waiting needed anymore.

commit d2389a9339b72e12bdab20f11f745df01b190e8a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Sep 5 14:58:08 2016 +0200

    [#5762] HTTP/2: SETTINGS_HEADER_TABLE_SIZE should be an unsigned int
    
    Motivation:
    
    he HTTP/2 spec demands that the max value for SETTINGS_HEADER_TABLE_SIZE should be an unsigned 32-bit integer.
    
    Modifications:
    
    Change the limit to unsigned 32-bit integer and add tests.
    
    Result:
    
    Complient to rfc.

commit 67d3a78123fa3faa85c1a150bd4ee69425079b3d
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Wed Sep 7 11:57:09 2016 +0200

    Reduce bytecode size of PlatformDependent0.equals.
    
    Motivation:
    
    PP0.equals has a bytecode size of 476. This is above the default inlining threshold of OpenJDK.
    
    Modifications:
    
    Slightly change the method to reduce the bytecode size by > 50% to 212 bytes.
    
    Result:
    
    The bytecode size is dramatically reduced, making the method a candidate for inlining.
    The relevant code in our application (gRPC) that relies heavily on equals comparisons,
    runs some ~10% faster. The Netty JMH benchmark shows no performance regression.
    
    Current 4.1:
    
    PlatformDependentBenchmark.unsafeBytesEqual      10  avgt   20     7.836 ±   0.113  ns/op
    PlatformDependentBenchmark.unsafeBytesEqual      50  avgt   20    16.889 ±   4.284  ns/op
    PlatformDependentBenchmark.unsafeBytesEqual     100  avgt   20    15.601 ±   0.296  ns/op
    PlatformDependentBenchmark.unsafeBytesEqual    1000  avgt   20    95.885 ±   1.992  ns/op
    PlatformDependentBenchmark.unsafeBytesEqual   10000  avgt   20   824.429 ±  12.792  ns/op
    PlatformDependentBenchmark.unsafeBytesEqual  100000  avgt   20  8907.035 ± 177.844  ns/op
    
    With this change:
    
    PlatformDependentBenchmark.unsafeBytesEqual      10  avgt   20      5.616 ±   0.102  ns/op
    PlatformDependentBenchmark.unsafeBytesEqual      50  avgt   20     17.896 ±   0.373  ns/op
    PlatformDependentBenchmark.unsafeBytesEqual     100  avgt   20     14.952 ±   0.210  ns/op
    PlatformDependentBenchmark.unsafeBytesEqual    1000  avgt   20     94.799 ±   1.604  ns/op
    PlatformDependentBenchmark.unsafeBytesEqual   10000  avgt   20    834.996 ±  17.484  ns/op
    PlatformDependentBenchmark.unsafeBytesEqual  100000  avgt   20   8757.421 ± 187.555  ns/op

commit 05fb6981662b00e99b69fe502c0492f1e1c6feba
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Sep 5 15:24:50 2016 +0200

    [#5759] Allow websocket extensions in websocketx example.
    
    Motivation:
    
    As we use compression in the websocketx example we need to allow extensions as ohterwise the example not works.
    
    Modifications:
    
    Allow extensions.
    
    Result:
    
    websocketx example does work.

commit 6bbf32134ac8efbb40e9adf177659fd8325ab596
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Aug 12 12:54:58 2016 +0200

    Log more details if notification of promise fails in PromiseNotifier and AbstractChannelHandlerContext
    
    Motivation:
    
    To make it easier to debug why notification of a promise failed we should log extra info and make it consistent.
    
    Modifications:
    
    - Create a new PromiseNotificationUtil that has static methods that can be used to try notify a promise and log.
    - Reuse this in AbstractChannelHandlerContext, ChannelOutboundBuffer and PromiseNotifier
    
    Result:
    
    Easier to debug why a promise could not be notified.

commit 8566fd10191f86487433ece7e4c3ba70383dcf08
Author: Victor Noël <victor.noel@linagora.com>
Date:   Tue Apr 26 09:25:30 2016 +0200

    Add startTls parameter to SslContextBuilder
    
    Motivation:
    
    There is an incoherence in terms of API when one wants to use
    startTls: without startTls one can use the SslContextBuilder's
    method newHandler, but with startTls, the developper is forced
    to call directly the SslHandler constructor.
    
    Modifications:
    
    Introduce startTls as a SslContextBuilder parameter as well as a
    member in SslContext (and thus Jdk and OpenSsl implementations!).
    Always use this information to call the SslHandler constructor.
    Use false by default, in particular in deprecated constructors of
    the SSL implementations.
    The client Context use false by default
    
    Results:
    
    Fixes #5170 and more generally homogenise the API so that
    everything can be done via SslContextBuilder.

commit b604a22395f64bca52d155127e2453aa3178af6c
Author: Roger Kapsi <rkapsi@squarespace.com>
Date:   Thu Sep 1 08:30:31 2016 -0400

    Expose the ChannelHandlerContext from SniHandler's select() step to the user.
    
    Motivation
    
    I'm looking to harden our SSL impl. a little bit and add some guards agaist certain types of abuse. One can think of invalid hostname strings in the SNI extenstion or invalid SNI handshakes altogether. This will require measuring, velocity tracking and other things.
    
    Modifications
    
    Adding a protected `lookup(ctx, hostname)` method that is called from SniHandler's `select(...)` method which users can override and implement custom behaviour. The default implementation will simply call the AsyncMapper.
    
    Result
    
    It's possible to get a hold onto the ChannelHandlerContext. Users can override that method and do something with it right there or they can delegate it to something else. SniHandler is happy as long as a `Future<SslContext>` is being returned.

commit e3aca1f3d6f8ee2a2c016b65fab19728eb01bc6f
Author: William Blackie <wblackie@grubhub.com>
Date:   Mon Aug 22 12:40:34 2016 -0400

    CorsHandler to respect http connection (keep-alive) header.
    
    Motivation:
    
    The CorsHandler currently closes the channel when it responds to a preflight (OPTIONS)
    request or in the event of a short circuit due to failed validation.
    
    Especially in an environment where there's a proxy in front of the service this causes
    unnecessary connection churn.
    
    Modifications:
    
    CorsHandler now uses HttpUtil to determine if the connection should be closed
    after responding and to set the Connection header on the response.
    
    Result:
    
    Channel will stay open when the CorsHandler responds unless the client specifies otherwise
    or the protocol version is HTTP/1.0

commit dfa3bbbf0035e6eb39403194c9aabae0f9c2c1a3
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jul 29 10:30:08 2016 +0200

    Add support for Client Subnet in DNS Queries (RFC7871)
    
    Motivation:
    
    RFC7871 defines an extension which allows to request responses for a given subset.
    
    Modifications:
    
    - Add DnsOptPseudoRrRecord which can act as base class for extensions based on EDNS(0) as defined in RFC6891
    - Add DnsOptEcsRecord to support the Client Subnet in DNS Queries extension
    - Add tests
    
    Result:
    
    Client Subnet in DNS Queries extension is now supported.

commit bd7806dd4f1cee226fc4330da9fa55510024f516
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Sep 5 20:20:28 2016 +0200

    Ensure SSLEngineTest works on different jvm versions.
    
    Motivation:
    
    af632278d2b966fcb45327a79345b567b56ab02c introduced a test which only worked on some jvm versions and specific os'es.
    
    Modifications:
    
    Fix test to work on different java versions and os'es
    
    Result:
    
    No flacky test.

commit af632278d2b966fcb45327a79345b567b56ab02c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Sep 5 12:23:41 2016 +0200

    Ensure we not sent duplicate certificates when using OpenSslEngine
    
    Motivation:
    
    We need to ensure we not set duplicated certificates when using OpenSslEngine.
    
    Modifications:
    
    - Skip first cert in chain when set the chain itself and so not send duplicated certificates
    - Add interopt unit tests to ensure no duplicates are send.
    
    Result:
    
    No more duplicates.

commit 147d427adc089a269c0f25aacedb9336cb0318bd
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Sep 2 07:55:50 2016 +0200

    [#5712] Allow clients to override userDefinedWritabilityIndex from AbstractTrafficShapingHandler
    
    Motivation:
    
    AbstractTrafficShapingHandler has a package-private method called "userDefinedWritabilityIndex()" which a user may need to override if two sub-classes wants to be used in the ChannelPipeline.
    
    Modifications:
    
    Mark method protected.
    
    Result:
    
    Easier to extend AbstractTrafficShapingHandler.

commit 4af685569541c46dff101b2b12cb1712da482f79
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Wed Aug 24 09:04:10 2016 +0200

    Remove @Deprecated for primitive WriteWaterMark getters and setters
    
    Motivation:
    
    For use cases that demand frequent updates of the write watermarks, an
    API that requires immutable WriteWaterMark objects is not ideal, as it
    implies a lot of object allocation.
    
    For example, the HTTP/2 child channel API uses write watermarks for outbound
    flow control and updates the write watermarks on every DATA frame write.
    
    Modifications:
    
    Remote @Deprecated tag from primitive getters and setters, however the corresponding
    channel options remain deprecated.
    
    Result:
    
    Primitive getters and setters for write watermarks are no longer marked @Deprecated.

commit 3103f0551cc0d16c7dda5bad385fc7d6a34bce6b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Aug 30 15:13:23 2016 +0200

    Share code between retain(...) and release(...) implementations.
    
    Motivation:
    
    We can share the code in retain() and retain(...) and also in release() and release(...).
    
    Modifications:
    
    Share code.
    
    Result:
    
    Less duplicated code.

commit 30fe2e868fcc99d24046e505f9406067ba6e9d07
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Aug 22 08:25:32 2016 +0200

    Call finishConnect() before try to call read(...) / write(...) when using NIO
    
    Motivation:
    
    The JDK implementation of SocketChannel has an internal state that is tracked for its operations. Because of this we need to ensure we call finishConnect() before try to call read(...) / write(...) as otherwise it may produce a NotYetConnectedException.
    
    Modifications:
    
    First process OP_CONNECT flag.
    
    Result:
    
    No more possibility of NotYetConnectedException because OP_CONNECT is handled not early enough when processing interestedOps for a Channel.

commit 54b1a100f48fd06c902ba84d1e10f3f6ec6b66c9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Aug 26 05:00:47 2016 +0200

    [maven-release-plugin] prepare for next development iteration

commit 31cbb85073d31005af7c5f657668e32ad7b17d93
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Aug 31 21:38:35 2016 +0200

    Cleanup and simplify SslHandler
    
    Motivation:
    
    SslHandler can be cleaned up a bit in terms of naming and duplicated code.
    
    Modifications:
    
    - Fix naming of arguments
    - Not schedule timeout event if not really needed
    - share some code and simplify
    
    Result:
    
    Cleaner code.

commit 515f8964b42dc34bd42cf0708a11147e2279076f
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Tue Aug 30 12:35:52 2016 +0200

    HTTP/2: Fix some errors reported by h2spec.
    
    Motivation:
    
    h2spec [1] reported 32 issues [2] with Netty's HTTP/2 implementation.
    
    Modifications:
    
    Fixed 11 of those issues. Mostly wrong error codes or added missing validation
    code in the frame reader.
    
    Result:
    
    11 fewer errors. h2spec now reports: 70 tests, 48 passed, 1 skipped, 21 failed
    
    [1] https://github.com/summerwind/h2spec
    [2] https://github.com/netty/netty/issues/5761

commit 8cf90f05127e3eda77a8749342709ab5776f7129
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Aug 31 15:17:21 2016 +0200

    [#5760] Do not change writerIndex when decode DnsPtrRecord
    
    Motivation:
    
    We need to not change the original writerIndex when decode a DnsPtrRecord as otherwise we will not be able to decode other records that follow it.
    
    Modifications:
    
    Slice the data out and so not increase the writerIndex.
    
    Result:
    
    No more problems when decoding.

commit 463b5cf21b6fe6e0e8b08615f3e47beb31f39025
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Aug 31 07:15:10 2016 +0200

    [#5773] AbstractByteBuf.forEachByteDesc(ByteProcessor) starts from wrong index
    
    Motivation:
    
    We introduced a regression in 1abdbe6f6798732447df6dd3af15f6cd871d6279 which let the iteration start from the wrong index.
    
    Modifications:
    
    Fix start index and add tests.
    
    Result:
    
    Fix regression.

commit 6fd8bb8c630d3e43e35fd34f6277a1a4dd0daca9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Aug 30 06:40:42 2016 +0200

    [#5763] DefaultEventLoopGroup doesn't expose ctor variant that accepts custom Executor
    
    Motivation:
    
    The DefaultEventLoopGroup class extends MultithreadEventExecutorGroup but doesn't expose the ctor variants that accept a custom Executor like NioEventLoopGroup and EpollEventLoopGroup do.
    
    Modifications:
    
    Add missing constructor.
    
    Result:
    
    Be able to use custom Executor with DefaultEventLoopGroup.

commit eb450d8b2f477b74f71c48d96a5b7b55fa0c3af4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Aug 29 08:00:34 2016 +0200

    Correct throw ClosedChannelException when attempt to call shutdown*(...) on closed EpollSocketChannel.
    
    Motivition:
    
    NIO throws ClosedChannelException when a user tries to call shutdown*() on a closed Channel. We should do the same for the EPOLL transport
    
    Modification:
    
    Throw ClosedChannelException when a user tries to call shutdown*() on a closed channel.
    
    Result:
    
    Consistent behavior.

commit 3051df8961273fb39fe282a46c7f76124b39112f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Aug 31 13:19:26 2016 +0200

    Ensure accessing System property is done via AccessController.
    
    Motivation:
    
    When a SecurityManager is in place it may dissallow accessing the property which will lead to not be able to load the application.
    
    Modifications:
    
    Use AccessController.doPrivileged(...)
    
    Result:
    
    No more problems with SecurityManager.

commit 00c0664ef8518cb9ba8ee8796d5bfa7f73355af4
Author: Jason Tedor <jason@tedor.me>
Date:   Wed Aug 31 06:26:20 2016 -0400

    Avoid inaccessible object exception replacing set
    
    Motivation:
    
    When attempting to set the selectedKeys fields on the selector
    implementation, JDK 9 can throw an inaccessible object exception.
    
    Modications:
    
    Catch and log this exception as an possible course of action if the
    sun.nio.ch package is not exported from java.base.
    
    Result:
    
    The selector replacement will fail gracefully as an expected course of
    action if the sun.nio.ch package is not exported from java.base.

commit 4477eb2f48199a4940dc82e48dd8d4b7f795b2ff
Author: Trustin Lee <t@motd.kr>
Date:   Wed Aug 31 09:01:37 2016 +0900

    Fix native library loading in Windows
    
    Motivation:
    
    Windows refuses to load a .DLL file when it's opened by other process.
    Recent modification in NativeLibraryLoader causes NativeLibraryLoader to
    attempt to load a .DLL before closing its OutputStream. As a result,
    loading a .DLL file in Windows always fails.
    
    Modifications:
    
    Close the OutputStream explicitly before loading a shared library.
    
    Result:
    
    Native library loading in Windows works again.

commit f6c16f4897ce395011c70c0351a0ddc3d6c21337
Author: Christopher O'Toole <otoolec@gmail.com>
Date:   Sun Aug 14 20:17:42 2016 -0500

    Attempt at improving docs in HttpObjectAggregator
    
    Motivation:
    
    Documentation was added in #2401 to aid developers in understanding
    how HttpObjectAggregator works and that it needs an encoder before it.
    
    In #2471 it was pointed out that the documentation added can actually
    add to the confusion and that it might have a typo.
    
    This is an attempt at clearing up that confusion.  Feedback is welcome.
    
    Modifications:
    
    - Adjust class level javadoc for HttpObjectAggregator
      * Remove reference to HttpRequestEncoder
      * Point out when HttpResponseEncoder is needed
      * Point out that either HttpRequestDecoder or HttpResponseDecoder is needed
      * Make clear everything must be added before HttpObjectAggregator
      * Mention HttpServerCodec
    
    Result:
    
    Avoid confusion about dependencies for HttpObjectAggregator on the pipeline.

commit f97866dbc6e7edc987de9bf7d31f563ce726833e
Author: Roger Kapsi <rkapsi@squarespace.com>
Date:   Fri Aug 26 08:28:25 2016 -0400

    Expose SniHandler's replaceHandler() so that users can implement custom behavior.
    
    Motivation
    
    The SniHandler is currently hiding its replaceHandler() method and everything that comes with it. The user has no easy way of getting a hold onto the SslContext for the purpose of reference counting for example. The SniHandler does have getter methods for the SslContext and hostname but they're not very practical or useful. For one the SniHandler will remove itself from the pipeline and we'd have to track a reference of it externally and as we saw in #5745 it'll possibly leave its internal "selection" object with the "EMPTY_SELECTION" value (i.e. we've just lost track of the SslContext).
    
    Modifications
    
    Expose replaceHandler() and allow the user to override it and get a hold onto the hostname, SslContext and SslHandler that will replace the SniHandler.
    
    Result
    
    It's possible to get a hold onto the SslContext, the hostname and the SslHandler that is about to replace the SniHandler. Users can add additional behavior.

commit 1208b90f57b12b081074e02cdd543992c7f1e6d9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Aug 26 04:59:35 2016 +0200

    [maven-release-plugin] prepare release netty-4.1.5.Final

commit d0dc02d82670196f0183582ba4879f012174ce93
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Aug 29 12:43:11 2016 +0200

    Correctly guard against NotYetConnectedExceptions when handling RDHUP.
    
    Motivation:
    
    Commit 2c1f17faa268b9a1b8ef8f1ddaf832d1397719a3 introduced a regression which could cause NotYetConnectedExceptions when handling RDHUP events.
    
    Modifications:
    
    Correct ignore NotYetConnectedException when handling RDHUP events.
    
    Result:
    
    No more regression.

commit 1fef3872fbe12d222c356d6975a4f488017a1168
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Aug 27 20:49:16 2016 +0200

    Update CertificateRequestCallback usage to match new tcnative
    
    Motiviation:
    
    Previously the way how CertificateRequestCallback was working had some issues which could cause memory leaks and segfaults. Due of this tcnative code was updated to change the signature of the method provided by the interface.
    
    Modifications:
    
    Update CertificateRequestCallback implementations to match new interface signature.
    
    Result:
    
    No more segfaults / memory leaks when using boringssl or openssl >= 1.1.0

commit d3cb95ef005269e939622829e8daff610473ee22
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Aug 18 16:58:17 2016 +0200

    Make NIO and EPOLL transport connect errors more consistent with the JDK
    
    Motivation:
    
    The NIO transport used an IllegalStateException if a user tried to issue another connect(...) while the connect was still in process. For this case the JDK specified a ConnectPendingException which we should use. The same issues exists in the EPOLL transport. Beside this the EPOLL transport also does not throw the right exceptions for ENETUNREACH and EISCONN errno codes.
    
    Modifications:
    
    - Replace IllegalStateException with ConnectPendingException in NIO and EPOLL transport
    - throw correct exceptions for ENETUNREACH and EISCONN in EPOLL transport
    - Add test case
    
    Result:
    
    More correct error handling for connect attempts when using NIO and EPOLL transport

commit 3a6157e2aa84c7f134b5610013b0e3e432eadcb9
Author: Roger Kapsi <rkapsi@squarespace.com>
Date:   Sat Aug 27 08:41:09 2016 -0400

    Unit Test for SslHandler's handlerRemoved()
    
    Motivation
    
    SslHandler's handlerRemoved() is supposed to release the SSLEngine (which it does) but there is no Test for it to make sure it really happens and doesn't unexpectedly change in the future.
    
    Modifications
    
    Add a Unit Test that makes sure that SslHandler releases the SSLEngine when the Channel gets closed.
    
    Result
    
    Assurance that SslHandler will not leak (ReferenceCounted) SSLEngines.

commit a01519e4f86690323647b5db45d9ffcb184b1a84
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Aug 19 11:19:30 2016 +0200

    [#5718] Result of ByteBufUtil.compare(ByteBuf a, ByteBuf b) is dependent on ByteOrder of supplied ByteBufs
    
    Motivation:
    
    Result of ByteBufUtil.compare(ByteBuf a, ByteBuf b) is dependent on ByteOrder of supplied ByteBufs which should not be the case (as stated in the javadocs).
    
    Modifications:
    
    Ensure we get a consistent behavior when calling ByteBufUtil.compare(ByteBuf a, ByteBuf b) and not depend on ByteOrder.
    
    Result:
    
    ByteBufUtil.compare(ByteBuf a, ByteBuf b) and so AbstractByteBuf.compare(...) works correctly as stated in the javadocs.

commit 5b46cf25c1c8db7c7e4d31c4b39a68a90217e86e
Author: Trustin Lee <t@motd.kr>
Date:   Wed Aug 24 19:25:59 2016 +0900

    Fulfill the write promise of empty HTTP/2 DATA frames sooner
    
    Motivation:
    
    DefaultHttp2ConnectionEncoder.FlowControlledData.write() does not
    complete the write promise of empty HTTP/2 DATA frames until either a
    non-DATA frame, a non-empty DATA frame or a DATA frame with endOfStream
    set. This makes the write promise of the empty DATA frame is notified
    much later than it could be.
    
    Modifications:
    
    - Notify the write promise of the empty DATA frames immediately is the
      queue contains empty DATA frames only
    
    Result:
    
    The write promise of an empty DATA frame is notified sooner.

commit acb40a87c31c524e9f7fe9a06a9c1ac7ee96c2aa
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Aug 10 18:17:17 2016 -0700

    SniHandler reference count leak if pipeline replace fails
    
    Motivation:
    The SniHandler attempts to generate a new SslHandler from the selected SslContext in a and insert that SslHandler into the pipeline. However if the underlying channel has been closed or the pipeline has been modified the pipeline.replace(..) operation may fail. Creating the SslHandler may also create a SSLEngine which is of type ReferenceCounted. The SslHandler states that if it is not inserted into a pipeline that it will not take reference count ownership of the SSLEngine. Under these conditions we will leak the SSLEngine if it is reference counted.
    
    Modifications:
    - If the pipeline.replace(..) operation fails we should release the SSLEngine object.
    
    Result:
    Fixes https://github.com/netty/netty/issues/5678

commit 208893aac98ecb94ec190f1834db928e2e7908a0
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sun Aug 14 15:54:06 2016 -0700

    HTTP/2 Hpack Encoder Cleanup
    
    Motivation:
    The HTTP/2 HPACK Encoder class has some code which is only used for test purposes. This code can be removed to reduce complexity and member variable count.
    
    Modifications:
    - Remove test code and update unit tests
    - Other minor cleanup
    
    Result:
    Test code is removed from operational code.

commit 4accd300e55b9f234ef5f460a7f4243bb19178e5
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Wed Aug 24 10:56:21 2016 +0200

    Fix write watermarks comparison to use less than and greater than.
    
    Motivation:
    
    The API documentation in ChannelConfig states that a a channel is writable,
    if the number of pending bytes is below the low watermark and a
    channel is not writable, if the number of pending bytes exceeds the high
    watermark.
    
    Therefore, we should use < operators instead of <= as well as > instead of >=.
    
    Using <= and >= is also problematic, if the low watermark is equal to the high watermark,
    as then a channel could be both writable and unwritable with the same number of pending
    bytes (depending on whether remove() or addMessage() is called first).
    
    The use of <= and >= was introduced in PR https://github.com/netty/netty/pull/3036, but
    I don't understand why, as there doesn't seem to have been any discussion around that.
    
    Modifications:
    
    Use < and > operators instead of <= and >=.
    
    Result:
    
    High and low watermarks are treated as stated in the API docs.

commit a8b8553ad1096f4f90f2d4868644ded1aa2d9a9b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Aug 24 08:54:29 2016 +0200

    Revert "CorsHandler to respect http connection (keep-alive) header."
    
    This reverts commit ecd6e5ce6d82756475e88ae69d2bfef1082edb68.

commit ecd6e5ce6d82756475e88ae69d2bfef1082edb68
Author: William Blackie <wblackie@grubhub.com>
Date:   Mon Aug 22 12:40:34 2016 -0400

    CorsHandler to respect http connection (keep-alive) header.
    
    Motivation:
    
    The CorsHandler currently closes the channel when it responds to a preflight (OPTIONS)
    request or in the event of a short circuit due to failed validation.
    
    Especially in an environment where there's a proxy in front of the service this causes
    unnecessary connection churn.
    
    Modifications:
    
    CorsHandler now uses HttpUtil to determine if the connection should be closed
    after responding
    
    Result:
    
    Channel will stay open when the CorsHandler responds unless the client specifies otherwise
    or the protocol version is HTTP/1.0

commit 5e148d56705d0770e124216fde2790f5e220ca5e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Aug 15 14:26:19 2016 +0200

    [#5639] Ensure fireChannelActive() is also called if Channel is closed in connect promise.
    
    Motivation:
    
    We need to ensure we also call fireChannelActive() if the Channel is directly closed in a ChannelFutureListener that is belongs to the promise for the connect. Otherwise we will see missing active events.
    
    Modifications:
    
    Ensure we always call fireChannelActive() if the Channel was active.
    
    Result:
    
    No missing events.

commit 2c1f17faa268b9a1b8ef8f1ddaf832d1397719a3
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Aug 16 16:01:37 2016 +0200

    Throw correct NotYetConnectedException when ENOTCONN errno is set
    
    Motivation:
    
    We should throw a NotYetConnectedException when ENOTCONN errno is set. This is also consistent with NIO.
    
    Modification:
    
    Throw correct exception and add test case
    
    Result:
    
    More correct and consistent behavior.

commit 43626ac6ea2426af7cbf9a12baf31447e7408cdf
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Aug 17 14:23:12 2016 +0200

    Use NIO methods when using Java7+ in the NIO transport
    
    Motivation:
    
    We use often javachannel().socket().* in NIO as these methods exists in java6. The problem is that these will throw often very general Exceptions (Like SocketException) while it is more expected to throw the Exceptions listed in the nio interfaces. When possible we should use the new methods available in java7+ which throw the correct exceptions.
    
    Modifications:
    
    Check for java version and depending on it using the socket or the javachannel.
    
    Result:
    
    Throw expected Exceptions.

commit 8ce7e73e78dd4d46f823cae356f0e976e7152327
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Aug 18 20:47:33 2016 +0200

    Prevent extra peformance hit by fillInStackTrace() when create a new annotated connect exception.
    
    Motivation:
    
    To make it easier to debug connect exceptions we create new exceptions which also contain the remote address. For this we basically created a new instance and call setStackTrace(...). When doing this we pay an extra penality because it calls fillInStackTrace() when calling the super constructor.
    
    Modifications:
    
    Create special sub-classes of Exceptions that override the fillInStackTrace() method and so eliminate the overhead.
    
    Result:
    
    Less overhead when "annotate" connect exceptions.

commit 2d111e098050f420782005cc2735ec619d455cef
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Aug 11 11:26:32 2016 +0200

    Ensure SslHandler.close(...) will not throw exception if flush of pending messages fails
    
    Motivation:
    
    When SslHandler.close(...) is called (as part of Channel.close()). it will also try to flush pending messages. This may fail for various reasons, but we still should propergate the close operation
    
    Modifications:
    
    - Ensure flush(...) itself will not throw an Exception if we was able to at least fail one pending promise (which should always be the case).
    - If flush(...) fails as part of close ensure we still close the channel and then rethrow.
    
    Result:
    
    No more lost close operations possible if an exception is thrown during close

commit e4154bcb0b91acfe5cf041208fc255aff16143be
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Aug 19 14:15:19 2016 +0200

    [#5720] Static initializers can cause deadlock
    
    Motivation:
    
    SystemPropertyUtil requires InternalLoggerFactory requires ThreadLocalRandom requires SystemPropertyUtil. This can lead to a dead-lock.
    
    Modifications:
    
    Ensure ThreadLocalRandom does not require SystemPropertyUtil during initialization.
    
    Result:
    
    No more deadlock possible.

commit 8d1e46ffd148324e8b385ec99b60c720241e5b45
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Mon Aug 22 14:16:17 2016 +0200

    Remove reference to 5.0 release.
    
    Motivation:
    
    Comments stating that AUTO_CLOSE will be removed in Netty 5.0 are wrong,
    as there is no Netty 5.0.
    
    Modifications:
    
    Removed comment.
    
    Result:
    
    No more references to Netty 5.0

commit 3451b3cbb3eb0e225bda0b29ba36b87035645ef8
Author: Sergey Polovko <jamel@yandex-team.ru>
Date:   Mon Aug 22 19:51:45 2016 +0300

    Cookie name must be case sensitive
    
    Motivation:
    
    RFC 6265 does not state that cookie names must be case insensitive.
    
    Modifications:
    
    Fix io.netty.handler.codec.http.cookie.DefaultCookie#equals() method to
    use case sensitive String#equals() and String#compareTo().
    
    Result:
    
    It is possible to parse several cookies with same names but with
    different cases.

commit 9bc3e56647e4794178a721f2d06128a4ca868b79
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Aug 17 13:17:18 2016 -0700

    ReferenceCountedOpenSslEngineTest cleanup sequencing bug
    
    Motivation:
    ReferenceCountedOpenSslEngine depends upon the the SslContext to cleanup JNI resources. If we don't wait until the ReferenceCountedOpenSslEngine is done with cleanup before cleaning up the SslContext we may crash the JVM.
    
    Modifications:
    - Wait for the channels to close (and thus the ReferenceCountedOpenSslEngine to be cleaned up) before cleaning up the associated SslContext.
    
    Result:
    Cleanup sequencing is correct and no more JVM crash.
    Fixes https://github.com/netty/netty/issues/5692

commit 5fd239c29c6102185ef7833441b4c67da15f7ed2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Aug 12 11:15:46 2016 +0200

    Ensure we not log missleading errors if the promise was already failed due errors
    
    Motivation:
    
    In DefaultHttp2ConnectionEncoder we fail the promise in in the FlowControlledData.error(...) method but also add it the CoalescingBufferQueue. Which can lead to have the promise failed by error(...) before it can be failed in CoalescingBufferQueue.
    
    This can lead to confusing and missleading errors in the log like:
        2016-08-12 09:47:43,716       nettyIoExecutorGroup-1-9 [WARN ] PromiseNotifier                - Failed to mark a promise as failure because it's done already: DefaultChannelPromise@374225e0(failure: javax.net.ssl.SSLException: SSLEngine closed already)
        javax.net.ssl.SSLException: SSLEngine closed already
            at io.netty.handler.ssl.SslHandler.wrap(...)(Unknown Source) ~[netty-all-4.1.5.Final-SNAPSHOT.jar:?]
    
    Modifications:
    
    Ensure we only fail the queue (which will also fail the promise).
    
    Result:
    
    No more missleading logs.

commit 6d70f4b38a2c9117b27199cc584d9670f7c002e6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Aug 12 08:53:39 2016 +0200

    Guard against re-entrance in PendingWriteQueue.removeAndWriteAll()
    
    Motivation:
    
    PendingWriteQueue should guard against re-entrant writes once removeAndWriteAll() is run.
    
    Modifications:
    
    Continue writing until queue is empty.
    
    Result:
    
    Correctly guard against re-entrance.

commit 382f8eacaf71a37db8675e9dd3a6a98c2cfb9b4e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Aug 11 21:21:34 2016 +0200

    Correctly fail all promises SSLENGINE_CLOSED once the engine is closed
    
    Motivation:
    
    We should fail all promises with the correct SSLENGINE_CLOSED exception one the engine is closed. We did not fail the current promise with this exception if the ByteBuf was not readable.
    
    Modifications:
    
    Correctly fail promises.
    
    Result:
    
    More correct handling of promises if the SSLEngine is closed.

commit d568cfc14ae18750a2792241ddb5a72de090ad3b
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Tue Aug 16 19:14:42 2016 +0200

    HTTP/2: Treat MAX_CONCURRENT_STREAMS exceeded as a stream error.
    
    Motivation:
    
    As per the HTTP/2 spec, exceeding the MAX_CONCURRENT_STREAMS should be treated as a stream error as opposed to a connection error.
    
    "An endpoint that receives a HEADERS frame that causes its advertised concurrent stream limit to be exceeded MUST treat this as a stream error (Section 5.4.2) of type PROTOCOL_ERROR or REFUSED_STREAM." http://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2
    
    Modifications:
    
    Make the error a stream error.
    
    Result:
    
    It's a stream error.

commit e7449b1ef361c55457ed21d44d6ed8387ec1fa45
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Aug 5 20:17:24 2016 +0200

    [#5645] Allow to create ByteBuf from existing memory address.
    
    Motivation:
    
    Sometimes it is useful to be able to wrap an existing memory address (a.k.a pointer) and create a ByteBuf from it. This way its easier to interopt with other libraries.
    
    Modifications:
    
    Add a new Unpooled.wrappedBuffer(....) method that takes a memory address.
    
    Result:
    
    Be able to wrap an existing memory address into a ByteBuf.

commit 00f74b92fa4e10e26ea8b99f2bb95681085a3dc8
Author: XU JINCHUAN <xsir@msn.com>
Date:   Fri Jul 15 22:36:44 2016 +0800

    Fix the tcnative lib loading problem in OSGi
    
    Motivation:
    
    As the issue #5539 say, the OpenSsl.class will throw `java.lang.UnsatisfiedLinkError: org.apache.tomcat.jni.Library.version(I)I` when it is invoked. This path try to resolve the problem by modifying the native library loading logic of OpenSsl.class.
    
    Modifications:
    
    The OpenSsl.class loads the tcnative lib by `NativeLibraryLoader.loadFirstAvailable()`. The native library will be loaded in the bundle `netty-common`'s ClassLoader, which is diff with the native class's ClassLoader. That is the root cause of throws `UnsatisfiedLinkError` when the native method is invoked.
    So, it should load the native library by the its bundle classloader firstly, then the embedded resources if failed.
    
    Result:
    
    First of all, the error threw by native method problem will be resolved.
    Secondly, the native library should work as normal in non-OSGi env. But, this is hard. The loading logic of `Library.class` in `netty-tcnative` bundle is simple: try to load the library in PATH env. If not found, it falls back to the originally logic `NativeLibraryLoader.loadFirstAvailable()`.
    
    Signed-off-by: XU JINCHUAN <xsir@msn.com>

commit 8d043cc4ddf585261b86fafbee52625be9a38f04
Author: Akhil <Akaranth@grubhub.com>
Date:   Mon Aug 15 13:22:15 2016 -0400

    Do not return Access-Control-Allow-Headers on Non-Preflight Cors requests
    
    Motivation:
    
    The CorsHandler currently returns the Access-Control-Allow-Headers
    header as on a Non-Preflight CORS request (Simple request).
    As per the CORS specification the Access-Control-Allow-Headers header
    should only be returned on Preflight requests. (not on simple requests).
    
    https://www.w3.org/TR/2014/REC-cors-20140116/#access-control-allow-headers-response-header
    
    http://www.html5rocks.com/static/images/cors_server_flowchart.png
    
    Modifications:
    
    Modified CorsHandler.java to not add the Access-Control-Allow-Headers
    header when responding to Non-preflight CORS request.
    
    Result:
    
    Access-Control-Allow-Headers header will not be returned on a Simple
    request (Non-preflight CORS request).

commit fb3dc84e5b032323d842e07880f4b045a4fd459b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Aug 16 13:42:09 2016 +0200

    Only run PemEncodedTest if OpenSsl.useKeyManagerFactory() returns false.
    
    Motivation:
    
    Commit b963595988d729e83cedddb180a5e24085b9e494 added a unit that will not work when KeyManagerFactory is used.
    
    Modifications:
    
    Only run the test if OpenSsl.useKeyManagerFactory() returns false.
    
    Result:
    
    Builds with boringssl

commit fa6b0e262eb26e8b2f06902963373295e0c72120
Author: Tomer Cohen <tomer+github.com@tomercohen.com>
Date:   Mon Aug 15 19:57:05 2016 +0300

    Support Unicode filenames and spaces in directory listing
    
    Motivation:
    
    The HTTP Static File Server seems to ignore filenames that doesn't contains only latin characters, but these days people wish to serve files in other languages, or even include some emojis in the filename. Although these files are not displayed on the directory listing, they are accessible by HTTP requests. This fix will make such files more visible.
    
    Modifications:
    
    I've changed the ALLOWED_FILE_NAME pattern to disallow only files that starts with underline, minus or a dot (such as .htaccess), and hide other "unsafe" filenames that may be used to trigger some security issues. Other filenames, including the space character are allowed.
    
    I've also added charset encoding to the directory listing, because the browser default MAY be configured for ISO-8859-1 instead of UTF-8.
    
    Result:
    
    Directory listing will work for files that contains the space character, as well as other Unicode characters.

commit 15222c084d8153752d5d008938750fc6c9fcd962
Author: Tomer Cohen <tomer+github.com@tomercohen.com>
Date:   Mon Aug 15 15:15:10 2016 +0300

    Never expose user.dir to the web on directory listing
    
    Motivation:
    
    When Netty HTTP Static File Server does directory listing, it does expose the user.dir environment variable to the user. Although it doesn't a security issue, it is a bad practice to show it, and the user does expect to see the server virtual root instead, which is the absolute path as mentioned in the RFC.
    
    Modifications:
    
    the sendListing method receives a third argument, which is the requested URI, and this is what should be displayed on the page instead of the filesystem path.
    
    Result:
    
    The directory listing pages will show the virtual path as described in the URI and not the real filesystem path.
    
    Removed fallback method

commit b963595988d729e83cedddb180a5e24085b9e494
Author: Roger Kapsi <rkapsi@squarespace.com>
Date:   Mon Aug 15 13:44:30 2016 -0400

    Fix handling of non direct backed PemEncoded.
    
    Motivation:
    
    The private key and certificate that are passed into #serKeyMaterial() could be PemEncoded in which case the #toPEM() methods return the identity of the value.
    
    That in turn will fail in the #toBIO() step because the underlying ByteBuf is not necessarily direct.
    
    Modifications:
    
    - Use toBIO(...) which also works with non direct PemEncoded values
    - Add unit test.
    
    Result:
    
    Correct handling of PemEncoded.

commit 3a4d30df4e3aba7cdc5c8343016e7e13de3ada86
Author: tsu <tsu@yaroot.net>
Date:   Sat Aug 13 19:58:28 2016 +0800

    Make SocksServer example compatible with `curl --socks5-hostname`
    
    Motivation:
    
    Socks5 proxy supports resolve domain at the server side. When testing
    with curl, the SocksServer in example package only works for proxy
    request with IP, not with domain name (`--socks5` vs
    `--socks5-hostname`). As curl is widely used, it should work with
    the example provided.
    
    Modifications:
    
    Passing address and port to the Socks5CommandResponse, so that it
    works for curl.
    
    Result:
    
    `curl --socks5-hostname` works as expected.

commit 00deb2efd560cb9b2d85ccdefbcfa5b13ab1b463
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Aug 12 14:31:23 2016 +0200

    Remove missleading javadoc
    
    Motivation:
    
    Its completely fine to start writing before the handshake completes when using SslHandler. The writes will be just queued.
    
    Modifications:
    
    Remove the missleading and incorrect javadoc.
    
    Result:
    
    Correct javadoc.

commit f73c4f24ee36c671562840e941c914f79566cf97
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Aug 13 10:59:28 2016 -0700

    HTTP/2 HPACK Bounds Check Fix
    
    Motivation:
    21e8d84b7961c36435714cdb16eec31ad08213bc changed the way bounds checking was done, but however a bounds check in the case of READ_LITERAL_HEADER_NAME_LENGTH_PREFIX was using an old value. This would delay when the bounds check would actually be done and potentially allow more allocation than necessary.
    
    Modifications:
    - Use the new length (index) in the bounds check instead of an old length (nameLength) which had not yet been assigned to the new value.
    
    Result:
    More correct bounds checking.

commit 21e8d84b7961c36435714cdb16eec31ad08213bc
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Aug 5 00:09:43 2016 -0700

    HTTP/2 Simplify Headers Decode Bounds Checking
    
    Motivation:
    The HPACK decoder keeps state so that the decode method can be called multiple times with successive header fragments. This decoder also requires that a method is called to signify the decoding is complete. At this point status is returned to indicate if the max header size has been violated. Netty always accumulates the header fragments into a single buffer before attempting to HPACK decode process and so keeping state and delaying notification that bounds have been exceeded is not necessary.
    
    Modifications:
    - HPACK Decoder#decode(..) now must be called with a complete header block
    - HPACK will terminate immediately if the maximum header length, or maximum number of headers is exceeded
    - Reduce member variables in the HPACK Decoder class because they can now live in the decode(..) method
    
    Result:
    HPACK bounds checking is done earlier and less class state is needed.

commit 95ee705e17d5829c46a99a95d5cba62858d6e1d5
Author: tbcs <tbcs@users.noreply.github.com>
Date:   Fri Aug 12 20:06:10 2016 +0200

    fix typo in javadoc

commit c1d50669295906fd1881ff246aa3af34f932da13
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Aug 11 09:08:16 2016 +0200

    Ensure BIO is only used one time
    
    Motivation:
    
    Its not safe to reuse a BIO, we need to ensure we only use it once.
    
    Modifications:
    
    Only use the BIO once.
    
    Result:
    
    Correctly usage of BIO

commit 4d74bf3984a7f13ee0c2d1f8adf6266565ea8c59
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Aug 11 09:30:17 2016 -0700

    HTTP/2 MaxStreams cleanup
    
    Motivation:
    765e944d4d105863ccb8e3e745285aaea0b8105b imposed a limit on the maximum number of stream in all states. However the default limit did not allow room for streams in addition to SETTINGS_MAX_CONCURRENT_STREAMS. This can mean streams in states outside the states which SETTINGS_MAX_CONCURRENT_STREAMS applies to may not be reliably created.
    
    Modifications:
    - The default limit should be larger than SETTINGS_MAX_CONCURRENT_STREAMS
    
    Result:
    More lenient limit is applied to maxStreams by default.

commit 765e944d4d105863ccb8e3e745285aaea0b8105b
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Aug 9 13:10:02 2016 -0700

    HTTP/2 limit streams in all states
    
    Motivation:
    SETTINGS_MAX_CONCURRENT_STREAMS does not apply to idle streams and thus we do not apply any explicit limitations on how many idle streams can be created. This may allow a peer to consume an undesirable amount of resources.
    
    Modifications:
    - Each Endpoint should enforce a limit for streams in a any state. By default this limit will be the same as SETTINGS_MAX_CONCURRENT_STREAMS but can be overridden if necessary.
    
    Result:
    There is now a limit to how many IDLE streams can be created.

commit 47d55339c947badf0aa1c8786f0fbca80e270082
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Aug 6 21:47:26 2016 +0200

    [#5648] Detect if netty-tcnative is in classpath or just tcnative
    
    Motivation:
    
    If netty is used in a tomcat container tomcat itself may ship tcnative. Because of this we will try to use OpenSsl in netty and fail because it is different to netty-tcnative.
    
    Modifications:
    
    Ensure if we find tcnative it is really netty-tcnative before using it.
    
    Result:
    
    No more problems when using netty in a tomcat container that also has tcnative installed.

commit 260e9ece9035a8102387aedeed8078f3d5ff78e7
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Aug 11 08:52:37 2016 +0200

    Upgrade netty-tcnative
    
    Motivation:
    
    A new version of netty-tcnative was released.
    
    Modifications:
    
    Upgrade to new netty-tcnative.
    
    Result:
    
    Not depend on old version anymore.

commit 979d775f5f439200fa24088ab4163d82bd8c5ed0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Aug 8 20:55:51 2016 +0200

    Remove volatile from field as its not needed.
    
    Motivation:
    
    We not need to mark the field as volatile and so this may confuse people.
    
    Modifications:
    
    Remove volatile and add comment to explain why its not needed.
    
    Result:
    
    More correct example.

commit be77dfb1ca5a8df86a9798b045e35b769c7c950b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Aug 6 21:01:16 2016 +0200

    Just cast Cleaner to Runnable in Java9+ to prevent IllegalAccessException
    
    Motivation:
    
    When try to call Cleaner.run() via reflection on Java9 you may see an IllegalAccessException.
    
    Modifications:
    
    Just cast the Cleaner to Runnable to prevent IllegalAccessException to be raised.
    
    Result:
    
    Free direct buffers also work on Java9+ as expected.

commit cb5f71782ea202a3018f099f42841a940dce2e51
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Aug 9 18:14:22 2016 +0200

    Ensure we only call ReferenceCountUtil.safeRelease(...) in finalize() if the refCnt() > 0
    
    Motivation:
    
    We need to ensure we only call ReferenceCountUtil.safeRelease(...) in finalize() if the refCnt() > 0 as otherwise we will log a message about IllegalReferenceCountException.
    
    Modification:
    
    Check for a refCnt() > 0 before try to release
    
    Result:
    
    No more IllegalReferenceCountException produced when run finalize() on OpenSsl* objects that where explicit released before.

commit fef2940f328c40ebeead8e9931594028914d521e
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Aug 4 15:05:47 2016 -0700

    Update for netty-tcnative API changes
    
    Motivation:
    netty-tcnative API has changed to remove a feature that contributed to a memory leak.
    
    Modifications:
    - Update to use the modified netty-tcnative API
    
    Result:
    Netty can use the latest netty-tcnative.

commit ef159db3203e00302c587bd0d4056ff723439c21
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Aug 9 17:59:18 2016 +0200

    Delete temporary .so file after loading
    
    Motivation:
    
    Our current strategy in NativeLibraryLoader is to mark the temporary .so file to be deleted on JVM exit. This has the drawback to not delete the file in the case the JVM dies or is killed.
    
    Modification:
    
    Just directly try to delete the file one we loaded the native library and if this fails mark the file to be removed once the JVM exits.
    
    Result:
    
    Less likely to have temporary files still on the system in case of JVM kills.

commit 1abdbe6f6798732447df6dd3af15f6cd871d6279
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Aug 9 10:17:06 2016 -0700

    AbstractByteBuf forEach minimize byte code
    
    Motivation:
    The default limit for the maximum amount of bytes that a method will be inlined is 35 bytes. AbstractByteBuf#forEach and AbstractByteBuf#forEachDesc comprise of method calls which are more than this maximum default threshold and may prevent or delay inlining for occuring. The byte code for these methods can be reduced to allow for easier inlining. Here are the current byte code sizes:
    
    AbstractByteBuf::forEachByte (24 bytes)
    AbstractByteBuf::forEachByte(int,int,..) (14 bytes)
    AbstractByteBuf::forEachByteAsc0 (71 bytes)
    AbstractByteBuf::forEachByteDesc (24 bytes)
    AbstractByteBuf::forEachByteDesc(int,int,.) (24 bytes)
    AbstractByteBuf::forEachByteDesc0 (69 bytes)
    
    Modifications:
    - Reduce the code for each method in the AbstractByteBuf#forEach and AbstractByteBuf#forEachDesc call stack
    
    Result:
    AbstractByteBuf::forEachByte (25 bytes)
    AbstractByteBuf::forEachByte(int,int,..) (25 bytes)
    AbstractByteBuf::forEachByteAsc0 (29 bytes)
    AbstractByteBuf::forEachByteDesc (25 bytes)
    AbstractByteBuf::forEachByteDesc(int,int,..) (27 bytes)
    AbstractByteBuf::forEachByteDesc0 (29 bytes)

commit a4ad68239ef372ae097c6fd35e47f3e5c130ba13
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Aug 9 13:55:43 2016 -0700

    Http2ConnectionDecoder remove localSettings setter method
    
    Motivation:
    Http2ConnectionDecoder#localSettings(Http2Settings) is not used in codec-http2 and currently results in duplicated code.
    
    Modifications:
    - Remove Http2ConnectionDecoder#localSettings(Http2Settings)
    
    Result:
    Smaller interface and less duplicated code.

commit 129aee8a920361dec1a1c3dabac62f58e25cf143
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Aug 8 11:47:47 2016 +0200

    Remove unused imports and not needed throws declarations.
    
    Motivation:
    
    In latest refeactoring we failed to cleanup imports and also there are some throws declarations which are not needed.
    
    Modifications:
    
    Cleanup imports and throws declarations
    
    Result:
    
    Cleaner code.

commit 1bcc0709436100c62cfa19ef744f486a5295de4a
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Tue Aug 9 10:44:31 2016 +0300

    cleanup, duplicated static final fields
    
    Motivation:
    
    There are few duplicated byte[] CRLF fields in code.
    
    Modifications:
    
    Removed duplicated fields as they could be inherited from parent encoder.
    
    Result:
    
    Less static fields.

commit 65dea8aeec2055432de7474dc46e001129a2498c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Aug 5 20:23:14 2016 +0200

    Fix Assume.assumeTrue(...) checks in *UnssafeNoCleanerDirectByteBufTest
    
    Motivation:
    
    We used incorrect assumeTrue(...) checks.
    
    Modifications:
    
    Fix check.
    
    Result:
    
    Be able to run tests also if java.nio.DirectByteBuffer.<init>(long, int) could not be accessed.

commit 9fef4ba1bf27b61c004fcecb43d446113db2d623
Author: Trustin Lee <t@motd.kr>
Date:   Wed Aug 10 11:53:59 2016 +0900

    Disable IPv6 address lookups when -Djava.net.preferIPv4Stack=true
    
    Motivation:
    
    According to the Oracle documentation:
    
    > java.net.preferIPv4Stack (default: false)
    >
    > If IPv6 is available on the operating system, the underlying native
    > socket will be an IPv6 socket. This allows Java applications to connect
    > to, and accept connections from, both IPv4 and IPv6 hosts.
    >
    > If an application has a preference to only use IPv4 sockets, then this
    > property can be set to true. The implication is that the application
    > will not be able to communicate with IPv6 hosts.
    
    which means, if DnsNameResolver returns an IPv6 address, a user (or
    Netty) will not be able to connect to it.
    
    Modifications:
    
    - Move the code that retrieves java.net.prefer* properties from
      DnsNameResolver to NetUtil
    - Add NetUtil.isIpV6AddressesPreferred()
    - Revise the API documentation of NetUtil.isIpV*Preferred()
    - Set the default resolveAddressTypes to IPv4 only when
      NetUtil.isIpv4StackPreferred() returns true
    
    Result:
    
    - Fixes #5657

commit 064c0d7826f99382a0a54f6a6caea8ad7d5a52a1
Author: Jason Tedor <jason@tedor.me>
Date:   Tue Aug 9 11:38:45 2016 -0400

    Upgrade log4j2 dependency to 2.6.2
    
    Motivation:
    
    The log4j2 project has released version 2.6.2, a bug fix release of
    log4j2.
    
    Modifications:
    
    The commit upgrades the log4j2 dependency by modifying the
    log4j2.version property in the parent POM to contain version 2.6.2.
    
    Result:
    
    The log4j2 dependency is upgraded to version 2.6.2.

commit e44c562932ed4310a6915b58b1d8dcb5e964c6f8
Author: Jason Tedor <jason@tedor.me>
Date:   Thu Aug 4 21:53:54 2016 -0400

    Mark initialization of unsafe as privileged
    
    Motiviation:
    
    Preparing platform dependent code for using unsafe requires executing
    privileged code. The privileged code for initializing unsafe is executed
    in a manner that would require all code leading up to the initialization
    to have the requisite permissions. Yet, in a restrictive environment
    (e.g., under a security policy that only grants the requisite
    permissions the Netty common jar but not to application code triggering
    the Netty initialization), then initializing unsafe will not succeed
    even if the security policy would otherwise permit it.
    
    Modifications:
    
    This commit marks the necessary blocks as privileged. This enables
    access to the necessary resources for initialization unsafe. The idea is
    that we are saying the Netty code is trusted, and as long as the Netty
    code has been granted the necessary permissions, then we will allow the
    caller access to these resources even though the caller itself might not
    have the requisite permissions.
    
    Result:
    
    Unsafe can be initialized in a restrictive security environment.

commit 54e41df65dc3700b8804aa31b07208f4a1d2b482
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Aug 3 09:14:23 2016 +0200

    Ensure people are aware recycler capacity is per thread.
    
    Motivation:
    
    Its not clear that the capacity is per thread.
    
    Modifications:
    
    Rename system property to make it more clear that the recycler capacity is per thread.
    
    Result:
    
    Less confusing.

commit a6dfd08812da2fc14aa048d5742ac077be2e6b3f
Author: Jason Tedor <jason@tedor.me>
Date:   Fri Aug 5 00:17:20 2016 -0400

    Mark initialization of selector as privileged
    
    Motivation:
    
    Instrumenting the NIO selector implementation requires special
    permissions. Yet, the code for performing this instrumentation is
    executed in a manner that would require all code leading up to the
    initialization to have the requisite permissions. In a restrictive
    environment (e.g., under a security policy that only grants the
    requisite permissions the Netty transport jar but not to application
    code triggering the Netty initialization), then instrumeting the
    selector will not succeed even if the security policy would otherwise
    permit it.
    
    Modifications:
    
    This commit marks the necessary blocks as privileged. This enables
    access to the necessary resources for instrumenting the selector. The
    idea is that we are saying the Netty code is trusted, and as long as the
    Netty code has been granted the necessary permissions, then we will
    allow the caller access to these resources even though the caller itself
    might not have the requisite permissions.
    
    Result:
    
    The selector can be instrumented in a restrictive security environment.

commit 32629078a2a5381f9dc8310f4a367a086aa7ceed
Author: Jason Tedor <jason@tedor.me>
Date:   Fri Aug 5 06:28:50 2016 -0400

    Mark setting of sun.nio.ch.bugLevel as privileged
    
    Motivation:
    
    Writing to a system property requires permissions. Yet the code for
    setting sun.nio.ch.bugLevel is not marked as privileged. In a
    restrictive environment (e.g., under a security policy that only grants
    the requisite permissions the Netty transport jar but not to application
    code triggering the Netty initialization), writing to this system
    property will not succeed even if the security policy would otherwise
    permit it.
    
    Modifications:
    
    This commt marks the necessary code block as privileged. This enables
    writing to this system property. The idea is that we are saying the
    Netty code is trusted, and as long as the Netty code has been granted
    the necessary permissions, then we will allow the caller access to these
    resources even though the caller itself might not have the requisite
    permissions.
    
    Result:
    
    The system property sun.nio.ch.bugLevel can be written to in a
    restrictive security environment.

commit 30a293c74baec21c1f5688ba0a8e8cb34bf00869
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Aug 2 22:02:20 2016 +0200

    [#4204] Broken support of SCTP_INIT_MAXSTREAMS in *SctpServerChannel
    
    Motivation:
    
    The SCTP_INIT_MAXSTREAMS property is ignored on NioSctpServerChannel / OioSctpServerChannel.
    
    Modifications:
    
    - Correctly use the netty ChannelOption
    - Ensure getOption(...) works
    - Add testcase.
    
    Result:
    
    SCTP_INIT_MAXSTREAMS works.
    
    Conflicts:
    	transport-sctp/src/main/java/io/netty/channel/sctp/DefaultSctpServerChannelConfig.java

commit d44017189eb73d8b1bdc45da1fca84cd05cc228b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Aug 2 17:55:55 2016 +0200

    Remove extra conditional check in retain
    
    Motivation:
    
    We not need to do an extra conditional check in retain(...) as we can just check for overflow after we did the increment.
    
    Modifications:
    
    - Remove extra conditional check
    - Add test code.
    
    Result:
    
    One conditional check less.

commit 7d774584c8fbf6652e1efbaf80afd64d6b82f324
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Jul 14 22:00:58 2016 -0700

    OpenSslEngine with no finalizer
    
    Motivation:
    OpenSslEngine and OpenSslContext currently rely on finalizers to ensure that native resources are cleaned up. Finalizers require the GC to do extra work, and this extra work can be avoided if the user instead takes responsibility of releasing the native resources.
    
    Modifications:
    - Make a base class for OpenSslENgine and OpenSslContext which does not have a finalizer but instead implements ReferenceCounted. If this engine is inserted into the pipeline it will be released by the SslHandler
    - Add a new SslProvider which can be used to enable this new feature
    
    Result:
    Users can opt-in to a finalizer free OpenSslEngine and OpenSslContext.
    Fixes https://github.com/netty/netty/issues/4958

commit 3fa8f31055bc16ebe23969ea17f9cc13908a624f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Aug 2 16:40:31 2016 +0200

    Reduce conditionals in AbstractReferenceCountedByteBuf
    
    Motivation:
    AbstractReferenceCountedByteBuf as independent conditional statements to check the bounds of the retain IllegalReferenceCountException condition. One of the exceptions also uses the incorrect increment. The same fix was done for AbstractReferenceCounted as 01523e78358830d4c22ca7c866df4691c8331bd8.
    
    Modifications:
    - Combined independent conditional checks into 1 where possible
    - Correct IllegalReferenceCountException with incorrect increment
    - Remove the subtract to check for overflow and re-use the addition and check for overflow to remove 1 arithmetic operation (see http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.18.2)
    
    Result:
    AbstractReferenceCountedByteBuf has less independent branch statements and more correct IllegalReferenceCountException. Compilation size of AbstractReferenceCountedByteBuf.retain() is reduced.

commit aa6e6ae307b3d6d98b61cc8f3be6649e48131cab
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Aug 2 21:19:30 2016 +0200

    [#4241] Ensure NioEventLoopGroup.shutdownGracefully(...) with no quiet period shutdown as fast as expected.
    
    Motivation:
    
    If the user uses 0 as quiet period we should shutdown without any delay if possible.
    
    Modifications:
    
    Ensure we not introduce extra delay when a shutdown quit period of 0 is used.
    
    Result:
    
    EventLoop shutdown as fast as expected.

commit 76a3ea699ddc50f7aa9348a71b36578cda85a65c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Aug 4 14:23:23 2016 +0200

    [#5629] Ensure direct ByteBuffer are wrapped in as direct ByteBuf.
    
    Motivation:
    
    We need to check if a ByteBuffer is direct via isDirect() to detect if its direct as hasArray() may also return true for a direct ByteBuffer.
    
    See also:
    https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html#allocateDirect-int-
    
    Modifications:
    
    Add isDirect() check.
    
    Result:
    
    Correct wrap a direct ByteBuffer in all cases.

commit e5b45f120ade01ad08740c93604ebe0dfc1c88b8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Aug 1 22:17:30 2016 +0200

    Allow to explicit disable usage of KeyManagerFactory when using OpenSsl
    
    Motivation:
    
    Sometimes it may be useful to explicit disable the usage of the KeyManagerFactory when using OpenSsl.
    
    Modifications:
    
    Add io.netty.handler.ssl.openssl.useKeyManagerFactory which can be used to explicit disable KeyManagerFactory usage.
    
    Result:
    
    More flexible usage.

commit 5513514d083c37bacc4fcd312d70ae9505704fab
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Aug 1 21:09:48 2016 +0200

    Take readerIndex into account when write to BIO.
    
    Motivation:
    
    We should take the readerIndex into account whe write into the BIO. Its currently not a problem as we slice before and so the readerIndex is always 0 but we should better not depend on this as this will break easily if we ever refactor the code and not slice anymore.
    
    Modifications:
    
    Take readerIndex into acount.
    
    Result:
    
    More safe and correct use.

commit c6a13e28b93b7b4d1f99f556cc894765a4c8e2f1
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Tue Aug 2 12:44:48 2016 +0300

    Improvement : constant pool now less concurrent
    
    Current constant pool holds all data within HashMap and all access to this HashMap is done via synchronized blocks. Thus CuncurrentHashMap will be here more efficient as it designed for higher throughput and will use less locks. Also valueOf method was not very efficient as it performed get operation 2 times.
    
    Modifications :
    
    HashMap -> PlatformDependent.newConcurrentHashMap().
    ValueOf is more efficient now, threadsafe and uses less locks. Downside is that final T tempConstant = newConstant(nextId(), name); could be called more than 1 time during high contention.
    
    Result :
    
    Less contention, cleaner code.

commit fc14ca31cb36715690bdf785d6713ae2b0919159
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jul 19 20:39:44 2016 +0200

    Add NonStickyEventExecutorGroup
    
    Motivation:
    
    We offer DefaultEventExecutorGroup as an EventExecutorGroup which return OrderedEventExecutor and so provide strict ordering of event execution. One limitations of this implementation is that each contained DefaultEventExecutor will always be tied to a single thread, which can lead to a very unbalanced execution as one thread may be super busy while others are idling.
    
    Modifications:
    
    - Add NonStickyEventExecutorGroup which can be used to wrap another EventExecutorGroup (like UnorderedThreadPoolEventExecutor) and expose ordering while not be sticky with the thread that is used for a given EventExecutor. This basically means that Threads may change between execution of tasks for an EventExecutor but ordering is still guaranteed.
    
    Result:
    
    Better utalization of threads in some use-cases.

commit d3dc9c9e74fd0b82e43443683a5440d39b3a8906
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jul 25 11:15:56 2016 +0200

    Allow to limit the maximum number of WeakOrderQueue instances per Thread.
    
    Motivation:
    
    To better restrict resource usage we should limit the number of WeakOrderQueue instances per Thread. Once this limit is reached object that are recycled from a different Thread then the allocation Thread are dropped on the floor.
    
    Modifications:
    
    Add new system property io.netty.recycler.maxDelayedQueuesPerThread and constructor that allows to limit the max number of WeakOrderQueue instances per Thread for Recycler instance. The default is 2 * cores (the same as the default number of EventLoop instances per EventLoopGroup).
    
    Result:
    
    Better way to restrict resource / memory usage per Recycler instance.

commit c13908adb5a90869338dece42b893e373acc364d
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Wed Aug 3 23:28:44 2016 +0300

    deprecated old loggers
    
    Motivation:
    
    Commons logger is dead and not updated for more than 2 years. #5615.
    
    Modifications:
    
    Added @Deprecated annotation to CommonsLoggerFactory and CommonsLogger.
    
    Result:
    
    Commons logger now deprecated.

commit 0b086a9625cd2e8219711e04579466a43d4a4e99
Author: Jason Tedor <jason@tedor.me>
Date:   Wed Aug 3 13:43:51 2016 -0400

    Do not log on explicit no unsafe
    
    Motivation:
    
    When Netty components are initialized, Netty attempts to determine if it
    has access to unsafe. If Netty is not able to access unsafe (because of
    security permissions, or because the JVM was started with an explicit
    flag to tell Netty to not look for unsafe), Netty logs an info-level
    message that looks like a warning:
    
    Your platform does not provide complete low-level API for accessing
    direct buffers reliably. Unless explicitly requested, heap buffer will
    always be preferred to avoid potential system unstability.
    
    This log message can appear in applications that depend on Netty for
    networking, and this log message can be scary to end-users of such
    platforms. This log message should not be emitted if the application was
    started with an explicit flag telling Netty to not look for unsafe.
    
    Modifications:
    
    This commit refactors the unsafe detection logic to expose whether or
    not the JVM was started with a flag telling Netty to not look for
    unsafe. With this exposed information, the log message on unsafe being
    unavailable can be modified to not be emitted when Netty is explicitly
    told to not look for unsafe.
    
    Result:
    
    No log message is produced when unsafe is unavailable because Netty was
    told to not look for it.

commit 3bc97962f8a52289ba310e344e0b678145abb5fa
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Wed Aug 3 11:49:08 2016 +0300

    removed unnecessary static holders

commit a06afe8b7745a4e9b49ea86ae4650117cdc01981
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Wed Aug 3 00:24:45 2016 +0300

    Improvement: simplified AbstractConstant compareTo.
    
    Motivation:
    
    AbstractConstant.compareTo seems complex and hard to understand. Also it allocates unnecessary 1 byte in direct buffer and holds unnecessary pointer to this byte butter.
    
    Modifications:
    
    uniquifier (id) variable now initialized during Constant creation and thus no need in volatile and no need in uniquifier() method as it could be easily replaced with AtomicLong.
    
    Result:
    
    Every Constant instance now consumes less bytes for pointer, don't consume anything in direct buffer.

commit 26aa34853a8974d212e12b98e708790606bea5fa
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jul 25 07:09:45 2016 +0200

    Ensure correct ordering if a ChannelInitializer adds another ChannelInitializer
    
    Motivation:
    
    At the moment we call initChannel(...) in the channelRegistered(...) method which has the effect that if another ChannelInitializer is added within the initChannel(...) method the ordering of the added handlers is not correct and surprising. This is as the whole initChannel(...) method block is executed before the initChannel(...) block of the added ChannelInitializer is handled.
    
    Modifications:
    
    Call initChannel(...) from within handlerAdded(...) if the Channel is registered already. This is true in all cases for our DefaultChannelPipeline implementation. This way the ordering is always as expected. We still keep the old behaviour as well to not break code for other ChannelPipeline implementations (if someone ever wrote one).
    
    Result:
    
    Correct and expected ordering of ChannelHandlers.

commit f769bb3376782fcaee8c9b168f12edd4ea8ce98e
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Tue Aug 2 00:08:29 2016 +0300

    Cleanup : removed unused empty arrays and simplified initialization

commit b427a8c8bdb453b45d9f3e39f3fdb15927356e42
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Tue Aug 2 00:30:49 2016 +0300

    Cleanup : outdated code removed and unnecessary static section and variables
    
    Motivation:
    
    Old code doesn't needed anymore due to logger factory initialization.
    
    Modifications :
    
    Removed static section and useless static variables;
    Logging concatenations replaced with placeholders.
    
    Result:
    
    Cleaner, simpler code doing the same

commit 82b22d6f11e016b660b888645f1134ef608129ab
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Jul 29 09:09:29 2016 -0700

    findNextPositivePowerOfTwo out of bounds
    
    Motivation:
    Some usages of findNextPositivePowerOfTwo assume that bounds checking is taken care of by this method. However bounds checking is not taken care of by findNextPositivePowerOfTwo and instead assert statements are used to imply the caller has checked the bounds. This can lead to unexpected non power of 2 return values if the caller is not careful and thus invalidate any logic which depends upon a power of 2.
    
    Modifications:
    - Add a safeFindNextPositivePowerOfTwo method which will do runtime bounds checks and always return a power of 2
    
    Result:
    Fixes https://github.com/netty/netty/issues/5601

commit a80ea46b8e6d3b225547ae138a357101b0381268
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Mon Aug 1 12:17:05 2016 +0300

    Removed custom split method as it is not effective anymore.

commit 6bd810210dcd12344325331361758723479e1ea1
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Jul 30 08:20:08 2016 +0200

    Servers should not send duplicate intermediate certificates.
    
    Motivation:
    Servers sometimes send duplicate intermediate certificates.
    
    Modifications:
    OpenSslKeyMaterialManager.setKeyMaterial() dedups aliases before calling SSL.setCertificateChainBio().
    
    Result:
    Servers no longer send duplicate itermediate certificates.

commit b2f1ef57c8ad0fd9f4cc2b42f5518487d6771b98
Author: Trustin Lee <t@motd.kr>
Date:   Mon Aug 1 14:28:20 2016 +0900

    Fix RejectedExecutionException when using DnsAddressResolverGroup
    
    Motivation:
    
    AddressResolverGroup adds a listener to the termination future of an
    EventExecutor when a new AddressResolver is created. The listener calls
    AddressResolver.close() when the EventExecutor is terminated to give the
    AddressResolver a chance to release its resources.
    
    When using DnsAddressResolverGroup, the AddressResolver.close() will
    eventually trigger DnsNameResolver.close(), which closes its underlying
    DatagramChannel.
    
    DatagramChannel.close() (or any Channel.close()) will travel through
    pipeline and trigger EventExecutor.execute() because
    DnsNameResolver.close() has been invoked from a non-I/O thread.
    (NB: A terminationFuture is always notified from the GlobalEventExecutor
    thread.)
    
    However, because we are doing this in the listener of the termination
    future of the terminated EventLoop we are trying to execute a task upon,
    the attempt to close the channel fails due to RejectedExecutionException.
    
    Modifications:
    
    - Do not call Channel.close() in DnsNameResolver.close() if the Channel
      has been closed by EventLoop already
    
    Result:
    
    No more RejectedExecutionException when shutting down an event loop.

commit ba80fbbe05489227d64dcbd4f5e91bef68072c37
Author: alexlehm <alexlehm@gmail.com>
Date:   Sun Jul 31 03:05:23 2016 +0200

    UnknownHostException mentions hostname with search domain added
    
    Motivation:
    
    When a hostname cannot be resolved, the message in the UnknownHostException mentions the hostname with the last attempted search domain appended, which is kind of confusing. I would prefer to see the original hostname supplied to the method in the exception.
    
    Modifications:
    
    Store the pristine hostname in the resolver context and use it to create the exception message instead of the hostname with search domain.
    Add unit test to check that the exception does not mention the search domain.
    
    Result:
    
    The exception mentions the unmodified hostname in the message.

commit 1975fcefe49896e6ce11df16a48b0bad7a074668
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Mon Aug 1 01:36:46 2016 +0300

    StringUtil cleanup. NewLine char initializing simplified and code in static section simplified.
    
    Motivation:
    
    NewLine initializing is complex, with unnecessary allocations and non-standard.
    Static section is overloaded with StringBuilders for simple "s" + "s" concatenation pattern that compiler optimizes perfectly.
    
    Modifications:
    
    NewLine initializing replaced with standard System.getProperty("line.separator").
    Removed StringBuilders in static section.
    
    Result:
    
    Less complex code.

commit a4d8f930af1f17a6c48a9abd94f49e5fd719fc31
Author: Dmitriy Dumanskiy <doom369@gmail.com>
Date:   Mon Aug 1 00:20:45 2016 +0300

    small performance fixes : unnecessary unboxing operations removed
    
    Motivation :
    
    Unboxing operations allocate unnecessary objects when it could be avoided.
    
    Modifications:
    Replaced Float.valueOf with Number.parseFloat where possible.
    
    Result:
    
    Less unnecessary objects allocations.

commit e85d43739819e6408c3a4a4e2f9e71bcf6905a2e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jul 29 07:51:16 2016 +0200

    [#5597] Not try to double release empty buffer in Unpooled.wrappedBuffer(...)
    
    Motivation:
    
    When Unpooled.wrappedBuffer(...) is called with an array of ByteBuf with length >= 2 and the first ByteBuf is not readable it will result in double releasing of these empty buffers when release() is called on the returned buffer.
    
    Modifications:
    
    - Ensure we only wrap readable buffers.
    - Add unit test
    
    Result:
    
    No double release of buffers.

commit f585806a746cf78c4d07b9efd1ba45e761215384
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jul 29 14:54:50 2016 +0200

    [#5598] Ensure SslHandler not log false-positives when try to close the channel due timeout.
    
    Motivation:
    
    When we try to close the Channel due a timeout we need to ensure we not log if the notification of the promise fails as it may be completed in the meantime.
    
    Modifications:
    
    Add another constructor to ChannelPromiseNotifier and PromiseNotifier which allows to log on notification failure.
    
    Result:
    
    No more miss-leading logs.

commit 82b617dfe9d28b6361006e6e9943fc83248aa7dd
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jul 26 12:50:56 2016 -0700

    retainSlice() unwrap ByteBuf
    
    Motivation:
    retainSlice() currently does not unwrap the ByteBuf when creating the ByteBuf wrapper. This effectivley forms a linked list of ByteBuf when it is only necessary to maintain a reference to the unwrapped ByteBuf.
    
    Modifications:
    - retainSlice() and retainDuplicate() variants should only maintain a reference to the unwrapped ByteBuf
    - create new unit tests which generally verify the retainSlice() behavior
    - Remove unecessary generic arguments from AbstractPooledDerivedByteBuf
    - Remove unecessary int length member variable from the unpooled sliced ByteBuf implementation
    - Rename the unpooled sliced/derived ByteBuf to include Unpooled in their name to be more consistent with the Pooled variants
    
    Result:
    Fixes https://github.com/netty/netty/issues/5582

commit d92c5f5f5b93570c4f80b7ec9e6510e261f71b25
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jul 26 20:15:21 2016 +0200

    Introduce allocation / pooling ratio in Recycler
    
    Motivation:
    
    At the moment the Recyler is very sensitive to allocation bursts which means that if there is a need for X objects for only one time these will most likely end up in the Recycler and sit there forever as the normal workload only need a subset of this number.
    
    Modifications:
    
    Add a ratio which sets how many objects should be pooled for each new allocation. This allows to slowly increase the number of objects in the Recycler while not be to sensitive for bursts.
    
    Result:
    
    Less unused objects in the Recycler if allocation rate sometimes bursts.

commit 7f8b5f8efd1b49665b89485eb49e11e6ad50c139
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Jul 23 19:55:45 2016 +0200

    [#4351] Add warnings for Attribute.remove() and Attribute.getAndRemove()
    
    Motivation:
    
    Using Attribute.remove() and Attribute.getAndRemove() in a multi-threaded enviroment has its drawbacks. Make sure we document these.
    
    Modifications:
    
    Add javadocs and mark Attribute.remove() and Attribute.getAndRemove() as @Deprecated.
    
    Result:
    
    Hopefully less suprising behaviour.

commit cb7cf4491c59c4e3b44a54c18aadb2dcbad1d69c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jul 27 13:29:56 2016 +0200

    [maven-release-plugin] prepare for next development iteration

commit 9466b32d05ecf63b7e3a16e8e432ca5def21dc1e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jul 27 13:16:59 2016 +0200

    [maven-release-plugin] prepare release netty-4.1.4.Final

commit 5f4f295600e49071fb8da53cfd161935bbb5a609
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jul 26 12:50:56 2016 -0700

    Correctly return a retained slice if called SwappedByteBuf.retainedSlice(...)
    
    Motivation:
    
    SwappedByteBuf.retainedSlice(...) did not return a retained buffer.
    
    Modifications:
    
    Correctly delegate to retainedSlice(..) calls.
    
    Result:
    
    Correctly return retained slice.

commit 835f901d5f30fb125672cfd8ae32061e55c5b58f
Author: Ngoc Dao <ndao@atlassian.com>
Date:   Wed Jul 27 15:19:10 2016 +1000

    Fix #5590 QueryStringDecoder#path should decode the path info
    
    Motivation:
    
    Currently, QueryStringDecoder#path simply returns the path info as is, without decoding it as the Javadoc states.
    
    Modifications:
    
    * Make QueryStringDecoder#path decode the path info.
    * Add tests to QueryStringDecoderTest.
    
    Result:
    
    QueryStringDecoder#path now decodes the path info as expected.

commit b97a36a10f738d946cb8ff920c8e1177db40c74b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jun 10 11:57:33 2016 +0200

    Add test to verify that its possible to add another ChannelInitializer in the initChannel(...) method.
    
    Motivation:
    
    I received a report the its not possible to add another ChannelInitialiter in the initChannel(...) method, so we should add a test case for it.
    
    Modifications:
    
    Added testcase.
    
    Result:
    
    Validate that all works as expected.

commit 4638df20628a8987c8709f0f8e5f3679a914ce1a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jul 22 08:21:42 2016 +0200

    [#5566] Ensure using a ChannelInitializer via ServerBootstrap.handler(...) produce correct ordering.
    
    Motivation:
    
    When a ChannelInitializer is used via ServerBootstrap.handler(...) the users handlers may be added after the internal ServerBootstrapAcceptor. This should not happen.
    
    Modifications:
    
    Delay the adding of the ServerBootstrapAcceptor until the initChannel(....) method returns.
    
    Result:
    
    Correct order of handlers in the ServerChannels ChannelPipeline.

commit 445a5472651cd6257af43adccdc1b002cb5f8a94
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jul 26 20:18:16 2016 +0200

    Set Recycler DEFAULT_INITIAL_MAX_CAPACITY to a more sane value
    
    Motivation:
    
    We used a very high number for DEFAULT_INITIAL_MAX_CAPACITY (over 200k) which is not very relastic and my lead to very surprising memory usage if allocations happen in bursts.
    
    Modifications:
    
    Use a more sane default value of 32k
    
    Result:
    
    Less possible memory usage by default

commit dc6c6d956a9409e4ca13ed0586af80b3e2753e14
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jul 25 14:18:38 2016 +0200

    [#5541] Ensure failing a Promise in SimpleChannelPool will not result in stack overflow.
    
    Motivation:
    
    We used Promise.setFailure(...) when fail a Promise in SimpleChannelPool. As this happens in multiple levels this can result in stackoverflow as setFailure(...) may throw an IllegalStateException which then again is propergated.
    
    Modifications:
    
    Use tryFailure(...)
    
    Result:
    
    No more possibility to cause a stack overflow when failing the promise.

commit cebf255951a257068bbcab4781d4c6085e3289bd
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Jul 25 16:19:24 2016 -0700

    FlushConsolidationHandler remove conditional
    
    Motivation:
    FlushConsolidationHandler#flushIfNeeded has a conditional which is fixed based upon code path. This conditional can be removed and instead just manually set in each fixed code path.
    
    Modifications:
    - Remove boolean parameter on FlushConsolidationHandler#flushIfNeeded and set readInprogess to false manually when necessary
    
    Result:
    Less conditionals in FlushConsolidationHandler

commit 01523e78358830d4c22ca7c866df4691c8331bd8
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jul 20 18:58:02 2016 -0400

    Reduce conditionals in AbstractReferenceCounted
    
    Motivation:
    AbstractReferenceCounted as independent conditional statements to check the bounds of the retain IllegalReferenceCountException condition. One of the exceptions also uses the incorrect increment.
    
    Modifications:
    - Combined independent conditional checks into 1 where possible
    - Correct IllegalReferenceCountException with incorrect increment
    - Remove the subtract to check for overflow and re-use the addition and check for overflow to remove 1 arithmetic operation (see http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.18.2)
    
    Result:
    AbstractReferenceCounted has less independent branch statements and more correct IllegalReferenceCountException. Compilation size of AbstractReferenceCounted.retain() is reduced from 58 bytes to 47 bytes.

commit d315f1b3ba844f510423aeac30afb1e647a9949e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jul 22 21:33:23 2016 +0200

    [#5551] Fix sporadic GlobalEventExecutorTest.testAutomaticStartStop test failure
    
    Motivation:
    
    We saw some sporadic test failures for GlobalEventExecutorTest.testAutomaticStartStop test. This is caused parallel execution of tests in combination with assert checks that will be affected.
    
    Modifications:
    
    Remove fragile assert checks.
    
    Result:
    
    No more sporadic test failures

commit fe4af7e32c2b49665bf4f0534872135501929bd6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jul 22 15:24:31 2016 +0200

    Ensure shared capacity is updated correctly when WeakOrderQueue is collected.
    
    Motivation:
    
    We use a shared capacity per Stack for all its WeakOrderQueue elements. These relations are stored in a WeakHashMap to allow dropping these if memory pressure arise. The problem is that we not "reclaim" previous reserved space when this happens. This can lead to a Stack which has not shared capacity left which then will lead to an AssertError when we try to allocate a new WeakOderQueue.
    
    Modifications:
    
    - Ensure we never throw an AssertError if we not have enough space left for a new WeakOrderQueue
    - Ensure we reclaim space when WeakOrderQueue is collected.
    
    Result:
    
    No more AssertError possible when new WeakOrderQueue is created and also correctly reclaim space that was reserved from the shared capacity.

commit 8d4cfd90025cb54cdba4037f21e9b723e1e098ac
Author: Julien Viet <julien@julienviet.com>
Date:   Sat Jul 23 09:47:43 2016 +0200

    Allow ndots=0 in DnsNameResolver and search domains - fixes #5570
    
    Motivation:
    
    The ndots = 0 is a valid value for ndots, it means that when using a non dotted name, the resolution should first try using a search and if it fails then use subdomains. Currently it is not allowed. Docker compose uses this when wiring up containers as names have usually no dots inside.
    
    Modification:
    
    Modify DnsNameResolver to accept ndots = 0 and handle the case in the resolution procedure. In this case a direct search is done and then a fallback on the search path is performed.
    
    Result:
    
    The ndots = 0 case is implemented.

commit f25f1f255d1ab49d21d27c6d44f5c24763fd5979
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jul 20 07:14:59 2016 +0200

    No need to do a memory copy to verify snappy identifier
    
    Motivation:
    
    We are currently doing a memory copy to verify the snapy version. This is not needed.
    
    Modifications:
    
    Remove memory copy and just compare byte per byte.
    
    Result:
    
    Less memory copies and allocations

commit 9c0d1a99bce9dd9507387fdf4354af297dc0b4e9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jul 21 20:32:50 2016 +0200

    Ensure attributes and contained object can be collected as fast as possible.
    
    Motivation:
    
    Due an implementation flaw in DefaultAttributeMap it was possible that an attribute and its stored value/key could not be collected until the DefaultAttributeMap could be collected. This can lead to unexpected memory usage and strong reachability of objects that should be collected.
    
    Modifications:
    
    Use an special empty DefaultAttribute as head of the each bucket which will not store any key / value. With this change everything can be collected as expected as we not use any DefaultAttribute created by the user as head of a bucket.
    
    Result:
    
    DefaultAttributeMap does not store user data and thus the lifetime of this user data is not tied to the lifetime of the DefaultAttributeMap.

commit 7db3e01498ded8de43ed18b9fe2f14c11ac2d846
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jul 20 06:35:05 2016 +0200

    Ensure uncompressed ByteBuf is released when an exception happens during decoding.
    
    Motivation:
    
    We need to ensure the uncompressed ByteBuf is released if an exception happens while calling decode(...). If we miss to do so we leak buffers.
    
    Modifications:
    
    Correctly release buffer on exception.
    
    Result:
    
    No more memory leak.

commit 94d7557dead5e7780769d44bbb4aa7530149ca34
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jul 22 20:41:07 2016 +0200

    Ensure WeakOrderQueue can be collected fast enough
    
    Motivation:
    
    Commit afafadd3d7caf1e4b346da049baab0afeae0a4bc introduced a change which stored the Stack in the WeakOrderQueue as field. This unfortunally had the effect that it was not removed from the WeakHashMap anymore as the Stack also is used as key.
    
    Modifications:
    
    Do not store a reference to the Stack in WeakOrderQueue.
    
    Result:
    
    WeakOrderQueue can be collected correctly again.

commit 3ebbd9682006826fd9128b2e30efecd53c109653
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jul 19 14:32:46 2016 +0200

    Remove memory copies when doing CRC32 processing in JdkZlibDecoder
    
    Motivation:
    
    We not need to do any memory copies when doing CRC32 processing.
    
    Modifications:
    
    Use ByteBufChecksum to eliminate memory copies.
    
    Result:
    
    Less memory copies.

commit 2ce1d29d4deb30ca60dc94e0db25047ea2a639d8
Author: Ian Haken <ihaken@netflix.com>
Date:   Thu Jul 21 17:37:08 2016 -0700

    Elliminated some buggy behavior when using a KeyManagerFactory with OpenSslServerContext.
    
    Motivation:
    
    PR #5493 added support for KeyManagerFactories when using the OpenSsl context. This commit corrects a bug causing a NullPointerException that occurs when using a KeyManagerFactory without a certificate chain and private key.
    
    Modifications:
    
    Removes assertNotNull() assertions which were causing a certificate chain and private key to be required even when using a KeyManagerFactory. Also removed a redundant call to buildKeyManagerFactory() which was also causing a exception when a KeyManagerFactory is provided but a certificate chain and private key is not.
    
    Result:
    
    A KeyManagerFactory can now be used in the OpenSslServerContext without an independent certificate chain and private key.

commit 87551fc751fb1086a176545113b50fc1564f86d6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jul 19 14:21:47 2016 +0200

    Remove memory copy when checksum non heap backed ByteBuf implementations using Snappy
    
    Motivation:
    
    We should try to minimize memory copies whenever possible.
    
    Modifications:
    
    - Refactor ByteBufChecksum to work with heap and direct ByteBuf always
    - Remove memory copy in Snappy by let Crc32c extend ByteBufChecksum
    
    Result:
    
    Less memory copies when using Snappy

commit 9151739577b9270ee8ae50cbda705942c927e8ff
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jul 19 14:56:49 2016 +0200

    Remove unnessary memory copy when doing Bzip2 encoding
    
    Motivation:
    
    We did an unessary memory copy when doing bzip2 encoding.
    
    Modifications:
    
    Remove memory copy and just use a ByteProcessor.
    
    Result:
    
    Less memory copies and so faster.

commit fa84e86f78206a4ef035c1e58c9ea2d13d3a1b05
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jul 12 14:29:46 2016 +0200

    Lz4FrameEncoder should prefer direct buffers for its output.
    
    Motivation:
    
    We should prefer direct buffers for the output of Lz4FrameEncoder as this is what is needed for writing to the socket.
    
    Modification:
    
    Use direct buffers for the output
    
    Result:
    
    Less memory copies needed.

commit bb3c4a43d8c904236b681414b30a9089575de65b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jul 12 13:25:13 2016 +0200

    Lz4FrameDecoder should reduce memory copies whenever possible
    
    Motivation:
    
    When the user constructs Lz4FrameDecoder with a Checksum implementation like CRC32 or Adler32 and uses Java8 we can directly use a ByteBuffer to do the checksum work. This way we can eliminate memory copies.
    
    Modifications:
    
    Detect if ByteBuffer can be used for checksum work and if so reduce memory copies.
    
    Result:
    
    Less memory copies when using JDK8

commit b8400f96283fec0b1f60232aab52da06a9921ad6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jul 19 20:55:44 2016 +0200

    [#5553] SimpleChannelPool#notifyConnect() may leak Channels
    
    Motivation:
    
    The SimpleChannelPool#notifyConnect() method will leak Channels if the user cancelled the Promise in between.
    
    Modifications:
    
    Release the channel if the Promise was complete before.
    
    Result:
    
    No more channel leaks.

commit d262f7c1892d1cc93eaffe77144419174ea6e3e7
Author: Jason Tedor <jason@tedor.me>
Date:   Wed Jul 20 10:50:39 2016 -0400

    Reduce permissions needed for process ID
    
    Motiviation:
    
    DefaultChannelId attempts to acquire a default process ID by determining
    the process PID. However, to do this it attempts to punch through to the
    system classloader, a permission that in the face of a restrictive
    security manager is unlikely to be granted. Looking past this, it then
    attempts to load a declared method off a reflectively loaded class,
    another permission that is not likely to be granted in the face of a
    restrictive security manager. However, neither of these permissions are
    necessary as the punching through to the system security manager is
    completely unneeded, and there is no need to load a public method as a
    declared method.
    
    Modifications:
    
    Instead of punching through to the system classloader requiring
    restricted permissions, we can just use current classloader. To address
    the access declared method permission, we instead just reflectively
    obtain the desired public method via Class#getMethod.
    
    Result:
    
    Acquiring the default process ID from the PID will succeed without
    requiring the runtime permissions "getClassLoader" and
    "accessDeclaredMembers".

commit 73c0fb0e23c6cc2474ee6aeba7a5b199edf590b8
Author: alexlehm <alexlehm@gmail.com>
Date:   Wed Jul 20 00:01:38 2016 +0200

    Construct LOCALHOST4 and LOCALHOST6 object with hostname "localhost"
    
    Motivation:
    
    When resolving localhost on Windows where the hosts file does not contain a localhost entry by default, the resulting InetAddress object returned by the resolver does not have the hostname set so that getHostName returns the ip address 127.0.0.1. This behaviour is inconsistent with Windows where the hosts file does contain a localhost entry and with Linux in any case. It breaks at least some unit tests.
    
    Modifications:
    
    Create the LOCALHOST4 and LOCALHOST6 objects with hostname localhost in addition to the address.
    Add unit test domain localhost to DnsNameResolverTest to check the resolution of localhost with ipv4 at least.
    
    Result:
    
    The resolver returns a InetAddress object for localhost with the hostname localhost in all cases.

commit e00b797936a02fea1c43b04ba23a3400e5b3f639
Author: Jason Tedor <jason@tedor.me>
Date:   Mon Jul 18 15:29:47 2016 -0400

    Acquire Java version simply
    
    Motivation:
    
    The Java version is used for platform dependent logic. Yet, the logic
    for acquiring the Java version requires special permissions (the runtime
    permission "getClassLoader") that some downstream projects will never
    grant. As such, these projects are doomed to have Netty act is their
    Java major version is six.  While there are ways to maintain the same
    logic without requiring these special permissions, the logic is
    needlessly complicated because it relies on loading classes that exist
    in version n but not version n - 1. This complexity can be removed. As a
    bonanza, the dangerous permission is no longer required.
    
    Modifications:
    
    Rather than attempting to load classes that exist in version n but not
    in version n - 1, we can just parse the Java specification version. This
    only requires a begign property (property permission
    "java.specification.version") and is simple.
    
    Result:
    
    Acquisition of the Java version is safe and simple.

commit 3d7ae973590fb6fdd9d2224f9b9e87decd27be84
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Jul 15 10:44:32 2016 -0700

    Make Epoll ChannelMetadata more consistent with NIO
    
    Motivation:
    In 4.0 AbstractNioByteChannel has a default of 16 max messages per read. However in 4.1 that constraint was applied at the NioSocketChannel which is not equivalent. In 4.1 AbstractEpollStreamChannel also did not have the default of 16 max messages per read applied.
    
    Modifications:
    - Make Nio consistent with 4.0
    - Make Epoll consistent with Nio
    
    Result:
    Nio and Epoll both have consistent ChannelMetadata and are consistent with 4.0.

commit 328510468c3da0f6a37d9710d7723f817eff8ce8
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Thu Jul 14 17:16:22 2016 +0200

    Complete ChannelPromise for Http2WindowUpdateFrames in Http2FrameCodec. Fixes #5530
    
    Motivation:
    
    The channel promise of a window update frame is not completed correctly,
    depending on the failure or success of the operation.
    
    Modification:
    
    Succeed / Fail the promise if the window update succeeds / fails.
    
    Result:
    
    Correctly succeed / fail the promise.

commit 047f6aed289219e7461b4c6bbcbb6c88d7082b06
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jul 15 09:09:13 2016 +0200

    [maven-release-plugin] prepare for next development iteration

commit b2adea87a0e3173aeefae86f64f4fd29b673c82c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jul 15 09:08:53 2016 +0200

    [maven-release-plugin] prepare release netty-4.1.3.Final

commit 3a33f5eb9d900d9122e9d769c4ef238882a9e66b
Author: Carsten Varming <cvarming@twitter.com>
Date:   Thu Jul 14 12:12:45 2016 -0400

    Fix JDK9 direct ByteBuffer cleaner invocation and initialize Cleaner0 when PlatformDependent0 is initialized.
    
    Motivation:
    The clean method in java.base/jdk.internal.ref.Cleaner is not accessible
    to methods outside java.base.  This prevents Cleaner0.freeDirectBuffer
    from actually calling the clean method on JDK9.
    
    The issue could have been caught earlier if Cleaner0 is initialized when
    PlatformDependent0 is initialized and logging statements in the static
    initializer in Cleaner0 would be close to the logging statements in the
    static initializer in PlatformDependent0.
    
    Modifications:
    Try casting the cleaner obtained from a ByteBuffer to Runnable and use
    Runnable.run if possible. All Cleaners in JDK9 implements Runnable. Fall
    back to the clean method if the cleaner does not implement Runnable.
    The fallback preserves the behavior on JDK8 and earlier.
    
    Try to free the direct ByteBuffer allocated during static initialization
    of PlatformDependent0. This cause Cleaner0 to be initialized when
    PlatformDependent0 is initialized, and logging statements from the
    static initializers will be close together.
    
    Result:
    
    Cleaner0.freeDirectBuffer works as intended on JDK9 and logging shows
    that Cleaner0.freeDirectBuffer works as intended.

commit 27520f5208535935757014744647854f86286d37
Author: Jason Tedor <jason@tedor.me>
Date:   Wed Jul 13 15:00:06 2016 -0400

    Non-sticky thread groups in DefaultThreadFactory
    
    Motivation:
    
    A recent change to DefaultThreadFactory modified it so that it is sticky
    with respect to thread groups. In particular, this change made it so
    that DefaultThreadFactory would hold on to the thread group that created
    it, and then use that thread group to create threads.
    
    This can have problematic semantics since it can lead to violations of a
    tenet of thread groups that a thread can only modify threads in its own
    thread group and descendant thread groups. With a sticky thread group, a
    thread triggering the creation of a new thread via
    DefaultThreadFactory#newThread will be modifying a thread from the
    sticky thread group which will not necessarily be its own nor a
    descendant thread group. When a security manager is in place that
    enforces this requirement, these modifications are now impossible. This
    is especially problematic in the context of Netty because certain global
    singletons like GlobalEventExecutor will create a
    DefaultThreadFactory. If all DefaultThreadFactory instances are sticky
    about their thread groups, it means that submitting tasks to the
    GlobalEventExecutor singleton can cause a thread to be created from the
    DefaultThreadFactory sticky thread group, exactly the problem with
    DefaultThreadFactory being sticky about thread groups. A similar problem
    arises from the ThreadDeathWatcher.
    
    Modifications:
    
    This commit modifies DefaultThreadFactory so that a null thread group
    can be set with the behavior that all threads created by such an
    instance will inherit the default thread group (the thread group
    provided by the security manager if there is one, otherwise the thread
    group of the creating thread). The construction of the instances of
    DefaultThreadFactory used by the GlobalEventExecutor singleton and
    ThreadDeathWatcher are modified to use this behavior. Additionally, we
    also modify the chained constructor invocations of the
    DefaultThreadFactory that do not have a parameter to specify a thread
    group to use the thread group from the security manager is available,
    otherwise the creating thread's thread group. We also add unit tests
    ensuring that all of this behavior is maintained.
    
    Result:
    
    It will be possible to have DefaultThreadFactory instances that are not
    sticky about the thread group that led to their creation. Instead,
    threads created by such a DefaultThreadFactory will inherit the default
    thread group which will either be the thread group from the security
    manager or the current thread's thread group.

commit c221d32b926df33bc3f33feff3354be421d73474
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jul 14 16:35:50 2016 +0200

    Upgrade to netty-tcnative-1.1.33.Fork19
    
    Motivation:
    
    New version of tcnative was released.
    
    Modifications:
    
    Bump up version.
    
    Result:
    
    Use latest tncative version.

commit 25c37cf44ad2ec7f9dfcde783eb776459107e3da
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jul 12 18:06:31 2016 +0200

    Include Bundle-NativeCode manifest entry in transport-native-epoll jar.
    
    Motivation:
    
    The build generates a OSGi bundle with missing Bundle-NativeCode manifest entry.
    
    Modifications:
    
    Add missing manifest entry.
    
    Result:
    
    Be able to use transport-native-epoll in osgi container.

commit c735b3e14762bdc45716371c11e65366ac1782f5
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jul 11 08:52:33 2016 +0200

    [#5514] Fix DiskFileUpload and MemoryFileUpload equals(...) method.
    
    Motivation:
    
    DiskFileUpload and MemoryFileUpload.equals(...) are broken.
    
    Modifications:
    
    Fix implementation and add unit test.
    
    Result:
    
    Equals method are correct now.

commit afafadd3d7caf1e4b346da049baab0afeae0a4bc
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jul 11 11:55:09 2016 +0200

    [#5505] Enforce Recycler limit when recycling from different threads
    
    Motivation:
    
    Currently, the recycler max capacity it's only enforced on the
    thread-local stack which is used when the recycling happens on the
    same thread that requested the object.
    
    When the recycling happens in a different thread, then the objects
    will be queued into a linked list (where each node holds N objects,
    default=16). These objects are then transfered into the stack when
    new objects are requested and the stack is empty.
    
    The problem is that the queue doesn't have a max capacity and that
    can lead to bad scenarios. Eg:
    
    - Allocate 1M object from recycler
    - Recycle all of them from different thread
    - Recycler WeakOrderQueue will contain 1M objects
    - Reference graph will be very long to traverse and GC timeseems to be negatively impacted
    - Size of the queue will never shrink after this
    
    Modifications:
    
    Add some shared counter which is used to manage capacity limits when recycle from different thread then the allocation thread. We modify the counter whenever we allocate a new Link to reduce the overhead of increment / decrement it.
    
    Result:
    
    More predictable number of objects mantained in the recycler pool.

commit 771cfaec22248a52b97400e9b29522b94c7be536
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Jul 10 12:54:30 2016 +0200

    [#5520] Correctly include all PoolSubpage metrics
    
    Motivation:
    
    Because of a bug we missed to include the first PoolSubpage when collection metrics.
    
    Modifications:
    
    - Correctly include all subpages
    - Add unit test
    
    Result:
    
    Correctly include all subpages

commit f2ce28bf18368edcfb285fe76b64aca36dd077e7
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jul 13 18:36:58 2016 +0000

    Satisfy write promise when writing an Http2WindowUpdateFrame to Http2FrameCodec.
    
    Motivation:
    
    When writing an Http2WindowUpdateFrame to an Http2FrameCodec, the
    ChannelPromise is never satisfied, so callers cannot generically rely on the
    write future being satisfied on success.
    
    Modifications:
    
    When writing Http2WindowUpdateFrame, Http2FrameCodec now satisfies the
    ChannelPromise immediately.
    
    Result:
    
    The write future is satisfied on successful writes.
    
    Fixes netty/netty#5530.

commit 9de90d07a973ed2b1a2d8f8c6547f7466a75539a
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Jul 8 11:59:21 2016 -0700

    DefaultHttp2RemoteFlowController reentry infinite loop
    
    Motivation:
    DefaultHttp2RemoteFlowController.writePendingBytes does not support reentry but does not enforce this constraint. Reentry is possible if the channel transitions from Writable -> Not Writable -> Writable during the distribution phase. This can happen if the user flushes when notified of the channel transitioning to the not writable state, and may be done if the user wants to fill the channel outbound buffer before flushing.
    
    Modifications:
    - DefaultHttp2RemoteFlowController.writePendingBytes should protect against reentry
    
    Result:
    DefaultHttp2RemoteFlowController will not allocate unexpected amounts or enter an infinite loop.

commit 77770374fbe6b0767cfe5eccd0b59a5d66ec998a
Author: Nitesh Kant <nitesh1706@gmail.com>
Date:   Tue Jun 14 17:28:28 2016 -0700

    Ability to run a task at the end of an eventloop iteration.
    
      Motivation:
    
    This change is part of the change done in PR #5395 to provide an `AUTO_FLUSH` capability.
    Splitting this change will enable to try other ways of implementing `AUTO_FLUSH`.
    
    Modifications:  
    
    Two methods:
    
    ```java
    void executeAfterEventLoopIteration(Runnable task);
      boolean removeAfterEventLoopIterationTask(Runnable task);
    ```
    are added to `SingleThreadEventLoop` class for adding/removing a task to be executed at the end of current/next iteration of this `eventloop`.
    
    In order to support the above, a few methods are added to `SingleThreadEventExecutor`
    
    ```java
    protected void afterRunningAllTasks() { }
    ```
    
    This is invoked after all tasks are run for this executor OR if the passed timeout value for `runAllTasks(long timeoutNanos)` is expired.
    
    Added a queue of `tailTasks` to `SingleThreadEventLoop` to hold all tasks to be executed at the end of every iteration.
     
    Result:  
    
    `SingleThreadEventLoop` now has the ability to execute tasks at the end of an eventloop iteration.

commit cfd6db79150fdb9ea91a3ff2eb6117c23299a12c
Author: Jason Tedor <jason@tedor.me>
Date:   Mon Jul 11 16:49:54 2016 -0400

    Avoid missed signals on a default promise
    
    Motivation:
    
    Today when awaiting uninterruptibly on a default promise, a race
    condition can lead to a missed signal. Quite simply, the check for
    whether the condition holds is not made inside a lock before
    waiting. This means that the waiting thread can enter the wait after the
    promise has completed and will thus not be notified, thus missing the
    signal. This leads to the waiting thread to enter a timed wait that will
    only trip with the timeout elapses leading to unnecessarily long waits
    (imagine a connection timeout, and the waiting thread missed the signal
    that the connection is ready).
    
    Modification:
    
    This commit fixes this missed signal by checking the condition inside a
    lock. We also add a test that reliably fails without the non-racy
    condition check.
    
    Result:
    
    Timed uninterruptible waits on default promise will not race against the
    condition and possibly wait longer than necessary.

commit b37a41a535e41b573c09a00226865561327fb01a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jul 8 10:22:11 2016 +0200

    Allow to get the number of bytes queued in PendingWriteQueue
    
    Motivation:
    
    For some use-cases it would be useful to know the number of bytes queued in the PendingWriteQueue without the need to dequeue them.
    
    Modifications:
    
    Add PendingWriteQueue.bytes().
    
    Result:
    
    Be able to get the number of bytes queued.

commit ce95c50444cc2507769574b3e39fdbffccb7fc1b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jul 7 07:50:51 2016 +0200

    [#5507] SingleThreadEventExecutor should reject call invoke*() from within the EventLoop.
    
    Motivation:
    
    ExecutorService.invoke*(...) methods may block by API definition. This can lead to deadlocks if called from inside the EventLoop in SingleThreadEventExecutor as it only has one Thread that does all the work.
    
    Modifications:
    
    Throw a RejectedExectionException if someone tries to call SingleThreadEventExecutor.invoke*(...) while in the EventLoop.
    
    Result:
    
    No more deadlock possible.

commit 50a74e95f2d1843a244fd7ccedb1645e8fed7079
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jul 6 12:03:45 2016 +0200

    Ensure ChannelHandler.handlerAdded(...) callback is executed directly when added from ChannelFutureListener added to the registration future.
    
    Motivation:
    
    Commit 4c048d069d99891d6a83859b469c39b4ff0f4ae1 moved the logic of calling handlerAdded(...) to the channelRegistered(...) callback of the head of the DefaultChannelPipeline. Unfortunatlly this may execute the callbacks to late as a user may add handlers to the pipeline in the ChannelFutureListener attached to the registration future. This can lead to incorrect ordering.
    
    Modifications:
    
    Ensure we always invoke ChannelHandler.handlerAdded(...) for all handlers before the registration promise is notified.
    
    Result:
    
    Not possible of incorrect ordering or missed events.

commit 79c8ec4d33506ed39b4d941a8bc218eb914f348d
Author: Julien Viet <julien@julienviet.com>
Date:   Thu Jun 30 23:12:11 2016 +0200

    DnsNameResolver search domains support
    
    Motivation:
    
    The current DnsNameResolver does not support search domains resolution. Search domains resolution is supported out of the box by the java.net resolver, making the DnsNameResolver not able to be a drop in replacement for io.netty.resolver.DefaultNameResolver.
    
    Modifications:
    
    The DnsNameResolverContext resolution has been modified to resolve a list of search path first when it is configured so. The resolve method now uses the following algorithm:
    
    if (hostname is absolute (start with dot) || no search domains) {
     searchAsIs
    } else {
      if (numDots(name) >= ndots) {
        searchAsIs
      }
      if (searchAsIs wasn't performed or failed) {
        searchWithSearchDomainsSequenciallyUntilOneSucceeds
      }
    }
    
    The DnsNameResolverBuilder provides configuration for the search domains and the ndots value. The default search domains value is configured with the OS search domains using the same native configuration the java.net resolver uses.
    
    Result:
    
    The DnsNameResolver performs search domains resolution when they are present.

commit 061899f2a7b4fb1f6c1f3dfe723109e863c9a35d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jul 5 20:32:44 2016 +0200

    Allow to remove pinning of EventExecutor for EventExecutorGroup
    
    Motivation:
    
    We pinned the EventExecutor for a Channel in DefaultChannelPipeline. Which means if the user added multiple handlers with the same EventExecutorGroup to the ChannelPipeline it will use the same EventExecutor for all of these handlers. This may be unexpected and even not what the user wants. If the user want to use the same one for all of them it can be done by obtain an EventExecutor and pass the same instance to the add methods. Because of this we should allow to not pin.
    
    Modifications:
    
    Allow to disable pinning of EventExecutor for Channel based on EventExecutorGroup via ChannelOption.
    
    Result:
    
    Less confusing and more flexible usage of EventExecutorGroup when adding ChannelHandlers to the ChannelPipeline.

commit 64bf1674238c62438136fbcca69f5c4dd7ee8193
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jul 7 22:52:35 2016 +0200

    Fix flacky test introducd by 29fdb160f33776c76f0b46aada48a9c9f3babcbf

commit 4baff691b41c26b9c24266e2ae32c228ebda76a8
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jul 5 10:49:20 2016 -0700

    DefaultPromise make listeners not volatile
    
    Motivation:
    DefaultPromise has a listeners member variable which is volatile to allow for an optimization which makes notification of listeners less expensive when there are no listeners to notify. However this change makes all other operations involving the listeners member variable more costly. This optimization which requires listeners to be volatile can be removed to avoid volatile writes/reads for every access on the listeners member variable.
    
    Modifications:
    - DefaultPromise listeners is made non-volatile and the null check optimization is removed
    
    Result:
    DefaultPromise.listeners is no longer volatile.

commit 02850da4808bd64bf131a083ddedb8856189dd20
Author: Roger Kapsi <rkapsi@squarespace.com>
Date:   Thu Jul 7 08:57:19 2016 -0400

    Rename `ChannelHandlerContext#fireUserEventTriggered()` argument from `event` to `evt` so it matches the `ChannelInboundHandler#userEventTriggered()` argument's name.
    
    Motivation
    
    When I override ChannelHandler methods I usually (always) refire events myself via
    ChannelHandlerContext instead of relieing on calling the super method (say
    `super.write(ctx, ...)`). This works great and the IDE actually auto completes/generates
    the right code for it except `#fireUserEventTriggered()` and `#userEventTriggered()`
    which have a mismatching argument names and I have to manually "intervene".
    
    Modification
    
    Rename `ChannelHandlerContext#fireUserEventTriggered()` argument from `event` to `evt`
    to match its handler counterpart.
    
    Result
    
    The IDE's auto generated code will reference the correct variable.

commit 29fdb160f33776c76f0b46aada48a9c9f3babcbf
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Jul 3 22:28:47 2016 +0200

    [#5486] Not operate on serial execution assumption when using EventExecutor in the DefaultChannelPipeline.
    
    Motivation:
    
    In commit f984870ccca133d6056e8b0df0b2352f8f90b0fe I made a change which operated under invalide assumption that tasks executed by an EventExecutor will always be processed in a serial fashion. This is true for SingleThreadEventExecutor sub-classes but not part of the EventExecutor interface contract.
    
    Because of this change implementations of EventExecutor which not strictly execute tasks in a serial fashion may miss events before handlerAdded(...) is called. This is strictly speaking not correct as there is not guarantee in this case that handlerAdded(...) will be called as first task (as there is no ordering guarentee).
    
    Cassandra itself ships such an EventExecutor implementation which has no strict ordering to spread load across multiple threads.
    
    Modifications:
    
    - Add new OrderedEventExecutor interface and let SingleThreadEventExecutor / EventLoop implement / extend it.
    - Only expose "restriction" of skipping events until handlerAdded(...) is called for OrderedEventExecutor implementations
    - Add ThreadPoolEventExecutor implementation which executes tasks in an unordered fashion. This is used in added unit test but can also be used for protocols which not expose an strict ordering.
    - Add unit test.
    
    Result:
    
    Resurrect the possibility to implement an EventExecutor which does not enforce serial execution of events and be able to use it with the DefaultChannelPipeline.

commit 6492cb98b2e40df4a93a12aef21d5bc89dc8aadb
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jul 7 08:37:41 2016 +0200

    Revert "DefaultPromise make listeners not volatile"
    
    This reverts commit 4d8132ff246c95cf677c525f8dfce6de00685842 as I missed something I want to discuss first.

commit 4d8132ff246c95cf677c525f8dfce6de00685842
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jul 5 10:49:20 2016 -0700

    DefaultPromise make listeners not volatile
    
    Motivation:
    DefaultPromise has a listeners member variable which is volatile to allow for an optimization which makes notification of listeners less expensive when there are no listeners to notify. However this change makes all other operations involving the listeners member variable more costly. This optimization which requires listeners to be volatile can be removed to avoid volatile writes/reads for every access on the listeners member variable.
    
    Modifications:
    - DefaultPromise listeners is made non-volatile and the null check optimization is removed
    
    Result:
    DefaultPromise.listeners is no longer volatile.

commit e3c8a924993018e5d8e7d724fc89cc1f9d691387
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jul 5 14:15:37 2016 +0200

    Add FlushConsolidationHandler which consolidates flush operations as these are expensive
    
    Motivation:
    
    Calling flush() and writeAndFlush(...) are expensive operations in the sense as both will produce a write(...) or writev(...) system call if there are any pending writes in the ChannelOutboundBuffer. Often we can consolidate multiple flush operations into one if currently a read loop is active for a Channel, as we can just flush when channelReadComplete is triggered. Consolidating flushes can give a huge performance win depending on how often is flush is called. The only "downside" may be a bit higher latency in the case of where only one flush is triggered by the user.
    
    Modifications:
    
    Add a FlushConsolidationHandler which will consolidate flushes and so improve the throughput.
    
    Result:
    
    Better performance (throughput). This is especially true for protocols that use some sort of PIPELINING.

commit c393374cf5152e376d9fe3d6b9028a46fc6f624e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jul 4 09:40:08 2016 +0200

    [#5455] Clarify ChannelPool javadocs
    
    Motivation:
    
    We should make it clear that each acquired Channel needs to be released in all cases.
    
    Modifications:
    
    More clear javadocs.
    
    Result:
    
    Harder for users to leak Channel.

commit 195d7476d505f26bd34e53e1b391db51b7169773
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jul 5 21:12:09 2016 +0200

    Deprecate methods in AbstractChannel that have no real usage.
    
    Motivation:
    
    We should deprecate methods that are not used.
    
    Modifications:
    
    Add @Deprecated to methods
    
    Result:
    
    Be able to cleanup stuff sooner.

commit 0fbb791ad629144dae5a169e8253850b05afe286
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Wed Jul 6 16:40:14 2016 +0200

    Make AbstractChannel.outboundBuffer volatile.
    
    Motivation:
    
    The field can be read from arbitrary threads via Channel.(isWritable()|bytesBeforeWritable()|bytesBeforeUnwritable()), WriteAndFlushTask.newInstance(), PendingWriteQueue, etc.
    
    Modifications:
    
    Make AbstractChannel.outboundBuffer volatile.
    
    Result:
    
    More correct in a concurrent use case.

commit df033e150c71e2569105520fca853136841cb579
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Jun 30 21:54:42 2016 -0700

    EPOLL Cached ECONNREFUSED Exception
    
    Motivation:
    ECONNREFUSED can be a common type of exception when attempting to finish the connection process. Generating a new exception each time can be costly and quickly bloat memory usage.
    
    Modifications:
    - Expose ECONNREFUSED from JNI and cache this exception in Socket.finishConnect
    
    Result:
    ECONNREFUSED during finish connect doesn't create a new exception each time.

commit 44b942e5077d0d3018befd7a66d44a37dd294578
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jul 5 13:37:04 2016 +0200

    Rename future to promise in the ChannelDuplexHandler method arguments.
    
    Motivation:
    
    We used future in many method of ChannelDuplexHandler as argument name of ChannelPromise. We should make it more consistent and correct.
    
    Modifications:
    
    Replace future with promise.
    
    Result:
    
    More correct and consistent naming.

commit d97129b4c016d7c2252ed28a3ab9e3a34512b8ab
Author: Jason Tedor <jason@elastic.co>
Date:   Tue Jul 5 16:27:31 2016 -0400

    Log listener Throwables in default promise
    
    Motivation:
    
    The logging statements in i.n.u.c.DefaultPromise do not emit the
    caught Throwable when a Throwable is thrown while a listener is being
    notified of completed or progressed operations.
    
    Modifications:
    
    This issue arises because the logging message has a single placeholder
    but is passing two additional arguments, the second one being the
    caught Throwable that is thus quietly not logged. We address this by
    modifying the logging statements to ensure the caught Throwable is
    logged. In this case, the preferred approach is to use the logger
    override that accepts a message and a Throwable parameter since logger
    implementations might have special handling for this case.
    
    Result:
    
    Log messages from i.n.u.c.DefaultPromise when a Throwable is thrown
    while notifying a listener of completed or progressed operations will
    contain the caught Throwable.

commit 987ebb90ec43b928823f2591a558072b6de3e798
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jun 28 06:42:02 2016 +0200

    Share code between ReadTimeoutHandler and IdleStateHandler
    
    Motivation:
    
    ReadTimeoutHandler and IdleStateHandler have duplicated code, we should share whatever possible.
    
    Modifications:
    
    Let ReadTimeoutHandler extend IdleStateHandler.
    
    Result:
    
    Remove code duplication.

commit 009680488e73c0f65eddb3c2465ae092f0a8cb39
Author: Masaru Nomura <massa.nomura@gmail.com>
Date:   Sun Jul 3 00:07:26 2016 +0900

    Fix set100ContinueExpected(...) jsvadoc
    
    Motivation:
    
    We don't have an argument named {@code value} but have {@code set} and
    {@code expected} in HttpHeaders and HttpUtil respectively.
    
    Modifications:
    
    I replaced {@code value} to {@code set} and {@code expected} in HttpHeaders
    and HttpUtil respectively.
    
    Result:
    
    Now javadoc says;
    If {@code set} is {@code true}, the {@code "Expect: 100-continue"} header is
    set and all other previous {@code "Expect"} headers are removed. Otherwise,
    all {@code "Expect"} headers are removed completely. in HttpHeaders
    
    If {@code expected} is {@code true}, the {@code "Expect: 100-continue"} header
    is set and all other previous {@code "Expect"} headers are removed. Otherwise,
    all {@code "Expect"} headers are removed completely. in HttpUtil

commit b0a5d4c266ed4117282decf06dc5053190423230
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Mon Jul 4 09:49:09 2016 +0200

    Fix improper synchronization in DefaultPromise. Fixes #5489
    
    Motivation:
    
    A race detector found that DefaultPromise.listeners is improperly synchronized [1].
    Worst case a listener will not be executed when the promise is completed.
    
    Modifications:
    
    Make DefaultPromise.listeners a volatile.
    
    Result:
    
    Hopefully, DefaultPromise is more correct under concurrent execution.
    
    [1] https://github.com/grpc/grpc-java/issues/2015

commit be3e6972a18e9a673ef54a63cd2fb16b20ee936e
Author: 墨睿 <kevin.luy@alibaba-inc.com>
Date:   Sat Jul 2 18:56:22 2016 +0800

    Add a test case to check sub strings' AsciiString hash code
    
    Motivation:
    
    AsciiString.hashCode(o) , if "o" is a subString, the hash code is not always same, when netty’s version is 4.1.1.Final and jdk’s version is 1.6.
    
    Modifications:
    
    Use a test to assert hash codes are equal between a new string and any sub string (a part of  a char array),If their values are equal.
    
    Result:
    
    Create a test method to AsciiStringCharacterTest.

commit 5c124ae8e2a5412499403e1342a66c266ef8b017
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri May 27 20:52:56 2016 -0700

    OpenSslEngine writePlaintextData WANT_READ with no data in BIO buffer unit test
    
    Motivation:
    Unit test for the OpenSslEngine "OpenSslEngine writePlaintextData WANT_READ with no data in BIO buffer" issue.
    
    Modifications:
    - Update SslEngine test to include renegotiation
    
    Result:
    More test coverage in OpenSslEngine.

commit 181c159c240c166cd9ba83dd23de12e3db6bc38d
Author: Tim Brooks <tim@uncontended.net>
Date:   Thu Jun 30 13:16:45 2016 -0500

    Remove unneeded calls to hasScheduledTasks() when fetching from scheduled task queue for event executors.
    
    Motivation:
    
    Currently in the single threaded and global event executors when the scheduled task queue is drained, there is a call to hasScheduledTasks(). If there are scheduled tasks then the the code polls the queue for tasks. The poll method duplicates the exact logic of hasScheduledTasks(). This involves two calls to nanoTime when one seems sufficient.
    
    Modifications:
    
    Directly poll the queue for tasks and break if the task returned is null.
    
    Result:
    
    Should be no noticeable impact on functionality. Two calls to nanoTime have been coarsened into a single call.

commit 4676a2271cdce18f8524642b4f87923f93120113
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jul 1 10:33:32 2016 +0200

    [maven-release-plugin] prepare for next development iteration

commit ad270c02b928a56cb1a51574536566cc2f0d5fb8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jul 1 09:07:40 2016 +0200

    [maven-release-plugin] prepare release netty-4.1.2.Final

commit 34d8b514d7a3b62e6101bade10a445bc448a0e65
Author: Carsten Varming <cvarming@twitter.com>
Date:   Wed Jun 29 13:17:22 2016 -0400

    Use reflection to call cleaner on direct byte buffers in JDK9.
    
    Motivation:
    
    Project Jigsaw in JDK9 has moved the direct byte buffer cleaner from
    sun.misc.Cleaner to java.lang.ref.Cleaner$Cleanable. This cause the
    current platform tests to throw a ClassNotFoundException, disabling the
    use of direct byte buffer cleaners.
    
    Modifications:
    
    I use reflection to find the clean method in either sun.misc.Cleaner or
    java.lang.ref.Cleaner$Cleanable.
    
    Result:
    
    Netty uses direct byte buffers on JDK9 as it already do on earlier JDKs.

commit 8780062a43240b195c8ad2ecf4167d26474d5a7a
Author: Carsten Varming <cvarming@twitter.com>
Date:   Wed Jun 29 15:28:17 2016 -0400

    Removed HeapByteBuffer address field check.
    
    Motivation:
    
    In JDK9 heap byte buffers have an address field, so we have to remove
    the current check as it is invalid in JDK9.
    
    Modifications:
    
    Removed the address field check for heap byte buffers.
    
    Result:
    Netty continues to find sun.misc.Unsafe in JDK9 as in previous JDKs.

commit 9d933091bfc82cbf5d65c2b27a1ff9dc10577d6a
Author: Carsten Varming <cvarming@twitter.com>
Date:   Wed Jun 29 13:04:15 2016 -0400

    Add version check for JDK9 and beyond.
    
    Motivation:
    
    Netty's platform dependent parts should know about JDK9.
    
    Modifications:
    
    JDK9 introduce Runtime$Version Runtime.version() which has an int major()
    method that always return the major Java version. I call that method to
    get the Java major version.
    
    Result:
    
    Netty will recognize all future JDK versions.

commit 6af56ffe76ce1c012456726175698ee85fee0e7f
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Jun 23 10:38:27 2016 -0700

    HPACK Encoder headerFields improvements
    
    Motivation:
    HPACK Encoder has a data structure which is similar to a previous version of DefaultHeaders. Some of the same improvements can be made.
    
    Motivation:
    - Enforce the restriction that the Encoder's headerFields length must be a power of two so we can use masking instead of modulo
    - Use AsciiString.hashCode which already has optimizations instead of having yet another hash code algorithm in Encoder
    
    Result:
    Fixes https://github.com/netty/netty/issues/5357

commit a7f7d9c8e004aa13801424e6e665b1ec525a822f
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jun 22 18:07:15 2016 -0700

    Remove unsafe char[] access in PlatformDependent
    
    Motivation:
    PlatformDependent attempts to use reflection to get the underlying char[] (or byte[]) from String objects. This is fragile as if the String implementation does not utilize the full array, and instead uses a subset of the array, this optimization is invalid. OpenJDK6 and some earlier versions of OpenJDK7 String have the capability to use a subsection of the underlying char[].
    
    Modifications:
    - PlatformDependent should not attempt to use the underlying array from String (or other data types) via reflection
    
    Result:
    PlatformDependent hash code generation for CharSequence does not depend upon specific JDK implementation details.

commit f3dc483c990364e62b66e8dadc01c599a0a61eec
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Thu Jun 30 11:03:55 2016 +0200

    Fix NPE in OpenSslEngine
    
    Motivation:
    
    The gRPC interop tests fail due to a NPE in OpenSslEngine.
    
    Caused by: java.lang.NullPointerException
    at io.netty.handler.ssl.OpenSslEngine.setSSLParameters(OpenSslEngine.java:1473)
    
    Modifications:
    
    Add a null check
    
    Result:
    
    No more NPE exceptions :-)

commit 57672d985440eb5a5451190ca88d2f6aed1439ba
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jun 28 21:20:40 2016 +0200

    Use ResourceLeakDetectorFactory in HashedWheelTimer
    
    Motivation:
    
    We recently added the ResourceLeakDetectorFactory but missed to updated HashedWheelTimer to use it.
    
    Modifications:
    
    - Add new abstract method to ResourceLeakDetectorFactory that allows to provide also samplingInterval and maxActive args.
    - Deprecate most constructors in ResourceLeakDetector and add doc explaining that people should use ResourceLeakDetectorFactory
    
    Result:
    
    Custom ResourceLeakDetectorFactory will also be used in HashedWheelTimer if configured.

commit bd0a74fca3bd97543d4757c6abe82081abc11e14
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jun 28 20:47:25 2016 +0200

    Allow to disable ResourceLeak creation when worker thread is deamon in HashedWheelTimer
    
    Motivation:
    
    Sometimes a shared HashedWheelTimer can not easily be stopped in a good place. If the worker thread is daemon this is not a big deal and we should allow to not log a leak.
    
    Modifications:
    
    Add another constructor which allows to disable resource leak detection if worker thread is used.
    
    Result:
    
    Not log resource leak when HashedWheelTimer is not stopped and the  worker thread is a deamon thread.

commit 857ad73676c23da2eb6a892a799f0f26358d60ea
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Jun 25 13:49:17 2016 -0700

    DefaultPromise make MAX_STACK_DEPTH configurable
    
    Motivation:
    Some Netty use cases may want to configure the max allowed stack depth for promise listener notification.
    
    Modifications:
    - Add a system property so that this value can be configured.
    
    Result:
    DefaultPromise's max stack depth is configurable.

commit df41be6fc84adc116bc46ff703c4b9d7248fa099
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Jun 25 13:34:10 2016 -0700

    HTTP/2 Decoder validate that GOAWAY lastStreamId doesn't increase
    
    Motivation:
    The HTTP/2 RFC states in https://tools.ietf.org/html/rfc7540#section-6.8 that Endpoints MUST NOT increase the value they send in the last stream identifier however we don't enforce this when decoding GOAWAY frames.
    
    Modifications:
    - Throw a connection error if the peer attempts to increase the lastStreamId in a GOAWAY frame
    
    Result:
    RFC is more strictly enforced.

commit 3613d15bca15727a4376aeadd9966bc8f4f50a97
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Fri May 27 11:53:00 2016 +0200

    Split Http2MultiplexCodec into Frame- and MultiplexCodec + Tests. Fixes #4914
    
    Motivation:
    
    Quote from issue 4914:
    "Http2MultiplexCodec currently does two things: mapping the existing h2 API to frames and managing the child channels.
    
    It would be better if the two parts were separated. This would allow less-coupled development of the HTTP/2 handlers (flow control could be its own handler, for instance) and allow applications to insert themselves between all streams and the codec, which permits custom logic and could be used, in part, to implement custom frame types.
    
    It would also greatly ease testing, as the child channel could be tested by itself without dealing with how frames are encoded on the wire."
    
    Modifications:
    
    - Split the Http2MultiplexCodec into Http2FrameCodec and Http2MultiplexCodec. The Http2FrameCodec interacts with the existing HTTP/2 callback-based API, while the Http2MulitplexCodec is completely independent of it and simply multiplexes Http2StreamFrames to the child channels. Additionally, the Http2Codec handler is introduced, which is a convenience class that simply sets up the Http2FrameCodec and Http2MultiplexCodec in the channel pipeline and removes itself.
    
    - Improved test coverage quite a bit.
    
    Result:
    
    - The original Http2MultiplexCodec is split into Http2FrameCodec and Http2MultiplexCodec.
    - More tests for higher confidence in the code.

commit 804e058e27e16e346b565ce4490f6177574e267d
Author: Julien Viet <julien@julienviet.com>
Date:   Tue Jun 28 11:44:04 2016 +0200

    DnsNameResolver should not bind locally. Fixes #5457 Motivation: Dns resolution failures happen when using the DnsNameResolver and the JVM is not authorized to bind datagram channels. The current DnsNameResolver binds locally a DatagramChannel which is not necessary (and not always permitted).
    
    Modifications:
    The DnsNameResolver Bootstrap does not bind anymore, instead it registers and use the channel directly. The localAddress has also been removed from the DnsAddressResolverGroup, DnsNameResolver and DnsNameResolverBuilder as it is not necessary anymore and the API is marked as @UnstableApi.
    
    Result:
    Dns resolution does not require anymore to bind locally.

commit 5e649850898889a8d2f1e526db610a8fca19c1ff
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jun 20 14:07:53 2016 +0200

    Add support for KeyManagerFactory when using SslProvider.OpenSsl.
    
    Motivation:
    
    To be able to use SslProvider.OpenSsl with existing java apps that use the JDK SSL API we need to also provide a way to use it with an existing KeyManagerFactory.
    
    Modification:
    
    Make use of new tcnative apis and so hook in KeyManagerFactory.
    
    Result:
    
    SslProvider.OpenSsl can be used with KeyManagerFactory as well.

commit 3a69adfefb6136e5c63727d389b784b921dee08c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jun 16 14:56:30 2016 +0200

    [#5401] Support -Djdk.tls.ephemeralDHKeySize=num when using OpenSslContext
    
    Motivation:
    
    Java8+ adds support set a DH key size via a System property (jdk.tls.ephemeralDHKeySize). We should respect this when using OpenSSL.
    
    Modifications:
    
    Respect system property.
    
    Result:
    
    More consistent SSL implementation.

commit 70651cc58d56749c9c9f9376f8c2fa47ca3ef471
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jun 22 10:37:35 2016 -0700

    HpackUtil.equals performance improvement
    
    Motivation:
    PR #5355 modified interfaces to reduce GC related to the HPACK code. However this came with an anticipated performance regression related to HpackUtil.equals due to AsciiString's increase cost of charAt(..). We should mitigate this performance regression.
    
    Modifications:
    - Introduce an equals method in PlatformDependent which doesn't leak timing information and use this in HpcakUtil.equals
    
    Result:
    Fixes https://github.com/netty/netty/issues/5436

commit 2546d99864cf75597fe80ae314036d719534a504
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jun 13 11:13:31 2016 +0200

    Expose session ticket statistics.
    
    Motivation:
    
    We recently added support for session ticket statistics which we can expose now.
    
    Modifications:
    
    Expose the statistics.
    
    Result:
    
    Be able to obtain session ticket statistics.

commit ee3c8e0580781a0497f365a0337b9be8e590f547
Author: Kevin Herron <kevin@inductiveautomation.com>
Date:   Fri May 20 10:07:46 2016 -0700

    Test that CompositeByteBuf releases its components
    
    Motivation:
    
    In order to prevent a regression, add test case for a bug that caused a CompositeByteBuf to not release its components.
    
    Modifications:
    
    Add a test case that asserts a CompositeByteBuf's component buffers have indeed been released.
    
    Result:
    
    AbstractCompositeByteBuf gains a test case that will prevent future regressions.

commit 2562ef7cbebe5eb4345cdde6323aeb0113c3f86c
Author: joymufeng <joymufeng@gmail.com>
Date:   Sun Jun 26 17:16:12 2016 +0800

    Fix a bug of DnsNameResolver while working with NoopDnsCache.
    
    Motivation:
    
    If DnsNameResolver works with NoopDnsCache, IndexOutOfBoundsException will
    be thrown.
    
    Modifications:
    
    Test if the result of DnsNameResolver.get(hostname) is empty before
    accessing it's elements.

commit f0a5ee068f5ee73a0c53e4e12d0ae2fcf8038a9b
Author: Guido Medina <gmedina@squaredfinancial.com>
Date:   Sat Jun 25 13:37:33 2016 +0100

    Update dependencies and plugins to latest possible versions.
    
    Motivation:
    It is good to have used dependencies and plugins up-to-date to fix any undiscovered bug fixed by the authors.
    
    Modification:
    Scanned dependencies and plugins and carefully updated one by one.
    
    Result:
    Dependencies and plugins are up-to-date.

commit 73c4ad5f0a233844aa8629224c46d758a06225c1
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Thu Jun 23 14:09:23 2016 +0200

    http2: count pad length field toward flow control. Fixes #5434
    
    Motivation:
    The HTTP/2 specification requires the pad length field of DATA, HEADERS and PUSH_PROMISE frames to be counted towards the flow control window. The current implementation doesn't do so (See #5434).
    
    Furthermore, it's currently not possible to add one byte padding, as this would add the one byte pad length field as well as append one padding byte to the end of the frame.
    
    Modifications:
    Include the one byte pad length field in the padding parameter of the API. Thereby extending the allowed value range by one byte to 256 (inclusive). On the wire, a one byte padding is encoded with a pad length field with value zero and a 256 byte padding is encoded with a pad length field with value 255 and 255 bytes append to the end of the frame.
    
    Result:
    More correct padding.

commit 731f52fdf73852a8fc597b1f08ed86b63caee375
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jun 21 18:03:59 2016 +0200

    Allow to inject RejectedExecutionHandler for different EventLoops and EventExecutors
    
    Motiviation:
    
    Sometimes it is useful to allow to specify a custom strategy to handle rejected tasks. For example if someone tries to add tasks from outside the eventloop it may make sense to try to backoff and retries and so give the executor time to recover.
    
    Modification:
    
    Add RejectedEventExecutor interface and implementations and allow to inject it.
    
    Result:
    
    More flexible handling of executor overload.

commit a0d4fb16fc1d71230c6633402e7a4d2a3b112e4d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jun 21 16:59:46 2016 +0200

    Allow to set max capacity for task queue for EventExecutors and EventLoops
    
    Motivation:
    
    To restrict the memory usage of a system it is sometimes needed to adjust the number of max pending tasks in the tasks queue.
    
    Modifications:
    
    - Add new constructors to modify the number of allowed pending tasks.
    - Add system properties to configure the default values.
    
    Result:
    
    More flexible configuration.

commit 77c6d7a67249423a21cd8a8323133cb205f58710
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jun 22 09:46:41 2016 +0200

    Correctly implement SSLSession.getLastAccessedTime() for OpenSSLEngine
    
    Motivation:
    
    We need to return a correct time for SSLSession.getLastAccessedTime() so it reflect when the handshake was done when the session was reused.
    
    Modifications:
    
    Correctly reflect handshake time in getLastAccessedTime().
    
    Result:
    
    More conform SSLSession implementation.

commit d495792c481f33ccdeafd9e79adda53a48f7f4bd
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jun 22 15:00:58 2016 +0200

    Allow to wrap another SslContext implementation and do extra init steps on the SSLEngine.
    
    Motivation:
    
    Sometimes its needed to customize the SSLEngine (like setting protocols etc). For this it would be useful if the user could wrap an SslContext and do init steps on the SSLEngine.
    
    Modifications:
    
    Add new SslContext implementation which can wrap another one and allow to customize the SSLEngine
    
    Result:
    
    More flexible usage of SslContext.

commit 7c1374dd54fda385ceb384c3d27c6a8d9bab3d10
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jun 22 15:46:45 2016 +0200

    OpenSslEngine.getSupportedCipherSuites() must return java names as well.
    
    Motivation:
    
    At the moment OpenSslEngine.getSupportedCipherSuites() only return the original openssl cipher names and not the java names. We need also include the java names.
    
    Modifications:
    
    Correctly return the java names as well.
    
    Result:
    
    Correct implementation of OpenSslEngine.getSupportedCipherSuites()

commit 278c36af0ca9f0e97d6d321a88c413155483c509
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jun 20 11:40:12 2016 +0200

    Merge ThrowableUtils into ThrowableUtil.
    
    Motivation:
    
    We should merge ThrowableUtils into ThrowableUtil as this name is more consistent with the naming of utility classes in netty.
    
    Modifications:
    
    Merge classes.
    
    Result:
    
    More consistent naming

commit f52b07dedee99c0d0cf08a3b6732d56290185825
Author: Franck Chevassu <franck.chevassu@syspertec.com>
Date:   Wed Jun 22 13:58:14 2016 +0200

    Fix HTTP version and Host header in HttpProxyHandler
    
    Motivation:
    
      The current implementation does not comply with RFC2817 on two points:
    
      - The HTTP version required to support the CONNECT method is 1.1,
        but the current implementation specifies 1.0.
    
      - The HOST header should hold the name or address of the Target Host,
        but the current implementation uses the proxy address instead.
    
    Modifications:
    
      - Specify HTTP version 1.1,
      - The HOST header is now set using the Target Host's name (or address,
        if it is resolved).
    
    Result:
    
      The CONNECT request is RFC2817-compliant.

commit b4d4c0034d6f9e5e5884cc70e625d9f2655008bd
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 30 13:40:08 2016 +0200

    Optimize HPACK usage to align more with Netty types and remove heavy object creations. Related to [#3597]
    
    Motivations:
    
    The HPACK code was not really optimized and written with Netty types in mind. Because of this a lot of garbage was created due heavy object creation.
    
    This was first reported in [#3597] and https://github.com/grpc/grpc-java/issues/1872 .
    
    Modifications:
    
    - Directly use ByteBuf as input and output
    - Make use of ByteProcessor where possible
    - Use AsciiString as this is the only thing we need for our http2 usage
    
    Result:
    
    Less garbage and better usage of Netty apis.

commit a725b970928bc993de81c6b883fc0af454672d51
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jun 13 12:44:35 2016 +0200

    [#5386] DnsNameResolver does not resolve localhost on Windows
    
    Motivation:
    
    On Windows localhost is not in hosts file and the DNS server does not resolve this address either, i.e it is handled by the Windows API. So using a Bootstrap (among others) with the resolver based on DnsNameResolver will not resolve localhost.
    
    Modifications:
    
    Workaround behavior of Windows
    
    Result:
    
    Correctly resolve localhost on Windows when using DnsNameResolver

commit d964bf6f1838d7dda55e00207802106741011a50
Author: Tim Brooks <tim@uncontended.net>
Date:   Mon Jun 20 10:19:17 2016 -0500

    Remove usages of deprecated methods group() and childGroup().
    
    Motivation:
    
    These methods were recently deprecated. However, they remained in use in several locations in Netty's codebase.
    
    Modifications:
    
    Netty's code will now access the bootstrap config to get the group or child group.
    
    Result:
    
    No impact on functionality.

commit 31e0ac1d22a5f948694bb0e63ca8c9bb71b5fbc2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jun 9 09:44:06 2016 +0200

    Expose the SelectorProvider used by the NioEventLoop
    
    Motivation:
    
    If a user writes an own nio based transport which uses a special SelectorProvider it is useful to be able to get the SelectorProvider that is used by a NioEventLoop. This way this can be used when implement AbstractChannel.isCompatible(...) and check that the SelectorProvider is the correct one.
    
    Modifications:
    
    Expose the SelectorProvider.
    
    Result:
    
    Be able to get the SelectorProvider used by a NioEventLoop.

commit 6aa5f76d4225ea54c344fab28f0393d9b4af19b3
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jun 8 16:28:17 2016 -0700

    HTTP/2 DelegatingDecompressorFrameListener return bytes to flow control
    
    Motivation:
    If a single DATA frame ends up being decompressed into multiple frames by DelegatingDecompressorFrameListener the flow control accounting is delayed until all frames have been decompressed. However it is possible the user may want to return bytes to the flow controller which were not included in the onDataRead return value. In this case the amount of processed bytes has not been incremented and will lead to negative value for processed bytes.
    
    Modifications:
    - Http2Decompressor.incrementProcessedBytes should be called each time onDataRead is called to ensure all bytes are accounted for at the correct time
    
    Result:
    Fixes https://github.com/netty/netty/issues/5375

commit 9687d77b5ab1ca6b3bfd57dab8b71b796ad45b52
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jun 15 15:00:58 2016 +0200

    Move validation of arguments out of synchronized block
    
    Motivation:
    
    There is no need already use synchronized when validate the args of the methods.
    
    Modifications:
    
    First validate arguments and then use synchronized
    
    Result:
    
    Less code executed in synchronized block.

commit e84567004324c0bfd04b0ca9e1e182ed89394b16
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jun 9 13:29:59 2016 +0200

    Set some StackTraceElement on pre-instantiated static exceptions
    
    Motivation:
    
    We use pre-instantiated exceptions in various places for performance reasons. These exceptions don't include a stacktrace which makes it hard to know where the exception was thrown. This is especially true as we use the same exception type (for example ChannelClosedException) in different places. Setting some StackTraceElements will provide more context as to where these exceptions original and make debugging easier.
    
    Modifications:
    
    Set a generated StackTraceElement on these pre-instantiated exceptions which at least contains the origin class and method name. The filename and linenumber are specified as unkown (as stated in the javadocs of StackTraceElement).
    
    Result:
    
    Easier to find the origin of a pre-instantiated exception.

commit 16be36a55fded330a92a4869e127b6b7249c6d13
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jun 16 21:22:15 2016 +0200

    [#5402] sec-websocket-origin should mention HTTPS
    
    Motivation:
    
    When HTTPS is used we should use https in the sec-websocket-origin / origin header
    
    Modifications:
    
    - Correctly generate the sec-websocket-origin / origin header
    - Add unit tests.
    
    Result:
    
    Generate correct header.

commit 3288cacf8dee818a7432b3baae41d617ba168b96
Author: agonigberg <agonigberg@netflix.com>
Date:   Wed Jun 15 00:19:15 2016 -0700

    Pluggable resource leak detector
    
    Allow users of Netty to plug in their own leak detector for the purpose
    of instrumentation.
    
    Motivation:
    
    We are rolling out a large Netty deployment and want to be able to
    track the amount of leaks we're seeing in production via custom
    instrumentation. In order to achieve this today, I had to plug in a
    custom `ByteBufAllocator` into the bootstrap and have it initialize a
    custom `ResourceLeakDetector`. Due to these classes mostly being marked
    `final` or having private or static methods, a lot of the code had to
    be copy-pasted and it's quite ugly.
    
    Modifications:
    
    * I've added a static loader method for the `ResourceLeakDetector` in
    `AbstractByteBuf` that tries to instantiate the class passed in via the
    `-Dio.netty.customResourceLeakDetector`, otherwise falling back to the
    default one.
    * I've modified `ResourceLeakDetector` to be non-final and to have the
    reporting broken out in to methods that can be overridden.
    
    Result:
    
    You can instrument leaks in your application by just adding something
    like the following:
    
    ```java
    public class InstrumentedResourceLeakDetector<T> extends
    ResourceLeakDetector<T> {
    
        @Monitor("InstanceLeakCounter")
        private final AtomicInteger instancesLeakCounter;
    
        @Monitor("LeakCounter")
        private final AtomicInteger leakCounter;
    
        public InstrumentedResourceLeakDetector(Class<T> resource) {
            super(resource);
            this.instancesLeakCounter = new AtomicInteger();
            this.leakCounter = new AtomicInteger();
        }
    
        @Override
        protected void reportTracedLeak(String records) {
            super.reportTracedLeak(records);
            leakCounter.incrementAndGet();
        }
    
        @Override
        protected void reportUntracedLeak() {
            super.reportUntracedLeak();
            leakCounter.incrementAndGet();
        }
    
        @Override
        protected void reportInstancesLeak() {
            super.reportInstancesLeak();
            instancesLeakCounter.incrementAndGet();
        }
    }
    ```

commit f2efd68c396e9b02fed5c594943c8be920243a06
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jun 15 12:04:29 2016 +0200

    Correctly support SSLSession.getId() when using OpenSslEngine
    
    Motivation:
    
    At the moment SSLSession.getId() may always return an empty byte array when OpenSSLEngine is used. This is as we not set SSL_OP_NO_TICKET on the SSLContext and so SSL_SESSION_get_id(...) will return an session id with length of 0 if tickets are not used.
    
    Modifications:
    
    - Set SSL_OP_NO_TICKET by default and only clear it if the user requests the usage of session tickets.
    - Add unit test
    
    Result:
    
    Ensure consistent behavior between different SSLEngine implementations.

commit e4d21abfc102dc053f139125aa273756937a7c4d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jun 20 09:32:58 2016 +0200

    Add support for SSLParameters.setCipherSuiteOrder() when using Java8+
    
    Motivation:
    
    When using java8+ we should support SSLParameters.setCipherSuiteOrder()
    
    Modifications:
    
    Add support of SLParameters.setCipherSuiteOrder() by using reflection, so we can compile with java7 but still support it.
    
    Result:
    
    Users that use java8+ can use SSLParameters.setCipherSuiteOrder()

commit e14a385a8833ce0cde1735af4544a664c4028e40
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jun 16 12:04:39 2016 +0200

    Add support for SNIHostName when using Java8+
    
    Motivation:
    
    Java8 added support for using SNIHostName with SSLParameters. We currently ignore it in OpenSslEngine.
    
    Modifications:
    
    Use reflection to support SNIHostName.
    
    Result:
    
    People using Java8 can use SNIHostName even when OpenSslEngine is used.

commit ee0897a1d9d80119990964834d62f906f800afb8
Author: Nitesh Kant <nitesh1706@gmail.com>
Date:   Sun Jun 19 20:37:07 2016 -0700

    HttpContentDecompressor should change decompressed requests to chunked encoding. Fixes issue #5428
    
    `HttpContentDecoder` was removing `Content-Length` header but not adding a `Transfer-Encoding` header which goes against the HTTP spec.
    
    Added `Transfer-Encoding` header with value `chunked` when `Content-Length` is removed.
    Modified existing unit test to also check for this condition.
    
    Compliance with HTTP spec.

commit 9602535b7d0bc349a8912286d3812629175b79e4
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Thu Jun 16 22:17:35 2016 -0700

    Added `isText` to validate if a ByteBuf is compliant with the specified charset.
    
    Motivation:
    
    See #82.
    
    Modifications:
    
    - Added `isText` to validate if the given ByteBuf is compliant with the specified charset.
    - Optimized for UTF-8 and ASCII. For other cases, `CharsetDecoder.decoder` is used.
    
    Result:
    
    Users can validate ByteBuf with given charset.

commit c7a0a0f325479e9fa0b34ce19b00909f240d5b8e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jun 13 21:16:22 2016 +0200

    [#5391] DnsNameResolver does not resolve property A+CNAME answer
    
    Motivation:
    
    The current DnsNameResolver fails to resolve an A+CNAME answer. For example:
    
    dig moose.rmq.cloudamqp.com
    
    ...
    ;; ANSWER SECTION:
    moose.rmq.cloudamqp.com. 1800   IN  CNAME   ec2-54-152-221-139.compute-1.amazonaws.com.
    ec2-54-152-221-139.compute-1.amazonaws.com. 583612 IN A 54.152.221.139
    ...
    
    The resolver constructs a map of cnames but forgets the trailing "." in the values which lead to not resolve the A record.
    
    Modifications:
    
    Reuse the code of DefaltDnsRecordDecoder which correctly handles the trailing dot.
    
    Result:
    
    Correctly resolve.

commit aa8f7b395b3808dfd19d3371ad5d9a59a788e8ed
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jun 15 14:25:01 2016 +0200

    Ensure examples are runnable in the ide
    
    Motivation:
    
    It seems like intellij / idea is confused because of shading of jctools.
    
    Modifications:
    
    Add jctools as dependency with scope runtime to the examples as workaround
    
    Result:
    
    Its possible again to run the examples in the ide.

commit 87d9ecc2c94c188e7cc6c8c0dd88d6dc64e61719
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jun 13 20:18:17 2016 +0200

    Correctly skip OpenSsl* tests if OpenSsl.isAvailable() is false.
    
    Motivation:
    
    We missed to skip some tests for OpenSsl when OpenSsl.isAvailable() is false.
    
    Modifications:
    
    - Correctly skip tests when OpenSsl.isAvailable() is false.
    - Simplify some code by using @BeforeClass.
    
    Result:
    
    Be able to compile netty even when OpenSsl is not present on the system.

commit 65d1fb474d8456fd5dcc6e664c500698f1b566bb
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jun 13 11:34:14 2016 +0200

    Guard against possible segfault when OpenSslContext is gc'ed and user still hold reference to OpenSslSessionContext / OpenSslSessionStats
    
    Motivation:
    
    When the OpenSslContext is gc'ed and the user still hold a reference to OpenSslSessionContext / OpenSslSessionStats it is possible to produce a segfault when calling
    a method on any of these that tries to pass down the ctx pointer to the native methods. This is because the OpenSslContext finalizer will free the native pointer.
    
    Modifications:
    
    Change OpenSslSessionContext / OpenSslSessionContext to store a reference to OpenSslContext and so prevent the GC to collect it as long as the user has a reference to OpenSslSessionContext / OpenSslSessionContext.
    
    Result:
    
    No more sefault possible.

commit 4a1e0ceb4dc7a3eb49222b048665ab734bd4ed6f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jun 10 11:45:14 2016 +0200

    [5382] HttpContentEncoder should not set chunked transfer-encoding for HTTP/1.0
    
    Motivation:
    
    When using HttpContentCompressor and the HttpResponse is protocol version 1.0, HttpContentEncoder.encode() should not set the transfer-encoding header to chunked. Chunked transfer-encoding is not valid for HTTP 1.0 - this causes ERR_CONTENT_DECODING_FAILED errors in chrome and similar failures in IE.
    
    Modifications:
    
    Skip HTTP/1.0 messages
    
    Result:
    
    Be able to serve HTTP/1.0 as well when HttpContentEncoder is in the pipeline.

commit 78f6f07f994374f9965a35ba4cc0195681af0ddb
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jun 9 09:13:46 2016 +0200

    Correctly handle user home directory with spaces when construct javaagent argument
    
    Motivation:
    
    When the user home and so the path to the local maven repository contains spaces it currently fails to run the tests (at least on windows).
    
    Modifications:
    
    Put double quotes around the ${settings.localRepository}
    
    Result:
    
    Be able to run build and tests even when user home path has spaces in it.

commit f5eea4698d0bf3f0ce23ea07cad5c8474ce64fb7
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jun 13 09:04:41 2016 +0200

    Fix possible NPE in HttpCunkedInput if wrapped ChunkedInput.readChunk(...) return null.
    
    Motivation:
    
    Its completly fine for ChunkedInput.readChunk(...) to return null to indicate there is currently not any data to read. We need to handle this in HttpChunkedInput to not produce a NPE when constructing the HttpContent.
    
    Modifications:
    
    If readChunk(...) return null just return null as well.
    
    Result:
    
    No more NPE.

commit 8ccc795314f7c7591410ed5be78b8277e61f10b0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jun 13 11:02:37 2016 +0200

    Expose DefaultThreadFactory.threadGroup to sub-classes
    
    Motivation:
    
    DefaultThreadFactory allows to override the newThread(...) method and so should have access to all fields that are set via the constructor.
    
    Modifications:
    
    Change threadGroup from private to protected visibility.
    
    Result:
    
    Easier to extend DefaultThreadFactory.

commit 8f3a5e5b18d6e27281e3dba1d41e352065b129ad
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Jun 11 20:16:00 2016 +0200

    Fix typo in log message
    
    Motivation:
    
    We had a typo in the log message.
    
    Modifications:
    
    Remove extra "s" in log message.
    
    Result:
    
    Correct spelling in log message.

commit 418550914a8bb01a7eae060f89244ad32bf39318
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jun 9 09:28:47 2016 +0200

    Log Selector instance when Selector needs to be rebuild
    
    Motivation:
    
    To better debug why a Selector need to be rebuild it is useful to also log the instance of the Selector.
    
    Modifications:
    
    Add logger instance to the log message.
    
    Result:
    
    More useful log message.

commit 5e86325a8cb3bbe78440662290980c597c1a2d67
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Wed Jun 15 07:48:47 2016 -0700

    Remove unused method from native epoll
    
    Motivation:
    
    Unused methods create warnings on some C compilers.  It may not be feasible to selectively turn them off.
    
    Modifications:
    
    Remove createInetSocketAddress as it is unused.
    
    Result:
    
    Less noisy compilation

commit 3dbbf06e9bb611db6beb3c65c00204935c7d71fa
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Tue Jun 14 14:58:42 2016 -0700

    Fix typo in the assert description in MqttCodecTest
    
    Motivation:
    
    There is a spelling error in MqttCodecTest, where "bout got" shoud be "but got".
    
    Modifications:
    
    Replace the error spelling with correct one.
    
    Result:
    
    Fix typo in the assert description in MqttCodecTest.

commit 328a1ec01b29fef601ec645e915213573de18dc6
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jun 14 09:28:35 2016 -0700

    cleanup from 819b26b
    
    Motivation:
    I cherry-picked 819b26b too soon. There were entries added to a deprecated class which should only go into the non-deprecated version of the class.
    
    Modifications:
    - Remove the static final variables that were added as duplicates to the deprecated class
    
    Result:
    Deprecated code does not grown in volume without need.

commit 819b26b4bc7d116f184af3dd129a68a7fa936220
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Tue Jun 14 14:10:45 2016 +0200

    Add more HttpHeaders values
    
    Motivation:
    Some commons values are missing from HttpHeader values constants.
    
    Modifications:
    - Add constants for "application/json" Content-Type
    - Add constants for "gzip,deflate" Content-Encoding
    
    Result:
    More HttpHeader values constants available, both in
    `HttpHeaders.Values` and `HttpHeaderValues`.

commit fe569ea7a31f2a85393eea1bb4fd0b648a0d5a97
Author: Roger Kapsi <rkapsi@squarespace.com>
Date:   Mon Jun 13 12:56:32 2016 -0400

    Fix for a newly intrduced bug in #5377
    
    Motivation
    
    This bug was introduced with #5377 and affects only users who'd like to share/cache/re-use `PemPrivateKey` and `PemX509Certificate` instances.
    
    Modifications
    
    Use `ByteBuf#writeBytes(src, readerIndex, length)` so that the src's readerIndex doesn't change and can consequently be used more than once.
    
    Result
    
    It's possible to share/cache/re-use `PemPrivateKey` and `PemX509Certificate` instances as long as their refCnt remains >= 1.

commit 9bfeab2c8a802b24e867c8f1ba424969ce206903
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Mon Jun 13 15:09:05 2016 +0200

    AbstractBootstrap can crash instead of failing promise, close #5387
    
    Motivation:
    When `ChannelFactory#newChannel` crashed, `AbstractBootstrap#initAndRegister` propagates the exception to the caller instead of failing the promise.
    
    Modifications:
    - Catch exceptions from `ChannelFactory#newChannel`.
    - Notify promise of such failure.
    
    Result:
    `AbstractBootstrap` gracefully handles connect failures.

commit a7496ed83df3cf13c24fa9b5ce9494914fcd07ec
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Jun 10 11:31:42 2016 -0700

    FlowControlHandlerTest synchronization issues
    
    Motivation:
    2b6525856868ab1788db957ff8af8eb22b42c774 only partially addressed the synchronization issues that are present in FlowControlHandlerTest. A few tests are attempting to validate state changes made across an EventLoop thread and the JUnit thread but are not properly synchronized.
    
    Modifications:
    - Ensure that conditions which verify expectations set in another thread have synchronization gates to ensure the event has actually occurred.
    - Remove the message counter verification in favor of using individual CountDownLatch objects
    
    Result:
    FLowControlHanderTest has less race conditions which may lead to test failures.

commit eb1d9324667988ed0dcb39ce94a5de4c90ce8988
Author: Sina Tadayon <sina.tadayyon@gmail.com>
Date:   Wed Jun 8 01:56:02 2016 +0430

    Support WebSocket data chunked transfer
    
    Motivation:
    Support fetches data chunk by chunk for use with WebSocket chunked transfers.
    
    Modifications:
    Create a WebSocketChunkedInput.java that add to io.netty.handler.codec.http.websocketx package
    
    Result:
    The WebSocket transfers/fetches data chunk by chunk.

commit 428c61673bf5acd4f4807d950bb03e13d83f2223
Author: Dmitry Spikhalskiy <dmitry@spikhalskiy.com>
Date:   Wed Jun 8 16:51:34 2016 +0300

    Logs in invokeExceptionCaught have been made consistent and full
    
    Motivation:
    
    In case of exception in invokeExceptionCaught() only original exception passed to invokeExceptionCaught() will be logged on any log level.
    + AbstractChannelHandlerContext and CombinedChannelDuplexHandler log different exceptions.
    
    Modifications:
    
    Fix inconsistent logging code and add ability to see both stacktraces on DEBUG level.
    
    Result:
    
    Both handlers log now both original exception and thrown from invokeExceptionCaught. To see full stacktrace of exception thrown from invokeExceptionCaught DEBUG log level must be enabled.

commit b921f800579c95fe61c5c844423e0da146524759
Author: Guido Medina <gmedina@squaredfinancial.com>
Date:   Fri Jun 10 22:24:16 2016 +0100

    Make JCtools available (provided scope) for tests and optional OSGI, issue #5383

commit cc580e3ba162af434928f835befee85f0f6b9cba
Author: Roger Kapsi <rkapsi@squarespace.com>
Date:   Wed Jun 8 18:14:45 2016 -0400

    Let OpenSslContext take pre-encoded pkcs#8 private key/cert bytes
    
    Motivation
    
    OpenSslContext is expecting Java's PrivateKey and X509Certificate objects as input
    (for JdkSslContext API compatibility reasons) but doesn't really use them beyond
    turning them into PEM/PKCS#8 strings.
    
    This conversion can be entirely skipped if the user can pass in private keys and
    certificates in a format that Netty's OpenSSL code can digest.
    
    Modifications
    
    Two new classes have been added that act as a wrapper around the pre-encoded byte[]
    and also retain API compatibility to JdkSslContext.
    
    Result
    
    It's possible to pass PEM encoded bytes straight into OpenSSL without having to
    parse them (e.g. File to Java's PrivateKey) and then encode them (i.e. PrivateKey
    into PEM/PKCS#8).
    
    File pemPrivateKeyFile;
    byte[] pemBytes = readBytes(pemPrivateKeyFile);
    PemPrivateKey pemPrivateKey = PemPrivateKey.valueOf(pemBytes);
    
    SslContextBuilder.forServer(pemPrivateKey)
        .sslProvider(SslProvider.OPENSSL)

commit c3abb9146e47b1c8de5a26b7ae5076845fc80c28
Author: Guido Medina <gmedina@squaredfinancial.com>
Date:   Sun Mar 27 13:25:39 2016 +0100

    Use shaded dependency on JCTools instead of copy and paste
    
    Motivation:
    JCTools supports both non-unsafe, unsafe versions of queues and JDK6 which allows us to shade the library in netty-common allowing it to stay "zero dependency".
    
    Modifications:
    - Remove copy paste JCTools code and shade the library (dependencies that are shaded should be removed from the <dependencies> section of the generated POM).
    - Remove usage of OneTimeTask and remove it all together.
    
    Result:
    Less code to maintain and easier to update JCTools and less GC pressure as the queue implementation nt creates so much garbage

commit 398efb1f7186abb458fcc7463dbe900066aabbc9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jun 7 10:27:53 2016 +0200

    Ensure valid message sequence if channel is closed before receive headers.
    
    Motivation:
    
    When the channel is closed while we still decode the headers we currently not preserve correct message sequence. In this case we should generate an invalid message with a current cause.
    
    Modifications:
    
    Create an invalid message with a PrematureChannelClosureException as cause when the channel is closed while we decode the headers.
    
    Result:
    
    Correct message sequence preserved and correct DecoderResult if the channel is closed while decode headers.

commit 88dbd96376b7878bf4eec217da158419692fae17
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jun 8 15:57:47 2016 +0200

    [#5372] Ensure OpenSslClientContext / OpenSslServerContext can be garbage collected
    
    Motivation:
    
    OpenSslClientContext / OpenSslServerContext can never be garbage collected as both are part of a reference to a callback that is stored as global reference in jni code.
    
    Modifications:
    
    Ensure the callbacks are static and so not hold the reference.
    
    Result:
    
    No more leak due not collectable OpenSslClientContext / OpenSslServerContext

commit 52bbfd3310aaa45996673749c66b3137893c5849
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Jun 6 14:51:05 2016 -0700

    epoll_wait timeout reset when called multiple times
    
    Motivation:
    epoll_wait accepts a timeout argument which will specify the maximum amount of time the epoll_wait will wait for an event to occur. If the epoll_wait method returns for any reason that is not fatal (e.g. EINTR) the original timeout value is re-used. This does not honor the timeout interface contract and can lead to unbounded time in epoll_wait.
    
    Modifications:
    - The time taken by epoll_wait should be decremented before calling epoll_wait again, and if the remaining time is exhausted we should return 0 according to the epoll_wait interface docs http://man7.org/linux/man-pages/man2/epoll_wait.2.html
    - link librt which is needed for some platforms to use clock_gettime
    
    Result:
    epoll_wait will wait for at most timeout ms according to the epoll_wait interface contract.

commit 56a2f64665494ee0d52fba7f391de0bea6144e29
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Jun 6 11:58:02 2016 -0700

    Clarify Future.removeListener[s] javaDocs
    
    Motivation:
    The javaDocs for Future.removeListener do not clarify that only the first occurrence of the listener is guaranteed to be removed.
    
    Modifications:
    - Clarify the javaDocs for Future.removeListener[s] so it is known that the only the first occurrence of the listener will be removed.
    
    Result:
    Fixes https://github.com/netty/netty/issues/5351

commit 783567420fd8109f172b5ab3f299ef750bac8805
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri May 27 20:52:56 2016 -0700

    OpenSslEngine encrypt more data per wrap call
    
    Motivation:
    OpenSslEngine.wrap will only encrypt at most 1 buffer per call. We may be able to encrypt multiple buffers per call.
    
    Modifications:
    - OpensslEngine.wrap should continue encrypting data until there is an error, no more data, or until the destination buffer would be overflowed.
    
    Result:
    More encryption is done per OpenSslEngine.wrap call

commit 829be86223c8ac92c8eb0396dce10c2b915f54c8
Author: Jon Chambers <jon.chambers@gmail.com>
Date:   Tue Jun 7 21:58:46 2016 -0400

    Use a default resolver with bootstrap.resolver(null).
    
    Motivation:
    
    `Bootstrap` has a notion of a default resolver group, but it's hidden from the public. To allow callers to reset a `Bootstrap` instance's resolver group, we could either make `DEFAULT_RESOLVER` public, or we could allow callers to pass `null` as an argument to `Bootstrap#resolver(AddressResolverGroup<?>)`. This pull request does the latter.
    
    Modifications:
    
    - Allow `Bootstrap#resolver(AddressResolverGroup<?>)` to accept `null` as an argument
    
    Result:
    
    Callers may pass `null` to `Bootstrap#resolver(AddressResolverGroup<?>)` to cause the `Bootstrap` instance to use its default resolver group.

commit 4dec7f11b73a15c5ee97a3af4d775c2a457a9f81
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jun 7 18:52:34 2016 +0200

    [maven-release-plugin] prepare for next development iteration

commit cf670fab75ad3c77d6b37883104b259894d4bd71
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jun 7 18:52:22 2016 +0200

    [maven-release-plugin] prepare release netty-4.1.1.Final

commit 9e2c400f89c5badc39919f811179d3d42ac5257c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri May 27 20:52:56 2016 -0700

    OpenSslEngine writePlaintextData WANT_READ with no data in BIO buffer
    
    Motivation:
    CVE-2016-4970
    
    OpenSslEngine.wrap calls SSL_write which may return SSL_ERROR_WANT_READ, and if in this condition there is nothing to read from the BIO the OpenSslEngine and SslHandler will enter an infinite loop.
    
    Modifications:
    - Use the error code provided by OpenSSL and go back to the EventLoop selector to detect if the socket is closed
    
    Result:
    OpenSslEngine correctly handles the return codes from OpenSSL and does not enter an infinite loop.

commit a14eda7db055cbe3b32dc34370701c841879d2ae
Author: Yuri Schimke <yuri@schimke.ee>
Date:   Mon Jun 6 16:15:19 2016 -0700

    typo: Skelton

commit 79f2e3604e4c2f1ff6ed6edf04e660c3f46e0200
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jun 1 14:42:17 2016 -0700

    HTTP/2 close only send GO_AWAY if one has not already been sent
    
    Motivation:
    Http2ConnectionHandler will always send a GO_AWAY when the channel is closed. This may cause problems if the user is attempting to control when GO_AWAY is sent and the content of the GO_AWAY.
    
    Modifications:
    - When the channel is closed Http2ConnectionHandler should only send a GO_AWAY if one has not already been sent
    
    Result:
    The user has more control over when GO_AWAY is sent
    Fixes https://github.com/netty/netty/issues/5307

commit b461c9d54c40b79403d21aa6980ae4c4abcb3283
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 12 22:00:38 2016 +0200

    Allow to specify a custom EventExecutorChooserFactory. Related to [#1230]
    
    Motivation:
    
    Sometimes it may be benefitially for an user to specify a custom algorithm when choose the next EventExecutor/EventLoop.
    
    Modifications:
    
    Allow to specify a custom EventExecutorChooseFactory that allows to customize algorithm.
    
    Result:
    
    More flexible api.

commit 7137d22994bb1b477cb1ed918bc76d4173f26bde
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jun 3 15:21:28 2016 +0200

    Ensure the correct wrapped buffer is released in AbstractPooledDerivedByteBuf.deallocate()
    
    Motivation:
    
    We need to first store a reference to the wrapped buffer before recycle the AbstractPooledDerivedByteBuf instance. This is needed as otherwise it is possible that the same AbstractPooledDerivedByteBuf is again obtained and init(...) is called before we actually have a chance to call release(). This leads to call release() on the wrong buffer.
    
    Modifications:
    
    Store a reference to the wrapped buffer before call recycle and call release on the previous stored reference.
    
    Result:
    
    Always release the correct wrapped buffer when deallocate the AbstractPooledDerivedByteBuf.

commit ee5969edfd26c3bec7302d283323d669f6db1cf7
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri May 27 21:34:36 2016 +0200

    Use higher maxQueriesPerResolve and make exception message more clear.
    
    Motivation:
    
    We use a default of 3 for maxQueriesPerResolve when using the DnsNameResolverBuilder, which is too low if you want to resolve a hostname that uses a lot of CNAME records.
    
    Modifications:
    
    - Use higher default (16)
    - Make exception message more clear why it failed.
    
    Result:
    
    Be able to resolve more domains by default and be able to better trouble shoot why a resolver failed.

commit 584fbac6ed7a0b58068bd0acf8ac784a572274ad
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jun 1 15:59:34 2016 +0200

    [#3419] Only use SecureRandom to generate initialSeed if requested
    
    Motivation:
    
    We tried to always use SecureRandom to generate the initialSeed for our ThreadLocalRandom, this can sometimes give warnings under normal usage. We should better not use SecureRandom as default (just as the implementation in jsr166y does) and only try if the user specified -Djava.util.secureRandomSeed=true .
    
    Modifications:
    
    Only try to use SecureRandom when -Djava.util.secureRandomSeed=true is used.
    
    Result:
    
    Less likely to see entropy warnings.

commit 3a7dcde32099fad6e600d2eebfda9250006d587e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 23 13:56:21 2016 +0200

    [#5224] Allow to use Unsafe.reallocateMemory(...) in UnpooledUnsafeNoCleanerDirectByteBuf.
    
    Motivation:
    
    If the user uses unsafe direct buffers with no cleaner we can use Unsafe.reallocateMemory(...) as optimization when we need to expand the buffer.
    
    Modifications:
    
    Use Unsafe.relocateMemory(...) in UnpooledUnsafeNoCleanerDirectByteBuf.
    
    Result:
    
    Less expensive expanding of buffers.

commit 9bd94ea021b9e43ca2318eeda6640b19e93b12c8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 31 08:39:28 2016 +0200

    Make DnsAddressResolverGroup easier to extend
    
    Motivation:
    
    DnsAddressResolverGroup allows to override the newResolver(...) method to change the settings used by the user. We should better let the user override another method and always apply the InflightNameResolver.
    
    Modifications:
    
    - Mark newResolver(...) method as deprecated, we will make it private soon.
    - Add newNameResolver(...) method that user can override.
    
    Result:
    
    Easier to extend DnsAddressResolverGroup

commit dc816e9807e551f8a80027569407d4e812ad748b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jun 3 15:12:32 2016 +0200

    Ensure we null out cumulation buffer before fire through the pipeline in handlerRemoved(...)
    
    Motivation:
    
    We should ensure we null out the cumulation buffer before we fire it through the pipleine in handlerRemoved(...) as in theory it could be possible that another method is triggered as result of the fireChannelRead(...) or fireChannelReadComplete() that will try to access the cumulation.
    
    Modifications:
    
    Null out cumulation buffer early in handlerRemoved(...)
    
    Result:
    
    No possible to access the cumulation buffer that was already handed over.

commit e847ac0443ea1d7996b392d9adcfcd06e4094b78
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 30 20:45:37 2016 +0200

    Fix possible deadlock in DefaultChannelPipeline.destroyDown(...)
    
    Motivation:
    
    We need to ensure we not hold a lock while executor callHandlerRemoved(...) as this may lead to a deadlock if handlerRemoved(...) will call another method in DEfaultChannelPipeline from another thread that will need to obtain the lock as well and wait for the result.
    
    Modifications:
    
    Release the lock before call handlerRemoved0(...).
    
    Result:
    
    No more deadlock possible

commit f8b306f61c682455390cf09d253a8b334d167d36
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri May 27 19:42:31 2016 +0200

    [#5313] Correctly catch errors during bootstrap.
    
    Motivation:
    
    We not correctly catched errors during resolving in bootstrap and so may not have notified the future correctly.
    
    Modifications:
    
    Move code into try / catch block and try to fail the promise.
    
    Result:
    
    Promise is always notified

commit 0b8a647f4eeff161f7914afe6de2eed8292f7dde
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 31 22:18:43 2016 +0200

    Fix harmless typo in native code
    
    Motivation:
    
    We used transfered in native code which is not correct spelling. It should be transferred.
    
    Modifications:
    
    Fix typo.
    
    Result:
    
    Less typos in source code.

commit f7cf00cb5f20cc42ae963eef395ebeefc2ab93ec
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Jun 2 23:03:58 2016 -0700

    OpenSslEngine remove unecessary rejectRemoteInitiatedRenegation call
    
    Motivation:
    OpenSslEngine calls rejectRemoteInitiatedRenegation in a scenario where the number of handshakes has not been observed to change. The number of handshakes has only been observed to change after readPlaintextData is called.
    
    Modifications:
    - Remove the call to rejectRemoteInitiatedRenegation before calls to readPlaintextData
    
    Result:
    Less code.

commit 6fb5b14ef59b2188174d1286730bd818cbb99bb6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 30 11:27:20 2016 +0200

    [#5308] Ensure InetSocketAddressResolver.close() will close the wrapped NameResolver.
    
    Motivation:
    
    InetSocketAddressResolver.close() must call close() on the wrapped NameResolver.
    
    Modifications:
    
    Correctly call close() on wrapped NameResolver and added test.
    
    Result:
    
    close() is correctly propergated to the wrapped resolver.

commit 3d29bcfc8ddeda50e0bff0234d0c5240f404ddb5
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 23 11:59:55 2016 +0200

    Allow to create Unsafe ByteBuf implementations that not use a Cleaner to clean the native memory.
    
    Motivation:
    
    Using the Cleaner to release the native memory has a few drawbacks:
    
    - Cleaner.clean() uses static synchronized internally which means it can be a performance bottleneck
    - It put more load on the GC
    
    Modifications:
    
    Add new buffer implementations that can be enabled with a system flag as optimizations. In this case no Cleaner is used at all and the user must ensure everything is always released.
    
    Result:
    
    Less performance impact by direct buffers when need to be allocated and released.

commit f6ad9df8acfad15e2a0986d9d2c91730f138163d
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed May 25 12:52:09 2016 -0700

    DefaultPromise StackOverflowError protection updates
    
    Modifications:
    DefaultPromise provides a ThreadLocal queue to protect against StackOverflowError because of executors which may immediately execute runnables instead of queue them (i.e. ImmediateEventExecutor). However this may be better addressed by fixing these executors to protect against StackOverflowError instead of just fixing for a single use case. Also the most commonly used executors already provide the desired behavior and don't need the additional overhead of a ThreadLocal queue in DefaultPromise.
    
    Modifications:
    - Remove ThreadLocal queue from DefaultPromise
    - Change ImmediateEventExecutor so it maintains a queue of runnables if reentrant condition occurs
    
    Result:
    DefaultPromise StackOverflowError code is simpler, and ImmediateEventExecutor protects against StackOverflowError.

commit af7b0a04a03f5e93a7705b40df492fed59bcc2fe
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Thu Jun 2 15:41:37 2016 +0200

    Fix DefaultHeaders.toString() for keys with multiple values.
    
    Motivation:
    
    For example,
    
    DefaultHttp2Headers headers = new DefaultHttp2Headers();
    headers.add("key1", "value1");
    headers.add("key1", "value2");
    headers.add("key1", "value3");
    headers.add("key2", "value4");
    
    produces:
    
    DefaultHttp2Headers[key1: value1key1: value2key1: value3, key2: value4]
    
    while correctly it should be
    
    DefaultHttp2Headers[key1: value1, key1: value2, key1: value3, key2: value4]
    
    Modifications:
    
    Change the toString() method to produce the beforementioned output.
    
    Result:
    
    toString() format is correct also for keys with multiple values.

commit e200e4811b69cc74f97d485843cc4d35ca11b56a
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jun 1 18:45:46 2016 -0700

    SocketRstTest fails due to exception message check
    
    Motivation:
    For lack of a better way the SocketRstTest inspects the content of the exception message to check if a RST occurred. However on windows the exception message is different than on other Unix based platforms and the assertion statement fails.
    
    Modifications:
    - Hack another string check in the unit test
    
    Result:
    SocketRstTest passes on windows
    Fixes https://github.com/netty/netty/issues/5335

commit bbed330468b5b82c9e4defa59012d0fcdb70f1aa
Author: Alex Petrov <oleksandr.petrov@gmail.com>
Date:   Tue May 31 23:48:04 2016 +0200

    Fix the possible reference leak in Recycler
    
    Motivation:
    
    Under very unlikely (however possible) circumstances, Recycler may leak
    references. This happens _only_ when the object was already recycled
    at least once (which means it's got written to the stack) and then
    taken out again, and never returned.
    
    The "never returned" part may be the fault of the user (forgotten
    `finally` clause) or the situation when Recycler drops the possibly
    youngest item itself.
    
    Modifications:
    
    Nullify the item taken from the stack.
    
    Result:
    
    Reference is cleaned up. If the object is lost, it will be a subject for
    GC. The rest of Stack / Recycler functionality remains unaffected.

commit 1dfcfc17fabb065fa87f8c2f7c2b25a653d24cb2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed May 25 15:41:21 2016 +0200

    Allow to change link capacity via system property
    
    Motivation:
    
    Sometimes people may want to trade GC with memory overhead. For this it can be useful to allow to change the capacity of the array that is hold in the Link that is used by the Recycler internally.
    
    Modifications:
    
    Introduce a new system property , io.netty.recycler.linkCapacity which allows to change the capcity.
    
    Result:
    
    More flexible configuration of netty.

commit c43b424f56ef013fce638c647e8367796ff90ae4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 31 14:05:03 2016 +0200

    Add missing null check that was missed in 844976a0a2a940eb28293e3f74bc133cbbde0bac

commit 844976a0a2a940eb28293e3f74bc133cbbde0bac
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun May 22 20:02:38 2016 +0200

    Ensure the same ByteBufAllocator is used in the EmbeddedChannel when compress / decompress. Related to [#5294]
    
    Motivation:
    
    The user may specify to use a different allocator then the default. In this case we need to ensure it is shared when creating the EmbeddedChannel inside of a ChannelHandler
    
    Modifications:
    
    Use the config of the "original" Channel in the EmbeddedChannel and so share the same allocator etc.
    
    Result:
    
    Same type of buffers are used.

commit 4c186c4c41d6eaa55086e4017fb6e3b4af13397f
Author: Milos Fabian <milfabia@cisco.com>
Date:   Sat May 7 20:41:19 2016 +0100

    Make netty-transport-native-epoll-*-linux-x86_64.jar working in OSGi
    
    Motivation:
    
    Currenlty, netty-transport-native-epoll-*-linux-x86_64.jar is not packed as OSGi bundle
    and thus not working in OSGi environment.
    
    Modifications:
    
    In netty-transport-native-epoll's pom.xml added configuration
    to attach manifest to the jar with a native library.
    In netty-common's pom.xml added configuration instruction (DynamicImport-Package)
    to maven bnd plugin to make sure the native code is loaded from
    netty-transport-native-epoll bundle.
    
    Result:
    
    The netty-transport-native-epoll-*-linux-x86_64.jar is a bundle (MANIFEST.MF attached)
    and the inluced native library can be successfuly loaded in OSGi environment.
    Fixing #5119

commit db6b72da199f80c64d19d2d9bb1dfeec281dfd50
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 23 14:53:31 2016 +0200

    Add optimized version of setZero(...) / writeZero(...) for Unsafe*ByteBuf implementations
    
    Motivation:
    
    Unsafe offers a method to set memory to a specific value. This can be used to implement an optimized version of setZero(...) and writeZero(...)
    
    Modifications:
    
    Add implementation for all Unsafe*ByteBuf implementations.
    
    Result:
    
    Faster setZero(...) and writeZero(...)

commit 339b512e70caa562dc36aae769ac720c22d91699
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 30 11:02:41 2016 +0200

    Fix small race in DefaultChannelPipeline introduced by a729e0fcd94009905d219665bdd069eb31433b7c
    
    Motivation:
    
    There is a small race while adding handlers to the pipeline because callHandlerAddedForAllHandlers() may not be run when the user calls add* but the Channel is already registered.
    
    Modifications:
    
    Ensure we always delay handlerAdded(..) / handlerRemoved(...) until callHandlerAddedForAllHandlers() was called.
    
    Result:
    
    No more race on pipeline modifications possible.

commit dcd93e3be026a312939b5c895bcb484d25776f78
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed May 25 16:20:07 2016 +0200

    Remove volatile where not needed.
    
    Motivation:
    
    We can remove the volatile keyword from the cached Runnables as at worse these will just be re-created.
    
    Modifications:
    
    Remove volatile.
    
    Result:
    
    Less overhead.

commit 528b83e27738af887955665a0ba82e081c7d8729
Author: floragunn <dev@search-guard.com>
Date:   Sat May 28 11:00:59 2016 +0200

    Set the session id context properly to make client authentication work with open ssl provider.
    
    Motivation:
    
    When netty is used with open ssl provider and client authentication the following errors can occur:
    error:140D9115:SSL routines:ssl_get_prev_session:session id context uninitialized
    error:140A1175:SSL routines:ssl_bytes_to_cipher_list:inappropriate fallback
    error:140760FC:SSL routines:SSL23_GET_CLIENT_HELLO:unknown protocol
    
    Modifications:
    
    Set the session id context in OpenSslServerContext so that sessions which use client authentication
    which are cached have the same context id value.
    
    Result:
    
    Client authentication now works with open ssl provider.

commit 86f53083e75a525ebd9f53c863da596fbd6c9961
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 23 08:59:59 2016 +0200

    [#5297] Ensure calling NioEventLoop.pendingTasks() and EpollEventLoop.pendingTasks() will not produce livelock
    
    Motivation:
    
    SingleThreadEventExecutor.pendingTasks() will call taskQueue.size() to get the number of pending tasks in the queue. This is not safe when using MpscLinkedQueue as size() is only allowed to be called by a single consumer.
    
    Modifications:
    
    Ensure size() is only called from the EventLoop.
    
    Result:
    
    No more livelock possible when call pendingTasks, no matter from which thread it is done.

commit 3b72ee0fd02d89c23e53611a6a01f7840dd30283
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Fri May 27 13:11:28 2016 -0700

    Add includeScope to not include test dependencies for maven-dependency-plugin
    
    Motivation:
    
    maven-dependency-plugin will include dependencies of all scopes by default. We should limit the scope to avoid pulling test dependencies. See #5317.
    
    Modifications:
    
    Add includeScope to avoid pulling test dependencies.
    
    Result:
    
    netty-all doesn't include codes from netty-build

commit 6ca49d133693fc583e439f87ac91874bd602a21f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed May 25 19:16:44 2016 +0200

    [maven-release-plugin] prepare for next development iteration

commit 446b38db5220a3934064ee4e26f40d81dfa6b714
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed May 25 19:14:15 2016 +0200

    [maven-release-plugin] prepare release netty-4.1.0.Final

commit 79a06eaede237e28ef72e9e4c72c9e8615967a87
Author: nmittler <nathanmittler@google.com>
Date:   Wed May 25 08:58:40 2016 -0700

    Fix NPE in Http2ConnectionHandler.onHttpServerUpgrade
    
    Motivation:
    
    Performing a server upgrade with a new initial flow control window will cause an NPE in the DefaultHttp2RemoteFlowController. This is due to the fact that the monitor does not check whether or not the channel is writable.
    
    Modifications:
    
    Added a check for channel writability before calling `writePendingBytes`. Also fixed a unit test that was supposed to be testing this :).
    
    Result:
    
    Fixes #5301

commit b3c56d5f694b281f986916cbe623be1cba258c11
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon May 23 18:36:35 2016 -0700

    DefaultPromise StackOverflowError protection
    
    Motivation:
    f2ed3e6ce8039d142e4c047fcc9cf09409105243 removed the previous mechanism for StackOverflowError because it didn't work in all cases (i.e. ImmediateExecutor). However if a chain of listeners which complete other promises is formed there is still a possibility of a StackOverflowError.
    
    Modifications:
    - Use a ThreadLocal to save any DefaultPromises which could not be notified due to the stack being too large. After the first DefaultPromise on the stack completes notification this ThreadLocal should be used to notify any DefaultPromises which have not yet been notified.
    
    Result:
    DefaultPromise has StackOverflowError protection that works with all EventExecutor types.

commit f5d58e2e1ae8f3eae8e69fb67aff4544bab50ee3
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon May 23 09:46:03 2016 -0700

    DefaultPromise concurrency bug
    
    Motivation:
    If the executor changes while listeners are added and notification of listeners is being done then listeners can be notified out of order and concurrently. We should ensure that only one executor is used at any given time to notify listeners and ensure the listeners are notified in FIFO order.
    
    Modifications:
    - Move the notifyingListeners member variable from DefaultPromise into the synchronized block to prevent concurrent notification of listeners and preserve FIFO notification order
    
    Result:
    If the executor is changed for a DefaultPromise the listener notification order should be FIFO.

commit 2618c2a649772624bb6011e5e63455c3c81be0b0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 23 19:01:15 2016 +0200

    [#5239] Allow adding handlers to pipeline with null name.
    
    Motivation:
    
    While doing 8fe3c83e4ca9a64c03f5adcb9f056d9e9440a389 I made a change which disallowed using null as name for handlers in the pipeline (this generated a new name before).
    
    Modifications:
    
    Revert to old behaviour and adding test case.
    
    Result:
    
    Allow null name again

commit 26a175cd94c50aebdd3bdcba8e3cd0a30f664870
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun May 22 19:33:48 2016 +0200

    Fix flacky test which was missed when commit 8fe3c83e4ca9a64c03f5adcb9f056d9e9440a389

commit 06d76eeea4667a5b9a64ea892bf2865e30408ea0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri May 20 18:24:16 2016 +0200

    Update tcnative version
    
    Motivation:
    
    Previous tcnative version had a bug with the uberjar on windows.
    
    Modifications:
    
    Update version.
    
    Result:
    
    Depend on latest tcnative version.

commit 7b25402e80979a075387fae5a55cf99fe1ada425
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 17 14:19:33 2016 +0200

    Add CompositeByteBuf.addComponent(boolean ...) method to simplify usage
    
    Motivation:
    
    At the moment the user is responsible to increase the writer index of the composite buffer when a new component is added. We should add some methods that handle this for the user as this is the most popular usage of the composite buffer.
    
    Modifications:
    
    Add new methods that autoamtically increase the writerIndex when buffers are added.
    
    Result:
    
    Easier usage of CompositeByteBuf.

commit a5006c1969e6bfab2d78699de190441e518f34b8
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Mon May 9 18:50:39 2016 -0700

    Add a EventLoopGroup.register(ChannelPromise)
    
    Motivation:
    
    EventLoopGroup.register doesn't need the Channel paramter when ChannelPromise is provided as we can get the Channel from ChannelPromise. Resolves #2422.
    
    Modifications:
    
    - Add EventLoopGroup.register(ChannelPromise)
    - Deprecate EventLoopGroup.register(Channel, ChannelPromise)
    
    Result:
    
    EventLoopGroup.register is more convenient as people only need to set one parameter.

commit a729e0fcd94009905d219665bdd069eb31433b7c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri May 20 12:05:32 2016 +0200

    Decouple DefaultChannelPipeline from AbstractChannel
    
    Motivation:
    
    DefaultChannelPipeline was tightly coupled to AbstractChannel which is not really needed.
    
    Modifications:
    
    Move logic of calling handlerAdded(...) for handlers that were added before the Channel was registered to DefaultChannelPipeline by making it part of the head context.
    
    Result:
    
    Less coupling and so be able to use DefaultChannelPipeline also with other Channel implementations that not extend AbstractChannel

commit 0838f223e1cd63539eae2828ce4d883d9a58925f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri May 20 11:13:07 2016 +0200

    Decouple AbstractChannel and AbstractChannelHandlerContext
    
    Motivation:
    
    We do a "blind" cast to AbstractChannel in AbstractChannelHandlerContext which we should better no do. It would be better to decouble AbstractChannelHandlerContext from AbstractChannel.
    
    Modifications:
    
    Decouble AbstractChannelHandlerContext from AbstractChannel by move logic to DefaultChannelPipeline
    
    Result:
    
    Less coubling and less casting.

commit 7547a448e00e4766108baa7ee21886647dee5b52
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri May 20 09:07:53 2016 +0200

    [#4906] Ensure addLast(...) works as expected in EmbeddedChannel
    
    Motivation:
    
    If the user will use addLast(...) on the ChannelPipeline of EmbeddedChannel after its constructor was run it will break the EmbeddedChannel as it will not be able to collect inbound messages and exceptions.
    
    Modifications:
    
    Ensure addLast(...) work as expected by move the logic of handling messages and exceptions ti protected methods of DefaultChannelPipeline and use a custom implementation for EmbeddedChannel
    
    Result:
    
    addLast(...) works as expected when using EmbeddedChannel.

commit 2a14f749796ad754ab43d89e69f55ea44ee758a6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 17 15:03:57 2016 +0200

    Ensure all methods are correctly override in *LeakAware*ByteBuf implementations
    
    Motivation:
    
    We missed to override a few methods and so some actions on the ByteBuf failed.
    
    Modifications:
    
    - Override all methods
    - Add unit tests to ensure all is fixed.
    
    Result:
    
    All *LeakAware*ByteBuf have correct implementations

commit e10dca76017fee3bcea251f28933c16f4238ad52
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 17 09:31:58 2016 +0200

    Mark Recycler.recycle(...) deprecated and update usage.
    
    Motivation:
    
    Recycler.recycle(...) should not be used anymore and be replaced by Handle.recycle().
    
    Modifications:
    
    Mark it as deprecated and update usage.
    
    Result:
    
    Correctly document deprecated api.

commit d41f0764190c7e24d44eadeeb87471400e3580ae
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri May 20 10:44:29 2016 +0200

    Add more tests for PoolArenaMetric
    
    Motivation:
    
    We should add some more tests for PoolarenaMetric
    
    Modifications:
    
    Add more tests
    
    Result:
    
    Better test coverage for metrics

commit 2e352b75ac249b334459dabcab4a5e7030b4080f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri May 20 11:27:25 2016 +0200

    Remove unused class
    
    Motivation:
    
    We should remove unused classes that are package-private
    
    Modifications:
    
    Remove unused class
    
    Result:
    
    Less cruft in code-base.

commit b83ffcc4471ce5cc68b39fc3545853ac5e2a5f1b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 17 18:23:29 2016 +0200

    Add timeout to PooledByteBufAllocatorTest
    
    Motivation:
    
    Some tests in PooledByteBufAllocatorTest are blocking on a CountDownLatch. We should use a timeout on these tests so these will not block forever on a failure.
    
    Modifications:
    
    Add timeout param to @Test annotation
    
    Result:
    
    Have sane timeouts on tests.

commit 43e91c2476e19f58744edb1263a79e8d3e67bc47
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri May 13 18:47:01 2016 +0200

    Correctly implement DefaultByteBufHolder.equals(...) and hashCode()
    
    Motivation:
    
    DefaultByteBufHolder.equals(...) and hashCode() should be implemented so it works correctly with instances that share the same content.
    
    Modifications:
    
    Add implementations and a unit-test.
    
    Result:
    
    Have correctly working equals(...) and hashCode() method

commit e59d0e9efb8d1d18a07465c53d0356373be55b6d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 3 16:43:47 2016 +0200

    Introduce CodecOutputList to reduce overhead of encoder/decoder
    
    Motivation:
    
    99dfc9ea799348430a1c25776ce30a95bc10a1ff introduced some code that will more frequently try to forward messages out of the list of decoded messages to reduce latency and memory footprint. Unfortunally this has the side-effect that RecycleableArrayList.clear() will be called more often and so introduce some overhead as ArrayList will null out the array on each call.
    
    Modifications:
    
    - Introduce a CodecOutputList which allows to not null out the array until we recycle it and also allows to access internal array with extra range checks.
    - Add benchmark that add elements to different List implementations and clear them
    
    Result:
    
    Less overhead when decode / encode messages.
    
    Benchmark                                     (elements)   Mode  Cnt         Score        Error  Units
    CodecOutputListBenchmark.arrayList                     1  thrpt   20  24853764.609 ± 161582.376  ops/s
    CodecOutputListBenchmark.arrayList                     4  thrpt   20  17310636.508 ± 930517.403  ops/s
    CodecOutputListBenchmark.codecOutList                  1  thrpt   20  26670751.661 ± 587812.655  ops/s
    CodecOutputListBenchmark.codecOutList                  4  thrpt   20  25166421.089 ± 166945.599  ops/s
    CodecOutputListBenchmark.recyclableArrayList           1  thrpt   20  24565992.626 ± 210017.290  ops/s
    CodecOutputListBenchmark.recyclableArrayList           4  thrpt   20  18477881.775 ± 157003.777  ops/s
    
    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 246.748 sec - in io.netty.handler.codec.CodecOutputListBenchmark

commit a425a8551db1008f007003d00ac924cd26af0d92
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 9 10:57:35 2016 +0200

    [#5174] Expose Bootstrap getter methods and add some additional ones
    
    Motivation:
    
    The Bootstrap class (applies also to AbstractBootstrap and ServerBootstrap) has a few package private getter methods and some things such as #attr() and #options() aren't exposed at all.
    
    Modifications:
    
    Expose "getters" for configured things in a safe-manner via the config() method.
    
    Result:
    
    Easier for the user to check what is configured for a Bootstrap/ServerBootstrap.

commit da46928950c3b5defdc7e871614c2dea2d67af7d
Author: Trustin Lee <t@motd.kr>
Date:   Wed May 18 19:26:28 2016 +0900

    Fix NPE when creating DomainNameMapping via a builder

commit f11a35af3217aaa2b657438b7f319d30d36861f4
Author: Trustin Lee <t@motd.kr>
Date:   Wed May 18 18:30:20 2016 +0900

    Replace DomainMappingBuilder with DomainNameMappingBuilder
    
    Motivation:
    
    DomainMappingBuilder should have been named as DomainNameMappingBuilder
    because it builds a DomainNameMapping.
    
    Modifications:
    
    - Add DomainNameMappingBuilder that does the same job with
      DomainMappingBuilder
    - Deprecate DomainMappingBuilder and delegate its logic to
      DomainNameMappingBuilder
    - Remove the references to the deprecated methods and classes related
      with domain name mapping
    - Miscellaneous:
      - Fix Javadoc of DomainNameMapping.asMap()
      - Pre-create the unmodifiable map in DomainNameMapping
    
    Result:
    
    - Consistent naming
    - Less use of deprecated API

commit ea1f60dbf06cf7ab8618afff74e55dec344c3620
Author: Trustin Lee <t@motd.kr>
Date:   Wed May 18 18:07:53 2016 +0900

    Replace DomainNameMapping.entries() with asMap()
    
    Motivation:
    
    DomainNameMapping.entries() returns Set<Map.Entry<String, V>>, which
    doesn't sound very natural.
    
    Modifications:
    
    Replace entries() with asMap() which returns a Map<String, V> instead.
    
    Result:
    
    - Better looking API
    - User can do a lookup because it's a Map

commit 55dd7d035fad00ef8681b0007eade6232f832e3a
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Tue May 17 19:05:29 2016 -0700

    Fix a class loader leak in ForkJoinPool
    
    Motivation:
    
    As reported in #4211, when using Netty in Tomcat (or other container based deployment), ForkJoinPool leaks an instance of `Submitter` so that the class loader of `Submitter` won't be GCed. However, since `Submitter` is just a wrapper of `int`, we can replace it with `int[1]`.
    
    Modifications:
    
    Replace `Submitter` with `int[1]`.
    
    Result:
    
    No class loader leak in ForkJoinPool when using in a container.

commit 2b340df452d5ec282b7cefd15f887f31604b9425
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Apr 28 10:56:49 2016 -0700

    DuplexChannel to support shutdownInput
    
    Motivation:
    The DuplexChannel is currently incomplete and only supports shutting down the output side of a channel. This interface should also support shutting down the input side of the channel.
    
    Modifications:
    - Add shutdownInput and shutdown methods to the DuplexChannel interface
    - Remove state in NIO and OIO for tracking input being shutdown independent of the underlying transport's socket type. Tracking the state independently may lead to inconsistent state.
    
    Result:
    DuplexChannel supports shutting down the input side of the channel
    Fixes https://github.com/netty/netty/issues/5175

commit 1cb706ac932bab732257e02fc095d91ff7ed3788
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue May 10 09:09:37 2016 -0700

    HTTP/2 HPACK Header Name Validation and Trailing Padding
    
    Motivation:
    The HPACK code currently disallows empty header names. This is not explicitly forbidden by the HPACK RFC https://tools.ietf.org/html/rfc7541. However the HTTP/1.x RFC https://tools.ietf.org/html/rfc7230#section-3.2 and thus HTTP/2 both disallow empty header names, and so this precondition check should be moved from the HPACK code to the protocol level.
    HPACK also requires that string literals which are huffman encoded must be treated as an encoding error if the string has more than 7 trailing padding bits https://tools.ietf.org/html/rfc7541#section-5.2, but this is currently not enforced.
    
    Result:
    - HPACK to allow empty header names
    - HTTP/1.x and HTTP/2 header validation should not allow empty header names
    - Enforce max of 7 trailing padding bits
    
    Result:
    Code is more compliant with the above mentioned RFCs
    Fixes https://github.com/netty/netty/issues/5228

commit a517cce92fee24f2967bba7c84eea835b79fcab1
Author: Trustin Lee <t@motd.kr>
Date:   Tue May 17 19:58:08 2016 +0900

    Do not send duplicate DNS queries when the same query is in progress already
    
    Related issue: #5179
    
    Motivation:
    
    When you attempt to make a lot of connection attempts to the same target
    host at the same time and our DNS resolver does not have a record for it
    in the cache, the DNS resolver will send as many DNS queries as the
    number of connection attempts.
    
    As a result, DNS server will reject or drop the requests, making the
    name resolution attempt fail.
    
    Modifications:
    
    - Add InflightNameResolver that keeps the list of name resolution
      queries and subscribes to the future of the matching query instead of
      sending a duplicate query.
    
    Result:
    
    - The AddressResolvers created by DnsAddressResolverGroup do not send
      duplicate DNS queries anymore

commit 8fe3c83e4ca9a64c03f5adcb9f056d9e9440a389
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Apr 9 21:38:45 2016 +0200

    [#5104] Fix possible deadlock in DefaultChannelPipeline
    
    Motivation:
    
    When a user has multiple EventLoops in an EventLoopGroup and calls pipeline.add* / remove* / replace from an EventLoop that belongs to another Channel it is possible to deadlock if the other EventLoop does the same.
    
    Modification:
    
    - Only ensure the actual modification takes place in a synchronized block and not wait until the handlerAdded(...) / handlerRemoved(...) method is called. This is ok as we submit the task to the executor while still holding the look and so ensure correct order of pipeline modifications.
    - Ensure if an AbstractChannelHandlerContext is put in the linked-list structure but the handlerAdded(...) method was not called we skip it until handlerAdded(...) was called. This is needed to ensure handlerAdded(...) is always called first.
    
    Result:
    
    Its not possible to deadlock when modify the DefaultChannelPipeline.

commit 3a9f47216143082bdfba62e8940160856767d672
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 14 17:31:48 2016 +0900

    Make retained derived buffers recyclable
    
    Related: #4333 #4421 #5128
    
    Motivation:
    
    slice(), duplicate() and readSlice() currently create a non-recyclable
    derived buffer instance. Under heavy load, an application that creates a
    lot of derived buffers can put the garbage collector under pressure.
    
    Modifications:
    
    - Add the following methods which creates a non-recyclable derived buffer
      - retainedSlice()
      - retainedDuplicate()
      - readRetainedSlice()
    - Add the new recyclable derived buffer implementations, which has its
      own reference count value
    - Add ByteBufHolder.retainedDuplicate()
    - Add ByteBufHolder.replace(ByteBuf) so that..
      - a user can replace the content of the holder in a consistent way
      - copy/duplicate/retainedDuplicate() can delegate the holder
        construction to replace(ByteBuf)
    - Use retainedDuplicate() and retainedSlice() wherever possible
    - Miscellaneous:
      - Rename DuplicateByteBufTest to DuplicatedByteBufTest (missing 'D')
      - Make ReplayingDecoderByteBuf.reject() return an exception instead of
        throwing it so that its callers don't need to add dummy return
        statement
    
    Result:
    
    Derived buffers are now recycled when created via retainedSlice() and
    retainedDuplicate() and derived from a pooled buffer

commit 68cd670eb9b8827b4d3b7602f4ea8e14c38691ac
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 17 09:05:55 2016 +0200

    Remove ChannelHandlerInvoker
    
    Motivation:
    
    We tried to provide the ability for the user to change the semantics of the threading-model by delegate the invoking of the ChannelHandler to the ChannelHandlerInvoker. Unfortunually this not really worked out quite well and resulted in just more complexity and splitting of code that belongs together. We should remove the ChannelHandlerInvoker again and just do the same as in 4.0
    
    Modifications:
    
    Remove ChannelHandlerInvoker again and replace its usage in Http2MultiplexCodec
    
    Result:
    
    Easier code and less bad abstractions.

commit a56ef03f24da04c608e47a9769ee08a2f97b4e32
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Mon May 16 22:46:29 2016 -0700

    Add DomainNameMapping.entries to allow retrieving the domain match lists
    
    Motivation:
    
    See #4200.
    
    Modifications:
    
    Add DomainNameMapping.entries to allow retrieving the domain match lists.
    
    Result:
    
    People can use DomainNameMapping.entries to retrive the match list in DomainNameMapping.

commit f44f3e7926f1676315ae86d0f18bdd9b95681d9f
Author: Hyangtack Lee <hyangtack@gmail.com>
Date:   Mon May 16 12:01:19 2016 +0900

    NioEventLoop ensures that all submitted tasks are executed immediately.
    
    Motivation:
    If a task was submitted when wakenUp value was true, the task didn't get a chance to call Selector#wakeup.
    So we need to check task queue again before executing select operation. If we don't, the task might be pended until select operation was timed out.
    It might be pended until idle timeout if IdleStateHandler existed in pipeline.
    
    Modifications:
    Execute Selector#select in a non-blocking manner if there's a task submitted when wakenUp value was true.
    
    Result:
    Every tasks in NioEventLoop will not be pended.

commit 877767da00f7ab93d401b4df7351040eb0c36a8b
Author: Hyangtack Lee <hyangtack@gmail.com>
Date:   Sat May 14 00:14:05 2016 +0900

    EpollEventLoop ensures that all submitted tasks are executed immediately.
    
    Motivation:
    If a task was submitted when wakenUp value was 1, the task didn't get a chance to produce wakeup event. So we need to check task queue again before calling epoll_wait. If we don't, the task might be pended until epoll_wait was timed out. It might be pended until idle timeout if IdleStateHandler existed in pipeline.
    
    Modifications:
    Execute epoll_wait in a non-blocking manner if there's a task submitted when wakenUp value was 1.
    
    Result:
    Every tasks in EpollEventLoop will not be pended.

commit c249926784a58884690c62a3ca0bf227fc439c2c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu May 12 11:03:42 2016 +0200

    [#3127] Allow to write with VoidPromise to Channels in ChannelGroup
    
    Motivation:
    
    Users sometimes want to use Channel.voidPromise() when write to a Channel to reduce GC-pressure. This should be also possible when write via a ChannelGroup.
    
    Modifications:
    
    Add new write(...) and writeAndFlush(...) overloads which allow to signale that a VoidPromise should be used to write to the Channel
    
    Result:
    
    Users can write with VoidPromise when using ChannelGroup

commit 27a392b87760a501f1519c0838b44194f236629f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu May 12 21:10:04 2016 +0200

    Add ChannelInboundInvoker and ChannelOutboundInvoker
    
    Motivation:
    
    ChannelHandlerContext, ChannelPipeline and Channel share various method signatures. We should provide an interface to share.
    
    Modifications:
    
    Add ChannelInboundInvoker and ChannelOutboundInvoker and extend these.
    
    Result:
    
    Better API abstraction.

commit 01109dd63513f355a7c553484b1e666b49c7c640
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat May 14 20:38:31 2016 +0200

    Fix test-failures introduces by c1827114e90cd89864578b00abe392db43a26a43.

commit c1827114e90cd89864578b00abe392db43a26a43
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu May 12 14:10:04 2016 +0200

    Use ConnectException when connection failed for LocalChannel
    
    Motivation:
    
    To be more consistent we should use ConnectException when we fail the connect attempt because no LocalServerChannel exists with the given address.
    
    Modifications:
    
    Use correct exception.
    
    Result:
    
    More consistent handling of connection refused between different transports.

commit 775dd139ea477afe9210b8d7b2a5928c1d697e3f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu May 12 14:00:43 2016 +0200

    Ensure Bootstrap.connect(...) not throw IllegalStateException when registration is delayed.
    
    Motivation:
    
    Bootstrap.connect(...) tries to obtain the EventLoop of a Channel before it may be registered. This will cause an IllegalStateException. We need to ensure we handle the cause of late registration and not throw in this case.
    
    Modifications:
    
    Ensure we only try to access the EventLoop after the Channel is registered and handle the case of late registration.
    
    Result:
    
    Bootstrap.connect(...) not fails on late registration.

commit 89eae94542ae3d522a78e1f8b0172782c9786901
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 9 10:18:10 2016 +0200

    Allow to extend IdleStateHandler and so provide more details for IdleStateEvents
    
    Motivation:
    
    Sometimes it is useful to include more details in the IdleStateEvents that are produced by the IdleStateHandler. For this users should be able to create their own IdleStateEvents that encapsulate more informations.
    
    Modifications:
    
    - Make IdleStateEvent constructor protected and the class non-final
    - Add protected method to IdleStateHandler that users can override and so create their own IdleStateEvents.
    
    Result:
    
    More flexible and customizable IdleStateEvents / IdleStateHandler

commit 1f8e192e21fbb5a0689967919507fe4d7aacd226
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue May 10 17:51:37 2016 -0700

    Remove EventExecutor.children
    
    Motivation:
    EventExecutor.children uses generics in such a way that an entire colleciton must be cast to a specific type of object. This interface is not very flexible and is impossible to implement if the EventExecutor type must be wrapped. The current usage of this method also does not have any clear need within Netty. The Iterator interface allows for EventExecutor to be wrapped and forces the caller to make assumptions about types instead of building the assumptions into the interface.
    
    Motivation:
    - Remove EventExecutor.children and undeprecate the iterator() interface
    
    Result:
    EventExecutor interface has one less method and is easier to wrap.

commit 88a52f73671dd91630b2bc0da0ae8fbc910d763b
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sun May 8 20:34:59 2016 -0700

    KObjectHashMap PrimitiveIterator NPE
    
    Motivation:
    KObjectHashMap.remove(int index) attempts to move back items which may have been displaced because their spot in the hash based array was taken by another item. If this happens the nextIndex reference in PrimitiveIterator will not be updated. At this time the PrimitiveEntry will reference the incorrect index and may result in a NPE.
    
    Modifications:
    - If KObjectHashMap.remove(int index) moves entries back then PrimitiveIterator should adjust its nextIndex
    
    Result:
    PrimitiveIterator.remove() updates its internal state to reference the new nextIndex and will not NPE.
    Fixes https://github.com/netty/netty/issues/5198

commit c5faa142fb25abe20b69eae0c03a8f5c9e4b3165
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sun May 8 20:56:26 2016 -0700

    KObjectHashMap probeNext improvement
    
    Motivation:
    KObjectHashMap.probeNext(..) usually involves 2 conditional statements and 2 aritmatic operations. This can be improved to have 0 conditional statements.
    
    Modifications:
    - Use bit masking to avoid conditional statements
    
    Result:
    Improved performance for KObjecthashMap.probeNext(..)

commit 979dc3e3e4b3f95d51b5e5c471f2f1ab4648a8b6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri May 13 18:38:37 2016 +0200

    Fix one more possible leak as a follow up of 341a235fea2f11e368038a832453cec72246dca2

commit 341a235fea2f11e368038a832453cec72246dca2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 10 09:18:33 2016 +0200

    Fix possible leaks in Http2ServerDowngraderTest
    
    Motivation:
    
    We need to ensure we release all ReferenceCounted objects during tests to not leak.
    
    Modifications:
    
    Fix possible leaks by calling release()
    
    Result:
    
    No more leaks in tests.

commit 690ab563e746aee8209680b6c2b9a0a2b15dd078
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu May 12 09:07:30 2016 +0200

    Ensure ChannelHandlerContext.attr(...) and ChannelHandlerContext.hasAttr(...) has no semantic change
    
    Motivation:
    
    The ChannelHandlerContext.attr(...) and ChannelHandlerContext.hasAttr(...) delegated to Channel for the attributes which is a semantic change compared to 4.0 releases. We should not change the semantic to not break users applications when upgrading to 4.1.0
    
    Modifications:
    
    - Revert semantic change
    - Mark ChannelHandlerContext.attr(...) and hasAttr(...) as @deprecated so we can remove these later
    
    Result:
    
    Semantic of attribute operations on ChannelHandlerContext is the same in 4.1 as in 4.0 again.

commit 5ffa3b1c466f8a4c22b1cb96312d2809c653fc1b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu May 12 13:14:52 2016 +0200

    Only try to bind if late registration not failed.
    
    Motivation:
    
    We should not try to call bind if registration failed.
    
    Modifications:
    
    Only call doBind0(...) when the registration not failed.
    
    Result:
    
    Not try to to bind if the registration failed.

commit 30bb3094c16f8c3bf0f570f34f62a4a098cdb9b6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed May 11 11:53:31 2016 +0200

    [#5227] Fix race-condition in PooledByteBufAllocatorTest
    
    Motivation:
    
    PooledByteBufAllocatorTest.testNumThreadCachesWithNoDirrectArenas() had a race as it just used LockSupport.parkNanos(). We should better use a CountdownLatch and so be sure we really have init everything.
    
    Modifications:
    
    Replace LockSupport.parkNanos(...) with CountdownLatch usage
    
    Result:
    
    No more race in test.

commit ea61b5b5b368a3e2ea556bb92edc1bc6c4216d20
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 9 10:34:36 2016 +0200

    [#5223] Remove indirection in DefaultChannelPipeline.executorSafe(...)
    
    Motivation:
    
    We use channel.unsafe().invoker().executor() in DefaultChannelPipeline.executorSafe(...) which is an unnecessary indirection to channel.eventLoop().
    
    Modifications:
    
    Remove indirection by using channel.eventLoop().
    
    Result:
    
    Cleaner code.

commit 4b24b0aac88636ad448bde9dfc204259619b2085
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 10 09:24:44 2016 +0200

    Annotate Http2ServerDowngrader with @UnstableApi
    
    Motivation:
    
    Everything in the http2 package should be considered unstable for now
    
    Modifications:
    
    Add missing annotation on Http2ServerDowngrader
    
    Result:
    
    Clearly mark class as unstable.

commit b225144a5791eeef848a02ba0f51f894e79ee854
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 10 14:48:27 2016 +0200

    Upgrade to netty-tcnative-1.1.33.Fork16
    
    Motivation:
    
    A new netty-tcnative version was released.
    
    Modifications:
    
    Upgrade to latest version.
    
    Result:
    
    Use up-to-date dependency

commit 15711d938dd7311b54b744a9ef98e0e6bacf32d3
Author: earthling <doohick@gmail.com>
Date:   Tue May 10 21:20:28 2016 -0700

    Fix address aliasing in sendmmsg0
    
    Motivation:
    
    When epoll datagram channel invokes sendmmsg0, _all_ of the messages go
    on the wire with the address of the _last_ packet in the list.
    
    Modifications:
    
    An array of addresses equal to the length of the messages is allocated
    on the stack to hold the address for each msg_hdr.msg_name.
    
    Result:
    
    Each message goes on the wire with the correct address.

commit 4d2e91a10dd6b2b3a1ec25a26e2f64d9c4212fe9
Author: Moses Nakamura <mnakamura@twitter.com>
Date:   Mon May 9 18:14:33 2016 -0700

    codec-http2: Stop leaking in header downgrader test
    
    Motivation:
    
    We're leaking requests in our Http2ServerDowngrader tests when we
    allocate a buffer using the local allocator.
    
    Modification:
    
    Release the request later when the request is constructed with the local
    allocator.
    
    Result:
    
    Less leaky tests.

commit 24784bfcd17edd6109fe9ffb22fbcaa72779871e
Author: alexlehm <alexlehm@gmail.com>
Date:   Fri Apr 29 21:06:30 2016 +0200

    Change hosts file resolver to be case-insensitive
    
    Motivation:
    
    Resolving hosts via the /etc/hosts file should be case-insensitive, e.g. localhost and LOCALHOST refer to the same host, this is the same that is applied to dns queries.
    
    Modifications:
    
    Store hosts Map with lowercase keys, lookup the keys as lowercase
    Add to unit test for the hosts file parser to use an UPPERCASE file entry
    Add unit test for DefaultHostsFileEntriesResolver to resolve both localhost and LOCALHOST
    
    Result:
    
    host resolution for local hosts file should match the rules applied to "getent hosts" or "ping"

commit d580245afc77f11e4b82a7f3320f5619b555c2ec
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue May 3 13:52:56 2016 -0700

    DefaultHttp2Connection.close Reentrant Modification
    
    Motivation:
    The DefaultHttp2Conneciton.close method accounts for active streams being iterated and attempts to avoid reentrant modifications of the underlying stream map by using iterators to remove from the stream map. However there are a few issues:
    
    - While iterating over the stream map we don't prevent iterations over the active stream collection
    - Removing a single stream may actually remove > 1 streams due to closed non-leaf streams being preserved in the priority tree which may result in NPE
    
    Preserving closed non-leaf streams in the priority tree is no longer necessary with our current allocation algorithms, and so this feature (and related complexity) can be removed.
    
    Modifications:
    - DefaultHttp2Connection.close should prevent others from iterating over the active streams and reentrant modification scenarios which may result from this
    - DefaultHttp2Connection should not keep closed stream in the priority tree
      - Remove all associated code in DefaultHttp2RemoteFlowController which accounts for this case including the ReducedState object
      - This includes fixing writability changes which depended on ReducedState
    - Update unit tests
    
    Result:
    Fixes https://github.com/netty/netty/issues/5198

commit 9ce84dcb21168c45fe6714d3673c9253f35e5cd2
Author: Moses Nakamura <mnakamura@twitter.com>
Date:   Tue May 3 23:51:45 2016 -0700

    Http2 to Http1.1 converter on new Http2 server API
    
    Motivation:
    
    http/2 and http/1.1 have similar protocols, and it's useful to be able
    to implement a single server against a single interface. There's an
    injection from http/1.1 messages to http/2 ones, so it makes sense to
    make folks program against http/1.1 and upgrade them under the hood.
    
    Modifications:
    
    added a MessageToMessageCodec<Http2StreamFrame, HttpObject> which turns
    every kind of Http2StreamFrame domain object into an HttpObject domain
    object, and then back again on the way out.  This one is specialized for
    servers, but it should be straightforward to make a symmetric one for
    clients, or else extend this one.
    
    Result:
    
    fixes #5199, and it's now simple to make your Http2MultiplexCodec speak
    Http1.1

commit f2ed3e6ce8039d142e4c047fcc9cf09409105243
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed May 4 22:58:40 2016 -0700

    DefaultPromise LateListener Logic Issues
    
    Motivation:
    The LateListener logic is prone to infinite loops and relies on being processed in the EventExecutor's thread for synchronization, but this EventExecutor may not be constant. An infinite loop can occur if the EventExecutor's execute method does not introduce a context switch in LateListener.run. The EventExecutor can be changed by classes which inherit from DefaultPromise. For example the DefaultChannelPromise will return w/e EventLoop the channel is registered to, but this EventLoop can change (re-registration).
    
    Modifications:
    - Remove the LateListener concept and instead use a single Object to maintain the listeners while still preserving notification order
    - Make the result member variable an atomic variable so it can be outside the synchronized(this) blocks
    - Cleanup/simplify existing state management code
    
    Result:
    Fixes https://github.com/netty/netty/issues/5185

commit ffd2450e1154ede31b4b1d7e20c887a9e60f2d00
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Tue Apr 12 09:47:59 2016 +0200

    Add logging configuration to pom.xml
    
    Motivation:
    Currently the default log level when running tests is debug. When
    running the build on the CI server it might be nice to avoid this debug
    level and allow for the level to be configured.
    
    Modifications:
    Added a logback-test.xml configuration that has been added to the
    common module. This allows for the logLevel to be configured.
    The default level will still be debug.
    
    Result:
    The log level can now be configured from the command line:
    $ mvn test -DlogLevel=error

commit 9229ed98e2eb3159abe3195459e0ffc78200d358
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 12 14:22:41 2016 +0200

    [#5088] Add annotation which marks packages/interfaces/classes as unstable
    
    Motivation:
    
    Some codecs should be considered unstable as these are relative new. For this purpose we should introduce an annotation which these codecs should us to be marked as unstable in terms of API.
    
    Modifications:
    
    - Add UnstableApi annotation and use it on codecs that are not stable
    - Move http2.hpack to http2.internal.hpack as it is internal.
    
    Result:
    
    Better document unstable APIs.

commit b39c53ce17c1bfadf59e8417c684c01090074efa
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri May 6 16:40:56 2016 +0200

    [#5218] Zero out private key copied to ByteBuf before release.
    
    Motivation:
    
    We should zero-out the private key as soon as possible when we not need it anymore.
    
    Modifications:
    
    zero out the private key before release the buffer.
    
    Result:
    
    Limit the time the private key resist in memory.

commit 2472d8c3cff4fc199276c623b153e5942e50f6d7
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu May 5 20:54:08 2016 +0200

    [#5216] Correctly increment deallocationsHuge when call PoolArena.free
    
    Motivation:
    
    We called deallocationsHuge.decrement() but it needs to be increment()
    
    Modifications:
    
    Replace decrement() with increment()
    
    Result:
    
    Correct metrics.

commit b17ee6066fd1f204a65ead2ff8f88cba20473dda
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri May 6 10:45:37 2016 -0700

    HTTP/2 Log Cleanup
    
    Motivation:
    The format of some log lines used the printf style formatting instead of the logger {} formatting for variables. This would lead to printing out the literal printf tokens instead of substituting the value.
    
    Modifications:
    - Fix the format string for log statements which use printf style formatting
    
    Result:
    Logs actually capture the value of the variables instead of fixed string tokens.

commit 9f5eb7d698477fdabdeadeb66403360984e33954
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Apr 11 11:47:35 2016 +0200

    Add CharSequence operations to ByteBuf
    
    Motivation:
    
    Often users either need to read or write CharSequences to a ByteBuf. We should add methods for this to ByteBuf as we can do some optimizations for this depending on the implementation.
    
    Modifications:
    
    Add setCharSequence, writeCharSequence, getCharSequence and readCharSequence
    
    Result:
    
    Easier reading / writing of CharSequence with ByteBuf.

commit b2bb72b2de7d2a04899c971242b5808390232265
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 2 14:33:47 2016 +0200

    [#5171] Ensure NioDatagramChannelConfig can be instanced on android
    
    Motivation:
    
    NioDatagramChannelConfig currently uses NetworkChannel in its static { } block and so fails to init on android which not has this class.
    
    Modifications:
    
    Use reflection to load the NetworkChannel.class
    
    Result:
    
    Be able to use NIO Datagram on android as well.

commit c745ac0e16ffdbc60b6e96fe01947a1da773be78
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 2 14:50:42 2016 +0200

    [#3297] Fix race while resolve remote address that can cause NPE
    
    Motivation:
    
    We may produce a NPE due a race that can happen while check if a resolution was done and failed.
    
    Modifications:
    
    Correctly first check if the resultion is done before try to detect if it failed and so remove the race that can produce a NPE.
    
    Result:
    
    No more race possible while resolve address during connect.

commit 2b6525856868ab1788db957ff8af8eb22b42c774
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon May 2 08:21:29 2016 -0700

    FlowControlHandlerTest invalid condition
    
    Motivation:
    FlowControlHandlerTest attempts to validate the expected contents of the underlying queue in FlowControlHandler. However the condition which triggers the check is too early and the queue contents may not yet contain all expected objects. For example a CountDownLatch is counted down in a handler's channelRead which is  after the FlowControlHandler in the pipeline. At this point if there is a thread context switch the queue may not yet contain all the expected objects and checking the queue contents is not valid.
    
    Modifications:
    - Remove checking the queues contents in FLowControlHandlerTest and instead only check the empty condition at the end of the tests
    
    Result:
    FlowControlHandlerTest won't fail due to invalid checks of the contents of the queue.

commit 06436efaa1b118eac3526d8f77d9e159d0292959
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 3 10:32:25 2016 +0200

    [#5190] Ensure memory is not leaked when readEndOfLine(...) throws an exception.
    
    Motivation:
    
    We need to ensure we not retain the buffer until readEndOfLine(...) completes as otherwise we may leak memory in the case of an exception.
    
    Modifications:
    
    Only call retain after readEndOfLine(...) returns.
    
    Result:
    
    No more leak in case of exception while decoding redis messages.

commit ef13d19b8b5d876463d4365b76d3046410a7811a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed May 4 14:16:38 2016 +0200

    [#5202] Correctly throw ErrorDataDecoderException when invalid encoded form parameters are present.
    
    Motivation:
    
    At the moment we let the IllegalArgumentException escape when parsing form parameters. This is not expected.
    
    Modifications:
    
    Correctly catch IllegalArgumentException and rethrow as ErrorDataDecoderException.
    
    Result:
    
    Throw correct exception.

commit ce1ae0eb8bfec1fc77a2c1c67b34ac1ea1eb327c
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Tue May 3 19:32:18 2016 -0700

    Handle the backslash with double quote in JsonObjectDecoder
    
    Motivation:
    
    The double quote may be escaped in a JSON string, but JsonObjectDecoder doesn't handle it. Resolves #5157.
    
    Modifications:
    
    Don't end a JSON string when processing an escaped double quote.
    
    Result:
    
    JsonObjectDecoder can handle backslash and double quote in a JSON string correctly.

commit a974fff07d9c3c5ff08d3f120f629abe618e2ab6
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Mon May 2 21:58:47 2016 -0700

    Add regression tests for FullMemcacheMessageRequest and FullMemcacheMessageResponse
    
    Motivation:
    
    It's better to have some tests for FullMemcacheMessageRequest and FullMemcacheMessageResponse to avoid regression like #5197.
    
    Modifications:
    
    Add tests for FullMemcacheMessageRequest and FullMemcacheMessageResponse.
    
    Result:
    
    There are some basic tests for FullMemcacheMessageRequest and FullMemcacheMessageResponse.

commit d0cfe24972cd44609a1b1e97aca641a35445134c
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Tue May 3 06:47:32 2016 +0200

    Clarifying the that a null String is returned by using @{code}

commit 0557927b655d8ae66933170657e4aad160f8c56e
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Mon May 2 19:19:06 2016 +0200

    Updating allowNullOrigin to return 'null' instead of '*'.
    
    Motivation:
    Currently the way a 'null' origin, a request that most often indicated
    that the request is coming from a file on the local file system, is
    handled is incorrect. We are currently returning a wildcard origin '*'
    but should be returning 'null' for the 'Access-Control-Allow-Origin'
    which is valid according to the specification [1].
    
    Modifications:
    Updated CorsHandler to add a 'null' origin instead of the '*' origin in
    the case the request origin is 'null.
    
    Result:
    All test pass and the CORS example as does the cors.html example if you
    try to serve it by opening the file directly in a web browser.
    
    [1]
    https://www.w3.org/TR/cors/#access-control-allow-origin-response-header

commit 9b9819c17804fa83155cc6cdf11eb2e64feb2d1a
Author: Fabian Lange <lange.fabian@gmail.com>
Date:   Mon May 2 15:27:37 2016 +0200

    Rewrite misleading Note in FingerprintTrustManagerFactory javadoc
    
    Motivation:
    
    The current note reads as if this class is dangerous and advises the reader to "understand what this class does".
    
    Modifications:
    
    Rewrite the Javadoc note to describe what fingerprint checks are and what problems remain.
    
    Result:
    
    Clearer description which no longer causes the impression this class is dangerous.

commit 9ed2f01853d82940b42c795eb541046872c3086b
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon May 2 14:23:41 2016 -0700

    Revert "Returns after encoding each message not do check following instance types"
    
    Motivation:
    This reverts commit 3405aee2abf990d1f6078eb27da1b0035ab34769. This commit introduces a bug and the encoder no longer encodes FullMemcacheMessage objects correctly.
    
    Modifications:
    - Revert commit
    
    Result:
    Fixes https://github.com/netty/netty/issues/5197

commit cf07f984b16d95719a9ece8c39ed6c11d8c57829
Author: Carl Mastrangelo <notcarl@google.com>
Date:   Thu Apr 14 12:11:07 2016 -0700

    Add @Deprecated when the javadoc says its deprecated
    
    Motivation:
    
    Reduce nag warnings when compiling, make it easier for IDEs to display what's deprecated.
    
    Modifications:
    
    Added @Deprecated in a few places
    
    Result:
    
    No more warnings.

commit 7db9f454fe34c9f0136ef2d77185264de4154d06
Author: Jongyeol Choi <jongyeol.choi@gmail.com>
Date:   Sat Apr 30 17:36:24 2016 +0900

    Fix decoding null bulk string of RedisDecoder
    
    Motivation:
    
    - `RedisBulkStringAggregator` raises errors for multiple null bulk strings.
    - Null or empty bulk string has no content, but current `RedisDecoder` generates header and contents.
    
    Modifications:
    
    - Fix decoding null bulk string of `RedisDecoder` for `RedisBulkStringAggregator`.
    
    Result:
    
    - Fixes #5184.

commit 6b427aaee5ca6409cf3783f0cdb26e0d680a871a
Author: Renjie Sun <sunrenjie6@gmail.com>
Date:   Tue Apr 26 10:22:44 2016 +0800

    Improve client SNI in testSniWithApnHandler
    
    Motivations
    The test SniHandlerTest#testSniWithApnHandler() does not actually
    involve SNI: given the client setup, the ClientHello in the form of hex
    strings is not actually written to the wire, so the server never receives that.
    We may need to write in somewhere else (e.g., channelActive()) instead of in
    initChannel() in order for the hex strings to reach the server. So here
    what's actually going on is an ordinary TLS C/S communication without SNI.
    
    Modifications
    The client part is modified to enable SNI by using an SslHandler with an
    SSLEngine created by io.netty.handler.ssl.SslContext#newEngine(), where
    the server hostname is specified. Also, more clauses are added to verify that
    the SNI is indeed successful.
    
    Results
    Now the test verifies that both SNI and APN actually happen and succeed.

commit 467e5a1019675619b69dec9a32969897014549df
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Apr 28 22:52:04 2016 -0700

    DefaultHttp2FrameReader stops reading if stream error
    
    Motivation:
    DefaultHttp2FrameReader will stop reading data if any exception is thrown. However some exceptions are recoverable and we will lose data if we don't continue reading. For example some stream errors are recoverable.
    
    Modifications:
    - DefaultHttp2FrameReader should attempt to continue reading if a stream error is encountered.
    
    Result:
    Fixes https://github.com/netty/netty/issues/5186

commit 5b5925065796471c2d00ad53d8aaff888f24b752
Author: Guido Medina <gmedina@squaredfinancial.com>
Date:   Fri Apr 22 09:34:56 2016 +0100

    TreeMap extra get operation removed.
    
    Motivation:
    Checking if a key exists on a TreeMap has a Big O of "log 2 N",
    doing it twice is not cheap.
    
    Modifications:
    Get the key instead which has the same cost and check if it is null.
    
    Result:
    Faster code due to one expensive operation removed.

commit 946d03337920655998fba5cc988587a9ecdea638
Author: Jongyeol Choi <jongyeol.choi@gmail.com>
Date:   Fri Apr 15 00:23:04 2016 +0900

    Add an example client for codec-redis
    
    Motivation:
    
    - Add an example Redis client using codec-redis.
    
    Modifications:
    
    - Add an example Redis client that reads input from STDIN and writes output to STDOUT.
    
    Result:
    
    - Added an example Redis client using codec-redis.

commit 5eb0127c2a0baa4bf178d244db919c9fb3a7d36a
Author: Roger Kapsi <rkapsi@squarespace.com>
Date:   Tue Apr 5 10:44:32 2016 -0400

    A new ChannelHandler that allows the user to control the flow of messages if upstream handlers emit more than one event for each read()
    
    Motivation:
    
    Some handlers such as HttpObjectDecoder can emit more than one event per read()
    which leads to problems in downstream handlers that expect only one event and hope
    that ChannelConfig#setAutoRead(false) prevents further events being sent while they're
    processing the one they've just received.
    
    Modifications:
    
    A new handler called FlowControlHandler that feeds off read() and isAutoRead() and acts
    as a holding buffer if auto reading gets turned off and more events arrive while auto reading
    is off.
    
    Result:
    
    Fixes issues such as #4895.

commit 04e33fd2d8d81ee114718744893ba9c8a47fd883
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Apr 14 10:42:13 2016 -0700

    NioEventLoop closes channel even if channel is not registered
    
    Motivation:
    If a channel is deregistered from an NioEventLoop the associated SelectionKey is cancelled. If the NioEventLoop has yet to process a pending event as a result of that SelectionKey then the NioEventLoop will see the SelecitonKey is invalid and close the channel. The NioEventLoop should not close a channel if it is not registered with that NioEventLoop.
    
    Modifications:
    - NioEventLoop.processSelectedKeys should check that the channel is still registered to itself before closing the channel
    
    Result:
    NioEventLoop doesn't close a channel that is no longer registered to it when the SelectionKey is invalid
    Fixes https://github.com/netty/netty/issues/5125

commit f60698a538e007e1e31c2fa16fa5fd7e4ccda293
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Apr 19 10:02:01 2016 -0700

    EpollEventLoopGroup support Executor
    
    Motivation:
    NioEventLoopGroup supports constructors which take an executor but EpollEventLoopGroup does not. EPOLL should be consistent with NIO where ever possible.
    
    Modifications:
    - Add constructors to EpollEventLoopGroup which accept an Executor as a parameter
    
    Result:
    EpollEventLoopGroup is more consistent with NioEventLoopGroup
    Fixes https://github.com/netty/netty/issues/5161

commit e08a361bfc531c6842a6e224082baf1646ef5527
Author: luchen <378979705@qq.com>
Date:   Sat Apr 16 10:24:45 2016 +0800

    Motivation:
    
    We had unused import in  RedisEncoderTest, we should remove it to keep code clean.
    
    Modifications:
    
    Remove unused import.
    
    Result:
    
    Cleanup done.

commit 38d05abd84c2971c68230289aad14066218a6141
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 14 18:57:58 2016 +0900

    Reorganize imports

commit 03638869b9069d4fbe0f370d0254b480cbd109e8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 12 13:07:48 2016 +0200

    Update dependencies
    
    Motivation:
    
    Before release 4.1.0.Final we should update all our dependencies.
    
    Modifications:
    
    Update dependencies.
    
    Result:
    
    Up-to-date dependencies used.

commit 4fb55beed1f342bc6a6ba583f15031616125965b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Apr 14 11:01:12 2016 +0200

    Re-add codec-smtp which was removed by 96455a95584dd4e3bbefefb9c208e5927a8b919f by mistake.

commit d6987466096e32f497ea2ada910f66addae2a6d9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Apr 13 15:25:15 2016 +0200

    Add ByteBuf.asReadOnly()
    
    Motivation:
    
    We lately added ByteBuf.isReadOnly() which allows to detect if a buffer is read-only or not. We should add ByteBuf.asReadOnly() to allow easily access a read-only version of a buffer.
    
    Modifications:
    
    - Add ByteBuf.asReadOnly()
    - Deprecate Unpooled.unmodifiableBuffer(Bytebuf)
    
    Result:
    
    More consistent api.

commit 96455a95584dd4e3bbefefb9c208e5927a8b919f
Author: Jongyeol Choi <jongyeol.choi@gmail.com>
Date:   Thu Apr 14 07:30:09 2016 +0900

    Implement codec-redis
    
    Motivation:
    
    - To encode/decode RESP (REdis Serialization Protocol) using Netty
    - http://redis.io/topics/protocol
    
    Modifications:
    
    - Add RedisEncoder, RedisDecoder
    - Add RedisBulkStringAggregator and RedisArrayAggregator
    - Add tests
    
    Result:
    
    - Added codec-redis
    - codec-redis can encode/decode RESP (REdis Serialization Protocol)

commit 6108b7297b0cb8359dc2f486b01ab440692b9433
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Apr 11 09:15:30 2016 +0200

    Correctly handle ChannelInputShutdownEvent in ReplayingDecoder
    
    Motivation:
    
    b112673554bafc1eccfd43913a3e8605337dd7fb added ChannelInputShutdownEvent support to ByteToMessageDecoder but missed updating the code for ReplayingDecoder. This has the effect:
    
    - If a ChannelInputShutdownEvent is fired ByteToMessageDecoder (the super-class of ReplayingDecoder) will call the channelInputClosed(...) method which will pass the incorrect buffer to the decode method of ReplayingDecoder.
    
    Modifications:
    
    Share more code between ByteToMessageDEcoder and ReplayingDecoder and so also support ChannelInputShutdownEvent correctly in ReplayingDecoder
    
    Result:
    
    ChannelInputShutdownEvent is corrrectly handle in ReplayingDecoder as well.

commit 7c734fcf7387eec804e52deb1c61c50a61b67601
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Apr 14 10:13:55 2016 +0200

    Fix resource leak in tests introduced by 69070c37baf55e181f9270270f7cbf25958ba9b3.

commit 0035630bd077a67c86fc0fd4a8e07b6911bcf850
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Apr 9 22:25:28 2016 +0200

    We need to ensure we correct reset decoder in decodeLast() to not produce multiple LastHttpContent instances.
    
    Motivation:
    
    We missed to reset the decoder when asked for it in HttpObjectDecoder and so sometimes could produce more then one LastHttpContent in a sequence during channelInactive.
    
    This did show up as AssertionError:
    
    22:22:35.499 [nioEventLoopGroup-3-1] WARN  i.n.channel.DefaultChannelPipeline - An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.
    java.lang.AssertionError: null
    	at io.netty.handler.codec.http.HttpObjectAggregator.decode(HttpObjectAggregator.java:205) ~[classes/:na]
    	at io.netty.handler.codec.http.HttpObjectAggregator.decode(HttpObjectAggregator.java:57) ~[classes/:na]
    	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:89) ~[classes/:na]
    	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:292) [classes/:na]
    	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:278) [classes/:na]
    	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:428) [classes/:na]
    	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:277) [classes/:na]
    	at io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:343) [classes/:na]
    	at io.netty.handler.codec.ByteToMessageDecoder.channelInactive(ByteToMessageDecoder.java:309) [classes/:na]
    	at io.netty.handler.codec.http.HttpClientCodec$Decoder.channelInactive(HttpClientCodec.java:228) [classes/:na]
    	at io.netty.channel.CombinedChannelDuplexHandler.channelInactive(CombinedChannelDuplexHandler.java:213) [classes/:na]
            ...
    
    Modifications:
    
    Correctly reset decoder.
    
    Result:
    
    Correctly only produce one LastHttpContent per sequence.

commit 89268659f33be8637f8dea927c7974eed0b5dabd
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 12 21:25:17 2016 +0200

    [#4836] Enforce 64bit JDK when build netty.
    
    Motivation:
    
    As we only provide tcnative jars for 64bit we should enforce 64bit when try to build netty, to make it easier for the user to understand why the build fails.
    
    Modifications:
    
    Add enforce rule.
    
    Result:
    
    Ensure 64bit is used when build netty.

commit 1861461db230267fec4e887b6b06eff68fa61d6c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Apr 11 10:15:19 2016 +0200

    [#4635] Stop decoding if decoder was removed in ReplayingDecoder
    
    We need to check if this handler was removed before continuing with decoding.
    If it was removed, it is not safe to continue to operate on the buffer. This was already fixed for ByteToMessageDecoder in 4cdbe3928424b5b38695967c0cc1062dccf1a83c  but missed for ReplayingDecoder.
    
    Modifications:
    
    Check if decoder was removed after fire messages through the pipeline.
    
    Result:
    
    No illegal buffer access when decoder was removed.

commit 7d3ca7fb923e7ad5aeb6af80f87fe816286c9e13
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Apr 11 11:52:32 2016 +0200

    Fix IndexOutOfBoundsException when FixedCompositeByteBuf is constructed with an empty array.
    
    Motivation:
    
    When FixedCompositeByteBuf was constructed with new ByteBuf[0] and IndexOutOfboundsException was thrown.
    
    Modifications:
    
    Fix constructor
    
    Result:
    
    No more exception

commit 4ddb81f36fc1ccf244250124d91eda98dadef779
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Apr 13 15:34:06 2016 +0200

    Not cache SwappedByteBuf in AbstractByteBuf to reduce memory footprint.
    
    Motivation:
    
    We should not cache the SwappedByteBuf in AbstractByteBuf to reduce the memory footprint.
    
    Modifications:
    
    Not cache the SwappedByteBuf.
    
    Result:
    
    Less memory footprint.

commit 2537880e5d9f790b622a7268057f91d8599b81e2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 12 19:34:54 2016 +0200

    Fix typo in exception message
    
    Motivation:
    
    Typo in exception message.
    
    Modifications:
    
    Fix the typo.
    
    Result:
    
    No more typo.

commit 0b078314b29fecdf6b241d06df9dc686ee04e50c
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 13 18:21:17 2016 +0900

    Add ByteBuf.isReadOnly()
    
    Motivation:
    
    It is sometimes useful to determins if a buffer is read-only.
    
    Modifications:
    
    Add ByteBuf.isReadOnly()
    
    Result:
    
    One more feature

commit 57063b6db0193f3d53847f3754005a1cd63d463a
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 13 20:34:39 2016 +0900

    Implement the ByteBuf methods that should have been overridden
    
    Motivation:
    
    Some ByteBuf implementations do not override all necessary methods,
    which can lead to potentially sub-optimal behavior.
    
    Also, SlicedByteBuf does not perform the range check correctly due to
    missing overrides.
    
    Modifications:
    
    - Add missing overrides
    - Use unwrap() instead of direct member access in derived buffers for
      consistency
    - Merge unwrap0() into unwrap() using covariant return type
    - Deprecate AbstractDerivedByteBuf and its subtypes, because they were
      not meant to be public
    
    Result:
    
    Correctness

commit de2515ddd89129e59dc6703a099d6bf44356a093
Author: nmittler <nathanmittler@google.com>
Date:   Tue Apr 12 07:16:57 2016 -0700

    Support preloading of native epoll lib
    
    Motivation:
    
    Some applications may use alternative methods of loading the epoll JNI symbols. We should support this use case.
    
    Modifications:
    
    Attempt to use a side effect free JNI method. If that fails, load the library.
    
    Result:
    
    Fixes #5122

commit 718bf2fa459fd6f79a3c06d835faa180ef9604a1
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 12 16:27:02 2016 +0200

    Fix resource-leak which was reported as a result of commit 69070c37baf55e181f9270270f7cbf25958ba9b3

commit 379ad2c02ed0c0ae9f94e4081e3f910ece6380b7
Author: nmittler <nathanmittler@google.com>
Date:   Mon Apr 11 09:06:48 2016 -0700

    Support preloading of tcnative share lib
    
    Motivation:
    
    Some applications may use alternative methods of loading the tcnative JNI symbols. We should support this use case.
    
    Modifications:
    
    Separate the loading and initialzation of the tcnative library so that each can fail independently.
    
    Result:
    
    Fixes #5043

commit 572bdfb4944f1cf6074171a0662d874b7ba4fc17
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Apr 10 08:37:18 2016 +0200

    [maven-release-plugin] prepare for next development iteration

commit c6121a6f494c84ff5bf88a2bb290dd7a5885eefd
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Apr 10 08:36:56 2016 +0200

    [maven-release-plugin] prepare release netty-4.1.0.CR7

commit 4652223dec1e4cd9f9a2978e4a0e6d4086c3b24a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Apr 10 08:04:17 2016 +0200

    Fix resource leak in test introduced by 69070c37baf55e181f9270270f7cbf25958ba9b3

commit 6e919f70f8b55ae52f74b0992a7ecb89b5e91cf1
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Apr 9 22:13:44 2016 +0200

    [maven-release-plugin] rollback the release of netty-4.1.0.CR7

commit 4cdd51509a72607b6fdd805a26245be6c2caa338
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Apr 9 22:05:34 2016 +0200

    [maven-release-plugin] prepare release netty-4.1.0.CR7

commit abce89d1bc609ffbc42275ad0f062ffeae4e98a1
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Apr 8 14:59:42 2016 -0700

    Revert "[#5028] Fix re-entrance issue with channelWritabilityChanged(...) and write(...)"
    
    Motivation:
    Revert d0943dcd30b08eb4043aeb88fd983bcebf8c3432. Delaying the notification of writability change may lead to notification being missed. This is a ABA type of concurrency problem.
    
    Modifications:
    - Revert d0943dcd30b08eb4043aeb88fd983bcebf8c3432.
    
    Result:
    channelWritabilityChange will be called on every change, and will not be suppressed due to ABA scenario.

commit 69070c37baf55e181f9270270f7cbf25958ba9b3
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Apr 7 09:56:03 2016 +0200

    ByteBuf.readBytes(...) should use the allocator of the buffer to create the new buffer. Related to [#5093]
    
    Motivation:
    
    ByteBuf.readBytes(...) uses Unpooled.buffer(...) internally which will use a heap ByteBuf and also not able to make use of the allocator which may be pooled. We should better make use of the allocator.
    
    Modifications:
    
    Use the allocator for thenew buffer.
    
    Result:
    
    Take allocator into account when copy bytes.

commit 200ca39b5c947cfeed153d7cb683ead86fe3e879
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Apr 6 09:25:22 2016 +0200

    Add PooledByteBufAllocator.dumpStats() which allows to obtain a human-readable status of the allocator.
    
    Motiviation:
    
    Sometimes it is useful to dump the status of the PooledByteBufAllocator and log it. Doing this is currently a bit cumbersome as the user needs to basically iterate through all the metrics and compose the String. we would better provide an easy way to do this.
    
    Modification:
    
    Add dumpStats() method.
    
    Result:
    
    Easier to get a view into the status of the allocator.

commit 9498d1a9b30e13df75a8af20ed3382967375554f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Apr 7 17:44:45 2016 +0200

    Allow to create a JdkSslContext from an existing JDK SSLContext. Related to [#5095] and [#4929]
    
    Motivation:
    
    Sometimes a user only has access to a preconfigured SSLContext but still would like to use our ssl sub-system. For this situations it would be very useful if the user could create a JdkSslContext instance from an existing SSLContext.
    
    Modifications:
    
    - Create new public constructors in JdkSslContext which allow to wrap an existing SSLContext and make the class non-abstract
    - Mark JdkSslServerContext and JdkSslClientContext as deprecated as the user should not directly use these.
    
    Result:
    
    It's now possible to create an JdkSslContext from an existing SSLContext.

commit eb14e5b2f53b9c84dd5f8300671599497caa884b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Apr 6 15:00:46 2016 +0200

    Ensure EpollSocketChannel.localAddress() returns correct address after connect(...) call.
    
    Motivation:
    
    We missed to correctly retrieve the localAddress() after we called Socket.connect(..) and so the user would always see an incorrect address when calling EpollSocketChannel.localAddress().
    
    Modifications:
    
    - Ensure we always retrieve the localAddress() after we called Socket.connect(...) as only after this we will be able to receive the correct address.
    - Add unit test
    
    Result:
    
    Correct and consistent behaviour across different transports (NIO/OIO/EPOLL).

commit cfa258e096bf93cceac424c55779cf0e4f1cde66
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Apr 6 20:05:23 2016 +0200

    PoolChunkList.allocate(...) should return false without the need to walk all the contained PoolChunks when the requested capacity is too big.
    
    Motivation:
    
    PoolChunkList.allocate(...) should return false without the need to walk all the contained PoolChunks when the requested capacity is larger then the capacity that can be allocated out of the PoolChunks in respect to the minUsage() and maxUsage() of the PoolChunkList.
    
    Modifications:
    
    Precompute the maximal capacity that can be allocated out of the PoolChunks that are contained in the PoolChunkList and use this to fast return from the allocate(...) method if an allocation capacity larger then that is requested.
    
    Result:
    
    Faster detection of allocations that can not be handled by the PoolChunkList and so faster allocations in general via the PoolArena.

commit 2ae97946dd7cfe3c2df22aa1b7904bcea3541e10
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Apr 6 15:12:37 2016 +0200

    Allow to retrieve the number of active bytes per PoolArena.
    
    Motivation:
    
    To better understand how much memory is used by Netty for ByteBufs it is useful to understand how many bytes are currently active (allocated) per PoolArena.
    
    Modifications:
    
    - Add PoolArenaMetric.numActiveBytes()
    
    Result:
    
    The user is able to get better insight into the PooledByteBufAllocator.

commit 787a55874b9e7f38580365f355c38ba10004ee43
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Apr 8 11:56:32 2016 +0200

    Cleanup PoolChunk and PoolArena
    
    Motivation:
    
    To make it easier to understand PoolChunk and PoolArena we should cleanup duplicated code.
    
    Modifications:
    
    - Move reused code into methods
    - Use Math.max(...)
    
    Result:
    
    Cleaner code and easier to understand.

commit d08185115602ba4a5a6b02586fdcae1a7c40d094
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Apr 7 10:16:26 2016 +0200

    Remove ByteBuf.readBytes(int) calls when possible
    
    Motivation:
    
    We use ByteBuf.readBytes(int) in various places where we could either remove it completely or use readSlice(int).retain().
    
    Modifications:
    
    - Remove ByteBuf.readBytes(int) when possible or replace by readSlice(int).retain().
    
    Result:
    
    Faster code.

commit 1b4a5609d31e667a268fd882883a3b6ff356dfb8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Apr 6 11:05:59 2016 +0200

    Not try to allocate out of the PoolChunkList that contains only full PoolChunks
    
    Motivation:
    
    When doing a normal allocation in PoolArena we also tried to allocate out of the PoolChunkList that only contains completely full PoolChunks. This makes no sense as these are full anyway so an allocation will never work here and just gives a perf hit as we need to walk the whole list of PoolChunks in the list.
    
    Modifications:
    
    Not try to allocate from PoolChunkList that only contains full PoolChunks
    
    Result:
    
    Faster allocation times when a new PoolChunk must be created.

commit a0b28d6c82abec5f953e6f5e8df829850756c7dd
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Apr 8 09:44:42 2016 -0700

    Fix potential assertion error introduced by 0bc93dd
    
    Motivation:
    Commit 0bc93dd introduced a potential assertion failure, if the deprecated method would be used.
    
    Modifications:
    Fix the potential assertion error.
    
    Result:
    Regression removed

commit 9a63aafe226d73e119b9a3b4795988159a9fc7a3
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Apr 7 14:49:19 2016 -0700

    EPOLL ET Set ReadFlag and Limit epollInReadyRunnable
    
    Motivation:
    441aa4c5756b975e8ee1dccbe2902633e0f587e8 conditionally set the readFlag based upon if maybeMoreDataToRead is set. It is possible that the read flag will not be set, and nothing will be read by executeEpollInReadyRunnable and no actual data will be read even though the user requested it.
    
    Modifications:
    - Always set the readFlag in doBeginRead
    - Make it so only a single epollInReadyRunnable can execute for a channel at a time
    
    Result:
    Less chance of missing read events in EPOLL transport.

commit 32cfe25132b7b83ec0db3ca03dc51365827091f4
Author: Trustin Lee <t@motd.kr>
Date:   Fri Apr 8 17:44:52 2016 +0900

    Fix checkstyle

commit c1a3cc32e7e8d6c02308a1c198e00a8b4a7bf191
Author: Trustin Lee <t@motd.kr>
Date:   Fri Apr 8 17:23:32 2016 +0900

    Fix an assertion error introduced by 0bc93dda081499dfe4f96a1507d24fa46bf0f31f
    
    Motivation:
        
    Commit 0bc93dda081499dfe4f96a1507d24fa46bf0f31f introduced an assertion
    failure.
    
    Modifications:
    
    Fix the assertion error.
    
    Result:
    
    Regression removed

commit 84e281ced9826eb5331223209c79aa88d4e7e15c
Author: stroller <fujian1115@gmail.com>
Date:   Sun Apr 3 17:21:21 2016 +0800

    fix one java doc issue: extra }
    
    Motivation:
    
    There is one extra } for WriteBufferWaterMark's javadoc:
    {@linkplain #high}  high water mark}
    
    The generated javadoc will show the content: "the high high water mark}"
    
    Modifications:
    
    remove the }
    
    Result:
    The generated javadoc will show the content: "the high water mark" instead of "the high high water mark}"

commit bc6adab48c18263822b76477717763ae2e7e0099
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Thu Apr 7 01:12:11 2016 -0700

    Make all InternalLoggerFactory implementations be singletons
    
    Motivation:
    
    It's better to make all InternalLoggerFactory implementations be singletons according to the discussions in #5047
    
    Modifications:
    
    Make all InternalLoggerFactory implementations be singletons and hide the construtors.
    
    Result:
    
    All InternalLoggerFactory implementations be singletons.

commit 0bc93dda081499dfe4f96a1507d24fa46bf0f31f
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Apr 7 19:49:02 2016 -0700

    NIO autoReadClear should also clear the SelectionKey
    
    Motivation:
    Prior to 5b48fc284ebe85ca4974985e3be005d37626e980 setting readPending to false when autoReadClear was called was enough because when/if the EventLoop woke up with a read event we would first check if readPending was true and if it is not, we would return early. Now that readPending will only be set in the EventLoop it is not necessary to check readPending at the start of the read methods, and we should instead remove the OP_READ from the SelectionKey when we also set readPending to false.
    
    Modifications:
    - autoReadCleared should call AbstractNioUnsafe.removeReadOp
    
    Result:
    NIO is now consistent with EPOLL and removes the READ operation on the selector when autoRead is cleared.

commit 562d8d220028fbb3d62028bc5879a121dff2fdbd
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Sep 4 14:27:18 2015 +0200

    Add smtp codec (client side only).
    
    Motivation:
    
    When writing a SMTP client a provided SMTP codec that follows RFC2821 is useful.
    
    Modification:
    
    Add client side codec and test.
    
    Results:
    
    People who want to write a SMTP client can reuse the codec.

commit 24254b159f3df12ce6b3c99b2f90dc8d27f8f234
Author: Hyangtack Lee <hyangtack@gmail.com>
Date:   Thu Apr 7 22:00:52 2016 +0900

    Propagate h2c upgrade success event to the next handler before removing source codec
    
    Motivation:
    
    When upgrading h2c, I found that sometimes both of http2 settings frame and http response message was arrived before receiving upgrade success event. It was because ByteToMessageDecoder propagated its internally buffered message to the next handler when removing itself from pipeline.(refer to ByteToMessageDecoder#handlerRemoved)
    I think it's better to propagate upgrade success event when handling 101 switching protocol response.
    
    Modifications:
    
    Upgrade success event will be propagated before removing source codec.
    
    Result:
    
    It guarantees that upgrade success event will be arrived first at the next handler.

commit e053b96b5c81922e1972ac2e304746a84af459bb
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Mon Apr 4 16:23:17 2016 -0700

    Set the length fields of memcache messages automatically
    
    Motivation:
    
    People need to set all length fields manually when creating a memcache message and it's error prone. See #2736 for more dicussion.
    
    Modifications:
    
    This patch adds the logic to update the keyLength, extrasLength and totalBodyLength when key, extras or content is set.
    
    Result:
    
    The length fields of memcache messages will be updated automatically.

commit 5b48fc284ebe85ca4974985e3be005d37626e980
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Apr 5 10:13:18 2016 -0700

    Make OIO/NIO/EPOLL autoReadClear consistent
    
    Motivation:
    OIO/NIO use a volatile variable to track if a read is pending. EPOLL does not use a volatile an executes a Runnable on the event loop thread to set readPending to false. These mechansims should be consistent, and not using a volatile variable is preferable because the variable is written to frequently in the event loop thread.
    OIO also does not set readPending to false before each fireChannelRead operation and may result in reading more data than the user desires.
    
    Modifications:
    - OIO/NIO should not use a volatile variable for readPending
    - OIO should set readPending to false before each fireChannelRead
    
    Result:
    OIO/NIO/EPOLL are more consistent w.r.t. readPending and volatile variable operations are reduced
    Fixes https://github.com/netty/netty/issues/5069

commit 7b121c26aee2f53ad7e03bcc492b40545825aff4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Apr 6 21:30:32 2016 +0200

    Use Math.min(...) and Math.max(...) as these are intrinsics.
    
    Motivation:
    
    We should better use Math utilities as these are intrinsics. This is a cleanup for ea3ffb85368ab135087debff003de30aee7d9091.
    
    Modifications:
    
    Use Math utilities.
    
    Result:
    
    Cleaner code and use of intrinsics.

commit c024dc92d0ef40d13c72871315fc2bc9c0065f58
Author: Kun Zhang <zhangkun@google.com>
Date:   Tue Apr 5 20:43:34 2016 -0700

    Explicit thread group on DefaultThreadFactory.
    
    Motivation:
    
    Fixes #5084. We (gRPC) encountered a bug that was triggered by
    grpc/grpc-java@d927180. After that commit, event loop threads are
    created per task by NioEventLoopGroup, and inherits the thread group of
    the caller, which in our case is an application-provided request-scope
    thread. Things go south when the application tries to manipulate (e.g.,
    interrupt and join) all threads of the request-scope thread group, which
    unexpectedly include the event loop threads.
    
    Modifications:
    
    DefaultThreadFactory will save the current thread group in constructor,
    and apply it to all new threads.
    
    Result:
    
    Threads created by DefaultThreadFactory will be in the same thread group
    as the thread where the factory is created.

commit 88b093c4811b9ec26d7cd1710173d6a0c64c91e0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 5 17:59:56 2016 +0200

    PoolChunkList not correctly move PoolChunks when these are moved.
    
    Motivation:
    
    When a PoolChunk needs to get moved to the previous PoolChunkList because of the minUsage / maxUsage constraints we always just moved it one level which is incorrect and so could lead to have PoolChunks in the wrong PoolChunkList (in respect to their minUsage / maxUsage settings). This then could have the effect that PoolChunks are not released / freed in a timely fashion and so.
    
    Modifications:
    
    - Correctly move PoolChunks between PoolChunkLists, which includes moving it multiple "levels".
    - Add unit test
    
    Result:
    
    Correctlty move the PoolChunk to PoolChunkList when it is freed, even if its multiple layers.

commit 4fa5d2cf52cd1fc4a57fb7722e9d8adad5804be6
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 6 13:08:13 2016 +0900

    Do now swallow an exception triggered by late listener notification
    
    Related: #3449
    
    Motivation:
    
    When a user shut down an EventExecutor/Loop prematurely, a Promise will
    fail to execute its listeners. When it happens, DefaultPromise will log
    a message at ERROR level, but there's no way to get notified about it
    programmatically.
    
    Modifications:
    
    Do not catch and log the RejectedExecutionException unconditionally,
    but only catch and log for non-late listener notifications, so that a
    user gets notified on submission failure at least when the listener is
    late.
    
    Result:
    
    Remedies #3449 to some extent, although we will need fundamental fix for
    that, such as #3566

commit d0943dcd30b08eb4043aeb88fd983bcebf8c3432
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Apr 1 11:45:43 2016 +0200

    [#5028] Fix re-entrance issue with channelWritabilityChanged(...) and write(...)
    
    Motivation:
    
    When always triggered fireChannelWritabilityChanged() directly when the update the pending bytes in the ChannelOutboundBuffer was made from within the EventLoop. This is problematic as this can cause some re-entrance issue if the user has a custom ChannelOutboundHandler that does multiple writes from within the write(...) method and also has a handler that will intercept the channelWritabilityChanged event and trigger another write when the Channel is writable. This can also easily happen if the user just use a MessageToMessageEncoder subclass and triggers a write from channelWritabilityChanged().
    
    Beside this we also triggered fireChannelWritabilityChanged() too often when a user did a write from outside the EventLoop. In this case we increased the pending bytes of the outboundbuffer before scheduled the actual write and decreased again before the write then takes place. Both of this may trigger a fireChannelWritabilityChanged() event which then may be re-triggered once the actual write ends again in the ChannelOutboundBuffer.
    
    The third gotcha was that a user may get multiple events even if the writability of the channel not changed.
    
    Modification:
    
    - Always invoke the fireChannelWritabilityChanged() later on the EventLoop.
    - Only trigger the fireChannelWritabilityChanged() if the channel is still active and if the writability of the channel changed. No need to cause events that were already triggered without a real writability change.
    - when write(...) is called from outside the EventLoop we only increase the pending bytes in the outbound buffer (so that Channel.isWritable() is updated directly) but not cause a fireChannelWritabilityChanged(). The fireChannelWritabilityChanged() is then triggered once the task is picked up by the EventLoop as usual.
    
    Result:
    
    No more re-entrance possible because of writes from within channelWritabilityChanged(...) method and no events without a real writability change.

commit ea3ffb85368ab135087debff003de30aee7d9091
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 5 19:50:34 2016 +0200

    Fix PoolChunkList.minUsage() and maxUsage() for head and tail
    
    Motivation:
    
    The PoolChunkList.minUsage() and maxUsage() needs to take special action to translate Integer.MIN_VALUE / MAX_VALUE as these are used internal for tail and head of the linked-list structure.
    
    Modifications:
    
    - Correct the minUsage() and maxUsage() methods.
    - Add unit test.
    
    Result:
    
    Correct metrics

commit 8033faa03bd3b46dc8c337674126883d252483d1
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Apr 5 10:47:57 2016 -0700

    fcbeebf6dff759a1e0cfe2e20fe5103e4c40075c unit test bug
    
    Motivation:
    fcbeebf6dff759a1e0cfe2e20fe5103e4c40075c introduced a unit test to verify ApplicationProtocolNegotiationHandler is compatible with SniHandler. However only the server attempts ALPN and verifies that it completes and the client doesn't verify the handshake is completed. This can lead to the client side SSL engine to prematurely close and throw an exception.
    
    Modifications:
    - The client should wait for the SSL handshake and ALPN to complete before the test exits.
    
    Result:
    SniHandlerTest.testSniWithApnHandler is more reliable.

commit 9fb86a380d0b3d2082a0d97a217d221392177625
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Apr 2 16:48:07 2016 -0700

    NIO/EPOLL readPending set to false incorrectly
    
    Motivation:
    441aa4c5756b975e8ee1dccbe2902633e0f587e8 introduced a bug in transport-native-epoll where readPending is set to false before a read is attempted, but this should happen before fireChannelRead is called. The NIO transport also only sets the readPending variable to false on the first read in the event loop. This means that if the user only calls read() on the first channelRead(..) the select loop will still listen for read events even if the user does not call read() on subsequent channelRead() or channelReadComplete() in the same event loop run. If the user only needs 2 channelRead() calls then by default they will may get 14 more channelRead() calls in the current event loop, and then 16 more when the event loop is woken up for a read event. This will also read data off the TCP stack and allow the peer to queue more data in the local RECV buffers.
    
    Modifications:
    - readPending should be set to false before each call to channelRead()
    - make NIO readPending set to false consistent with EPOLL
    
    Result:
    NIO and EPOLL transport set readPending to false at correct times which don't read more data than intended by the user.
    Fixes https://github.com/netty/netty/issues/5082

commit 7d60699a4951b4dcaba4cb06029d4432a863b171
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Apr 6 08:39:27 2016 +0200

    Fix compile error caused by 7fb475a2237e603767abb8bd940f444ff28e212f, because I missed to adjust jni code.

commit d6022772047bf0e5b4031bcaab5608d1f1342cc0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Mar 29 16:00:27 2016 +0200

    Include cause that was used to notify the promise when logging an failed try to notify it.
    
    Motivation:
    
    When a promise is notified that was already added to the ChannelOutboundBuffer and we try to notify it later on we only see a warning that it was notified before. This is often not very useful as we have no idea where it was notified at all. We can do better in case it was failed before (which is most of the times the case) and just also log the cause that was used for it.
    
    Modifications:
    
    Add the cause that was used to notify the promise when we fail to notify it as part of the ChannelOutboundBuffer.
    
    Result:
    
    Easier to debug user errors.

commit 7fb475a2237e603767abb8bd940f444ff28e212f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 5 15:32:54 2016 +0200

    Fix typo missed in f46cfbc590263ee2bfe0a16e0bdfb6d6d603f621

commit f46cfbc590263ee2bfe0a16e0bdfb6d6d603f621
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Mar 30 11:27:12 2016 +0200

    [#5059] Deprecate method with typo and introduce a new one without typo
    
    Motivation:
    
    There is a spelling error in FileRegion.transfered() as it should be transferred().
    
    Modifications:
    
    Deprecate old method and add a new one.
    
    Result:
    
    Fix typo and can remove the old method later.

commit 105df33d8d66701652ecc2159e7c8f01ad5d6a08
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Fri Mar 25 23:25:17 2016 -0700

    Add Log4J2LoggerFactory and Log4J2Logger
    
    Motivation:
    
    See #3095
    
    Modifications:
    
    Add Log4J2LoggerFactory and Log4J2Logger which is an InternalLogger implementation based on log4j2.
    
    Result:
    
    The user can use log4j2 directly without a special slf4j binding.

commit ea94336689047fcd505a4e4040d55b3f46728054
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Apr 1 14:42:39 2016 +0200

    DefaultChannelHandlerInvoker should work with non AbstractChannelHandlerContext sub-classes.
    
    Motivation:
    
    DefaultChannelHandlerInvoker currently blindly cast to AbstractChannelHandlerContext without checking if the ChannelHandlerContext is really a sub-type of it. It should check it first and if not just use slow-path implementation.
    
    Modifications:
    
    Do instanceof check first and if it fails just create a new Runnable instance of used the cached.
    
    Result:
    
    DefaultChannelHandlerInvoker works with any ChannelHandlerContext implementations.

commit 4e779cd6b071309a2530ac02e4657f845c102ac0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Mar 29 12:00:58 2016 +0200

    Allow to disable leak detection for all buffers when using UnpooledByteBufAllocator.
    
    Motivation:
    
    Sometimes it is useful to allow to disable the leak detection of buffers if the UnpooledByteBufAllocator is used. This is for example true if the app wants to leak buffers into user code but not want to put the burden on the user to always release the buffer.
    
    Modifications:
    
    Add another constructor to UnpooledByteBufAllocator that allows to completely disable leak-detection for all buffers that are allocator out of the UnpooledByteBufAllocator.
    
    Result:
    
    It's possible to disable leak-detection when the UnpooledByteBufAllocator is used.

commit 1d23e358b49edcbad168a8aef75aee57a386d8fe
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 5 11:46:25 2016 +0200

    Only increment metric for huge / normal allocations after the allocation was really done.
    
    Motivation:
    
    We should only increment the metric for the huge / normal allocation after it is done. Also we should only decrement once deallocate.
    
    Modifications:
    
    - Move increment after the allocation.
    - Fix deallocation metric and move it after deallocation
    
    Result:
    
    More correct metrics.

commit b32e07c75a903300b43b8d606f9f2e41579efdff
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Apr 1 15:03:46 2016 +0200

    PoolThreadCache uses wrong variable in IllegalArgumentException
    
    Motivation:
    
    PoolThreadCache includes the wrong value when throwing a IllegalArgumentException because of freeSweepAllocationThreshold.
    
    Modifications:
    
    Use the correct value.
    
    Result:
    
    Correct exception message.

commit fcbeebf6dff759a1e0cfe2e20fe5103e4c40075c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Apr 1 16:56:03 2016 -0700

    ApplicationProtocolNegotiationHandler doesn't work with SniHandler
    
    Motivation:
    ApplicationProtocolNegotiationHandler attempts to get a reference to an SslHandler in handlerAdded, but when SNI is in use the actual SslHandler will be added to the pipeline dynamically at some later time. When the handshake completes ApplicationProtocolNegotiationHandler throws an IllegalStateException because its reference to SslHandler is null.
    
    Modifications:
    - Instead of saving a reference to SslHandler in handlerAdded just search the pipeline when the SslHandler is needed
    
    Result:
    ApplicationProtocolNegotiationHandler support SniHandler.
    Fixes https://github.com/netty/netty/issues/5066

commit 516e4933c4044d6da3b66aebee567c7dc8712c9d
Author: Trustin Lee <t@motd.kr>
Date:   Sat Apr 2 01:39:47 2016 -0400

    Remove an unused import

commit 3b941c2a7c539b7dcc6e54dd5bd65d45005e17ac
Author: Trustin Lee <t@motd.kr>
Date:   Sat Apr 2 01:25:05 2016 -0400

    [maven-release-plugin] prepare for next development iteration

commit 7368ccc539a2ebe624fc99018d1a6ca5a2058d71
Author: Trustin Lee <t@motd.kr>
Date:   Sat Apr 2 01:24:55 2016 -0400

    [maven-release-plugin] prepare release netty-4.1.0.CR6

commit 4b38b72a0d789a2e812bd11685244ba6583751bb
Author: Trustin Lee <t@motd.kr>
Date:   Fri Apr 1 20:47:15 2016 +0900

    Fix incorrect name encoding/decoding in DNS records
    
    Motivation:
    
    - The decoded name should always end with a dot (.), but we currently
      strip it, which is incorrect.
      - (O) 0 -> "."
      - (X) 0 -> ""
      - (O) 5 netty 2 io 0 -> "netty.io."
      - (X) 5 netty 2 io 0 -> "netty.io"
    - The encoded name should end with a null-label, which is a label whose
      length is 0, but we currently append an extra NUL, causing FORMERR(1)
      on a strict DNS server:
      - (O) . -> 0
      - (X) . -> 0 0
      - (O) netty.io. -> 5 netty 2 io 0
      - (X) netty.io. -> 5 netty 2 io 0 0
    
    Modifications:
    
    - Make sure to append '.' when decoding a name.
    - Improve index checks so that the decoder can raise
      CorruptFrameException instead of IIOBE
    - Do not encode extra NUL
    - Add more tests
    
    Result:
    
    Robustness and correctness

commit 441aa4c5756b975e8ee1dccbe2902633e0f587e8
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Apr 1 00:02:15 2016 -0700

    EPOLL ET Missed Reads
    
    Motivation:
    bfbef036a8c1121083b485a98b9cb04a84e7dfea made EPOLL respect autoRead while in ET mode. However it is possible that we may miss data pending on the RECV queue if autoRead is off. This is because maybeMoreDataToRead is updated after fireChannelRead and if a user calls read() from here maybeMoreDataToRead will be false because it is updated after the fireChannelRead call. The way maybeMoreDataToRead was updated also causes a single channel to continuously read on the event loop and not relinquish and give other channels to try reading.
    
    Modifications:
    - Ensure maybeMoreDataToRead is always set after all user events, and is evaluated with readPending to execute a epollInReady on the EventLoop
    - Combine the checkResetEpollIn and maybeMoreDataToRead logic to invoke a epollInReady later into the epollInFinally method due to similar responsibilities
    - Update unit tests to reflect the user calling read() on the event loop from channelRead()
    
    Result:
    EPOLL ET with autoRead set to false will not leave data on the RECV queue.

commit 4a18bcaa5926b717d0fc1a50b2aede4fda946697
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Apr 1 11:46:33 2016 +0200

    [#5062] Mark MqttEncoder @Sharable
    
    Motivation:
    
    Commit 2696778 changed MqttEncoder to be a singelton but missed to add @Sharable annotation. This broke the encoder as it can not be added to multiple pipelines.
    
    Modifications:
    
    Add @Sharable annotation
    
    Result:
    
    MqttEncoder can be used in multiple pipelines again.

commit 3e5dcb5f3efbb26d5e6cf4cd229b03c285d62462
Author: jiafu1115 <fujian1115@gmail.com>
Date:   Wed Mar 30 10:33:35 2016 +0800

    [#3806] Setting WRITE_BUFFER_LOW_WATER_MARK before WRITE_BUFFER_HIGH_WATER_MARK results in an internal Exception
    
    Motivation:
    
    Setting the WRITE_BUFFER_LOW_WATER_MARK before WRITE_BUFFER_HIGH_WATER_MARK results in an internal Exception (appears only in the logs) if the value is larger than the default high water mark value. The WRITE_BUFFER_HIGH_WATER_MARK call appears to have no effect in this context.
    
    Setting the values in the reverse order works.
    
    Modifications:
    
    - deprecated ChannelOption.WRITE_BUFFER_HIGH_WATER_MARK and
    ChannelOption.WRITE_BUFFER_LOW_WATER_MARK.
    - add one new option called ChannelOption.WRITE_BUFFER_WATER_MARK.
    
    Result:
    The high/low water mark values limits caused by default values are removed.
    
    Setting the WRITE_BUFFER_LOW_WATER_MARK before WRITE_BUFFER_HIGH_WATER_MARK results in an internal Exception (appears only in the logs) if the value is larger than the default high water mark value. The WRITE_BUFFER_HIGH_WATER_MARK call appears to have no effect in this context.
    
    Setting the values in the reverse order works.

commit 9d4fae308c09a2c759dc67db765d311154c8d977
Author: Tibor Csögör <tibi@tiborius.net>
Date:   Wed Mar 16 18:23:56 2016 +0100

    ChannelInitializer: change propagation of channelRegistered event
    
    Motivation:
    
    If a handler is added to the pipeline within ChannelInitializer::initChannel via
    addFirst(...) then it will not receive the channelRegistered event.  The same
    handler added via addLast(...) will receive the event.  This different behavior
    is unlikely to be expected by users and can cause confusion.
    
    Modifications:
    
    Let ChannelInitializer::channelRegistered propagate the event by passing it to
    the pipeline instead of firing it on the ChannelHandlerContext.
    
    Result:
    
    The channelRegistered event is propagated to handlers regardless of the method
    used to add it to the pipeline (addFirst/addLast).

commit 0c839d9e0ae7e93c9a2fd5b5029b7d72abdfc9bc
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Mar 25 12:44:51 2016 -0700

    EPOLL SelectStrategy
    
    Motivation:
    NIO now supports a pluggable select strategy, but EPOLL currently doesn't support this. We should strive for feature parity for EPOLL.
    
    Modifications:
    - Add SelectStrategy to EPOLL transport.
    
    Result:
    EPOLL transport supports SelectStategy.

commit 5d76daf33b645248a1cde150cbefbd3c24824f78
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Wed Mar 9 13:30:08 2016 +0100

    Allow to customize NIO (channel) select strategies.
    
    Motivation:
    
    Under high throughput/low latency workloads, selector wakeups are
    degrading performance when the incoming operations are triggered
    from outside of the event loop. This is a common scenario for
    "client" applications where the originating input is coming from
    application threads rather from the socket attached inside the
    event loops.
    
    As a result, it can be desirable to defer the blocking select
    so that incoming tasks (write/flush) do not need to wakeup
    the selector.
    
    Modifications:
    
    This changeset adds the notion of a generic SelectStrategy which,
    based on its contract, allows the implementation to optionally
    defer the blocking select based on some custom criteria.
    
    The default implementation resembles the original behaviour, that
    is if tasks are in the queue `selectNow()` and move on, and if no
    tasks need to be processed go into the blocking select and wait
    for wakeup.
    
    The strategy can be customized per `NioEventLoopGroup` in the
    constructor.
    
    Result:
    
    High performance client applications are now given the chance to
    customize for how long the actual selector blocking should be
    deferred by employing a custom select strategy.

commit 2facb7affd485b2b96625dc160614b6028791cd3
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Mar 29 11:34:13 2016 +0200

    Change DefaultChannelId visibility to default. Related to [#5053]
    
    Motivation:
    
    There is no need to make DefaultChannelId package private as it may be useful for the user. For example EmbeddedChannel allows to inject a ChannelId when it is constructed. For this case the user can just use DefaultChannelId.
    
    Modifications:
    
    Change visibility of DefaultChannelId to public.
    
    Result:
    
    It's possible to create a new instance of DefaultChannelId by the user.

commit cee38ed2b6ba93a351047f718941c1c11880f1c7
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Mar 29 16:45:13 2016 +0200

    [maven-release-plugin] prepare for next development iteration

commit 9cd9e7daeb04d825bcb418f389b9cab8c21fac9b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Mar 29 16:44:33 2016 +0200

    [maven-release-plugin] prepare release netty-4.1.0.CR5

commit 86b96561671e0ee4e4874c96877987297aeb27f0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Mar 24 13:44:07 2016 +0100

    Correctly run pending tasks before flush and also remove incorrect assert.
    
    Motivation:
    
    We need to ensure we run all pending tasks before doing any flush in writeOutbound(...) to ensure all pending tasks are run first. Also we should remove the assert of the future and just add a listener to it so it is processed later if needed. This is true as a user may schedule a write for later execution.
    
    Modifications:
    
    - Remove assert of future in writeOutbound(...)
    - Correctly run pending tasks before doing the flush and also before doing the close of the channel.
    - Add unit tests to proof the defect is fixed.
    
    Result:
    
    Correclty handle the situation of delayed writes.

commit 4950a523a77f920134a47175322578895a48e918
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Mar 24 19:37:43 2016 +0100

    Not attempt to read from fd when channel is closed during read loop. Related to [#5031]
    
    Motivation:
    
    We need to break out of the read loop for two reasons:
    
    - If the input was shutdown in between (which may be the case when the user did it in the
      fireChannelRead(...) method we should not try to read again to not produce any
      miss-leading exceptions.
    
    - If the user closes the channel we need to ensure we not try to read from it again as
      the filedescriptor may be re-used already by the OS if the system is handling a lot of
      concurrent connections and so needs a lot of filedescriptors. If not do this we risk
      reading data from a filedescriptor that belongs to another socket then the socket that
      was "wrapped" by this Channel implementation.
    
    Modification:
    
    Break the reading loop if the input was shutdown from within the channelRead(...) method.
    
    Result:
    
    No more meaningless exceptions and no risk to read data from wrong socket after the original was closed.

commit 84bbbf7e09513e761496fe1faf3407fc06a32228
Author: Vladimir Kostyukov <vkostyukov@twitter.com>
Date:   Thu Mar 24 20:29:15 2016 -0700

    Read if needed on NEED_UNWRAP
    
    Motivation:
    
    There are some use cases when a client may only be willing to read from a channel once
    its previous write is finished (eg: serial dispatchers in Finagle). In this case, a
    connection with SslHandler installed and ctx.channel().config().isAutoRead() == false
    will stall in 100% of cases no matter what order of "channel active", "write", "flush"
    events was.
    
    The use case is following (how Finagle serial dispatchers work):
    
    1. Client writeAndFlushes and waits on a write-promise to perform read() once it's satisfied.
    2. A write-promise will only be satisfied once SslHandler finishes with handshaking and
       sends the unencrypted queued message.
    3. The handshaking process itself requires a number of read()s done by a client but the
       SslHandler doesn't request them explicitly assuming that either auto-read is enabled
       or client requested at least one read() already.
    4. At this point a client will stall with NEED_UNWRAP status returned from underlying engine.
    
    Modifiations:
    
    Always request a read() on NEED_UNWRAP returned from engine if
    
    a) it's handshaking and
    b) auto read is disabled and
    c) it wasn't requested already.
    
    Result:
    
    SslHandler is now completely tolerant of whether or not auto-read is enabled and client
    is explicitly reading a channel.

commit f0f014d0c755b7b2e11853aa822ba0b88d7a48cc
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jan 5 09:43:00 2016 +0100

    [#4637] More helpful exception message when a non PKCS#8 key is used.
    
    Motivation:
    
    We should throw a more helpful exception when a non PKCS#8 key is used by the user.
    
    Modifications:
    
    Change exception message to give a hint what is wrong.
    
    Result:
    
    Easier for user to understand whats wrong with their used key.

commit 61cfdd767197dafcc4f201c5ec7577601b20ce25
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Mar 25 12:51:11 2016 -0700

    e24a5d8 compile error
    
    Motivation:
    e24a5d8 was cherry-picked but had a compile error.
    
    Modifications:
    - Fix the compile error in e24a5d8
    
    Result:
    Build now compiles.

commit e24a5d8839f97677341cc20d370b0b45be9b94e1
Author: Eric Anderson <ejona@google.com>
Date:   Sun Apr 12 22:19:20 2015 -0700

    Map HTTP/2 Streams to Channels
    
    Motivation:
    
    This allows using handlers for Streams in normal Netty-style. Frames are
    read/written to the channel as messages, not directly as a
    callback/method call. Handlers allow mixing and can ease HTTP/1 and
    HTTP/2 interoperability by eventually supporting HTTP/1 handlers in
    HTTP/2 and vise versa.
    
    Modifications:
    
    New handler Http2MultiplexCodec that converts from the current HTTP/2
    API to a message-based API and child channels for streams.
    
    Result:
    
    The basics are done for server-side: new streams trigger creation of new
    channels in much the same appearance to how new connections trigger new
    channel creation. The basic frames HEADERS and DATA are handled, but
    also GOAWAY and RST_STREAM.
    
    Inbound flow control is implemented, but outbound is not. That will be
    done later, along with not completing write promises on the child
    channel until the write actually completes on the parent.
    
    There is not yet support for outbound priority/weight, push promises,
    and many other features.
    
    There is a generic Object that may be set on stream frames. This also
    paves the way for client-side support which needs a way to refer to
    yet-to-be-created streams (due to how HEADERS allocates a stream id, and
    the allocation order must be the same as transmission order).

commit 5eab79a464b79683114f2dc9ef1ea87d3e6a8bc6
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Mar 25 10:10:34 2016 -0700

    EPOLL Socket Shutdown Fix
    
    Motivation:
    8dbf5d02e53a72c42467b8dc0a5e1482d5f49af4 modified the shutdown code for Socket but did not correctly calculate the change in shutdown state and only applying this change. This is significant because if sockets are being opening and closed quickly and the underlying FD happens to be reused we need to take care that we don't unintentionally change the state of the new FD by acting on an object which represents the old incarnation of that FD.
    
    Modifications:
    - Calculate the shutdown change, and only apply what has changed, or exit if no change.
    
    Result:
    Socket.shutdown can not inadvertently affect the state of another logical FD.

commit 99c85ef4f55d098cab482da0955ef3f05617758e
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Mar 24 12:08:37 2016 -0700

    cf171ff52555b9e984a3b9103287f6b897dc8626 Close Regression
    
    Motivation:
    cf171ff52555b9e984a3b9103287f6b897dc8626 introduced a change in behavior when dealing with closing channel in the read loop. This changed behavior may use stale state to determine if a channel should be shutdown and may be incorrect.
    
    Modifications:
    - Revert the usage of potentially stale state
    
    Result:
    Closing a channel in the read loop is based upon current state instead of potentially stale state.

commit 15f3b69b9e3d7b0d61ec32b51cca37f962dece1c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Mar 24 16:23:17 2016 +0100

    [#5033] Fix typo in exception message introduced by acbca192bd93b2691c86c5cec06e4fc1f15d6a05
    
    Motivation:
    
    I introduced a typo as part of acbca192bd93b2691c86c5cec06e4fc1f15d6a05.
    
    Modifications:
    
    Fix typo
    
    Result:
    
    Correct message in exception.

commit 6bf7e2438916bc666d49940af1ff18c68e9d79da
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Mar 24 11:20:54 2016 +0100

    [#5014] Correctly encode / decode zero-length names when encoding DnsRecords.
    
    Motivation:
    
    Zero-length names needs to be "prefixed" by the length as well when encoded into a ByteBuf. Also some servers not correctly prefix these so we should ensure we can workaround this and even decode in such case.
    
    Modifications:
    
    - Always encode the length of the name into the ByteBuf even if its zero-length.
    - If there are no readable bytes for the name just asume its an empty name to workaround dns servers that not fully respect the RFC.
    
    Result:
    
    Correctly encode zero-length names and be able to decode empty names even when the rfc is not strictly followed.

commit 9a183ec38f27ccc1dc541d9a5e6a6cc541a6b0b0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Mar 21 09:55:11 2016 +0100

    Add methods to easily release messages from inbound / outbound buffer of EmbeddedChannel
    
    Motivation:
    
    Often the user uses EmbeddedChannel within unit tests where the only "important" thing is to know if any pending messages were in the buffer and then release these.
    We should provide methods for this so the user not need to manually loop through these and release.
    
    Modifications:
    
    Add methods to easily handle releasing of messages.
    
    Result:
    
    Less boiler-plate code for the user to write.

commit 269677820df53b1b26cc17f772049cd6b7e88c9b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Mar 22 14:29:34 2016 +0100

    Cleanup of codec-mqtt
    
    Motivation:
    
    codec-mqtt had some typos and was not restrict enough in terms of making things final and private constructors.
    
    Modifications:
    
    - Fix typos
    - Make most pojos final
    - Remove redundant else blocks.
    
    Result:
    
    Cleaner and more restrict code.

commit 2c390ae66b42fc7f28e3aa3b5f6eebdd1fd1cbfc
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Mar 17 23:09:29 2016 +0100

    [#5029] Fix type of EpollChannelOption.TCP_QUICKACK
    
    Motivation:
    
    TCP_QUICKACK uses Integer but needs to be Boolean
    
    Modifications:
    
    Fix type
    
    Result:
    
    Be able to use EpollChannelOption.TCP_QUICKACK

commit 3d115349b51f86d7bd3506b0c079f8efe903a820
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Wed Mar 23 12:46:08 2016 +0100

    Fix type inference w/ JDK8
    
    Motivation:
    
    Compile crash w/ JDK8:
    
    ```
    [ERROR]
    /Users/slandelle/Documents/dev/workspaces/workspace-ahc2/async-http-clie
    nt-project/netty-bp/codec-dns/src/main/java/io/netty/handler/codec/dns/D
    nsMessageUtil.java:[176,16] reference to append is ambiguous
      both method append(java.lang.String) in java.lang.StringBuilder and
    method append(java.lang.StringBuffer) in java.lang.StringBuilder match
    ```
    
    Modification:
    
    Force type explicitly
    
    Result:
    
    Class compile w/ JDK8

commit d6bf388343a4aa0aaa8100830193f2b99b124247
Author: Carsten Varming <cvarming@twitter.com>
Date:   Tue Mar 22 20:20:05 2016 -0400

    Prevent nepotism with generational GCs.
    
    Motivation:
    
    If a single Encoder object is promoted to the old generation then every object
    reachable from the promoted object will eventually be promoted as well. A queue
    illustrates the problem very well. Say a sequence of inserts and deletions
    generate an object graph:
    
       A -> B -> C -> D -> E -> F -> G -> H,
    
    the head of the queue is E, the tail of the queue is H, and A, B, C, D are
    dead. If all queue nodes are in the young generation, then a young gc will
    clean up the object graph and leave us with:
    
       E -> F -> G -> H
    
    on the other hand, if B and C were previously promoted to the old generation,
    then a young collection assumes the refernece from C to D is from a live object
    (this is a key result of generational gc, no need to mark the old generation).
    Hence the young collection assumes the refence to D is a gc root and leave us
    with the object graph:
    
       B-> C -> D -> E -> F -> G -> H.
    
    Eventually D, E, F, G, H, and all queue nodes ever seen from this point on will
    be promoted, regardless of their global live or dead status. It is generally
    trivial to fix nepotism issues by simply breaking the reference chain after
    dequeuing a node.
    
    Currently Encoder objects do not null their references when removed from the
    hash map. We have observed a 20X increase in promoted Encoder objects due to
    nepotism.
    
    Modifications:
    
    Null before, after, and next fields when removing Encoder objects from maps.
    
    Result:
    
    Fewer promoted Encoder objects, fewer Encoder objects in the old generation,
    shorter young collection times, old collections spaced further apart (nepotism
    is just really bad). Enjoy.

commit 2941c8393a6cd27d0ea5bd9ccd0f5ec374d6bdd0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Mar 21 21:15:43 2016 +0100

    Upgrade netty-tcnative to 1.1.33.Fork15
    
    Motivation:
    
    We should upgrade to latest netty-tcnative version.
    
    Modifications:
    
    Upgrade to version 1.1.33.Fork15
    
    Result:
    
    Latest netty-tcnative version is used.

commit 3ad55eb83915259dc9faef1a379ccd39fb35ec6f
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Mon Mar 21 18:06:05 2016 -0700

    Speed up the slow path of FastThreadLocal
    
    Motivation:
    
    The current slow path of FastThreadLocal is much slower than JDK ThreadLocal. See #4418
    
    Modifications:
    
    - Add FastThreadLocalSlowPathBenchmark for the flow path of FastThreadLocal
    - Add final to speed up the slow path of FastThreadLocal
    
    Result:
    
    The slow path of FastThreadLocal is improved.

commit a11412fab025d4963f0bab6589314ae1103db19a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Mar 22 14:42:11 2016 +0100

    Cleanup transport-native-epoll code.
    
    Motivation:
    
    The code of transport-native-epoll missed some things in terms of static keywords, @deprecated annotations and other minor things.
    
    Modifications:
    
    - Add missing @deprecated annotation
    - Not using FQCN in javadocs
    - Add static keyword where possible
    - Use final fields when possible
    - Remove throws IOException from method where it is not needed.
    
    Result:
    
    Cleaner code.

commit e7b7b77efc6e3e8ba99cd7028a7f51ce938a87ae
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Mar 22 12:46:01 2016 +0100

    [#5013] Fix typo in DefaultStompFrame.toString() method.
    
    Motivation:
    
    DefaultStompFrame.toString() implementations returned a String that contained DefaultFullStompFrame.
    
    Modifications:
    
    Replace DefaultFullStompFrame with DefaultStompFrame.
    
    Result:
    
    Less confusing and more correct return value of toString()

commit ee4d2c4b74eef3208cac0e4e13f5916d886655f1
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Mar 22 12:43:10 2016 +0100

    Correctly handle DefaultStompFrame.retain(increment)
    
    Motivation:
    
    DefaultStompFrame.retain(increment) missed to pass on the increment parameter.
    
    Modifications:
    
    Correctly pass on increment paramter.
    
    Result:
    
    Correctly handle the retain when increment value is given.

commit b0242585d74f4307cd75e32a5d8f59f45346de45
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Mar 22 16:27:19 2016 +0100

    Cleanup code and so eliminate warnings.
    
    Motivation:
    
    There were some warning in the resolver-dns code base.
    
    Modifications:
    
    - Fix javadocs
    - Use the base class to call static method.
    
    Result:
    
    Cleaner code.

commit 9ebb4b7164b39a6ef9719d6ac15624ba80597191
Author: Bruno Harbulot <bruno@distributedmatter.net>
Date:   Sun Mar 13 16:34:25 2016 +0000

    Using distinct aliases when building the trust manager factory, and renamed trustCertChain into trustCertCollection.
    
    Motivation:
    
    SSLContext.buildTrustManagerFactory(...) builds a KeyStore to
    initialize the TrustManagerFactory from an array of X509Certificates,
    assuming that array is a chain and that each certificate will have a
    unique Subject Distinguised Name.
    However, the collection of certificates used as trust anchors is generally
    not a chain (it is an unordered collection), and it is legitimate for it
    to contain multiple certificates with the same Subject DN.
    The existing code uses the Subject DN as the alias name when filling in
    the `KeyStore`, thereby overwriting other certificates with the same
    Subject DN in this collection, so some certificates may be discarded.
    In addition, the code related to building trust managers can take an array of
    X509Certificate instances to use as trust anchors. The variable name is
    usually trustCertChain, and the documentation refers to them as a "chain".
    However, while it makes sense to talk about a "chain" from a keymanager
    point of view, these certificates are just an unordered collection in a
    trust manager. (There is no chaining requirement, having the Subject DN
    matching its predecessor's Issuer DN.)
    This can create confusion to for users not used with PKI concepts.
    
    Modifications:
    
    SSLContext.buildTrustManagerFactory(...) now uses a distinct alias for each
    array (simply using a counter, since this name is never used for reference
    later). This patch also includes a unit test with CA certificates using the
    same Subject DN.
    Also renamed trustCertChain into trustCertCollection, and changed the
    references to "chain" in the Javadoc.
    
    Result:
    
    Each loaded certificate now has a unique identifier when loaded, so it is
    now possible to use multiple certificates with the same Subject DN as
    trust anchors.
    Hopefully, renaming the parameter should also reduce confusion around PKI
    concepts.

commit 881ff3cd98a210bad6c4a137aa031cd221804450
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Fri Mar 18 17:40:28 2016 +0100

    Drop broken DefaultCookie name validation, close #4999
    
    Motivation:
    
    DefaultCookie constructor performs a name validation that doesn’t match
    RFC6265. Moreover, such validation is already performed in strict
    encoders and decoders.
    
    Modifications:
    
    Drop DefaultCookie name validation, rely on encoders and decoders.
    
    Result:
    
    no more duplicate broken validation

commit 48506f5b055da028c37b4961ce9a2620b4789e59
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Mar 18 13:39:02 2016 +0100

    [#4993] Correctly handle trailing dot in DNS requests and responses for the hostname.
    
    Motivation:
    
    We need to handle the trailing dot in the correct manner when creating DNS questions and responses.
    
    Modifications:
    
    - Add a trailing dot if not given to the hostname when construct a AbstractDnsRecord (this is the same as dig does).
    
    Result:
    
    Correctly handle trailing dots.

commit 42419d918d26fa33c4a000e927df32b081eb73b9
Author: Karas Lukáš <karas@avast.com>
Date:   Mon Mar 21 18:48:45 2016 +0100

    Fix setBytes when source is read-only ByteBuffer and target is pooled buffer
    
    Motivation:
    
    The method setBytes creates temporary heap buffer when source buffer is read-only.
    But this temporary buffer is not used correctly and may lead to data corruption.
    This problem occurs when target buffer is pooled and temporary buffer
    arrayOffset() is not zero.
    
    Modifications:
    
    Use correct arrayOffset when calling PlatformDependent.copyMemory.
    Unit test was added to test this case.
    
    Result:
    
    Setting buffer content works correctly when target is pooled buffer and source
    is read-only ByteBuffer.

commit 28d03adbfef2cd445b7844f3aca14266a718c243
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Mar 21 11:51:50 2016 +0100

    [maven-release-plugin] prepare for next development iteration

commit 4653dc1d05cfac8766bed63c4dd28c8d06128423
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Mar 21 11:51:12 2016 +0100

    [maven-release-plugin] prepare release netty-4.1.0.CR4

commit 93306310972cb36c8cb04ac0bb4e3b9ef58c410d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Mar 17 21:17:36 2016 +0100

    Ensure all pending SSL data is written before closing channel during handshake error.
    
    Motivation:
    
    We need to ensure we call ctx.flush() before closing the actual channel when an handshake failure took place. If we miss to do so we may not send all pending data to the remote peer which also include SSL alerts.
    
    Modifications:
    
    Ensure we call ctx.flush() before ctx.close() on a handshake error.
    
    Result:
    
    All pending data (including SSL alerts) are written to the remote peer on a handshake error.

commit 4e1760c91bacad2b3287f737df5806498fea70bf
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Mar 18 21:15:20 2016 +0100

    Allow disable Recycler via -Dio.netty.recycler.maxCapacity=0
    
    Motivation:
    
    It should be possible to disable the Recycler with -Dio.netty.recycler.maxCapacity=0, but because of a typo this is not the case.
    
    Modifications:
    
    Replace <= with < to make it posible to disable the Recycler.
    
    Result:
    
    Correct behaviour when using -Dio.netty.recycler.maxCapacity=0

commit b26652a934d8e75d36ff14ac9d7cf5665f998f90
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Mar 18 14:28:00 2016 +0100

    Fix typo in log message during static init of Recycler.
    
    Motivation:
    
    Fix a typo in the log message of the static initializer of Recycler.
    
    Modifications:
    
    Fix typo.
    
    Result:
    
    Correctly log system property io.netty.recycler.maxCapacity.

commit ebfb2832b232644adc5900135d2ff38252b02b70
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Mar 16 14:58:01 2016 +0100

    Throw exception if KeyManagerFactory is used with OpenSslClientContext
    
    Motivation:
    
    We currently not supported using KeyManagerFactory with OpenSslClientContext and so should throw an exception if the user tries to do so. This will at least not give suprising and hard to debug problems later.
    
    Modifications:
    
    Throw exception if a user tries to construct a OpenSslClientContext with a KeyManagerFactory
    
    Result:
    
    Fail fast if the user tries to use something that is not supported.

commit 15b1a94b2f3f713b65c7b8ab38136ebd4f487ee6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Mar 16 15:04:29 2016 +0100

    Ensure native memory is released when OpenSslServercontext constructor throws exception
    
    Motivation:
    
    We need to ensure we do all checks inside of the try / catch block so we free native memory that was allocated in the constructor of the super class in a timely manner.
    Modifications:
    
    Move all checks inside of the try block.
    
    Result:
    
    Correctly release native memory (and not depend on the finalizer) when a check in the constructors fails

commit 4e3a4130470626fbaa0bad712001887b0e4ad8f7
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Mar 18 12:58:46 2016 +0100

    Correctly handle UpgradeEvent.release(decrement).
    
    Motivation:
    
    We missed to pass the decrement value to the wrapped FullHttpRequest and so missed to decrement the reference count in the correct way.
    
    Modifications:
    
    Correctly pass the decrement value to the wrapped request.
    
    Result:
    
    UpgradeEvent.release(decrement) works as expected.

commit fc099292fda032289f656ebff7413d5a570a06a2
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Mar 7 16:20:45 2016 -0800

    HTTP/2 DefaultHttp2ConnectionEncoder data frame size incorrect if error
    
    Motivation:
    If an error occurs during a write operation then DefaultHttp2ConnectionEncoder.FlowControlledData will clear the CoalescingBufferQueue which will reset the queue's readable bytes to 0. To recover from an error the DefaultHttp2RemoteFlowController will attempt to return bytes to the flow control window, but since the frame has reset its own size this will lead to invalid flow control accounting.
    
    Modifications:
    - DefaultHttp2ConnectionEncoder.FlowControlledData should not reset its size if an error occurs
    
    Result:
    No more flow controller errors due to DefaultHttp2ConnectionEncoder.FlowControlledData setting its size to 0 if an error occurs.

commit 8ec594c6eb32f34f154979bf2bd35368055912a1
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Mar 14 13:55:52 2016 +0100

    Change HttpServerUpgradeHandler.UpgradeCodec to allow aborting upgrade
    
    Motivation:
    
    HttpServerUpgradeHandler.UpgradeCodec.prepareUpgradeResponse should allow to abort the upgrade and so just continue with using HTTP. Beside this we should only pass in the response HttpHeaders as this is inline with the docs.
    
    Modifications:
    
    - UpgradeCodec.prepareUpgradeResponse now allows to return a boolean and so allows to specifiy if the upgrade should take place.
    - Change the param from FullHttpResponse to HttpHeaders to be inline with the javadocs.
    
    Result:
    
    More flexible and correct handling of upgrades.

commit d747438366cffbbfaec80ac114a5b7fad2e9cf2c
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Fri Mar 18 09:23:24 2016 +0100

    Add ! to allowed cookie value chars
    
    Motivation:
    
    ! is missing from allowed cookie value chars, as per https://tools.ietf.org/html/rfc6265#section-4.1.1.
    Issue was originally reported on Play!, see https://github.com/playframework/playframework/issues/4460#issuecomment-198177302.
    
    Modifications:
    
    Stick to RFC6265 ranges.
    
    Result:
    
    RFC6265 compliance, ! is supported

commit 0320ccb59f3d391a17a6af90b823f390e2314087
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Mar 17 12:10:23 2016 +0100

    Let getSoError() throw IOException as well
    
    Motivation:
    
    In commit acbca192bd93b2691c86c5cec06e4fc1f15d6a05 we changed to have our native operations which either gall getsockopt or setsockopt throw IOExceptions (to be more specific we throw a ClosedChannelException in some cases). Unfortunally I missed to also do the same for getSoError() and missed to add throws IOException to the native methods.
    
    Modifications:
    
    - Correctly throw IOException from getSoError()
    - Add throws IOException to native methods where it was missed.
    
    Result:
    
    Correct declaration of getSoError() and other native methods.

commit ed9d6c79bca67c181b1325a5059af47d40952a01
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Mar 16 08:47:40 2016 +0100

    [#4972] Remove misleading argument from HttpServerUpgradeHandler.UpgradeCodec.upgradeTo
    
    Motivation:
    
    upgradeTo(...) takes the response as paramater, but the respone itself was already written to the Channel. This gives the user the impression the response can be changed or even act on it which may not be safe anymore once it was written and has been released.
    
    Modifications:
    
    Remove the response param from the method.
    
    Result:
    
    Less confusion and safer usage.

commit 8d499a2419e616342c6076f1994deba87447fbb5
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Mar 17 10:06:37 2016 +0100

    Fix calculation of PoolArena metrics after introducing a regression in 89da788fd23f3e745c799abb575a98696ebcdc2c

commit 5c023976899d7b218dac91d7e8ff160545583dd4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Mar 16 14:51:33 2016 +0100

    Support private key encrypted with empty password
    
    Motivation:
    
    A user may use a private key which is encrypted with an empty password. Because of this we should only handle a null password in a special way.
    
    Modifications:
    
    - Correctly handle private key that is encrypted with empty password.
    - Make OpenSsl*Context implementions consistent in terms of initialization in the constructor.
    
    Result:
    
    Correctly support private key that is encrypted with empty password.

commit daa4efcfef0f747b7ce8e77335881fbd5692bffa
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Mar 14 09:09:24 2016 +0100

    Add proper synchronization when access metrics.
    
    Motivation:
    
    We also need to add synchronization when access fields to ensure we see the latest updates.
    
    Modifications:
    
    Add synchronization when read fields that are written concurrently.
    
    Result:
    
    Ensure correct visibility of updated.

commit 8dbf5d02e53a72c42467b8dc0a5e1482d5f49af4
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Mar 9 18:16:29 2016 -0800

    EPOLL SO_LINGER=0 sends FIN+RST
    
    Motivation:
    If SO_LINGER is set to 0 the EPOLL transport will send a FIN followed by a RST. This is not consistent with the behavior of the NIO transport. This variation in behavior can cause protocol violations in streaming protocols (e.g. HTTP) where a FIN may be interpreted as a valid end to a data stream, but RST may be treated as the data is corrupted and should be discarded.
    
    https://github.com/netty/netty/issues/4170 Claims the behavior of NIO always issues a shutdown when close occurs. I could not find any evidence of this in Netty's NIO transport nor in the JDK's SocketChannel.close() implementation.
    
    Modifications:
    - AbstractEpollChannel should be consistent with the NIO transport and not force a shutdown on every close
    - FileDescriptor to keep state in a consistent manner with the JDK and not allow a shutdown after a close
    - Unit tests for NIO and EPOLL to ensure consistent behavior
    
    Result:
    EPOLL is capable of sending just a RST to terminate a connection.

commit 01835fdf18d2e40b1ac13682995a119edc05d590
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Sun Jan 24 21:41:31 2016 -0800

    Add LineEncoder to append a line separator automatically
    
    Motivation:
    
    See #1811
    
    Modifications:
    
    Add LineEncoder and LineSeparator
    
    Result:
    
    The user can use LineEncoder to write a String with a line separator automatically

commit abbdc70d8bed7fffc9b32eae7031e6caa0832a42
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Tue Mar 15 22:25:39 2016 -0700

    Validate MQTT CONNECT reserved flag in variable header
    
    Motivation:
    
    According to the MQTT 3.1.1 Protocol Specification: The Server MUST validate that the reserved flag in the CONNECT Control Packet is set to zero and disconnect the Client if it is not zero. (http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc385349230)
    
    Resolves #4182
    
    Modifications:
    
    Check the CONNECT reserved flag for MQTT 3.1.1. If it's not 0, throw an exception.
    
    Result:
    
    If the CONNECT reserved flag, a decode failure will be emitted.

commit 6e840d8e62e98590e129ab6f21e2deba46bfcacf
Author: Tibor Csögör <tibi@tiborius.net>
Date:   Wed Mar 16 18:49:18 2016 +0100

    trivial javadoc fixes
    
    - fix the formatting of the diagram in ChannelFuture's javadoc
    - update external link in AutobahnServer
    - fix various spelling issues

commit c3c1b4a6d2bc66b7ae01a1731656d4bd6dc915b1
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Mar 16 11:16:41 2016 +0100

    [#4937] [#4935] Correctly valid domain name length and convert to ASCII.
    
    Motivation:
    
    Domain name labels must be converted to ASCII and not be longer then 63 chars.
    
    Modifications:
    
    Correctly convert to ASCII which also will enforce the 63 chars length.
    
    Result:
    
    Correctly guard against invalid input.

commit 6796604f4653450e2579dc097b6c58f79ddb40c6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Mar 14 11:21:56 2016 +0100

    Remove double spacing
    
    Motivation:
    
    We had some double spacing in the methods which should be removed to keep things consistent.
    
    Modifications:
    
    Remove redundant spaces.
    
    Result:
    
    Cleaner / consistent coding style.

commit 7d12333c3842c92942d8a1d9a5e5cb34876c6bbe
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Mar 14 09:00:50 2016 +0100

    Add final keyword which was missing in 47b598e6ce6c1f0e57d6955d10652dd5e5bc1462
    
    Motivation:
    
    The two fields should have final keyword.
    
    Modifications:
    
    Add final keyword
    
    Result:
    
    Cleaner code.

commit 83c349ffa94d3992c4ee511d3625afc0c97c12bb
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Tue Mar 15 15:40:09 2016 +0100

    Fix wrong use of assertTrue in unit test.
    
    Motivation:
    
    My previous commit b88a980482d2ae introduced a flawed unit test,
    that executes an assertion in a different thread than the test thread.
    If this assertion fails, the test doesn't fail.
    
    Modifications:
    
    Replace the assertion by a proper workaround.
    
    Result:
    
    More correct unit test

commit acbca192bd93b2691c86c5cec06e4fc1f15d6a05
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Mar 15 10:38:25 2016 +0100

    ChannelConfig operations should wrap ClosedChannelException if Channel was closed before.
    
    Motivation:
    
    To be consistent with the JDK we should ensure our native methods throw a ClosedChannelException if the Channel was previously closed. This will then be wrapped in a ChannelException as usual. For all other errors we continue to just throw a ChannelException directly.
    
    Modifications:
    
    Ensure getsockopt and setsockopt will throw a ClosedChannelException if the channel was closed before, on other errors we throw a ChannelException as before diretly.
    
    Result:
    
    Consistent with the NIO Channel implementations.

commit b88a980482d2aef1163a9abe759f68e685550052
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Mon Mar 14 17:25:43 2016 +0100

    Change arena to thread cache mapping algorithm to be closer to ideal.
    
    Motivation:
    Circular assignment of arenas to thread caches can lead to less than optimal
    mappings in cases where threads are (frequently) shutdown and started.
    
    Example Scenario:
    There are a total of 2 arenas. The first two threads performing an allocation
    would lead to the following mapping:
    
    Thread 0 -> Arena 0
    Thread 1 -> Arena 1
    
    Now, assume Thread 1 is shut down and another Thread 2 is started. The current
    circular assignment algorithm would lead to the following mapping:
    
    Thread 0 -> Arena 0
    Thread 2 -> Arena 0
    
    Ideally, we want Thread 2 to use Arena 1 though.
    
    Presumably, this is not much of an issue for most Netty applications that do all
    the allocations inside the eventloop, as eventloop threads are seldomly shut down
    and restarted. However, applications that only use the netty-buffer package
    or implement their own threading model outside the eventloop might suffer from
    increased contention. For example, gRPC Java when using the blocking stub
    performs some allocations outside the eventloop and within its own thread pool
    that is dynamically sized depending on system load.
    
    Modifications:
    
    Implement a linear scan algorithm that assigns a new thread cache to the arena
    that currently backs the fewest thread caches.
    
    Result:
    
    Closer to ideal mappings between thread caches and arenas. In order to always
    get an ideal mapping, we would have to re-balance the mapping whenever a thread
    dies. However, that's difficult because of deallocation.

commit 26811b53ab7caa19014ed274e4ef96ce482de2b5
Author: johnou <johno@sulake.com>
Date:   Wed Mar 2 20:18:45 2016 +0100

    Adding support for tcnative fedora flavour in uber jar
    
    Motivation:
    
    We want to allow the use of an uber jar that contains shared dynamic libraries for all platforms (including fedora).
    
    Modifications:
    
    Modified OpenSsl to try and load the fedora library if the OS is Linux and the platform specified library fails before using the default lib.
    
    Result:
    
    True uber support.

commit 6a2425b846ec04c40da3bf7482f4c464334cb2b2
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Mar 7 10:05:22 2016 -0800

    HTTP/2 SimpleChannelPromiseAggregator don't fail fast
    
    Motivation:
    Http2Codec.SimpleChannelPromiseAggregator currently fails fast if as soon as a tryFailure or setFailure method is called. This can lead to write operations which pass the result of SimpleChannelPromiseAggregator.newPromise to multiple channel.write calls throwing exceptions due to the promise being already done. This behavior is not expected by most of the Netty codecs (SslHandler) and can also create unexpected leaks in the http2 codec (DefaultHttp2FrameWriter).
    
    Modifications:
    - Http2Codec.SimpleChannelPromiseAggregator shouldn't complete the promise until doneAllocatingPromises is called
    - Usages of Http2Codec.SimpleChannelPromiseAggregator should be adjusted to handle the change in behavior
    - What were leaks in DefaultHttp2FrameWriter should be fixed to catch any other cases where ctx.write may throw
    
    Result:
    SimpleChannelPromiseAggregator won't generate promises which are done when newPromise is called.

commit 45849b2fa86070a4320b0756cf024012f5291b02
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Mar 9 14:39:53 2016 -0800

    Deprecate PromiseAggregator
    
    Motivation:
    PromiseAggregator's API allows for the aggregate promise to complete before the user is done adding promises. In order to support this use case the API structure would need to change in a breaking manner.
    
    Modifications:
    - Deprecate PromiseAggregator and subclasses
    - Introduce PromiseCombiner which corrects these issues
    
    Result:
    PromiseCombiner corrects the deficiencies in PromiseAggregator.

commit e3bf6799983eea213f33266d60a44428d3b19da5
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Mar 10 14:58:46 2016 +0100

    Ensure connect promise is notifed before fireChannelActive() is called. Related to [#4927]
    
    Motivation:
    
    We should always first notify the promise before trigger an event through the pipeline to be consistent.
    
    Modifications:
    
    Ensure we notify the promise before fire event.
    
    Result:
    
    Consistent behavior

commit 4fb585965cf7613dc1011b23f09114135a254399
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Sun Mar 6 17:58:48 2016 -0800

    Add DatagramPacketEncoder and DatagramPacketDecoder
    
    Motivation:
    
    UDP-oriented codec reusing the existing encoders and decoders would be helpful. See #1350
    
    Modifications:
    
    Add DatagramPacketEncoder and DatagramPacketDecoder to reuse the existing encoders and decoders.
    
    Result:
    
    People can use DatagramPacketEncoder and DatagramPacketDecoder to wrap existing encoders and decoders to create UDP-oriented codec.

commit 52bfaae1a023de27d6c84d03d4db71ef7ac46d39
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Mar 8 14:05:29 2016 +0100

    Fix EpollServerSocketConfig.isFreebind()
    
    Motivation:
    
    EpollServerSocketConfig.isFreebind() throws an exception when called.
    
    Modifications:
    
    Use the correct getsockopt arguments.
    
    Result:
    
    No more exception when call EpollServerSocketConfig.isFreebind()

commit c65165c491680e8c11253c116fe39e11f64d66c5
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Mar 8 16:46:55 2016 +0100

    Remove TCP_MD5 from EpollServerChannelConfig.
    
    Motivation:
    
    TCP_MD5 is only supported by SocketChannels so remove it from EpollServerChannelConfig which is generic.
    
    Modifications:
    
    Remove invalid code.
    
    Result:
    
    Remove invalid / dead code.

commit 97df3cb03939eabe30c3cc091eddbe4cb9be2fda
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Mar 10 14:08:45 2016 +0100

    [#4936] NetUtil can prevent using Netty due to SecurityManager denial
    
    Motivation:
    
    A custom SecurityManager may prevent calling File.exists() and so throw a SecurityException in the static init block of NetUtil.
    
    Modifications:
    
    Correctly catch the exception and so allow to static init NetUtil.
    
    Result:
    
    Allow static init method of NetUtil to work even with custom SecurityManager.

commit 35771dd1cdd20e291a4a1a15ef04da57329c41db
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Sun Mar 13 22:27:56 2016 +0100

    Fix race in PoolArena.allocate. Fixes #4829
    
    Motivation:
    
    The statistic counters PoolArena.(allocationsTiny|allocationsSmall) are
    not protected by a per arena lock, but by a per size class lock. Thus,
    two concurrent allocations of different size (class) could lead to a
    race and ultimately to wrong statistics.
    
    Modifications:
    
    Use a thread-safe LongCounter instead of a plain long data type.
    
    Result:
    
    Fewer data races.

commit e7ee6abd707f3f0b3cae6a4190b7bb9415a1a568
Author: Max Ng <max_ng@apple.com>
Date:   Mon Mar 7 15:58:38 2016 -0800

    Guard against re-entrance in PendingWriteQueue.
    
    Motivation:
    
    PendingWriteQueue should guard against re-entrant writes once
    removeAndFailAll() is run.
    
    Modifications:
    
    removeAndFailAll() should repeat until the queue is finally empty.
    
    Result:
    
    assertEmpty() will always hold.

commit 404666d247504e1bbffbeb87445628735b9e2342
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Mar 4 17:08:40 2016 -0800

    HTTP/2 ByteBufUtil.writeUtf8 cleanup
    
    Motiviation:
    691bc1690e9542d6093b91ffe1fbdf7d075bcd42 made writeUtf8 consistent with String.getBytes() so that it never throws.
    94f27be59b637c74763cc3b9fd27cf628b59f7bd provided a writeUtf8 method which takes a ByteBufAllocator to do an appropriately sized buffer allocation.
    
    Result:
    - Assume writeUtf8 will not throw in HTTP/2 codec
    - Use the new writeUtf8 method
    
    Result:
    Cleaner code in codec-http2.

commit bfbef036a8c1121083b485a98b9cb04a84e7dfea
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Feb 27 17:56:41 2016 -0800

    EPOLL ET AutoRead
    
    Motivation:
    EPOLL does not support autoread when in ET mode.
    
    Modifications:
    - EpollRecvByteAllocatorHandle should not unconditionally force reading just because ET is enabled
    - AbstractEpollChannel and all derived classes which implement epollInReady must support a variable which indicates
    there may be more data to read. The variable will be used when read is called to simulate a EPOLL wakeup and call epollInReady if necessary. This will ensure that if we don't read until EAGAIN that we will try to read again and not rely on EPOLL to notify us.
    
    Result:
    EPOLL ET supports auto read.

commit bd6040a36e335f3586df9dd81655b3d73b35da2a
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Mar 2 16:24:52 2016 -0800

    HTTP/2 DefaultHttp2Connection NPE
    
    Motivation:
    If while iterating the active streams a close operation occurs this will be queued and process after the iteration has completed to avoid a concurrent modification exception. However it is possible that during the iteration the stream which was closed could have been removed from the priority tree and its parent would be set to null. Then after the iteration completes the close operation will attempt to dereference the parent and results in a NPE.
    
    Modifications:
    - pending close operations should verify the stream's parent is not null before processing the event
    
    Result:
    No More NPE.

commit 6536c7c4efda734d268802658838e57a2ec444a4
Author: Mahdi Mohammadi <mm@binary.com>
Date:   Thu Mar 10 22:04:48 2016 +0100

    Updating Branches to look section to match the current branching structure of the project

commit 3d7cec63769b32ad323e86d168a2e1237667ff32
Author: Julien Viet <julien@julienviet.com>
Date:   Wed Mar 9 21:58:40 2016 +0100

    Bug fix for HttpPostMultipartRequestDecoder part decoding with an invalid charset not reported as an ErrorDataDecoderException
    
    Motivation:
    
    The current HttpPostMultipartRequestDecoder can decode multipart/form-data parts with a Content-Type that specifies a charset. When this charset is invalid the Charset.forName() throws an unchecked UnsupportedCharsetException. This exception is not catched by the decoder. It should actually be rethrown as an ErrorDataDecoderException, because the developer using the API would expect this validation failure to be reported as such.
    
    Modifications:
    
    Add a catch block for UnsupportedCharsetException and rethrow it as an ErrorDataDecoderException.
    
    Result:
    
    UnsupportedCharsetException are now rethrown as ErrorDataDecoderException.

commit 58c63b788857e503f3b48bc0d2d794d504495acb
Author: Fabian Lange <lange.fabian@gmail.com>
Date:   Sun Feb 28 20:33:16 2016 +0100

    Add support for directly decoding/encoding DNS PTR Records
    
    Motivation:
    
    The current implementation will provide a DnsRawRecord, which, while
    containing the host name it resolves to, would require the user to
    decode the name using the decode method currently private to
    DefaultDnsRecordDecoder, which in fact means copying it.
    
    Modifications:
    
    Introduce DnsPtrRecord, which is a specialization of DnsRecord which
    provides a decoded host name.
    
    Result:
    
    PTR Records are much easier to work with, as the name is decoded already.

commit 45d291bb15904de91a519c542ff1f91bac1a873a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Mar 3 14:23:09 2016 +0100

    Add asserts so users will see errors when try to use methods from outside the EventLoop.
    
    Motivation:
    
    We should guard users from using Unsafe methods from outside the EventLoop if not designed to do so.
    
    Modifications:
    
    Add asserts
    
    Result:
    
    Easier for users to detect miss-use.

commit d09547deb8d0b1de43637f206d49711535fd9e09
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Mar 4 10:32:11 2016 +0100

    Add support for TCP_DEFER_ACCEPT and TCP_QUICKACK
    
    Motivation:
    
    When using the native transport have support for TCP_DEFER_ACCEPT or / and TCP_QUICKACK can be useful.
    
    Modifications:
    
    - Add support for TCP_DEFER_ACCEPT and TCP_QUICKACK
    - Ad unit tests
    
    Result:
    
    TCP_DEFER_ACCEPT and TCP_QUICKACK are supported now.

commit d0f7f98d22e1c9be6b4a00025e7bc6ebab42d4ea
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Mar 7 09:33:42 2016 -0800

    e2f5012 unit test cleanup
    
    Motivation:
    e2f5012 added unit tests which did not verify the buffer was released as it was intended to.
    
    Modification:
    - Unit tests must verify release is called
    
    Result:
    Unit tests enforce that ByteBufs are released.

commit e2f5012f3bbbdccc0d6e1736f4d68a83c4b3101f
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Mar 1 17:20:06 2016 -0800

    DefaultChannelHandlerInvoker write leak
    
    Motivation:
    DefaultChannelHandlerInvoker.invokeWrite calls a utility method validatePromise which may throw if the arguments are not valid. If this method throws then the message will not be released.
    
    Modifications:
    - If an exception is thrown the message should be released
    
    Result:
    No more leak in DefaultChannelHandlerInvoker.invokeWrite

commit ef8dcae9afa672d6081f343754de577fd8e0f689
Author: Trustin Lee <t@motd.kr>
Date:   Mon Mar 7 11:12:33 2016 +0900

    Fix potential infinite loop when resolving CNAME records
    
    Related: #4771
    
    Motivation:
    
    A malicious or misconfigured DNS server can send the CNAME records that
    resolve into each other, causing an unexpected infinite loop in
    DnsNameResolverContext.onResponseCNAME().
    
    Modifications:
    
    - Remove the dereferenced CNAME from the alias map so that infinite loop
      is impossible.
    - Fix inspection warnings and typos in DnsNameResolverTest
    
    Result:
    
    Fixes #4771

commit e2d4e222431014506d592af7d379824e21034970
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Fri Mar 4 23:28:25 2016 -0800

    Add CharsetUtil.encoder/decoder() methods
    
    Motivation:
    
    See #3321
    
    Modifications:
    
    1. Add CharsetUtil.encoder/decoder() methods
    2. Deprecate CharsetUtil.getEncoder/getDecoder() methods
    
    Result:
    
    Users can use new CharsetUtil.encoder/decoder() to specify error actions

commit d8658989e1a9a998373886738a17ba8cc9e270ae
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Mar 4 10:40:46 2016 +0100

    Use smaller connect timeout to speed up tests.
    
    Motivation:
    
    For on tests we expected a ConnectTimeoutException but used the default timeout of 10 seconds. This slows down testing.
    
    Modifications:
    
    Use connect timeout of 1 second in unit test.
    
    Result:
    
    Faster execution of unit test.

commit 4095cb253aa3895d0cbd1e0d9eb022fa0cee32d0
Author: Mike Smith <michaels@netflix.com>
Date:   Sat Mar 5 17:20:49 2016 -0800

    Just a couple of minor javadoc fixes

commit 900353af5212b090e65b279777fb021a88136622
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Mar 4 17:04:18 2016 -0800

    HTTP/2 Reduce Log Level
    
    Motivation:
    https://github.com/netty/netty/commit/83c4aa6ad880445856551de1f7d4aeb40ee06df4 changed the log level to warn, but should have changed to debug.
    
    Modifications:
    - Change the log level to debug in Http2ConnectionHandler if the GO_AWAY fails to send. The write failure could be the result of the channel already being closed.
    
    Result:
    Fixes https://github.com/netty/netty/issues/4930.

commit c295f2239049a677527fa2be7ab14d7e413da4b9
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Thu Mar 3 23:06:30 2016 -0800

    Add junit timeout listener to print the full thread dump on test timeout
    
    Motivation:
    
    See #3172
    
    Modifications:
    
    https://github.com/netty/netty-build/pull/6 added a junit timeout listener to the netty-build project. This patch just set it up.
    
    Result:
    
    If a test is set the timeout parameter using junit's @Test(timeout = ...) and the timeout is triggered, a full stack trace dump will be outputted and also output the deadlocks if any.

commit 68bbd4e9669aab4c29dcc1d23ef331aaa2aee333
Author: Sergey Polovko <jamel@yandex-team.ru>
Date:   Sun Feb 28 00:50:11 2016 +0300

    Handle only those http requests that equal to adjusted websocket path
    
    Motivation:
    
    It will be easier to support websockets in server application by using WebSocketServerProtocolHandshakeHandler class and not reinvent its functionality. But currently it handles all http requests as if they were websocket handshake requests.
    
    Modifications:
    
    Check if http request path is equals to adjusted websocket path.
    Fixed example of websocket server implementation.
    
    Result:
    
    WebSocketServerProtocolHandshakeHandler handles only websocket handshake requests.

commit 0d3eda38e15582d1dac05920787f1c9f3a9f781e
Author: Dmitry Spikhalskiy <dmitry@spikhalskiy.com>
Date:   Wed Feb 24 03:24:08 2016 +0300

    Helper method to get mime-type from Content-Type header of HttpMessage

commit 4b5b23080231275733361d2dda966fce760cc295
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Mar 2 11:45:48 2016 -0800

    HTTP/2 DefaultHttp2HeadersDecoder weighted average error
    
    Motiviation:
    cfcee5798d6680d87aec3ae68cdded74a1402f84 introduced code to resize the headers based upon a weighted average. The weight used for new entries was initialized using integer arithmetic when it should have been floating point arithmetic and so new values contribute 0 weight.
    
    Modifications:
    - Cast to float when initializing
    
    Result:
    Weighted average does not give 0 weight to new headers in DefaultHttp2HeadersDecoder.

commit 9aac6dac2e934c7fdcca234607afbd2595b4aebe
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 25 16:20:41 2016 +0100

    [#4386] ByteToMessage.decodeLast(...) should not call decode(...) if buffer is empty.
    
    Motivation:
    
    If the input buffer is empty we should not have decodeLast(...) call decode(...) as the user may not expect this.
    
    Modifications:
    
    - Not call decode(...) in decodeLast(...) if the input buffer is empty.
    - Add testcases.
    
    Result:
    
    decodeLast(...) will not call decode(...) if input buffer is empty.

commit c4fbc0642de213774c479b3fb61d5f05abc8fc62
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Feb 19 17:50:25 2016 -0800

    HTTP/2 stream removed from map before onStreamClosed called
    
    Motivation:
    The interface contract of Http2Connection.Listener.onStreamClosed says that the stream will be removed from the active stream map, and not necessarily the stream map. If the channel becomes inactive we may remove from the stream map before calling onStreamClosed.
    
    Modifications:
    - Don't remove from the stream map during iteration until after onStreamClosed is called
    
    Result:
    Expectations of onStreamClosed interface are not violated

commit 94f27be59b637c74763cc3b9fd27cf628b59f7bd
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Feb 26 09:27:49 2016 -0800

    ByteBufUtil writeUtf8 and writeAscii helper methods
    
    Motivation:
    Utility methods in ByteBufUtil to writeUtf8 and writeAscii expect a buffer to already be allocated. If the user does not have a buffer allocated they have to know details of the encoding in order to know the size of the buffer to allocate.
    
    Modifications:
    - Add writeUtf8 and writeAscii which take a ByteBufAllocator and allocate a ByteBuf of the correct size for the user
    
    Result:
    ByteBufUtil methods which are easier to use if the user doesn't already have a ByteBuf.

commit 4a5e484c5a833a4611779fcea0a7457933d3bb83
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Fri Feb 26 19:02:35 2016 -0800

    Add xml-maven-plugin to check indentation and fix violations
    
    Motivation:
    
    See https://github.com/netty/netty-build/issues/5
    
    Modifications:
    
    Add xml-maven-plugin to check indentation and fix violations
    
    Result:
    pom.xml will be checked in the PR build

commit a2e113b987291ddb78f23c0af2c4ed6776e2a344
Author: Sergey Polovko <jamel@yandex-team.ru>
Date:   Sun Feb 28 22:09:09 2016 +0300

    Use ByteProcessor.FIND_LF to find end of line
    
    Motivation:
    
    Each call of ByteBuf.getByte(int) method does boundary checking. This can be eliminated by using ByteBuf.forEachByte(ByteProcessor) method and ByteProcessor.FIND_LF processor.
    
    Modifications:
    
    Find end of line with ByteProcessor.FIND_LF
    
    Result:
    
    A little better performance of LineBasedFrameDecoder.

commit a4846e615390ddd9ebf2a51e46072aedbaa63384
Author: cnapagoda <cnapagoda@gmail.com>
Date:   Sun Feb 28 13:57:41 2016 +0530

    issues/4909 - Adding paxexam version
    
    Motivation:
    
    Build warning message is shown when building netty project. Due to missing paxexam version below[1] warning message is shown when building netty project.
    
    Modifications:
    
    Added paxexam plugin version into root pom
    
    Result:
    
    paxexam related warning will not be displayed when building the project.
    
    [1]. #4909

commit 0bea10b0b064d7983a1422af792eeb70e511eac4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Feb 23 11:14:08 2016 +0100

    [#4892] Make Snappy class public
    
    Motivation:
    
    Some people may want to use the Snappy class directly to encode / decode ByteBufs.
    
    Modifications:
    
    Make the Snappy class public and final.
    
    Result:
    
    Easier for people to reuse parts of Netty.

commit 5ce504070f20d6c8d356b92187f791e3eed0f8f4
Author: Trustin Lee <t@motd.kr>
Date:   Wed Feb 24 11:17:35 2016 +0900

    Remove a unused import

commit 6423e1b9c82aeae0ed29cf47f3381380b2a1961f
Author: nmittler <nathanmittler@google.com>
Date:   Fri Feb 19 09:20:35 2016 -0800

    Adding support for tcnative uber jar
    
    Motivation:
    
    We want to allow the use of an uber jar that contains the shared libraries for all platforms.
    
    Modifications:
    
    Modified OpenSsl to first check for a platform-specific lib before using the default lib.
    
    Result:
    
    uber support.

commit b42656661778474bc89dfce8d354deb6b19ca6da
Author: Lukáš Karas <karas@avast.com>
Date:   Sat Feb 13 14:06:06 2016 +0100

    DnsNameResolver: makes possible to define additional records in DNS query
    
    Motivation:
    
    Current DnsNameResolver api don't allow to define additional records in DNS query.
    It can be useful in many cases. For example when we want to query dns server with
    real client address (EDNS-CLIENT-SUBNET extension:
    http://tools.ietf.org/html/draft-vandergaast-edns-client-subnet-02 )
    
    Modifications:
    
    This change add new query methods with list of additional DnsRecord-s for query.
    
    Result:
    
    It is possible to create dns query with EDNS-CLIENT-SUBNET extension for example.

commit c7aadb5469601074526155d7330bcf355b27fcb7
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Thu Feb 18 11:28:25 2016 -0800

    Fork SpscLinkedQueue and SpscLinkedAtomicQueue from JCTools
    
    Motivation:
    
    See #3746.
    
    Modifications:
    
    Fork SpscLinkedQueue and SpscLinkedAtomicQueue from JCTools based on https://github.com/JCTools/JCTools/tree/7846450e2817d6eb9653111e3b7a85b76fbbcfd1
    
    Result:
    
    Add SpscLinkedQueue and SpscLinkedAtomicQueue and apply it in LocalChannel.

commit ca443e42e03b6053676c239e5afb28fedcdb7aad
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Feb 19 23:00:11 2016 +0100

    [maven-release-plugin] prepare for next development iteration

commit f39eb9a6b26cf86a2eff56aa0ce59f0df0b2ccf9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Feb 19 22:59:52 2016 +0100

    [maven-release-plugin] prepare release netty-4.1.0.CR3

commit 050ac709ba3db2a1c2df27f558bdcb348c4ac6f2
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Feb 12 10:23:39 2016 -0800

    PromiseNotifier does not propagate cancel events
    
    Motivation:
    If the Future that the PromiseNotifier is listening to is cancelled, it does not propagate the cancel to all the promises it is expected to notify.
    
    Modifications:
    - If the future is cancelled then all the promises should be cancelled
    - Add a UnaryPromiseNotifier if a collection of promises is not necessary
    
    Result:
    PromiseNotifier propagates cancel events to all promises

commit 6e9d2bf13c33757b5d1d44e1fbe20f4257239885
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Feb 17 19:50:53 2016 -0800

    Correctly set the alert type depending of the CertificateException
    
    Motivation:
    
    Depending on the actual CertificateException we should set the correct alert type so it will be sent back to the remote peer and so make it easier for them to fix it.
    
    Modification:
    
    Correctly set the alert and not always just use a general alert.
    
    Result:
    
    It's easier for the remote peer to fix the problems.

commit 83c4aa6ad880445856551de1f7d4aeb40ee06df4
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Feb 18 14:02:17 2016 -0800

    HTTP/2 Writes GO_AWAY on channelInactive
    
    Motivation:
    Http2ConnectionHandler inherits from ByteToMessageDecoder. ByteToMessageDecoder.channelInactive will attempt to decode any remaining data by calling the abstract decode method. If the Http2ConnectionHandler is in server mode, and no data has been exchanged yet, it will try to treat this data as an invalid connection preface and write a GO_AWAY. This is noisy in the logs and creates an illusion that there is a protocol violation when there has not been.
    
    Modifications:
    - If the channel is inactive the connection preface decode should not be executed.
    
    Result:
    Log files don't include misleading error messages related to connection preface errors.

commit 23f7fc67a4aee858b6526885167c422a7339d593
Author: Roman Timushev <rtimush@gmail.com>
Date:   Thu Feb 18 19:41:55 2016 +0300

    Enable shutdownOutput for EpollDomainSocketChannel

commit 41d0a816912f32ff0405882cca347682549a709d
Author: Brendt Lucas <brendt@idnet.com>
Date:   Sat Feb 13 12:30:48 2016 +0000

    Use ByteBufAllocator to allocate ByteBuf for FullHttpMessage Motivation: When converting SPDY or HTTP/2 frames to HTTP/1.x, netty always used an unpooled heap ByteBuf.
    
    Modifications:
    When constructing the FullHttpMessage pass in the ByteBuf to use via the ByteBufAllocator assigned via the context.
    
    Result:
    The ByteBuf assigned to the FullHttpMessage can now be configured as a pooled/unpooled, direct/heap based ByteBuf via the ByteBufAllocator used.

commit 839e2ca50803c17419a88f7b3b15c2b8c87a73ca
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Feb 10 15:43:51 2016 -0800

    Revert JDK GCM direct buffer crash workaround
    
    Motivation:
    Commit 108dc23cab13eea074397f0ade80859da4744323 introduced a workaround due to a JDK crash when GCM cipher was used during an unwrap operation. Attempting to reproduce this issue with the latest JDK (1.8.0_72-b15) demonstrate that this issue no longer exists while it can be reliably reproduced on earlier JDKs (1.8.0_25-b17 and earlier)
    
    Modifications:
    - Remove the copy-to-heap-buffer workaround for JDK engine
    
    Result:
    Fixes https://github.com/netty/netty/issues/3256

commit 0b1c82b25444bb244a33008d23863d5a0e82a323
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 15 22:14:56 2016 -0800

    Ensure read components can be discarded when COMPOSITE_CUMULATOR is used.
    
    Motivation:
    
    ByteToMessageDecoder must ensure that read components of the CompositeByteBuf can be discard by default when discardSomeReadBytes() is called. This may not be the case before as because of the default maxNumComponents that will cause consolidation.
    
    Modifications:
    
    Ensure we not do any consolidation to actually be abel to discard read components
    
    Result:
    
    Less memory usage and allocations.

commit 74495fd27f65277530214ed09ef858ab4f39498e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Feb 14 20:43:22 2016 -0800

    Add advanced leakdetection for methods introduced by [#4842]
    
    Motivation:
    
    [#4842] introduced 4 new methods but missed to implement advanced leak detection for these.
    
    Modifications:
    
    Correctly implement advanced leak detection for these methods.
    
    Result:
    
    Advanced leak detection works for all methods as expected.

commit f0f0b69d90be9eee51434a0c9abce0db5c2b66d2
Author: Moses Nakamura <mnakamura@twitter.com>
Date:   Tue Feb 16 20:14:03 2016 -0800

    fixed "sensative" typo to read "sensitive"

commit 94f2748f1b76237a513783ac1fdb5aef4b622a21
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Feb 14 21:34:50 2016 -0800

    Upgrade to netty-tcnative-1.1.33.Fork13
    
    Motivation:
    
    netty-tcnative-1.1.33.Fork was released, we should upgrade. Also we should skip renegotiate tests if boringssl is used because boringssl does not support renegotiation.
    
    Modifications:
    
    - Upgrade to netty-tcnative-1.1.33.Fork13
    - Skip renegotiate tests if boringssl is used.
    
    Result:
    
    Use newest version of netty-tcnative and be able to build if boringssl is used.

commit 333f55e9ce5eeb68b7d159443d0f7f5f92a6fe9d
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Wed Feb 10 20:32:27 2016 -0800

    Add unescapeCsvFields to parse a CSV line and implement CombinedHttpHeaders.getAll
    
    Motivation:
    
    See #4855
    
    Modifications:
    
    Unfortunately, unescapeCsv cannot be used here because the input could be a CSV line like `"a,b",c`. Hence this patch adds unescapeCsvFields to parse a CSV line and split it into multiple fields and unescaped them. The unit tests should define the behavior of unescapeCsvFields.
    
    Then this patch just uses unescapeCsvFields to implement `CombinedHttpHeaders.getAll`.
    
    Result:
    
    `CombinedHttpHeaders.getAll` will return the unescaped values of a header.

commit ccb08706003b4aed2a6a95d009f7fd736f723b23
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Thu Feb 4 19:02:40 2016 -0800

    Add methods with position independent FileChannel calls to ByteBuf
    
    Motivation
    
    See ##3229
    
    Modifications:
    
    Add methods with position independent FileChannel calls to ByteBuf and its subclasses.
    
    Results:
    
    The user can use these new methods to read/write ByteBuff without updating FileChannel's position.

commit b112673554bafc1eccfd43913a3e8605337dd7fb
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Feb 12 15:30:09 2016 -0800

    ByteToMessageDecoder ChannelInputShutdownEvent support
    
    Motivation:
    b714297a44ced34643fa60ca854f1880d02ba649 introduced ChannelInputShutdownEvent support for HttpObjectDecoder. However this should have been added to the super class ByteToMessageDecoder, and ByteToMessageDecoder should not propegate a channelInactive event through the pipeline in this case.
    
    Modifications:
    - Move the ChannelInputShutdownEvent handling from HttpObjectDecoder to ByteToMessageDecoder
    - ByteToMessageDecoder doesn't call ctx.fireChannelInactive() on ChannelInputShutdownEvent
    
    Result:
    Half closed events are treated more generically, and don't get translated into a channelInactive pipeline event.

commit 06e29e0d1b4ebf16b47969d5fbc71bdaf19fe3e8
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Feb 5 19:02:49 2016 -0800

    HTTP/2 codec may not always call Http2Connection.onStreamRemoved
    
    Motivation:
    Http2Connection.onStreamRemoved is not always called if Http2Connection.onStreamAdded is called. This is problematic as users may rely on the onStreamRemoved method to be called to release ByteBuf objects and do other cleanup.
    
    Modifications:
    - Http2Connection.close will remove all streams existing streams and prevent new ones from being created
    - Http2ConnectionHandler will call the new close method in channelInactive
    
    Result:
    Http2Connection.onStreamRemoved is always called when Http2Connection.onStreamRemoved is called to preserve the Http2Connection guarantees.
    Fixes https://github.com/netty/netty/issues/4838

commit c6a3729e4c7c1ebcc9400d4a1285924c4bc55aa4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 8 19:45:05 2016 +0100

    Ensure handlerAdded(...) and handlerRemoved(...) is always called from the right thread
    
    Motiviation:
    
    We should ensure that handlerAdded(...) and handlerRemoved(...) is always called from the EventExecutor that also invokes the other methods of the ChannelHandler. Also we need to ensure we always call handlerAdded(...) before any other method can be calld to ensure correct ordering.
    
    Motifications:
    
    - Ensure that the right thread is used to call the methods
    - Ensure correct ordering
    - Add tests
    
    Result:
    
    Respect the thread-model for handlerAdded(...) and handlerRemoved(...) and preserve correct ordering in all cases.

commit fdc6a5e87fe0d72cf79ec007b4ae5b32568dede6
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Feb 10 09:42:58 2016 -0800

    Leak Detector disclosing when records dropped
    
    Motivation:
    ResourceLeakDetector enforces a limit as to how large the queue is allowed to grow for stack traces in order to keep memory from growing too large. However it is not always clear when records are dropped, or how many have been dropped. This can make interpreting leak reports more difficult if you assume all information is present when it may not be. Also we should increase the limit (currently 4) when running tests on the CI servers.
    
    Modifications:
    - Increase leak detector record limit on CI servers from 4 to 32.
    - Track how many records have been discarded and disclose this in the leak report.
    
    Result:
    Leak reports clarify how many records were dropped, and how to increase the limit.

commit 691bc1690e9542d6093b91ffe1fbdf7d075bcd42
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Feb 10 19:07:20 2016 -0800

    ByteBufUtil.writeUtf8 not consistent with String.getBytes(Charset)
    
    Motivation:
    f750d6e36c80e88fb302c99b5b7413e5649e6738 added support for surrogates in the writeUtf8 conversion. However exceptions are thrown if invalid input is detected, but the JDK (and slow path of writeUtf8) uses a replacement character and does not throw. We should behave the same way.
    
    Modificiations:
    - Don't throw in ByteBufUtil.writeUtf8, and instead use a replacement character consistent with the JDK
    
    Result:
    ByteBufUtil.writeUtf8 behavior is consistent with the JDK UTF_8 conversion.

commit cd56f87ca12664fdec3aba8b44ee425cac5cd4be
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 8 16:49:13 2016 +0100

    Remove invalid return
    
    Motivation:
    
    JNI_OnUnload(...) does not return anything (has void in its signature) so we should not try to return something.
    
    Modifications:
    
    Remove return.
    
    Result:
    
    Fix incorrect but harmless code.

commit 56e6e07b25b968a27cdc25209664dc95f67721d1
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Feb 9 14:53:38 2016 -0800

    HTTP/2 RST_STREAM Regression f990f99
    
    Motivation:
    Commit f990f99 introduced a bug into the RST_STREAM processing that would prevent a RST_STREAM from being sent when it should have been. The promise would be marked as successful even though the RST_STREAM frame would never be sent.
    
    Modifications:
    - Fix conditional in Http2ConnectionHandler.resetStream to allow reset streams to be sent in all stream states besides IDLE.
    
    Result:
    RST_STREAM frames are now sent when they are supposed to be sent
    Fixes https://github.com/netty/netty/issues/4856

commit 36aa11937d661385461b4c1c488356347751e9f9
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Fri Jan 29 09:58:35 2016 -0800

    ByteBuf for Key instead of String for codec-memcache
    
    Motivation:
    
    The key can be ByteBuf to avoid converting between ByteBuf and String. See #3689.
    
    Modifications:
    
    Replace the type of key with ByteBuf.
    
    Result:
    
    The type of key becomes ByteBuf.

commit f43dc7d5513bb6f29a4bcb12ffeea739b64b47c3
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Sat Feb 6 14:21:07 2016 -0800

    Add unescapeCsv to StringUtil
    
    Motivation:
    
    See #3435
    
    Modifications:
    
    Add unescapeCsv to StringUtil
    
    Result:
    
    StringUtil has the counter part of escapeCsv: unescapeCsv

commit a15ff32608f000b5b01ab00262f8b2df34b2d08c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Feb 5 14:33:57 2016 -0800

    HttpObjectDecoder configurable initial buffer size
    
    Motivation:
    The initial buffer size used to decode HTTP objects is currently fixed at 128. This may be too small for some use cases and create a high amount of overhead associated with resizing/copying. The user should be able to configure the initial size as they please.
    
    Modifications:
    - Make HttpObjectDecoder's AppendableCharSequence initial size configurable
    
    Result:
    Users can more finely tune initial buffer size for increased performance or to save memory.
    Fixes https://github.com/netty/netty/issues/4807

commit f59392d9f5aba4a7e5f4cbc663b428becf53db61
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Fri Feb 5 16:40:54 2016 -0800

    Make "CorsConfigBuilder.allowNullOrigin()" public
    
    Motivation:
    
    "CorsConfigBuilder.allowNullOrigin()" should be public otherwise people can not set it. See #4835
    
    Modifications:
    
    Make "CorsConfigBuilder.allowNullOrigin()" public.
    
    Result:
    
    The user can call "CorsConfigBuilder.allowNullOrigin()" now.

commit b9682a26b1198bc276823b0465cb9d7039cbbb7b
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Feb 5 11:17:20 2016 -0800

    EPOLL dladdr unexpected return value
    
    Motivation:
    netty_epoll_native.c uses dladdr in attempt to get the name of the library that the code is running in. However the address passed to this funciton (JNI_OnLoad) may not be unique in the context of the application which loaded it. For example if another JNI library is loaded this address may first resolve to the other JNI library and cause the path name parsing to fail, which will cause the library to fail.
    
    Modifications:
    - Pass an addresses which is local to the current library to dladdr
    
    Result:
    EPOLL JNI library can be loaded in an environment where multiple JNI libraries are loaded.
    Fixes https://github.com/netty/netty/issues/4840

commit f10d66b45e6152f51879c7a6a7bc7f464a2172e4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Feb 5 12:59:31 2016 +0100

    Epoll.isAvailable() must return false if sun.misc.Unsafe is not present.
    
    Motivation:
    
    Currently our epoll native transport requires sun.misc.Unsafe and so we need to take this into account for Epoll.isAvailable().
    
    Modifications:
    
    Take into account if sun.misc.Unsafe is present.
    
    Result:
    
    Only return true for Epoll.isAvailable() if sun.misc.Unsafe is present.

commit a88c89a426de0544e0e292c2104f579fbaa8828e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Feb 5 11:22:20 2016 +0100

    Add maven profile to run tests with -Dio.netty.noUnsafe=true
    
    Motivation:
    
    We had reports of failures before when sun.misc.Unsafe was not present. We should run our tests also with it disable to ensure everything works even if sun.misc.Unsafe is not present on the system.
    
    Modifications:
    
    Add a new profile which allows to run tests without Unsafe (using -PnoUnsafe)
    
    Result:
    
    Better testing of netty for systems where sun.misc.Unsafe is not present.

commit 65b34704567dd101b1daa452bfff68de6b7842d4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Feb 5 10:33:50 2016 +0100

    [#4793] Correctly add newlines when encode base64
    
    Motivation:
    
    We not correctly added newlines if the src data needed to be padded. This regression was introduced by '63426fc3ed083513c07a58b45381f5c10dd47061'
    
    Modifications:
    
    - Correctly handling newlines
    - Add unit test that proves the fix.
    
    Result:
    
    No more invalid base64 encoded data.

commit acbf1b9e7e9c98e1f5209d5ef82c552e41d2bb6a
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Feb 5 14:46:04 2016 -0800

    Update jetty-alpn-agent version
    
    Motivation:
    Builds fail with java 1.8.0_72 because jetty-alpn-boot has absorbed new code from openjdk and older version are now incompatible.
    
    Modifications:
    - Updated jetty-alpn-agent version
    
    Result:
    We can now build/develop using java 1.8.0_72

commit 61f812ea2a38fe20845ae72cbee8729606e01aa3
Author: Jon Chambers <jon.chambers@gmail.com>
Date:   Wed Feb 3 10:45:56 2016 -0500

    Allow InputStreams for key/trust managers in SslContextBuilder
    
    Motivation:
    
    Sometimes it's easier to get keys/certificates as `InputStream`s than it is to
    get an actual `File`. This is especially true when operating in a container
    environment and `getResourceAsInputStream` is the best way to load resources
    packaged with an application.
    
    Modifications:
    
    - Add read-from-`InputStream` methods to `PemReader`
    - Allow `SslContext` to get keys/certificates from `InputStreams`
    - Add `InputStream`-based setters for key/trust managers to `SslContextBuilder`
    
    Result:
    
    Callers may pass an `InputStream` instead of a `File` to `SslContextBuilder`.

commit 0f91ad841d572c5b9db72802e5c460e85fafe2da
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Feb 5 12:28:11 2016 +0100

    Fix possible testfailure due not waiting on Channel.close() (introduced by e220c568232fe9b479e3ac7a5b66f5a97dcc2c39)

commit 0f3d47199b95098b04ee774eb2730c2812bf4dd0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 4 13:41:02 2016 +0100

    [#4834] Fix race in AddressResolverGroup
    
    Motivation:
    
    We miss to use synchronized when remove the executor from the map.
    
    Modifications:
    
    Add synchronized(...) keyword
    
    Result:
    
    No more race.

commit a51e2c87697bb57fede3744a8f3280791be3fa70
Author: Fabian Lange <lange.fabian@gmail.com>
Date:   Wed Feb 3 17:28:39 2016 +0100

    Expose Helper to obtain the "best" mac address.
    
    Motivation:
    
    The implementation of obtaining the best possible mac address is very good. There are many sub-par implementations proposed on stackoverflow.
    While not strictly a netty concern, it would be nice to offer this util also to netty users.
    
    Modifications:
    
    extract DefaultChannelId#defaultMachineId code obtaining the "best" mac into a new helper called MacAddress, keep the random bytes fallback in DefaultChannelID.
    
    Result:
    
    New helper available.

commit d9f938ca03dbfe0e8132b9cb9c816bd1214de7d2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Feb 3 20:50:57 2016 +0100

    [#4828] OpenSslContext throws UnsupportedOperationException when Unsafe not available
    
    Motivation:
    
    OpenSslContext constructor fails with a UnsupportedOperationException if Unsafe is not present on the system.
    
    Modifications:
    
    Make OpenSslContext work also when Unsafe is not present by fallback to using JNI to get the memory address.
    
    Result:
    
    Using OpenSslContext also works on systems without Unsafe.

commit 19907030d105079fee4fe6db70431f7f6b928149
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 4 22:18:03 2016 +0100

    [#4841] Fix segfault if UnpooledUnsafeHeapByteBuf.getShort(..) is used and UNALGINED access is not possible.
    
    Motivation:
    
    We missed to take the byte[] into account when try to access the bytes and so produce a segfault.
    
    Modifications:
    
    Correctly pass the byte[] in.
    
    Result:
    
    No more segfault.

commit 75a2ddd61c3df0b7a1e6db1cc5c588177b24c3cf
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 4 16:51:44 2016 +0100

    [maven-release-plugin] prepare for next development iteration

commit 7eb3a60dba59cce87d1ad5c77771fdcd560a6812
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 4 16:37:06 2016 +0100

    [maven-release-plugin] prepare release netty-4.1.0.CR2

commit 465a190c3f5c06de7ac4fa21e093b3d005904d67
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 1 20:02:01 2016 +0100

    [#4805] Respect isAutoRead() once re-register Channel
    
    Motivation:
    
    When a channel was registered before and is re-registered we need to respect ChannelConfig.isAutoRead() and so start reading one the registration task completes. This was done "by luck" before 15162202fb82e2293624a86bfc27a9c5c35960be.
    
    Modifications:
    
    Explicit start reading once a Channel was re-registered if isAutoRead() is true.
    
    Result:
    
    Correctly receive data after re-registration completes.

commit 08a7ca374740133b6579f7d48c0c8a4ce34a21e7
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 4 15:20:36 2016 +0100

    Correctly pass ChannelPromise on to the next ChannelOutboundHandler when use CombinedChannelDuplexHandler.
    
    Motivation:
    
    Due a regression introduced by e969b6917c848c83f02617386f0f73d8f0e130a2 we missed to pass the original ChannelPromise to the next ChannelOutboundHandler and so
    may never notify the origin ChannelPromise. This is related to #4805.
    
    Modifications:
    
    - Correctly pass the ChannelPromise
    - Add unit test.
    
    Result:
    
    Correctly pass the ChannelPromise on deregister(...)

commit 7ef6db3ffd2f10cce835685359dec642bd3c874c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jan 27 14:26:33 2016 +0100

    [#4754] Correctly detect websocket upgrade
    
    Motivation:
    
    If the Connection header contains multiple values (which is valid) we fail to detect a websocket upgrade
    
    Modification:
    
    - Add new method which allows to check if a header field contains a specific value (and also respect multiple header values)
    - Use this method to detect handshake
    
    Result:
    
    Correct detect handshake if Connection header contains multiple values (seperated by ',').

commit a0758e7e60e326b13ca8eeccf1a078d413793b41
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 1 17:30:18 2016 +0100

    [#4794] Support window size flag by default if ZlibCodecFactory supports it.
    
    Motivation:
    
    If the ZlibCodecFactory can support using a custom window size we should support it by default in the websocket extensions as well.
    
    Modifications:
    
    Detect if a custom window size can be handled by the ZlibCodecFactory and if so enable it by default for PerMessageDeflate*ExtensionHandshaker.
    
    Result:
    
    Support window size flag by default in most installations.

commit 7a562943ad5dfc430c75de8cdeb2a2aa0a68244e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Feb 2 10:39:41 2016 +0100

    [#4533] Ensure replacement of decoder is delayed after finishHandshake() is called
    
    Motivation:
    
    If the user calls handshake.finishHandshake() we need to ensure that the user has the chance to setup the pipeline before any WebSocketFrames are read. Because of this we need
    to delay the removal of the HttpRequestDecoder.
    
    Modifications:
    
    - Remove the HttpRequestDecoder via the EventLoop and so delay it which gives the user a chance to setup the pipeline after finishHandshake() completes
    - Add unit test for this.
    
    Result:
    
    Less surpising and correct behaviour even if the http response and websocket frame are received in one read operation.

commit ef0e05320272be28940db2ecb07be7d70a50e958
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 4 20:23:48 2016 +0900

    Preserve the host name of address when parsing /etc/hosts file
    
    Motivation:
    
    When an InetNameResolver resolves a name, it is expected to reserve the
    requested host name in the resolved InetAddress.
    
    DefaultHostsFileEntriesResolver does not preserve the host name. For
    example, resolving 'localhost' will return an InetAddress whose address
    is '127.0.0.1', but its getHostString() will not return 'localhost' but
    just '127.0.0.1'.
    
    Modifications:
    
    Fix the construction of parsed InetAddresses in HostsFileParser
    
    Result:
    
    Host name is preserved in the resolved InetAddress

commit 075a54af3e607c20eeaf7809a2a08602abd5d735
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Jan 30 11:47:12 2016 -0800

    Native EPOLL Library Allows Shading
    
    Motivation:
    If Netty's class files are renamed and the type references are updated (shaded) the native libraries will not function. The native epoll module uses implicit JNI bindings which requires the fully qualified java type names to match the method signatures of the native methods. This means EPOLL cannot be used with a shaded Netty.
    
    Modifications:
    - Make the JNI method registration dynamic
    - support a system property io.netty.packagePrefix which must be prepended to the name of the native library (to ensure the correct library is loaded) and all class names (to allow classes to be correctly referenced)
    - remove system property io.netty.native.epoll.nettyPackagePrefix which was recently added and the code to support it was incomplete
    
    Result:
    transport-native-epoll can be used when Netty has been shaded.
    Fixes https://github.com/netty/netty/issues/4800

commit eb1d9da76c3938dba74c01dd18ccffca8a778931
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Feb 2 14:49:41 2016 +0100

    Enable SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER when using OpenSslContext
    
    Motivation:
    
    We need to enable SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER when using OpenSslContext as the memory address of the buffer that is passed to OpenSslEngine.wrap(...) may change during calls and retries. This is the case as
    if the buffer is a heap-buffer we will need to copy it to a direct buffer to hand it over to the JNI layer. When not enable this mode we may see errors like: 'error:1409F07F:SSL routines:SSL3_WRITE_PENDING: bad write retry'.
    Related to https://github.com/netty/netty-tcnative/issues/100.
    
    Modifications:
    
    Explitict set mode to SSL.SSL_MODE_RELEASE_BUFFERS | SSL.SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER . (SSL.SSL_MODE_RELEASE_BUFFERS was used before implicitly).
    
    Result:
    
    No more 'error:1409F07F:SSL routines:SSL3_WRITE_PENDING: bad write retry' possible when writing heap buffers.

commit e220c568232fe9b479e3ac7a5b66f5a97dcc2c39
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 28 11:39:30 2016 +0100

    [#4746] Support SNI when using OpenSSL
    
    Motivation:
    
    When using SslProvider.OPENSSL we currently not handle SNI on the client side.
    
    Modifications:
    
    Correctly enable SNI when using clientMode and peerHost != null.
    
    Result:
    
    SNI works even with SslProvider.OPENSSL.

commit a06708f81bc69ae6fbbe2638b25e7eee922f5efc
Author: fu.jian <fujian1115@gmail.com>
Date:   Tue Feb 2 10:43:12 2016 +0800

    fix the issue netty#2944 in 4.1
    
    Motivation:
    
    fix the issue netty#2944
    
    Modifications:
    
    use - instead of =>, use ! instead of :> due to the connection is bidirectional. What's more, toString() method don't know the direction or there is no need to know the direction when only log channel information.
    add L： before local address and R: before remote address.
    
    Result:
    
    after the fix, log won't confuse the user

commit 6312c2f00b6c53fa4b84830b03126f7430bec4ed
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jan 26 13:44:20 2016 -0800

    CompositeByteBuf.addComponent always assume reference count ownership
    
    Motivation:
    The current interface for CompositeByteBuf.addComponent is not clear under what conditions ownership is transferred when addComponent is called. There should be a well defined behavior so that users can ensure that no leaks occur.
    
    Modifications:
    - CompositeByteBuf.addComponent should always assume reference count ownership
    
    Result:
    Users that call CompositeByteBuf.addComponent do not have to independently check if the buffer's ownership has been transferred and if not independently release the buffer.
    Fixes https://github.com/netty/netty/issues/4760

commit 7a7160f176597e97f451748a05c54d6b1518524c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Jan 29 16:07:03 2016 -0800

    HTTP/2 Buffer Leak if UTF8 Conversion Fails
    
    Motivation:
    Http2CodecUtil uses ByteBufUtil.writeUtf8 but does not account for it
    throwing an exception. If an exception is thrown because the format is
    not valid UTF16 encoded UTF8 then the buffer will leak.
    
    Modifications:
    - Make sure the buffer is released if an exception is thrown
    - Ensure call sites of the Http2CodecUtil.toByteBuf can tolerate and
      exception being thrown
    
    Result:
    No leak if exception data can not be converted to UTF8.

commit a75dcb275665a4cf621088d6665e60d0f2f189e0
Author: Travis Haagen <travis.haagen@gmail.com>
Date:   Mon Feb 1 15:07:28 2016 -0800

    Made it easier to use custom ChannelId instances with Channel implementations that rely on the AbstractChannel(Channel parent) constructor.
    
    Motivation:
    
    The AbstractChannel(Channel parent) constructor was previously hard-coded to always
    call DefaultChannelId.newInstance(), and this made it difficult to use a custom
    ChannelId implementation with some commonly used Channel implementations.
    
    Modifications:
    
    Introduced newId() method in AbstractChannel, which by default returns
    DefaultChannelId.newInstance() but can be overridden by subclasses. Added
    ensureDefaultChannelId() test to AbstractChannelTest, to ensure the prior
    behavior of calling DefaultChannelId.newInstance() still holds with the
    AbstractChannel(Channel parent) constructor.
    
    Result:
    
    AbstractChannel now has the protected newId() method, but there is no functional
    difference.

commit d97f17060f56f4ca1c43ac2fe1a2dc8850cee845
Author: Luke Daley <ld@ldaley.com>
Date:   Mon Feb 1 11:24:14 2016 +1000

    Support non chunked HTTP request bodies larger than Integer.MAX_VALUE.
    
    Motivation:
    
    Request bodies can easily be larger than Integer.MAX_VALUE in practice.
    There's no reason, or intention, for Netty to impose this artificial constraint.
    
    Worse, it currently does not fail if the body is larger than this value;
    it just silently only reads the first Integer.MAX_VALUE bytes and discards the rest.
    
    This restriction doesn't effect chunked transfers, with no Content-Length header.
    
    Modifications:
    
    Force the use of `long HttpUtil.getContentLength(HttpMessage, long)` instead of
    `long HttpUtil.getContentLength(HttpMessage, long)`.
    
    Result:
    
    Netty will support HTTP request bodies of up to Long.MAX_VALUE length.

commit f990f9983dd0e33fb4efb2212856ce5f9749cf85
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Jan 29 00:45:12 2016 -0800

    HTTP/2 Don't Flow Control Iniital Headers
    
    Motivation:
    Currently the initial headers for every stream is queued in the flow controller. Since the initial header frame may create streams the peer must receive these frames in the order in which they were created, or else this will be a protocol error and the connection will be closed. Tolerating the initial headers being queued would increase the complexity of the WeightedFairQueueByteDistributor and there is benefit of doing so is not clear.
    
    Modifications:
    - The initial headers will no longer be queued in the flow controllers
    
    Result:
    Fixes https://github.com/netty/netty/issues/4758

commit 5fb18e3415377fd022ac46d3a898b905617cf232
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Jan 28 13:07:56 2016 -0800

    InboundHttp2ToHttpAdapter leak and logic improvements
    
    Motivation:
    In HttpConversionUtil's toHttpRequest and toHttpResponse methods can
    allocate FullHttpMessage objects, and if an exeception is thrown during
    the header conversion then this object will not be released. If a
    FullHttpMessage is not fired up the pipeline, and the stream is closed
    then we remove from the map, but do not release the object. This leads
    to a ByteBuf leak. Some of the logic related to stream lifetime management
    and FullHttpMessage also predates the RFC being finalized and is not correct.
    
    Modifications:
    - Fix leaks in HttpConversionUtil
    - Ensure the objects are released when they are removed from the map.
    - Correct logic and unit tests where they are found to be incorrect.
    
    Result:
    Fixes https://github.com/netty/netty/issues/4780
    Fixes https://github.com/netty/netty/issues/3619

commit 4d6ab1d30de2fd06bc7544ce6301fd6b85d183d7
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jan 29 11:59:51 2016 +0900

    Fix missing trailing data on HTTP client upgrade
    
    Motivation:
    
    When HttpClientUpgradeHandler upgrades from HTTP/1 to another protocol,
    it performs a two-step opertion:
    
    1. Remove the SourceCodec (HttpClientCodec)
    2. Add the UpgradeCodec
    
    When HttpClientCodec is removed from the pipeline, the decoder being
    removed triggers channelRead() event with the data left in its
    cumulation buffer. However, this is not received by the UpgradeCodec
    becuase it's not added yet. e.g. HTTP/2 SETTINGS frame sent by the
    server can be missed out.
    
    To fix the problem, we need to reverse the steps:
    
    1. Add the UpgradeCodec
    2. Remove the SourceCodec
    
    However, this does not work as expected either, because UpgradeCodec can
    send a greeting message such as HTTP/2 Preface. Such a greeting message
    will be handled by the SourceCodec and will trigger an 'unsupported
    message type' exception.
    
    To fix the problem really, we need to make the upgrade process 3-step:
    
    1. Remove/disable the encoder of SourceCodec
    2. Add the UpgradeCodec
    3. Remove the SourceCodec
    
    Modifications:
    
    - Add SourceCodec.prepareUpgradeFrom() so that SourceCodec can remove or
      disable its encoder
    - Implement HttpClientCodec.prepareUpgradeFrom() properly
    - Miscellaneous:
      - Log the related channel as well When logging the failure to send a
        GOAWAY
    
    Result:
    
    Cleartext HTTP/1-to-HTTP/2 upgrade works again.

commit 17df8171b3ad5a0b51aec2d5a54e8f1d220a1892
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Sat Jan 30 15:53:11 2016 -0800

    Use AbstractReferenceCounted to clean up the codes for codec-memcache
    
    Motivation:
    
    Some duplicated methods in message types of codec-memcache can be cleaned using AbstractReferenceCounted.
    
    Modifications:
    
    Use AbstractReferenceCounted to avoid duplicated methods.
    
    Result:
    
    Duplicated methods are cleaned.

commit b7415a3307d9a36f2a67339c7596e0ee2b2a5644
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Sat Jan 30 20:14:47 2016 -0800

    Add a reusable ArrayList to InternalThreadLocalMap
    
    Motivation:
    
    See #3411. A reusable ArrayList in InternalThreadLocalMap can avoid allocations in the following pattern:
    
    ```
    List<...> list = new ArrayList<...>();
    
    add something to list but never use InternalThreadLocalMap
    
    return list.toArray(new ...[list.size()]);
    
    ```
    
    Modifications:
    
    Add a reusable ArrayList to InternalThreadLocalMap and update codes to use it.
    
    Result:
    
    Reuse a thread local ArrayList to avoid allocations.

commit b354868dd83fa720a1956e3366b5931f7f5f1885
Author: liuzhengyang <liuzhengyang@meituan.com>
Date:   Sun Jan 31 14:48:25 2016 +0800

    Fix spelling in javadocs and field name.
    
    Motivation:
    
    Fix a spell mistake.
    
    Modifications:
    
    Change 'treshold' to 'threshold'
    
    Result:
    
    The spellchecker warnings of the IDE disappeared.

commit 2a9d392a31c0786e99a9189ddb9f66b0dd4921b2
Author: liuzhengyang <liuzhengyang@meituan.com>
Date:   Sun Jan 31 14:06:16 2016 +0800

    Motivation:
    
    Fix a spell mistake.
    
    Modifications:
    
    Change 'treshold' to 'threshold'
    
    Result:
    
    The spellchecker warnings of the IDE disappeared.

commit 210ebe13541900807d43a8af1e4941cf40bbb9e5
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 28 19:04:27 2016 +0100

    Allow to specify tcnative artifactId and verion to allow run tests easily with different tcnative flavors
    
    Motivation:
    
    As we now can easily build static linked versions of tcnative it makes sense to run our netty build against all of them.
    This helps to ensure our code works with libressl, openssl and boringssl.
    
    Modifications:
    
    Allow to specify -Dtcnative.artifactId= and -Dtcnative.version=
    
    Result:
    
    Easy to run netty build against different tcnative flavors.

commit 501c35afff01be0e06943b9fffb87fad1838ce5a
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Thu Jan 28 11:25:54 2016 -0800

    Retain ByteBuf extras when aggregating
    
    Motivation:
    
    BinaryMemcacheObjectAggregator doesn't retain ByteBuf `extras`. So `io.netty.util.IllegalReferenceCountException: refCnt: 0, decrement: 1` will be thrown when aggregating a message containing `extras`. See the unit test for an example.
    
    Modifications:
    
    `ratain` extras to fix IllegalReferenceCountException.
    
    Result:
    
    `extras` is retained.

commit 11bcb8790cb2471a50a857fcae44fb42d410aa83
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jan 19 19:36:39 2016 -0800

    Http2Connection stream id generation to support queueing
    
    Motivation:
    StreamBufferingEncoder provides queueing so that MAX_CONCURRENT_STREAMS is not violated. However the stream id generation provided by Http2Connection.nextStreamId() only returns the next stream id that is expected on the connection and does not account for queueing. The codec should provide a way to generate the next stream id for a given endpoint that functions with or without queueing.
    
    Modifications:
    - Change Http2Connection.nextStreamId to Http2Connection.incrementAndGetNextStreamId
    
    Result:
    Http2Connection can generate the next stream id in queued and non-queued scenarios.
    Fixes https://github.com/netty/netty/issues/4704

commit 8ba4b63cb639e1cf4786d7c8229b3f04b6a7d649
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jan 27 13:48:40 2016 -0800

    OioServerChannel Default Max Messages Per Read Too High
    
    Motivation:
    A few implementations of OioServerChannel have a default max messages per read set to 16. We should set the default to 1 to prevent blocking on a read before setting a socket that has just been accepted.
    
    Modifications:
    - OioSctpServerChannel and OioServerSocketChannel metadata changed to use the default (1) max messages per read
    
    Result:
    Oio based servers will complete accepting a socket before potentially blocking waiting to accept other sockets.

commit 4606890513f72a620aa29fb7b446cd8e2d3ae5fc
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Thu Jan 28 13:31:52 2016 -0800

    Retain AbstractBinaryMemcacheDecoder.currentMessage when sending it out and release it when it's not used.
    
    Motivation:
    
    AbstractBinaryMemcacheDecoder.currentMessage is not retained after sending it out. Hence, if a message contains `extras`, `io.netty.util.IllegalReferenceCountException` will be thrown in `channelInactive`.
    
    Modifications:
    
    Retain AbstractBinaryMemcacheDecoder.currentMessage After putting it to `out` and release it when it's not used.
    
    Result:
    
    No IllegalReferenceCountException or leak.

commit 78b508a7eb05ba26ffa84e3e508d8cebb7505620
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Jan 22 14:19:40 2016 -0800

    AbstractHttp2ConnectionHandlerBuilder validateHeaders cannot be set with encoder/decoder
    
    Motivation:
    If validateHeaders is set in combination with the encoder/decoder it will be silently ignored. We should enforce the constraint that validateHeaders and encoder/decoder are mutually exclusive.
    
    Modifications:
    - Make sure either validateHeaders can be set or encoder/decoder.
    
    Result:
    AbstractHttp2ConnectionHandlerBuilder does not allow conflicting options to be set.

commit c3e5604f59e0c6354dd6458fb62e5b83edadbda2
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jan 29 14:02:21 2016 +0900

    Do not throw IndexOutOfBoundsException on an invalid SSL record
    
    Motivation:
    
    When an SSL record contains an invalid extension data, SniHandler
    currently throws an IndexOutOfBoundsException, which is not optimal.
    
    Modifications:
    
    - Do strict index range checks
    
    Result:
    
    No more unnecessary instantiation of exceptions and their stack traces

commit 3616d9e814d57a7613e46c576eeaf8730cec7bd0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jan 26 21:39:20 2016 +0100

    Correctly handle wildcard address when bind to socket and using native transport
    
    Motivation:
    
    When a wildcard address is used to bind a socket and ipv4 and ipv6 are usable we should accept both (just like JDK IO/NIO does).
    
    Modifications:
    
    Detect wildcard address and if so use in6addr_any
    
    Result:
    
    Correctly accept ipv4 and ipv6

commit e1d34ef05da757743ef613247e75c8dc2c17b7e1
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jan 20 11:09:29 2016 -0800

    SslHandler should call beginHanshake once for the initial handshake
    
    Motivation:
    Not all SSLEngine implementations permit beginHandshake being called while a handshake is in progress during the initial handshake. We should ensure we only go through the initial handshake code once to prevent unexpected exceptions from being thrown.
    
    Modifications:
    - Only call beginHandshake if there is not currently a handshake in progress
    
    Result:
    SslHandler's handshake method is compatible with OpenSSLEngineImpl in Android 5.0+ and 6.0+.
    Fixes https://github.com/netty/netty/issues/4718

commit af39cb6b12d9c1a8cf97018dc038fbecc3ea1277
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jan 15 14:23:41 2016 +0100

    Ensure ChannelHandler.handlerAdded(...) is always called as first method of the handler
    
    Motivation:
    
    If a user adds a ChannelHandler from outside the EventLoop it is possible to get into the situation that handlerAdded(...) is scheduled on the EventLoop and so called after another methods of the ChannelHandler as the EventLoop may already be executing on this point in time.
    
    Modification:
    
    - Ensure we always check if the handlerAdded(...) method was called already and if not add the currently needed call to the EventLoop so it will be picked up after handlerAdded(...) was called. This works as if the handler is added to the ChannelPipeline from outside the EventLoop the actual handlerAdded(...) operation is scheduled on the EventLoop.
    - Some cleanup in the DefaultChannelPipeline
    
    Result:
    
    Correctly order of method executions of ChannelHandler.

commit a2732c6542d24cb28ee32f612f7c97c9d2216a54
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jan 26 15:03:59 2016 +0100

    [#4755] Make WebSocketClientCompressionHandler @Sharable
    
    Motivation:
    
    WebSocketClientCompressionHandler is stateless so it should be @Sharable.
    
    Modifications:
    
    Add @Sharable annotation to WebSocketClientCompressionHandler, make constructor private and add static field to get the instance.
    
    Result:
    
    Less object creation.

commit ee2558bdf3a27871a3fb61a02b48aa6850bcb5ca
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jan 22 21:18:26 2016 +0100

    [#4722] Ensure the whole certificate chain is used when creating SslContext for client mode and SslProvider.OPENSSL is used
    
    Motivation:
    
    We incorrectly added the trustCertChain as certificate chain when OpenSslClientContext was created. We need to correctly add the keyCertChain.
    
    Modifications:
    
    Correctly add whole keyCertChain.
    
    Result:
    
    SSL client auth is working when usin OpenSslClientContext and more then one cert is contained in the certificate chain.

commit e8850072e25cdeeff9443bbccc63d20fee81d516
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jan 20 18:18:34 2016 -0800

    HTTP/2 DefaultHttp2RemoteFlowController frame merging with padding bug
    
    Motivation:
    DefaultHttp2RemoteFlowController does not correctly account for the padding in the event frames are merged. This causes the internal stat of DefaultHttp2RemoteFlowController to become corrupt and can result in attempting to write frames when there are none.
    
    Modifications:
    - Update DefaultHttp2RemoteFlowController to account for frame sizes not necessarily adding together.
    
    Result:
    DefaultHttp2RemoteFlowController internal state does not become corrupt when padding is present.
    Fixes https://github.com/netty/netty/issues/4573

commit ca305d86fb45a40ad03a2e7270d58da65eb4aa06
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jan 19 15:47:50 2016 -0800

    PlatformDependent String char[] optimization
    
    Motivation:
    PlatformDependent0 has an optimization which grabs the char[] from a String. Since this code was introduced http://openjdk.java.net/jeps/254 has been gaining momentum in JDK 9. This JEP changes the internal storage from char[] to byte[], and thus the existing char[] only based optimizations will not work.
    
    Modifications:
    - The ASCII encoding char[] String optimizations should also work for byte[].
    
    Result:
    ASCII encoding char[] String optimizations don't break if the underlying storage in String is byte[].

commit d4a16659412af852dd849b0e87b46779d9541fa0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jan 26 10:06:31 2016 +0100

    Fix SSLEngineTest handshake method.
    
    Motivation:
    
    We used && in the handshake method of SSLEngineTest but it must be ||.
    
    Modifications:
    
    Changed && to ||
    
    Result:
    
    Correctly check condition

commit a6fd8a96bf54fb369927c0375f90502c2ac3d41e
Author: houdejun214 <houdejun214@gmail.com>
Date:   Thu Jan 21 17:02:19 2016 +0800

    Set default CONTENT_TYPE when it is absent in multipart request body
    
    Motivation:
    
    I am use netty as a http server, it fail to decode some POST request when the request absent Content-Type in the multipart/form-data body.
    
    Modifications:
    
    Set content_type with default application/octet-stream to parse the uploaded file data when the Content-Type is absent in multipart request body
    
    Result:
    
    Can decode the http request as normal.

commit af4f70ba2807843a63fb325d36a8f8123d9c9fa6
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Mon Jan 25 14:05:57 2016 +0100

    More efficiently allocate header buffer.
    
    Motivation
    ----------
    Currently, only the fixed 24 bytes are allocated for the header and
    then all the params as well as the optional extras and key are written
    into the header section.
    
    It is very likely that the buffer needs to expand at least two times
    if either the extras and/or the key take up more space.
    
    Modifications
    -------------
    Since at the point of allocation we know the key and extras length,
    the buffer can be preallocated with the exact size, avoiding unnecessary
    resizing and even allocating too much (since it uses power of two
    internally).
    
    Result
    ------
    Less buffer resizing needed when encoding a memcache operation.

commit 58a038d398f85235683ccb01cfd7fb97c35ddece
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Mon Jan 25 17:27:15 2016 -0800

    Fix ChannelOutboundHandlerAdapter javadoc
    
    Motivation:
    
    ChannelOutboundHandlerAdapter's javadoc has some minor issues.
    
    Modifications:
    
    Fix the minor javadoc issues and resolves #4752.
    
    Result:
    
    ChannelOutboundHandlerAdapter's javadoc issues are fixed.

commit 1c417e5f8264271f785c18972a55d9e216d1b20b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 21 15:35:55 2016 +0100

    [maven-release-plugin] prepare for next development iteration

commit c681a40a78cabf34138ad48126b99b5c683882b5
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 21 15:28:21 2016 +0100

    [maven-release-plugin] prepare release netty-4.1.0.CR1

commit 40fd9979203dc393dc44a46ac1c0ff23a3bd3475
Author: nmittler <nathanmittler@google.com>
Date:   Fri Jan 22 10:49:04 2016 -0800

    Fixing OsgiBundleTest
    
    Motivation:
    
    Twitter hpack is no longer a dependency so the test fails.
    
    Modifications:
    
    Removed the reference to twitter hpack.
    
    Result:
    
    It builds.

commit 7090d1331c327f9093ef260f9d0e3eef1a3d6715
Author: Brendt Lucas <brendt@idnet.com>
Date:   Wed Jan 20 21:52:50 2016 +0000

    Clear disabled SSL protocols before enabling provided SSL protocols
    
    Motivation:
    
    Attempts to enable SSL protocols which are currently disabled fail when using the OpenSslEngine. Related to https://github.com/netty/netty/issues/4736
    
    Modifications:
    
    Clear out all options that have disabled SSL protocols before attempting to enable any SSL protocol.
    
    Result:
    
    setEnabledProtocols works as expected.

commit ff11fe894d9cca5a52e8381606764935e8b54c4c
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Thu Jan 21 23:24:05 2016 -0800

    Fix the last value in AsciiString.trim
    
    Motivation:
    
    In AsciiString.trim, last should be `arrayOffset() + length() - 1`. See #4741.
    
    Modifications:
    
    Fix the last value.
    
    Result:
    
    AsciiString.trim works correctly.

commit 6dbb610f5b5db1851af0e15b77857a071d84f959
Author: Eric Anderson <ejona@google.com>
Date:   Thu Jan 21 12:32:57 2016 -0800

    Add ChannelHandlerContext.invoker()
    
    Motivation:
    
    Being able to access the invoker() is useful when adding additional
    handlers that should be running in the same thread. Since an application
    may be using a threading model unsupported by the default invoker, they
    can specify their own. Because of that, in a handler that auto-adds
    other handlers:
    
    // This is a good pattern
    ctx.pipeline().addBefore(ctx.invoker(), ctx.name(), null, newHandler);
    // This will generally work, but prevents using custom invoker.
    ctx.pipeline().addBefore(ctx.executor(), ctx.name(), null, newHandler);
    
    That's why I believe in commit 110745b0, for the now-defunct 5.0 branch,
    when ChannelHandlerAppender was added the invoker() method was also
    necessary.
    
    There is a side-benefit to exposing the invoker: in certain advanced
    use-cases using the invoker for a particular handler is useful. Using
    the invoker you are able to invoke a _particular_ handler, from possibly
    a different thread yet still using standard exception processing.
    
    ChannelHandlerContext does part of that, but is unwieldy when trying to
    invoke a particular handler because it invokes the prev or next handler,
    not the one the context is for. A workaround is to use the next or prev
    context (respectively), but this breaks when the pipeline changes.
    
    This came up during writing the Http2MultiplexCodec which uses a
    separate child channel for each http/2 stream and wants to send messages
    from the child channel directly to the Http2MultiplexCodec handler that
    created it.
    
    Modifications:
    
    Add the invoker() method to ChannelHandlerContext. It was already being
    implemented by AbstractChannelHandlerContext. The two other
    implementations of ChannelHandlerContext needed minor tweaks.
    
    Result:
    
    Access to the invoker used for a particular handler, for either reusing
    for other handlers or for advanced use-cases. Fixes #4738

commit d1ef33b8f419ac8ae591e864df2cdd24b36ef765
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Tue Jan 19 15:10:15 2016 -0800

    Change 64 to 63 in Snappy.decodeLiteral
    
    Motivation:
    
    According to https://github.com/google/snappy/blob/master/format_description.txt#L55 , Snappy.decodeLiteral should handle the cases of 60, 61, 62 and 63. However right now it processes 64 instead of 63. I believe it's a typo since `tag >> 2 & 0x3F` must be less than 64.
    
    Modifications:
    
    Use the correct value 63.
    
    Result:
    
    Snappy.decodeLiteral handles the correct case.

commit ae4e9ddc2d66f23c3cad6f8adeed72392aae67da
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jan 18 13:00:25 2016 +0100

    Ensure we flush out all pending data on SslException. Related to [#3900]
    
    Motivation:
    
    We need to ensure we flush out all pending data when an SslException accours so the remote peer receives all alerts.
    
    Modifications:
    
    Ensure we call ctx.flush() when needed.
    
    Result:
    
    Correctly receive alerts in all cases on the remote peer.

commit 7494e84208d10c2ec8e940754d857215fb1cdbe8
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jan 19 14:53:55 2016 -0800

    PlatformDependent static initialization ExceptionInInitializerError
    
    Motivation:
    PlatformDependent allows some exceptions to escape during static initialization. If an exception escapes it will be translated into a java.lang.ExceptionInInitializerError and render the application unable to run.
    
    Modifications:
    - Make sure to catch Throwable during static initialization.
    
    Result:
    PlatformDependent static initialization doesn't result in java.lang.ExceptionInInitializerError.

commit 391a4112643940c82ae0be27496da73662d2ee16
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Wed Jan 20 12:54:09 2016 +0100

    Init DnsNameResolverBuilder#nameServerAddresses
    
    Motivation:
    
    DnsNameResolverBuilder#nameServerAddresses isn’t initialized with a
    default value. In most cases, user will want
    DefaultDnsServerAddresses#defaultAddresses.
    
    Modifications:
    
    Initialize DnsNameResolverBuilder#nameServerAddresses with
    DefaultDnsServerAddresses#defaultAddresses
    
    Result:
    
    DnsNameResolverBuilder more convenient usage.

commit 38f27b06e7ccc6fac395d0ed85c763b7a14d6471
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jan 18 20:42:37 2016 +0100

    [#4725] Ensure correct cause of handshake error is included in the SSLHandshakeException when using OpenSslEngine.
    
    Motivation:
    
    We need to ensure we add the correct handshake error to the SSLHandshakeException before throwing it when failing the
    handshake.
    
    Modifications:
    
    Use the correct error string when creating the SSLHandshakeException.
    
    Result:
    
    Correct SSLHandshakeException message included.

commit 3785ca9311270763119a81bc2048e23ce2be0ef7
Author: Robert Borg <rauban@gmail.com>
Date:   Tue Jan 19 20:23:39 2016 +0100

    added support for Protobuf codec nano runtime
    
    Motivation:
    
    Netty was missing support for Protobuf nano runtime targeted at
    weaker systems such as Android devices.
    
    Modifications:
    
    Added ProtobufDecoderNano and ProtobufDecoderNano
    in order to provide support for Nano runtime.
    
    modified ProtobufVarint32FrameDecoder and
    ProtobufLengthFieldPrepender in order to remove any
    on either Nano or Lite runtime by copying the code
    for handling Protobuf varint32 in from Protobuf
    library.
    
    modified Licenses and NOTICE in order to reflect the
    changes i made.
    
    added Protobuf Nano runtime as optional dependency
    
    Result:
    
    Netty now supports Protobuf Nano runtime.

commit 7b51412c3c0503492d5ddd6310e4b4619a8086f9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Dec 17 20:25:02 2015 +0100

    Allow to do async mappings in the SniHandler
    
    Motivation:
    
    Sometimes a user want to do async mappings in the SniHandler as it is not possible to populate a Mapping up front.
    
    Modifications:
    
    Add AsyncMapping interface and make SniHandler work with it.
    
    Result:
    
    It is possible to do async mappings for SNI

commit 7bcae8919d047e987c699beacc66e37632bcac3d
Author: Alex Petrov <oleksandr.petrov@gmail.com>
Date:   Sat Jan 16 22:13:50 2016 +0100

    Log the current channel in Http2FrameLogger
    
    Motivation:
    Currently it's impossible to distinguish which
    connection the corresponding logged message	is
    related to.
    
    Modifications:
    Http2FrameLogger is extended to support channel
    id logging, usages in Inbound/Outbound Frame
    Loggers are adjusted accordingly.
    
    Result:
    Logger outputs the channel id.

commit cdb70d31eebdf19e93191840bb817bcb351cbe3c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jan 12 15:06:30 2016 +0100

    [#4017] Implement proper resource leak detection for CompositeByteBuf
    
    Motivation:
    
    CompositeByteBuf only implemented simple resource leak detection and how it was implemented was completly different to the way it was for ByteBuf. The other problem was that slice(), duplicate() and others would not return a resource leak enabled buffer.
    
    Modifications:
    
    - Proper implementation for all level of resource leak detection for CompositeByteBuf
    
    Result:
    
    Proper resource leak detection for CompositeByteBuf.

commit e969b6917c848c83f02617386f0f73d8f0e130a2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Jan 10 22:19:55 2016 +0100

    Let CombinedChannelDuplexHandler correctly handle exceptionCaught. Related to [#4528]
    
    Motivation:
    
    ChannelInboundHandler and ChannelOutboundHandler both can implement exceptionCaught(...) method and so we need to dispatch to both of them.
    
    Modifications:
    
    - Correctly first dispatch exceptionCaught to the ChannelInboundHandler but also make sure the next handler it will be dispatched to will be the ChannelOutboundHandler
    - Add removeInboundHandler() and removeOutboundHandler() which allows to remove one of the combined handlers
    - Let *Codec extends it and not ChannelHandlerAppender
    - Remove ChannelHandlerAppender
    
    Result:
    
    Correctly handle events and also have same behavior as in 4.0

commit 9e76b5319ef9790d8bce27eacbc2aff4ba312cac
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Sun Jan 17 23:07:02 2016 -0800

    Fix testResolveIp to make it work in some special environment
    
    Motivation:
    
    As "getHostName" may do a reverse name lookup and return a host name based on the system configured name lookup service, testResolveIp may fail in some special environment. See #4720
    
    Modifications:
    
    Use getHostAddress instead of getHostName
    
    Result:
    
    testResolveIp works in all environments

commit 1848e73ce6ce563af315b6a51b60e2cd1a164fbe
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 14 12:15:01 2016 +0100

    Ensure connectPromise is not notified before fireChannelActive() is called.
    
    Motivation:
    
    Our contract in Channels is that the promise should always be notified before the actual callbacks of the ChannelInboundHandler are called. This was not done in the LocalChannel and so the behavior was different to other Channel implementations.
    
    Modifications:
    
    - First complete the ChannelPromise then call fireChannelActive()
    - Guard against NPE when doClose() was called before the task was executed.
    
    Result:
    
    Consistent behavior between LocalChannel and other Channel implementations.

commit b9ae48589b59e4e5f90f73057c36de5d614556dc
Author: Yeti Sno <yeti@yetiz.org>
Date:   Sun Jan 10 21:55:07 2016 +0800

    Make codec-dns can support build a dns server, reply answer from client.
    
    Motivation:
    
    codec-dns has great function to solve dns packet, but only make a query, not answer query from other client.
    
    i make a change of add two classes to fill last pieces of map, finish the server function.
    
    Modifications:
    
    in this change, add two classes of DatagramDnsQueryDecoder and DatagramDnsResponseEncoder to handle client query, reply answer.
    
    Result:
    
    nothing code change after this commit, except two new classes.

commit dea337b4cf3abbf58e48b3a7dc86f13d5ea3cfa7
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Jan 14 22:58:38 2016 -0800

    Native Transport Netty Class Package Prefix
    
    Motivation:
    transport-native-epoll finds java classes from JNI using fully qualified class names. If a shaded version of Netty is used then these lookups will fail.
    
    Modifications:
    - Allow a prefix to be appended to Netty class names in JNI code.
    
    Result:
    JNI code can be used with shaded version of Netty.

commit bf24ffd3354123a7a8602046462973f74963639c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jan 12 21:59:00 2016 +0100

    [#4694] Ensure native transport can also be compiled on 32bit systems.
    
    Motivation:
    
    We should also be able to compile the native transport on 32bit systems.
    
    Modifications:
    
    Add cast to intptr_t for pointers
    
    Result:
    
    It's possible now to also compile on 32bit.

commit 7dba13f276953a983165898206808b14ca0827b6
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jan 12 11:01:06 2016 -0800

    HttpConversionUtil remove throws from method signature
    
    Motivation:
    HttpConversionUtil.toHttp2Headers currently has a throws Exception as part of the signature. This comes from the signature of ByteProcessor.process, but is not necessary because the ByteProcessor used does not throw.
    
    Modifications:
    - Remove throws Exception from the signature of HttpConversionUtil.toHttp2Headers.
    
    Result:
    HttpConversionUtil.toHttp2Headers interface does not propagate a throws Exception when it is used.

commit f7c83c8565a695e226cac118fb353e161c90a7ea
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Thu Jan 14 18:59:35 2016 +0100

    Don't enforce JZlibDecoder on JDK7+, close #4707
    
    Motivation:
    
    `JdkZlibDecoder` is available since Netty 4.0.8 and works with JDK7+.
    However, `io.netty.noJdkZlibDecoder` System prop evaluation always defaults to
    true, causing Netty to always use JZLib when decompressing on the
    client side when the property insn't explictly set to `false`.
    
    Modifications:
    
    Default to `false` instead of `true` when JDK7+.
    
    Result:
    
    JZLib optional as expected on JDK7+.

commit 8b123a554608aa677d1fe30af47776bf6197cd2c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 14 15:22:57 2016 +0100

    Fix AbstractChannelTest errors caused by incorrect mocking
    
    Motivation:
    
    In AbstractChannelTest we not correctly mocked some methods which could lead to test errors. That said it only showed up here when running from the IDE and not from the cmdLine.
    
    Modifications:
    
    Mock methods that are needed for the test
    
    Result:
    
    Test pass in the IDE as well.

commit 3c5abaa39aa434ac39260164d2e71fda23998bc3
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jan 8 11:47:51 2016 +0100

    Correctly handle non handshake commands when using SniHandler
    
    Motivation:
    
    As we can only handle handshake commands to parse SNI we should try to skip alert and change cipher spec commands a few times before we fallback to use a default SslContext.
    
    Modifications:
    
    - Use default SslContext if no application data command was received
    - Use default SslContext if after 4 commands we not received a handshake command
    - Simplify code
    - Eliminate multiple volatile fields
    - Rename SslConstants to SslUtils
    - Share code between SslHandler and SniHandler by moving stuff to SslUtils
    
    Result:
    
    Correct handling of non handshake commands and cleaner code.

commit 4d854cc1496ab3397cad543e0a0557efe1106f0c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jan 12 19:09:40 2016 +0100

    Allow to change if EmbeddedChannel should handle close() and disconnect() different.
    
    Motivation:
    
    At the moment EmbeddedChannel always handle close() and disconnect() the same way which also means that ChannelOutboundHandler.disconnect(...) will never called. We should allow to specify if these are handle different or not to make the use of EmbeddedChannel more flexible.
    
    Modifications:
    
    Add 2 other constructors which allow to specify if disconnect / close are handled the same way or differently.
    
    Result:
    
    More flexible usage of EmbeddedChannel possible.

commit 45674baf3e02239a967e4db8eded75f521df8af4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jan 12 15:19:30 2016 +0100

    Correctly report *LE operations when advanced leak detection is used.
    
    Motivation:
    
    We missed reporting *LE operations when AdvancedLeakAwareByteBuf was used. This could lead to incomplete access reports.
    
    Modifications:
    
    Correctly record access for *LE operations.
    
    Result:
    
    Correct leak reports.

commit f41aa306e9d48cb717f57df468c5631c688a7c79
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jan 12 15:14:00 2016 +0100

    Remove multiple calls to recordLeakNonRefCountingOperation() in AdvancedLeakAwareByteBuf.forEachByteDesc
    
    Motivation:
    
    AdvancedLeakAwareByteBuf.forEachByteDesc(...) called recordLeakNonRefCountingOperation() two times which resulted in incorrect leak detection reports.
    
    Modifications:
    
    Remove duplicated call to recordLeakNonRefCountingOperation()
    
    Result:
    
    Correct leak detection results

commit da01b1daec1d015deba08af8b2df5c272d719c43
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jan 6 13:41:06 2016 +0100

    Decryption failed or bad mac record in Android 5.0
    
    Motivation:
    
    Android 5.0 (API version 21) has a bug which not correctly set the bytesConsumed of SSLEngineResult when HandshakeStatus is FINISHED.  Because of this we need to special handle the status and so workaround the Android bug.
    
    Modifications:
    
    - Break the unwrap for (;;) loop when HandshakeStatus is FINISHED and bytesConsumed == 0 && bytesProduced == 0.
    
    Result:
    
    SslHandler works with all known version of Android.

commit 9ae155d25701591697dfe8b47d4b4b592807531f
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Sun Jan 10 14:48:09 2016 -0800

    Fix InternalAttribute.equals
    
    Motivation:
    
    InternalAttribute doesn't extend Attribute, but its equals only returns true when it compares with an Attribute. So it will return false when comparing with itself.
    
    Modifications:
    
    Make sure InternalAttribute return false for non InternalAttribute objects.
    
    Result:
    
    InternalAttribute's equals works correctly.

commit 6fe0db4001ebb9801705f6f3ca8911ff5fd5fe1e
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Fri Jan 8 15:52:15 2016 -0800

    Fix IndexOutOfBoundsException for CompositeByteBuf #4679
    
    Motivation:
    
    Modifications:
    
    Use the correct start index
    
    Result:
    
    Fixes #4679

commit 5c05629da1bc9022a053a7dce697a1b33b81bfd4
Author: Fernando van Loenhout <ferrytinymailbox@gmail.com>
Date:   Sat Jan 9 01:31:33 2016 +0100

    Fix issue #4676
    
    Fixed spelling mistake at EmbeddedChannel#readOutbound()

commit 751ed6cc94cb4db502144aa28cf9de339ea20cf4
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Thu Jan 7 23:03:12 2016 -0800

    Avoid unnecessary boxing/unboxing
    
    Motivation:
    
    Boxing/unboxing can be avoided.
    
    Modifications:
    
    Use parseInt/parseLong to avoid unnecessary boxing/unboxing.
    
    Result:
    
    Remove unnecessary boxing/unboxing.

commit b4be040f30a30b8f30d936838e3c25d7812311af
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Thu Jan 7 17:49:15 2016 +0100

    Introduce DnsCache API + DnsResolver extensibility
    
    Motivation:
    Caching is currently nested in DnsResolver.
    It should also be possible to extend DnsResolver to ba able to pass a different cache on each resolution attemp.
    
    Modifications:
    
    * Introduce DnsCache, NoopDnsCache and DefaultDnsCache. The latter contains all the current caching logic that was extracted.
    * Introduce protected versions of doResolve and doResolveAll that can be used as extension points to build resolvers that bypass the main cache and use a different one on each resolution.
    
    Result:
    
    Isolated caching logic. Better extensibility.

commit 07d0bcab8cdaa8f4d9ebc1bcc5c1ca4b2f765a8b
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Fri Jan 8 10:20:06 2016 +0100

    Fix deprecated Maven expressions usage
    
    Motivation:
    
    Parent pom.xml uses deprecated maven expressions, such as `${groupId}`
    which should be ${project.groupId}.
    This causes tons of warnings on every module in the build.
    
    Modifications:
    
    Use up to date syntax.
    
    Result:
    
    No more maven warnings.

commit 0c733e14256715e64003a47aa75083c47c781208
Author: fu.jian <fujian1115@gmail.com>
Date:   Fri Jan 8 14:11:58 2016 +0800

    [#2363] Correctly null out SelectionKey[] when selectAgain
    
    Motivation:
    
    The prefix fix of #2363 did not correctly handle the case when selectAgain is true and so missed to null out entries.
    
    Modifications:
    
    Move the i++ from end of loop to beginning of loop
    
    Result:
    
    Entries in the array will be null out so allow to have these GC'ed once the Channel close

commit 1bee71fb1c2066035a6afcba151a1515338d0db9
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Fri Jan 8 00:06:09 2016 +0100

    Fix PlatformDependent.newAtomic*FieldUpdater type safety
    
    Motivation:
    
    * newAtomicIntegerFieldUpdater and newAtomicLongFieldUpdater take a
    class<?> so they're too lax
    * newAtomicReferenceFieldUpdater takes a Class<U> so it's too strict
    and can only be passe a rawtype parameter when dealing w/ generic
    classes
    
    Modifications:
    
    Take a Class<? super T> parameter instead.
    
    Result:
    
    Better type safety and generics support.

commit e578134b5710a4d57027d0d7a1796e12423d0b44
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Dec 29 10:04:34 2015 -0800

    Unpooled and Wrapped Buffer Leak
    
    Motivation:
    There are a few buffer leaks related to how Unpooled.wrapped and Base64.encode is used.
    
    Modifications:
    - Fix usages of Bas64.encode to correct leaks
    - Clarify interface of Unpooled.wrapped* to ensure reference count ownership is clearly defined.
    
    Result:
    Reference count code is more clearly defined and less leaks are possible.

commit e7af3ee9709a7b7ce5373601f571f94fc4aa5fc9
Author: ChristopherDancy <christopher.dancy@pega.com>
Date:   Tue Jan 5 16:03:47 2016 -0500

    [#4658] Fix encoding of pom.xml file
    
    Motivation:
    
    transport-native-epoll has its pom.xml encoding attribute set to ISO-8859-15. Because
    of this gradle, and other dependency management systems, can't correctly resolve this
    library from wherever it happens to be published.
    
    Modifications:
    
    netty/transport-native-epoll/pom.xml had its xml encoding changed to UTF-9
    
    Result:
    
    Gradle, and other dependency management systems, will now be able to correctly resolve this module.

commit c205e2be76bf5672af36138ac62b69bc10971277
Author: William Kemper <doohick@gmail.com>
Date:   Mon Jan 4 12:07:50 2016 -0800

    Set DSCP bits for IPv6 when setting traffic class.
    
    Motivation:
    
    Linux uses different socket options to set the traffic class (DSCP) on IPv6
    
    Modifications:
    
    Also set IPV6_TCLASS for IPv6 sockets
    
    Result:
    
    TrafficClass will work on IPv4 and IPv6 correctly

commit 4eaa59d516357de12f7017da937e2e3d86091897
Author: Sergey Polovko <jamel@yandex-team.ru>
Date:   Tue Jan 5 21:21:00 2016 +0300

    Improve SctpMessage.hashCode method
    
    Motivation:
    
    Not all fields of SctpMessage which used to check message equality are used
    to generate hashcode.
    
    Modifications:
    
    Use value of 'unordered' field in hashCode method.
    
    Result:
    
    Better hash function of SctpMessage.

commit a157528ec27a2d75b827b81397738e7ad2effbff
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jan 4 21:22:48 2016 +0100

    Ensure we only add OpenSslEngine to the OpenSslEngineMap when handshake is started
    
    Motivation:
    
    We need to ensure we only add the OpenSslEngine to the OpenSslEngineMap when the handshake is started as otherwise we may produce a memory leak when the OpenSslEngine is created but not actually used. This can for example happen if we encounter a connection refused from the remote peer. In this case we will never remove the OpenSslEngine from the OpenSslEngineMap and so it will never be collected (as we hold a reference). This has as affect that the finalizer will never be run as well.
    
    Modifications:
    
    - Lazy add the OpenSslEngine to the OpenSslEngineMap to elimate possible leak.
    - Call OpenSslEngine.shutdown() when SslHandler is removed from the ChannelPipeline to free memory asap in all cases.
    
    Result:
    
    No more memory leak with OpenSslEngine if connection is refused.

commit 4cdbe3928424b5b38695967c0cc1062dccf1a83c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Dec 29 22:06:28 2015 +0100

    [#4635] Stop decoding if decoder was removed
    
    Motivation:
    
    We need to check if this handler was removed before continuing with decoding.
    If it was removed, it is not safe to continue to operate on the buffer.
    
    Modifications:
    
    Check if decoder was removed after fire messages through the pipeline.
    
    Result:
    
    No illegal buffer access when decoder was removed.

commit 9e1e4f79c76f39c8d6efccbf8351e7d13ced8007
Author: Sergey Polovko <jamel@yandex-team.ru>
Date:   Tue Jan 5 00:40:35 2016 +0300

    Fix SctpMessage.duplicate() behavior
    
    Motivation:
    
    SctpMessage.duplicate() copied message content that leads to additional buffer
    allocation and memory copying.
    
    Modifications:
    
    Duplicate message content instead of copying it.
    
    Result:
    
    Better performace and less memory consumption.

commit bf2a99518c3ebc484464fc35279452ddd24c0ea9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jan 1 20:55:48 2016 +0100

    Simplify synchronized syntax
    
    Motivation:
    
    We often used synchronized(this) while the whole method was synchronized, which can be simplified by just mark the whole method as synchronized.
    
    Modifications:
    
    Replace synchronized(this) with synchronized on the method
    
    Result:
    
    Cleaner code

commit 55af6f155226259d19a570e9021c2d91161b9986
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jan 4 17:23:23 2016 +0900

    Use jetty-alpn-agent to simplify pom.xml
    
    Motivation:
    
    We had to add a new profile for each OpenJDK/OracleJDK release to make
    Maven choose the correct alpn-boot.jar and npn-boot.jar. As a result,
    our pom.xml has a large number of `<profile/>` sections.
    
    Modifications:
    
    - Use jetty-alpn-agent, which chooses the correct alpn-boot.jar and
      npn-boot.jar automatically to remove all the nasty profile sections
      from pom.xml
      - Visit https://github.com/trustin/jetty-alpn-agent for more info
    
    Result:
    
    Cleaner pom.xml

commit 619d82b56fa41850cfbfedde0eef84fa788661ed
Author: Fabian Lange <lange.fabian@gmail.com>
Date:   Mon Jan 4 13:57:17 2016 +0100

    Removed unused imports
    
    Motivation:
    
    Warnings in IDE, unclean code, negligible performance impact.
    
    Modification:
    
    Deletion of unused imports
    
    Result:
    
    No more warnings in IDE, cleaner code, negligible performance improvement.

commit 8dc164ace6b9e981d68d6ad57d50f9d2c8ad67b5
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jan 4 14:29:21 2016 +0100

    Correctly reset MessageDigest before reusing it.
    
    Motivation:
    
    I missed to reset the MessageDigest before reusing it. This bug was introduced by 79634e661b000b5f229fdde20e44fdeab15c5ae2.
    
    Modifications:
    
    Call reset() on the MessageDigest.
    
    Result:
    
    Correctly reset MessageDigest before re-using

commit bc2559ceb1fba6b1f97d99494be90e83b3ead6e7
Author: Sergey Polovko <jamel@yandex-team.ru>
Date:   Mon Jan 4 05:09:52 2016 +0300

    fix links to github issues in javadoc

commit 1b0adb334be468c7148dca36a26caf032bc5b33e
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Thu Dec 31 09:57:22 2015 -0800

    Fix incorrect Serializable
    
    Motivation:
    
    SpdySession.StreamComparator should not be Serializable since SpdySession is not Serializable
    
    Modifications:
    
    Remove Serializable fom SpdySession.StreamComparator
    
    Result:
    
    StreamComparator is not Serializable any more

commit 78c4bd474e9b67f40536714a028da5091a98e81f
Author: Alex Petrov <oleksandr.petrov@gmail.com>
Date:   Thu Dec 31 14:44:51 2015 +0100

    IllealRefCountException should be IllegalReferenceCountException, fix typos
    
    Motivation:
    
    Typos in javadoc, in "combine" and "recommendations", IllegalReferenceCountException
    
    Modification:
    
    Rename incorrect reference, typos are modified
    
    Result:
    
    Reference is correct, typos are fixed

commit 8716b9d4bd5bccd98187718dafbb2d6f3c6b42a2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Dec 31 14:48:10 2015 +0100

    Revert "Fix unnecessary boxing and incorrect Serializable"
    
    This reverts commit 0ae6f172851345b02fecc6b11a7dfea1eb60a9d5.

commit 79634e661b000b5f229fdde20e44fdeab15c5ae2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Dec 18 11:09:59 2015 +0100

    Obtain MessageDigest via FastThreadLocal
    
    Motivation:
    
    Creating a new MessageDigest every time is wasteful, we should store them in FastThreadLocal.
    
    Modifications:
    
    Change WebSocketUtil to store MD5 and SHA1 MessageDigest in FastThreadLocal and use these.
    
    Result:
    
    Less overhead and less GC.

commit 0ae6f172851345b02fecc6b11a7dfea1eb60a9d5
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Wed Dec 30 21:44:42 2015 -0800

    Fix unnecessary boxing and incorrect Serializable
    
    Motivation:
    
    - AbstractHttp2ConnectionHandlerBuilder.encoderEnforceMaxConcurrentStreams can be the primitive boolean
    - SpdySession.StreamComparator should not be Serializable since SpdySession is not Serializable
    
    Modifications:
    
    Use boolean instead and remove Serializable
    
    Result:
    
    - Minor improvement for AbstractHttp2ConnectionHandlerBuilder
    - StreamComparator is not Serializable any more

commit 0b16c3c513aea440ab3c929dd5175924252b21f2
Author: Alex Petrov <oleksandr.petrov@gmail.com>
Date:   Wed Dec 30 22:49:03 2015 +0100

    Add a possibility to create HttpMessage instances with pre-existing Headers
    
    Motivation:
    
    Allow passing HttpHeaders instance to DefaultHttpMessage
    in order to avoid eager creation of Headers to
    allow users reuse their Headers instance.
    
    Modifications:
    
    Added a constructor with HttpHeaders to DefaultHttpMessage,
    Modified DefaultHttpResponse and DefaultHttpRequest
    to receive HttpHeaders instances.
    Modified DefaultFullHttpReqest and DefaultFullHttpResponse
    to receive HttpHeaders, and updated `duplicate` and
    `copy` to use new constructors.
    
    Result:
    
    Users can now pass HttpHeaders instance when
    constructing Http Requests and Responses.

commit f90032933df8b27e8542fdeb40fb6381f2062563
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Mon Dec 28 00:33:19 2015 -0800

    javadoc fix and better cleanup for WriteTimeoutHandler
    
    Motivation:
    
    - Javadoc is not correct (#4353)
    - WriteTimeoutHandler does not always cancel the timeout task (#2973)
    
    Modifications:
    
    Fix the javadoc and cleanup timeout task in handlerRemoved
    
    Result:
    
    WriteTimeoutHandler's javadoc describes the correct behavior and it will cancel timeout tasks when it's removed.

commit 6ee5341cdfa397a7b2ca123b0f8a5f3170133429
Author: louxiu <lou.0211@gmail.com>
Date:   Wed Dec 30 00:13:07 2015 +0800

    Fix typo Motivation:
    
    MessageReciever should be MessageReceiver
    
    Modifications:
    
    Refactor MessageReciever to MessageReceiver
    
    Result:
    
    No more typo

commit 79bc90be3215509e98a86239217226572e7887e5
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Dec 29 11:33:22 2015 +0100

    Fix buffer leak introduced by 693633eeff106febf4403208f9eed2117931f45a
    
    Motivation:
    
    As we not used Unpooled anymore for allocate buffers in Base64.* methods we need to ensure we realease all the buffers.
    
    Modifications:
    
    Correctly release buffers
    
    Result:
    
    No more buffer leaks

commit 87327452640adb3407d1ffae8987eec98e166e2f
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Dec 28 12:12:19 2015 -0800

    OpenSslEngine skip ALPN tests if OpenSsl version doesn't support ALPN
    
    Motivation:
    OpenSslEngine now tests ALPN behavior. However it is possible that OpenSSL is present, but the version does not support ALPN. This will result in test failures instead of just skipping the test.
    
    Modifications:
    - Skip ALPN tests in OpenSslEngineTest if the version of OpenSSL does not support ALPN
    
    Result:
    Tests don't fail due to unsupported feature in OpenSSL.

commit ba22b0b9442b4d1fd4bd1897153430746af07534
Author: Alex Petrov <oleksandr.petrov@gmail.com>
Date:   Sat Dec 26 19:42:00 2015 +0100

    Implement OpenSSL Engine tests for NPN / ALPN.
    Motivation:
    
    Currently there are no tests for OpenSSL Engine,
    only for JdkSSL engine.
    
    Modifications:
    
    Common methods from `JdkSslEngine` test moved
    to `SSLEngineTest`, JdkSslEngine now implements
    NPN and ALPN tests.
    
    Result:
    
    OpenSSL Engine is now covered with unit tests.

commit 0efb6795855505f0778612d05bd04cd0b30eb8c0
Author: Sergey Polovko <jamel@yandex-team.ru>
Date:   Mon Dec 28 04:57:08 2015 +0300

    replace ends -> starts

commit 475d9011313ce875d2a5c48d7621664320ad413a
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Sat Dec 26 22:19:11 2015 -0800

    Fix errors reported by javadoc
    
    Motivation:
    
    Javadoc reports errors about invalid docs.
    
    Modifications:
    
    Fix some errors reported by javadoc.
    
    Result:
    
    A lot of javadoc errors are fixed by this patch.

commit a96d52fe66536ae0633e1a066d4ee008b3173f8f
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Fri Dec 25 19:16:00 2015 -0800

    Fix javadoc links and tags
    
    Motivation:
    
    There are some wrong links and tags in javadoc.
    
    Modifications:
    
    Fix the wrong links and tags in javadoc.
    
    Result:
    
    These links will work correctly in javadoc.

commit fd5316ed6fcde05274df38c26b9481771c182c5c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Dec 23 10:05:19 2015 -0800

    ChunkedInput.readChunk parameter of type ByteBufAllocator
    
    Motivation:
    ChunkedInput.readChunk currently takes a ChannelHandlerContext object as a parameters. All current implementations of this interface only use this object to get the ByteBufAllocator object. Thus taking a ChannelHandlerContext as a parameter is more restrictive for users of this API than necessary.
    
    Modifications:
    - Add a new method readChunk(ByteBufAllocator)
    - Deprecate readChunk(ChannelHandlerContext) and updates all implementations to call readChunk(ByteBufAllocator)
    
    Result:
    API that only requires ByteBufAllocator to use ChunkedInput.

commit d59bf84ef2670ab830782f8e8036f0b3c1f46f34
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Dec 21 16:20:02 2015 +0100

    [#4435] Always invoke the actual deregisteration later in the EventLoop.
    
    Motivation:
    
    As a user may call deregister() from within any method while doing processing in the ChannelPipeline,  we need to ensure we do the actual deregister operation later. This is needed as for example,  we may be in the ByteToMessageDecoder.callDecode(...) method and so still try to do processing in the old EventLoop while the user already registered the Channel to a new EventLoop. Without delay, the deregister operation this could lead to have a handler invoked by different EventLoop and so threads.
    
    Modifications:
    
    Ensure the actual deregister will be done later on and not directly when invoked.
    
    Result:
    
    Calling deregister() within ByteToMessageDecoder.decode(..) is safe.

commit 507feb560296dc426423805fb8c122da0e9c01c7
Author: Xiaoyan Lin <linxiaoyan18@gmail.com>
Date:   Tue Dec 22 16:28:03 2015 -0800

    Close FileInputStream after consuming it in SelfSignedCertificate
    
    Motivation:
    
    FileInputStream opened by SelfSignedCertificate wasn't closed.
    
    Modifications:
    
    Use a try-finally to close the opened FileInputStream.
    
    Result:
    
    FileInputStream will be closed properly.

commit 80f45d6ae5919c4eb4135914571ebc73cf88f60d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Dec 22 21:16:29 2015 +0100

    Ensure closing a Socket / FileDescriptor multiple times will not throw exception
    
    Motivation:
    
    If an user will close a Socket / FileDescriptor multiple times we should handle the extra close operations as NOOP.
    
    Modifications:
    
    Only do the actual closing one time
    
    Result:
    
    No exception if close is called multiple times.

commit cfd6793bb7b1ae6769cf0b3eaffd1aecfa6fbd32
Author: Alexey Ermakov <zee@technocore.ru>
Date:   Wed Dec 23 16:14:15 2015 +0300

    Customizable estimation for messages written outside the EventLoop
    
    Motivation:
    
    Estimation algorithm currently used for WriteTasks is complicated and
    wrong. Additionally, some code relies on outbound buffer size
    incremented only on actual writes to the outbound buffer.
    
    Modifications:
    
    - Throw away the old estimator and replace with a simple algorithm that
      uses the client-provided estimator along with a statically configured
      WriteTask overhead (io.netty.transport.writeTaskSizeOverhead system
      property with the default value of 48 bytes)
    - Add a io.netty.transport.estimateSizeOnSubmit boolean system property
      allowing the clients to disable the message estimation outside the
      event loop
    
    Result:
    
    Task estimation is user controllable and produces better results by
    default

commit 80cff236e461191d2fd9acf850be728c0415c9e4
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Dec 17 12:27:13 2015 -0800

    HTTP/2 UniformStreamByteDistributor negative window shouldn't write
    
    Motivation:
    If the stream window is negative UniformStreamByteDistributor may write data. This is prohibited by the RFC https://tools.ietf.org/html/rfc7540#section-6.9.2.
    
    Modifications:
    - UniformStreamByteDistributor should use StreamState.isWriteAllowed()
    
    Result:
    UniformStreamByteDistributor is more complaint with HTTP/2 RFC.
    Fixes https://github.com/netty/netty/issues/4545

commit e3d5ca82c002eeb189c2a27a396a5f62498710ae
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Dec 18 23:36:34 2015 +0100

    [#4604] EpollSocketChannelConfig.isKeepAlive(...) throws UnsatisfieldLinkError
    
    Motivation:
    
    We missed to define the actual c function for isKeepAlive(...) and so throw UnsatisfieldLinkError.
    
    Modifications:
    
    - Add function
    - Add unit test for Socket class
    
    Result:
    
    Correctly work isKeepAlive(...) when using native transport

commit 7b2f55ec2fa83873c4eeacb7fbccaecfedece63e
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Dec 18 13:35:37 2015 -0800

    HTTP/2 Remove RemoteFlowController.streamWritten
    
    Motivation:
    RemoteFlowController.streamWritten is not currently required. We should remove it to keep interfaces minimal.
    
    Modifications:
    - Remove RemoteFlowController.streamWritten
    
    Result:
    1 Less method in RemoteFlowController interface.
    Fixes https://github.com/netty/netty/issues/4600

commit e4cb163be2dc6cf6bd417acd62d3cc4e74f7473b
Author: Jonas Berlin <github@outerspace.dyndns.org>
Date:   Tue Dec 22 15:26:10 2015 +0200

    Fix javadoc link

commit f22ad97cf30c63c0d93d7c40541da10a4de66f5f
Author: zhangduo <zhangduo@wandoujia.com>
Date:   Tue Dec 22 10:08:24 2015 +0800

    Remove PriorityStreamByteDistributor from http2 microbench
    
    Motivation:
    PriorityStreamByteDistributor has been removed but NoPriorityByteDistributionBenchmark in microbench still need it and causes compile error
    
    Modifications:
    Remove PriorityStreamByteDistributor from NoPriorityByteDistributionBenchmark
    
    Result:
    The compile error has been fixed

commit b5d90388eaf3725757bc0c5dd7a0fa86ec0683ef
Author: Shixiong Zhu <zsxwing@gmail.com>
Date:   Mon Dec 21 20:28:39 2015 -0800

    Fix HttpHeaderValues.IDENTITY equals usage
    
    Motivation:
    
    HttpHeaderValues.IDENTITY is an AsciiString, but was compared using equals to a String.
    
    Modifications:
    
    Use contentEquals instead.
    
    Result:
    Correct comparison.

commit 72accceeacf15d13358d5c46d5c414fc49f6c38d
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Dec 17 13:30:13 2015 -0800

    HTTP/2 remove PriorityStreamByteDistributor
    
    Motivation:
    PriorityStreamByteDistributor is now obsolete and can be replaced by WeightedFairQueueByteDistributor.
    
    Modifications:
    - Remove PriorityStreamByteDistributor and use WeightedFairQueueByteDistributor by default.
    
    Result:
    PriorityStreamByteDistributor no longer has to be maintained and is replaced by a better algorithm.

commit 9ac430f16fec1d3b0d0e433b953c0197d70dff10
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Dec 17 15:28:30 2015 -0800

    HTTP/2 DefaultHttp2RemoteFlowController Stream writability notification broken
    
    Motivation:
    DefaultHttp2RemoteFlowController.ListenerWritabilityMonitor no longer reliably detects when a stream's writability change occurs.
    
    Modifications:
    - Ensure writiability is reliabily reported by DefaultHttp2RemoteFlowController.ListenerWritabilityMonitor
    - Fix infinite loop issue (https://github.com/netty/netty/issues/4588) detected when consolidating unit tests
    
    Result:
    Reliable stream writability change notification, and 1 less infinite loop in UniformStreamByteDistributor.
    Fixes https://github.com/netty/netty/issues/4587

commit c22f1aa4acad4234623c31121f33b2b2f3afffc5
Author: zhangduo <zhangduo@wandoujia.com>
Date:   Mon Dec 21 16:33:42 2015 +0800

    Clear selectedKeys in OioSctpChannel.doReadMessages
    
    Motivation:
    The fix for https://github.com/netty/netty/issues/3884 breaks SctpEchoTest because Selector.select will always return 0 if you do not clear last selectedKeys.
    
    Modifications:
    Clear readSelector.selectedKeys() if it is not empty.
    
    Result:
    SctpEchoTest is green again.

commit 7c1602125a94583c3004cb30ead329845c2a679c
Author: eantaev <antaev@gmail.com>
Date:   Thu Dec 17 00:46:25 2015 +0300

    Builder to construct DomainNameMapping.
    
    Motivation:
    
    DomainNameMapping.add() makes DomainNameMapping look like it's safe to call add() anytime, and this is never true. It's probably better deprecate add() and introduce DomainNameMappingBuilder.
    
    Modifications:
    
    Made an immutable implementation of DomainNameMapping;
    Added Builder for immutable DomainNameMapping;
    Replaced regex pattern with String::startsWith check;
    Replaced HashMap with two arrays in ImmutableDomainNameMapping;
    Deprecated mutable API;
    Estimation for StringBuilder initial size in ImmutableDomainNameMapping#toString()
    Added StringUtil#commonSuffixOfLength
    Replaced unnecessary substrings creation in DomainNameMapping#matches with regionMatches
    
    Result:
    
    Clients will be able to create immutable instances of DomainNameMapping with builder API.

commit f750d6e36c80e88fb302c99b5b7413e5649e6738
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Dec 18 10:53:54 2015 -0800

    ByteBufUtil.writeUtf8 Surrogate Support
    
    Motivation:
    UTF-16 can not represent the full range of Unicode characters, and thus has the concept of Surrogate Pair (http://unicode.org/glossary/#surrogate_pair) where 2 16-bit code units can be used to represent the missing characters. ByteBufUtil.writeUtf8 is currently does not support this and is thus incomplete.
    
    Modifications:
    - Add support for surrogate pairs in ByteBufUtil.writeUtf8
    
    Result:
    ByteBufUtil.writeUtf8 now supports surrogate pairs and is correctly converting to UTF-8.

commit 693633eeff106febf4403208f9eed2117931f45a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Dec 18 10:16:46 2015 +0100

    Not use Unpooled to allocate buffers in Base64 but use a ByteBufAllocator
    
    Motivation:
    
    We should not use Unpooled to allocate buffers for performance reasons.
    
    Modifications:
    
    Allow to pass in ByteBufAllocate which is used to allocate buffers or use the allocate of the src buffer.
    
    Result:
    
    Better performance if the PooledByteBufAllocator is used.

commit 63426fc3ed083513c07a58b45381f5c10dd47061
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Dec 18 09:44:57 2015 +0100

    Prevent adding newline if Base64 buffer encoded ends directly on MAX_LINE_LENGTH
    
    Motivation:
    
    We need to ensure we not add a newline if the Base64 encoded buffer ends directly on the MAX_LINE_LENGTH. If we miss to do so this produce invalid data.
    Because of this bug OpenSslServerContext and OpenSslClientContext may fail to load a cert.
    
    Modifications:
    
    - Only add NEW_LINE if we not are on the end of the dst buffer.
    - Add unit test
    
    Result:
    
    Correct result in all cases

commit ee56a4a5c6e27649c0ff13b50e1654016ffa94fc
Author: nmittler <nathanmittler@google.com>
Date:   Fri Dec 18 09:39:20 2015 -0800

    Fixing broken HTTP/2 benchmark
    
    Motivation:
    
    The `NoPriorityByteDistibbutionBenchmark` was broken with a recent commit.
    
    Modifications:
    
    Fixed the benchmark to use the new HTTP2 handler builder.
    
    Result:
    
    It builds.

commit 9b171beb92ce759e0c4c2dd7ddbb5e345a789e83
Author: Sky Ao <aoxiaojian@gmail.com>
Date:   Fri Dec 18 10:27:37 2015 +0800

    Trivial javadoc fixes in ChannelHandlerContext

commit 1a2162ec35c6ab4b4c93d08ce7e1627cc1d63d50
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Dec 18 10:16:07 2015 +0100

    Fix broken tests introduced by dc615ecaaf9749edd227413c32c2f288dfc1309e

commit dc615ecaaf9749edd227413c32c2f288dfc1309e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Dec 17 14:57:36 2015 +0100

    [#4212] Backport WebSocket Extension handlers for client and server.
    
    Motivation:
    
    We have websocket extension support (with compression) in old master. We should port this to 4.1
    
    Modifications:
    
    Backport relevant code.
    
    Result:
    
    websocket extension support (with compression) is now in 4.1.

commit b39380ad83cda7ebe79d692216e204b8b6b67568
Author: Trustin Lee <t@motd.kr>
Date:   Thu Dec 17 15:52:32 2015 +0900

    Revamp InboundHttp2ToHttpAdapter builder API
    
    Related: #4572 #4574
    
    Motivation:
    
    Consistency in our builder API design
    
    Modifications:
    
    - Add AbstractInboundHttp2ToHttpAdapterBuilder
    - Replace the old 'Builder's with InboundHttp2ToHttpAdapterBuilder and
      InboundHttp2ToHttpPriorityAdapterBuilder
    
    Result:
    
    Builder API consistency

commit 412f719aa82a830966d6aa7ee0164ccd18b9280c
Author: Trustin Lee <t@motd.kr>
Date:   Thu Dec 17 15:05:44 2015 +0900

    Extract the builder of CorsConfig to top level
    
    Motivation:
    
    Consistency in API design
    
    Modifications:
    
    - Deprecate CorsConfig.Builder and its factory methods
    - Deprecate CorsConfig.DateValueGenerator
    - Add CorsConfigBuilder and its factory methods
    - Fix typo (curcuit -> circuit)
    
    Result:
    
    Consistency with other builder APIs such as SslContextBuilder and
    Http2ConnectionHandlerBuilder

commit b62c5290ed0fbe8ddd67a9ae7e05312bb59dc22a
Author: Trustin Lee <t@motd.kr>
Date:   Thu Dec 17 13:55:10 2015 +0900

    Let SniHandler accept Mapping as well as DominaNameMapping
    
    Related: #4470 #4473
    
    Motivation:
    
    A user might want to:
    
    - implement dynamic mapping from hostname to SslContext
    - server large number of domain names whose SslContext can be
      initialized lazily and destroyed when unused
    
    Modifications:
    
    - Let SniHandler accept Mapping<String, SslContext> as well as
      DomainNameMapping
    - Make the default constructor of SslContext so that a user can create
      his or her own SslContext wrapper
    
    Result:
    
    Flexibility

commit 904e70a4d4065a8e9da882e8319c7d05846c799d
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Dec 2 12:43:26 2015 -0800

    HTTP/2 Weighted Fair Queue Byte Distributor
    
    Motivation:
    PriorityStreamByteDistributor uses a homegrown algorithm which distributes bytes to nodes in the priority tree. PriorityStreamByteDistributor has no concept of goodput which may result in poor utilization of network resources. PriorityStreamByteDistributor also has performance issues related to the tree traversal approach and number of nodes that must be visited. There also exists some more proven algorithms from the resource scheduling domain which PriorityStreamByteDistributor does not employ.
    
    Modifications:
    - Introduce a new ByteDistributor which uses elements from weighted fair queue schedulers
    
    Result:
    StreamByteDistributor which is sensitive to priority and uses a more familiar distribution concept.
    Fixes https://github.com/netty/netty/issues/4462

commit 8d4db050f36929430e6699eec640de8eab1f3df2
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Mon Dec 14 15:27:49 2015 +0100

    Have hosts file support for DnsNameResolver, close #4074
    
    Motivation:
    
    On contrary to `DefaultNameResolver`, `DnsNameResolver` doesn't currently honor hosts file.
    
    Modifications:
    
    * Introduce `HostsFileParser` that parses `/etc/hosts` or `C:\Windows\system32\drivers\etc\hosts` depending on the platform
    * Introduce `HostsFileEntriesResolver` that uses the former to resolve host names
    * Make `DnsNameResolver` check his `HostsFileEntriesResolver` prior to trying to resolve names against the DNS server
    * Introduce `DnsNameResolverBuilder` so we now have a builder for `DnsNameResolver`s
    * Additionally introduce a `CompositeNameResolver` that takes several `NameResolver`s and tries to resolve names by delegating sequentially
    * Change `DnsNameResolver.asAddressResolver` to return a composite and honor hosts file
    
    Result:
    
    Hosts file support when using `DnsNameResolver`.
    Consistent behavior with JDK implementation.

commit 4e467f5c6fe9254ae3c143788dbc3593cb2bb8fc
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Dec 12 19:42:45 2015 +0100

    Throw ReadOnlyBufferException if unsafe buffer is used and dst is direct
    
    Motivation:
    
    We missed to check if the dst is ready only before using unsafe to copy data into it which lead to data-corruption. We need to ensure we respect ready only ByteBuffer.
    
    Modifications:
    
    - Correctly check if the dst is ready only before copy data into it in UnsafeByteBufUtil
    - Also make it work for buffers that are not direct and not have an array
    
    Result:
    
    No more data corruption possible if the dst buffer is readonly and unsafe buffer implementation is used.

commit dd9fc289fd73b1156e03ab41bdaccea3f45de3e8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Dec 15 15:06:54 2015 +0100

    Throw exception if KeyManagerFactory is used with OpenSslServerContext
    
    Motivation:
    
    We currently not supported using KeyManagerFactory with OpenSslServerContext and so should throw an exception if the user tries to do so. This will at least not give suprising and hard to debug problems later.
    
    Modifications:
    
    Throw exception if a user tries to construct a OpenSslServerContext with a KeyManagerFactory
    
    Result:
    
    Fail fast if the user tries to use something that is not supported.

commit 2202e8f967fa8b45149e794bcc0813a0177da42e
Author: Trustin Lee <t@motd.kr>
Date:   Wed Dec 16 14:10:28 2015 +0900

    Revamp the Http2ConnectionHandler builder API
    
    Related: #4572
    
    Motivation:
    
    - A user might want to extend Http2ConnectionHandler and define his/her
      own static inner Builder class that extends
      Http2ConnectionHandler.BuilderBase. This introduces potential
      confusion because there's already Http2ConnectionHandler.Builder. Your
      IDE will warn about this name duplication as well.
    - BuilderBase exposes all setters with public modifier. A user's Builder
      might not want to expose them to enforce it to certain configuration.
      There's no way to hide them because it's public already and they are
      final.
    - BuilderBase.build(Http2ConnectionDecoder, Http2ConnectionEncoder)
      ignores most properties exposed by BuilderBase, such as
      validateHeaders, frameLogger and encoderEnforceMaxConcurrentStreams.
      If any build() method ignores the properties exposed by the builder,
      there's something wrong.
    - A user's Builder that extends BuilderBase might want to require more
      parameters in build(). There's no way to do that cleanly because
      build() is public and final already.
    
    Modifications:
    
    - Make BuilderBase and Builder top-level so that there's no duplicate
      name issue anymore.
      - Add AbstractHttp2ConnectionHandlerBuilder
      - Add Http2ConnectionHandlerBuilder
      - Add HttpToHttp2ConnectionHandlerBuilder
    - Make all builder methods in AbstractHttp2ConnectionHandlerBuilder
      protected so that a subclass can choose which methods to expose
    - Provide only a single build() method
      - Add connection() and codec() so that a user can still specify
        Http2Connection or Http2Connection(En|De)coder explicitly
      - Implement proper state validation mechanism so that it is prevented
        to invoke conflicting setters
    
    Result:
    
    Less confusing yet flexible builder API

commit 253cd694ef6317d52d41b220f4dcf5fd69f44ec3
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Dec 11 15:12:43 2015 +0100

    Ensure we not leave data in the BIO when error happens.
    
    Motivation:
    
    We need to ensure we consume all pending data in the BIO on error to correctly send the close notify for the remote peer.
    
    Modifications:
    
    Correctly force the user to call wrap(...) if there is something left in the BIO.
    
    Result:
    
    close_notify is not lost.

commit eb577c5bd9ff4986ce4fe9e18acde9b0de6b2097
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Dec 15 14:43:35 2015 +0100

    Respect ClientAuth set via OpenSslEngine constructor
    
    Motivation:
    
    When ClientAuth is set via SslContextBuilder we pass it into the OpenSslEngine constructor. Due a bug we missed to call the correct native methods and so never enabled ClientAuth in this case.
    
    Modifications:
    
    Correctly call setClientAuth(...) in the constructor if needed.
    
    Result:
    
    client auth also works when configured via the SslContextBuilder and OPENSSL is used.

commit 27b330d8b1094ce9875f121aef5ec525e6b35030
Author: nmittler <nathanmittler@google.com>
Date:   Mon Dec 14 08:42:57 2015 -0800

    Moving KObjectHashMapTest to propert directory
    
    Motivation:
    
    The KObjectHashMapTest is in a directory called "io.netty.util.collection" rather than "io/netty/util/collection". This causes the generated tests to be created in the wrong directory as well.
    
    Modifications:
    
    Moved the file.
    
    Result:
    
    Fixes #4546

commit 6393506b97f71ed109548946b86db9b88bbfe44d
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Sun Dec 13 00:11:59 2015 +0100

    Extract SocketAdress logic from NameResolver
    
    Motivation:
    
    As discussed in #4529, NameResolver design shouldn't be resolving SocketAddresses (or String name + port) and return InetSocketAddresses. It should resolve String names and return InetAddresses.
    This SocketAddress to InetSocketAddresses resolution is actually a different concern, used by Bootstrap.
    
    Modifications:
    
    Extract SocketAddress to InetSocketAddresses resolution concern to a new class hierarchy named AddressResolver.
    These AddressResolvers delegate to NameResolvers.
    
    Result:
    
    Better separation of concerns.
    
    Note that new AddressResolvers generate a bit more allocations because of the intermediate Promise and List<InetAddress>.

commit 89ff831a670d4303881db17a91a9c54e9f41987e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Nov 28 20:59:40 2015 +0100

    [#4449] Remove registered events from eventloop before close
    
    Motivation:
    
    We need to remove all registered events for a Channel from the EventLoop before doing the actual close to ensure we not produce a cpu spin when the actual close operation is delayed or executed outside of the EventLoop.
    
    Modifications:
    
    Deregister for events for NIO and EPOLL socket implementations when SO_LINGER is used.
    
    Result:
    
    No more cpu spin.

commit e8eda1b99fa0a1765e590357e2b0b4d859d4aebc
Author: Brendt Lucas <brendt@idnet.com>
Date:   Sat Dec 12 17:40:26 2015 +0000

    Fix AsciiString.contentEqualsIgnoreCase
    
    Motivation:
    
    Related to issue #4564.
    
    AsciiString.contentEqualsIgnoreCase fails when comparing two AsciiStrings of the same length
    
    Modifications:
    
    Compare the values of the first AsciiString to the second AsciiString
    
    Result:
    
    AsciiString.contentEqualsIgnoreCase works as expected

commit e5386b05e61da1d1791b40af3f50155b58470a4b
Author: Fabian Lange <lange.fabian@gmail.com>
Date:   Thu Dec 10 23:13:38 2015 +0100

    Move Hex dump related util from ByteBufUtil to inner class
    
    Motivation:
    
    Initialisation of the ByteBufUtil class, a class frequently used is
    delayed because a significant number of String operations is performed to
    fill a HEXDUMP_ROWPREFIXES array. This array also sticks to the Strings
    forever.
    It is quite likely that applications never use the hexdump facility.
    
    Modification:
    
    Moved the static initialisation and references to a static inner class.
    This delays initialisation (and memory usage) until actually needed.
    The API is kept as is.
    
    Result:
    
    Faster startup time, less memory usage for most netty using applications.

commit 1d0b6ad75e1f8ca2934a7fe8d00953a430806184
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Dec 11 10:33:53 2015 -0800

    DefaultPromiseTest dead code removal
    
    Motivation:
    DefaultPromiseTest has dead code which was left over from a code restructure. Shared code between 2 tests was moved into a common method, but some code which was not cleaned up in each of these methods after the code was moved.
    
    Modifications:
    - Delete dead code in DefaultPromiseTest
    
    Result:
    Less dead code

commit 32933821bb488c683e6bf8acad54be7f9a7b033b
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Dec 7 18:23:03 2015 -0800

    AbstractFuture should not wrap CancellationException
    
    Motivation:
    AbstractFuture currently wraps CancellationException in a ExecutionException. However the interface of Future says that this exception should be directly thrown.
    
    Modifications:
    - Throw CancellationException from AbstractFuture.get
    
    Result:
    Interface contract for CancellationException is honored in AbstractFuture.

commit 1f6b95737797de22228d79d24fb4e15027617626
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Nov 26 16:02:58 2015 +0100

    Ensure we retain the original hostname when connect to a remote peer when using epoll transport.
    
    Motivation:
    
    We should retain the original hostname when connect to a remote peer so the user can still query the origin hostname if getHostString() is used.
    
    Modifications:
    
    Compute a InetSocketAddress from the original remote address and the one returned by the Os.
    
    Result:
    
    Same behavior when using epoll transport and nio transport.

commit f4386fb8e9088f4ec5a30d8b98f8db6bf042e51e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Nov 24 04:14:21 2015 +0100

    Allow to set Http2HeaderEncoder.SensitivityDetector in the Http2ConnectionHandler
    
    Motivation:
    
    Some times the user wants to set a Http2HeaderEncoder.SensitivityDetector when building a Http2ConnectionHandler.
    
    Modifications:
    
    Allow to set Http2HeaderEncoder.SensitivityDetector via builder.
    
    Result:
    
    More flexible building of Http2ConnectionHandler possible.

commit f31be51774f49091020a007b0537fa30a99bad0c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Nov 26 22:29:28 2015 +0100

    [#4505] Correctly handle whitespaces in websocket uri's.
    
    Motivation:
    
    If a uri contains whitespaces we need to ensure we correctly escape these when creating the request for the handshake.
    
    Modifications:
    
    - Correctly encode path for uri
    - Add tests
    
    Result:
    
    Correctly handle whitespaces when doing websocket upgrade requests.

commit c6d43667d491cdc8327db000dfe261bea0ad4bbb
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Nov 24 05:21:28 2015 +0100

    Add Http2HeadersEncoder.ALWAYS_SENSITIVE instance
    
    Motivation:
    
    We already provide a NEVER_SENSITIVE instance,we should add ALWAYS_SENSITIVE as well.
    
    Modifications:
    
    Add ALWAYS_SENSITIVE instance which will always return true when check for sesitive.
    
    Result:
    
    User can reuse code.

commit d67fea606bcc218bdd45eba01b64500c26db8afa
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Nov 26 23:38:43 2015 +0100

    Use ByteBuf.*LE methods for write and read LE
    
    Motivation:
    
    We recently added methods to ByteBuf to directly write and read LE values. We should use these in the Snappy implementation and so reduce duplication.
    
    Modifications:
    
    Replace manually swapping of values with LE write and read methods of ByteBuf.
    
    Result:
    
    Cleaner code with less duplication.

commit 088ee712225f45c239dd5e297a2ee24c80080c14
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Nov 27 13:48:32 2015 +0100

    Remove unused method in SslContext
    
    Motivation:
    
    We missed to remove a method in SslContext while refactored the implementation. We should remove the method to keep things clean.
    
    Modifications:
    
    Remove unused method.
    
    Result:
    
    Code cleanup.

commit 6257091d121903f0ad83ae43ecb6697b861727a8
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Dec 3 16:48:12 2015 -0800

    HttpConversionUtil does not account for COOKIE compression
    
    Motivation:
    The HTTP/2 RFC allows for COOKIE values to be split into individual header elements to get more benefit from compression (https://tools.ietf.org/html/rfc7540#section-8.1.2.5). HttpConversionUtil was not accounting for this behavior.
    
    Modifications:
    - Modify HttpConversionUtil to support compressing and decompressing the COOKIE values
    
    Result:
    HttpConversionUtil is compatible with https://tools.ietf.org/html/rfc7540#section-8.1.2.5)
    Fixes https://github.com/netty/netty/issues/4457

commit 2fefb2f79c30bcda5b43815d64174aac900e740c
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 7 18:43:32 2015 +0900

    Make DnsNameResolverGroup non-final and overridable
    
    Motivation:
    
    There's no way to override the default settings of the DnsNameResolvers
    created by DnsNameResolverGroup because DnsNameResolverGroup is final.
    
    Modifications:
    
    - Make DnsNameResolverGroup non-final
    - Add a new overridable protected method 'newResolver()' so that a user
      can override it to create an alternative DnsNameResolver instance or
      set the non-default properties
    
    Result:
    
    A user can configure the DnsNameResolver.

commit a3bdd8c948ba22ff224ee7c70a8b05b3db2aebb3
Author: Anuraag Agrawal <anuraag.agrawal@linecorp.com>
Date:   Mon Dec 7 17:06:57 2015 +0900

    Don't cycle DNS servers while cycling DNS record types.
    
    Motivation:
    
    Each server should be checked for every record type. Currently, if there
    are only two configured servers and the first is down, it is impossible
    to query for IPv4 addresses because the second server is only ever
    queried for type AAAA.
    
    Modifications:
    
    Do not cycle DNS servers while cycling DNS record types (A and AAAA)
    
    Result:
    
    Name resolution is less fragile when the number of available DNS servers
    is 2.

commit 43ebbc3fa065155fa67732b0cbd7c12843b0f3f7
Author: Alex Petrov <oleksandr.petrov@gmail.com>
Date:   Thu Nov 26 08:45:56 2015 +0100

    Update JDK SSL Tests to use SSL Context Builder.
    
    Motivation:
    
    Use new / non-deprecated APIs for creating SSL Context
    in tests, in order to be able to implement OpenSsl
    tests with maximum code reuse.
    
    Modifications:
    
    Use `SslContextBuilder.(forServer|forClient)` instead
    of deprecated `JdkSslServerContext` constructor.
    Use `ApplicationProtocolConfig` instead of Protocol
    Negotiator.
    Use custom exception type for skipping tests to avoid
    swallowing exceptions arising from tests.
    
    Result:
    
    Exceptions from tests aren't swallowed.
    Using new APIs allows reusing same test code for
    OpenSsl tests.

commit c1f3200c872c502aa141eafc5cc45fa92b37ce68
Author: Trustin Lee <t@motd.kr>
Date:   Sun Nov 29 13:44:52 2015 +0900

    Fix the incorrect usage/value of 'Connection: upgrade'
    
    Motivation:
    
    HttpClientUpgradeHandler uses HttpHeaderNames.UPGRADE as the value of
    the 'Connection' header, which is incorrect. It should use
    HttpHeaderValues.UPGRADE instead (note Names vs Values.)
    
    Also, HttpHeaderValues.UPGRADE should be 'upgrade' rather than
    'Upgrade', as defined in:
    
    - https://tools.ietf.org/html/rfc7230#section-6.7
    
    Modifications:
    
    - Use HttpHeaderValues.UPGRADE for a 'Connection' header
    - Lowercase the value of HttpHeaderValues.UPGRADE
    
    Result:
    
    - Fixes #4508
    - Correct behavior

commit 9dd68d0c3e413dfde7c0cb8ae94ee2998f91b4ec
Author: Trustin Lee <t@motd.kr>
Date:   Sun Nov 29 13:36:32 2015 +0900

    Fix IllegalReferenceCountException caused by HttpClientCodec.upgradeFrom()
    
    Motivation:
    
    On a successful protocol upgrade in HTTP, HttpClientUpgradeHandler calls
    HttpClientCodec.upgradeFrom(), which removed both the HTTP encoder and
    decoder from the pipeline immediately.
    
    However, because the decoder is in the middle of the decode loop,
    removing it from the pipeline immediately will cause the cumulation
    buffer to be released prematurely.
    
    This often leads to an IllegalReferenceCountException or missing first
    response after the upgrade response.
    
    Modifications:
    
    - Remove the decoder *after* the decode loop is done
    
    Result:
    
    Fixes #4504

commit ef3a9b0acdc59d0d85de8f844499225ad225360c
Author: Trustin Lee <t@motd.kr>
Date:   Sun Nov 29 13:25:52 2015 +0900

    Relax the sanity check in HttpClientUpgradeHandler
    
    Motivation:
    
    HttpClientUpgradeHandler currently throws an IllegalStateException when
    the server sends a '101 Switching Protocols' response that has no
    'Upgrade' header.
    
    Some servers do not send the 'Upgrade' header on a successful protocol
    upgrade and we could safely assume that the server accepted the
    requested protocol upgrade in such a case, looking from the response
    status code (101)
    
    Modifications:
    
    - Do not throw an IllegalStateException when the server responded 101
      without a 'Upgrade' header
    - Note that we still check the equality of the 'Upgrade' header when it
      is present.
    
    Result:
    
    - Fixes #4523
    - Better interoperability

commit 0ec34b5f761f88bbb88def1216f5bae64a0a2d4b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Nov 24 04:54:39 2015 +0100

    Fix race-condition when closing a NioSocketChannel or EpollSocketChannel
    
    Motivation:
    
    Fix a race-condition when closing NioSocketChannel or EpollSocketChannel while try to detect if a close executor should be used and the underlying socket was already closed. This could lead to an exception that then leave the channel / in an invalid state and so could lead to side-effects like heavy CPU usage.
    
    Modifications:
    
    Catch possible socket exception while try to get the SO_LINGER options from the underlying socket.
    
    Result:
    
    No more race-condition when closing the channel is possible with bad side-effects.

commit 4978266d52a90252ae00b40894a4398292830d7f
Author: Luke Hutchison <luke.hutch@gmail.com>
Date:   Thu Nov 26 03:51:52 2015 -0800

    Make cookie encoding conform better to RFC 6265 in STRICT mode.
    
    Motivation:
    
    - On the client, cookies should be sorted in decreasing order of path
      length. From RFC 6265:
    
          5.4.2. The user agent SHOULD sort the cookie-list in the following
          order:
    
            *  Cookies with longer paths are listed before cookies with
               shorter paths.
    
            *  Among cookies that have equal-length path fields, cookies with
               earlier creation-times are listed before cookies with later
               creation-times.
    
          NOTE: Not all user agents sort the cookie-list in this order, but
          this order reflects common practice when this document was
          written, and, historically, there have been servers that
          (erroneously) depended on this order.
    
      Note that the RFC does not define the path length of cookies without a
      path. We sort pathless cookies before cookies with the longest path,
      since pathless cookies inherit the request path (and setting a path
      that is longer than the request path is of limited use, since it cannot
      be read from the context in which it is written).
    
    - On the server, if there are multiple cookies of the same name, only one
      of them should be encoded. RFC 6265 says:
    
          Servers SHOULD NOT include more than one Set-Cookie header field in
          the same response with the same cookie-name.
    
      Note that the RFC does not define which cookie should be set in the case
      of multiple cookies with the same name; we arbitrarily pick the last one.
    
    Modifications:
    
    - Changed the visibility of the 'strict' field to 'protected' in
      CookieEncoder.
    
    - Modified ClientCookieEncoder to sort cookies in decreasing order of path
      length when in strict mode.
    
    - Modified ServerCookieEncoder to return only the last cookie of a given
      name when in strict mode.
    
    - Added a fast path for both strict mode in both client and server code
      for cases with only one cookie, in order avoid the overhead of sorting
      and memory allocation.
    
    - Added unit tests for the new cases.
    
    Result:
    
    - Cookie generation on client and server is now more conformant to RFC 6265.

commit 0f9492c9affc528c766f9677952412564d4a3f6d
Author: Alex Petrov <oleksandr.petrov@gmail.com>
Date:   Mon Nov 16 22:20:16 2015 +0100

    Add first-class Little Endian support to ByteBuf and descendants
    
    As discussed in	#3209, this PR adds Little Endian accessors
    to ByteBuf and descendants.
    
    Corresponding accessors were added to UnsafeByteBufUtil,
    HeapByteBufferUtil to avoid calling `reverseBytes`.
    
    Deprecate `order()`, `order(buf)` and `SwappedByteBuf`.

commit 641505a5d210ffdb0550629439a15a2848e68756
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Nov 25 10:42:50 2015 -0800

    DefaultChannelConfig maxMessagesPerRead default not always set
    
    Motivation:
    ChannelMetadata has a field minMaxMessagesPerRead which can be confusing. There are also some cases where static instances are used and the default value for channel type is not being applied.
    
    Modifications:
    - use a default value which is set unconditionally to simplify
    - make sure static instances of MaxMessagesRecvByteBufAllocator are not used if the intention is that the default maxMessagesPerRead should be derived from the channel type.
    
    Result:
    Less confusing interfaces in ChannelMetadata and ChannelConfig. Default maxMessagesPerRead is correctly applied.

commit 8cd259896e313e7537c26e1f41242d0b21dff8c1
Author: nmittler <nathanmittler@google.com>
Date:   Fri Nov 20 12:12:16 2015 -0800

    No HTTP/2 RST_STREAM if no prior HEADERS were sent
    
    Motivation:
    
    Because we flow control HEADERS frames, it's possible that an intermediate error can result in a RST_STREAM frame being sent for a frame that the other endpoint is not yet aware of. This is a violation of the spec and will either result in spammy logs at the other endpoint or broken connections.
    
    Modifications:
    
    Modified the HTTP/2 handler so that it only sends RST_STREAM if it has sent at least one HEADERS frame to the remote endpoint for the stream.
    
    Result:
    
    Fixes #4465

commit 227e67900e35f0d01fbf3f4aca86877aefa52d79
Author: nmittler <nathanmittler@google.com>
Date:   Wed Nov 25 06:50:30 2015 -0800

    Fixing spammy logging for CoalescingBufferQueueTest
    
    Motivation:
    
    The CoalescingBufferQueueTest is somewhat relaxed with its releasing of test buffers, using safeRelease to generically deal with tests that may or may not release the buffers. SafeRelease generates logs, however, when the release fails.
    
    Modifications:
    
    Tightened up the individual test methods to verify that the buffers are released properly.
    
    Result:
    
    Fixes #4497

commit 3fa4603120f0ec0c2df3bcda5eab77d4778d2de5
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Nov 24 15:21:29 2015 -0800

    Cleanup ChannelOption.AUTO_CLOSE javadocs
    
    Motivation:
    The javadocs for ChannelOption.AUTO_CLOSE say the default is false, but the default is currently true.
    
    Modifications:
    - Make javadocs consistent with code
    
    Result:
    Less confusing docs.

commit dbaeb3314e32b7f707fd4d2ea8ee78abb370ed59
Author: nmittler <nathanmittler@google.com>
Date:   Wed Nov 18 20:46:11 2015 -0800

    Allow HTTP2 frame writer to accept arbitrarily large frames
    
    Motivation:
    
    The encoder is currently responsible for chunking frames when writing in order to conform to max frame size. The frame writer would be a better place for this since it could perform a reuse the same promise aggregator for all the write and could also perform a single allocation for all of the frame headers.
    
    Modifications:
    
    Modified `DefaultHttp2FrameWriter` to perform the chunking and modified the contract in the `Http2FrameWriter` interface. Modified `DefaultHttp2ConnectionEncoder` to send give all allocated bytes to the writer.
    
    Result:
    
    Fixes #3966

commit 79ab756fa337dd034e97df715065e8440b600656
Author: nmittler <nathanmittler@google.com>
Date:   Fri Nov 20 10:44:38 2015 -0800

    Use a single queue in UniformStreamByteDistributor
    
    Motivation:
    
    The UniformStreamByteDistributor currently processes all zero-length frames, regardless of add order. This means that we would always send HEADERS for all streams, possibly taking away bandwidth for streams that actually have data.
    
    Modifications:
    
    Empty frames are now treated the same as any other frame except that the algorithm will pop off the any empty frames at the head of the queue.
    
    Result:
    
    Empty frames require no extra processing.

commit cfcee5798d6680d87aec3ae68cdded74a1402f84
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Nov 20 10:22:24 2015 -0800

    Adjustable size of DefaultHeaders array
    
    Motivation:
    DefaultHeaders creates an array of size 16 for all headers. This may waste a good deal of memory if applications only have a small number of headers. This memory may be critical when the number of connections grows large.
    
    Modifications:
    - Make the size of the array for DefaultHeaders configurable
    
    Result:
    Applications can control the size of the DefaultHeaders array and save memory.

commit a890abcf89ea60033bcbf230c498acef3e43e922
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Nov 23 12:46:32 2015 -0800

    update pom due to alpn provided
    
    Motiviation:
    According to jetty docs the alpn-api should use the provided scope.
    
    Modificaitons:
    - change scope to provided for alpn-api
    - update for new jdk
    
    Result:
    Users of Netty don't run into alpn version conflicts.
    Fixes https://github.com/netty/netty/issues/4480

commit 41e03adf249ee9d23938fecf9be980a096710b36
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Nov 11 10:32:03 2015 -0800

    Mark ChannelHandler.exceptionCaught(...) as deprected.
    
    Motivation:
    
    exceptionCaught(...) will only handle inbound exceptions which means it makes not much sense to have it also on ChannelOutboundHandler. Because of this we should move it to ChannelInboundHandler.
    
    Modifications:
    
    Add @deprecated annotation to ChannelHandler.exceptionCaught(...).
    
    Result:
    
    Preapre to cleanup the API in later release.

commit b6fcced64cdff325c49861922e56bcebe3447b73
Author: Trustin Lee <t@motd.kr>
Date:   Sat Nov 21 09:56:06 2015 +0900

    Require RHEL/CentOS 6.7 for releasing Netty
    
    Motivation:
    
    6.7 is the latest stable release in RHEL/CentOS 6 line. Given that most
    RHEL/CentOS users have upgraded to 6.7 via yum upgrade, we should bump
    our requirement.
    
    Modification:
    
    s/6.6/6.7/g
    
    Result:
    
    'mvn release:*' must be run on RHEL/CentOS 6.7 instead of 6.6.

commit 6cb6282699b2ae24d36c35af142497a90df6042f
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Nov 19 22:52:26 2015 -0800

    Lazy Initialization of epoll splice queue
    
    Motivation:
    AbstractEpollStreamChannel has a queue which collects splice events. Splice is assumed not to be the most common use case of this class and thus the splice queue could be initialized in a lazy fashion to save memory. This becomes more significant when the number of connections grows.
    
    Modifications:
    - AbstractEpollStreamChannel.spliceQueue will be initialized in a lazy fashion
    
    Result:
    Less memory consumption for most use cases

commit 49cd00da1c7f9a748d1305a8e99d0d4b5a84e74e
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Nov 20 15:03:50 2015 -0800

    Backport of benchmark broke build
    
    Motivation:
    2a2059d97683206a23488e8c96256f2f6fb1bed0 was backported from master, and included an overriden method which does not exist in 4.1.
    
    Modifications:
    - Remove the invoker method from NoPriorityByteDistributionBenchmark
    
    Result:
    No more build error

commit 7bee318fc703d319c53dd88430e4e4946eb8a905
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Nov 19 21:09:23 2015 -0800

    Use OneTimeTask where possible to reduce object creation
    
    Motivation:
    
    We should use OneTimeTask where possible to reduce object creation.
    
    Modifications:
    
    Replace Runnable with OneTimeTask
    
    Result:
    
    Less object creation

commit 1f3fc983c050a011546d75587f47e02566174f95
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Nov 16 22:31:52 2015 -0800

    DefaultPromise LateListener notification order
    
    Motivation:
    There is a notification ordering issue in DefaultPromise when the lateListener collection is in use. The ordering issue can be observed in situations where a late listener is added to a Future returned from a write operation. It is possible that this future will run after a read operation scheduled on the I/O thread, even if the late listener is added on the I/O thread. This can lead to unexpected ordering where a listener for a write operation which must complete in order for the read operation to happen is notified after the read operation is done.
    
    Modifications:
    - If the lateListener collection becomes empty, it should be treated as though it was null when checking if lateListeners can be notified immediatley (instead of executing a task on the executor)
    
    Result:
    Ordering is more natural and will not be perceived as being out of order relative to other tasks on the same executor.

commit cfa76f6326e157e16cdc0786e04bd47815c56975
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Nov 16 11:49:45 2015 -0800

    Remove unnecessary reference to AbstractChannel from AbstractChannelHandlerContext
    
    Motivation:
    
    We not need to store another reference to AbstractChannel as we can access it through DefaultChannelHandlerContext.
    
    Modifications:
    
    Remove reference.
    
    Result:
    
    Cleaner code.

commit 2d2e07578aff583875ccad1e33566eaef3f78f9f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Nov 15 08:55:12 2015 -0800

    Remove HashMap for lookup name / ctx from DefaultChannelPipeline to reduce memory footprint
    
    Motivation:
    
    If you start to have 1M+ concurrent connections memory footprint can be come a big issue. We should try to reduce it as much as possible in the core of netty.
    
    Modifications:
    
    - Remove HashMap that was used to store name to ctx mapping. This was only used for validation and access a handler by name. As a pipeline is not expected to be very long (like 100+ handlers) we can just walk the linked list structure to find the ctx with a given name.
    
    Result:
    
    Less memory footprint of the DefaultChannelPipeline.

commit edb2250d355134d1c24c577d921add01b34cbd5f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Nov 14 08:17:34 2015 +0100

    Store reference to IovArray in the EpollEventLoop to reduce thread local access.
    
    Motivation:
    
    If we have a lot of writes going on we currently need to lookup the IovArray for each Channel that does writes. This can have quite some perf overhead. We should not need to do this and just store a reference of the IovArray on the EpollEventLoop itself.
    
    Modifications:
    
    - Remove IoArrayThreadLocal
    - Store the IoArray in the EventLoop itself
    
    Result:
    
    Less FastThreadLocal lookups

commit 2a2059d97683206a23488e8c96256f2f6fb1bed0
Author: nmittler <nathanmittler@google.com>
Date:   Tue Nov 3 15:05:32 2015 -0800

    Adding UniformStreamByteDistributor
    
    Motivation:
    
    The current priority algorithm can yield poor per-stream goodput when either the number of streams is high or the connection window is small. When all priorities are the same (i.e. priority is disabled), we should be able to do better.
    
    Modifications:
    
    Added a new UniformStreamByteDistributor that ignores priority entirely and manages a queue of streams.  Each stream is allocated a minimum of 1KiB on each iteration.
    
    Result:
    
    Improved goodput when priority is not used.

commit b640de2d94c987617141900bc9bfa9acb78b6c2f
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Nov 12 18:29:02 2015 -0800

    Epoll Shutdown Input Exception Handling
    
    Motivation:
    If ChannelOption.ALLOW_HALF_CLOSURE is true and the shutdown input operation fails we should not propagate this exception, and instead consider this socket's read as half closed.
    
    Modifications:
    - AbstractEpollChannel.shutdownInput should not propagate exceptions when attempting to shutdown the input, but instead should just close the socket
    
    Result:
    Users expecting a ChannelInputShutdownEvent will get this event even if the socket is already shutdown, and the shutdown operation fails.

commit 2a65ae256ec2170edaa50c9360a0afbfea15319c
Author: Dmitry Spikhalskiy <dmitry@spikhalskiy.com>
Date:   Sun Nov 8 20:04:37 2015 +0300

    [#4331] Helper methods to get charset from Content-Type header of HttpMessage
    
    Motivation:
    
    HttpHeaders already has specific methods for such popular and simple headers like "Host", but if I need to convert POST raw body to string I need to parse complex ContentType header in my code.
    
    Modifications:
    
    Add getCharset and getCharsetAsString methods to parse charset from Content-Length header.
    
    Result:
    
    Easy to use utility method.

commit 64409ad10bba16b150169b9afd88970295e2c13e
Author: pieteradejong <pieter.a.dejong@gmail.com>
Date:   Thu Nov 19 00:02:45 2015 -0800

    fixed word - issue #4469

commit 96f9b0b91ba63c1f6232c6acca4358afe01fbb7f
Author: nmittler <nathanmittler@google.com>
Date:   Tue Nov 3 15:05:32 2015 -0800

    Remote flow controller incorrectly updates stream state
    
    Motivation:
    
    The `DefaultHttp2RemoteFlowController` does not correctly determine `hasFrame` when updating the stream state for the distributor. Adding a check to enforce `hasFrame` when `streamableBytes > 0` causes several test failures.
    
    Modifications:
    
    Modified `DefaultHttp2RemoteFlowController` to simplify the writing logic and to correct the bookkeeping for `hasFrame`.
    
    Result:
    
    The distributors are always called with valid arguments.

commit a4ebdd0eca8dfca3d9eaaeae9dded473cd1542c5
Author: Janecek Jakub <janecek.jakub@gmail.com>
Date:   Mon Nov 16 17:01:36 2015 +0100

    Fix setBytes on read-only ByteBuffer
    
    Motivation:
    
    The method setBytes did not work correctly because read-only ByteBuffer
    does not allow access to its underlying array.
    
    Modifications:
    
    New case was added for ByteBuffer's that are not direct and do not have an array.
    These must be handled by copying the data into a temporary array. Unit test was
    added to test this case.
    
    Result:
    
    It is now possible to use read-only ByteBuffer as the source
    for the setBytes method.

commit 8accc52b0313ac4148a591881ff66a3c60ef4707
Author: nmittler <nathanmittler@google.com>
Date:   Wed Nov 4 12:46:03 2015 -0800

    Forking Twitter's hpack
    
    Motivation:
    
    The twitter hpack project does not have the support that it used to have.  See discussion here: https://github.com/netty/netty/issues/4403.
    
    Modifications:
    
    Created a new module in Netty and copied the latest from twitter hpack master.
    
    Result:
    
    Netty no longer depends on twitter hpack.

commit 2ecce8fa56a06c50c121145a96b425a7a580136c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Nov 10 22:59:33 2015 +0100

    [maven-release-plugin] prepare for next development iteration

commit 6a93f331d3b12bbebcb2b6c2f65fd4ee00a134ea
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Nov 10 22:50:57 2015 +0100

    [maven-release-plugin] prepare release netty-4.1.0.Beta8

commit b4b791353d7884115637030cc893f9222bc0d220
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Oct 28 19:36:17 2015 -0700

    AsciiString optimized hashCode
    
    Motivation:
    The AsciiString.hashCode() method can be optimized. This method is frequently used while to build the DefaultHeaders data structure.
    
    Modification:
    - Add a PlatformDependent hashCode algorithm which utilizes UNSAFE if available
    
    Result:
    AsciiString hashCode is faster.

commit 0d71744d5b813cbd72e7a7cbc78b27add4f87938
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Nov 9 11:45:37 2015 -0800

    IllegalRefCountException in FullHttp[Request|Response].hashCode()
    
    Motivation:
    FullHttp[Request|Response].hashCode() uses a releasable object and in vulnerable to a IllegalRefCountException if that object has been released.
    
    Modifications:
    - Ensure the released object is not used.
    
    Result:
    No more IllegalRefCountException.

commit 120ffaf880b81c260141c9e46cec239ac235aeb9
Author: Trustin Lee <t@motd.kr>
Date:   Sun Nov 8 12:59:01 2015 +0900

    Use separate query ID space for different DNS servers
    
    Related: #3972
    
    Motivation:
    
    DnsNameResolver limits the number of concurrent in-progress DNS queries
    to 65536 regardless the number of DNS servers it communicates with. When
    the number of available DNS servers are more than just one, we end up
    using much less (65536 / numDnsServers) query IDs per DNS server, which
    is non-optimal.
    
    Modifications:
    
    - Replace the query ID and context management with
      DnsQueryContextManager
      - Eash DNS server gets its own query ID space
    
    Result:
    
    Much bigger query ID space, and thus there's less chance of getting the
    'query ID space exhaustion' error

commit a18416df60809d5ec9c703bfbc15658a8d4443fc
Author: Sylwester Lachiewicz <slachiewicz@gmail.com>
Date:   Sat Nov 7 23:31:45 2015 +0100

    Export defaults from PooledByteBufAcclocator static fields
    
    Motivation:
    
    Allow external application to tune initialization of PooledByteBufAllocator
    
    Modifications:
    
    Added new static methods
    
    Result:
    
    Exported
    DEFAULT_NUM_HEAP_ARENA
    DEFAULT_NUM_DIRECT_ARENA
    DEFAULT_PAGE_SIZE
    DEFAULT_MAX_ORDER
    DEFAULT_TINY_CACHE_SIZE
    DEFAULT_SMALL_CACHE_SIZE
    DEFAULT_NORMAL_CACHE_SIZE

commit 035053be4ad0e1961b434eedd9f93946ee119463
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Nov 4 08:27:46 2015 -0800

    HTTP/2 Client Example TLS Pipeline Initialization
    
    Motivation:
    The HTTP/2 client example is not validating the results of ALPN if TLS is enabled.
    
    Modifications:
    - Use ApplicationProtocolNegotiationHandler to validate ALPN results.
    
    Result:
    Client example validates ALPN results.

commit 2f81364522f004afbce6895a22908512d1e9d169
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Nov 7 09:31:12 2015 -0800

    DefaultHttp2HeadersTest updates
    
    Motivation:
    Recently a bug was found in DefaultHttp2Headers where the state of the headers could be corrupted due to the extra tracking to make pseudo headers first during iteration. Unit tests did not catch this bug.
    
    Modifications:
    - Update unit tests to cover more methods
    
    Result:
    Unit tests for DefaultHttp2Headers have better code coverage.

commit 8f07416baf4263aa88d43da9c1b3434ffc383b4c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Nov 4 14:35:01 2015 -0800

    Update ALPN boot version
    
    Motivation:
    A new version of ALPN boot has been released.
    
    Modifications:
    - Update the pom to pull in this new version
    
    Result:
    New JDK get new ALPN boot.

commit 21e27da4107357d2c0a2b8d56ae58749bb6cf8aa
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Nov 4 11:20:12 2015 -0800

    ApplicationProtocolNegotiationHandler failure behavior
    
    Motivation:
    Child classes of ApplicationProtocolNegotiationHandler may want to override the behavior when a handshake failure is detected.
    
    Modifications:
    - Provide a method which can be overriden when a handshake failure is detected.
    
    Result:
    Child classes can override ApplicationProtocolNegotiationHandler handshake failure behavior.

commit 6e108cb96a39725d7cebb7a3e8963347499b4512
Author: Louis Ryan <lryan@google.com>
Date:   Fri Oct 30 13:24:46 2015 -0700

    Improve the performance of copying header sets when hashing and name validation are equivalent.
    
    Motivation:
    Headers and groups of headers are frequently copied and the current mechanism is slower than it needs to be.
    
    Modifications:
    Skip name validation and hash computation when they are not necessary.
    Fix emergent bug in CombinedHttpHeaders identified with better testing
    Fix memory leak in DefaultHttp2Headers when clearing
    Added benchmarks
    
    Result:
    Faster header copying and some collateral bug fixes

commit 187efca9aa30b4c74bccd5356dd19b34cbf3f010
Author: Sergio Bossa <sergio.bossa@gmail.com>
Date:   Wed Nov 4 12:32:05 2015 +0000

    Improved DefaultChannelPipeline#destroy() to avoid spinning continuously in case of custom executors.
    
    Motivation:
    
    The previous DefaultChannelPipeline#destroy() implementation, introduced in #3156, is suboptimal as it can cause the for loop to continuously spin if the executor used by a given handler is unable to "recognize" the event loop.
    It could be objected that it's the custom executor responsibility to properly implement the inEventLoop() method, but some implementetaions might not be able to do that for performance reasons, and even so, it's always better to be safe against API misuse, in particular when it is not possible to fail fast and the alternative is rather some sutle behaviour.
    
    Modifications:
    
    The patch simply avoids the recursive spin by explicitly passing the "in event loop" condition as a boolean parameter, preserving the same guarantees offered by #3156. A unit test has also been added.
    
    Result:
    
    All channel events are correctly called and no high CPU usage is seen anymore.

commit 7cc320ce47f1d346cc46cf68022c75e9d15b22c8
Author: Louis Ryan <lryan@google.com>
Date:   Thu Nov 5 14:07:34 2015 -0800

    Fix memory leak in DefaultHttp2Headers
    
    Motivation:
    
    Memory leak makes headers non-reusable.
    
    Modifications:
    
    Correctly reset firstNonPseudo header reference
    
    Result:
    
    No leak

commit 3eb65797ed11b2fd8297837dc023c0a58adf9c89
Author: Louis Ryan <lryan@google.com>
Date:   Thu Nov 5 14:28:31 2015 -0800

    Make headers.set(self) a no-op instead of throwing. Makes it consistent with setAll
    
    Motivation:
    
    Makes the API contract of headers more consistent and simpler.
    
    Modifications:
    
    If self is passed to set then simply return
    
    Result:
    
    set and setAll will be consistent

commit 6504d52b9431e7ec785377e29c34584f7f876f88
Author: nmittler <nathanmittler@google.com>
Date:   Fri Oct 30 09:14:52 2015 -0700

    Add HTTP/2 local flow control option for auto refill
    
    Motivation:
    
    For many HTTP/2 applications (such as gRPC) it is necessary to autorefill the connection window in order to prevent application-level deadlocking.
    
    Consider an application with 2 streams, A and B.  A receives a stream of messages and the application pops off one message at a time and makes a request on stream B. However, if receiving of data on A has caused the connection window to collapse, B will not be able to receive any data and the application will deadlock.  The only way (currently) to get around this is 1) use multiple connections, or 2) manually refill the connection window.  Both are undesirable and could needlessly complicate the application code.
    
    Modifications:
    
    Add a configuration option to DefaultHttp2LocalFlowController, allowing it to autorefill the connection window.
    
    Result:
    
    Applications can configure HTTP/2 to avoid inter-stream deadlocking.

commit a4f3e72e7187e22f2772de542b877dece0fa4baa
Author: Vladimir Krivosheev <vladimir.krivosheev@jetbrains.com>
Date:   Fri Oct 30 10:59:33 2015 +0100

    configurable service thread name prefix
    
    Motivation:
    
    If netty used as part of application, should be a way to prefix service thread name to easy distinguish such threads (for example, used in IntelliJ Platform)
    
    Modifications:
    
    Introduce system property io.netty.serviceThreadPrefix
    
    Result:
    
    ThreadDeathWatcher thread has a readable name "Netty threadDeathWatcher-2-1" if io.netty.serviceThreadPrefix set to "Netty"

commit 98eb69f169b862a813468ecf1ad1cc14daa896df
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Oct 28 15:38:14 2015 +0100

    Remove synchronization overhead on generateName.
    
    Motivation:
    
    Changing the chache of generated names to use a cache per thread. This will remove the bottleneck when many eventloops are used and names need to generate.
    
    Modifications:
    
    Use a FastThreadLocal to store the cached names.
    
    Result:
    
    Less locking between threads.

commit 91b8ef3d10e35156808c47994c369fcdc3b3572d
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Nov 3 10:05:38 2015 -0800

    HTTP/2 PriorityStreamByteDistributor exceptions and reentry
    
    Motivation:
    PriorityStreamByteDistributor saves exception state and attempts to reset state. This could be simplified by just throwing a connection error and closing the connection. PriorityStreamByteDistributor also does not handle or detect re-entry in the distribute method.
    
    Motivation:
    - PriorityStreamByteDistributor propagate an INTERNAL_ERROR if an exception occurs during writing
    - PriorityStreamByteDistributor to handle re-entry on the write method
    
    Result:
    PriorityStreamByteDistributor exception code state simplified, and re-entry is detected.

commit 1b2e43e70ceb11b1188d4cc8dc05f506a3a5bee8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Nov 3 09:40:16 2015 +0100

    Correctly construct Executor in microbenchmarks.
    
    Motivation:
    
    We should allow our custom Executor to shutdown quickly.
    
    Modifications:
    
    Call super constructor which correct arguments.
    
    Result:
    
    Custom Executor can be shutdown quickly.

commit 8f334885ef58aa0dda4107391200c29527106df7
Author: Trustin Lee <t@motd.kr>
Date:   Mon Nov 2 18:42:36 2015 +0900

    Reject the first SETTINGS ack on HTTP/2 Preface
    
    Motivation:
    
    Http2ConnectionHandler verifies if the first frame after the preface is
    a SETTINGS frame.  However, it does not reject the SETTING ack frame
    which is not expected actually.
    
    Modifications:
    
    Reject a SETTINGS-ack frame as well
    
    Result:
    
    When the first frame is a SETTINGS-ack frame, connection does not
    proceed to further frame handling. (simplicity)

commit c7cb104dc48f179b61ed1146b6c0529c2e1115bc
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Oct 7 14:12:38 2015 -0700

    EPOLL Shutdown and Half Closed
    
    Motivation:
    The EPOLL module was not completly respecting the half closed state. It may have missed events, or procssed events when it should not have due to checking isOpen instead of the appropriate shutdown state.
    
    Modifications:
    - use FileDescriptor's isShutdown* methods instead of isOpen to check for processing events.
    
    Result:
    Half closed code in EPOLL module is more correct.

commit dbbdbe11a6237cc08a9a6eafeeac9c7d80924305
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Oct 6 19:00:59 2015 -0700

    Decouple Unix from Linux in Native Transport
    
    Motivation:
    transport-native-epoll is designed to be specific to Linux. However there is native code that can be extracted out and made to work on more Unix like distributions. There are a few steps to be completely decoupled but the first step is to extract out code that can run in a more general Unix environment from the Linux specific code base.
    
    Modifications:
    - Move all non-Linux specific stuff from Native.java into the io.netty.channel.unix package.
    - io.netty.channel.unix.FileDescriptor will inherit all the native methods that are specific to file descriptors.
    - io_netty_channel_epoll_Native.[c|h] will only have code that is specific to Linux.
    
    Result:
    Code is decoupled and design is streamlined in FileDescriptor.

commit 19658e9cd80b57340df58ae573fa9dcbd141416a
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Oct 27 13:47:47 2015 -0700

    HTTP/2 Headers Type Updates
    
    Motivation:
    The HTTP/2 RFC (https://tools.ietf.org/html/rfc7540#section-8.1.2) indicates that header names consist of ASCII characters. We currently use ByteString to represent HTTP/2 header names. The HTTP/2 RFC (https://tools.ietf.org/html/rfc7540#section-10.3) also eludes to header values inheriting the same validity characteristics as HTTP/1.x. Using AsciiString for the value type of HTTP/2 headers would allow for re-use of predefined HTTP/1.x values, and make comparisons more intuitive. The Headers<T> interface could also be expanded to allow for easier use of header types which do not have the same Key and Value type.
    
    Motivation:
    - Change Headers<T> to Headers<K, V>
    - Change Http2Headers<ByteString> to Http2Headers<CharSequence, CharSequence>
    - Remove ByteString. Having AsciiString extend ByteString complicates equality comparisons when the hash code algorithm is no longer shared.
    
    Result:
    Http2Header types are more representative of the HTTP/2 RFC, and relationship between HTTP/2 header name/values more directly relates to HTTP/1.x header names/values.

commit 07d861c5ffbbbfde18ebfef12e3d57ba4dc2be42
Author: Trustin Lee <t@motd.kr>
Date:   Fri Oct 30 12:53:05 2015 +0900

    Fix a bug where DnsNameResolver attempts to send extra queries
    
    Motivation:
    
    When DnsNameResolverContext succeeds to get the address(es), it cancels
    the promise of other queries in progress.
    
    Unlike expectation, DnsNameResolverContext.query() attempts to retry
    even when the query has failed due to cancellation.
    
    As a result, the resolver sends unnecessary extra queries to a DNS
    server and then tries to mark the promised that's been fulfilled
    already, leading to unnecessarily verbose 'failed to notify success to a
    promise' messages.
    
    Modifications:
    
    Do not perform an extra query when the previous query has failed due to
    cancellation
    
    Result:
    
    DnsNameResolver does not send unnecessary extra queries and thus does
    not log the 'failed to notify success to a promise' message.

commit d0f3cd383d2bdda3b55c3f071fa5622f65928f73
Author: Trustin Lee <t@motd.kr>
Date:   Fri Oct 30 11:47:11 2015 +0900

    Fix a bug where DefaultPromise.toString() says 'incomplete' when it's done
    
    Motivation:
    
    DefaultPromise.toString() returns 'DefaultPromise(incomplete)' when it's
    actually complete with non-null result.
    
    Modifications:
    
    Handle the case where the promise is done and its result is non-null in
    toString()
    
    Result:
    
    The String returned by DefaultPromise.toString() is not confusing
    anymore.

commit c9364616c800553f4a98bd11c26ef61397a11c6d
Author: buchgr <jakob.buchgraber@tum.de>
Date:   Thu Oct 29 21:27:23 2015 +0100

    Fix performance regression in FastThreadLocal microbenchmark. Fixes #4402
    
    Motivation:
    
    As reported in #4402, the FastThreadLocalBenchmark shows that the JDK ThreadLocal
    is actually faster than Netty's custom thread local implementation.
    
    I was looking forward to doing some deep digging, but got disappointed :(.
    
    Modifications:
    
    The microbenchmark was not using FastThreadLocalThreads and would thus always hit the slow path.
    I updated the JMH command line flags, so that FastThreadLocalThreads would be used.
    
    Result:
    
    FastThreadLocalBenchmark shows FastThreadLocal to be faster than JDK's ThreadLocal implementation,
    by about 56% in this particular benchmark. Run on OSX El Capitan with OpenJDK 1.8u60.
    
    Benchmark                                    Mode  Cnt      Score      Error  Units
    FastThreadLocalBenchmark.fastThreadLocal    thrpt   20  55452.027 ±  725.713  ops/s
    FastThreadLocalBenchmark.jdkThreadLocalGet  thrpt   20  35481.888 ± 1471.647  ops/s

commit 2e36ac45944299676f0df994443b2c973b008b47
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Oct 26 11:09:47 2015 +0100

    Add benchmark for HeapByteBuf implementations.
    
    Motivation:
    
    To prove one implementation is faster as the other we should have a benchmark.
    
    Modifications:
    
    Add benchmark which benchmarks the unsafe and non-unsafe implementation of HeapByteBuf.
    
    Result:
    
    Able to compare speed of implementations easily.

commit 94e907fa39825faddfc985449de376e04000ea40
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Oct 27 20:36:49 2015 +0100

    Only call ReferenceCountUtil.touch(...) if ResourceLeakDetection was enabled when Channel was created.
    
    Motivation:
    
    We should only call ReferenceCountUtil.touch(...) if needed as otherwise we pay the overhead of instanceof and cast
    everytime.
    
    Modifications:
    
    Add boolean flag which indicates if touch(...) should be called.
    
    Result:
    
    Less overhead when leak detection is not enabled.

commit a47685b24379f221a5260897fc72297328cd1be9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Oct 28 11:46:28 2015 +0100

    Use bitwise operation when sampling for resource leak detection.
    
    Motivation:
    
    Modulo operations are slow, we can use bitwise operation to detect if resource leak detection must be done while sampling.
    
    Modifications:
    
    - Ensure the interval is a power of two
    - Use bitwise operation for sampling
    - Add benchmark.
    
    Result:
    
    Faster sampling.

commit ed98cd82006be72107e9b654e0c8e53d444a77fd
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Oct 26 16:59:01 2015 -0700

    DefaultPromise StackOverFlowException
    
    Motivation:
    When the ImmediateEventExecutor is in use it is possible to get a StackOverFlowException if when a promise completes a new listener is added to that promise.
    
    Modifications:
    - Protect against the case where LateListeners.run() smashes the stack.
    
    Result:
    Fixes https://github.com/netty/netty/issues/4395

commit d66520db1b54d07a447f7c58ed1a794de991db59
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Oct 23 14:03:08 2015 -0700

    Http2ConnectionHandler.BaseBuilder exception cleanup
    
    Motivation:
    Http2ConnectionHandler.BaseBuilder is constructing objects which have 'close' methods, but is not calling these methods in the event of an exception.
    
    Modifications:
    - Objects which implement 'close' should have this method called if an exception is thrown and the build operation can not complete normally.
    
    Result:
    Objects are closed even if the build process encounters an error.

commit c6474f92185fa2ec58c686cce0822983f2ec9af3
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Thu Oct 29 12:30:04 2015 +0100

    Exclude native transport related test and dependency when not running under Linux, close #4409
    
    Motivation:
    
    The build fails on OSX, due to it trying to pull in an epoll specific OSX dependency. See #4409.
    
    Modifications:
    
    * move netty-transport-native-epoll to linux profile
    * exclude Http2FrameWriterBenchmark from compiler
    * include Http2FrameWriterBenchmark back only in linux profile (please check)
    
    Result:
    
    Build succeeds on OSX.

commit 2100a83e30d3d9b3622c17d58b8c072d2d7e2acf
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Oct 15 15:05:23 2015 +0200

    [#4363] Improve size calculation of messages when written from outside the EventLoop
    
    Motiviation:
    
    If a user writes from outside the EventLoop we increase the pending bytes of the outbound buffer before submitting the write request. This is done so the user can stop writing asap once the channel turns unwritable. Unfortunally this doesn't take the overhead of adding the task into the account and so it is very easy for an user to full up the task queue. Beside this we use a value of 0 for an unown message by default which is not ideal.
    
    Modifications:
    
    - port the message calculation we used in netty 3.x into AbstractChannelHandlerContext and so better calculate the overhead of a message that is submitted from outside the EventLoop
    - change the default estimated size for an unknown message to 8.
    
    Result:
    
    Better behaviour when submiting writes from outside the EventLoop.

commit e121c68e0fb633b1fceca24ad0f5b04d14879990
Author: Sverker Abrahamsson <sverker@limetransit.com>
Date:   Sat May 23 01:34:21 2015 +0200

    Created RTSPEncoder and RTSPDecoder which are now common for both requests and responses to be able to handle both types of messages on the same channel.
    
    Keep RTSPRequestEncoder, RTSPRequestDecoder, RTSPResponseEncoder and
    RTSPResponseDecoder for backwards compatibility but they now just extends
    the generic encoder/decoder and are markes as deprecated.
    
    Renamed the decoder test, because the decoder is now generic. Added
    testcase for when ANNOUNCE request is received from server.
    
    Created testcases for encoder.
    
    Mark abstract base classes RTSPObjectEncoder and RTSPObjectDecoder as
    deprecated, that functionality is now in RTSPEncoder and RTSPDecoder.
    
    Added annotation in RtspHeaders to suppress warnings about deprecation, no need when
    whole class is deprecated.

commit c068ae8d84787d618e6bebf942af50dea2c19c16
Author: Sylwester Lachiewicz <slachiewicz@gmail.com>
Date:   Wed Oct 21 23:45:57 2015 +0200

    Fix the 'branches to look' section

commit d93f9062554d07eec6d376d85d886e40b6a907f7
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Oct 22 22:09:41 2015 +0200

    [#4198] Fix race-condition when allocate from multiple-thread.
    
    Motivation:
    
    Fix a race condition that was introduced by f18990a8a507d52fc40416d169db340105b10ec0 that could lead to a NPE when allocate from the PooledByteBufAllocator concurrently by many threads.
    
    Modifications:
    
    Correctly synchronize on the PoolSubPage head.
    
    Result:
    
    No more race.

commit 85236d5446b4858df20dc6bd270735490c807666
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Oct 23 15:30:48 2015 +0200

    [#4355] OpenSslServerContext reinitializes the provided TrustManagerFactory with the key cert chain.
    
    Motivation:
    
    OpenSslServerContext should not reinitialize the provided TrustManagerFactory with the key cert chain as the user should be able to pass a fully initialized TrustManagerFactory. This is also in line with how JdkSslServerContext works.
    
    Modifications:
    
    Not reinitialize the provided TrustManagerFactory with the key cert chain.
    
    Result:
    
    Correct and consistent behavior.

commit 8687475eb77e794ed56e8285aa0dc982d93a1048
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Oct 22 10:50:15 2015 +0200

    [#4373] Fix assert error when trying to release Channel to closed FixedChannelPool
    
    Motivation:
    
    Once a FixedChannelPool was closed we must not allow to acquire or release Channels to prevent assert errors.
    
    Modifications:
    
    Fail release and acquire calls when FixedChannelPool is closed.
    
    Result:
    
    No more assert errors.1

commit 2be4bb74a5538b76650b1e6992a8c0eec279f31b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Oct 21 10:04:49 2015 +0200

    Share code between Unsafe ByteBuf implementations
    
    Motiviation:
    
    We have a lot of duplicated code which makes it hard to maintain.
    
    Modification:
    
    Move shared code to UnsafeByteBufUtil and use it in the implementations.
    
    Result:
    
    Less duplicated code and so easier to maintain.

commit 992f8db0b4559216a52b26a339f4f7f823807a4b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Oct 21 11:24:18 2015 +0200

    Share code between Heap ByteBuf implementations
    
    Motiviation:
    
    We have a lot of duplicated code which makes it hard to maintain.
    
    Modification:
    
    Move shared code to HeapByteBufUtil and use it in the implementations.
    
    Result:
    
    Less duplicated code and so easier to maintain.

commit b90685d3c9f88765471af444e7e49a5825929fef
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Oct 20 20:20:53 2015 +0200

    Not share FixedRecvByteBufAllocator.HandleImpl
    
    Motivation:
    
    As MaxMessageHandle is stateful we can not share the same HandleImpl instance as otherwise we will see race conditions.
    
    Modifications:
    
    Create a new HandleImpl instance on each newHandle() call.
    
    Result:
    
    No more races.

commit 7d4c077492ba5b40595b0742e7b22182c544f7b7
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Oct 9 21:03:03 2015 +0200

    Add *UnsafeHeapByteBuf for improve performance on systems with sun.misc.Unsafe
    
    Motivation:
    
    sun.misc.Unsafe allows us to handle heap ByteBuf in a more efficient matter. We should use special ByteBuf implementation when sun.misc.Unsafe can be used to increase performance.
    
    Modifications:
    
    - Add PooledUnsafeHeapByteBuf and UnpooledUnsafeHeapByteBuf that are used when sun.misc.Unsafe is ready to use.
    - Add UnsafeHeapSwappedByteBuf
    
    Result:
    
    Better performance when using heap buffers and sun.misc.Unsafe is ready to use.

commit f30a51b905187c3cb2af69bf238f5dd3c6991b2f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Oct 15 21:41:49 2015 +0200

    Correctly handle byte shifting if system does not support unaligned access.
    
    Motivation:
    
    We had a bug in our implemention which double "reversed" bytes on systems which not support unaligned access.
    
    Modifications:
    
    - Correctly only reverse bytes if needed.
    - Share code between unsafe implementations.
    
    Result:
    
    No more data-corruption on sytems without unaligned access.

commit 27c68647df61562984b279d7e2c2d21b56d4075e
Author: Matteo Merli <mmerli@yahoo-inc.com>
Date:   Sun Oct 18 21:59:26 2015 -0700

    In (Pooled|Unpooled)UnsafeDirectByteBuf copy memory directly to and from ByteBuffer
    
    Motivation:
    
    When moving bytes between a PooledUnsafeDirectByteBuf or an UnpooledUnsafeDirectByteBuf
    and a ByteBuffer, a temp ByteBuffer is allocated and will need to be GCed. This is a
    common case since a ByteBuffer is always needed when reading/writing on a file,
    for example.
    
    Modifications:
    
    Use PlatformDependent.copyMemory() to avoid the need for the temp ByteBuffer
    
    Result:
    
    No temp ByteBuffer allocated and GCed.

commit 5a6238ed4c1f9c81de5cb0e9106e886420eb97a0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Oct 16 13:20:51 2015 +0200

    Minimize reference count checks in SlicedByteBuf
    
    Motivation:
    
    SlicedByteBuf did double reference count checking for various bulk operations, which affects performance.
    
    Modifications:
    
    - Add package private method to AbstractByteBuf that can be used to check indexes without check the reference count
    - Use this new method in the bulk operation os SlicedByteBuf as the reference count checks take place on the wrapped buffer anyway
    - Fix test-case to not try to read data that is out of the bounds of the buffer.
    
    Result:
    
    Better performance on bulk operations when using SlicedByteBuf (and sub-classes)

commit b7e947709ef28f0e60177f99298ef137ea46f18c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Oct 14 19:35:04 2015 +0200

    [#4357] Fix possible assert error in GlobalEventExecutor
    
    Motivation:
    
    We started the thread before store it in a field which could lead to an assert error when the thread is executed before we actually store it.
    
    Modifications:
    
    Store thread before start it.
    
    Result:
    
    No more assert error possible.

commit bd4df20eb3f97f9d73d49667ddebaa7a14f701b1
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Oct 16 14:26:53 2015 +0200

    Cleanup buffer tests.
    
    Motivation:
    
    Some of the tests in the buffer module contained unused code. Some of the tests also used unnecessary inheritance which could be avoided to simplify code.
    
    Modifications:
    
    Cleanup the test cases.
    
    Result:
    
    Cleaner code, less cruft.

commit 8f13e333dd7b18fa6a287bb91e50f7b029a804ef
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Oct 16 13:38:10 2015 +0200

    Always return a real slice even when the length is 0
    
    Motivation:
    
    We need to always return a real slice even when the requested length is 0. This is needed as otherwise we not correctly share the reference count and so may leak a buffer if the user call release() on the returned slice and expect it to decrement the reference count of the "parent" buffer.
    
    Modifications:
    
    - Always return a real slice
    - Add unit test for the bug.
    
    Result:
    
    No more leak possible when a user requests a slice of length 0 of a SlicedByteBuf.

commit d5f502d940fb5a577fd9c55463ee675af44a3262
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Oct 6 19:00:59 2015 -0700

    Native getSoError bug
    
    Motivation:
    Java_io_netty_channel_epoll_Native_getSoError incorrectly returns the value from the get socket option function.
    
    Modifications:
    - return the value from the result of the get socket option call
    
    Result:
    Java_io_netty_channel_epoll_Native_getSoError returns the correct value.

commit 4c287d4e27179997822bf490946382d073120a88
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Oct 8 14:49:31 2015 +0200

    Added SlicedAbstractByteBuf that can provide fast-path for _get* and _set* methods
    
    Motivation:
    
    SlicedByteBuf can be used for any ByteBuf implementations and so can not do any optimizations that could be done
    when AbstractByteBuf is sliced.
    
    Modifications:
    
    - Add SlicedAbstractByteBuf that can eliminate range and reference count checks for _get* and _set* methods.
    
    Result:
    
    Faster SlicedByteBuf implementations for AbstractByteBuf sub-classes.

commit 8c93f4b1efbbb6e75038a6a7a18cf005d3792c84
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Oct 8 15:48:14 2015 +0200

    Added DuplicatedAbstractByteBuf that can provide fast-path for _get* and _set* methods
    
    Motivation:
    
    DuplicatedByteBuf can be used for any ByteBuf implementations and so can not do any optimizations that could be done
    when AbstractByteBuf is duplicated.
    
    Modifications:
    
    - Add DuplicatedAbstractByteBuf that can eliminate range and reference count checks for _get* and _set* methods.
    
    Result:
    
    Faster DuplicatedByteBuf implementations for AbstractByteBuf sub-classes.

commit 2aef4a504fd01a82be2097ac44610d6a6ced54b8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Oct 13 11:34:29 2015 +0200

    Minimize object allocation when calling AbstractByteBuf.toString(..., Charset)
    
    Motivation:
    
    Calling AbstractByteBuf.toString(..., Charset) is used quite frequently by users but produce a lot of GC.
    
    Modification:
    
    - Use a FastThreadLocal to store the CharBuffer that are needed for decoding.
    - Use internalNioBuffer(...) when possible
    
    Result:
    
    Less object creation / Less GC

commit 4aa19a09bd543852c917aa86e1f4b5697b7f5c94
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Sep 30 10:14:29 2015 +0200

    Implement SSLSession.invalidate() and isValid() for OpenSSLEngine.
    
    Motivation:
    
    The SSLSession allows to invalidate a SSLSession and so disallow resume of a session. We should support this for OpenSSLEngine as well.
    
    Modifications:
    
    - Correctly implement SSLSession.isValid() and invalidate() in OpenSSLEngine
    - Add unit test.
    
    Result:
    
    Invalidate of SSL sessions is supported when using OpenSSL now.

commit 0555b0aefd93d2ddbf68f0163ec9751a5e80b3c8
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Oct 8 18:15:04 2015 -0700

    HTTP Headers Over Deprecation
    
    Motivation:
    As part of recent efforts to rectify performance and make 4.1 headers more similar to 5.0 some methods were deprecated. Some of these methods were deprecated because they used String instead of CharSequence in the signature, which may require casting at the user level. Some of the deprecated methods have no direct alternatives and were done to inform a user the method will go away in future releases.
    
    Modifications:
    - Remove the deprecated qualifier from methods where no direct replacement exists
    
    Result:
    Less warnings in user code.

commit 9697afc1062fb43943e652e87196ac7785b5516f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Oct 9 18:01:23 2015 +0200

    Allow to disable reference count checks on every access of the ByteBuf
    
    Motiviation:
    
    Checking reference count on every access on a ByteBuf can have some big performance overhead depending on how the access pattern is. If the user is sure that there are no reference count errors on his side it should be possible to disable the check and so gain the max performance.
    
    Modification:
    
    - Add io.netty.buffer.bytebuf.checkAccessible system property which allows to disable the checks. Enabled by default.
    - Add microbenchmark
    
    Result:
    
    Increased performance for operations on the ByteBuf.

commit ffe7aafd8252a382aa0a651d3e9fb84065304da6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Oct 9 23:28:14 2015 +0200

    Optimize and minimize bound checks
    
    Motivation:
    
    We should minimize and optimize bound checks as much as possible to get the most out of performance.
    
    Modifications:
    
    - Use bitwise operations to remove branching
    - Remove branches when possible
    
    Result:
    
    Better performance for various operations.

commit 077af8c019921e2b5a66fd72e7105a680b7f9327
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Oct 14 19:58:54 2015 +0200

    Remove encoderMaxConcurrentStreams
    
    Motivation:
    
    Remove encoderMaxConcurrentStreams(...) and use the default settings. Also throw an exception if server mode is used.
    
    Modifications:
    
    - Remove encoderMaxConcurrentStreams(...) method
    - Throw exception if server mode is used and trying to enforce conncurrent streams.
    
    Result:
    
    Correctly support settings stuff via builder

commit 6ebf4d1f5be83c1f87284c61828beeb166a857d4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Oct 12 10:08:29 2015 +0200

    [#4347] Remove not needed write operation from example.
    
    Motivation:
    
    The proxy example contains some code that is not needed. This can confuse the reader.
    
    Modifications:
    
    Remove the not needed ctx.write(...).
    
    Result:
    
    Less confusing code.

commit b58036aeea21497797b648506b75b25b187b35a2
Author: Richard DiCroce <rdicroce@lapis.com>
Date:   Fri Oct 9 19:37:37 2015 -0400

    Improve flexibility of EmbeddedChannel ID
    
    Motivation:
    
    EmbeddedChannelId#hashCode() and equals() do not behave correctly if an
    instance is serialized and then deserialized. Additionally,
    EmbeddedChannel does not allow use of any other type of ChannelId, and
    EmbeddedChannelId is (mostly) a singleton instance. This creates a
    problem for unit tests that construct multiple EmbeddedChannels and
    expect each channel to have a unique ID.
    
    Modifications:
    
    EmbeddedChannelId is modified so equals() will return true and
    hashCode() will return the same value for any instance of the class.
    EmbeddedChannel is modified to allow a ChannelId to be specified when
    the channel is constructed. Tests added for both changes.
    
    Result:
    
    EmbeddedChannelId now behaves correctly when deserialized, and
    EmbeddedChannels can now have unique IDs.

commit 30dc1c1fa4249609551608c20fb0f42475502eab
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Oct 8 13:54:48 2015 +0200

    [#4313] ByteBufUtil.writeUtf8 should use fast-path for WrappedByteBuf
    
    Motivation:
    
    ByteBufUtil.writeUtf8(...) / writeUsAscii(...) can use a fast-path when writing into AbstractByteBuf. We should try to unwrap WrappedByteBuf implementations so
    we are able to do the same on wrapped AbstractByteBuf instances.
    
    Modifications:
    
    - Try to unwrap WrappedByteBuf to use the fast-path
    
    Result:
    
    Faster writing of utf8 and usascii for WrappedByteBuf instances.

commit 42e6b8fa86c86f0dfa7c4af621acf8e184094814
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Oct 2 15:16:16 2015 +0200

    [#4289] Use a mock DNS Server for dns tests.
    
    Motivation:
    
    As relaying on external DNS Server can result to test-failures we should better use a mock DNS Server for the dns tests.
    
    Modifications:
    
    - Refactor the DnsNameResolverTest to use a mock DNS Server which is using apacheds.
    - Allow to disable adding an opt resources as some servers not support it.
    
    Result:
    
    More stable testsuite.

commit 0740f703c1cdde0f7d6147c4131814825b83bc72
Author: Sky Ao <aoxiaojian@gmail.com>
Date:   Thu Oct 8 11:34:12 2015 +0800

    change type definition of pipeline from DefaultChannelPipeline to ChannelPipeline

commit 99b11c95b4d9efc180fe2d6f35436a7d49b54106
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Oct 7 15:30:34 2015 +0200

    [#4327] Ensure toString() will not throw IllegalReferenceCountException
    
    Motivation:
    
    As toString() is often used while logging we need to ensure this produces no exception.
    
    Modifications:
    
    Ensure we never throw an IllegalReferenceCountException.
    
    Result:
    
    Be able to log without produce exceptions.

commit 2d7e957a2388e660af8350342437e29271636a23
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Oct 7 10:35:12 2015 +0200

    Cleanup PendingWriteQueueTest
    
    Motivation:
    
    PendingWriteQueueTest needs some cleanup.
    
    Modifications:
    
    - Cleanup code to remove deprecation warnings
    - use static imports
    
    Result:
    
    No more warnings

commit 81a913ced197c2a1c3219ab602c49ded9ec195e7
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Oct 9 10:39:39 2015 -0700

    ByteBufUtilTest bug
    
    Motivation:
    The logic in ByteBufUtilTest.ByteBufUtilTest is wrong. It is attempting to ensure at least 1 byte is different in the ranges that will be subsequently compared, but does so before the copy operation.
    
    Modifications:
    - Move the code which ensures there is a difference to after the copy
    - Simplify the logic which ensures there is a difference
    
    Result:
    Unit test now operates as designed.

commit 11e8163aa9d29074d5002da662c5284e82ecd0d4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Oct 6 13:37:52 2015 +0200

    [#4284] Forward decoded messages more frequently
    
    Motivation:
    
    At the moment we only forward decoded messages that were added the out List once the full decode loop was completed. This has the affect that resources may not be released as fast as possible and as an application may incounter higher latency if the user triggeres a writeAndFlush(...) as a result of the decoded messages.
    
    Modifications:
    
    - forward decoded messages after each decode call
    
    Result:
    
    Forwarding decoded messages through the pipeline in a more eager fashion.

commit 66c3c58d3e52c22d32a1b41bdbb6b9ab47bdc2fe
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Sep 29 13:29:02 2015 +0200

    Reduce object creation for for unwrap/wrap if no ByteBuffer[] is used.
    
    Motivation:
    
    Often unwrap(...), wrap(...) is used with a single ByteBuffer and not with a ByteBuffer[]. We should reduce the array creations in this case.
    
    Modifications:
    
    Reuse ByteBuffer[1] for dst/src ByteBuffer.
    
    Result:
    
    Less object creation and so less GC

commit fbaf5d06e65f9adaf57bc6bb9d566b64b40a3830
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Oct 6 11:44:52 2015 +0200

    [#4316] Ensure pending tasks are run when EmbeddedChannel.close(...) or disconnect(...) is called.
    
    Motivation:
    
    We missed to run all pending tasks when EmbeddedChannel.close(...) or disconnect(...) was called. Because of this channelInactive(...) / channelUnregistered(...) of the handlers were never called.
    
    Modifications:
    
    Correctly run all pending tasks and cancel all not ready scheduled tasks when close or disconnect was called.
    
    Result:
    
    Correctly run tasks on close / disconnect and have channelInactive(...) / channelUnregistered(...) called.

commit e4195334988236e7e30a4a802630b14956ce5b4b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Oct 5 11:08:04 2015 +0200

    Remove unused parameter from method declaration.
    
    Motivation:
    
    We had an unused paramter on a method, we should just remove it to keep code clean.
    
    Modifications:
    
    - Remove parameter
    - Fix typo in javadoc
    
    Result:
    
    Cleanup done.

commit 2f8bc24c622790e94181d19cd054987a1a4498cb
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Oct 6 14:23:24 2015 -0700

    Fix compile error introduced by 32231ee

commit 32231ee2e05e2979e4c76220945b99c6712fd582
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Oct 5 17:43:41 2015 -0700

    EPOLL RDHUP and IN at same time
    
    Motivation:
    If a RDHUP and IN event occurred at the same time it is possible we may not read all pending data on the channel. We should ensure we read data before processing the RDHUP event.
    
    Modifications:
    - Process the RDHUP event before the IN event.
    
    Result:
    Data will not be dropped.
    Fixes https://github.com/netty/netty/issues/4317

commit b2399c2475db14c1038432129545845785a73563
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Oct 6 11:32:44 2015 -0700

    EPOLL Shutdown Input Half Closed
    
    Motivation:
    EPOLL attempts to support half closed socket, but fails to call shutdown to close the read portion of the file descriptor.
    
    Motivation:
    - If half closed is supported shutting down the input should call underlying Native.shutdown(...) to make sure the peer is notified of the half closed state.
    
    Result:
    EPOLL half closed is more correct.

commit 2ff2806ada06d4ba902eb9918a0f3375de4515d9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Oct 2 09:03:29 2015 +0200

    [maven-release-plugin] prepare for next development iteration

commit 5a43de10f7470f7132070565fbcb1ac9da6c599d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Oct 2 09:02:58 2015 +0200

    [maven-release-plugin] prepare release netty-4.1.0.Beta7

commit dc6cb7545b1e4651e4928a30267f4f952d47dc94
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Oct 1 22:05:44 2015 +0200

    Lazy compute SSLSession creation time.
    
    Motivation:
    
    As a SSL session may be created later at some time we should compute the creation time in a lazy fashion.
    
    Modifications:
    
    - Lazy compute creation time
    - Add some unit test
    
    Result:
    
    More correct behavior

commit 67ddb61ecaba71cfd6840cd9fc751e899085c069
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Oct 2 17:49:09 2015 -0700

    ByteBufUtilTest test failure
    
    Motivation:
    ByteBufUtilTest.notEqualsBufferSubsections is testing non-equality but just uses random numbers to assume they will not be equal. Even after the random bytes are generated we should check they are infact not equal so the test has no chance of failing when it should not.
    
    Modifications:
    - Loop through bytes in notEqualsBufferSubsections after they are randomly generated to ensure there is atleast 1 difference.
    
    Result:
    More reliable unit tests.

commit d4680c55d826f30b275bb625aaa7277c87945f7b
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Oct 1 18:27:48 2015 -0700

    AsciiString contains utility methods
    
    Motivation:
    When dealing with case insensitive headers it can be useful to have a case insensitive contains method for CharSequence.
    
    Modifications:
    - Add containsCaseInsensative to AsciiString
    
    Result:
    More expressive utility method for case insensitive CharSequence.

commit 06c3ae07a0900cb3ffedaf1769b81c64d0948d39
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Oct 2 10:41:40 2015 -0700

    DefaultHttp2ConnectionDecoder write ping buffer
    
    Motivation:
    DefaultHttp2ConnectionDecoder writes a ACK when receiving a ping frame and sends the same data buffer it received. The data buffer is also passed to the listener, but the indexes are shared between the send and the listener. We should ensure the indexes are independent for these two operations.
    
    Modifications:
    - Call slice on the buffer that is being sent
    
    Result:
    Listener now has access to a buffer that will not appear to be already consumed.

commit 5deec9631f31efaea105988a1a814f15881f699a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Sep 29 09:39:57 2015 +0200

    Add support for server-side renegotiation when using OpenSslEngine.
    
    Motivation:
    
    JDK SslEngine supports renegotion, so we should at least support it server-side with OpenSslEngine as well.
    
    That said OpenSsl does not support sending messages asynchronly while the renegotiation is still in progress, so the application need to ensure there are not writes going on while the renegotiation takes place. See also https://rt.openssl.org/Ticket/Display.html?id=1019 .
    
    Modifications:
    
    - Add support for renegotiation when OpenSslEngine is used in server mode
    - Add unit tests.
    - Upgrade to netty-tcnative 1.1.33.Fork9
    
    Result:
    
    Better compatibility with the JDK SSLEngine implementation.

commit 284e3702d87a7efdae5ebacd7d42c54b54dd569a
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Sep 26 17:44:11 2015 -0700

    Http2ConnectionHandler Builder instead of constructors
    
    Motivation:
    Using the builder pattern for Http2ConnectionHandler (and subclasses) would be advantageous for the following reasons:
    1. Provides the consistent construction afforded by the builder pattern for 'optional' arguments. Users can specify these options 1 time in the builder and then re-use the builder after this.
    2. Enforces that the Http2ConnectionHandler's internals (decoder Http2FrameListener) are initialized after construction.
    
    Modifications:
    - Add an extensible builder which can be used to build Http2ConnectionHandler objects
    - Update classes which inherit from Http2ConnectionHandler
    
    Result:
    It is easier to specify options and construct Http2ConnectionHandler objects.

commit 179cd9a4a124e08ca650729835d9873af10ea6bc
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Sep 26 20:11:45 2015 +0200

    Correctly update internal handshake state on beginHandshake()
    
    Motivation:
    
    We missed to correctly update the internal handshake state on beginHandshake() if we was able to finish the handshake directly. Also we not handled the case correctly when beginHandshake() was called after the first handshake was finished, which incorrectly throw an Error.
    
    Modifications:
    
    - Correctly set internal handshake state in all cases
    - Correctly handle beginHandshake() once first handshake was finished.
    
    Result:
    
    Correctly handle OpenSslEngine.beginHandshake()

commit 1485a87e25f6615534241d32e69a19134ba76317
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Sep 30 15:22:57 2015 -0700

    Http2ConnectionHandler and Http2FrameListener cyclic dependency
    
    Motivation:
    It is often the case that implementations of Http2FrameListener will want to send responses when data is read. The Http2FrameListener needs access to the Http2ConnectionHandler (or the encoder contained within) to be able to send responses. However the Http2ConnectionHandler requires a Http2FrameListener instance to be passed in during construction time. This creates a cyclic dependency which can make it difficult to cleanly accomplish this relationship.
    
    Modifications:
    - Add Http2ConnectionDecoder.frameListener(..) method to set the frame listener. This will allow the listener to be set after construction.
    
    Result:
    Classes which inherit from Http2ConnectionHandler can more cleanly set the Http2FrameListener.

commit 2ffe7bd72e640d2c9df5cca3818e0d36e91622ce
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Sep 30 15:04:06 2015 +0200

    Fail build on warnings in the native transport
    
    Motivation:
    
    We should fail the build on warnings in the JNI/c code.
    
    Modifications:
    
    - Add GCC flag to fail build on warnings.
    - Fix warnings (which also fixed a bug when using splice with offsets).
    
    Result:
    
    Better code quality.

commit 173ebb95385ef316700d71f8443232cf4feed634
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Sep 30 10:01:15 2015 +0200

    Fix enforcer rule for new os detection plugin

commit 06fcb569802da6be93ad30f6e75dacebdb1dd59b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Sep 29 17:03:26 2015 +0200

    Upgrade to netty-tcnative 1.1.33.Fork8
    
    Motivation:
    
    A new version of netty-tcnative was released with some important bug-fixes.
    
    Modifications:
    
    Bump up version.
    
    Result:
    
    Using latest netty-tcnative version

commit ca44436ce6c5bf7a7b58c1842f82a4f6aa3ae2d6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Sep 24 08:33:51 2015 +0200

    [#4265] Not allow to add/set DefaultHttpHeaders to itself.
    
    Motivation:
    
    We should prevent to add/set DefaultHttpHeaders to itself to prevent unexpected side-effects.
    
    Modifications:
    
    Throw IllegalArgumentException if user tries to pass the same instance to set/add.
    
    Result:
    
    No surprising side-effects.

commit 2adf6e5358eed27144f9582fdc652a5bf0eb49ce
Author: Scott Van Wart <silvaran@gmail.com>
Date:   Fri Sep 25 09:29:11 2015 -0300

    Better parsing for STOMP body with no length.
    
    Motivation:
    
    The STOMP decoder used to fail when parsing a frame with no content-length
    and a body split across multiple packets.
    
    Modifications:
    
    Support contentLength of -1 (indicating indeterminate length) and added a
    check to getContentLength.  Moved the NUL byte searching from the
    readHeaders() method out to the main decoder loop.
    
    Result:
    
    A STOMP frame can be properly parsed even if it's missing the
    content-length header and the NUL byte is in a later packet.

commit c8a941d01e85148c21cc01bae80764bc134b1fdd
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Sep 25 11:35:46 2015 +0200

    [#4275] Discard bytes after X reads to guard against OOME.
    
    Motivation:
    
    If a remote peer writes fast enough it may take a long time to have fireChannelReadComplete(...) triggered. Because of this we need to take special care and ensure we try to discard some bytes if channelRead(...) is called to often in ByteToMessageDecoder.
    
    Modifications:
    
    - Add ByteToMessageDecoder.setDiscardAfterReads(...) which allows to set the number of reads after which we try to discard the read bytes
    - Use default value of 16 for max reads.
    
    Result:
    
    No risk of OOME.

commit 0e9545e94d3128e1069ef96621d1fd984918d4e3
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Sep 25 15:49:05 2015 -0700

    Http2RemoteFlowController stream writibility listener
    
    Motivation:
    For implementations that want to manage flow control down to the stream level it is useful to be notified when stream writability changes.
    
    Modifications:
    - Add writabilityChanged to Http2RemoteFlowController.Listener
    - Add isWritable to Http2RemoteFlowController
    
    Result:
    The Http2RemoteFlowController provides notification when writability of a stream changes.

commit 7ab132f28aeb1190eff5def4ffda0546f9aa386f
Author: nmittler <nathanmittler@google.com>
Date:   Mon Sep 21 14:09:06 2015 -0700

    Making HTTP/2 stream byte assignment pluggable
    
    Motivation:
    
    The DefaultHttp2RemoteFlowController has become very large and is getting difficult to understand and maintain. It is also desirable for some applications to be able to disable the priority algorithm altogether for performance reasons.
    
    Modifications:
    
    Abstract the stream byte assignment logic (renamed allocation->assignment for clarity) behind an interface `StreamByteAssigner` with a single implementation `PriorityStreamByteAssigner`.
    
    Result:
    
    Goes some way towards supporting #4246

commit 2766fc49e26d4a69c5a374fc53eee5c40d7f86c7
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Sep 25 09:29:08 2015 +0200

    Expose new way of setting session keys
    
    Motivation:
    
    We should provide a better way to set session keys that not use the deprecated method of netty-tcnative.
    
    Modifications:
    
    - Add OpenSslSessionTicketKey
    - Expose new method on OpenSslServerContext and deprecate the old method.
    
    Result:
    
    Easier to use and can remove the deprecated method later on.

commit 93011dd3159e2371d583e84ffae3fa6eac4ed723
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Sep 24 15:52:54 2015 -0700

    DefaultHttp2RemoteFlowController not allocating all available bytes
    
    Motivation:
    DefaultHttp2RemoteFlowController's allocation algorithm may not allocate all bytes that are available in the connection window. If the 'fair share' based upon weight is not fully used by sibling nodes it was not correctly re-distributed to other sibilings which may be able to utilize part / all of that share.
    
    Modifications:
    - Add a unit test which demonstrates the issue.
    - Modify the allocation algorithm to ensure all available bytes are allocated.
    
    Result:
    Fixes https://github.com/netty/netty/issues/4266

commit 747533408dbf3fa04fe0753e0f20cf80b8ac66ed
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Sep 22 17:00:16 2015 +0200

    [#4170] Shutdown socket before close fd when using epoll transport
    
    Motivation:
    
    We should call shutdown(...) on the socket before closing the filedescriptor to ensure it is closed gracefully.
    
    Modifications:
    
    Call shutdown(...) before close.
    
    Result:
    
    Sockets are gracefully shutdown when using native transport.

commit 956a757d37c52d550aebdbfaf3d68863baa2a765
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Sep 23 11:25:20 2015 +0200

    [#3789] Correctly reset markers for all allocations when using PooledByteBufAllocator
    
    Motivation:
    
    We need to ensure all markers are reset when doing an allocation via the PooledByteBufAllocator. This was not the always the case.
    
    Modifications:
    
    Move all logic that needs to get executed when reuse a PooledByteBuf into one place and call it.
    
    Result:
    
    Correct behavior

commit 115d3576be47804aa985d1749e0cfa427d3714f9
Author: Trustin Lee <t@motd.kr>
Date:   Fri Sep 25 11:29:20 2015 +0900

    Update the public DNS server list
    
    Motivation:
    
    Some DNS servers in DnsNameResolverTest are outdated and some of them
    returns NoError for non-existent domains.
    
    Modifications:
    
    - Update the DNS server list from http://meo.ws/dnsrec.php again
    - Update the web-scraper script
    
    Result:
    
    DnsNameResolverTest.testNegativeTtl() should not fail anymore.

commit c47106587a465d83344469bb5001b84d442f225d
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Sep 24 17:37:33 2015 -0700

    Unused paramters introduced by https://github.com/netty/netty/pull/4257
    
    Motivation:
    PR https://github.com/netty/netty/pull/4257 introduced paramters and didn't use them.
    
    Modifications:
    - Use the new paramters
    
    Result:
    No warnings and correct behavior

commit 6c6c369c68dea9aab20a906793f81363f54c389c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Sep 18 16:09:43 2015 +0200

    [#4235] Ensure OpenSslEngine.unwrap(...) / wrap(...) correctly return HandshakeStatus.FINISHED
    
    Motivation:
    
    OpenSslEngine.unwrap(...) / wrap(...) must return HandhsakeStatus.FINISHED if an unwrap or wrap finishes a handshake to behave like descripted in the SSLEngine docs.
    
    Modifications:
    
    - Ensure we return HandshakeStatus.FINISHED
    
    Result:
    
    Behave correctly.

commit 4f40913b3352efa9c8e43e535f31276bae6da84f
Author: Peeyush Aggarwal <peeyush_16@yahoo.com>
Date:   Wed Sep 23 16:44:26 2015 -0700

    Use NetUtil.LOCALHOST4 instead of InetAddress.getLocalHost()
    
    Motivation:
    
    On ubuntu, InetAddress.getLocalHost() will return 127.0.1.1 this causes some tests to fail.
    NetUtil.LOCALHOST4 is more portable.
    
    Modifications:
    
    Made changes in EpollSocketTcpMd5Test to make test passing on ubuntu.
    
    Result:
    
    EpollSocketTcpMd5Test now also passes on ubuntu.

commit c372f691185973f11651878d70c9f5d309542533
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Sep 15 19:56:00 2015 -0700

    http2.HttpConversionUtil :authority conversion error
    
    Motiviation:
    The http2 spec https://tools.ietf.org/html/rfc7540#section-8.1.2.3 states that the :authority header should be copied into the HOST header when converting from HTTP/2 to HTTP/1.x. We currently have an extension header to preserve the authority.
    
    Modifications:
    - Remove AUTHORITY extension header
    - HTTP/2 :authority should map to HOST header when converting to HTTP/1.x.
    
    Result:
    More spec compliant.

commit c116c35ed00c88d8aa9771e930ede0b775ebd3e5
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Sep 22 11:25:48 2015 -0700

    SelfSignedCertificate configurable valid dates
    
    Motivation:
    Users may want to control the valid dates for SelfSignedCertificate.
    
    Modifications:
    - Allow NOT_BEFORE and NOT_AFTER to be controlled via java system properties.
    
    Result:
    Fixes https://github.com/netty/netty/issues/3978

commit ed4928f62a5a1c9a951040f279ed43a1705dc000
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Sep 16 15:34:44 2015 -0700

    StreamBufferingEncoderTest leak
    
    Motivation:
    Buffer leak in StreamBufferingEncoderTest
    
    Modifications:
    - Make sure buffers are released in StreamBufferingEncoderTest
    
    Result:
    Fixes https://github.com/netty/netty/issues/4230

commit edb91afcd6cd4347c046372d05f28f0b5985ba99
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Sep 15 15:33:17 2015 -0700

    Http2LifecycleManager.onException rename
    
    Motivation:
    Http2LifecycleManager.onException takes a Throwable as a paramter and not an Exception. There are also onConnectionError and onStreamError methods in the codec. We should rename this method to onError for consistency and clarity.
    
    Modifications:
    - Rename Http2LifecycleManager.onException to Http2LifecycleManager.onError
    
    Result:
    More consistent and clarified interface.

commit 7adc1f9eb424b1a52187e25f6671af9f58474fca
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Sep 21 16:20:28 2015 -0700

    STOMP Headers Name Comparator
    
    Motivation:
    The HashingStrategy for DefaultStompHeaders was using the java .equals() method which would fail to compare String, AsciiString, and other CharSequence objects as equal.
    
    Modification:
    - Use AsciiString.CASE_SENSITIVE_HASHER for DefaultStompHeaders
    
    Result:
    DefaultStompHeaders work with all CharSequence objects.
    Fixes https://github.com/netty/netty/issues/4247

commit 24c94070801d480d2b719de54181b3d60abf0444
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Sep 22 10:41:31 2015 -0700

    DefaultHttp2RemoteFlowController may not write all pending bytes
    
    Motivation:
    DefaultHttp2RemoteFlowController attempts to write as many bytes as possible to transition the channel to not writable, and then relies on notification of channelWritabilityChange to continue writing. However the amount of bytes written by DefaultHttp2RemoteFlowController may not be the same number of bytes that is actually written to the channel due to other ChannelHandlers (SslHandler, compression, etc...) in the pipeline. This means there is a potential for the DefaultHttp2RemoteFlowController to be waiting for a channel writaiblity change event that will never come, and thus not write all queued data.
    
    Modifications:
    - DefaultHttp2RemoteFlowController should write pending bytes until there are no more, or until the channel is not writable.
    
    Result:
    DefaultHttp2RemoteFlowController will write all pending data.
    Fixes https://github.com/netty/netty/issues/4242

commit beb75f0a04617faf19d80c9d42bea38c0ee7b22d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Sep 18 21:42:43 2015 +0200

    Upgrade to new os-maven-plugin
    
    Motivation:
    
    The last os-maven-plugin had a bug that sometimes missed to correctly detect fedora based linux.
    
    Modifications:
    
    Upgrade to 1.4.1
    
    Result:
    
    Correctly detect on all fedora based linux.

commit 276613c63c05cbdfa56e1ef3f216ca6d95ffedd1
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Sep 21 11:20:11 2015 +0200

    Not use RC4 for renegation as it is not supported in more recent java versions.
    
    Motivation:
    
    RC4 is not supported by default in more recent java versions as RC4 is considered insecure. We should not use it in tests as these test will fail on more recent java version.
    
    Modifications:
    
    Use SSL_RSA_WITH_3DES_EDE_CBC_SHA for test.
    
    Result:
    
    Non failing test on more recent java versions.

commit ec20902613a0384300584a4900a11e118bcecf69
Author: nmittler <nathanmittler@google.com>
Date:   Mon Sep 21 16:21:23 2015 -0700

    Don't set HTTP/2 flow controller ctx to null
    
    Motivation:
    
    We currently set the flow controller ChannelHandlerContexts to null when the channel becomes inactive. This is bad :)
    
    Modifications:
    
    Just remove that code in Http2ConnectionHandler
    
    Result:
    
    Fixes #4240

commit 6241bb059cd0d565da2f58391f2490296608208f
Author: fratboy <fratboy77@gmail.com>
Date:   Tue Sep 22 01:08:03 2015 +0900

    [#4244] Convert urlencoded uri to http2 path correctly
    
    Motivation:
    
    HttpConversionUtil.toHttp2Headers does not convert urlencoded uri to http2 path properly.
    
    Modifications:
    
    Use getRawPath(), getRawQuery(), getRawFragment() in java.net.URI when converts to http2 path
    
    Result:
    
    HttpConversionUtil.toHttp2Headers does not urldecode uri unproperly.

commit a1d0207ec52639f3ce65801a869565af53d19731
Author: nmittler <nathanmittler@google.com>
Date:   Fri Sep 18 09:50:30 2015 -0700

    Adding client auth to SslContextBuilder
    
    Motivation:
    
    To simplify the use of client auth, we need to add it to the SslContextBuilder.
    
    Modifications:
    
    Added a ClientAuth enum and plumbed it through the builder, down into the contexts/engines.
    
    Result:
    
    Client auth can be configured when building an SslContext.

commit 3ee44a3dbb3608858d10e8215cf5d01ccb6f6015
Author: nmittler <nathanmittler@google.com>
Date:   Fri Sep 18 07:51:04 2015 -0700

    Update Netty to latest netty-tcnative
    
    Motivation:
    
    The latest netty-tcnative fixes a bug in determining the version of the runtime openssl lib.  It also publishes an artificact with the classifier linux-<arch>-fedora for fedora-based systems.
    
    Modifications:
    
    Modified the build files to use the "-fedora" classifier when appropriate for tcnative. Care is taken, however, to not change the classifier for the native epoll transport.
    
    Result:
    
    Netty is updated the the new shiny netty-tcnative.

commit c7e3f6c6fd107624c6463283d88d04865207d32e
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Sep 11 09:56:00 2015 -0700

    HTTP/2 defines using String instead of CharSequence
    
    Motivation:
    Http2CodecUtils has some static variables which are defined as Strings instead of CharSequence. One of these defines is used as a header name and should be AsciiString.
    
    Modifications:
    - Change the String defines in Http2CodecUtils to CharSequence
    
    Result:
    Types are more consistently using CharSequence and adding the upgrade header will require less work.

commit 1d4d5fe312d6651bcbd5e3aea94f85844d3a0a8c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Sep 10 23:54:57 2015 -0700

    DefaultHttp2Headers should throw exception of type Http2Exception
    
    Motivation:
    The DefaultHttp2Headers code is throwing a IllegalArgumentException if an invalid character is detected. This is being ignored by the HTTP/2 codec instead of generating a GOAWAY.
    
    Modifications:
    - Throw a Http2Exception of type PROTOCOL_ERROR in accordance with https://tools.ietf.org/html/rfc7540#section-8.1.2.6
    - Update examples which were building invalid headers
    
    Result:
    More compliant with https://tools.ietf.org/html/rfc7540#section-8.1.2.6

commit 2a27d581a9a814a4a2103f7cd0a56c9e7019e339
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Sep 15 20:47:24 2015 +0200

    Ensure close caused by write will happen before write promise is notified
    
    Motiviation:
    
    We need to ensure the actual close to the transport takes place before the promsie of the write is notified that triggered it. This is needed as otherwise Channel.isActive(), isOpen() and isWritable() may return true even if the Channel should be closed already.
    
    Modifications:
    
    - Ensure the close takes place first
    
    Result:
    
    ChannelFutureListener will see the correct state of the Channel.

commit 2a4276e1ff8aff5c4986a3c90c0cb60e52e32f65
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Sep 15 09:13:25 2015 -0700

    SpdyHttpHeaders are not lowercase
    
    Motivation:
    According to the SPDY spec https://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft3-1#TOC-3.2.1-Request header names must be lowercase. Our predefined SPDY extension headers are not lowercase.
    
    Modifications
    - SpdyHttpHeaders should define header names in lower case
    
    Result:
    Compliant with SPDY spec, and header validation code does not detect errors for our own header names.

commit 15450af2e7c533c30cfdd52882a02006ba2fde00
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Sep 9 13:40:07 2015 -0700

    DefaultHttp2FrameWriter ping payload size check
    
    Motivation:
    The HTTP/2 spec states that the ping frame length must be 8 and is otherwise an error https://tools.ietf.org/html/rfc7540#section-6.7. The DefaultHttp2FrameReader enforces this, but the DefaultHttp2FrameWriter allows invalid frames to be written. We should not allow invalid ping frames to be written to the network.
    
    Modifications:
    - DefaultHttp2FrameWriter checks the frame size to be 8, or throws an exception
    
    Result:
    Fixes https://github.com/netty/netty/issues/3721

commit 59600f1812969abe2bb84d64439c58286011ea2c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Sep 10 09:18:09 2015 -0700

    HTTP/2 to HTTP/1.x headers conversion more accessible
    
    Motivation:
    Currently there is a HttpConversionUtil.addHttp2ToHttpHeaders which requires a FullHttpMessage, but this may not always be available. There is no interface that can be used with just Http2Headers and HttpHeaders.
    
    Modifications:
    - add an overload for HttpConversionUtil.addHttp2ToHttpHeaders which does not take FullHttpMessage
    
    Result:
    An overload for HttpConversionUtil.addHttp2ToHttpHeaders exists which does not require FullHttpMessage.

commit 076d4ed5147f186b5e5a25945b77bce63c0d0165
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Sep 10 21:23:23 2015 +0200

    [#4205] Correctly set EPOLLOUT flag whe writeBytes(...) was not able to write everything
    
    Motivation:
    
    writeBytes(...) missed to set EPOLLOUT flag when not all bytes were written. This could lead to have the EpollEventLoop not try to flush the remaining bytes once the socket becomes writable again.
    
    Modifications:
    
    - Move setting EPOLLOUT flag logic to one point so we are sure we always do it.
    - Move OP_WRITE flag logic to one point as well.
    
    Result:
    
    Correctly try to write pending data if socket becomes writable again.

commit cac51ab8d68412a3db6b6c3310e5ed0f842865c2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Sep 2 11:52:01 2015 +0200

    Optimize ByteBufUtil.writeUsAscii(...) when AsciiString is used.
    
    Motivation:
    
    When AsciiString is used we can optimize the write operation done by ByteBufUtil.writeUsAscii(...)
    
    Modifications:
    
    Sepcial handle AsciiString.
    
    Result:
    
    Faster writing of AsciiString.

commit 30b30f77c6235a5d47f72d19b23bc58b54d941b2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Sep 9 21:12:04 2015 +0200

    Support SSLSession.getLocalCertificates() and getLocalPrincipal() when using OpenSSL
    
    Motivation:
    
    SSLSession.getLocalCertificates() and getLocalPrincipal() was not supported when using OpenSSL, which can produce problems when switch from JDK to OpenSSL impl.
    
    Modifications:
    
    Implement SSLSession.getLocalCertificates() and getLocalPrincipal() for OpenSslEngine.
    
    Result:
    
    More consistent behaving between JDK and OpenSSL based SSLEngine.

commit 6e3acfeb06e68fb68c7dbb5e5a847298c051c1af
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Sep 9 10:05:55 2015 +0200

    Correctly throw SSLPeerUnverifiedException if peers identity has not been verified
    
    Motivation:
    
    As stated in the SSLSession javadocs getPeer* methods need to throw a SSLPeerUnverifiedException if peers identity has not be verified.
    
    Modifications:
    
    - Correctly throw SSLPeerUnverifiedException
    - Add test for it.
    
    Result:
    
    Correctly behave like descripted in javadocs.

commit 2dde3a386bd3652a92c0c862b6588878bd94fe16
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Sep 9 14:25:32 2015 +0200

    [#3687] Correctly store WebSocketServerHandshaker in Channel attributes
    
    Motivation:
    
    As we stored the WebSocketServerHandshaker in the ChannelHandlerContext it was always null and so no close frame was send if WebSocketServerProtocolHandler was used.
    
    Modifications:
    
    Store WebSocketServerHAndshaker in the Channel attributes and so make it visibile between different handlers.
    
    Result:
    
    Correctly send close frame.

commit b66b38d3e417324e4eae965795b94976baa9eb11
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Sep 9 10:05:15 2015 -0700

    Update twitter hpack version
    
    Motivation:
    https://github.com/twitter/hpack released version v1.0.1.
    
    Modifications:
    - Update pom files to pull in new version
    
    Results:
    Depend on the most recent hpack library.

commit ba11879c9f8a2d8aae308d83be9f240606ab0d32
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Sep 11 09:12:22 2015 -0700

    HTTP/2 codec heap buffer usage
    
    Motivation:
    The HTTP/2 codec has a few static buffers sent over the network which are allocated on the heap. This results in a copy operation when the buffer is sent out on the network.
    
    Modifications:
    - Ensure these static buffers are allocated using direct memory.
    
    Result:
    No copy operation necessary when writing static buffers to network.

commit f89dfb0bd53af45eb5f1c1dcc7d9badd889d17f0
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Sep 2 15:10:58 2015 -0700

    Deprecation cleanup for HTTP headers
    
    Motivaion:
    The HttpHeaders and DefaultHttpHeaders have methods deprecated due to being removed in future releases, but no replacement method to use in the current release. The deprecation policy should not be so aggressive as to not provide any non-deprecated method to use.
    
    Modifications:
    - Remove deprecated annotations and javadocs from methods which are the best we can do in terms of matching the master's api for 4.1
    
    Result:
    There should be non-deprecated methods available for HttpHeaders in 4.1.

commit 47726991b21b53bd0c458a6d23a27d5c30b73b0d
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Sep 3 11:45:38 2015 -0700

    HTTP/2 Header Name Validation
    
    Motivation:
    The HTTP/2 header name validation was removed, and does not currently exist.
    
    Modifications:
    - Header name validation for HTTP/2 should be restored and set to the default mode of operation.
    
    Result:
    HTTP/2 header names are validated according to https://tools.ietf.org/html/rfc7540

commit 250a09df635d70853e1576a9e522c846e918938e
Author: Peeyush Aggarwal <peeyush_16@yahoo.com>
Date:   Fri Sep 4 15:03:10 2015 -0700

    Add support for RFC7413 on linux for server sockets
    
    Motivation:
    
    TCP Fast Open allows data to be carried in the SYN and SYN-ACK packets and consumed by the receiving end during the initial connection handshake, and saves up to one full round-trip time (RTT) compared to the standard TCP, which requires a three-way handshake (3WHS) to complete before data can be exchanged. This commit enables support for TFO on server sockets.
    
    Modifications:
    
    Added new Integer Option TCP_FASTOPEN in EpollChannelOption.
    Added getters/setters in EpollServerChannelConfig for TCP_FASTOPEN.
    Added way to check if TCP_FASTOPEN is supported on server in Native.
    Added setting on socket opt TCP_FASTOPEN if value is set on channel options in doBind in EpollServerSocketChannel.
    Enhanced EpollSocketTestPermutation to contain a permutation for server socket containing fast open.
    
    Result:
    
    Users of native-epoll can set TCP_FASTOPEN on server sockets and thus leverage fast connect features of RFC7413 if client is capable of it.
    
    Conflicts:
    	transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java

commit 7049d8debb74c05a542233f5b28b1655b07da306
Author: Brendt Lucas <brendt@idnet.com>
Date:   Fri Sep 4 22:17:29 2015 +0100

    Add validateHeaders and headersToLowerCase options for SPDY
    
    Motivation:
    
    Related to issue #4185.
    
    HTTP has the option to disable header validation for optimisation purposes.  Introduce the same option for SPDY headers.
    Also, optimise SpdyHttpEncoder by allowing the user to specify whether or not the encoder needs to convert header names to lowercase.
    
    Modifications:
    
    Added flags for validation and conversion.
    
    Result:
    
    SpdyHeader validation and conversion can be disabled.

commit 58dc7f790231428edf2502ee4c4ca6ff29280832
Author: Michael Bildner <michael.bildner@thingworx.com>
Date:   Fri Sep 4 09:23:06 2015 -0400

    Do not bother closing SSL enging inbound if the outbound has already been closed.
    
    Motivation:
    
    Invoking the javax.net.ssl.SSLEngine.closeInbound() method will send a
    fatal alert and invalidate the SSL session if a close_notify alert has
    not been received.
    From the javadoc:
    If the application initiated the closing process by calling
    closeOutbound(), under some circumstances it is not required that the
    initiator wait for the peer's corresponding close message. (See section
    7.2.1 of the TLS specification (RFC 2246) for more information on
    waiting for closure alerts.) In such cases, this method need not be
    called.
    Always invoking the closeInbound() method without regard to whether or
    not the closeOutbound() method has been invoked could lead to
    invalidating perfectly valid SSL sessions.
    
    Modifications:
    
    Added an instance variable to track whether the
    SSLEngine.closeOutbound() method has been invoked. When the instance
    variable is true, the SSLEngine.closeInbound() method doesn't need to be
    invoked.
    
    Result:
    
    SSL sessions will not be invalidated if the outbound side has been
    closed but a close_notify alert hasn't been received.

commit 070f1470e8f98d35f9e0fed03716b00aa0058e53
Author: Brendt Lucas <brendt@idnet.com>
Date:   Fri Sep 4 18:08:03 2015 +0100

    [#4185] SpdyHttpEncoder fails to convert HttpResponse to SpdyFrame
    
    Motivation:
    
    When SpdyHttpEncoder attempts to create an SpdyHeadersFrame from a HttpResponse an IllegalArgumentException is thrown if the original HttpResponse contains a header that includes uppercase characters. The IllegalArgumentException is thrown due to the additional validation check introduced by #4047.
    
    Previous versions of the SPDY codec would handle this by converting the HTTP header name to lowercase before adding the header to the SpdyHeadersFrame.
    
    Modifications:
    
    Convert the header name to lowercase before adding it to SpdyHeaders
    
    Result:
    
    SpdyHttpEncoder can now convert a valid HttpResponse into a valid SpdyFrame

commit 983920f25f2319272e085beb8eaf10f0701df5a3
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Sep 2 10:39:36 2015 -0700

    RecvByteBufAllocator.DelegatingHandle accessor
    
    Motivation:
    RecvByteBufAllocator.DelegatingHandle does not provide an accessor to get the delegate handle. This may be useful for classes that extend DelegatingHandle.
    
    Modifications:
    - add delegate() method to DelegatingHandle
    
    Result:
    Classes which inherit from DelegatingHandle can now access the delegate Handle.

commit 50d1f0a680d8fad51673e65a39d996cbb58183cc
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Sep 3 10:28:58 2015 -0700

    Http2Headers.iterator() comment correction
    
    Motivation:
    The javadoc comments on Http2Headers.iterator() are incorrect.
    
    Modifications:
    - Correct and clarify the javadoc for Http2Headers.iterator()
    
    Result:
    Javadoc for Http2Headers.iterator() is more correct.

commit 30a770161626b74bf5b194075c77bdf2d2bc2d3c
Author: Robert Varga <rovarga@cisco.com>
Date:   Sun Aug 30 12:11:41 2015 +0200

    Add support for RFC2385 on Linux
    
    Motivation:
    
    There are protocols (BGP, SXP), which are typically deployed with TCP
    MD5 authentication to protect sessions from being hijacked/torn down by
    third parties. This facility is not available on most operating systems,
    but is typically present on Linux.
    
    Modifications:
    
    - add a new EpollChannelOption, which is write-only
    - teach Epoll(Server)SocketChannel to track which addresses have keys
      associated
    - teach Native how to set the MD5 signature keys for a socket
    
    Result:
    
    Users of the native-epoll transport can set MD5 signature keys and thus
    leverage RFC-2385 protection on TCP connections.

commit 34de2667c799bf24ae374ff28c658e9da21bae9f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Sep 2 11:45:20 2015 +0200

    [maven-release-plugin] prepare for next development iteration

commit 2eb444ec1da91e7e280418ed65f88becda96bd4e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Sep 2 11:36:11 2015 +0200

    [maven-release-plugin] prepare release netty-4.1.0.Beta6

commit 1e763b6504fa8550c20d49f02c3dfad3fc0c5a76
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Aug 28 16:26:19 2015 -0700

    LocalChannel write when peer closed leak
    
    Motivation:
    If LocalChannel doWrite executes while the peer's state changes from CONNECTED to CLOSED it is possible that some promise's won't be completed and buffers will be leaked.
    
    Modifications:
    - Check the peer's state in doWrite to avoid a race condition
    
    Result:
    All write operations should release, and the associated promise should be completed.

commit 41ee9148e585bda0d6d55ea5b10abe691a2d1332
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Aug 31 12:37:24 2015 -0700

    HTTP/2 InboundHttp2ToHttpAdapterTest serverChannel NPE
    
    Motivation:
    InboundHttp2ToHttpAdapterTest.bootstrapEnv does not wait for the serverConnectedChannel to be initialized before returning. Some methods rely only this behavior and throw a NPE because it may not be set.
    
    Modifications:
    - Add a CountDownLatch to ensure the serverConnectedChannel is initialized
    
    Result:
    No more NPE.

commit 0736a3bc35915ca3b9ae4a0f6362ced20d628ae0
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Aug 28 16:29:47 2015 -0700

    HTTP/2 SimplePromiseAggregator tryFailure not consistent with setFailure
    
    Motivation:
    The SimplePromiseAggregator.setFailure allows a failure to occur before newPromise is called, but tryFailure doesn't. These methods should be consistent.
    
    Modifications:
    - tryFailure should use the same logic as setFailure
    
    Result:
    Consistent failure routines.

commit 7a9a3159f9681291c0622d10592e0cd8b23dffd9
Author: Matteo Merli <mmerli@yahoo-inc.com>
Date:   Mon Aug 31 15:06:35 2015 -0700

    Added debug logging with effective value for io.netty.leakDetection.acquireAndReleaseOnly property
    
    Motivation:
    The configurable property value recently added was not logged like others properties.
    
    Modifications:
    Added debug log with effective value applied.
    
    Result:
    Consistent with other properties

commit 141d4d0101cc1b2fe6b20e134e0796eeccb6b82c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Aug 31 21:18:26 2015 +0200

    Remove extra empty line introduced by 0c835420008bb1767ea1969cd8d63adf1c80e374

commit de7f9d491345976a5c54569422d394092e5e96f8
Author: Tomas Olvecky <tomas.olvecky@gmail.com>
Date:   Mon Aug 31 00:11:39 2015 +0200

    Add TCP_USER_TIMEOUT
    
    Motivation:
    
    See #4174.
    
    Modifications:
    
    Modify transport-native-epoll to allow setting TCP_USER_TIMEOUT.
    
    Result:
    
    Hanging connections that are written into will get timeouted.
    
    Conflicts:
    	transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java

commit acf1b0f90b4ec934d27fb52ae965ce8e47f944c2
Author: James Lee <james@vcnc.co.kr>
Date:   Sat Aug 29 17:16:35 2015 +0900

    Fix code styles on MQTT codec classes

commit 9b45e9d015e12db923df39458b36fe3720bdbacd
Author: Matteo Merli <mmerli@yahoo-inc.com>
Date:   Fri Aug 28 15:05:52 2015 -0700

    Additional configuration for leak detection
    
    Motivation:
    
    Leak detector, when it detects a leak, will print the last 5 stack
    traces that touched the ByteBuf. In some cases that might not be enough
    to identify the root cause of the leak.
    Also, sometimes users might not be interested in tracing all the
    operations on the buffer, but just the ones that are affecting the
    reference count.
    
    Modifications:
    
    Added command line properties to override default values:
     * Allow to configure max number of stack traces to collect
     * Allow to only record retain/release operation on buffers
    
    Result:
    Users can increase the number of stack traces to debug buffer leaks
    with lot of retain/release operations.

commit 1252f74528fa925eb0ecc5837be332b6df36451f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Aug 29 12:29:19 2015 +0200

    [#4171] Fix flacky test introduced by previous commit.
    
    Motivation:
    
    SingleThreadEventExecutorTest was flacky.
    
    Modifications:
    
    Fixed flacky test.
    
    Result:
    
    No more test failures

commit e556958abc61f487ae2d3a7f1d813f429e9f0ccc
Author: Trustin Lee <t@motd.kr>
Date:   Sat Aug 29 11:54:01 2015 +0900

    Fix a buffer leak in BinaryMemcacheEncoderTest
    
    BinaryMemcacheEncoderTest.shouldEncodeContent() did not release one of
    the three buffers.

commit e1bf9d625762a474fbfa9fbe8dc1ca55cff6074a
Author: Trustin Lee <t@motd.kr>
Date:   Sat Aug 29 11:34:52 2015 +0900

    Fix unintended timeout in negative DNS lookup cache test
    
    Motivation:
    
    DNS lookups in DnsNameResolverTest can take longer than expected due to
    retries. The hard limit of 5 seconds is being applied to
    testNegativeTtl(), making the first uncached lookup cause a timeout.
    
    Modifications:
    
    Do not use JUnit's Timeout annotation but implement simple timeout
    mechanism that apples only to cached lookups.
    
    Result:
    
    testNegativeTtl() should not fail when an initial negative lookup
    requires a retry.

commit d9d488e477c302481bb8fa5028e5bb469eefd492
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Aug 28 21:07:29 2015 +0200

    [#2677] Remove unnessary synchronized in SpdySessionHandler
    
    Motivation:
    
    As all methods in the ChannelHandler are executed by the same thread there is no need to use synchronized.
    
    Modifications:
    
    Remove synchronized keyword.
    
    Result:
    
    No more unnessary synchronized in SpdySessionHandler.

commit 0c835420008bb1767ea1969cd8d63adf1c80e374
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Aug 28 20:37:17 2015 +0200

    Use ChannelException when ChannelConfig operation fails in epoll.
    
    Motivation:
    
    In NIO and OIO we throw a ChannelException if a ChannelConfig operation fails. We should do the same with epoll to be consistent.
    
    Modifications:
    
    Use ChannelException
    
    Result:
    
    Consistent behaviour across different transport implementations.

commit 407d5ccdcf6ea1521486213b068fe05725e7843d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Aug 28 20:49:38 2015 +0200

    Revert "Consistent naming style for enum"
    
    This reverts commit 4feafc4a5226c6307f5a9b36665d8fe8d8a05072.

commit d3dcc7f65824ef09ebc5e50a5e7ba882850a9be5
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Aug 28 09:46:35 2015 -0700

    LocalChannelWrite event sequencing issue
    
    Motivation:
    https://github.com/netty/netty/pull/4143 addressed a few ordering issues but an ordering issue still remained if the Promise for a write completes, and a listener of that promise does a write on a peer channel. The ordering was subject to how potentially 2 different executors would run a task, but it should be coordinated such that the first write is read first.
    
    Modifications:
    - Keep track of the finishPeerRead task run on the executor if necessary and ensure it completes before current channel read occurs
    
    Result:
    Ordering of events for echo type situations is preserved.

commit e37069b9479d7bd4eb09fffdf8c547d0e56a8695
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Aug 20 19:19:51 2015 -0700

    LocalChannel Event Ordering Error
    
    Motivation:
    When a LocalChannel write operation occurs, the promise associated with the write operation is marked successful when it is added to the peer's queue, but before the peer has actually received the data. If the promise callback closes the channel then a race condition exists where the close event may occur before the data is delivered. We should preserve ordering of events.
    
    Modifications:
    - LocalChannel should track when a write is in progress, and if a close operation happens make sure the peer gets all pending read operations.
    
    Result:
    LocalChannel preserves order of operations.
    Fixes https://github.com/netty/netty/issues/4118

commit 48662bf41d84a763c324d4fe3376ba0cc2d202b0
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Aug 27 13:32:21 2015 -0700

    Build fails with java 1.8_u60
    
    Motivation:
    The alpn / npn dependency versions are dependent on java version. If a java version 1.8+ is used that is not explicitly listed in the pom file then ALPN tests will fail because the java 1.7 version of alpn will be loaded by out pom file.
    
    Modifications:
    - Ensure there is a latest version to fall back up for npn 1.7+
    - Ensure there is a latest version to fall back upon from alpn 1.8+
    
    Result:
    Build can complete despite having a newer jdk which is not listed in our pom file.

commit 50cc647804c9f435274aa409f8c5561adf3707f6
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Aug 27 16:01:28 2015 -0700

    DefaultPropertyKey private member variable accessed outside scope
    
    Motivation:
    DefaultPropertyKey.index is currently private and accessed outside the class's scope.
    
    Modifications:
    - Change access level to package private
    
    Result:
    No chance of synthetic method generation for accessing this field

commit 0365927951e1a80083f384dbf3988cbfd5b393b0
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Aug 27 15:21:30 2015 -0700

    HTTP/2 InboundHttp2ToHttpAdapterTest race condition
    
    Motivation:
    The latches in InboundHttp2ToHttpAdapterTest were volatile and reset during the tests. This resulted in race conditions and sometimes the tests would be waiting on old latches that were not the same latches being counted down when messages were received.
    
    Modifications:
    - Remove volatile latches from tests
    
    Result:
    More reliable tests with less race conditions.

commit 6d473e7f390fcbdbd47169b71e9bbc10670c7362
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Aug 25 12:20:23 2015 +0200

    Allow to get details of the Thread that powers a SingleThreadEventExecutor.
    
    Motivation:
    
    for debugging and metrics reasons its sometimes useful to be able to get details of the the Thread that powers a SingleThreadEventExecutor.
    
    Modifications:
    
    - Expose ThreadProperties
    - Add unit test.
    
    Result:
    
    It's now possible to get details of the Thread that powers a SingleThreadEventExecutor.

commit 1a9ea2d349c42f7c7ccb56daea29f083ee60870e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Aug 27 11:08:27 2015 +0200

    [#4147] Allow to disable recycling
    
    Motivation:
    
    Sometimes it is useful to disable recycling completely if memory constraints are very tight.
    
    Modifications:
    
    Allow to use -Dio.netty.recycler.maxCapacity=0 to disable recycling completely.
    
    Result:
    
    It's possible to disable recycling now.

commit 8e5834f711ca6ab2ff4479cdf3c45769dd0243c3
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Aug 27 20:25:59 2015 +0200

    Upgrade to netty-tcnative-1.3.33.Fork6
    
    Motivation:
    
    A new netty-tcnative bugfix release was released.
    
    Modifications:
    
    Upgrade version.
    
    Result:
    
    Using latest netty-tcnative version

commit 97f5b43a3ef2ecdd2a3aca61c2ef6947f221dff9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Aug 27 10:29:19 2015 +0200

    Only try to obtain SO_LINGER on close if fd is still open.
    
    Motivation:
    
    When try to get SO_LINGER from a fd that is closed an Exception is thrown. We should only try to get SO_LINGER if the fd is still open otherwise an Exception is thrown that can be ignored anyway.
    
    Modifications:
    
    First check if the fd is still open before try to obtain SO_LINGER setting when get the closeExecutor. This is also the same that we do in the NIO transport.
    
    Result:
    
    No more exception when calling unsafe.close() on a channel that has a closed file descriptor.

commit d45ad9ec68e342a75897efb25238345ebdd85e9c
Author: Trustin Lee <t@motd.kr>
Date:   Fri Aug 28 21:36:38 2015 +0900

    Add a bunch of OpenNIC DNS servers for more reliable DNS tests

commit 5987cddf7c9f7560fed1e8dc7a0f2835acf3735d
Author: Sivasubramaniam S <ssivakumaraw@gmail.com>
Date:   Fri Aug 28 11:47:50 2015 +0530

    Fixed a typo [testEquansIgnoreCase() --> testEqualsIgnoreCase()]

commit 4bdd8dacb9a4bbc4097ba8fda4124bc26f67734c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Aug 26 13:35:49 2015 -0700

    Restore derived buffer index/mark updates
    
    Motivation:
    As part of the revert process in https://github.com/netty/netty/pull/4138 some index and mark updates were lost.
    
    Modifications:
    - Restore the index / mark updates made in https://github.com/netty/netty/pull/3788
    
    Result:
    Slice and Duplicate buffers index / marks are correctly initialized.

commit 56cc0bbd4c8a55144e2086cc3dd9286f8d0e374d
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Aug 21 09:28:18 2015 -0700

    OioSctpChannel iterating over selected keys
    
    Motivation:
    OioSctpChannel.doReadMessages is iterating over the selected keys, and ignoring each selected key. It is not known why this is needed and no other channel implementation does this.
    
    Modifications:
    - Stop iterating over selected keys, and just read like other channels
    
    Result:
    No unnecessary iteration in OioSctpChannel.doReadMessages.
    Fixes https://github.com/netty/netty/issues/3884

commit 5498fd12dc8dd42a1a76e3fd62d05993fcbcb3bf
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Aug 27 09:24:45 2015 -0700

    Fix and add comments to HttpUtil
    
    Motivation:
    The comments in HttpUtil need some love.
    
    Modifications
    - Update comments in HttpUtil
    
    Result:
    Comments are cleaner in HttpUtil.

commit b6a4f5de9d213cdbe32ff7772be4bcf6a1ba9094
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Aug 22 08:25:57 2015 -0700

    Refactor of HttpUtil and HttpHeaderUtil
    
    Motivation:
    There currently exists http.HttpUtil, http2.HttpUtil, and http.HttpHeaderUtil. Having 2 HttpUtil methods can be confusing and the utilty methods in the http package could be consolidated.
    
    Modifications:
    - Rename http2.HttpUtil to http2.HttpConversionUtil
    - Move http.HttpHeaderUtil methods into http.HttpUtil
    
    Result:
    Consolidated utilities whose names don't overlap.
    Fixes https://github.com/netty/netty/issues/4120

commit c8fb2a84c58d6350d7dac6bd246bd140d0e46a40
Author: Christopher Probst <christopher.probst@uni-duesseldorf.de>
Date:   Fri Aug 21 15:47:11 2015 +0200

    Fix race condition of DefaultChannelGroup by introducing a closed flag.
    
    Motivation:
    
    Doc of ChannelGroup says, that it can be used to manage server and child channels at once.
    However, in DefaultChannelGroup, there is a race condition. When a server channel accepts a child, it schedules its
    registration on an event loop, which takes some time. If the ChannelGroup, which is supposed
    to close server and child channels at once, is closed after the child channel has been scheduled
    for registration and before this registration actually happens, this child channel is not closed
    and remains connected. This could lead to connection leaks.
    
    Modifications:
    
    To fix this, the DefaultChannelGroup is changed to has a closed flag.
    This flag is set to true, just before the close() method is actually closing channels.
    The add() method checks after adding a new channel, if this flag has been set to true.
    If yes, the new channel is closed. If not, we have the guarantee, that this channel will be
    closed by the ChannelGroup, because setting the closed flag to true happens-before closing any channels.
    
    This behaviour can be activated by two new constructors. The old constructors are still there and behave like before.
    Therefore, no existing code should be affected directly.
    
    Result:
    
    If activating this feature, the DefaultChannelGroup can be used, for managing server and child channels at once.
    But this activating this feature means also, that a ChannelGroup cannot be reused after calling close().

commit eb1c97b3b99bca59971809260ad2977d5e5c886b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Aug 26 11:21:57 2015 +0200

    [#4110] Correct javadocs of MpscLinkedQueue
    
    Motivation:
    
    The javadocs are incorrect and so give false impressions of use-pattern.
    
    Modifications:
    
    - Fix javadocs of which operations are allowed from multiple threads concurrently.
    - Let isEmpty() work concurrently.
    
    Result:
    
    Correctly document usage-patterns.

commit e7f2abbd3642e665c25939b3b60fd454bc107477
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Aug 25 11:14:24 2015 +0200

    [#4127] Correctly set traffic class and so linger.
    
    Motivation:
    
    The method implementions for setSoLinger(...) and setTrafficClass(...) were swapped by mistake.
    
    Modifications:
    
    Use the correct implementation for setSoLinger(...) and setTrafficClass(...)
    
    Result:
    
    Correct behaviour when setSoLinger(...) and setTrafficClass(...) are used with the epoll transport.

commit cbc38e938a095b823abc75cb48ed8929deee5ab5
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Aug 24 16:37:02 2015 -0700

    UNSAFE.throwException null arg crashes JVM
    
    Motivation:
    It has been observed that passing a null argument to Unsafe.throwException can crash the JVM.
    
    Modifications:
    - PlatformUnsafe0.throwException should honor http://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.18 and throw a NPE
    
    Result:
    No risk of JVM crashing for null argument.
    Fixes https://github.com/netty/netty/issues/4131

commit 73f472b65d9982997efdf06c1403b73c9460e795
Author: Trustin Lee <t@motd.kr>
Date:   Thu Aug 27 12:52:29 2015 +0900

    Fix DNS lookup hang / Remove Comodo Secure DNS
    
    Motivation:
    
    - DNS lookup sometimes hang because it does not call
      tryToFinishResolve()
    - Comodo Secure DNS handles negative lookup incorrectly.
    
    Modifications:
    
    - Add missing tryToFinishResolve()
    - Remove Comodo Secure DNS servers from the list
    
    Result
    
    - DNS lookup does not hang on non-existent domain names
    - More reliable DnsNameResolverTest

commit 75efe016d6537fc989c69aadf5eced148fa23bcc
Author: Trustin Lee <t@motd.kr>
Date:   Thu Aug 27 12:25:38 2015 +0900

    Add more public DNS servers to DnsNameResolverTest
    
    so that we have more chance of passing the test when some DNS servers
    are unavailable or throtlling us.

commit 14dc5719565b1f6f10e8c1b5194d157077c7e60c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Aug 20 19:23:37 2015 -0700

    Http2ConnectionHandler channelInactive sequencing
    
    Motivation:
    ByteToMessageDecoder may call decode after channelInactive is called. This will lead to a NPE.
    
    Modifications:
    - Call super.channelInactive() before we process the event in Http2ConnectionHandler
    
    Result:
    No more NPE in decode.

commit e280251b1504548263937454db04d5cbc09f6443
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Aug 26 13:24:44 2015 -0700

    Revert "Add PooledSlicedByteBuf and PooledDuplicatedByteBuf"
    
    Motivation:
    Currently the "derived" buffer will only ever be recycled if the release call is made on the "derived" object, and the "wrapped" buffer ends up being "fully released" (aka refcount goes to 0). From my experience this is not the common use case and thus the "derived" buffers will not be recycled.
    
    Modifications:
    - revert https://github.com/netty/netty/pull/3788
    
    Result:
    Less complexity, and less code to create new objects in majority of cases.

commit 719d1dbad1078ea20ea385bd9f2c16847dcb81ae
Author: Trustin Lee <t@motd.kr>
Date:   Wed Aug 19 11:51:15 2015 +0900

    Replace infinite Iterable/Iterator with dedicated types
    
    Related: #4065
    
    Motivation:
    
    DnsNameResolver was using a special Iterable/Iterator implementation
    that yields an infinite stream of DNS server addresses. However, this
    seems to cause confusion.
    
    Modifications:
    
    - Make DnsServerAddresses an abstract class with an abstract stream()
      method that returns DnsServerAddressStream
    - Add DnsServerAddressStream that yields DNS server address infinitely
    - Remove DnsServerResolver(Group) constructors that accept only a single
      server address, which wasn't very useful in practice
    - Extract the DnsServerAddresses implementations to top level
    - DnsServerAddresses.defaultAddresses() now returns DnsServerAddresses.
      - Add DnsServerAddresses.defaultAddressList() instead
    
    Result:
    
    Less confusion and more explicitness

commit 99d6a97b4a9135a0fd746392a3384bf8cfd6d49c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Aug 24 16:13:17 2015 -0700

    HTTP to HTTP/2 translation errors (round 2)
    
    Motivation:
    Commit 0d8ce23c83ad7fa67245c721ba4d47437458ddfc failed to fix the Host header processing. Host is not a URI but is instead defined in https://tools.ietf.org/html/rfc3986#section-3.2.2 as host        = IP-literal / IPv4address / reg-name
    
    Modifications:
    - Host should not be treated as a URI.
    - We should be more explicit about required fields, and unexpected input by throwing exceptions.
    
    Result:
    Translation from HTTP/1.x to HTTP/2 is more correct.

commit 6046adef2b4fe96db975fdf1c0ef8ab1e5bcfee2
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Aug 21 11:49:46 2015 -0700

    HttpRequestEncoder consistency with master branch
    
    Motivation:
    The HttpRequestEncoder.encodeInitialLine can now be consistent with the master branch after 85c79dbbe4e6b3e74bd84b3c2eb48fab2916fb6b
    
    Modifications:
    - Use the AsciiString and ByteBufUtil.copy methods
    
    Result:
    Consistent behavior/code between 4.1 and master branches.

commit 85c79dbbe4e6b3e74bd84b3c2eb48fab2916fb6b
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Aug 19 12:42:31 2015 -0700

    HTTP to HTTP/2 tranlation errors
    
    Motivation:
    HttpUtil.toHttp2Headers is currently not translating HTTP request headers to HTTP/2 request headers correctly.  The path, scheme, and authority are tranlation process are not respecting the HTTP/2 RFC https://tools.ietf.org/html/rfc7540#section-8.1.2.3 and HTTP RFC https://tools.ietf.org/html/rfc7230#section-5.3.
    
    Modifications:
    - path, scheme, authority must be set according to rules defined in https://tools.ietf.org/html/rfc7540#section-8.1.2.3
    - HTTP/1.x URIs must be handled as defined in https://tools.ietf.org/html/rfc7230#section-5.3
    
    Result:
    More correct translation from HTTP/1.x requests to HTTP/2 requests.

commit a55df36ae4d9fdd6541987857b45a40e2ddb3a18
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Aug 21 11:15:10 2015 -0700

    ce6931e0e51096c5b6f1fc23ac939fb95ee70bc1 buffer leak in EpollSocketChannelTest
    
    Motivation:
    ce6931e0e51096c5b6f1fc23ac939fb95ee70bc1 introduced a buffer leak in EpollSocketChannelTest.
    
    Modifications:
    - Fix buffer leak
    
    Result:
    No more buffer leak.

commit ac9ae14bd949f10ad09eb4ba8c3d12ccccd4093e
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Aug 21 11:22:34 2015 -0700

    HTTP/2 SimpleChannelPromiseAggregator failure condition
    
    Motivation:
    If a SimpleChannelPromiseAggregator is failed before any new promises are generated, the failure is not propegated through to the aggregated promise.
    
    Modifications:
    - Failures should be allowed to occur even if no new promises have been generated
    
    Result:
    Failures are always allowed.

commit 1fefe9affb05c7ffe69c05551b2864e7454c76e7
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Aug 13 21:35:14 2015 +0200

    [#4087] Correctly forward bytes when remove codec and handle channelInactive / channelReadComplete(...)
    
    Motivation:
    
    We missed to correctly implement the handlerRemoved(...) / channelInactive(...) and channelReadComplete(...) method, this leaded to multiple problems:
    
     - Missed to forward bytes when the codec is removed from the pipeline
     - Missed to call decodeLast(...) once the Channel goes in active
     - No correct handling of channelReadComplete that could lead to grow of cumulation buffer.
    
    Modifications:
    
    - Correctly implement methods and forward to the internal ByteToMessageDecoder
    - Add unit test.
    
    Result:
    
    Correct behaviour

commit e59ae12b4239b08c000bb382cd1d9068fd8a8fea
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Aug 13 09:56:15 2015 +0200

    [#4079] Fix IllegalStateException when HttpContentEncoder is used and 100 Continue response is used.
    
    Motivation:
    
    Whe a 100 Continue response was written an IllegalStateException was produced as soon as the user wrote the following response. This regression was introduced by 41b0080fcc8fcace7cd62d238f6a932e79ec8bb1.
    
    Modifications:
    
    - Special handle 100 Continue responses
    - Added unit tests
    
    Result:
    
    Fixed regression.

commit 50b97689285003618dc8b7c43365eb4cda0ffc1d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Aug 17 15:23:31 2015 +0200

    [#4095] Correctly handle Upgrade responses with special handling of Hixie 76
    
    Motivation:
    
    Hixie 76 needs special handling compared to other connection upgrade responses. Our detection code of non websocket responses did actually always use the special handling that only should be used for Hixie 76 responses.
    
    Modifications:
    
    Correctly detect connection upgrade responses which are not for websockets.
    
    Result:
    
    Be able to upgrade connections for other protocols then websockets.

commit 4feafc4a5226c6307f5a9b36665d8fe8d8a05072
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Aug 19 17:27:58 2015 +0200

    Consistent naming style for enum
    
    Motivation:
    
    We should use camel-case for Enums.
    
    Modifications:
    
    Rename enums to use camel-case.
    
    Result:
    
    Consistent naming

commit 2eb680907021c92044bcc9083e598533c8862181
Author: fei wong reed <feiwreed@gmail.com>
Date:   Wed Jul 29 15:22:13 2015 +0100

    Correct OSGi manifests in source jars
    
    Related: #3886
    
    Motivation:
    
    We were including OSGi manifests in sources/javadoc JARs, and OSGi
    container treats them as correct dependencies when resolving from OBR
    repository, which is incorrect. Runtime fails with non-descriptive
    ClassNotFoundException as a result.
    
    Modifications:
    
    - Do not include the OSGi manifests in sources/javadoc JARs
    - Include Eclipse-related manifest entries in sources/javadoc JARs
    
    Result:
    
    Better OSGi compatibility

commit 08477eaf034dfa5e54e3d5b5e714f523d946874b
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Aug 18 10:36:16 2015 -0700

    HTTP/2 Graceful Shutdown Timeout
    
    Motivation:
    If any streams are still active the graceful shutdown code will wait until they are all closed before the connection is closed. In some situations this event may never occur, and thus a timeout should be supported so the socket can be closed even if all streams haven't been closed.
    
    Modifications:
    - Add a configurable timeout for when the graceful shutdown process is attempted.
    - Update unit tests to be faster, and use this graceful timeout
    
    Result:
    Local endpoint can protect from local or remote issues which prevent the channel from being closed during the graceful shutdown process.

commit ce6931e0e51096c5b6f1fc23ac939fb95ee70bc1
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Aug 14 16:36:48 2015 -0700

    EPOLL exception processing feedback loop
    
    Motivation:
    Commit cf171ff52555b9e984a3b9103287f6b897dc8626 changed the way read operations were done. This change introduced a feedback loop between fireException and epollInReady.
    
    Modifications:
    - All EPOLL*Channel* classes should not call fireException and also continue to read. Instead a read operation should be executed on the eventloop (if the channel's input is not closed, and other conditions are satisfied)
    
    Result:
    Exception processing and channelRead will not be in a feedback loop.
    Fixes https://github.com/netty/netty/issues/4091

commit 559f1b110aeb0d586308d9ad8fb01f78170dd6e2
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Aug 19 13:54:39 2015 -0700

    HttpScheme class
    
    Motivation:
    The HTTP schemes defined by https://tools.ietf.org/html/rfc7230 don't have a common representation in Netty.
    
    Modifications:
    - Add a class to represent HttpScheme
    
    Result:
    The HTTP Scheme is now defined in 1 common location.

commit c2d5a531046c6cd79c5447180b79f4176a3421e5
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Aug 19 14:00:58 2015 -0700

    HttpUtil class for Http specific utilities
    
    Motivation:
    The HTTP specification defines specific request-targets in https://tools.ietf.org/html/rfc7230#section-5.3. Netty does not have a way to distinguish between these differnt types, and there is currently no obvious location where these types of methods would live.
    
    Modifications:
    - Add methods to distinguish request-targets as defined in https://tools.ietf.org/html/rfc7230#section-5.3
    
    Result:
    Common utitlity methods exist to inpsect request-targets.

commit 9bc322a6a834c00b138d7bb231c29a1b259e8d40
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Aug 19 13:52:08 2015 -0700

    StringUtil not closing Formatter
    
    Motivation:
    The StringUtil class creates a Formatter object, but does not close it. There are also a 2 utility methods which would be generally useful.
    
    Modifications:
    - Close the Formatter
    - Add length and isNullOrEmpty
    
    Result:
    No more resource leaks. Additional utility methods.

commit 34dfa7a2d8679b874ad624ecd735e448eda4f258
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Aug 18 10:57:32 2015 -0700

    DefaultHttp2ConnectionEncoder private constructors on inner classes
    
    Motivation:
    DefaultHttp2ConnectionEncoder.FlowControlledHeaders and DefaultHttp2ConnectionEncoder.FlowControlledData have private constructors which may result in static factory methods being generated to construct instances of these classes.
    
    Modifications:
    - Make constructors public for these private classes
    
    Result:
    Accessor for inner class constructor more correct and no possibiliy of synthetic method generation.

commit a45e844395ae82b9c69cbb6e6bfd54d1564caa8d
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Aug 17 22:40:19 2015 -0700

    HttpResponseStatus reasonPhrase equals usage
    
    Motivation:
    HttpResponseStatus.reasonPhrase returns an AsciiString, but was compared using equals to a String. Other usages of the reasonPhrase also use the toString() method when not necessary.
    
    Modifications:
    - Use the contentEquals method
    
    Result:
    Correct comparison, and no toString() when not needed.

commit 052a171a522d2d3edb80725b00a049eebd4bede3
Author: Vineet Garg <grgvineet@gmail.com>
Date:   Wed Aug 19 18:43:17 2015 +0530

    Fixes infinite loop during handshake in SslHandler in Android devices
    
    Motivation:
    
    On Android devices with version less than Lollipop, HarmonyJSSE is used for SSL. After completion of handshake, handshake status is NOT_HANDSHAKING instead of FINISHED. Also encrypting empty buffer after handshake should cause underflow exception and produce 0 bytes, but here it happily encrypts it causing for loop to never break
    
    Modification:
    
    Since 0 bytes should only be consumed in handshake process. Added a condition to break loop when 0 bytes are consumed and handshake status is NOT_HANDSHAKING
    
    Result:
    
    Sucessful ssl handshake on Android devices, no infinite loop now

commit ad0b7ca56db391248c95ff2c0e24793cc3a4d9d5
Author: Trustin Lee <t@motd.kr>
Date:   Tue Aug 18 18:44:51 2015 +0900

    Add a test case for DNS resolver cache for negative loopups
    
    Related issue: #4065

commit 1856ab3a3516435f5481ff9a3a06233b849b46e7
Author: Trustin Lee <t@motd.kr>
Date:   Tue Aug 18 18:23:59 2015 +0900

    Make DnsNameResolverTest.testQueryMx() more robust
    
    Motivation:
    
    DNS servers seem to reply with ServFail(2) response code when it is
    busy.
    
    Modifications:
    
    - Retry when response code is ServFail instead of failing the test
    - Try all DNS servers instead of retrying twice only
    
    Result:
    
    testQueryMx() is less likely to fail due to public DNS server problems

commit fdfe3149ba3f68678fa7f73c574c7c61aa33fa2f
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jul 12 19:34:05 2015 +0900

    Provide more control over DnsNameResolver.query() / Add NameResolver.resolveAll()
    
    Related issues:
    - #3971
    - #3973
    - #3976
    - #4035
    
    Motivation:
    
    1. Previously, DnsNameResolver.query() retried the request query by its
    own. It prevents a user from deciding when to retry or stop. It is also
    impossible to get the response object whose code is not NOERROR.
    
    2. NameResolver does not have an operation that resolves a host name
    into multiple addresses, like InetAddress.getAllByName()
    
    Modifications:
    
    - Changes related with DnsNameResolver.query()
      - Make query() not retry
        - Move the retry logic to DnsNameResolver.resolve() instead.
      - Make query() fail the promise only when I/O error occurred or it
        failed to get a response
      - Add DnsNameResolverException and use it when query() fails so that
        the resolver can give more information about the failure
      - query() does not cache anymore.
    
    - Changes related with NameResolver.resolveAll()
      - Add NameResolver.resolveAll()
      - Add SimpleNameResolver.doResolveAll()
    
    - Changes related with DnsNameResolver.resolve() and resolveAll()
      - Make DnsNameResolveContext abstract so that DnsNameResolver can
        decide to get single or multiple addresses from it
      - Re-implement cache so that the cache works for resolve() and
        resolveAll()
      - Add 'traceEnabled' property to enable/disable trace information
    
    - Miscellaneous changes
      - Use ObjectUtil.checkNotNull() wherever possible
      - Add InternetProtocolFamily.addressType() to remove repetitive
        switch-case blocks in DnsNameResolver(Context)
      - Do not raise an exception when decoding a truncated DNS response
    
    Result:
    
    - Full control over query()
    - A user can now retrieve all addresses via (Dns)NameResolver.resolveAll()
    - DNS cache works only for resolve() and resolveAll() now.

commit fd9ca8bbb3bb5478aee79e633374abfbc9b6d6c3
Author: Trustin Lee <t@motd.kr>
Date:   Tue Aug 18 12:42:01 2015 +0900

    Fix compilation errors

commit 08b73bf9145d60d862b9faf11b95bee60ee061bd
Author: Ivan Bahdanau <ibahdanau@fitbit.com>
Date:   Wed Aug 12 10:22:03 2015 -0700

    Unhealthy channel is not offered back to the pool.
    
    Motivation:
    When releasing unhealthy channel back to a pool we don't have to offer it since on acquire it will be discarded anyways.
     Also checking healthiness at release is a good idea so we don't end up having tons of unhealthy channels in the pool(unless they became unhealthy after being offered)
    
    Modifications:
    private SimpleChannelPool.offerIfHealthy() method added that is called from SimpleChannelPool.doReleaseChannel(). SimpleChannelPool.offerIfHealthy() offers channel back to pool only if channel is healthy.
    Otherwise it throws setFailure exception to the promise.
    
     Result:
    The pool is now much cleaner and not spammed with unhealthy channels.
    
    Added ability to choose if channel health has to be validated on release by passing boolean flag.
    
    Motivation:
    Depending on performance preferences and individual use cases sometimes we would like to be able force health check of a channel at release time and do not offer it back to the pool. Other times we would want to just release channel and offer it back to the pool and check health only when we try to acquire that channel from the pool. See more details here: https://github.com/netty/netty/issues/4077#issuecomment-130461684
    
    Modifications:
    Future<Void> release(Channel channel, Promise<Void> promise, boolean offerHealthyOnly);
    The offerHealthyOnly boolean flag allows developers to choose whether to do channel validation before offering it back to pool or not.
    Appropriate modifications made to hierarchy of implementations of ChannelPool. offerHealthyOnly=true will force channel health to be checked before offering back to pool. offerHealthyOnly=false  will ignore channel health check and will just try just offer it back to the pool
     offerHealthyOnly=true by default.
    
    Result:
    Channel health check before offer back to pool is controlled by a flag now.
    
    Code changed to satisfy checkstyle requirements.
    
    Motivation:
    Code needs to satisfy checkstyle requirements.
    
    Modifications:
     SimpleChannelPool.java:279 line split to be less then 120 characters.
     SimpleChannelPool.java:280:31 space added after '{'
     SimpleChannelPool.java:282:17 space added after '{'
     SimpleChannelPoolTest.java:198 - extra white space line removed.
    
    Result:
    Code satisfies checkstyle requirements.
    
     offerHealthyOnly is passed as a constructor parameter now.
    
    Motivation:
    Instead of passing offerHealthyOnly as a method parameter it is better to pass it in as SimpleChannelPool or FixedChannelPool constructor.
    
    Modifications:
     Redundant release method that takes offerHealthyOnly removed from ChannelPool.
     offerHealthyOnly parameter added to constructor for FixedChannelPool and SimpleChannelPool.
    
    Result:
    SimpleChannelPool and FixedChannelPool are now take offerHealthyOnly as a constructor parameter. Default behavior is: offerHealthyOnly=true.
    
    Code changed to satisfy checkstyle requirements.
    
    Motivation:
    Code needs to satisfy checkstyle requirements.
    
    Modifications:
     SimpleChannelPool.java:84: line made to be no longer then 120 characters.
     SimpleChannelPool.java:237: extra white space line removed.
    
    Result:
    Code satisfies checkstyle requirements.
    
    Tests do not need to be too  copled to the code. Exception message should not be validated
    
    Motivation:
    We don't need our tests to be too coupled to the code. Exception type validation in tests is just good enough.
    
    Modifications:
    Exception validation message removed from SimpleChannelPoolTest.testUnhealthyChannelIsNotOffered() test.
    
    Result:
    The SimpleChannelPoolTest test is less coupled to the code now.
    
    Stack trace set to empty for UNHEALTHY_NON_OFFERED_TO_POOL.
    
    Motivation:
    We don't need stack trace for UNHEALTHY_NON_OFFERED_TO_POOL.
    
    Modifications:
    Added  UNHEALTHY_NON_OFFERED_TO_POOL.setStackTrace(EmptyArrays.EMPTY_STACK_TRACE) to static init block.
    
    Result:
    UNHEALTHY_NON_OFFERED_TO_POOL's stack trace set to empty.
    
    Minor code re-factorings.
    
    Motivation:
    For better code readability we need to apply several minor code re-factorings.
    
    Modifications:
    javadocs true -> {@code true}
    offerHealthyOnly variable name changed to releaseHeathCheck
    <p/> -> <p> in javadocs
    offerHealthyOnly removed from doReleaseChannel as it not needed there.
    
    Result:
    Code quality is improved.
    
    Code changed to satisfy checkstyle requirements.
    
    Motivation:
    Code needs to satisfy checkstyle requirements.
    
    Modifications:
    SimpleChannelPool.java:87: line made to be no longer then 120 characters.
    
    Result:
    Code satisfies checkstyle requirements.
    
    Pull request needs to contain only necessary changes
    
    Motivation:
    The pull request should not contain unnecessary changes that are not needed as part of required functionality of pull request.
    
    Modifications:
    private void doReleaseChannel(final Channel channel, final Promise<Void> promise) - >  private void doReleaseChannel(Channel channel, Promise<Void> promise)
    
    Result:
    Pull request contains less unnecessary modifications.

commit beab89bec522a28a714c7661e240f35e1211b338
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Aug 17 10:12:10 2015 -0700

    Remove Erroneous imports
    
    Motivation:
    As part of merging / cherry-picking there were some Erroneous imports added to AbstractMemcacheObjectAggregator.
    
    Modifications:
    - Remove Imports from AbstractMemcacheObjectAggregator.
    
    Result:
    Code now builds.

commit a7135e86771f330e28fe11472a87f8e57632e4a1
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Aug 3 15:09:44 2015 -0700

    HttpObjectAggregator doesn't check content-length header
    
    Motivation:
    The HttpObjectAggregator always responds with a 100-continue response. It should check the Content-Length header to see if the content length is OK, and if not responds with a 417.
    
    Modifications:
    - HttpObjectAggregator checks the Content-Length header in the case of a 100-continue.
    
    Result:
    HttpObjectAggregator responds with 417 if content is known to be too big.

commit e796c99b23fa6113582e69af74088e5cc5f7e242
Author: Brendt Lucas <brendt@idnet.com>
Date:   Sun Aug 16 12:01:30 2015 +0100

    Add unit tests for HTTP and SPDY headers
    
    Motivation:
    
    When attempting to retrieve a SPDY header using an AsciiString key, if the header was inserted using a String based key, the lookup would fail. Similarly, the lookup would fail if the header was inserted with an AsciiString key, and retrieved using a String key. This has been fixed with the header simplification commit (1a43923aa89769ae3711e0d9451abfdee4a4327c).
    
    Extra unit tests have been added to protect against this issue occurring in the future.  The tests check that a header added using String or AsciiString can be retrieved using AsciiString or String respectively.
    
    Modifications:
    
    Added more unit tests
    
    Result:
    
    Protect against issue #4053 happening again.

commit ba6ce5449ee852b782dde9a11933f6a09b123e22
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Aug 12 19:05:37 2015 -0700

    Headers Performance Boost and Interface Simplification
    
    Motivation:
    A degradation in performance has been observed from the 4.0 branch as documented in https://github.com/netty/netty/issues/3962.
    
    Modifications:
    - Simplify Headers class hierarchy.
    - Restore the DefaultHeaders to be based upon DefaultHttpHeaders from 4.0.
    - Make various other modifications that are causing hot spots.
    
    Result:
    Performance is now on par with 4.0.

commit e6ca9882a107c34cf6358c8d7a68561025f06016
Author: Jonas Konrad <me@yawk.at>
Date:   Sat Aug 15 23:19:03 2015 +0200

    Add support for abstract domain sockets
    
    Motivation:
    
    Because of java custom UTF encoding, it was previously impossible to use
    nul-bytes in domain socket names, which is required for abstract domain
    sockets.
    
    Modifications:
    
    - Pass the encoded string byte array to the native code
    - Modify native code accordingly to work with nul-bytes in the the
    array.
    - Move the string encoding to UTF-8 in java code.
    
    Result:
    
    Unix domain socket addresses will work properly if they contain nul-
    bytes. Address encoding for these addresses changes from UTF-8-like to
    real UTF-8.

commit ea18f73a882f4cc6322fba05a73f06b6b9bbe134
Author: Trustin Lee <t@motd.kr>
Date:   Sun Aug 16 19:24:15 2015 +0900

    Upgrade jacoco-maven-plugin to the latest version

commit 75af257a62ab328edeeeed59b636d85910ba934c
Author: Trustin Lee <t@motd.kr>
Date:   Sat Aug 15 09:05:13 2015 +0900

    Ignore EpollReuseAddrTest.testMultipleBindDatagramChannel
    
    Motivation:
    
    It keeps failing on some of our CI machines for an unknown reason.
    
    Modifications:
    
    Ignore it temporarily
    
    Result:
    
    Less noise in CI result

commit fd27c403d363f5c5c481e558b07766a9407f9e35
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jul 27 12:15:23 2015 +0200

    [#4010] Correctly handle whitespaces in HttpPostMultipartRequestDecoder
    
    Motivation:
    
    Due not using a cast we insert 32 and not a whitespace into the String.
    
    Modifications:
    
    Correclty cast to char.
    
    Result:
    
    Correct handling of whitespaces.

commit d2683c391149332733017aed2aece6ff6de7c4f6
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Aug 3 17:58:37 2015 -0700

    EPOLLRDHUP infinite loop
    
    Motivation:
    If  is enabled and a channel is half closed it is possible for the EPOLL event loop to get into an infinite loop by continuously being woken up on the EPOLLRDHUP event.
    
    Modifications:
    - Ensure that the EPOLLRDHUP event is unregistered for to prevent infinite loop.
    
    Result:
    1 less infinite loop.

commit c65ef4fed77dff6c9685b281d249d0856f1a9fe4
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Aug 5 13:15:38 2015 -0700

    Update npn and alpn dependencies
    
    Motivation:
    New versions of alpn-boot and npn-boot have been released.
    
    Modifications:
    - Update pom to pull in new versions.
    
    Result:
    Dependencies more up to date.

commit a4261d481c5f4d3d00eced3684494bc84874756e
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Aug 5 08:23:35 2015 -0700

    Eclipse SPDY docs moved
    
    Motivation:
    We provide a hyperlink to the docs for SPDY if the runtime is not setup correctly to help users. These docs have moved.
    
    Modifications:
    - Update the hyperlink to point to the new doc location.
    
    Result:
    Users are able to find docs more easily.

commit 2d4bef9b186ca556ae2be218c0123bd9acb31e57
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Aug 3 12:46:29 2015 -0700

    Http2ConnectionHandler not flushing on writabilityChange
    
    Motivation:
    The Http2ConnectionHandler was writing pending bytes, but was not flushing. This may result in deadlock.
    
    Modifications:
    - Http2ConnectionHandler must writePendingBytes and also flush.
    
    Result:
    Data is now flushed after writabilityChange writes more data to underlying layers.

commit deda3f5b656c19eb42bc063439ba2431ed0477fc
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Jun 20 22:46:24 2015 +0200

    Add GCC optimization flag when compile native transport
    
    Motivation:
    
    We not set any optimization flag when compile native transport
    
    Modification:
    
    Add -O3 to CFLAGS to have GCC do optimizations
    
    Result:
    
    Ship optimized native code

commit cfd7b391c8b49ae19ce25d17c18a53cb1c857128
Author: Trustin Lee <t@motd.kr>
Date:   Thu Aug 13 09:52:46 2015 +0900

    Add a property to disable osgi testsuite run

commit 5ac84760c4f5d4f09a61fb5cd2cac7d95a782f9f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jul 15 14:13:47 2015 +0200

    Allow to create SslContext from existing PrivateKey / X509Certificate
    
    Motivation:
    
    Sometimes the user already has a PrivateKey / X509Certificate which should be used to create a new SslContext. At the moment we only allow to construct it via Files.
    
    Modifications:
    
    - Add new methods to the SslContextBuilder to allow creating a SslContext from PrivateKey / X509Certificate
    - Mark all public constructors of *SslContext as @Deprecated, the user should use SslContextBuilder
    - Update tests to us SslContextBuilder.
    
    Result:
    
    Creating of SslContext is possible with PrivateKay/X509Certificate

commit 9d417c1626ecc95abda14d2a48fc54edb26e302e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Aug 12 14:25:45 2015 +0200

    Fixing compile error, introduce by 5d011b88958f867e99a94bdfae334dfb8ce1697c

commit 5d011b88958f867e99a94bdfae334dfb8ce1697c
Author: Ivan Bahdanau <ibahdanau@fitbit.com>
Date:   Tue Aug 11 19:55:54 2015 -0700

    Improve the logic around acquire channel function is improved.
    
    Motivation:
    The acquire channel function resulted in calling itself several times in case when channel polled from the pool queue was unhealthy, which resulted FixedChannelPool to be called several times which in it's turn caused FixedChannelPool.acquire() to be called and resulted into acquireChannelCount to be unnecessary increased.
    Example use case:
    1) Create FixedChannelPool instance with one channel in the pool: new FixedChannelPool(cb, handler, 1)
    2) Acquire channel A from the pool
    3) close the channel A
    4) Return it back to the pool
    5) Acquire channel from the same pool again
    Expected result:
    new channel created and acquired, channel A that has been closed discarded and removed from the pool from being unhealthy
    Actual result:
    Channel A had been removed from the pool, how ever the new channel had never be acquired, instead the request to acquire had been added to the pending queue in FixedChannelPool and the acquireChannelCount is increased by one. The reason is that at the time when SimpleChannelPool figured out that the channel was unhealthy called FixedChannelPool.acquire to try to acquire new channel, how ever the request was added to the pendingTakQueue because by the time when FixedChannelPool.acquire was called, the acquireChannelCount was already "1" so new channel ould not be created cause of maxChannelsLimit=1.
    
    Modifications:
    The suggested approach modifies the SimpleChannelPool in a way so that when channel detected to be unhealthy it calls private method SimpleChannelPool.acquireHealthyFromPoolOrNew() which guarantees that SimpleChannelPool actually either finds a healthy channel in the pool and returns it or causes the promise.cause() in case when new channel was failed to be created.
    
     Result:
    The  ```acquiredChannelCount``` is now calculated correctly as a result of SimpleChannelPool.acquire() of not being recursive on overridable acquire method.

commit 0be53f296f8c0342fb9f5c4dd69cd2f3f5bd6ddf
Author: Matteo Merli <mmerli@yahoo-inc.com>
Date:   Fri Aug 7 22:37:51 2015 -0700

    MemoryRegionCache$Entry objects are not recycled
    
    Motivation:
    
    Even though MemoryRegionCache$Entry instances are allocated through a recycler they are not properly recycled,
    leaving a lot of instances to be GCed along with Recycler$DefaultHandle objects.
    Fixes #4071
    
    Modification:
    
    Recycle Entry when done using it.
    
    Result:
    
    Less GCed objects.

commit cf171ff52555b9e984a3b9103287f6b897dc8626
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Jun 4 18:36:55 2015 -0700

    maxBytesPerRead channel configuration
    
    Motiviation:
    The current read loops don't fascilitate reading a maximum amount of bytes. This capability is useful to have more fine grain control over how much data is injested.
    
    Modifications:
    - Add a setMaxBytesPerRead(int) and getMaxBytesPerRead() to ChannelConfig
    - Add a setMaxBytesPerIndividualRead(int) and getMaxBytesPerIndividualRead to ChannelConfig
    - Add methods to RecvByteBufAllocator so that a pluggable scheme can be used to control the behavior of the read loop.
    - Modify read loop for all transport types to respect the new RecvByteBufAllocator API
    
    Result:
    The ability to control how many bytes are read for each read operation/loop, and a more extensible read loop.

commit b714297a44ced34643fa60ca854f1880d02ba649
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jul 21 12:41:03 2015 -0700

    HttpObjectDecoder half close behavior
    
    Motivation:
    In the event an HTTP message does not include either a content-length or a transfer-encoding header [RFC 7230](https://tools.ietf.org/html/rfc7230#section-3.3.3) states the behavior must be treated differently for requests and responses. If the channel is half closed then the HttpObjectDecoder is not invoking decodeLast and thus not checking if messages should be sent up the pipeline.
    
    Modifications:
    - Add comments to clarify regular decode default case.
    - Handle the ChannelInputShutdownEvent in the HttpObjectDecoder and evaluate if messages need to be generated.
    
    Result:
    Messages are generated on half closed, and comments clarify existing logic.

commit 6fd0a0c55f1cf721c88bb0df957b2fa50215724c
Author: Jakob Buchgraber <buchgr@google.com>
Date:   Tue Apr 14 21:14:00 2015 -0700

    Faster and more memory efficient headers for HTTP, HTTP/2, STOMP and SPYD. Fixes #3600
    
    Motivation:
    
    We noticed that the headers implementation in Netty for HTTP/2 uses quite a lot of memory
    and that also at least the performance of randomly accessing a header is quite poor. The main
    concern however was memory usage, as profiling has shown that a DefaultHttp2Headers
    not only use a lot of memory it also wastes a lot due to the underlying hashmaps having
    to be resized potentially several times as new headers are being inserted.
    
    This is tracked as issue #3600.
    
    Modifications:
    We redesigned the DefaultHeaders to simply take a Map object in its constructor and
    reimplemented the class using only the Map primitives. That way the implementation
    is very concise and hopefully easy to understand and it allows each concrete headers
    implementation to provide its own map or to even use a different headers implementation
    for processing requests and writing responses i.e. incoming headers need to provide
    fast random access while outgoing headers need fast insertion and fast iteration. The
    new implementation can support this with hardly any code changes. It also comes
    with the advantage that if the Netty project decides to add a third party collections library
    as a dependency, one can simply plug in one of those very fast and memory efficient map
    implementations and get faster and smaller headers for free.
    
    For now, we are using the JDK's TreeMap for HTTP and HTTP/2 default headers.
    
    Result:
    
    - Significantly fewer lines of code in the implementation. While the total commit is still
      roughly 400 lines less, the actual implementation is a lot less. I just added some more
      tests and microbenchmarks.
    
    - Overall performance is up. The current implementation should be significantly faster
      for insertion and retrieval. However, it is slower when it comes to iteration. There is simply
      no way a TreeMap can have the same iteration performance as a linked list (as used in the
      current headers implementation). That's totally fine though, because when looking at the
      benchmark results @ejona86 pointed out that the performance of the headers is completely
      dominated by insertion, that is insertion is so significantly faster in the new implementation
      that it does make up for several times the iteration speed. You can't iterate what you haven't
      inserted. I am demonstrating that in this spreadsheet [1]. (Actually, iteration performance is
      only down for HTTP, it's significantly improved for HTTP/2).
    
    - Memory is down. The implementation with TreeMap uses on avg ~30% less memory. It also does not
      produce any garbage while being resized. In load tests for GRPC we have seen a memory reduction
      of up to 1.2KB per RPC. I summarized the memory improvements in this spreadsheet [1]. The data
      was generated by [2] using JOL.
    
    - While it was my original intend to only improve the memory usage for HTTP/2, it should be similarly
      improved for HTTP, SPDY and STOMP as they all share a common implementation.
    
    [1] https://docs.google.com/spreadsheets/d/1ck3RQklyzEcCLlyJoqDXPCWRGVUuS-ArZf0etSXLVDQ/edit#gid=0
    [2] https://gist.github.com/buchgr/4458a8bdb51dd58c82b4

commit 7bd64728041613336a99a67127d8db4883c50a75
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Jul 20 17:03:03 2015 -0700

    HTTP/2 DataCompressionHttp2Test test complete race condition
    
    Motivation:
    The DataCompressionHttp2Test was exiting prematurely leading to unit test failures.
    
    Modifications:
    - Fix the race condition so the test does not evaluate final conditions until all expected events occur
    
    Result:
    Unit test no longer fails

commit 209aa28573d06e538272d67288f8c4a8450fe216
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jul 29 09:32:59 2015 -0700

    SPDY codec must check headers are lower case
    
    Motivation:
    The SPDY spec requires that all header names be lowercase (see https://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft3-1#TOC-3.2-HTTP-Request-Response). The SPDY codec header name validator does not enforce this requirement.
    
    Modifications:
    - SpdyCodecUtil.validateHeaderName should check for upper case characters and throw an error if any are found.
    
    Result:
    SPDY codec header validation enforces specification requirement.

commit f65717be827cc8d141daafc96cc6b8e11028aa92
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jul 27 13:48:07 2015 +0200

    Add support for IP_FREEBIND when using native transport
    
    Motivation:
    
    IP_FREEBIND allows to bind to addresses without the address up yet or even the interface configured yet.
    
    Modifications:
    
    Add support for IP_FREEBIND.
    
    Result:
    
    It's now possible to use IP_FREEBIND when using the native epoll transport.

commit 5ed89648c3bcc201ee9326e0d29ad6ba285dacd2
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Jul 30 10:19:17 2015 -0700

    MqttEncoder build failure
    
    Motivation:
    The MqttEncoder was failing to build because it was using a method that doesn't exist.
    
    Modifications:
    Change sessionPresent() to isSessionPresent().
    
    Result:
    MqttEnccoder is now able to build.

commit 9236a8d156b2ecef2f544fe45df44a2620b37951
Author: Ning Sun <sunng@about.me>
Date:   Thu Jul 30 18:37:01 2015 +0800

    (fix) typo

commit a91e64850505938cfe3a2079e1ac2c247df6532b
Author: Francisco A. Lozano <flozano@gmail.com>
Date:   Wed Jul 29 14:00:18 2015 +0200

    [#4041] Added sessionPresent to MqttConnAckVariableHeader
    
    Motivation:
    As per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718033
    
    Modification:
    
    Add isSessionPresent() method and constructor to set it
    
    Result:
    Be able to use it with mqtt 3.1.1

commit a7713069a13b47efbf197a1c7416500c45d14d7c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Jul 25 08:03:45 2015 -0700

    HttpObjectDecoder performance improvements
    
    Motivation:
    The HttpObjectDecoder is on the hot code path for the http codec. There are a few hot methods which can be modified to improve performance.
    
    Modifications:
    - Modify AppendableCharSequence to provide unsafe methods which don't need to re-check bounds for every call.
    - Update HttpObjectDecoder methods to take advantage of new AppendableCharSequence methods.
    
    Result:
    Peformance boost for decoding http objects.

commit 083dbe5c5939af0602af9bd01732faaac2191b49
Author: fratboy <fratboy77@gmail.com>
Date:   Wed Jul 29 02:49:28 2015 +0900

    Correctly count acquired channels when timeout occurs in FixedChannelPool
    
    Motivation:
    
    We don't decrease acquired channel count in FixedChannelPool when timeout occurs by AcquireTimeoutAction.NEW and eventually fails.
    
    Modifications:
    
    Set AcquireTask.acquired=true to call decrementAndRunTaskQueue when timeout action fails.
    
    Result:
    
    Acquired channel count decreases correctly.

commit b33c7b12a46d7ca5432170e292bcceba0b76d390
Author: tczerwinski <tczerwinski@77P6N12.SIIPOLSKA.PL>
Date:   Wed Jul 29 13:16:53 2015 +0200

    XmlFrameDecoder is corrupt
    
    Motivation:
    
    Two problems:
    1. Decoder assumption that as soon as it finds </ element it can decrement opened xml brackets counter. It can lead to bugs when closing bracket is not in byteBuf yet.
    2. Not proper handling of more than two root elements in XML document. First element will be processed properly, second one not. It is caused by assumption that byteBuf readerIndex is 0 at the begging of decoding.
    
    Modifications:
    
    Both problems were resolved by fixes:
    1. decrement opened brackets count only if </ > enclosing bracket is found
    2. consider readerIndex higher than 0 when counting output frame length
    
    Result:
    
    Both problems were resolved

commit 623d9d7202019a56457ffd02524c70ebc86958f2
Author: Daniel Darabos <darabos.daniel@gmail.com>
Date:   Wed Jul 29 18:27:40 2015 +0200

    Fix typo in warning message.

commit 94f65ed7ff214de3fc9680d80a5ec2d2fe2aaf48
Author: nmittler <nathanmittler@google.com>
Date:   Tue Jul 28 09:43:50 2015 -0700

    Use standard syntax for logging HTTP/2 stream ID.
    
    Motivation:
    
    When looking through the logs for entries pertaining to a specific stream, it's difficult because header entries use the syntax "streamId:<id>" but all other entries use "streamId=<id>". We should make all of the entries consistent.
    
    Modifications:
    
    Changed header entries to use "streamId=<id>" to match the other entries.
    
    Result:
    
    Easier HTTP/2 log navigation.

commit 296649cfc8a7af334db7cb18606da37dbc45c3dd
Author: nmittler <nathanmittler@google.com>
Date:   Mon Jul 13 14:53:20 2015 -0700

    Make PrimitiveCollections generated for all primitive maps.
    
    Motivation:
    
    We should support XXXCollections methods for all primitive map types.
    
    Modifications:
    
    Removed PrimitiveCollections and added a template for XXXCollections.
    
    Result:
    
    Fixes #4001

commit 93fc3c6e45cda454ba74e6430a8b7b22bdf1ee15
Author: nmittler <nathanmittler@google.com>
Date:   Mon Jul 13 14:53:20 2015 -0700

    Make IntObjectHashMap extend Map
    
    Motivation:
    
    It would be useful to support the Java `Map` interface in our primitive maps.
    
    Modifications:
    
    Renamed current methods to "pXXX", where p is short for "primitive". Made the template for all primitive maps extend the appropriate Map interface.
    
    Result:
    
    Fixes #3970

commit ecc01da9ddf18790ac96019710ccaed50133607c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jul 20 15:14:17 2015 +0200

    [#3968] Disallow pass-through of non ByteBufs in SslHandler
    
    Motivation:
    
    We pass-through non ByteBuf when SslHandler.write(...) is called which can lead to have unencrypted data to be send (like for example if a FileRegion is written).
    
    Modifications:
    
    - Fail ChannelPromise with UnsupportedMessageException if a non ByteBuf is written.
    
    Result:
    
    Only allow ByteBuf to be written when using SslHandler.

commit c3ab557f852fab44eb25c1e180f5183a2c938091
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jul 16 21:29:04 2015 +0200

    [#3987] Remove RC4 from default ciphers.
    
    Motivation:
    
    Remove RC4 from default ciphers as it is not known as secure anymore.
    
    Modifications:
    
    Remove RC4
    
    Result:
    
    Not use an insecure cipher as default.

commit bd42987143958b4a5232f76229b914249a51cddf
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jul 20 14:48:27 2015 +0200

    [#3988] Correctly count acquired channels in FixedChannelPool
    
    Motivation:
    
    We missed to correctly count acquired channels in FixedChannelPool which could produce an assert error.
    
    Modifications:
    
    Only try to decrement acquired count if the channel was really acuired.
    
    Result:
    
    No more assert error possible.

commit 57d28dd42178b35194037a4ded7f26e20e676c62
Author: Brendt Lucas <brendt@idnet.com>
Date:   Sat Jul 11 12:09:45 2015 +0100

    Support conversion of HttpMessage and HttpContent to HTTP/2 Frames
    
    Motivation:
    
    HttpToHttp2ConnectionHandler only converts FullHttpMessage to HTTP/2 Frames. This does not support other use cases such as adding a HttpContentCompressor to the pipeline, which writes HttpMessage and HttpContent.
    
    Additionally HttpToHttp2ConnectionHandler ignores converting and sending HTTP trailing headers, which is a bug as the HTTP/2 spec states that they should be sent.
    
    Modifications:
    
    Update HttpToHttp2ConnectionHandler to support converting HttpMessage and HttpContent to HTTP/2 Frames.
    Additionally, include an extra call to writeHeaders if the message includes trailing headers
    
    Result:
    
    One can now write HttpMessage and HttpContent (http chunking) down the pipeline and they will be converted to HTTP/2 Frames.  If any trailing headers exist, they will be converted and sent as well.

commit 1a5dac175ef16feb58f41e595817e1b34d9f01b5
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jul 16 11:19:42 2015 +0200

    Correctly register for EPOLLRDHUP when construct EpollSocketChannel from FileDescriptor
    
    Motivation:
    
    We missed to register for EPOLLRDHUP events when construct the EpollSocketChannel from an existing FileDescriptor. This could cause to miss connection-resets.
    
    Modifications:
    
    Add Native.EPOLLRDHUP to the events we are interested in.
    
    Result:
    
    Connection-resets are detected correctly.

commit 0d73907c581e42c758c4c8286f87ba00b106188a
Author: nmittler <nathanmittler@google.com>
Date:   Mon Jul 20 12:44:52 2015 -0700

    Fixing NPE in StreamBufferingEncoderTest
    
    Motivation:
    
    The bufferingNewStreamFailsAfterGoAwayReceived method currently causes an NPE.
    
    Modifications:
    
    Fixed the test so that a valid ByteBuf is passed in.
    
    Result:
    
    The test no longer throws an NPE.

commit 5fb349ca5a005a8d181c9731a2043c853db891cc
Author: Minwoo Jung <jmwsoft@gmail.com>
Date:   Sun Jul 19 16:26:34 2015 +0900

    Update ChannelConfig.java
    
    {@link ByteBufAllocator} -> {@link MessageSizeEstimator} on
    https://github.com/netty/netty/blob/4.0/transport/src/main/java/io/netty/channel/ChannelConfig.java#L248

commit 05dae57ad762766170f47cae20bbd94c31c471ef
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Jul 18 20:50:34 2015 +0200

    Ensure cancelled scheduled tasks can be GC'ed ASAP
    
    Motivation:
    
    Prior we used a purge task that would remove previous canceled scheduled tasks from the internal queue. This could introduce some delay and so use a lot of memory even if the task itself is already canceled.
    
    Modifications:
    
    Schedule removal of task from queue via EventLoop if cancel operation is not done in the EventLoop Thread or just remove directly if the Thread that cancels the scheduled task is in the EventLoop.
    
    Result:
    
    Faster possibility to GC a canceled ScheduledFutureTask.

commit d1344345bbd00f245079a2c166b2a4afa1d62668
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jul 10 22:00:30 2015 +0200

    DnsResolver.resolve(...) fails when ipaddress is used.
    
    Motivation:
    
    DnsResolver.resolve(...) fails when an InetSocketAddress is used that was constructed of an ipaddress string.
    
    Modifications:
    
    Don't try to lookup when the InetSocketAddress was constructed via an ipaddress.
    
    Result:
    
    DnsResolver.resolve(...) works in all cases.

commit 74dd7f85caa2d70a89049091dc8c59b233ce0248
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Jun 1 17:24:49 2015 -0700

    HTTP/2 Thread Context Interface Clarifications
    
    Motivation:
    It is currently assumed that all usages of the HTTP/2 codec will be from the same event loop context. If the methods are used outside of the assumed thread context then unexpected behavior is observed. This assumption should be more clearly communicated and enforced in key areas.
    
    Modifications:
    - The flow controller interfaces have assert statements and updated javadocs indicating the assumptions.
    
    Result:
    Interfaces more clearly indicate thread context limitations.

commit f1c5f0e0c7200f63e3e0e21a171cc19afcbed0d3
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jul 9 22:48:10 2015 +0200

    [#3967] Guard against NPE in PendingWriteQueue
    
    Motivation:
    
    If the Channel is already closed when the PendingWriteQueue is created it will generate a NPE when add or remove is called later.
    
    Modifications:
    
    Add null checks to guard against NPE.
    
    Result:
    
    No more NPE possible.

commit d7cdc469bcb9db35efa1dba11c9e9edac2901527
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Jul 17 09:29:51 2015 -0700

    HTTP/2 CompressorHttp2ConnectionEncoder bug
    
    Motivation:
    The CompressorHttp2ConnectionEncoder is attempting to attach a property to streams before the exist.
    
    Modifications:
    - Allow the super class to create the streams before attempting to attach a property to the stream.
    
    Result:
    CompressorHttp2ConnectionEncoder is able to set the property and access the compressor.

commit b95826385324316896ee3fef3b0ba51b261134c8
Author: James Roper <james@jazzy.id.au>
Date:   Fri Jul 17 16:49:54 2015 +1000

    Send full response for unsupported websocket versions
    
    Motivation:
    
    WebSocketServerHandshakerFactory.sendUnsupportedVersionResponse does not
    send a LastHttpContent, nor does it flush, and it doesn't send a content
    length.
    
    Modifications:
    
    Changed sendUnsupportedVersionResponse to send FullHttpResponse, to
    writeAndFlush, and to set a content length of 0. Also added a test for
    this method.
    
    Result:
    
    Upstream handlers will be able to determine the end of the response, the
    response will actually get written to the client, and the client will be
    able to determine the end of the response.

commit 9747ffe5fcfcfa81ecb0d04d6ef6709ee69a945d
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jun 30 10:10:17 2015 -0700

    HTTP/2 Flow Controller should use Channel.isWritable()
    
    Motivation:
    See #3783
    
    Modifications:
    - The DefaultHttp2RemoteFlowController should use Channel.isWritable() before attempting to do any write operations.
    - The Flow controller methods should no longer take ChannelHandlerContext. The concept of flow control is tied to a connection and we do not support 1 flow controller keeping track of multiple ChannelHandlerContext.
    
    Result:
    Writes are delayed until isWritable() is true. Flow controller interface methods are more clear as to ChannelHandlerContext restrictions.

commit e6ed3ce6b1bc7424d76a6a8a534592d7ec2ca731
Author: Louis Ryan <lryan@google.com>
Date:   Wed Jul 15 15:04:22 2015 -0700

    Make CoalescingBufferQueueTest properly release all buffers including the composites removed from the queue.
    
    Motivation:
    Test was leaving composite buffers taken from the queue unreleased.
    
    Modifications:
    Make the test release buffers.
    
    Result:
    Nagging about leaked buffers should stop.

commit 80c59864cf290f9509d415050f5e0229e9b540d7
Author: Effective Light <hamzaxx@users.noreply.github.com>
Date:   Sun Jul 12 11:35:31 2015 -0400

    Fix DatagramChannel javadoc
    
    there seems to be an extra arrow incorrectly placed there when trying to link "Channel."

commit aaba1b9ed5364db95385cf2134afe794d46080f5
Author: Ryo Okubo <syucream1031@gmail.com>
Date:   Thu Jul 9 23:39:42 2015 +0900

    Accept over 2^31-1 MAX_HEADER_LIST_SIZE
    
    Motivation:
    
    The MAX_HEADER_LIST_SIZE of SETTINGS is represented by
    unsigned 32-bit value and this value isn't limited in RFC7540.
    But in current implementation, its stored to int variable so
    over 2^31-1 value is recognized as minus and handled as
    PROTOCOL_ERROR.
    
    Modifications:
    
    If a value of MAX_HEADER_LIST_SIZE is larger than 2^31-1, its
    handled as 2^31-1
    
    Result:
    
    Over 2^31-1 MAX_HEADER_LIST_SIZE is became acceptable

commit 60c59f39af539d206c50571dfce94022a53dff5a
Author: Louis Ryan <lryan@google.com>
Date:   Tue Jun 30 12:31:08 2015 -0700

    Use CoalescingBufferQueue to merge data writes on a stream in HTTP2 instead of CompositeByteBuf
    
    Motivation:
    
    Slicing a mutable CompositeByteBuf is not the appropriate mechanism to use to track and release buffers that have been written to a channel.
    In particular buffers passed over an Embedded or LocalChannel are retained after the ChannelPromise is completed and listening to the
    promise to consolidate a CompositeBuffer breaks slices taken from the composite as the offset indices have changed.
    
    In addition CoalescingBufferQueue handles taking arbitrarily sized slices of a sequence of buffers more efficiently.
    
    Modifications:
    
    Convert FlowControlledData to use a CoalescingBufferQueue to handle merging data writes.
    
    Result:
    
    HTTP2 works over LocalChannel and code is considerably simpler.

commit e949dcd94f0cf5ef0e697792c25c79d0b0de3033
Author: zhangduo <zhangduo@wandoujia.com>
Date:   Tue Jul 7 10:50:02 2015 +0800

    Allow numBytes == 0 when calling Http2LocalFlowController.consumeBytes.
    
    Motivation:
    
    Sometimes people use a data frame with length 0 to end a stream(such as jetty http2-server). So it is possible that data.readableBytes and padding are all 0 for a data frame, and cause an IllegalArgumentException when calling flowController.consumeBytes.
    
    Modifications:
    
    Return false when numBytes == 0 instead of throwing IllegalArgumentException.
    
    Result:
    
    Fix IllegalArgumentException.

commit cdbf43596de106d735920620943c18032e0c4450
Author: Louis Ryan <lryan@google.com>
Date:   Tue Jun 30 12:31:08 2015 -0700

    Add generic utility for enqueuing buffers with promises and dequeueing them in arbitrary byte ranges.
    
    Motivation:
    Simplifies writing code that needs to merge or slice a sequence of buffer & promise pairs into chunks of arbitrary sizes.
    For example in HTTP2 we merge or split buffers across fixed-size DATA frame boundaries.
    
    Modifications:
    Add new utility class CoalescingBufferQueue
    
    Result:
    Following this change HTTP2 code will switch to use it instead of CompositeByteBuffer for DATA frame coalescing.

commit 6e044b082c1d8bedf5306e40cfeece2c0003b27e
Author: nmittler <nathanmittler@google.com>
Date:   Wed Jul 8 11:38:22 2015 -0700

    Proper shutdown of HTTP2 encoder when channelInactive
    
    Motivation:
    
    The problem is described in https://github.com/grpc/grpc-java/issues/605. Basically, when using `StreamBufferingEncoder` there is a chance of creating zombie streams that never get closed.
    
    Modifications:
    
    Change `Http2ConnectionHandler`'s `channelInactive` handling logic to shutdown the encoder/decoder before shutting down the active streams.
    
    Result:
    
    Fixes https://github.com/grpc/grpc-java/issues/605

commit 8650679f2963d63d0b1ce26a42da95c64df54e56
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jul 8 21:37:58 2015 +0200

    Fix regression introduced by 11f9e9084b2da5e7a0e48c6a5c86be0f41a584de
    
    Motivation:
    
    While cherry-picked 11f9e9084b2da5e7a0e48c6a5c86be0f41a584de I changed the EmbeddedChannel implementation to not allow no ChannelHandlers when constructing it.
    This was done by mistake.
    
    Modifications:
    
    Revert change and add unit test.
    
    Result:
    
    Restore old behavior.

commit ab43c78c8520b73b6de83e60f41806ed49138781
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jul 7 10:27:49 2015 +0200

    Reduce memory usage by EmbeddedChannel
    
    Motivation:
    
    When using an EmbeddedChannel often it either does inbound or outbound processing which means we only often need one queue.
    
    Modifications:
    
    Lazy init the inbound and outbound message queues.
    
    Result:
    
    Less memory usage.

commit 9660e2f6a989d12b4c504e2e7c1b0a85258c9ec7
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jul 7 07:00:12 2015 +0200

    Better handling of BUFFER_OVERFLOW when unwrap data.
    
    Motivation:
    
    When we detect a BUFFER_OVERFLOW we should just forward the already produced data and allocate a new buffer and NOT do any extra memory copies while trying to expand the buffer.
    
    Modifications:
    
    When a BUFFER_OVERFLOW is returned and some data was produced just fire this data through the pipeline and allocate a new buffer to read again.
    
    Result:
    
    Less memorycopies and so better performance.

commit 8d1c6ebf71b116f9a33cce144a49e14f4e84528f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Jul 4 23:40:30 2015 +0200

    Only do priming read if there is no space in dsts buffers.
    
    Motivation:
    
    A SSL_read is needed to ensure the bio buffer is flushed, for this we did a priming read. This can be removed in many cases. Also ensure we always fill as much as possible in the destination buffers.
    
    Modifications:
    
    - Only do priming read if capacity of all dsts buffers is zero
    - Always produce as must data as possible in the dsts buffers.
    
    Result:
    
    Faster code.

commit 18356911ab86a3e4fa5e5fcc2e9a21a641a71b47
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jul 3 23:07:41 2015 +0200

    Stop calling BIO_write once internal buffer is full.
    
    Motivation:
    
    Previous we called BIO_write until either everything was written into it or it returned an error, which meant that the buffer is full. This then needed a ERR_clear_error() call which is expensive.
    
    Modifications:
    
    Break out of writing loop once we detect that not everything was written and so the buffer is full.
    
    Result:
    
    Less overhead when writing more data then the internal buffer can take.

commit a9d2b5cef00914c80c158759a5892e1d71423bce
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jul 3 20:43:13 2015 +0200

    Skip empty buffers and not pass these to BIO_write
    
    Motivation:
    
    When BIO_write is called with an empty buffer it will return 0 for which we call ERR_clear_error(). This is not neccessary as we should just skip these buffers. This eliminates a lot of overhead.
    
    Modifications:
    
    Skip empty src buffers when call unwrap(...).
    
    Result:
    
    Less overhead for unwrap(...) when called with empty buffers.

commit 61b9da470a777e979a269b56d19d233b333baa44
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jul 7 17:14:12 2015 +0200

    [#3945] Http2ConnectionHandler breaks channelReadComplete pipeline notification
    
    Motivation:
    
    Http2ConnectionHandler missed to forward channelReadComplete(...) events.
    
    Modifications:
    
    Ensure we notify the next handler in the pipeline via ctx.fireChannelReadComplete().
    
    Result:
    
    Correctly forwarding of event.

commit a7f83aa23ebe14669119aadb2bbd3012f94fdf64
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jun 23 09:25:03 2015 -0700

    HTTP/2 Example Needs FullHttpRequest
    
    Motivation:
    The HTTP/2 hello world example server should be expecting a FullHttpRequest when falling back to HTTP/1.x mode.
    
    Modifications:
    - HelloWorldHttp1Handler should process FullHttpRequestObjects
    - Http2ServerInitializer should insert an HttpObjectAggregator into the pipeline if no upgrade was attempted
    
    Result:
    Responses from the HelloWorldHttp1Handler should only come after full HTTP requests are received.

commit ecacd11b06f91a2713db8353104e5370f1e50066
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jun 17 17:33:09 2015 -0700

    HTTP/2 limit header accumulated size
    
    Motivation:
    The Http2FrameListener requires that the Http2FrameReader accumulate ByteBuf objects. There is currently no way to limit the amount of bytes that is accumulated.
    
    Motiviation:
    - DefaultHttp2FrameReader supports maxHeaderSize which will fail fast as soon as the maximum size is exceeded.
    - DefaultHttp2HeadersDecoder will respect the return value of endHeaderBlock() and fail if the max size is exceeded.
    
    Result:
    Frames which carry header data now respect a maximum number of bytes that can be accumulated.

commit ba84a596e2d2976449d86b4c28a2b9f5937c1c84
Author: Ryo Okubo <syucream1031@gmail.com>
Date:   Wed Jul 8 01:06:32 2015 +0900

    Allow servers to specify ENABLE_PUSH to 0 explicitly
    
    Motivation:
    
    If server sends SETTINGS with ENABLE_PUSH, its handled as
    PROTOCOL_ERROR in spite of the value. But the value specified to
    0 may be allowed in RFC7540.
    
    Modifications:
    
    Check whether ENABLE_PUSH sent from a server is 0 or not.
    
    Result:
    
    When server specifies ENABLE_PUSH to 0 explicitly, client doesn't
    handle it as PROTOCOL_ERROR.

commit 0f95b85ec2770ce81dafb75329cb4b03d94315dc
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jun 18 14:55:33 2015 +0200

    Ensure OpenSslSession informations can be retrieved even after shutdown
    
    Motivation:
    
    If a user tries to access various informations on the OpenSslSession after the SSLEngine was closed it will not work if these were not accessed before as we lazy init most of them.
    
    Modifications:
    
    Directly populate the whole OpenSslSession once the handshake is complete and before the user is notified about it.
    
    Result:
    
    OpenSslSession informations are avaible until it is GC'ed.

commit 0f6559d188f46be591902091f8150ad36c655c4f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jun 19 21:33:54 2015 +0200

    [#3780] Handle ChannelInitializer exception in exceptionCaught()
    
    Motivation:
    
    At the moment we directly closed the Channel when an exception accoured durring initChannel(...) without giving the user any way to do extra or special handling.
    
    Modifications:
    
    Handle the exception in exceptionCaught(...) of the ChannelInitializer which will by default log and close the Channel. This way the user can override this.
    
    Result:
    
    More felixible handling of exceptions.

commit 11f9e9084b2da5e7a0e48c6a5c86be0f41a584de
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jun 29 12:21:51 2015 +0200

    [#3921] EmbeddedChannel should add ChannelHandlers once registered
    
    Motivation:
    
    Currently in EmbeddedChannel we add the ChannelHandlers before the Channel is registered which leads to have the handlerAdded(...) callback
    be called from outside the EventLoop and also prevent the user to obtain a reference to the EventLoop in the callback itself.
    
    Modifications:
    
    Delay adding ChannelHandlers until EmbeddedChannel is registered.
    
    Result:
    
    Correctly call handlerAdded(...) after EmbeddedChannel is registered.

commit dd6ac55fa02ca3127df8df195cf21a649bd55bde
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jun 24 17:16:40 2015 +0200

    ServerBootstrap.handler(...) will add handler before Channel is registered.
    
    Motivation:
    
    If you set a ChannelHandler via ServerBootstrap.handler(...) it is added to the ChannelPipeline before the Channel is registered. This will lead to and IllegalStateException if a user tries to access the EventLoop in the ChannelHandler.handlerAdded(...) method.
    
    Modifications:
    
    Delay the adding of the ChannelHandler until the Channel was registered.
    
    Result:
    
    No more IllegalStateException.

commit ae163d687da1819cc56292c6714860a439dfd54b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jun 18 12:10:50 2015 +0200

    [#3896] Unpooled.copiedBuffer(ByteBuffer) and copiedBuffer(ByteBuffer...) is not thread-safe.
    
    Motivation:
    
    As we modify the position of the passed in ByteBuffer's this methods are not thread-safe.
    
    Modifications:
    
    Duplicate the input ByteBuffers before copy the content to  byte[].
    
    Result:
    
    Unpooled.copiedBuffer(ByteBuffer) and copiedBuffer(ByteBuffer...) is now thread-safe.

commit 8c90d602d7f02ae36f1e93714006c1af0bcfbb87
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jun 19 21:50:05 2015 +0200

    [#3899] Fix javadoc to use netty 4 API.
    
    Motivation:
    
    The javadoc of ByteBuf contained some out-dated code.
    
    Modifications:
    
    Update code example in javadoc to use netty 4+ API
    
    Result:
    
    Correct javadocs

commit ba6319eb6cfb41a67951f63d7791da4132daa823
Author: Louis Ryan <lryan@google.com>
Date:   Fri Jun 26 14:43:16 2015 -0700

    Fix FixedCompositeByteBuf handling when copying to direct buffers and streams
    
    Motivation:
    
    FixedCompositeByteBuf does not properly implement a number of methods for
    copying its content to direct buffers and output streams
    
    Modifications:
    
    Replace improper use of capacity() with readableBytes() when computing offesets during writes
    
    Result:
    
    Copying works correctly

commit b39223e295e1d56ac3e1054655ab0baffd0101eb
Author: nmittler <nathanmittler@google.com>
Date:   Mon Jun 22 15:38:53 2015 -0700

    Fixing exception in StreamBufferingEncoderTest.
    
    Motivation:
    
    NPE doesn't cause the tests to fail but should get fixed.
    
    Modifications:
    
    Modified the StreamBufferingEncoderTest to mock the ctx to return a promise.
    
    Result:
    
    Fixes #3905

commit c53dbb748e392914b4cebb43258f4500e2079925
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri May 29 09:26:57 2015 +0200

    Add ProtocolDetectionResult and use it in HAProxyMessageDecoder for allow detect HAProxy protocol.
    
    Motivation:
    
    Sometimes it is useful to detect if a ByteBuf contains a HAProxy header, for example if you want to write something like the PortUnification example.
    
    Modifications:
    
    - Add ProtocolDetectionResult which can be used as a return type for detecting different protocol.
    - Add new method which allows to detect HA Proxy messages.
    
    Result:
    
    Easier to detect protocol.

commit bad8e0d6aba52470046f463cb2069e16a1ad9bb0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jun 11 13:39:28 2015 +0200

    Correctly handle errors when using OpenSSL
    
    Motivation:
    
    We used ERR_get_error() to detect errors and missed to handle different errors. Also we missed to clear the error queue for a thread before invoke SSL operations,
    this could lead to detecting errors on different OpenSslEngines then the one in which the error actual happened.
    
    Modifications:
    
    Explicit handle errors via SSL.get_error and clear the error code before SSL operations.
    
    Result:
    
    Correctly handle errors and no false-positives in different OpenSslEngines then the one which detected an error.

commit 391df0547b83099a7f89bbee9d986a98ae387e8a
Author: nmittler <nathanmittler@google.com>
Date:   Fri Jun 19 16:08:37 2015 -0700

    Fixing broken build in the 4.1 branch.

commit 05ce33f5ca8f5e71e9e26351151c4e4f6d5da96d
Author: Louis Ryan <lryan@google.com>
Date:   Thu Jun 4 11:55:18 2015 -0700

    Make the flow-controllers write fewer, fatter frames to improve throughput.
    
    Motivation:
    
    Coalescing many small writes into a larger DATA frame reduces framing overheads on the wire and reduces the number of calls to Http2FrameListeners on the remote side.
    Delaying the write of WINDOW_UPDATE until flush allows for more consumed bytes to be returned as the aggregate of consumed bytes is returned and not the amount consumed when the threshold was crossed.
    
    Modifications:
    - Remote flow controller no longer immediately writes bytes when a flow-controlled payload is enqueued. Sequential data payloads are now merged into a single CompositeByteBuf which are written when 'writePendingBytes' is called.
    - Listener added to remote flow-controller which observes written bytes per stream.
    - Local flow-controller no longer immediately writes WINDOW_UPDATE when the ratio threshold is crossed. Now an explicit call to 'writeWindowUpdates' triggers the WINDOW_UPDATE for all streams who's ratio is exceeded at that time. This results in
      fewer window updates being sent and more bytes being returned.
    - Http2ConnectionHandler.flush triggers 'writeWindowUpdates' on the local flow-controller followed by 'writePendingBytes' on the remote flow-controller so WINDOW_UPDATES preceed DATA frames on the wire.
    
    Result:
    - Better throughput for writing many small DATA chunks followed by a flush, saving 9-bytes per coalesced frame.
    - Fewer WINDOW_UPDATES being written and more flow-control bytes returned to remote side more quickly, thereby improving throughput.

commit 1ecc37fbb23eb1ee1d323f95198527cc4f8cbaa7
Author: nmittler <nathanmittler@google.com>
Date:   Tue Jun 16 15:11:28 2015 -0700

    Better error when first HTTP/2 frame is not SETTINGS
    
    Motivation:
    
    Bootstrap of the HTTP/2 can take a lot of paths and a lot of things can go wrong in the initial handshakes leading up to establishment of HTTP/2 between client and server. There have been many times where handshakes have failed silently, leading to very cryptic errors that are hard to debug.
    
    Modifications:
    
    Changed the HTTP/2 handler and decoder to ensure that the very first data on the wire (WRT HTTP/2) is SETTINGS/preface+SETTINGS. When this is not the case, a connection error is thrown with the bytes that were found instead.
    
    Result:
    
    Fixes #3880

commit e1e8a59ad9f01dbe52f5cd2768f2c43225e95c11
Author: a-mkarjalainen <a-mkarjalainen@expedia.com>
Date:   Thu Jun 18 11:48:20 2015 +0100

    Fix broken constructor chaining for FixedChannelPool class.
    
    Motivation:
    
    Only one of the three FixedChannelPool constructors checks for the constructor
    arguments. Therfore it was possible to create a pool with zero maxConnections.
    
    This change chains all constructors together, so that the last one
    in the chain always checks the validity of the arguments, regardless of the
    constructor used.
    
    Result:
    
    It is no longer possible to create a FixedChannelPool instance with invalid
    maxConnections or maxPendingAcquires parameters.

commit e0ef01cf9300f940ff432ab3f4e902c4976bae02
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jun 17 09:39:54 2015 +0200

    [#3888] Use 2 * cores as default minimum for pool arenas.
    
    Motivation:
    
    At the moment we use 1 * cores as default mimimum for pool arenas. This can easily lead to conditions as we use 2 * cores as default for EventLoop's when using NIO or EPOLL. If we choose a smaller number we will run into hotspots as allocation and deallocation needs to be synchronized on the PoolArena.
    
    Modifications:
    
    Change the default number of arenas to 2 * cores.
    
    Result:
    
    Less conditions when using the default settings.

commit 29ac2ae3c255fb2fa1c1660f8e35d45c212430aa
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jun 12 06:11:54 2015 +0200

    [#3883] OpenSSL SSLSession returns incorrect peer principal
    
    Motivation:
    
    According to the javadocs of SSLSession.getPeerPrincipal should be returning the identity of the peer, while we return the identity of the issuer.
    
    Modifications:
    
    Return the correct indentity.
    
    Result:
    
    Behavior match the documentation.

commit 4a0d68c50bc8ef11d94538567ce3c8f7deb5d4ab
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jun 12 06:19:10 2015 +0200

    [#3881] FixedChannelPool creates 1 more channel than maxConnections
    
    Motivation:
    
    FixedChannelPool should enforce a number of maximal used channels, but due a bug we fail to correctly enforce this.
    
    Modifications:
    
    Change check to correctly only acquire channel if we not hit the limit yet.
    
    Result:
    
    Correct limiting.

commit 09d826ed46cba3876d4e35231038c0c9d4e301da
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Jun 10 09:10:02 2015 -0700

    Channel writable bytes feature
    
    Motivation:
    To avoid buffering too much it would be useful to get an estimate of how many bytes can be written to a Channel before it becomes unwritable.
    
    Modifications:
    - Update the Channel interface to support 2 new methods. 1 to give how many bytes before unwritable. 1 to give how many bytes before writable.
    - Update the AbstractChannel implementation to delegate to the ChannelOutboundBuffer.
    
    Result:
    The Channel interface supports 2 new methods which provide more visibility into writability.

commit caa15050204c9757f2a3e34511cf1d9d8447cd9c
Author: Frederic Bregier <fredbregier@free.fr>
Date:   Sat Apr 18 15:07:38 2015 +0200

    Get uploaded size while upload is in progress
    
    Proposal to fix issue #3636
    
    Motivations:
    Currently, while adding the next buffers to the decoder
    (`decoder.offer()`), there is no way to access to the current HTTP
    object being decoded since it can only be available currently once fully
    decoded by `decoder.hasNext()`.
    Some could want to know the progression on the overall transfer but also
    per HTTP object.
    While overall progression could be done using (if available) the global
    Content-Length of the request and taking into account each HttpContent
    size, the per HttpData object progression is unknown.
    
    Modifications:
    1) For HTTP object, `AbstractHttpData` has 2 protected properties named
    `definedSize` and `size`, respectively the supposely final size and the
    current (decoded until now) size.
    This provides a new method `definedSize()` to get the current value for
    `definedSize`. The `size` attribute is reachable by the `length()`
    method.
    
    Note however there are 2 different ways that currently managed the
    `definedSize`:
    a) `Attribute`: it is reset each time the value is less than actual
    (when a buffer is added, the value is increased) since the final length
    is not known (no Content-Length)
    b) `FileUpload`: it is set at startup from the lengh provided
    
    So these differences could lead in wrong perception;
    a) `Attribute`: definedSize = size always
    b) `FileUpload`: definedSize >= size always
    
    Therefore the comment tries to explain clearly the different behaviors.
    
    2) In the InterfaceHttpPostRequestDecoder (and the derived classes), I
    add a new method: `decoder.currentPartialHttpData()` which will return a
    `InterfaceHttpData` (if any) as the current `Attribute` or `FileUpload`
    (the 2 generic types), which will allow then the programmer to check
    according to the real type (instance of) the 2 methods `definedSize()`
    and `length()`.
    
    This method check if currentFileUpload or currentAttribute are null and
    returns the one (only one could be not null) that is not null.
    
    Note that if this method returns null, it might mean 2 situations:
    a) the last `HttpData` (whatever attribute or file upload) is already
    finished and therefore accessible through `next()`
    b) there is not yet any `HttpData` in decoding (body not yet parsed for
    instance)
    
    Result:
    The developper has more access and therefore control on the current
    upload.
    The coding from developper side could looks like in the example in
    HttpUloadServerHandler.

commit 3a4d64bb8404f59861acddec954b4ed3aa02f97b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jun 5 12:44:55 2015 +0200

    Allow to receive a ChannelGroupFuture that will be notified once all Channels are closed.
    
    Motivation:
    
    It's useful to be able to be notified once all Channels that are part of the ChannelGroup are notified. This can for example be useful if you want to do a graceful shutdown.
    
    Modifications:
    
    - Add ChannelGroup.newCloseFuture(...) which will be notified once all Channels are notified that are part of the ChannelGroup at the time of calling.
    
    Result:
    
    Easier to be notified once all Channels within a ChannelGroup are closed.

commit 43a558b9e195be2fa795d5d85ed0f44a3c56d1dc
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jun 9 10:44:05 2015 -0700

    ChannelOutboundBuffer bytes before writable accessor
    
    Motiviation:
    There are currently no accessors which provide visbility into how many bytes must be written in order for a writability change to occur. This feature would be useful for codecs which intent to control how many bytes are queued at any given time.
    
    Modifications:
    - add bytesBeforeUnWritable() which will give the number of bytes before the buffer (and associated channel) transitions to not writable
    - add bytesBeforeWritable() which will give the number of bytes that must be drained from the queue until the channel becomes writable.
    
    Result:
    More visibility into writability for the ChannelOutboundBuffer.

commit d1b7f990f22e1792f514d0ed752bec461272e6b6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jun 8 10:58:42 2015 +0200

    Not skip first cert when using OpenSslClientContext
    
    Motivation:
    
    Due a copy and paste error we incorrectly skipped the first cert in the keyCertChainFile when using OpenSslClientContext.
    
    Modifications:
    
    Correctly not skip the first cert.
    
    Result:
    
    The certificate chain is correctly setup when using OpenSslClientContext.

commit b169a76d462f346900c8d87f0ff5a65ce2d0bf5d
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jun 10 12:20:50 2015 +0900

    Fix the failing HttpObjectAggregatorTest.testInvalidConstructorUsage()
    
    Related: 950da2eae1471c436424555f1d79bc08d3ba38c3

commit 0ca65f13739560fb580c0c4e40952f65c609651c
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 9 19:24:35 2015 +0900

    Lazily instantiate HttpServerUpgradeHandler.UpgradeCodec
    
    Related: #3814
    
    Motivation:
    
    To implement the support for an upgrade from cleartext HTTP/1.1
    connection to cleartext HTTP/2 (h2c) connection, a user usually uses
    HttpServerUpgradeHandler.
    
    It does its job, but it requires a user to instantiate the UpgradeCodecs
    for all supported protocols upfront. It means redundancy for the
    connections that are not upgraded.
    
    Modifications:
    
    - Change the constructor of HttpServerUpgradeHandler
      - Accept UpgraceCodecFactory instead of UpgradeCodecs
    - The default constructor of HttpServerUpgradeHandler sets the
      maxContentLength to 0 now, which shouldn't be a problem because a
      usual upgrade request is a GET.
    - Update the examples accordingly
    
    Result:
    
    A user can instantiate Http2ServerUpgradeCodec and its related objects
    (Http2Connection, Http2FrameReader/Writer, Http2FrameListener, etc) only
    when necessary.

commit 950da2eae1471c436424555f1d79bc08d3ba38c3
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jun 10 12:00:55 2015 +0900

    Allow MessageAggregator to disallow non-empty content
    
    Motivation:
    
    A user sometimes just want the aggregated message has no content at
    all. (e.g. A user only wants HTTP GET requests.)
    
    Modifications:
    
    - Do not raise IllegalArgumentException even if a user specified
      the maxContentLength of 0
    
    Result:
    
    A user can disallow a message with non-empty content.

commit 73d79a4b3baf0bad2f04bc8cc60573745befbb15
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 9 14:55:39 2015 +0900

    Do not use hard-coded handler names in HTTP/2
    
    Motivation:
    
    Our HTTP/2 implementation sometimes uses hard-coded handler names when
    adding/removing a handler to/from a pipeline. It's not really a good
    idea because it can easily result in name clashes. Unless there is a
    good reason, we need to use the reference to the handlers
    
    Modifications:
    
    - Allow null as a handler name for Http2Client/ServerUpgradeCodec
      - Use null as the default upgrade handler name
    - Do not use handler name strings in some test cases and examples
    
    Result:
    
    Fixes #3815

commit e72d04509f7d04d2a0a0e96cc5555728ac03aa29
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 9 14:24:32 2015 +0900

    Fix a buffer leak in StreamBufferingEncoderTest
    
    Related: #3871
    
    Motivation:
    
    StreamBufferingEncoderTest does not release when writeGoAway() is
    called.
    
    Modifications:
    
    Release the buffer in mock object arguments
    
    Result:
    
    No buffer leak

commit 4570f30dd9f9a4dbc17dd58347b4a6d2c343f17a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jun 8 15:09:17 2015 +0200

    [#3798] Extract dump method to ByteBufUtil
    
    Motivation:
    
    Dumping the content of a ByteBuf in a hex format is very useful.
    
    Modifications:
    
    Move code into ByteBufUtil so its easy to reuse.
    
    Result:
    
    Easy to reuse dumping code.

commit 5c22a015224d1419e97400b4cff9b592305f9e21
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Jun 8 07:59:36 2015 -0700

    HTTP/2 shutdown cleanup miss
    
    Motiviation:
    https://github.com/netty/netty/pull/3865 was merged from a machine with old code. A test case that was updates was not merged.
    
    Modifications:
    - Merge the missing test case updates
    
    Result:
    Test case no longer fails.

commit 49b0d6ed07c50aed9c72076b0c299bdb03b0631f
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri May 29 16:27:59 2015 -0700

    HTTP/2 ConnectionHandler close cleanup
    
    Motiviation:
    The connection handler stream close operation is unconditionally adding a listener object to a future. We may not have to add a listener at all because the future has already been completed.
    
    Modifications:
    - If the future is done, directly invoke the logic without creating/adding a new listener.
    
    Result:
    No need to create/add listener if the future is already done in close logic.

commit e9a2cac16df7cd6911b7032deee8bdb3ec3e3022
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jun 8 09:59:44 2015 +0200

    [#3869] Add unit test to ensure adding null header values is not allowed.
    
    Motivation:
    
    We need to ensure we never allow to have null values set on headers, otherwise we will see a NPE during encoding them.
    
    Modifications:
    
    Add unit test that shows we correctly handle null values.
    
    Result:
    
    Verify correct implementation.

commit cf54c042412a5945711799d5fe84fe519cdee2f2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jun 3 22:29:28 2015 +0200

    Correctly respect readerIndex of buffer when dumping.
    
    Motivation:
    
    The current dumping code does not respect the readerIndex and so logs incorrect.
    
    Modifications:
    
    Respect readerIndex of ByteBuf
    
    Result:
    
    Correctly log content of buffer.

commit a485ae68dce633a3f2da3ad7e31501561cb3d352
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jun 4 21:02:55 2015 +0200

    Guard against race when calling SslHandler.handshakeFuture().sync()
    
    Motivation:
    
    If the handlerAdded(...) callback was not called, the checkDeadLock() of the handshakeFuture will produce an IllegalStateException.
    This was first reported at https://github.com/impossibl/pgjdbc-ng/issues/168 .
    
    Modifications:
    
    Pass deadlock check if ctx is null
    
    Result:
    
    No more race and so IllegalStateException.

commit 6f9eb2cd34de593710fe1a0535575e96ffe45367
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jun 3 11:31:47 2015 +0200

    Update javadocs to highlight that derived buffers will not increment the reference count.
    
    Motivation:
    
    We not explain the derived buffers will not retain the parent buffer.
    
    Modifications:
    
    Add docs.
    
    Result:
    
    Correctly document behaviour

commit 49643fb5b12fc8426cc8d5cf98adb55687961770
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Jun 1 21:17:51 2015 +0200

    [#3848] Respect EPOLLERR event
    
    Motivation:
    
    Some glibc/kernel versions will trigger an EPOLLERR event to notify
    about failed connect and not an EPOLLOUT. Also EPOLLERR may be triggered
    when a connection is broke.
    
    Modification:
    
    React on EPOLLERR like if an EPOLLOUT / EPOLLIN was received, this will work in
    all cases as we handle errors in EPOLLOUT / EPOLLIN anyway.
    
    Result:
    
    Correctly detect errors.

commit d2615ab532b3d149df175d142bbb423947b1a05b
Author: nmittler <nathanmittler@google.com>
Date:   Tue Jun 2 20:15:59 2015 -0700

    Porting BufferingHttp2ConnectionEncoder from gRPC
    
    Motivation:
    
    gRPC's BufferingHttp2ConnectionEncoder is a generic utility that simplifies client-side applications that want to allow stream creation without worrying about violating the SETTINGS_MAX_CONCURRENT_STREAMS limit.  Since it's not gRPC-specific it makes sense to move it into Netty proper.
    
    Modifications:
    
    Adding the BufferingHttp2ConnectionEncoder and it's unit test.
    
    Result:
    
    Netty now supports buffering stream creation.

commit 2b0dfc4e808639e09d427b6df755d25b95230619
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jun 5 07:23:09 2015 +0200

    Expose SSL_CTX and SSL pointers
    
    Motivation:
    
    For advanced use-cases it an be helpful to be able to directly access the SSL_CTX and SSL pointers of the underlying openssl objects. This for example allows to register custom C callbacks.
    
    Modifications:
    
    - Expose the SSL_CTX and SSL pointers
    - Cleanup the shutdown code
    
    Result:
    
    It's now possible to obtain the c pointes and set native callbacks.

commit 077508949638bd90c11d81ec1ce3b0ab257e5eb6
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jun 1 16:05:00 2015 +0900

    Replace SpdyOrHttpChooser and Http2OrHttpChooser with ApplicationProtocolNegotiationHandler
    
    Motivation:
    
    SpdyOrHttpChooser and Http2OrHttpChooser duplicate fair amount code with each other.
    
    Modification:
    
    - Replace SpdyOrHttpChooser and Http2OrHttpChooser with ApplicationProtocolNegotiationHandler
    - Add ApplicationProtocolNames to define the known application-level protocol names
    
    Result:
    
    - Less code duplication
    - A user can perform dynamic pipeline configuration that follows ALPN/NPN for any protocols.

commit afb46b926f9df6f1da91cbd011fa8f43d1566bb8
Author: Trustin Lee <t@motd.kr>
Date:   Sat May 30 17:53:46 2015 +0900

    Improve the API design of Http2OrHttpChooser and SpdyOrHttpChooser
    
    Related: #3641 and #3813
    
    Motivation:
    
    When setting up an HTTP/1 or HTTP/2 (or SPDY) pipeline, a user usually
    ends up with adding arbitrary set of handlers.
    
    Http2OrHttpChooser and SpdyOrHttpChooser have two abstract methods
    (create*Handler()) that expect a user to return a single handler, and
    also have add*Handlers() methods that add the handler returned by
    create*Handler() to the pipeline as well as the pre-defined set of
    handlers.
    
    The problem is, some users (read: I) don't need all of them or the
    user wants to add more than one handler. For example, take a look at
    io.netty.example.http2.tiles.Http2OrHttpHandler, which works around
    this issue by overriding addHttp2Handlers() and making
    createHttp2RequestHandler() a no-op.
    
    Modifications:
    
    - Replace add*Handlers() and create*Handler() with configure*()
    - Rename getProtocol() to selectProtocol() to make what it does clear
    - Provide the default implementation of selectProtocol()
    - Remove SelectedProtocol.UNKNOWN and use null instead, because
      'UNKNOWN' is not a protocol
    - Proper exception handling in the *OrHttpChooser so that the
      exception is logged and the connection is closed when failed to
      select a protocol
    - Make SpdyClient example always use SSL. It was always using SSL
      anyway.
    - Implement SslHandshakeCompletionEvent.toString() for debuggability
    - Remove an orphaned class: JettyNpnSslSession
    - Add SslHandler.applicationProtocol() to get the name of the
      application protocol
      - SSLSession.getProtocol() now returns transport-layer protocol name
        only, so that it conforms to its contract.
    
    Result:
    
    - *OrHttpChooser have better API.
    - *OrHttpChooser handle protocol selection failure properly.
    - SSLSession.getProtocol() now conforms to its contract.
    - SpdyClient example works with SpdyServer example out of the box

commit 9bcfef0f10694260a0c066278858b1c528f09ee0
Author: Jean-Rémi Desjardins <jeanremi.desjardins@gmail.com>
Date:   Mon Jun 1 17:08:55 2015 -0700

    Fix incoherence in WebSocket example
    
    Motivation:
    
    The logic in the current websocket example is confusing and misleading
    
    Modifications:
    
    Remove occurrences of "http" and "https" and replace them with "ws" and "wss"
    
    Result:
    
    The example code is now coherent and is easier to understand for a new user.

commit ed3d26cf7d2ab0ddd4a7c5729a0a6ced60240780
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri May 29 08:04:34 2015 +0200

    [#3837] Null out ByteBuffer[] array once done
    
    Motivation:
    
    the ByteBuffer[] that we keep in the ThreadLocal are never nulled out which can lead to have ByteBuffer instances sit there forever.
    This is even a bigger problem if nioBuffer() of ByteBuffer returns a new ByteBuffer that can not be destroyed by ByteBuffer.release().
    
    Modifications:
    
    Null out ByteBuffer array after processing.
    
    Result:
    
    No more dangling references after done.

commit 5d11be58ea28c8832a2572acdbef7f467ccc19c0
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 4 12:06:15 2015 +0900

    More meaningful assertion failure message
    
    We see sporadic failure in EpollSocketConnectionAttemptTest. Generate
    more useful failure message using hamcrest to know more.

commit 311532feb01d0c635684f358060fe562ca2d8b01
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jun 3 19:12:25 2015 +0900

    Fix IllegalReferenceCountException in DnsNameResolver
    
    Related: #3797
    
    Motivation:
    
    There is a race condition where DnsNameResolver.query() can attempt to
    increase the reference count of the DNS response which was released
    already by other thread.
    
    Modifications:
    
    - Make DnsCacheEntry a top-level class for clear access control
    - Use 'synchronized' to avoid the race condition
      - Add DnsCacheEntry.retainedResponse() to make sure that the response
        is never released while it is retained
      - Make retainedResponse() return null when the response has been
        released already, so that DnsNameResolver.query() knows that the
        cached entry has been released
    
    Result:
    
    The forementioned race condition has been fixed.

commit 09ecc34924ec26ee603bda5a45bb7c7b0b6057f4
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jun 2 12:44:18 2015 -0700

    Linux EPOLL Channel Configuration test unsupported options
    
    Motivation:
    The unit tests should not fail due to using a channel option which is not supported by the underlying kernel.
    
    Modifications:
    - Ignore RuntimeExceptions which are thrown by JNI code when setsockopt or getsockopt fails.
    
    Result:
    Unit tests pass if socket option is not supported by kernel.

commit 3c432b5a1965cab38e4988a8f4484bf182cd8811
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Jun 2 12:17:32 2015 -0700

    TCP_NOTSENT_LOWAT older kernel compatibility
    
    Motiviation:
    TCP_NOTSENT_LOWAT is only supported in linux kernel 3.12 or newer. The addition of this socket option prevents older kernels from building.
    
    Modifications:
    - Conditionally define TCP_NOTSENT_LOWAT if it is not defined
    
    Result:
    Kernels older than 3.12 can still compile the EPOLL module.

commit 0bd6acc5d81672d5d05ee6214b7c5d990f7588b9
Author: Jean-Rémi Desjardins <jeanremi.desjardins@gmail.com>
Date:   Mon Jun 1 17:20:14 2015 -0700

    Fix typo

commit 5121fba466a123ba3b8fc04ff164022e5c3c22a5
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed May 27 18:37:56 2015 -0700

    TCP_NOTSENT_LOWAT socket option support
    
    Motiviation:
    Linux provides the TCP_NOTSENT_LOWAT socket option. This can be used to control how much unsent data is queued in the tcp kernel buffers. This can be important when application level protocols (SPDY, HTTP/2) have their own priority mechanism and don't want data queued in the kernel.
    
    Modifications:
    - The epoll module will have an additional socket option TCP_NOTSENT_LOWAT
    - There will be JNI methods to control the underlying linux socket option mechanism
    
    Result:
    Linux EPOLL module exposes the TCP_NOTSENT_LOWAT socket option.

commit 4d79be44efd9de6e582712033fc1f12d6bf2862b
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jun 1 17:31:14 2015 +0900

    Fix sporadic failures in DatagramUnicastTest
    
    Motivation:
    
    DatagramUnitcastTest sometimes fails with BindException for an unknown reason.
    
    Modifications:
    
    Retry up to 3 times with a new free port when bind() fails with BindException
    
    Result:
    
    More build stability

commit 5f59591a729e31331aafb8a0a40cb8892ef3f1df
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jun 1 14:44:49 2015 +0900

    Fix sporadic assertion failure in SingleThreadEventLoopTest
    
    Motivation:
    
    SingleThreadEventLoopTest.testScheduleTaskAtFixedRate() fails often due to:
    
    - too little tolerance
    - incorrect assertion (it compares only with the previous timestamp)
    
    Modifications:
    
    - Increase the timestamp difference tolerance from 10ms to 20ms
    - Improve the timestamp assertion so that the comparison is performed against the first recorded timestamp
    - Misc: Fix broken Javadoc tag
    
    Result:
    
    More build stability

commit c7b164b4090b6675c9efd9f316e339a6a55d38c8
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jun 1 13:55:20 2015 +0900

    Fix sporadic assertion failure in SocketSslEchoTest
    
    Motivation:
    
    SocketSslEchoTest.testSslEcho() has a race condition where a renegotiation future can be done before:
    
        assertThat(renegoFuture.isDone(), is(false));
    
    Modifications:
    
    Remove the offending assertion.
    
    Result:
    
    More build stability

commit 70e3d17620061767ce06f69e11a370fb61d69d08
Author: Clebert Suconic <clebertsuconic@apache.org>
Date:   Fri May 29 16:43:28 2015 -0400

    fixing small leak on exception on the transport-epoll-native allocation
    
    Motivation:
    
    the JNI function ThrowNew won't release any allocated memory.
    The method exceptionMessage is allocating a new string concatenating 2 constant strings
    What is creating a small leak in case of these exceptions are happening.
    
    Modifications:
    
    Added new methods that will use exceptionMessage and free resources accordingly.
    I am also removing the inline definition on these methods as they could be reused by
    other added modules (e.g. libaio which should be coming soon)
    
    Result:
    
    No more leaks in case of failures.

commit 2a848ce1c94100e9fd3e063740d66187f17a3e8c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed May 27 09:09:56 2015 +0200

    Mention correct order in SimplechannelPool javadocs

commit 6aa9636e0f45d3dd758d63518c11553767b18001
Author: Trustin Lee <t@motd.kr>
Date:   Fri May 29 10:43:18 2015 +0900

    Remove the verbose:gc flag from the build
    
    Motivation:
    
    When a faulty never-ending test keeps producing a lot of garbage doing
    nothing but generating CPU load, our CI fails to detect the stalled
    build, because it determines the 'inactivity time' from console
    activity and GC keeps producing console output.
    
    Modifications:
    
    Remove the -verbose:gc flag from pom.xml
    
    Result:
    
    Stalled builds are terminated by our CI server.

commit 9f5a3e553cb00d1763483c7194ba4c455ad34eeb
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed May 27 16:56:05 2015 +0200

    Fix regression introduced by f765053ae740e300a6b696840d7dfe5de32afeb3 by use Entry after it is recycled

commit 81fee66c78b6afad1d92647669c67bcf44f7cbdf
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 19 15:03:29 2015 +0200

    Let PoolThreadCache work even if allocation and deallocation Thread are different
    
    Motivation:
    
    PoolThreadCache did only cache allocations if the allocation and deallocation Thread were the same. This is not optimal as often people write from differen thread then the actual EventLoop thread.
    
    Modification:
    
    - Add MpscArrayQueue which was forked from jctools and lightly modified.
    - Use MpscArrayQueue for caches and always add buffer back to the cache that belongs to the allocation thread.
    
    Result:
    
    ThreadPoolCache is now also usable and so gives performance improvements when allocation and deallocation thread are different.
    
    Performance when using same thread for allocation and deallocation is noticable worse then before.

commit bac2e3a6d2398e976f47aac0501331d364ed8222
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu May 21 22:21:22 2015 +0200

    Reduce calls to System.nanoTime() and object creation in IdleStateHandler. Related to [#3808]
    
    Motivation:
    
    Calling System.nanoTime() for each channelRead(...) is very expensive. See [#3808] for more detailed description.
    Also we always do extra work for each write and read even if read or write idle states should not be handled.
    
    Modifications:
    
    - Move System.nanoTime() call to channelReadComplete(...).
    - Reuse ChannelFutureListener for writes
    - Only add ChannelFutureListener to writes if write and all idle states should be handled.
    - Only call System.nanoTime() for reads if idle state events for read and all states should be handled.
    
    Result:
    
    Less overhead when using the IdleStateHandler.

commit 6fce3b79c3225e84f2be50df370198c39da5140c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed May 20 16:28:26 2015 +0200

    Do not try to init TrustManagerFactory if trustCertChainFile is null.
    
    Motivation:
    
    We called TrustManagerFactory.init(...) even when the trustCertChainFile is null. This could lead to exceptions during the handshake.
    
    Modifications:
    
    Correctly only call TurstManagerFactory.init() if trustCertcChainFail is not null.
    
    Result:
    
    Correct behavior.

commit f2ba221e7e70fb7c1bb63d8aa67bdd21aa106886
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 26 22:23:43 2015 +0200

    [#3785] Correctly handle connection refused with native transport
    
    Motivation:
    
    Due a bug we not correctly handled connection refused errors and so failed the connect promise with the wrong exception.
    Beside this we some times even triggered fireChannelActive() which is not correct.
    
    Modifications:
    
    - Add testcase
    - correctly detect connect errors
    
    Result:
    
    Correct and consistent handling.

commit ab1bb9136b384e4722feebe2f0e9377cd88fd39a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed May 20 07:27:55 2015 +0200

    [#3654] Synchronize on PoolSubpage head when allocate / free PoolSubpages
    
    Motivation:
    
    Currently we hold a lock on the PoolArena when we allocate / free PoolSubpages, which is wasteful as this also affects "normal" allocations. The same is true vice-verse.
    
    Modifications:
    
    Ensure we synchronize on the head of the PoolSubPages pool. This is done per size and so it is possible to concurrently allocate / deallocate PoolSubPages with different sizes, and also normal allocations.
    
    Result:
    
    Less condition and so faster allocation/deallocation.
    
    Before this commit:
    xxx:~/wrk $ ./wrk -H 'Connection: keep-alive' -d 120 -c 256 -t 16 -s scripts/pipeline-many.lua  http://xxx:8080/plaintext
    Running 2m test @ http://xxx:8080/plaintext
      16 threads and 256 connections
      Thread Stats   Avg      Stdev     Max   +/- Stdev
        Latency    17.61ms   29.52ms 689.73ms   97.27%
        Req/Sec   278.93k    41.97k  351.04k    84.83%
      530527460 requests in 2.00m, 71.64GB read
    Requests/sec: 4422226.13
    Transfer/sec:    611.52MB
    
    After this commit:
    xxx:~/wrk $ ./wrk -H 'Connection: keep-alive' -d 120 -c 256 -t 16 -s scripts/pipeline-many.lua  http://xxx:8080/plaintext
    Running 2m test @ http://xxx:8080/plaintext
      16 threads and 256 connections
      Thread Stats   Avg      Stdev     Max   +/- Stdev
        Latency    15.85ms   24.50ms 681.61ms   97.42%
        Req/Sec   287.14k    38.39k  360.33k    85.88%
      547902773 requests in 2.00m, 73.99GB read
    Requests/sec: 4567066.11
    Transfer/sec:    631.55MB
    
    This is reproducable every time.

commit dce0dd9b78106e26e77d83e89bc5ad76a64cc65f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 25 21:00:24 2015 +0200

    [#3654] No need to hold lock while destroy a chunk
    
    Motiviation:
    
    At the moment we sometimes hold the lock on the PoolArena during destroy a PoolChunk. This is not needed.
    
    Modification:
    
    - Ensure we not hold the lock during destroy a PoolChunk
    - Move all synchronized usage in PoolArena
    - Cleanup
    
    Result:
    
    Less condition.

commit d5f1dc66aa6e7290d3c1e0b8f5982ad553e2b15a
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri May 22 14:05:39 2015 -0700

    Consistent use of SSLHandshakeException for ALPN
    
    Motiviation:
    The OpenSSL engine uses SSLHandshakeException in the event of failures that occur during the handshake process. The alpn-boot project's getSSLException will also map the no_application_protocol to a SSLHandshakeException exception. We should be consistent and use SSLHandshakeException for handshake failure events.
    
    Modifications:
    -Update JdkAlpnSslEngine to propagate an SSLHandshakeException in the event of a failure.
    
    Result:
    Consistent usage of SSLHandshakeException during a handshake failure event.

commit 0f28bdf7bba0cb2978459caf050ccb85727f650d
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue May 19 14:35:24 2015 -0700

    Update HTTP/2 to RFCs
    
    Motivation:
    HTTP/2 RFC 7540 has been released.
    
    Modifications:
    - Make changes RFC 7540 introduced since draft 17.
    
    Result:
    HTTP/2 RFC 7540 compliant code

commit 757671b7cc494cdd25e50c3a3d94c27f83bb201c
Author: Roelof Naude <roelof.naude@gmail.com>
Date:   Thu May 7 08:53:34 2015 +0200

    Support empty http responses when using compression
    
    Motivation:
    
    Found a bug in that netty would generate a 20 byte body when returing a response
    to an HTTP HEAD. the 20 bytes seems to be related to the compression footer.
    
    RFC2616, section 9.4 states that responses to an HTTP HEAD MUST not return a message
    body in the response.
    
    Netty's own client implementation expected an empty response. The extra bytes lead to a
    2nd response with an error decoder result:
    java.lang.IllegalArgumentException: invalid version format: 14
    
    Modifications:
    
    Track the HTTP request method. When processing the response we determine if the response
    is passthru unnchanged. This decision now takes into account the request method and passthru
    responses related to HTTP HEAD requests.
    
    Result:
    
    Netty's http client works and better RFC conformance.

commit 08d234cdf0ca7a413e8e8eee763e6b0dc25625b0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri May 22 15:51:32 2015 +0200

    [#3805] Fix incorrect javadoc in PlatformDependent

commit ad7f033c061e6d8fbabec6171e52a658310e21df
Author: johnou <johno@sulake.com>
Date:   Mon May 25 19:16:18 2015 +0200

    Allow writing with void promise if IdleStateHandler is configured in pipeline.
    
    Motivation:
    
    Allow writing with void promise if IdleStateHandler is configured in the pipeline for read timeout events.
    
    Modifications:
    
    Better performance.
    
    Result:
    
    No more ChannelFutureListeners are created if IdleStateHandler is only configured for read timeouts allowing for writing to the channel with void promise.

commit 9d675def8109cef350e2786ae1b464a9c946a2e0
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri May 22 13:40:01 2015 +0200

    Only call System.nanoTime() if no read batch is ongoing. Related to [#3808]
    
    Motivation:
    
    [#3808] introduced some improvements to reduce the calls to System.nanoTime() but missed one possible optimization.
    
    Modifications:
    
    Only call System.nanoTime() if no reading patch is in process.
    
    Result:
    
    Less System.nanoTime() calls.

commit 4877fffa0a591bdb6fe21af6192986b74102d17d
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sun May 10 16:21:52 2015 +0530

    SCTP echo client/server multi-homing examples
    
    Motivation:
    There are no Netty SCTP examples on multi-homing.
    
    Modifications:
    - Added new example classes based on echo client/server example
    
    Result:
    Better documentation

commit e4af176be7e5049b5ae55525cb50bedf1437889b
Author: nmittler <nathanmittler@google.com>
Date:   Fri May 22 08:34:16 2015 -0700

    Upgrading Jetty alpn-api version
    
    Motivation:
    
    Discussion is in https://github.com/jetty-project/jetty-alpn/issues/8. The new API allows protocol negotiation to properly throw SSLHandshakeException.
    
    Modifications:
    
    Updated the parent pom.xml with the new version.
    
    Result:
    
    Upgraded alpn-api now allows throwing SSLHandshakeException.

commit c20b38378b7aa5b7fc908c67799f443aa09ecdbb
Author: nmittler <nathanmittler@google.com>
Date:   Thu May 21 12:12:29 2015 -0700

    Allow manual configuration of initial HTTP/2 SETTINGS frame.
    
    Motivation:
    
    There is currently no good way to configure the initial SETTINGS frame. The individual settings can be configured on the various components, but doing this bypasses the proper setting update logic in the encoder.
    
    Modifications:
    
    Updated Http2ConnectionHandler to optionally take initial settings in the constructor. If not provided, it will default to current behavior.
    
    Result:
    
    Easy manual configuration of initial settings.

commit e903979a2878b474f2ef1425bf169fb0ddda2f91
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 12 14:04:32 2015 +0200

    Not try to write more then Integer.MAX_VALUE / SSIZE_MAX via writev
    
    Motivation:
    
    When trying to write more then Integer.MAX_VALUE / SSIZE_MAX via writev(...) the OS may return EINVAL depending on the kernel or the actual OS (bsd / osx always return EINVAL). This will trigger an IOException.
    
    Modifications:
    
    Never try to write more then Integer.MAX_VALUE / SSIZE_MAX when using writev.
    
    Result:
    
    No more IOException when write more data then Integer.MAX_VALUE / SSIZE_MAX via writev.

commit 1a5254b5976808a1c394e4bc541d49c434f3fe0b
Author: Ruslan Sennov <ruslan.sennov@gmail.com>
Date:   Thu May 21 07:04:46 2015 +0300

    QueryStringDecoder's javadoc fix

commit f3dcad32306aeb953d47f8ca02ef4ac1744d0436
Author: Robert Varga <robert.varga@pantheon.sk>
Date:   Wed May 20 15:02:10 2015 +0200

    Do not call System.nanoTime() in ReadTimeoutHandler.channelRead()
    
    Motivation:
    
    We mitigate callouts to System.nanoTime() in SingleThreadEventExecutor
    as it is 'relatively expensive'. On a modern system, tak translates to
    about 20ns per call. With channelReadComplete() we can side-step this in
    channelRead().
    
    Modifications:
    
    Introduce a boolean flag, which indicates that a read batch is currently
    on-going, which acts as a flush guard for lastReadTime. Update
    lastReadTime in channelReadComplete() just before setting the flag to
    false. We set the flag to true in channelRead().
    
    The periodic task examines the flag, and if it observes it to be true,
    it will reschedule the task for the full duration. If it observes as
    false, it will read lastReadTime and adjust the delay accordingly.
    
    Result:
    
    ReadTimeoutHandler calls System.nanoTime() only once per read batch.

commit 271af7c624cf1789a0b13fbf245437c4bf256c16
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed May 13 17:15:06 2015 +0200

    Expose metrics for PooledByteBufAllocator
    
    Motivation:
    
    The PooledByteBufAllocator is more or less a black-box atm. We need to expose some metrics to allow the user to get a better idea how to tune it.
    
    Modifications:
    
    - Expose different metrics via PooledByteBufAllocator
    - Add *Metrics interfaces
    
    Result:
    
    It is now easy to gather metrics and detail about the PooledByteBufAllocator and so get a better understanding about resource-usage etc.

commit b034cf18f9f0696929fb52dcfe42b851e2560528
Author: nmittler <nathanmittler@google.com>
Date:   Wed May 20 08:33:59 2015 -0700

    Fixing logging of ping acks in Http2OutboundFrameLogger
    
    Motivation:
    
    The Http2OutboundFrameLogger logs all PING frames as not acks.
    
    Modifications:
    
    Changed the logger to correctly log PING acks.
    
    Result:
    
    PING acks are logged correctly.

commit 88b8558ec8da538f66293b51c4ed9103e584fc02
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 11 08:35:12 2015 +0200

    Add PooledSlicedByteBuf and PooledDuplicatedByteBuf
    
    Motivation:
    
    At the moment when calling slice(...) or duplicate(...) on a Pooled*ByteBuf a new SlicedByteBuf or DuplicatedByteBuf. This can create a lot of GC.
    
    Modifications:
    
    Add PooledSlicedByteBuf and PooledDuplicatedByteBuf which will be used when a PooledByteBuf is used.
    
    Result:
    
    Less GC.

commit 33e443e71a463f57406eef311792512584a98b4d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 11 20:23:04 2015 +0200

    Clarify ByteBuf.duplicate() semantics.
    
    Motivation:
    
    From the javadocs of ByteBuf.duplicate() it is not clear if the reader and writer marks will be duplicated.
    
    Modifications:
    
    Add sentence to clarify that marks will not be duplicated.
    
    Result:
    
    Clear semantics.

commit 9d568586dbb72ec32e3fb04ed86c706808bedaed
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 11 10:10:31 2015 +0200

    Reset markers when obtain PooledByteBuf.
    
    Motivation:
    
    When allocate a PooledByteBuf we need to ensure to also reset the markers for the readerIndex and writerIndex.
    
    Modifications:
    
    - Correct reset the markers
    - Add test-case for it
    
    Result:
    
    Correctly reset markers.

commit 92bfeeca1bdc71cada715993f669e2c1a5693b74
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed May 13 13:50:22 2015 +0200

    No need to release lock and acquire again when allocate normal size.
    
    Motiviation:
    
    When tried to allocate tiny and small sized and failed to serve these out of the PoolSubPage we exit the synchronization
    block just to enter it again when call allocateNormal(...).
    
    Modification:
    
    Not exit the synchronized block until allocateNormal(...) is done.
    
    Result:
    
    Better performance.

commit 781a85520c8d3afdba651d39691872f8c9b6c01d
Author: Leonardo Freitas Gomes <leonardo.f.gomes@gmail.com>
Date:   Sat Apr 11 02:57:20 2015 +0200

    Add HTTP/2 Netty tiles example
    
    Motivation:
    
    Adding an example that showcases Netty’s HTTP/2 codec and that is
    slightly more complex than the existing hello-world example. It is
    based on the Gopher tiles example available here:
    https://http2.golang.org/gophertiles?latency=0
    
    Modifications:
    
    Moved current http2 example to http2/helloworld.
    Added http2 tiles example under http2/tiles.
    
    Result:
    
    A Netty tiles example is available.

commit c6d61f9b43d89dc280b6089dee674daa8c180146
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon May 18 08:44:08 2015 -0700

    Fix merge issue introduced by 04c0d77
    
    Motiviation:
    Interface changes between master and 4.1 branch resulted in a compile failure.
    
    Modifications:
    - change messageReceived to channelRead0
    
    Result:
    No more compile error.

commit 04c0d77287d861940d3cd5ae8b672e93ad49e97a
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri May 8 12:38:58 2015 -0700

    HTTP/2 Server Example No Response for HTTP/1.x Only Clients
    
    Motiviation:
    The HTTP/2 server example just hangs when a client is using only HTTP with no ALPN or upgrade attempts. We should still send some kind of response.
    
    Modifications:
    The HTTP/2 server example has a special handler to detect no upgrade HTTP clients and generate a response.
    
    Result:
    Clients that just use HTTP with no upgrade will no appear hung when interacting with the HTTP/2 server example.

commit 9bf636076a57aa3c58e6ca7a4a465bb0268d944a
Author: Robin Stocker <robin@nibor.org>
Date:   Mon May 18 15:34:35 2015 +1000

    Fix typo in FingerprintTrustManagerFactory docs

commit b9342577963833080a0009249a1813e8e9e3664c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun May 17 19:57:09 2015 +0200

    [#3784] Support hostname verification when using OpenSSLEngine
    
    Motivation:
    
    At the moment hostname verification is not supported with OpenSSLEngine.
    
    Modifications:
    
    - Allow to create OpenSslEngine with peerHost and peerPort informations.
    - Respect endPointIdentificationAlgorithm and algorithmConstraints when set and get SSLParamaters.
    
    Result:
    
    hostname verification is supported now.

commit fd22af837725fb2455f6dc72ea897bf8b25250e6
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon May 11 12:10:23 2015 -0700

    HTTP/2 GOAWAY Reference Count Issue
    
    Motiviation:
    The Http2ConnectionHandler is incrementing the reference count in the goAway method for the debugData buffer after it has already been sent and maybe consumed. This may result in an IllegalRefCountException to be thrown. The unit tests also encounter buffer leaks because they have not been updated to invoke the listener which releases the buffer in the goAway method.
    
    Modifications:
    - The retain() call should be before the frameWriter().writeGoAway(...) call
    - The unit tests which call goAway must also invoke the operationComplete(..) method for the listener.
    
    Result:
    No IllegalRefCountException. Less buffer leaks in tests.

commit f6299d942c209a37046f9c02f5688a1a579d6dda
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Mon May 11 13:11:39 2015 +0200

    Minor ClientCookieDecoder improvements
    
    Motivation:
    
    * Path attribute should be null, not empty String, if it's passed as "Path=".
    * Only extract attribute value when the name is recognized.
    * Only extract Expires attribute value String if MaxAge is undefined as it has precedence.
    
    Modification:
    
    Modify ClientCookieDecoder.
    Add "testIgnoreEmptyPath" test in ClientCookieDecoderTest.
    
    Result:
    
    More idyomatic Path behavior (like Domain).
    Minor performance improvement in some corner cases.

commit 864f196c672036015e9ab816a06189913e7d90ce
Author: Eric Anderson <ejona@google.com>
Date:   Mon May 11 10:33:35 2015 -0700

    Add missing SslContextBuilder.forServer(KeyManagerFactory)
    
    Motivation:
    
    keyManager() is required on server-side, and so there is a forServer()
    method for each override of keyManager(). However, one of the
    forServer() overrides was missing, which meant that if you wanted to use
    a KeyManagerFactory you were forced to provide garbage configuration
    just to get past null checks.
    
    Modifications:
    
    Add missing override.
    
    Result:
    
    No hacks to use SslContextBuilder on server-side with KeyManagerFactory.
    Resolves #3775

commit cbbcdaa249b95c35a18bc2f64eeda44258943056
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Mon May 11 17:18:14 2015 +0300

    Update compression dependencies
    
    Motivation:
    
    New versions of compression libraries, which improve their performance and fix some bugs.
    
    Modifications:
    
    Updated versions of jzlib, compress-lzf, lz4 and commons-compres libraries.
    
    Result:
    
    Better stability and performance of compression codecs.

commit 61dced3dcd19513c3b4785c2d40e3c8051c74ab3
Author: Frederic Bregier <fredbregier@free.fr>
Date:   Mon May 11 00:07:04 2015 +0200

    Proposal to fix issue #3768 (3.10)
    
    Motivations:
    When using HttpPostRequestEncoder and trying to set an attribute if a
    charset is defined, currenlty implicit Charset.toStrng() is used, given
    wrong format.
    As in Android for UTF-16 = "com.ibm.icu4jni.charset.CharsetICU[UTF-16]".
    
    Modifications:
    Each time charset is used to be printed as its name, charset.name() is
    used to get the canonical name.
    
    Result:
    Now get "UTF-16" instead.
    (3.10 version)

commit bb5f9fe078e7d586d04d5858792f10e2fdc20ec3
Author: nmittler <nathanmittler@google.com>
Date:   Fri May 8 08:04:25 2015 -0700

    Scoring loopback addresses as 0 in DefaultChannelId
    
    Motivation:
    
    As described in #3490, [compareAddresses](https://github.com/netty/netty/blob/master/transport/src/main/java/io/netty/channel/DefaultChannelId.java#L182)  seems to allow loopback addresses to score high, disallowing replacing the loopback address.
    
    Modifications:
    
    Changed [scoreAddress](https://github.com/netty/netty/blob/master/transport/src/main/java/io/netty/channel/DefaultChannelId.java#L283) to score loopback addresses as 0.
    
    Result:
    
    Fixes #3490

commit a2cd01b32bffb6fe33d34362670c8bdc4ff9974b
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri May 8 01:58:36 2015 -0700

    ByteString test failure bug
    
    Motivation:
    There is an error in the ByteString test logic which is resulting in test failures.
    
    Modifications:
    - Fix the loop iteration to use the loop iteration variable instead of a fixed index.
    
    Result:
    Tests are less buggy.

commit 2dd59e44b7d57432bff29661a7a3ee648d5f939e
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu May 7 16:17:34 2015 -0700

    ALPN/NPN Examples Not using failure behavior compatible with all SslProviders
    
    Motivation:
    Examples that are using ALPN/NPN are using a failure mode which is not supported by the JDK SslProvider. The examples fail to run and throw an exception if the JDK SslProvider is used.
    
    Modifications:
    - Use SelectorFailureBehavior.NO_ADVERTISE
    - Use SelectedListenerFailureBehavior.ACCEPT
    
    Result:
    Examples can be run with both OpenSsl and JDK SslProviders.

commit 2927cdd504332b74e20eb943e0ea92d123d2d31c
Author: Eric Anderson <ejona@google.com>
Date:   Thu May 7 13:25:48 2015 -0700

    Swap to SslContextBuilder in examples
    
    Motivation:
    
    Using factory methods of SslContext is deprecated. Code should be using
    SslContextBuilder instead. This would have been done when the old
    methods were deprecated, but memcache and http2 examples didn't exist in
    the 4.0 branch which the PR was against.
    
    Modifications:
    
    Swap to the new construction pattern.
    
    Result:
    
    No more deprecated warnings during build of examples. Users are
    instructed to use the new pattern.

commit f23b7b4efdba5b60af5b9fdf4ab1680b4db12492
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu May 7 14:21:08 2015 -0400

    [maven-release-plugin] prepare for next development iteration

commit 871ce43b1f431536e08a36d420875494ef3e9451
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu May 7 14:20:38 2015 -0400

    [maven-release-plugin] prepare release netty-4.1.0.Beta5

commit 74627483d7bdcae3130b2ba173e08ec5f2658377
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon May 4 15:15:44 2015 -0700

    [#3724] HTTP/2 Headers END_STREAM results in RST_STREAM
    
    Motivation:
    If headers are sent on a stream that does not yet exist and the END_STREAM flag is set we will send a RST_STREAM frame. We should send the HEADERS frame and no RST_STREAM.
    
    Modifications:
    DefaultHttp2RemoteFlowController should allow frames to be sent if stream is created in the 'half closed (local)' state.
    
    Result:
    We can send HEADERS frame with the END_STREAM flag sent without sending a RST_STREAM frame.

commit bace371ca5c84760f0f644ba77212ec7aa9a9cc7
Author: nmittler <nathanmittler@google.com>
Date:   Thu May 7 07:38:20 2015 -0700

    Addressing a few more comments from #3749.
    
    Motivation:
    
    There were a few outstanding comments that were left unaddressed after committing the changes for #3749.
    
    Modifications:
    
    Changes to Http2ConnectionHandler.goAway():
    
    - Retaining the debugData buffer, rather than always converting it to a string immediately.
    - Changing log level for sending a GOAWAY with error to debug.
    
    Result:
    
    Remaining comments from #3749 are addressed.

commit f963401d422d6409c817755bf79880567864e223
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 5 15:14:07 2015 +0200

    Allow rejection of remote initiated renegotiation
    
    Motivation:
    
    To prevent from DOS attacks it can be useful to disable remote initiated renegotiation.
    
    Modifications:
    
    Add new flag to OpenSslContext that can be used to disable it
    Adding a testcase
    
    Result:
    
    Remote initiated renegotion requests can be disabled now.

commit 79c17cf1fdb70476e32affa2c0a9bed6a88ff7c6
Author: Alwayswithme <phx13ye@gmail.com>
Date:   Thu May 7 10:36:49 2015 +0800

    ByteBufUtil use IndexOfProcessor to find occurrence.
    
    Motivation:
    The way of firstIndexOf and lastIndexOf iterating the ByteBuf is similar to forEachByte and forEachByteDesc, but have many range checks.
    Modifications:
    Use forEachByte and a IndexOfProcessor to find occurrence.
    Result:
    eliminate range checks

commit 97d871a7553a01384b43df855dccdda5205ae77a
Author: Stephane Landelle <slandelle@gatling.io>
Date:   Tue Apr 14 13:57:32 2015 +0200

    Validate cookie name and value characters Motivation:
    
    RFC6265 specifies which characters are allowed in a cookie name and value.
    
    Netty is currently too lax, which can used for HttpOnly escaping.
    
    Modification:
    
    In ServerCookieDecoder: discard cookie key-value pairs that contain invalid characters.
    In ClientCookieEncoder: throw an exception when trying to encode cookies with invalid characters.
    
    Result:
    
    The problem described in the motivation section is fixed.

commit c85b770ac4d3d03af3b603af89c841ebf6c4d082
Author: JongYoon Lim <jy1105.lim@samsung.com>
Date:   Wed May 6 15:43:54 2015 +0900

    Remove duplicated code in AcceptorChannel classes.
    
    Motivation:
    
    NioUdtByteAcceptorChannel and NioUdtMessageAcceptorChannel have almost same code.
    For maintainability, it's better to remove it.
    
    Motification:
    
    - Pulled a member(METADATA) and methods(doReadMessage() and metadata() up.
    - Added newConnectorChannel().
    
    Result:
    
    Cleaner code.

commit 77d00423108af4e79b74a487da1f9392b8d1aef0
Author: nmittler <nathanmittler@google.com>
Date:   Wed May 6 12:04:55 2015 -0700

    Allow override of HTTP/2 graceful connection shutdown.
    
    Motivation:
    
    Currently the graceful shutdown of the HTTP/2 connection waits until there are no active streams. There may be use cases that buffer stream creation (due to limits imposed by MAX_CONCURRENT_STREAMS), in which case they may still want those streams to complete before closing.
    
    Modifications:
    
    Added a isGracefulShutdownComplete method to Http2ConnectionHandler, which can be overridden by a subclass.
    
    Result:
    
    Graceful shutdown logic can be overridden.

commit f6c2c99efcf1ae564bebe0ab8f9f45391bb548f3
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed May 6 23:02:33 2015 +0200

    [#3740] Add missing parentheses so the fix works as expected.

commit e71e40057f7a6adeee8267ce612ba1df22484a66
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed May 6 18:04:44 2015 +0200

    Fix possible IllegalStateException caused by closeNotifyTimeout when using SslHandler
    
    Motivation:
    
    In the SslHandler we schedule a timeout at which we close the Channel if a timeout was detected during close_notify. Because this can race with notify the flushFuture we can see an IllegalStateException when the Channel is closed.
    
    Modifications:
    
    - Use a trySuccess() and tryFailure(...) to guard against race.
    
    Result:
    
    No more race.

commit 57e7571c65f181df97ea7bbab372659a0baedfa1
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue May 5 10:32:18 2015 +0200

    Not trigger channelWritabilityChanged if fail messages before close Channel.
    
    Motivation:
    
    We should not trigger channelWritabilityChanged during failing message when we are about to close the Channel as otherwise the use may try again writing even if the Channel is about to get closed.
    
    Modifications:
    
    Add new boolean param to ChannelOutboundBuffer.failFlushed(...) which allows to specify if we should notify or not.
    
    Result:
    
    channelWritabilityChanged is not triggered anymore if we cloe the Channel because of an IOException during write.

commit f839f65c1503b9ca16757fb12fa80efefdd861c6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed May 6 12:35:53 2015 +0200

    Do not defer closing of Channel when in flush
    
    Motivation:
    
    Previously, we deferred the closing of the Channel when we were flushing. This is problematic as this means that if the user adds a ChannelFutureListener, that will close the Channel, the closing will not happen until we are done with flushing. This can lead to more data is sent than expected.
    
    Modifications:
    
    - Do not defer closing when in flush
    
    Result:
    
    Correctly respect order of events and closing the Channel ASAP

commit 0ac14b3d3b4ac8953d8f8bb993e8a58a1347c0a5
Author: JongYoon Lim <jy1105.lim@samsung.com>
Date:   Wed May 6 15:56:09 2015 +0900

    Bugfix in channelUDT().
    
    Motivation:
    
    channelUDT() can't handle NioUdtByteRendezvousChannel and NioUdtMessageRendezvousChannel because those are handled by the checking condition of their parent.
    
    Motification:
    
    Reorder checking conditions.
    
    Result:
    
    Bugfixed.

commit 3c60c9ce32eaddf97d51d46b26142365a8a6d96d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed May 6 16:41:42 2015 +0200

    Fix regression introduced by 08e4b076be6402a4f98a2e082b1a292756c570ff.

commit e276cb796cf6ca3405a8234198cc7a5fd1d3db97
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed May 6 10:44:04 2015 +0200

    Correct semantic of LocalChannel.doWrite(...) and remove memory copy
    
    Motivation:
    
    The semantic of LocalChannel.doWrite(...) were a bit off as it notified the ChannelFuture before the data was actual moved to the peer buffer.
    
    Modifications:
    
    - Use our MPSC queue as inbound buffer
    - Directly copy to data to the inbound buffer of the peer and either success or fail the promise after each copy.
    
    Result:
    
    Correct semantic and less memory copies.

commit 868eb49cd26ef6e51ced830ce2629692da176002
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed May 6 10:41:44 2015 +0200

    Only run OpenSslEngineTests if OpenSsl is installed. Related to [#3732]

commit 52eae1c9b37c5342250d6a39075fd82c10ddf6d6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Apr 29 21:37:50 2015 +0200

    Add support for mutual auth when using OpenSslEngine.
    
    Motivation:
    
    Currently mutual auth is not supported when using OpenSslEngine.
    
    Modification:
    
    - Add support to OpenSslClientContext
    - Correctly throw SSLHandshakeException when an error during handshake is detected
    
    Result:
    
    Mutual auth can be used with OpenSslEngine

commit 488d9055982eac50a173f13d1001553610d4a553
Author: yz_liu <yz_liu@Ctrip.com>
Date:   Wed May 6 13:50:40 2015 +0800

    fix a typo in RecyclableArrayList

commit d711eb827dbdf75ec2ffada8c409ca629828abd4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon May 4 15:40:29 2015 +0200

    [#3709] Ensure all data is read from socket when EPOLLRDUP is received
    
    Motivation:
    
    When EPOLLRDHUP is received we need to try to read at least one time to ensure
    that we read all pending data from the socket. Otherwise we may loose data.
    
    Modifications:
    
    - Ensure we read all data from socket
    - Ensure file descriptor is closed on doClose() even if doDeregister() throws an Exception.
    - Only handle either EPOLLRDHUP or EPOLLIN as only one is needed to detect connection reset.
    
    Result:
    
    No more data loss on connection reset.

commit 5f5cdd10895f6ee4800104d1b95e2960e2b2325e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Apr 30 09:38:35 2015 +0200

    Proper handling of epoll_ctl errors
    
    Motivation:
    
    When using epoll_ctl we should respect the return value and do the right thing depending on it.
    
    Modifications:
    
    Adjust java and native code to respect epoll_ctl return values.
    
    Result:
    
    Correct and cleaner code.

commit c94e7f744af5a02016f17c61403399deafc505b9
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri May 1 10:54:44 2015 -0700

    DefaultChannelPipeline needs to release objects
    
    Motiviation:
    If user events or excpetions reach the tail end of the pipeline they are not released. This could result in buffer leaks.
    
    Motivation:
    - Use the ReferenceCountUtil.release to release objects for the userEventTriggered and exceptionCaught methods on DefaultChannelPipeline
    
    Result:
    2 less areas where buffer leaks can occur.

commit b0a30cbf3952ed3198826706d63b817010e0d90b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Apr 30 21:22:30 2015 +0200

    Fix race-condition in SocketSslEchoTest
    
    Motivation:
    
    Because we tried to grab the SSL renegotation future to early we could see test-failures.
    
    Modifications:
    
    Access the future at the correct time.
    
    Result:
    
    No more test-failures.

commit cf66edb3a10fa2bb60802e91f14565b551c08f97
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 21 12:24:43 2015 +0200

    [#3675] Fix livelock issue in MpscLinkedQueue
    
    Motivation:
    
    All read operations should be safe to execute from multiple threads which was not the case and so could produce a livelock.
    
    Modifications:
    
    Modify methods so these are safe to be called from multiple threads.
    
    Result:
    
    No more livelock.

commit 4ae8bdc6ec8d37106f386a7d667a9cd279a8f5d8
Author: nmittler <nathanmittler@google.com>
Date:   Sun May 3 08:49:49 2015 -0700

    Allowing inbound HTTP/2 frames after sending GOAWAY
    
    Motivation:
    
    If the client closes, a GOWAY is sent with a lastKnownStream of zero (since the remote side never created a stream). If there is still an exchange in progress, inbound frames for streams created by the client will be ignored because our ignore logic doesn't check to see if the stream was created by the remote endpoint. Frames for streams created by the local endpoint should continue to come through after sending GOAWAY.
    
    Modifications:
    
    Changed the decoder's streamCreatedAfterGoAwaySent logic to properly ensure that the stream was created remotely.
    
    Result:
    
    We now propertly process frames received after sending GOAWAY.

commit 60a94f0c5fcc5ea34f1ef048732f779b1afa50a2
Author: nmittler <nathanmittler@google.com>
Date:   Mon May 4 15:18:12 2015 -0700

    Fixing isDone in SimpleChannelPromiseAggregator
    
    Motivation:
    
    The isDone method is currently broken in the aggregator because the doneAllocatingPromises accidentally calls the overridden version of setSuccess, rather than calling the base class version. This causes the base class's version to never be called since allowNotificationEvent will evaluate to false. This means that setSuccess0 will never be set, resulting in isDone always returning false.
    
    Modifications:
    
    Changed setSuccess() to call the base class when appropriate, regardless of the result of allowNotificationEvent.
    
    Result:
    
    isDone now behaves properly for the promise aggregator.

commit a3cea186ce559037b8cf04ea272f09908657e9e3
Author: Louis Ryan <lryan@google.com>
Date:   Thu Apr 23 14:23:23 2015 -0700

    Have Http2LocalFlowController.consumeBytes indicate whether a WINDOW_UPDATE was written

commit 91e94c956f9a2a949308291d9c3fb0210e9a60bb
Author: Trustin Lee <t@motd.kr>
Date:   Mon May 4 14:25:18 2015 +0900

    Add more profiles for newer JDK versions
    
    Modifications:
    
    - Add jetty.npn.version.latest and jetty.alpn.version.latest7/8
    - Add npn-alpn-7 profile
    - Use the *.latest7/8 version properties in alpn-8 and npn-alpn-7
    - Add more profiles for newer JDK versions
    - Reorder profiles

commit 5e0ee6c09522ae573ef03b77dbd609f3db4d15b6
Author: Trustin Lee <t@motd.kr>
Date:   Mon May 4 12:05:59 2015 +0900

    Fix missing ResourceLeak.close() in AbstractDnsMessage
    
    Motivation:
    
    ResourceLeak.close() must be called when a reference-counted resource is
    deallocated, but AbstractDnsMessage.deallocate() forgot to call it.
    
    Modifications:
    
    Call ResourceLeak.close() for the tracked AbstractDnsMessage instances
    
    Result:
    
    Fix the false resource leak warnings

commit 9d70cf33c2ccea42d0fe651be61b2e0a6579fcb1
Author: Trustin Lee <t@motd.kr>
Date:   Fri May 1 12:03:44 2015 +0900

    Fix a test failure in DnsQueryTest

commit abaaa75ddcd2a99fd05ffb70af52437a7d8a47af
Author: Trustin Lee <t@motd.kr>
Date:   Fri May 1 11:55:06 2015 +0900

    Reduce the memory requirement of heap dump compression
    
    Motivation:
    
    The current heap dump compression preset (9) requires way too much
    memory (768 MiB at maximum for dictionary), resulting in OOME in many
    cases.
    
    Modifications:
    
    - Use the default preset (6) which uses 8 MiB dictionary.
    - Do not fail abruptly even when OOME has been raised.
    
    Result:
    
    More stable heap dump acquisition

commit 518119d7c0f1577a93449d07d1ce1401c339ed6e
Author: Trustin Lee <t@motd.kr>
Date:   Fri May 1 11:48:02 2015 +0900

    Fix the flaky SocketSslEchoTest
    
    Motivation:
    
    The SSL peer who did not initiate renegotiation sometimes does not get
    the notification for renegotition due to an unknown reason.
    
    Modification:
    
    Until the exact cause is understood, relax the assertions of the flaky
    tests.
    
    Result:
    
    Build stability

commit 63a02fc04e6ce45aee38b0437ae0279880e5fe40
Author: Trustin Lee <t@motd.kr>
Date:   Mon Mar 16 15:46:14 2015 +0900

    Revamp DNS codec
    
    Motivation:
    
    There are various known issues in netty-codec-dns:
    
    - Message types are not interfaces, which can make it difficult for a
      user to implement his/her own message implementation.
    - Some class names and field names do not match with the terms in the
      RFC.
    - The support for decoding a DNS record was limited. A user had to
      encode and decode by him/herself.
    - The separation of DnsHeader from DnsMessage was unnecessary, although
      it is fine conceptually.
    - Buffer leak caused by DnsMessage was difficult to analyze, because the
      leak detector tracks down the underlying ByteBuf rather than the
      DnsMessage itself.
    - DnsMessage assumes DNS-over-UDP.
    - To send an EDNS message, a user have to create a new DNS record class
      instance unnecessarily.
    
    Modifications:
    
    - Make all message types interfaces and add default implementations
    - Rename some classes, properties, and constants to match the RFCs
      - DnsResource -> DnsRecord
      - DnsType -> DnsRecordType
      - and many more
    - Remove DnsClass and use an integer to support EDNS better
    - Add DnsRecordEncoder/DnsRecordDecoder and their default
      implementations
      - DnsRecord does not require RDATA to be ByteBuf anymore.
      - Add DnsRawRecord as the catch-all record type
    - Merge DnsHeader into DnsMessage
    - Make ResourceLeakDetector track AbstractDnsMessage
    - Remove DnsMessage.sender/recipient properties
      - Wrap DnsMessage with AddressedEnvelope
      - Add DatagramDnsQuest and DatagramDnsResponse for ease of use
      - Rename DnsQueryEncoder to DatagramDnsQueryEncoder
      - Rename DnsResponseDecoder to DatagramDnsResponseDecoder
    - Miscellaneous changes
      - Add StringUtil.TAB
    
    Result:
    
    - Cleaner APi
    - Can support DNS-over-TCP more easily in the future
    - Reduced memory footprint in the default DnsQuery/Response
      implementations
    - Better leak tracking for DnsMessages
    - Possibility to introduce new DnsRecord types in the future and provide
      full record encoder/decoder implementation.
    - No unnecessary instantiation for an EDNS pseudo resource record

commit 8271c8afccf7eb21bf6f994b5f3565f6d55bdee4
Author: Louis Ryan <lryan@google.com>
Date:   Thu Apr 23 14:23:23 2015 -0700

    Remove explicit flushes from HTTP2 encoders, decoders & flow-controllers
    
    Motivation:
    
    Allow users of HTTP2 to control when flushes occur so they can optimize network writes.
    
    Modifications:
    
    Removed explicit calls to flush in encoder, decoder & flow-controller
    Connection handler now calls flush on read-complete to enable batching writes in response to reads
    
    Result:
    
    Much less flushing occurs for normal HTTP2 request and response patterns.

commit ce8c916f1aea3b2f789e1532c2ccbcec4fbd40c2
Author: Fabian Lange <lange.fabian@gmail.com>
Date:   Thu Apr 30 20:10:44 2015 +0200

    Upgrade twitter hpack dependency
    
    Motivation:
    Right now the used hpack dependency does not contain a valid osgi manifest.
    
    Modifications:
    Upgrade hpack from 0.10.1 to 0.11.0.
    
    Result:
    hpack dependency works in osgi containers without wrapping.

commit a5c8e145ee3f927f5d1793d34188f2ca86b3cbe8
Author: JongYoon Lim <jy1105.lim@samsung.com>
Date:   Thu Apr 30 21:34:24 2015 +0900

    Remove the condition which is always true when reached
    
    Motivation:
    Condition 'isNextCharDoubleQuote' is always 'true' when reached.
    
    Motification:
    - Removed Condition 'isNextCharDoubleQuote'.
    - Additionally fixed typo in javadoc
    
    Result:
    Cleaner code.

commit 56c98839c3fdc1418475acd003f655383bc97714
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 28 14:49:31 2015 +0200

    [#3218] Add ChannelPool / ChannelPoolMap abstraction and implementations
    
    Motivation:
    
    Many projects need some kind a Channel/Connection pool implementation. While the protocols are different many things can be shared, so we should provide a generic API and implementation.
    
    Modifications:
    
    Add ChannelPool / ChannelPoolMap API and implementations.
    
    Result:
    
    Reusable / Generic pool implementation that users can use.

commit 6c025b2044728d930f15ea5f822da9cffd27645b
Author: Ben Evans <bene.nz@gmail.com>
Date:   Wed Apr 29 14:31:29 2015 +0100

    Add support for SCTP 'unordered' flag.
    
    Motivation:
    
    Some SCTP applications require the SCTP unordered flag.
    This flag was not exposed by Netty so applications were unable
    to use it.
    
    Modifications:
    
    - Add unordered flag to SctpMessage.
    - {Nio,Oio}SctpChannel pass unordered flag to MessageInfo on write.
    - SctpOutboundByteStreamHandler may optionally request unordered
      delivery for all outbound messages.
    - Added test case to SctpEchoTest using unordered flag.
    
    Result:
    
    Fixes #3698. New constructors and methods added to SctpMessage and
    SctpOutboundByteStreamHandler, but changes are backward compatible.

commit 05f959335228938d3fa2c46ae743363c2be689a6
Author: JongYoon Lim <jy1105.lim@samsung.com>
Date:   Thu Apr 30 14:02:32 2015 +0900

    Remove the unreachable checking code
    
    Motivation:
    'length2 == 0' is not reachable because length1 and length2 are same at this point.
    
    Motification:
    Removed 'length2 == 0'.
    
    Result:
    Cleaner code.

commit ad9bec4d9d823d117d37a8a3d1a3fde76da0fe57
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 14 06:54:20 2015 +0200

    Add support for splice(...)
    
    Motivation:
    
    Linux supports splice(...) to transfer data from one filedescriptor to another without
    pass data through the user-space. This allows to write high-performant proxy code or to stream
    stuff from the socket directly the the filesystem.
    
    Modification:
    
    Add AbstractEpollStreamChannel.spliceTo(...) method to support splice(...) system call
    
    Result:
    
    Splice is now supported when using the native linux transport.
    
    Conflicts:
    
    	transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java

commit af0dd72184581cfff3fdde39bffc470e9e836593
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Apr 29 11:10:36 2015 -0700

    HTTP/2 Warnings Cleanup
    
    Motiviation:
    There are a few spots in the HTTP/2 codec where warnings were generated and can be avoided.
    
    Modifications:
    Clean up the cause of the warnings.
    
    Result:
    Less warnings.

commit f250dfedbeafc4707425dabe1fa773ef75f0e855
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Apr 22 15:18:42 2015 -0700

    HTTP/2 Sending a GO_AWAY with an error code should close conneciton
    
    Motivation:
    The specification requires that sending a GO_AWAY frame with an error code results in closing the TCP connection https://tools.ietf.org/html/draft-ietf-httpbis-http2-17#section-5.4.1.
    
    Modifications:
    - Close the connection after succesfully sending a GO_AWAY.
    
    Result:
    Fixes https://github.com/netty/netty/issues/3653

commit 891be30a28c6dc5a1edf1cb5a3690644cf4ff66e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Apr 27 15:14:01 2015 +0200

    Remove memory copy when extract frame in LengthFieldBasedFrameDecoder
    
    Motivation:
    
    We are currently doing a memory cop to extract the frame in LengthFieldBasedFrameDecoder which can be eliminated.
    
    Modifications:
    
    Use buffer.slice(...).retain() to eliminate the memory copy.
    
    Result:
    
    Better performance.

commit c4d69e982b87481b2cdbec9aaa234913d1699730
Author: JongYoon Lim <jy1105.lim@samsung.com>
Date:   Wed Apr 15 17:55:49 2015 +0900

    Remove duplicate code in ConstantPool class
    
    Motivation:
    
    Currently, valueOf() and newInstance() use almost same code to create new constant.
    For maintainability, it's better to share duplicate code among them.
    
    Motification:
    
    Added new private functions.
    - checkNotNullAndNotEmpty() is for checking whether the name of a constant is null and empty.
    - newConstant0() is for creating a new constant.
    
    Result:
    
    - Compact source code
    - Improvement of maintainability

commit 31a6ab9b1d957461ded25269ebc0d8a92a1cf194
Author: Jakob Buchgraber <buchgr@google.com>
Date:   Tue Apr 28 22:51:32 2015 -0700

    Fix compile errors introduced by cherry picking of 3440eadb3843676e993cf from master.

commit 3440eadb3843676e993cf937de1e33c1909270ff
Author: Jakob Buchgraber <buchgr@google.com>
Date:   Tue Apr 28 16:27:54 2015 -0700

    Http2ConnectionHandler should propagate channelActive and channelInactive events.
    
    Motivation:
    
    The Http2ConnectionHandler incorrectly doesn't propagate channelActive and channelInactive events and thus breaks the pipeline
    for other ChannelHandler.
    
    Modification:
    
    - Add calls to super.channelActive() and super.channelInactive().
    - Remove unused methods.
    
    Result:
    
    - Http2ConnectionHandler can be used with other ChannelHandlers.

commit 1cce998bb06f42ff47925390872dcc5c487bbf59
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Apr 19 21:07:19 2015 +0200

    [#3662] Fail the connect future on close
    
    Motivation:
    
    Because of a bug we missed to fail the connect future when doClose() is called. This can lead to a future which is never notified and so may lead to deadlocks in user-programs.
    
    Modifications:
    
    Correctly fail the connect future when doClose() is called and the connection was not established yet.
    
    Result:
    
    Connect future is always notified.

commit f67b14bf350abfda113da116e6c9a335aa60f649
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Apr 23 12:14:49 2015 +0200

    [#3680] Enabled SecurityManager results in ClassNotFoundError during io.netty.util.NetUtil initialization
    
    Motivation:
    
    When a SecurityManager is in place that preven reading the somaxconn file trying to bootstrap a channel later will result in a ClassNotFoundError.
    
    Modifications:
    
    - Reading the file in a privileged block.
    
    Result:
    
    No more ClassNotFoundError when a SecurityManager is in place.

commit f812180c2d9446b5ca7da433688772c12530be4d
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Apr 15 13:55:42 2015 -0700

    ByteString arrayOffset method
    
    Motivation:
    The ByteString class currently assumes the underlying array will be a complete representation of data. This is limiting as it does not allow a subsection of another array to be used. The forces copy operations to take place to compensate for the lack of API support.
    
    Modifications:
    - add arrayOffset method to ByteString
    - modify all ByteString and AsciiString methods that loop over or index into the underlying array to use this offset
    - update all code that uses ByteString.array to ensure it accounts for the offset
    - add unit tests to test the implementation respects the offset
    
    Result:
    ByteString and AsciiString can represent a sub region of a byte[].

commit 70a2608325d148092a2b6c6d6a5fb09522c6e841
Author: nmittler <nathanmittler@google.com>
Date:   Mon Apr 6 12:55:20 2015 -0700

    Optimizing user-defined stream properties.
    
    Motivation:
    
    Streams currently maintain a hash map of user-defined properties, which has been shown to add significant memory overhead as well as being a performance bottleneck for lookup of frequently used properties.
    
    Modifications:
    
    Modifying the connection/stream to use an array as the storage of user-defined properties, indexed by the class that identifies the index into the array where the property is stored.
    
    Result:
    
    Stream processing performance should be improved.

commit b426fb1618757e3e8d700f90cf5b5e1c55bc9f2a
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Apr 22 16:23:39 2015 -0700

    Compile error introduced in ee9233d
    
    Motivation:
    Commit ee9233d introduced a compile error in microbench.
    
    Modifications:
    Fix compile error.
    
    Result:
    Code now builds.

commit ee9233d8fa99e53408cba61d97d9707881fda1e0
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Apr 22 14:35:31 2015 -0700

    HTTP/2 Flow Controller required memory reduction
    
    Motivation:
    Currently we allocate the full amount of state for each stream as soon as the stream is created, and keep that state until the stream is GC. The full set of state is only needed when the stream can support flow controlled frames. There is an opportunity to reduce the required amount of memory, and make memory eligible for GC sooner by only allocating what is necessary for flow control stream state.
    
    Modifications:
    
    Introduce objects which require 'less' state for local/remote flow control stream state.
    Use these new objects when streams have been created but will not transition out of idle AND when streams are no longer eligible for flow controlled frame transfer but still must persist in the priority tree.
    Result:
    Memory allocations are reduced to what is actually needed, and memory is made eligible for GC potentially sooner.

commit a7d1dc362ae0ab5998723aae120b36d606a31425
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Apr 18 21:34:01 2015 +0200

    [#3652] Improve performance of StringUtil.simpleClassName()
    
    Motivation:
    
    static Package getPackage(Class<?> c) uses synchronized block internally.
    Thanks to @jingene for the hint and initial report of the issue.
    
    Modifications:
    
    -Use simple lastIndexOf(...) and substring for a faster implementation
    
    Result:
    
    No more lock condition.

commit ab925abc7db806ead57f8d9ea50ff322ce2ff891
Author: nmittler <nathanmittler@google.com>
Date:   Tue Apr 21 14:18:02 2015 -0700

    Ignore frames for streams that may have previously existed.
    
    Motivation:
    
    The recent PR that discarded the Http2StreamRemovalPolicy causes connection errors when receiving a frame for a stream that no longer exists. We should ignore these frames if we think there's a chance that the stream has existed previously
    
    Modifications:
    
    Modified the Http2Connection interface to provide a `streamMayHaveExisted` method. Also removed the requireStream() method to identify all of the places in the code that need to be updated.
    
    Modified the encoder and decoder to properly handle cases where a stream may have existed but no longer does.
    
    Result:
    
    Fixes #3643

commit 26a7a5ec25fe81fae38f557e6b44bf9c3ea91fea
Author: nmittler <nathanmittler@google.com>
Date:   Mon Apr 20 16:02:26 2015 -0700

    Always consume bytes for closed HTTP/2 streams.
    
    Motivation:
    
    The current local flow controller does not guarantee that unconsumed bytes for a closed stream will be restored to the connection window.  This may lead to degradation of the connection window over time.
    
    Modifications:
    
    Modified DefaultHttp2LocalFlowController to guarantee that any unconsumed bytes are returned to the connection window as soon as the stream is closed. We also immediately consume any bytes when receiving DATA for a closed stream.
    
    Result:
    
    Fixes #3668

commit abccf184115129e7f4eb79af6c4fab0fc19ec1ea
Author: Alwayswithme <phx13ye@gmail.com>
Date:   Tue Apr 21 14:03:27 2015 +0800

    fix the discardedBytes counting on LineBasedFrameDecoder
    
    Motivation:
    
    The LineBasedFrameDecoder discardedBytes counting different compare to
    DelimiterBasedFrameDecoder.
    
    Modifications:
    
    Add plus sign
    
    Result:
    
    DiscardedBytes counting correctly

commit 541137cc933783c5e44cd178f14508d883f21d4b
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Apr 9 00:07:08 2015 -0700

    HTTP/2 Flow Controller interface updates
    
    Motivation:
    Flow control is a required part of the HTTP/2 specification but it is currently structured more like an optional item. It must be accessed through the property map which is time consuming and does not represent its required nature. This access pattern does not give any insight into flow control outside of the codec (or flow controller implementation).
    
    Modifications:
    1. Create a read only public interface for LocalFlowState and RemoteFlowState.
    2. Add a LocalFlowState localFlowState(); and RemoteFlowState remoteFlowState(); to Http2Stream.
    
    Result:
    Flow control is not part of the Http2Stream interface. This clarifies its responsibility and logical relationship to other interfaces. The flow controller no longer must be acquired though a map lookup.

commit f467d695be2ae4ee7d5c2978191e1415aef37a9e
Author: Eric Anderson <ejona@google.com>
Date:   Mon Apr 20 15:58:51 2015 -0700

    Fix SslContextBuilder swapping client and server
    
    The 'forClient' boolean was swapped to 'forServer' in code review of #3531.
    Not all locations were updated.

commit 8b1f247a1af6a17757c491922675f0ed9dd2a8e1
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Apr 10 09:43:06 2015 +0200

    [#3623] CompositeByteBuf.iterator() should return optimized Iterable
    
    Motivation:
    
    CompositeByteBuf.iterator() currently creates a new ArrayList and fill it with the ByteBufs, which is more expensive then it needs to be.
    
    Modifications:
    
    - Use special Iterator implementation
    
    Result:
    
    Less overhead when calling iterator()

commit 62057f73d6cda6294c44f562ba0ae8bde1923c96
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Apr 15 18:04:02 2015 +0200

    Fix handling of non-auto read for ByteToMessageDecoder and SslHandler
    
    Motivation:
    
    Our automatically handling of non-auto-read failed because it not detected the need of calling read again by itself if nothing was decoded. Beside this handling of non-auto-read never worked for SslHandler as it always triggered a read even if it decoded a message and auto-read was false.
    
    This fixes [#3529] and [#3587].
    
    Modifications:
    
    - Implement handling of calling read when nothing was decoded (with non-auto-read) to ByteToMessageDecoder again
    - Correctly respect non-auto-read by SslHandler
    
    Result:
    
    No more stales and correctly respecting of non-auto-read by SslHandler.

commit 77e112a6d57430702fdb3a38cee4671464d7bb02
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 14 14:54:04 2015 +0200

    Correctly test for non-auto-read correctness in testsuite
    
    Motiviation:
    
    Our tests for non-auto-read did actually not test this correctly as auto-read was never disabled on the Bootstrap and ServerBootstrap.
    
    Modifications:
    
    - Correctly disable auto-read on Bootstrap and ServerBootstrap
    - Fix tests to call ChannelHandlerContext.read() once a Channel becomes active.
    
    Result:
    
    Correctly test that non-auto-read works.

commit ccde870b389f9223464c9c03783f1ddb450cb30c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Apr 20 09:10:41 2015 +0200

    Revert "Ensure channelReadComplete() is called only when necessary"
    
    This reverts commit 27a25e29f7c002eb9f4d52b52ecccb2f3a7d6b15.

commit bb692816d28e7943c31a4d44730c4f4bc72cda3b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Apr 20 09:10:29 2015 +0200

    Revert "Do not suppress channelReadComplete() when a handler was just added"
    
    This reverts commit 720faa4df101c22ff591ae4a916e93648951c374.

commit a123c495e1b789f906f59b0227c6ad920460a4a4
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Apr 20 09:10:14 2015 +0200

    Revert "Add another test case for channelReadComplete() suppression"
    
    This reverts commit daa04cb4f10050919b3aa4df89b0ea6aeebe335b.

commit bdfdf3094db00c7bfd610a3fb3e34ecae8e95aba
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Apr 13 22:18:52 2015 +0200

    Reduce object allocation during wrap/unwrap while handshake is in progress
    
    Motivation:
    
    Unnecessary object allocation is currently done during wrap/unwrap while a handshake is still in progress.
    
    Modifications:
    
    Use static instances when possible.
    
    Result:
    
    Less object creations.

commit b4b14ea19f343fbe7a0993a92856d573683de810
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Apr 15 22:48:21 2015 +0200

    Ensure backward-compability with 4.0
    
    Motivation:
    
    Each different *ChannelOption did extend ChannelOption in 4.0, which we changed in 4.1. This is a breaking change in terms of the API so we need to ensure we keep the old hierarchy.
    
    Modifications:
    
    - Let all *ChannelOption extend ChannelOption
    - Add back constructor and mark it as @deprecated
    
    Result:
    
    No API breakage between 4.0 and 4.1

commit 3850cff0fce020df1c861e866a87ef6ba23006c1
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Apr 15 23:05:10 2015 +0200

    Allow to get version of available OpenSSL library
    
    Motivation:
    
    Sometimes it's useful to get informations about the available OpenSSL library that is used for the OpenSslEngine.
    
    Modifications:
    
    Add two new methods which allows to get the available OpenSSL version as either
    an int or an String.
    
    Result:
    
    Easy to access details about OpenSSL version.

commit 2b8104c852a42bc6b39f8bdf2413b9e770b08a82
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Apr 3 15:37:52 2015 -0700

    HTTP/2 Priority Tree Benchmark
    
    Motivation:
    There is no benchmark to measure the priority tree implementation performance.
    
    Modifications:
    Introduce a new benchmark which will populate the priority tree, and then shuffle parent/child links around.
    
    Result:
    A simple benchmark to get a baseline for the HTTP/2 codec's priority tree implementation.

commit f3fb77f4bce9d11d7b54878e91728674f6ee5342
Author: Louis Ryan <lryan@google.com>
Date:   Mon Apr 13 15:45:48 2015 -0700

    Have microbenchmarks produce a deployable artifact. Fix some minor miscellaneous issues.
    
    Motivation:
    Allows for running benchmarks from built jars which is useful in development environments that only take released artifacts.
    
    Modifications:
    Move benchmarks into 'main' from 'test'
    Add @State annotations to benchmarks that are missing them
    Fix timing issue grabbing context during channel initialization
    
    Result:
    Users can run benchmarks more easily.

commit e48e6e450957868b239de20a588f9c19f06c7f3e
Author: Trustin Lee <t@motd.kr>
Date:   Fri Apr 17 11:39:36 2015 +0900

    Fix checkstyle

commit c2de195f872506dacd5df5cd5507b49e1669790d
Author: Jakob Buchgraber <buchgr@google.com>
Date:   Mon Apr 13 09:25:27 2015 -0700

    Improve performance of AsciiString.equals(Object).
    
    Motivation:
    
    The current implementation does byte by byte comparison, which we have seen
    can be a performance bottleneck when the AsciiString is used as the key in
    a Map.
    
    Modifications:
    
    Use sun.misc.Unsafe (on supporting platforms) to compare up to eight bytes at a time
    and get closer to the performance of String.equals(Object).
    
    Result:
    
    Significant improvement (2x - 6x) in performance over the current implementation.
    
    Benchmark                                             (size)   Mode   Samples        Score  Score error    Units
    i.n.m.i.PlatformDependentBenchmark.arraysBytesEqual       10  thrpt        10 118843477.518 2347259.347    ops/s
    i.n.m.i.PlatformDependentBenchmark.arraysBytesEqual       50  thrpt        10 43910319.773   198376.996    ops/s
    i.n.m.i.PlatformDependentBenchmark.arraysBytesEqual      100  thrpt        10 26339969.001   159599.252    ops/s
    i.n.m.i.PlatformDependentBenchmark.arraysBytesEqual     1000  thrpt        10  2873119.030    20779.056    ops/s
    i.n.m.i.PlatformDependentBenchmark.arraysBytesEqual    10000  thrpt        10   306370.450     1933.303    ops/s
    i.n.m.i.PlatformDependentBenchmark.arraysBytesEqual   100000  thrpt        10    25750.415      108.391    ops/s
    i.n.m.i.PlatformDependentBenchmark.unsafeBytesEqual       10  thrpt        10 248077563.510  635320.093    ops/s
    i.n.m.i.PlatformDependentBenchmark.unsafeBytesEqual       50  thrpt        10 128198943.138  614827.548    ops/s
    i.n.m.i.PlatformDependentBenchmark.unsafeBytesEqual      100  thrpt        10 86195621.349  1063959.307    ops/s
    i.n.m.i.PlatformDependentBenchmark.unsafeBytesEqual     1000  thrpt        10 16920264.598    61615.365    ops/s
    i.n.m.i.PlatformDependentBenchmark.unsafeBytesEqual    10000  thrpt        10  1687454.747     6367.602    ops/s
    i.n.m.i.PlatformDependentBenchmark.unsafeBytesEqual   100000  thrpt        10   153717.851      586.916    ops/s

commit 221a9f50d4a63d12f177cf1d25d9d2fd3c9b606a
Author: Roger Kapsi <rkapsi@squarespace.com>
Date:   Thu Apr 16 18:27:11 2015 -0400

    Fix for ByteString#hashCode()
    
    Motivation:
    
    ByteString#hashCode() trashes its own hash code if it's being accessed concurrently
    
    Modifications:
    
    Pull the ByteString#hash into a local variable and calculate it locally.
    
    Result:
    
    ByteString#hashCode() is no longer returning a junk value.

commit 7aac50a79ac5e3d8b90808fb4102dddf8369ed6c
Author: nmittler <nathanmittler@google.com>
Date:   Mon Apr 13 15:17:51 2015 -0700

    Optimizing KObjectHashMap hashIndex()
    
    Motivation:
    
    The IntObjectHashMap benchmarks show the Agrona collections to be faster on put, lookup, and remove. One major difference is that we're using 2 modulus operations each time we increment the position index while iterating.  Agrona uses a mask instead.
    
    Modifications:
    
    Modified the KObjectHashMap to use masking rather than modulus when wrapping the position index. This requires that the capacity be a power of 2.
    
    Result:
    
    Improved performance of IntObjectHashMap.

commit 4e70523eddb94bfbcaa3ac12fe43435e90692df3
Author: Eric Anderson <ejona@google.com>
Date:   Tue Apr 14 10:54:25 2015 -0700

    The "null" ClassLoader is the bootstrap ClassLoader
    
    Motivation:
    Class.forName() documents that null will use bootstrap loader:
    http://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#forName-java.lang.String-boolean-java.lang.ClassLoader-
    
    But the link between "null" and bootstrap loader is even more explicit
    in ClassLoader's documentation:
    http://docs.oracle.com/javase/8/docs/api/java/lang/ClassLoader.html#getParent--
    
    The current code is trying to use the bootstrap loader but seems to have
    not been aware of the meaning of null.
    
    Modifications:
    Use "null" as the class loader when we want to load classes in the
    bootstrap loader.
    
    Result:
    More reliable ALPN/NPN loading and simpler code.

commit 854859ba69f88c115a82a1a84228e2a860a1a873
Author: Derek Troy-West <derek@troywest.com>
Date:   Thu Apr 16 21:45:32 2015 +1000

    Change AggregatedFullHttpMessage to contain a content ByteBuf
    
    Motivation:
    
    Other implementations of FullHttpMessage allow .toString to be called after the Message has been released
    This brings AggregatedFullHttpMessage into line with those impls.
    
    Modifications:
    
    - Changed AggregatedFullHttpMessage to no longer be a sub-class of DefaultByteBufHolder
    - Changes AggregatedFullHttpMessage to implement ByteBufHolder
    - Hold the content buffer internally to AggregatedFullHttpMessage
    - Implement the required content() and release() methods that were missing
    - Do not check refcnt when accessing content() (similar to DefaultFullHttpMessage)
    
    Result:
    
    A released AggregatedFullHttpMessage can have .toString called without throwing an exception

commit 970529e1a80850b30262917b4a1e134f1c2e5aee
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Apr 6 18:42:18 2015 -0700

    HTTP/2 Priority tree circular link
    
    Motivation:
    If an exclusive dependency change stream B should be an exclusive dependency of stream A is requested and stream B is already a child of stream A...then we will add B to B's own children map and create a circular link in the priority tree. This leads to an infinite recursive loop and a stack overflow exception.
    
    Modifications:
    -when removeAllChildren is called it should not remove the exclusive dependency.
    -unit test to ensure this case is covered.
    
    Result:
    No more circular link in the priority tree.

commit e36c1436b80399175fad55d09848c9f29da2174e
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Apr 14 17:11:09 2015 -0700

    ByteString misses encountered during forward port
    
    Motivation:
    While forward porting https://github.com/netty/netty/pull/3579 there were a few areas that had not been previously back ported.
    
    Modifications:
    Backport the missed areas to ensure consistency.
    
    Result:
    More consistent 4.1 and master branches.

commit 9a7a85dbe54f8ec7cddef8721f720feaeb7a16c9
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Mar 31 16:23:52 2015 -0700

    ByteString introduced as AsciiString super class
    
    Motivation:
    The usage and code within AsciiString has exceeded the original design scope for this class. Its usage as a binary string is confusing and on the verge of violating interface assumptions in some spots.
    
    Modifications:
    - ByteString will be created as a base class to AsciiString. All of the generic byte handling processing will live in ByteString and all the special character encoding will live in AsciiString.
    
    Results:
    The AsciiString interface will be clarified. Users of AsciiString can now be clear of the limitations the class imposes while users of the ByteString class don't have to live with those limitations.

commit 0d9ba81c061f75bb1cf64dfb5c739a1fa0dd5775
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Mar 4 15:23:34 2015 +0100

    Document the contract of Attribute.getAndSet(...) and set(...)
    
    Motivation:
    
    Attribute.getAndRemove() will return the value but also remove the AttributeKey itself from the AttributeMap. This may not
    what you want as you may want to keep an instance of it and just set it later again. Document the contract so the user know what to expect.
    
    Modifications:
    
    - Make it clear when to use AttributeKey.getAndRemove() / AttributeKey.remove() and when AttributeKey.getAndSet(null) / AttributeKey.set(null).
    
    Result:
    
    Less suprising behaviour.

commit 05498ee938565d90cb88ba096660ebeb44bc7fed
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Apr 14 09:36:48 2015 +0200

    Fix regression introduced by cherry-pick bd224286f5a9fa00432ecfd2291801b417fd4eb4

commit 6c3f5ab34d0f70e5d7c8b8fc9068f88f798b38a8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Apr 8 12:23:55 2015 +0200

    Add support for EC Keys when using SslServerContext
    
    Motivation:
    
    Sometimes it's useful to use EC keys and not DSA or RSA. We should support it.
    
    Modifications:
    
    Support EC keys and share the code between JDK and Openssl impl.
    
    Result:
    
    It's possible to use EC keys now.

commit bd224286f5a9fa00432ecfd2291801b417fd4eb4
Author: Eric Anderson <ejona@google.com>
Date:   Thu Mar 26 14:06:11 2015 -0700

    [#3531] Create SslContext.Builder
    
    Motivation:
    
    SslContext factory methods have gotten out of control; it's past time to
    swap to a builder.
    
    Modifications:
    
    New Builder class. The existing factory methods must be left as-is for
    backward compatibility.
    
    Result:
    
    Fixes #3531

commit e48b8f5c498b6f6e487f5a8d474b6066de7f1411
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Apr 10 15:23:00 2015 +0200

    [#3539] Correctly handle EPOLLRDHUP
    
    Motivation:
    
    As we missed to correctly handle EPOLLRDHUP we produce an IOException which is unnessary. This leads
    to have exceptionCaught(...) methods called.
    
    Modifications:
    
    When EPOLLRDHUP was received just close the socket and fail all pending writes.
    
    Result:
    
    Correctly handle of EPOLLRDHUP and so not miss-leading exceptions.

commit ab158a6ea43beb4990bb53cc991c1e070c98134e
Author: nmittler <nathanmittler@google.com>
Date:   Fri Apr 10 15:20:32 2015 -0700

    Adding basic benchmarks for IntObjectHashMap
    
    Motivation:
    
    It needs to be fast :)
    
    Modifications:
    
    Added a simple benchmark to the microbench module.
    
    Result:
    
    Yay, benchmarks!

commit c388f3f085d74fac7204c490ac2f1a9f659cfca9
Author: nmittler <nathanmittler@google.com>
Date:   Fri Apr 10 09:34:39 2015 -0700

    Removing Http2StreamRemovalPolicy
    
    Motivation:
    
    Due to a recent flurry of cleanup and fixes, we no longer need the stream removal policy to protect against recently removed streams. We should get rid of it.
    
    Modifications:
    
    Removed Http2StreamRemovalPolicy and everywhere it's used.
    
    Result:
    
    Fixes #3448

commit cc7ee002dd7e92857efc3c3a842ead22e16d1b57
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Apr 11 09:47:51 2015 -0700

    HTTP/2 Frame Writer Microbenchmark Fix
    
    Motivation:
    The Http2FrameWriterBenchmark JMH harness class name was not updated for the JVM arguments. The number of forks is 0 which means the JHM will share a JVM with the benchmarks.  Sharing the JVM may lead to less reliable benchmarking results and as doesn't allow for the command line arguments to be applied for each benchmark.
    
    Modifications:
    - Update the JMH version from 0.9 to 1.7.1.  Benchmarks wouldn't run on old version.
    - Increase the number of forks from 0 to 1.
    - Remove allocation of environment from static and cleanup AfterClass to using the Setup and Teardown methods. The forked JVM would not shut down correctly otherwise (and wait for 30+ seconds before timeing out).
    
    Result:
    Benchmarks that run as intended.

commit 4a79c5899cceb3e3f6e9bd041aa33e119c9d5274
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Apr 9 12:30:16 2015 -0700

    HTTP/2 Connection Listener Unchecked Exceptions
    
    Motivation:
    The DefaultHttp2Connection is not checking for RuntimeExceptions when invoking Http2Connection.Listener methods. This is a problem for a few reasons: 1. The state of DefaultHttp2Connection will be corrupted if a listener throws a RuntimeException. 2. If the first listener throws then no other listeners will be notified, which may further corrupt state that is updated as a result of listeners being notified.
    
    Modifications:
    - Document that RuntimeExceptions are not supported for Http2Connection.Listener methods, and will be logged as an error.
    - Update DefaultHttp2Connection to handle and exception for each listener that is notified, and be sure that 1 listener throwing an exception does not prevent others from being notified.
    
    Result:
    More robust DefaultHttp2Connection.

commit 4d02c3a040d47e240fd9574bb6dd48b15b9b7779
Author: garywu <garretwu@gmail.com>
Date:   Mon Apr 13 13:41:25 2015 +0800

    [#2925] Bug fix for NormalMemoryRegionCache overbooked for PoolThreadCache
    
    Motivation:
    
    When create NormalMemoryRegionCache for PoolThreadCache, we overbooked
    cache array size. This means unnecessary overhead for thread local cache
    as we will create multi cache enties for each element in cache array.
    
    Modifications:
    
    change:
    int arraySize = Math.max(1, max / area.pageSize);
    to:
    int arraySize = Math.max(1, log2(max / area.pageSize) + 1);
    
    Result:
    
    Now arraySize won't introduce unnecessary overhead.
    
     Changes to be committed:
    	modified:   buffer/src/main/java/io/netty/buffer/PoolThreadCache.java

commit 18627749a98591b29f4b9040af4608e6facbb429
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Apr 10 09:43:06 2015 +0200

    Let CompositeByteBuf implement Iterable
    
    Motivation:
    
    CompositeByteBuf has an iterator() method but fails to implement Iterable
    
    Modifications:
    
    Let CompositeByteBuf implement Iterable<ByteBuf>
    
    Result:
    
    Easier usage

commit aa1e537de40c7ecea3516a40e52f1101c0f88908
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Apr 9 21:03:49 2015 +0200

    [#3373] Rename class to match naming scheme
    
    Motivation:
    
    The ReplayingDecoderBuffer does not match the naming scheme we use for ByteBuf types.
    
    Modifications:
    
    Rename to ReplayingDecoderByteBuf to match naming scheme
    
    Result:
    
    Consistent naming

commit d8e5d421e13e05edfea9894aa4f226f8e1b03692
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Apr 11 06:44:32 2015 +0200

    Revert "Dereference when calling PooledByteBuf.deallocate()"
    
    This reverts commit 7094c7b7976e88bb65b71009ac7501025ca31bc3.

commit 7094c7b7976e88bb65b71009ac7501025ca31bc3
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Apr 10 15:46:53 2015 +0200

    Dereference when calling PooledByteBuf.deallocate()
    
    Motivation:
    
    We missed to dereference the chunk and tmpNioBuf when calling deallocate(). This means the GC can not collect these as we still hold a reference while have the PooledByteBuf in the recycler stack.
    
    Modifications:
    
    Dereference chunk and tmpNioBuf.
    
    Result:
    
    GC can collect things.

commit 1e8a2e69dbf852775a8ae679edee2d25d60bc392
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Apr 8 11:29:59 2015 +0200

    [#3592] Flush when writing HttpChunkedInput
    
    Motivation:
    
    We missed to flush the channel when using HttpChunkedInput (this is done when using SSL). This will result in a stale.
    
    Modifications:
    
    Replace ctx.write(...) with ctx.writeAndFlush(...)
    
    Result:
    
    Correctly working example.

commit 3e42292d8b5c995a2a8342a91a2a3c1ec807628a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Mar 20 05:15:22 2015 +0100

    Change PoolThreadCache to use LIFO for better cache performance
    
    Motiviation:
    
    At the moment we use FIFO for the PoolThreadCache which is sub-optimal as this may reduce the changes to have the cached memory actual still in the cpu-cache.
    
    Modification:
    
    - Change to use LIFO as this increase the chance to be able to serve buffers from the cpu-cache
    
    Results:
    
    Faster allocation out of the ThreadLocal cache.
    
    Before the commit:
    [xxx wrk]$ ./wrk -H 'Connection: keep-alive' -d 120 -c 256 -t 16 -s scripts/pipeline-many.lua  http://xxx:8080/plaintext
    Running 2m test @ http://xxx:8080/plaintext
      16 threads and 256 connections
      Thread Stats   Avg      Stdev     Max   +/- Stdev
        Latency    14.69ms   10.06ms 131.43ms   80.10%
        Req/Sec   283.89k    40.37k  433.69k    66.81%
      533859742 requests in 2.00m, 72.09GB read
    Requests/sec: 4449510.51
    Transfer/sec:    615.29MB
    
    After the commit:
    [xxx wrk]$ ./wrk -H 'Connection: keep-alive' -d 120 -c 256 -t 16 -s scripts/pipeline-many.lua  http://xxx:8080/plaintext
    Running 2m test @ http://xxx:8080/plaintext
      16 threads and 256 connections
      Thread Stats   Avg      Stdev     Max   +/- Stdev
        Latency    16.38ms   26.32ms 734.06ms   97.38%
        Req/Sec   283.86k    39.31k  361.69k    83.38%
      540836511 requests in 2.00m, 73.04GB read
    Requests/sec: 4508150.18
    Transfer/sec:    623.40MB

commit a87c86dc0d8611fc66b66f0a3d8441a7dee7ca1b
Author: nmittler <nathanmittler@google.com>
Date:   Fri Apr 10 09:13:32 2015 -0700

    Change Http2Settings to use char keys.
    
    Motivation:
    
    Now that we have a CharObjectHashMap, we should change Http2Settings to use it.
    
    Modifications:
    
    Changed Http2Settings to extend CharObjectHashMap rather than IntObjectHashMap.
    
    Result:
    
    Http2Settings uses less memory to store keys.

commit aebbb862acd1ffaec58c05b658f62f6568ffbcc8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Mar 5 14:19:13 2015 +0100

    Add support for ALPN when using openssl + NPN client mode and support for CipherSuiteFilter
    
    Motivation:
    
    To support HTTP2 we need APLN support. This was not provided before when using OpenSslEngine, so SSLEngine (JDK one) was the only bet.
    Beside this CipherSuiteFilter was not supported
    
    Modifications:
    
    - Upgrade netty-tcnative and make use of new features to support ALPN and NPN in server and client mode.
    - Guard against segfaults after the ssl pointer is freed
    - support correctly different failure behaviours
    - add support for CipherSuiteFilter
    
    Result:
    
    Be able to use OpenSslEngine for ALPN / NPN for server and client.

commit e3374e5b1d6091b030bc956318fde1da62915c27
Author: nmittler <nathanmittler@google.com>
Date:   Thu Apr 9 09:48:58 2015 -0700

    Removing direct access to HTTP/2 child streams.
    
    Motivation:
    
    We've removed access to the activeStreams collection, we should do the same for the children of a stream to provide a consistent interface.
    
    Modifications:
    
    Moved Http2StreamVisitor to a top-level interface. Removed unnecessary child operations from the Http2Stream interface so that we no longer require a map structure.
    
    Result:
    
    Cleaner and more consistent interface for iterating over child streams.

commit 3354296c9ff955e4315d32e0f85019ab209475f3
Author: nmittler <nathanmittler@google.com>
Date:   Fri Apr 3 13:36:28 2015 -0700

    Auto-generating primitive collections for int and char keys.
    
    Motivation:
    
    Currently we have IntObjectMap/HashMap, but it will be useful to support other primitive-based maps.
    
    Modifications:
    
    Moved the code int the current maps to template files and run Groovy code from  common/pom.xml to apply the templates.
    
    Result:
    
    Autogeneration of int and char-based hash maps.

commit c9adb416362cca3190eafbeaab13e6e8f6ab433c
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Wed Mar 18 15:41:08 2015 +0300

    Refactor tests for compression codecs
    
    Motivation:
    
    Too many duplicated code of tests for different compression codecs.
    
    Modifications:
    
    - Added abstract classes AbstractCompressionTest, AbstractDecoderTest and AbstractEncoderTest which contains common variables and tests for any compression codec.
    - Removed common tests which are implemented in AbstractDecoderTest and AbstractEncoderTest from current tests for compression codecs.
    - Implemented abstract methods of AbstractDecoderTest and AbstractEncoderTest in current tests for compression codecs.
    - Added additional checks for current tests.
    - Renamed abstract class IntegrationTest to AbstractIntegrationTest.
    - Used Theories to run tests with head and direct buffers.
    - Removed code duplicates.
    
    Result:
    
    Removed duplicated code of tests for compression codecs and simplified an addition of tests for new compression codecs.

commit 6496d2dbc7badfb586999ea63ff6bc66d76b100a
Author: JongYoon Lim <jy1105.lim@samsung.com>
Date:   Wed Apr 8 15:05:07 2015 +0900

    Motivation: If there are no readable bytes, it's unnecessary to go through javaChannel().write().
    
    Modification:
    If the readableBytes() is zero, then just return.
    
    Result:
    The logic can be easy to understand and a little faster than before.

commit 83ce8a9187a11b7bf38fd91841fc0b03d3e24d80
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Mar 28 13:32:19 2015 -0700

    HTTP/2 Prevent modification of activeStreams while iterating
    
    Motivation:
    The Http2Connection interface exposes an activeStreams() method which allows direct iteration over the underlying collection. There are a few places that make copies of this collection to avoid modification while iterating, and a few places that do not make copies. The copy operation can be expensive on hot code paths and also we are not consistently iterating over the activeStreams collection.
    
    Modifications:
    - The Http2Connection interface should reduce the exposure of the underlying collection and just expose what is necessary for the interface to function.  This is just a means to iterate over the collection.
    - The DefaultHttp2Connection should use this new interface and protect it's internal state while iteration is occurring.
    
    Result:
    Reduction in surface area of the Http2Connection interface.  Consistent iteration of the set of active streams.  Concurrent modification exceptions are handled in 1 encapsulated spot.

commit d5d932a7399d03b811781b08c23b16c07851ad78
Author: Jakob Buchgraber <buchgr@google.com>
Date:   Thu Mar 19 18:36:24 2015 -0700

    Fix GOAWAY logic in Http2Encoder and Http2Decoder.
    
    Motivation:
    
    1) The current implementation doesn't allow for HEADERS, DATA, PING, PRIORITY and SETTINGS
       frames to be sent after GOAWAY.
    
    2) When receiving or sending a GOAWAY frame, all streams with ids greater than the lastStreamId
       of the GOAWAY frame should be closed. That's not happening.
    
    Modifications:
    
    1) Allow sending of HEADERS and DATA frames after GOAWAY for streams with ids < lastStreamId.
    2) Always allow sending PING, PRIORITY AND SETTINGS frames.
    3) Allow sending multiple GOAWAY frames with decreasing lastStreamIds.
    4) After receiving or sending a GOAWAY frame, close all streams with ids > lastStreamId.
    
    Result:
    
    The GOAWAY handling is more correct.

commit 3ae343b768bae5973a5634c8e287ae1173e30248
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Apr 6 17:11:20 2015 -0700

    HTTP/2 DefaultHttp2Connection recursive call fix
    
    Motivation:
    There are methods to manipulate the prioritzable count for streams which have the '0' postfix which are designed to be used during recursion.  However these methods are calling out to an external method without the '0' during the recursive process.  This is doing uneccessary conditional checks during recursion.
    
    Modifications:
    Change the decrementPrioritizableForTree to decrementPrioritizableForTree0 while in recursive method.
    Change the incrementPrioritizableForTree to incrementPrioritizableForTree0 while in recursive method.
    
    Result:
    Less overhead during recursive calls.

commit 86edc88448ce0f27304f33b788afa1d003edb284
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Apr 2 14:39:46 2015 -0700

    HTTP/2 LifecycleManager and Http2ConnectionHandler interface clarifications
    
    Motiviation:
    The interface provided by Http2LifecycleManager is not clear as to how the writeXXX methods should behave.  The implementation of this interface from the Http2ConnectionHandler's perspecitve is unclear what writeXXX means in this context.
    
    Modifications:
    - Method names in Http2LifecycleManager and Http2ConnectionHandler should be renamed and comments should clarify the interfaces.
    
    Results:
    Http2LifecycleManager is more clear and Http2ConnectionHandler's implementation makes sense w.r.t to return values.

commit 190cbf55e435add782ee2976f40e0e7d11916895
Author: Frederic Bregier <fredbregier@free.fr>
Date:   Mon Apr 6 00:35:00 2015 +0200

    Fix incorrect null value check in TrafficCounter
    
    In TrafficCounter, a recent change makes the contract of the API (the
    constructor) wrong and lead to issue with GlobalChannelTrafficCounter
    where executor must be null.
    
    Motivation:
    TrafficCounter executor argument in constructor might be null, as
    explained in the API, for some particular cases where no executor are
    needed (relevant tasks being taken by the caller as in
    GlobalChannelTrafficCounter).
    A null pointer exception is raised while it should not since it is
    legal.
    
    Modifications:
    Remove the 2 null checking for this particular attribute.
    Note that when null, the attribute is not reached nor used (a null
    checking condition later on is applied).
    
    Result:
    No more null exception raized while it should not.
    
    This shall be made also to 4.0, 4.1 (present) and master. 3.10 is not
    concerned.

commit 609e065fcf830d73b606d2d786af489e0b7dc0b6
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Tue Mar 31 14:23:51 2015 -0700

    HTTP/2 Headers Code Using String instead of AsciiString
    
    Motivation:
    The HTTP/2 headers code should be using binary string (currently AsciiString) objects instead of String objects. The DefaultHttp2HeadersEncoder was still using String for sensitiveHeaders.
    
    Modifications:
    - Remove the usage of String from DefaultHttp2HeadersEncoder.
    - Introduce an interface to determine if a header name/value is sensitive or not to 1. prevent necessarily creating/copying sets. 2. Allow the name/value to be considered when checking if sensitive.
    
    Result:
    No more String in DefaultHttp2HeadersEncoder and less required set creation/operations.

commit 9517edd4983e632f23a58da5633c630fe9c61a51
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Apr 3 09:53:57 2015 -0700

    HTTP/2 RST_STREAM in IDLE
    
    Motivation:
    The spec requires that a RST_STREAM received on an IDLE stream results in a connection error. This is not happening.
    
    Modifications:
    Check for this condition when a RST_STREAM is received in DefaultHttp2ConnectionDecoder.
    
    Result:
    More spec compliant.  Fixes https://github.com/netty/netty/issues/3573.

commit e5d01c4caf07c941199d4531eb8c251664b49ae4
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Apr 3 13:10:11 2015 -0700

    HTTP/2 HEADERS stream dependency fix
    
    Motivation:
    The DefaultHttp2ConnectionDecoder has the setPriority call after the Http2FrameListener is notified of the change. The setPriority call has additional verification logic and may even create the dependency stream and so it must be before the Http2FrameListener is notified.
    
    Modifications:
    The DefaultHttp2ConnectionDecoder should treat the setPriority call in the same for the HEADERS and PRIORITY frame (call it before notifying the listener).
    
    Result:
    Http2FrameListener should see correct state when a HEADERS frame has a stream dependency that has not yet been created yet.  Fixes https://github.com/netty/netty/issues/3572.

commit e40c27d9ed1678207c1ca4554e70ed5e2534d93f
Author: Jakob Buchgraber <buchgr@google.com>
Date:   Fri Apr 3 10:51:29 2015 -0700

    Avoid object allocations for HTTP2 child streams.
    
    Motivation:
    
    We are allocating a hash map for every HTTP2 Stream to store it's children.
    Most streams are leafs in the priority tree and don't have children.
    
    Modification:
    
     - Only allocate children when we actually use them.
     - Make EmptyIntObjectMap not throw a UnsupportedOperationException on remove, but return null instead (as is stated in it's javadoc).
    
    Result:
    
    Fewer unnecessary allocations.

commit 330bc39d9142c8b1e34a94aba29cddc361b89b07
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Fri Apr 3 11:52:55 2015 -0700

    Backporting PrimitiveCollections class
    
    Motivation:
    PrimitiveCollections is not in the 4.1 branch.  It is needed by HTTP/2.
    
    Modifications:
    Backport this class.
    
    Result:
    PrimitiveCollections is in 4.1.

commit 35b9aa930209ac070436085efe351f7b522df5ff
Author: Jakob Buchgraber <buchgr@google.com>
Date:   Thu Apr 2 20:28:28 2015 -0700

    Replace LinkedHashSet by ArrayList to avoid iterators.
    
    Motivation:
    
    In a simple load test that creates and closes several 10k streams per second
    I have seen Iterator objects using roughly 1.6% of the total committed heap.
    
    Modifications:
    
    Use an ArrayList instead of a LinkedHashSet to store the connection listeners.
    That way we can iterate over the list without creating an iterator every time.
    
    Result:
    
    Zero Iterator allocations due to notifying connection listeners.

commit ef729e70213adbfca7b26c2c337eb5d12839fbad
Author: nmittler <nathanmittler@google.com>
Date:   Wed Apr 1 07:51:11 2015 -0700

    Allow non-standard HTTP/2 settings
    
    Motivation:
    
    The Http2Settings class currently disallows setting non-standard settings, which violates the spec.
    
    Modifications:
    
    Updated Http2Settings to permit arbitrary settings. Also adjusting the default initial capacity to allow setting all of the standard settings without reallocation.
    
    Result:
    
    Fixes #3560

commit 2e509f7bb7a365741bdf79948c51b5e91fa3ce0a
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 2 14:54:29 2015 +0900

    Fix unbounded expansion of cumulative buffer in SslHandler
    
    Related: #3567
    
    Motivation:
    
    SslHandler.channelReadComplete() forgets to call
    super.channelReadComplete(), which discards read bytes from the
    cumulative buffer.  As a result, the cumulative buffer can expand its
    capacity unboundedly.
    
    Modifications:
    
    Call super.channelReadComplete() instead of calling
    ctx.fireChannelReadComplete()
    
    Result:
    
    Fixes #3567

commit 7f2ddb21626c7f0280aab2be0fd762169d3155aa
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Mar 25 12:57:14 2015 -0700

    HTTP/2 Closed Streams Conditional Priority Tree Removal
    
    Motivation:
    The HTTP/2 specification allows for closed (and streams in any state) to exist in the priority tree. The current code removes streams from the priority tree as soon as they are closed (subject to the removal policy). This may lead to undesired distribution of resources from the peer's perspective.
    
    Modifications:
    - We should only remove streams from the priority tree when they have no descendant streams in a viable state.
    - We should track when tree edges change or nodes are removed if inviable nodes can then be removed.
    
    Result:
    Priority tree doesn't remove closed streams until descendant are all closed, or there are no descendants.

commit ba9f2143030d1b781724f04adaac254af3326930
Author: nmittler <nathanmittler@google.com>
Date:   Mon Mar 30 11:34:57 2015 -0700

    Removing unnecessary use of Math.ceil in HTTP/2 priority algorithm.
    
    Motivation:
    
    We're currently using Math.ceil which isn't necessary. We should exchange for a lighter weight operation.
    
    Modifications:
    
    Changing the logic to just ensure that we allocate at least one byte to the child rather than always performing a ceil.
    
    Result:
    
    Slight performance improvement in the priority algorithm.

commit 9737cc6cc9436fcc032daef53e194da46b039ba5
Author: nmittler <nathanmittler@google.com>
Date:   Fri Mar 20 10:04:38 2015 -0700

    Include error code and message in GOAWAY events.
    
    Motivation:
    
    The Connection.Listener GOAWAY event handler currently provides no additional information, requiring applications to hack in other ways to get at the error code and debug message.
    
    Modifications:
    
    Modified the Connection.Listener interface to pass on the error code and message that triggered the GOAWAY.
    
    Result:
    
    Application can now use Connection.Listener for all GOAWAY processing.

commit 44eeb5f6b4a59b64788f7cfad9410ea6ae71195b
Author: Trustin Lee <t@motd.kr>
Date:   Tue Mar 31 15:08:52 2015 +0900

    Fix intermittent test failure in LoggingHandlerTest
    
    Motivation:
    
    LoggingHandlerTest sometimes failure due to unexpected log messages
    logged due to the automatic reclaimation of thread-local objects.
    
      Expectation failure on verify:
        Appender.doAppend([DEBUG] Freed 3 thread-local buffer(s) from thread: nioEventLoopGroup-23-0): expected: 1, actual: 0
        Appender.doAppend([DEBUG] Freed 9 thread-local buffer(s) from thread: nioEventLoopGroup-23-1): expected: 1, actual: 0
        Appender.doAppend([DEBUG] Freed 2 thread-local buffer(s) from thread: nioEventLoopGroup-23-2): expected: 1, actual: 0
        Appender.doAppend([DEBUG] Freed 4 thread-local buffer(s) from thread: nioEventLoopGroup-26-0): expected: 1, actual: 0
        Appender.doAppend(matchesLog(expected: ".+CLOSE$", got: "[id: 0xembedded, embedded => embedded] CLOSE")): expected: 1, actual: 0
    
    Modifications:
    
    Add the mock appender to the related logger only
    
    Result:
    
    No more intermittent test failures

commit f4e527c64df0b7ce2c5f7997a782eec481ac22a4
Author: Trustin Lee <t@motd.kr>
Date:   Tue Mar 31 11:31:54 2015 +0900

    Don't trigger IOException at ChunkedStream.isEndOfInput()
    
    Related: #3368
    
    Motivation:
    
    ChunkedWriteHandler checks if the return value of
    ChunkedInput.isEndOfInput() after calling ChunkedInput.close().
    
    This makes ChunkedStream.isEndOfInput() trigger an IOException, which is
    originally triggered by PushBackInputStream.read().
    
    By contract, ChunkedInput.isEndOfInput() should not raise an IOException
    even when the underlying stream is closed.
    
    Modifications:
    
    Add a boolean flag that keeps track of whether the underlying stream has
    been closed or not, so that ChunkedStream.isEndOfInput() does not
    propagate the IOException from PushBackInputStream.
    
    Result:
    
    Fixes #3368

commit 6fbca14f8aedb1f0bdd7bdd62f77f6854ee48f5f
Author: nmittler <nathanmittler@google.com>
Date:   Fri Mar 27 15:37:20 2015 -0700

    Cleaning up the initialization of Http2ConnectionHandler
    
    Motivation:
    
    It currently takes a builder for the encoder and decoder, which makes it difficult to decorate them.
    
    Modifications:
    
    Removed the builders from the interfaces entirely. Left the builder for the decoder impl but removed it from the encoder since it's constructor only takes 2 parameters. Also added decorator base classes for the encoder and decoder and made the CompressorHttp2ConnectionEncoder extend the decorator.
    
    Result:
    
    Fixes #3530

commit cb63e34bda53adbeb702f7da667d2a59a218d465
Author: nmittler <nathanmittler@google.com>
Date:   Mon Mar 30 09:41:28 2015 -0700

    Removing unnecessary sort in remote flow controller.
    
    Motivation:
    
    The DefaultHttp2RemoteFlowController's priority algorithm doesn't really need to sort the children by weight since it already fairly distributes data based on weight.
    
    Modifications:
    
    Removing the sorting in the priority algorithm and updating one test to allow a small bit of variability in the results.
    
    Result:
    
    Slight improvement on the performance of the priority algorithm.

commit a2428c7e47aa3ebd172f361e5f2b498919062945
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Mar 13 16:12:37 2015 +0100

    Add supported for X509ExtendedTrustManager when using OpenSslEngine
    
    Motivation:
    
    For some use cases X509ExtendedTrustManager is needed as it allows to also access the SslEngine during validation.
    
    Modifications:
    
    Add support for X509ExtendedTrustManager on java >= 7
    
    Result:
    
    It's now possible to use X509ExtendedTrustManager with OpenSslEngine

commit bdf0bddc8544666ce73b0e7e486ddccf214e79ef
Author: Trustin Lee <t@motd.kr>
Date:   Sun Mar 29 16:58:50 2015 +0900

    Enforce a release is made with JDK 1.7 (and not w/ 1.8+)
    
    Motivations:
    
    JDK 1.8 adds default methods to collections classes that reference
    classes that don't exist in JDK 7. That's binary compatible,
    but not source compatible.
    
    Modifications:
    
    Enforce JDK version to be 1.7.* when releasing
    
    Result:
    
    Fixes #3548

commit ab74dccd235dcd10bd14685c7095a6a647b4a037
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Wed Mar 25 16:29:14 2015 -0700

    Http/2 Priority on CLOSED stream
    
    Motivation:
    The encoder/decoder currently do not handle streams which have previously existed but no longer exist because they were closed. The specification requires supporting this.
    
    Modifications:
    - encoder/decoder should tolerate the frame or the dependent frame not existing in the streams map due to the fact that it may have previously existed.
    
    Result:
    encoder/decoder are more compliant with the specification.

commit 0d3a6e051100993b06f2870d2727d92dabec456c
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Mar 23 10:52:11 2015 -0700

    HTTP/2 Decoder reduce preface conditional checks
    
    Motivation:
    The DefaultHttp2ConnectionDecoder class is calling verifyPrefaceReceived() for almost every frame event at all times.
    The Http2ConnectionHandler class is calling readClientPrefaceString() on every decode event.
    
    Modifications:
    - DefaultHttp2ConnectionDecoder should not have to continuously call verifyPrefaceReceived() because it transitions boolean state 1 time for each connection.
    - Http2ConnectionHandler should not have to continuously call readClientPrefaceString() because it transitions boolean state 1 time for each connection.
    
    Result:
    - Less conditional checks for the mainstream usage of the connection.

commit 2bf592c50fccda7d8cda2e5f1b86142a9b2b8c34
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Mar 28 18:41:09 2015 -0700

    Backport of HTTP/2 Microbenchmark fail.
    
    Motivation:
    The backport of a6c729bdf82abd4627cb1b5d90bfe320377f6282 failed.
    
    Modifications:
    - Make sure the interfaces are correctly implemented when backporting.
    
    Result:
    Microbenchmark compiles and runs on 4.1 branch.

commit bb059c070f5d3444cd395574e47f8ddcc3e96edf
Author: nmittler <nathanmittler@google.com>
Date:   Sat Mar 28 09:23:58 2015 -0700

    Decoupling allocation from writing in HTTP/2 outbound flow control
    
    Motivation:
    
    The current DefaultHttp2RemoteFlowController's writePendingBytes currently operates in 2 passes. The first allocates bytes and optionally writes some frames. The second pass just loops across all active streams and writes all remaining bytes.
    
    If streams can be removed/added as a side effect of writing (EOS or error) then we need to take more care when the write actually occurs. Moving all of the writes to the second loop (across active streams) is simpler since we can just make a copy of the list and not worry about any restructuring of the priority tree that may result.
    
    Modifications:
    
    Modified DefaultHttp2RemoteFlowController.writePendingBytes to only allocate bytes on the first pass and then write any allocated bytes on the second pass.
    
    Result:
    
    Side effects resulting from writing should no longer impact the flow control algorithm.

commit 2dda917f272f315c84746b83bf91fab785de3bac
Author: scottmitch <scott.k.mitch1@gmail.com>
Date:   Wed Feb 4 08:00:43 2015 -0500

    Http2DefaultFrameWriter microbenchmark
    
    Motivation:
    A microbenchmark will be useful to get a baseline for performance.
    
    Modifications:
    - Introduce a new microbenchmark which tests the Http2DefaultFrameWriter.
    - Allow benchmarks to run without thread context switching between JMH and Netty.
    
    Result:
    Microbenchmark exists to test performance.

commit 23f881b382b127b6e0e7016413f389209376e932
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Mar 26 13:01:22 2015 -0700

    Comment punctuation cleanup
    
    Motivation:
    Commit d857b16d76aec487627df1cea6185714859eb15e introduced some comments that had no punctuation.
    
    Modifications:
    Add punctuation.
    
    Result:
    Comments have punctuation.

commit d857b16d76aec487627df1cea6185714859eb15e
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Sat Mar 14 12:58:30 2015 -0700

    Http/2 RST_STREAM frame robustness
    
    Motivation:
    The Http2ConnectionHandler writeRstStream method allows RST_STREAM frames to be sent when we do not know about the stream and after a RST_STREAM frame has already been sent.  This may lead to sending frames when we should not according to the HTTP/2 spec. There is also the potential to notify the closeListener multiple times if the closeStream method is called multiple times.
    
    Modifications:
    - Prevent RST_STREAM from being sent if we don't know about the stream, or if we already sent the RST_STREAM.
    - Prevent the closeListener from being notified multiple times.
    
    Result:
    More robust writeRstStream logic in boundary conditions.

commit 18abc6d8937773895ee38a3cfb1fd9003f5e3f36
Author: David Dossot <david@dossot.net>
Date:   Tue Mar 24 14:15:40 2015 -0700

    Fix example in CookieDecoder Javadoc
    
    - CookieDecoder.decode() is a static method.

commit 6dfa1f2d9286d9a4cb4d418eeed5c111f40fe968
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Mon Mar 16 21:24:24 2015 -0700

    Http2 draft 17
    
    Motivation:
    There was a new draft for HTTP/2.  We should support the new draft.
    
    Modifications:
    - Review the HTTP/2 draft 17 specification, and update code to reflect changes.
    
    Result:
    Support for HTTP/2 draft 17.

commit b0e7992c16690fef42bc8ad1d1c3d34eda5922fd
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Mar 19 17:33:14 2015 -0700

    Jetty ALNPN and NPN updates plus backport
    
    Motivation:
    There are new versions of the ALPN and NPN dependencies.  There was also some backport misses in the pom file related to ALPN/NPN.
    
    Modifications:
    - Add new versions for ALPN/NPN dependencies.
    - Backport missed pieces from pom.xml.
    
    Result:
    Updated version of ALPN/NPN versions.

commit a24627aa36d6bb4dd3329a968e1b327d6738250b
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Mar 19 16:55:45 2015 -0700

    HTTP/2 codec missing from all/pom.xml
    
    Motivation:
    The codec-http2 module was excluded from the all/pom.xml.
    
    Modifications:
    Include the codec-http2 dependency in the all/pom.xml.
    
    Results:
    Projects including the all dependency get codec-http2.

commit d94eab76b612d8d8ed018101eaaafea0e63683ee
Author: Scott Mitchell <scott_mitchell@apple.com>
Date:   Thu Mar 19 17:11:24 2015 -0700

    HTTP/2 examples run script support
    
    Motivation:
    The example script has some changes that have not yet been backported.  These changes should be backported.
    
    Modifications:
    run-example.sh changes related to http/2 are backported
    
    Result:
    HTTP/2 examples can be run on the 4.1 branch.

commit 2ebf07e62234d02804a6707957288f4292294f16
Author: Pierre DAL-PRA <dalpra.pierre@gmail.com>
Date:   Fri Mar 20 16:42:40 2015 +0100

    Small typos fixes in Channel's Javadoc

commit 8e04d706deaa4433d1ccd80c879cdb9f328831a6
Author: Jakob Buchgraber <buchgr@google.com>
Date:   Tue Mar 10 13:57:13 2015 -0700

    Have FlowState.cancel take a Throwable and code cleanup.
    
    Motivation:
    
    - In FlowState.write(...) we are currently swalloing an exception.
    - In my previous commit I introduced a compiler warning by not making
      a local variabe final.
    
    Modifications:
    
    - Have FlowState.cancel() take a Throwable.
    - Make the variable final.
    
    Result:
    
    No more swallowed exceptions and warnings.

commit 9bad408de54156a99d5f3614f9766ca16d584c0e
Author: Jakob Buchgraber <buchgr@google.com>
Date:   Wed Mar 18 14:09:19 2015 -0700

    HTTP2: Close encoder and decoder on channelInactive and initialize clientPrefaceString on handlerAdded.
    
    Motivation:
    
    - The encoder and decoder should be closed right after the handler releases its resources.
    - The clientPrefaceString is allocated in the constructor but releases in handlerRemoved.
      If the handler is never added to the pipeline, the clientPrefaceString will never be
      released.
    
    Modifications:
    
    - Call encoder.close() and decoder.close() on channelInactive.
    - Release the clientPrefaceString on handlerRemoved.
    
    Result:
    
    - The encoder and decoder get closed right after the handler's resources are freed.
    - It's easier to verify that the clientPrefaceString will also get released.

commit 3405aee2abf990d1f6078eb27da1b0035ab34769
Author: JongYoonLim <seedengine@gmail.com>
Date:   Thu Mar 19 14:25:19 2015 +0900

    Returns after encoding each message not do check following instance types
    
    Motivation:
    Current AbstractMemcacheObjectEncoder does unnecessary message type checking if the message is MemcacheMessage type.
    
    Modifications:
    Returns after encoding MemcacheMessage message.
    
    Result:
    Small performance improvement for this encoder.

commit d5e67032b50cdca4b018e37e16d7071c32ac15b5
Author: JongYoonLim <seedengine@gmail.com>
Date:   Thu Mar 19 15:03:15 2015 +0900

    fix typo

commit baa5990e34747d5035251da96b036dd648bac57a
Author: Wouter <mail@wouterh.nl>
Date:   Wed Mar 18 11:09:47 2015 +0100

    Fix typo in javadoc

commit 61859eefa02e2870beac268e0f1ece2a101acda5
Author: Trustin Lee <t@motd.kr>
Date:   Wed Mar 18 15:53:52 2015 +0900

    Safely encode Strings to ASCII
    
    (Ported @luciferous's changes against 3.10)
    
    Motivation:
    
    The current implementation of the encoder writes each character of the
    String as a single byte to the buffer, however not all characters are
    mappable to a single byte.
    
    Modifications:
    
    If a character is outside the ASCII range, it's converted to '?'.
    
    Result:
    
    A safer encoder for String to ASCII, which substitutes unmappable
    characters with'?'.

commit 0fe67cfba5f655ab545f5ee103bf71bc4df9d5ba
Author: nmittler <nathanmittler@google.com>
Date:   Tue Mar 17 07:52:02 2015 -0700

    Using public LogLevel for HTTP/2 frame logging.
    
    Motivation:
    
    The Http2FrameLogger is currently using the internal logging classes. We should change this so that it's using the public classes and then converts internally.
    
    Modifications:
    
    Modified Http2FrameLogger and the examples to use the public LogLevel class.
    
    Result:
    
    Fixes #2512

commit 9ccc1f31551784075f7115bd8245fa8f23dd8e71
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Mon Mar 16 17:26:07 2015 +0300

    Update jUnit version to 4.12
    
    Motivation:
    
    Too many new features in the new release of jUnit.
    https://github.com/junit-team/junit/blob/master/doc/ReleaseNotes4.12.md
    
    Modifications:
    
    - Changed version of jUnit from 4.11 to 4.12 in the parent pom.
    
    Result:
    
    Allows using new testing features.

commit 1d061bbb27ca32995d2bf46c0385296889be4c35
Author: Trustin Lee <t@motd.kr>
Date:   Tue Mar 17 17:23:30 2015 +0900

    Hide password in exception messages of SocksAuthRequest
    
    Related: #3504
    
    Motivation:
    
    There are two places in the SocksAuthRequest constructor where an
    IllegalArgumentException is thrown with a password as part of the
    exception message.
    
    This constitutes mishandling of confidential information, which can
    compromise user privacy and is flagged as critical by security scanners.
    
    Modifications:
    
    Mask the password in the exception messages
    
    Result:
    
    No unexpected password leak

commit a97e413a659b8f576112eae803d3a7c6314e36f8
Author: Leonardo Freitas Gomes <leonardo.f.gomes@gmail.com>
Date:   Sat Mar 14 20:03:40 2015 +0100

    Ensure server preference order in ALPN
    
    Motivation:
    With the current implementation the client protocol preference list
    takes precedence over the one of the server, since the select method
    will return the first item, in the client list, that matches any of the
    protocols supported by the server. This violates the recommendation of
    http://tools.ietf.org/html/rfc7301#section-3.2.
    
    It will also fail with the current implementation of Chrome, which
    sends back Extension application_layer_protocol_negotiation, protocols:
    [http/1.1, spdy/3.1, h2-14]
    
    Modifications:
    Changed the protocol negotiator to prefer server’s list. Added a test
    case that demonstrates the issue and that is fixed with the
    modifications of this commit.
    
    Result:
    Server’s preference list is used.

commit c91eaace5e5691ae05c0854d29a2524d94166e44
Author: nmittler <nathanmittler@google.com>
Date:   Sat Mar 14 18:38:35 2015 -0700

    Cleaning up HTTP/2 method names for max_concurrent_streams
    
    Motivation:
    
    The current documentation for Endpoint methods referring to concurrent streams and the SETTINGS_MAX_CONCURRENT_STREAMS setting are a bit confusing.
    
    Modifications:
    
    Renamed a few of the methods and added more clear documentation.
    
    Result:
    
    Fixes #3451

commit fe12d08efe327b81d8fc5d01333eef6b75fcac16
Author: Jakob Buchgraber <buchgr@google.com>
Date:   Fri Mar 13 19:04:04 2015 -0700

    Remove dead code from DefaultHttp2ConnectionEncoder.
    
    Motivation:
    
    There are two writeRstStream methods in the DefaultHttp2ConnectionEncoder.
    One of the two is neither used nor part of the Http2FrameWriter interface.
    
    Modifications:
    
    Delete the method.
    
    Result:
    
    Fewer lines of dead code.

commit d5963e069dacd757697349ab8c3b5e0d808b54e1
Author: Jakob Buchgraber <buchgr@google.com>
Date:   Wed Mar 11 15:42:34 2015 -0700

    Remove Frame class from DefaultHttp2RemoteFlowController. Fixes #3488
    
    Motivation:
    
    For every write of a flow controlled frame (HEADERS, DATA) we are allocating
    a Frame object that is not necessary anymore as it does not maintain any
    state, besides the payload.
    
    Modifications:
    
    Remove the Frame class and directly add the payload to the pending write queue.
    
    Result:
    
    One few object allocation per write of a flow controlled frame.

commit 18443efeabb0f4042d1ca4adbb0257b4a7af8acd
Author: Robert.Panzer <robert.panzer@me.com>
Date:   Mon Mar 9 11:32:40 2015 +0100

    Add support for byte order to LengthFieldPrepender
    
    Motivation:
    
    While the LengthFieldBasedFrameDecoder supports a byte order the LengthFieldPrepender does not.
    That means that I can simply add a LengthFieldBasedFrameDecoder with ByteOrder.LITTLE_ENDIAN to my pipeline
    but have to write my own Encoder to write length fields in little endian byte order.
    
    Modifications:
    
    Added a constructor that takes a byte order and all other parameters.
    All other constructors delegate to this one with ByteOrder.BIG_ENDIAN.
    LengthFieldPrepender.encode() uses this byte order to write the length field.
    
    Result:
    
    LengthFieldPrepender will write the length field in the defined byte order.

commit c7827dc16a7cdb0c5e84bef4075be82911788c7f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Mar 13 13:25:11 2015 +0100

    First load RuntimeException to prevent segfault on error
    
    Motivation:
    
    When an error happens during loading the native library it may try to generate a new RuntimeException before the RuntimeException is loaded.
    
    Modifications:
    
    - Load RuntimeException as first
    
    Result:
    
    No more segfaults possible

commit 44615f6cb2d1ab3e7c2f7bac63ae1a76b290bc34
Author: nmittler <nathanmittler@google.com>
Date:   Thu Mar 12 14:01:43 2015 -0700

    Optimizations for Http2FrameLogger
    
    Motivation:
    
    The logger was always performing a hex dump of the ByteBufs regarless whether or not the log would take place.
    
    Modifications:
    
    Fixed the logger to avoid serializing the ByteBufs and calling the varargs method if logging is not enabled.
    
    Result:
    
    The loggers should run MUCH faster when disabled.

commit 3df7b4dac746c2af2d65528bf85495eb530aba41
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Mar 6 13:05:43 2015 +0100

    Respect -Djava.net.preferIPv4Stack when using epoll transport
    
    Motivation:
    
    On a system where ipv4 and ipv6 are supported a user may want to use -Djava.net.preferIPv4Stack=true to restrict it to use ipv4 only.
    This is currently ignored with the epoll transport.
    
    Modifications:
    
    Respect java.net.preferIPv4Stack system property.
    
    Result:
    
    -Djava.net.preferIPv4Stack=true will have the effect the user is looking for.

commit 88beae6838c6144f41fc6228755908c78e446416
Author: Jakob Buchgraber <buchgr@google.com>
Date:   Wed Mar 4 15:55:55 2015 -0800

    Fix premature cancelation of pending frames in HTTP2 Flow Control.
    
    Motivation:
    
    If HEADERS or DATA frames are pending due to a too small flow control
    window, a frame with the END_STREAM flag set will wrongfully cancel
    all pending frames (including itself).
    
    Also see grpc/grpc-java#145
    
    Modifications:
    
    The transition of the stream state to CLOSE / HALF_CLOSE due to a
    set END_STREAM flag is delayed until the frame with the flag is
    actually written to the Channel.
    
    Result:
    
    Flow control works correctly. Frames with END_STREAM flag will no
    longer cancel their preceding frames.

commit 0767da12fb3f3c9ff169d7c055c87fea3c78731e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Mar 5 14:14:19 2015 +0100

    Fix possible AttributeMap corruption on double removal
    
    Motivation:
    
    When remove0() is called multiple times for an DefaultAttribute it can cause corruption of the internal linked-list structure.
    
    Modifications:
    
    - Ensure remove0() can not cause corruption by null out prev and next references.
    
    Result:
    
    No more corruption possible

commit 99c40431b97d8138c3384ef444f801d0e3735035
Author: Trustin Lee <t@motd.kr>
Date:   Tue Mar 10 11:45:56 2015 +0900

    Use InetSocketAddress.getHostName() instead of getHostString()
    
    Related: #3478
    
    Motivation:
    
    DefaultNameResolver uses InetSocketAddress.getHostString() instead of
    getHostName(). Because Netty uses the DefaultNameResolver by default and
    getHostString() is available only since Java 7, a user cannot use Netty
    on Java 6 anymore.
    
    Modifications:
    
    Use InetSocketAddress.getHostName() which is practically same and also
    is available in Java 6.
    
    Result:
    
    Netty 4.1 runs on Java 6 again.

commit 8c135cdd55cbc399a66af34e38b3a2b9349b4f7c
Author: Trustin Lee <t@motd.kr>
Date:   Mon Mar 9 15:14:47 2015 +0900

    Add a new constructor without handler parameter to TrafficCounter
    
    Related: #3476
    
    Motivation:
    
    Some users use TrafficCounter for other uses than we originally
    intended, such as implementing their own traffic shaper.  In such a
    case, a user does not want to specify an AbstractTrafficShapingHandler.
    
    Modifications:
    
    - Add a new constructor that does not require an
      AbstractTrafficShapingHandler, so that a user can use it without it.
    - Simplify TrafficMonitoringTask
    - Javadoc cleanup
    
    Result:
    
    We open the possibility of using TrafficCounter for other purposes than
    just using it with AbstractTrafficShapingHandler.  Eventually, we could
    generalize it a little bit more, so that we can potentially use it for
    other uses.

commit 01f80d96b6cfd58b1d7c6fe045f68bee500751dd
Author: Leo Gomes <leonardo.f.gomes@gmail.com>
Date:   Thu Mar 5 14:53:33 2015 +0100

    Add unit to maxContentLength message javadoc
    
    Motivation:
    Not knowing which unit is returned by the maxContentLength() of the Messageggregator when reading the Javadoc is annoying and can be a source of bugs.
    
    Modifications:
    Added the mention "in bytes"
    
    Result:
    Javadoc is clear.

commit 944e11c0654abe9bde385ee6bc5dbf123ce23271
Author: Leo Gomes <leonardo.f.gomes@gmail.com>
Date:   Thu Mar 5 14:49:20 2015 +0100

    Add unit to maxContentLength javadoc of HttpObjectAggregator
    
    Motivation:
    Not knowing which unit is used for the maxContentLength of the HttpObjectAggregator when reading the Javadoc is annoying and can be a source of bugs.
    
    Modifications:
    Added the mention "in bytes"
    
    Result:
    Javadoc is clear.

commit 068132f1eabefb1760fec5b53997cd6143995a29
Author: Trustin Lee <t@motd.kr>
Date:   Thu Mar 5 15:14:59 2015 +0900

    Fix SocketException in NioSocketChannelUnsafe.closeExecutor()
    
    Related: #3464
    
    Motivation:
    
    When a connection attempt is failed,
    NioSocketChannelUnsafe.closeExecutor() triggers a SocketException,
    suppressing the channelUnregistered() event.
    
    Modification:
    
    Do not attempt to get SO_LINGER value when a socket is not open yet.
    
    Result:
    
    One less bug

commit 1a83232ab207eac0b904e30f4d7374f8abe13b1a
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Mar 4 20:02:37 2015 +0100

    [#3463] EpollSocketChannel.localAddress() returns always null if Native.connect() was not able to connect directly
    
    Motivation:
    
    Due a a regression that was introduced by b898bdd we failed to set the localAddress if the connect did not success directly.
    
    Modifications:
    
    Correct set localAddress in doConnect(...)
    
    Result:
    
    Be able to get the localAddress in all cases.

commit 6d5c38897ee42da732f082252aa7f1579719354f
Author: Trustin Lee <t@motd.kr>
Date:   Tue Mar 3 18:56:32 2015 +0900

    Fix header and initial line length counting
    
    Related: #3445
    
    Motivation:
    
    HttpObjectDecoder.HeaderParser does not reset its counter (the size
    field) when it failed to find the end of line.  If a header is split
    into multiple fragments, the counter is increased as many times as the
    number of fragments, resulting an unexpected TooLongFrameException.
    
    Modifications:
    
    - Add test cases that reproduces the problem
    - Reset the HeaderParser.size field when no EOL is found.
    
    Result:
    
    One less bug

commit 4500adb6e03baedce9b9d937dd3c137b11a83f10
Author: Leo Gomes <leonardo.f.gomes@gmail.com>
Date:   Wed Mar 4 00:01:19 2015 +0100

    Updates the javadoc of Unpooled to remove mention to methods it does not provide
    
    Motivation:
    
    `Unpooled` javadoc's mentioned the generation of hex dump and swapping an integer's byte order,
    which are actually provided by `ByteBufUtil`.
    
    Modifications:
    
     Sentence moved to `ByteBufUtil` javadoc.
    
    Result:
    
    `Unpooled` javadoc is correct.

commit fce0989844eb37907da76051c67f83a99782348b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Mar 3 02:06:47 2015 -0500

    [maven-release-plugin] prepare for next development iteration

commit ca3b1bc4b7eb90f9dacb0c9e9346ab503015e3e2
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Mar 3 02:05:52 2015 -0500

    [maven-release-plugin] prepare release netty-4.1.0.Beta4

commit d6016b7be8ca012b2da5ebf8c08946de7da7bf75
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Mar 1 19:36:31 2015 +0100

    [#3457] Proper fix for IllegalStateException caused by closed file descriptor / channel
    
    Motivation:
    
    During 6b941e9bdbc1b1a9090c280bc6c44903ff7c7b67 I introduced a regression that could cause an IllegalStateException.
    A non-proper fix was commited as part of #3443. This commit add a proper fix.
    
    Modifications:
    
    Remove FileDescriptor.INVALID and add FileDescriptor.isOpen() as replacement. Once FileDescriptor.close() is called isOpen() will return false.
    
    Result:
    
    No more IllegalStateException caused by a close channel.

commit 91db4b71b2247ed99ef2dba8f914618564b13313
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Feb 27 21:18:12 2015 +0100

    [#3066] EpollDatagramChannel never calls fireChannelActive() after connect()
    
    Motivation:
    
    EpollDragramChannel never calls fireChannelActive after connect() which is a bug.
    
    Modifications:
    
    Correctly call fireChannelActive if needed
    
    Result:
    
    Correct behaviour

commit 6c24dd4d8f2be754bc8a42af9c1b0e87c47ba75d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Feb 25 08:56:28 2015 +0100

    Pass struct's per pointer to eliminate memory copy.
    
    Motivation:
    
    Before struct's were passed per value and not pointer. This did enforce a memory copy which is not needed.
    
    Modifications:
    
    - Use "const struct....*" as replacement
    
    Result:
    
    No more unnecessary memory copies

commit 01bc2d6d80170b805281109ebf27ba4826ef021d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 23 21:01:20 2015 +0100

    Fix byte order when retrieve address from filedescriptor
    
    Motivation:
    
    When create address from filedescriptor we may use incorrect byte order and so end up with an incorrect InetAddress.
    
    Modification:
    
    Not manually shift bytes
    
    Result:
    
    Correct address in all cases.

commit e3edec25c5e5d60e420190093def854c6d8b787e
Author: jongyoon lim <seedengine@gmail.com>
Date:   Mon Feb 23 23:42:34 2015 +0900

    typo_fix in the comment

commit 237b393a8e7c7f1812ccf2c9510a205fe7772a8e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Feb 24 10:59:49 2015 +0100

    Fix regression introduced by 20e32f62ecc90079d1fe940cc70683617a4b3591
    
    Motivation:
    
    Because of a regression sometimes accept could produce an IllegalArgumentException
    
    Modifications:
    
    Correctly respect offset when decode port and scope id.
    
    Result:
    
    No more IllegalArgumentException

commit 29f29174047a7d42caa84b39a51963745aba2f3f
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Mon Feb 23 21:02:02 2015 -0800

    Upgrading HTTP/2 hpack to latest version
    
    Motivation:
    
    Twitter hpack has upgraded to 0.10.1 to fix a parsing bug.
    
    Modifications:
    
    Updated the parent pom to specify the dependency version.
    
    Result:
    
    HTTP/2 updated to the latest hpack release.

commit 5bb1377072d762f446048943f201c68b64161a30
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 23 19:01:32 2015 +0100

    [#3443] Fix IllegalStateException which could be triggered when the channel goes inactive during the eventloop processing
    
    Motivation:
    
    This is a regression that was introduced as part of 6b941e9bdbc1b1a9090c280bc6c44903ff7c7b67. The regression could produce an "infinity" triggering of IllegalStateException if a channel goes inactive while process the events for it.
    
    Modifications:
    
    Correctly check if the channel is still active before trigger the callbacks.
    
    Result:
    
    No more IllegalStateException

commit 88dae15bc20e51f33d22f28ad84b8e62bf7d116d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 19 13:39:00 2015 +0100

    Directly receive remote address when call accept(...)
    
    Motivation:
    
    There is a small race in the native transport where an accept(...) may success but a later try to obtain the remote address from the fd may fail is the fd is already closed.
    
    Modifications:
    
    Let accept(...) directly set the remote address.
    
    Result:
    
    No more race possible.

commit 93343ff00cc4a338156dffce46d8b8d53099a52b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Feb 20 14:20:33 2015 +0100

    Correctly handle autoRead == false when epoll LT is used
    
    Motivation:
    
    When epoll LT is used and autoRead == false when entering epollIn() we need to return without reading any data.
    
    Modifications:
    
    Correctly respect autoRead == false if using epoll LT.
    
    Result:
    
    Consistent and correct behaviour.

commit 91538d9b53976e4530123934458aec5c15ef56fe
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 19 15:06:26 2015 +0100

    [#3438] Throw pre-instanced IOException on connection reset
    
    Motivation:
    
    In the native transport we should throw a pre-instanced IOException on connection reset while reading.
    
    Modifications:
    
    Correctly throw pre-instanced IOException when ECONNRESET is received
    
    Result:
    
    Less overhead on connection reset

commit a70955381993e0a45a97ec732bd784a94bf458d1
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jan 30 14:04:06 2015 +0100

    Allow to use EmbeddedChannel.schedule*(...)
    
    Motivation:
    
    At the moment when EmbeddedChannel is used and a ChannelHandler tries to schedule and task it will throw an UnsupportedOperationException. This makes it impossible to test these handlers or even reuse them with EmbeddedChannel.
    
    Modifications:
    
    - Factor out reusable scheduling code into AbstractSchedulingEventExecutor
    - Let EmbeddedEventLoop and SingleThreadEventExecutor extend AbstractSchedulingEventExecutor
    - add EmbbededChannel.runScheduledPendingTasks() which allows to run all scheduled tasks that are ready
    
    Result:
    
    Embeddedchannel is now usable even with ChannelHandler that try to schedule tasks.

commit 7aeafb9c09c55a001b92975ea8fb895554757aa5
Author: Trustin Lee <t@motd.kr>
Date:   Fri Feb 20 16:53:41 2015 +0900

    Fixed buffer leaks in DefaultSocks5CommandResponseTest

commit d3e7a0bcd0c207b78b3c692254e535ac907cf031
Author: Marek Jelen <marek@jelen.biz>
Date:   Wed Aug 27 11:46:51 2014 +0200

    Integrate non-blocking XML parser as Netty codec (#2806)
    
    Motivation:
    Provide non-blocking XML parser as Netty codec.
    
    Modifications:
    New codec implemented/extracted.
    
    io.netty.handler.codec.xml.XmlDecoder decodes XML fed by Netty without blocking.
    
    Result:
    Non-blocking XML stream parsing.

commit 1e09409604cfb9e0da787a3f493faae3282e6e18
Author: jongyoon lim <seedengine@gmail.com>
Date:   Tue Feb 17 22:12:40 2015 +0900

    removed an unnecessary local variable for consistency

commit 5b1b334f01b569fa0e34e4cbaeaff7a67d982a6c
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Wed Feb 18 14:33:24 2015 +0100

    When null origin is supported then credentials header must not be set.
    
    Motivation:
    Currently CORS can be configured to support a 'null' origin, which can
    be set by a browser if a resources is loaded from the local file system.
    When this is done 'Access-Control-Allow-Origin' will be set to "*" (any
    origin). There is also a configuration option to allow credentials being
    sent from the client (cookies, basic HTTP Authentication, client side
    SSL). This is indicated by the response header
    'Access-Control-Allow-Credentials' being set to true. When this is set
    to true, the "*" origin is not valid as the value of
    'Access-Control-Allow-Origin' and a browser will reject the request:
    http://www.w3.org/TR/cors/#resource-requests
    
    Modifications:
    Updated CorsHandler's setAllowCredentials to check the origin and if it
    is "*" then it will not add the 'Access-Control-Allow-Credentials'
    header.
    
    Result:
    Is is possible to have a client send a 'null' origin, and at the same
    time have configured the CORS to support that and to allow credentials
    in that combination.

commit fa646255221c6507d277ecd7630cf335d2e6045a
Author: Robert Varga <robert.varga@pantheon.sk>
Date:   Sat Feb 14 13:37:01 2015 +0100

    Add a pax-exam based OSGi test suite
    
    Motivation:
    
    Release 4.0.25 was not usable in OSGi environments due to a simple typo.
    An automated test could have caught the problem even before it was
    committed.
    
    Modifications:
    
    This patch introduces a new artifact, osgitests, which pulls in all
    production artifacts (which we want to be checked for OSGi compliance).
    It contains only a single unit test, which runs a pax-exam container
    with felix OSGi.
    
    At initialization time, it scans all the artifact's dependencies,
    looking for things belonging to io.netty group. The container is
    configured to deploy those artifacts as bundles and fail if any bundle
    is found to be unresolved. It performs a final check to see if any
    bundles were tested this way, to make sure the mechanism is not
    completely broken.
    
    We are using wrappedBundle(), as two of our third-party dependencies do
    not export packages correctly -- this masks the problem, assuming that
    whoever deploys our artifacts depending on them will figure out how to
    OSGify them.
    
    Result:
    
    Simple typos and other bundle manifest errors should be caught during
    test phase of every build.

commit c53b8d5a855468a890757b4f0612d7ae192a3592
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Fri Dec 12 13:46:54 2014 +0100

    Suggestion for supporting single header fields.
    
    Motivation:
    At the moment if you want to return a HTTP header containing multiple
    values you have to set/add that header once with the values wanted. If
    you used set/add with an array/iterable multiple HTTP header fields will
    be returned in the response.
    
    Note, that this is indeed a suggestion and additional work and tests
    should be added. This is mainly to bring up a discussion.
    
    Modifications:
    Added a flag to specify that when multiple values exist for a single
    HTTP header then add them as a comma separated string.
    In addition added a method to StringUtil to help escape comma separated
    value charsequences.
    
    Result:
    Allows for responses to be smaller.

commit 99bd43ed5163bf635ef4c9f1db2d93d7f0232382
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 9 09:41:56 2015 +0100

    Allow to get existing ChannelOption / AttributeKey from String
    
    Motivation:
    
    We should allow to get a ChannelOption/AttributeKey from a String. This will make it a lot easier to make use of configuration files in applications.
    
    Modifications:
    
    - Add exists(...), newInstance(...) method to ChannelOption and AttributeKey and alter valueOf(...) to return an existing instance for a String or create one.
    - Add unit tests.
    
    Result:
    
    Much more flexible usage of ChannelOption and AttributeKey.

commit 6e508e60e7f4923f6ea8393eec842254d7fb63ab
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 12 20:44:36 2015 +0100

    Move generic unix classes/interfaces out of epoll package
    
    Motivation:
    
    As we plan to have other native transports soon (like a kqueue transport) we should move unix classes/interfaces out of the epoll package so we
    introduce other implementations without breaking stuff before the next stable release.
    
    Modifications:
    
    Create a new io.netty.channel.unix package and move stuff over there.
    
    Result:
    
    Possible to introduce other native impls beside epoll.

commit 4b83eee1338ab018b802c3e195317fa83f785154
Author: Cristian <me@cristian.io>
Date:   Sun Feb 15 12:30:20 2015 -0800

    Fixed ServerBootstrap#group(EventLoopGroup, EventLoopGroup) javadoc

commit b8d26d1da3f203033e1f5814d9b72582376cb0b5
Author: Cristian <me@cristian.io>
Date:   Sun Feb 15 21:36:43 2015 -0800

    Avoid unnecessary call to ByteBuf.isReadable() from ByteToMessageDecoder
    
    Motivation:
    
    This will avoid one unncessary method invokation which will slightly improve performance.
    
    Modifications:
    
    Instead of calling isReadable we just check for the value of readableBytes()
    
    Result:
    
    Nothing functionally speaking change.

commit 38015bffa7a58de07186bdc9f98f0f14ab69938d
Author: Fabian Lange <lange.fabian@gmail.com>
Date:   Fri Feb 13 17:33:18 2015 +0100

    Fixed broken optional OSGi Import-Package header (#3424).

commit 41fd857a7c749257c862ffb368af0b926c72ebfe
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Dec 11 21:13:03 2014 +0100

    Ensure CompositeByteBuf.addComponent* handles buffer in consistent way and not causes leaks
    
    Motivation:
    
    At the moment we have two problems:
     - CompositeByteBuf.addComponent(...) will not add the supplied buffer to the CompositeByteBuf if its empty, which means it will not be released on CompositeByteBuf.release() call. This is a problem as a user will expect everything added will be released (the user not know we not added it).
     - CompositeByteBuf.addComponents(...) will either add no buffers if none is readable and so has the same problem as addComponent(...) or directly release the ByteBuf if at least one ByteBuf is readable. Again this gives inconsistent handling and may lead to memory leaks.
    
    Modifications:
    
     - Always add the buffer to the CompositeByteBuf and so release it on release call.
    
    Result:
    
    Consistent handling and no buffer leaks.

commit daba2b3313077c3be9b424d8bcba2d258d7048d3
Author: nmittler <nathanmittler@google.com>
Date:   Wed Feb 11 09:06:09 2015 -0800

    Removing debugging change from unit test.
    
    Motivation:
    
    HttpToHttp2ConnectionHandlerTest was accidentally modified with a
    debugging value for WAIT_TIME_SECONDS.
    
    Modifications:
    
    Reverted the change.
    
    Result:
    
    original wait time restored.

commit 976db9269de581fdb94b42837ae236c1f68ef38e
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 22 22:25:28 2014 +0900

    Revamp io.netty.handler.codec.socksx
    
    While implementing netty-handler-proxy, I realized various issues in our
    current socksx package. Here's the list of the modifications and their
    background:
    
    - Split message types into interfaces and default implementations
      - so that a user can implement an alternative message implementations
    - Use classes instead of enums when a user might want to define a new
      constant
      - so that a user can extend SOCKS5 protocol, such as:
        - defining a new error code
        - defining a new address type
    - Rename the message classes
      - to avoid abbreviated class names. e.g:
        - Cmd -> Command
        - Init -> Initial
      - so that the class names align better with the protocol
        specifications. e.g:
        - AuthRequest -> PasswordAuthRequest
        - AuthScheme -> AuthMethod
    - Rename the property names of the messages
      - so that the property names align better when the field names in the
        protocol specifications
    - Improve the decoder implementations
      - Give a user more control over when a decoder has to be removed
      - Use DecoderResult and DecoderResultProvider to handle decode failure
        gracefully. i.e. no more Unknown* message classes
    - Add SocksPortUnifinicationServerHandler since it's useful to the users
      who write a SOCKS server
      - Cleaned up and moved from the socksproxy example

commit 865a83c15dd1f2ead03eac35f98457ed2b238175
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 5 10:40:41 2015 +0100

    Allow to create Epoll*Channel from FileDescriptor
    
    Motivation:
    
    Sometimes it's useful to be able to create a Epoll*Channel from an existing file descriptor. This is especially helpful if you integrade some c/jni code.
    
    Modifications:
    
    - Add extra constructor to Epoll*Channel implementations that take a FileDescriptor as an argument
    - Make Rename EpollFileDescriptor to NativeFileDescriptor and make it public
    - Also ensure we obtain the correct remote/local address when create a Channel from a FileDescriptor
    
    Result:
    
    It's now possible to create a FileDescriptor and instance a Epoll*Channel via it.

commit daa04cb4f10050919b3aa4df89b0ea6aeebe335b
Author: Trustin Lee <t@motd.kr>
Date:   Mon Feb 9 16:14:02 2015 +0900

    Add another test case for channelReadComplete() suppression
    
    Related commit:
    - a41b46ff430369112bdc9ab2474cb40667c289a3
    
    Motivation:
    
    We need a test case for the commit above.

commit f20439b6d35d47cd13bdee0dd794560bbd7b8090
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jan 27 11:55:53 2015 +0100

    Various performance optimizations in OpenSslEngine
    
    Motivation:
    
    There are various places in OpenSslEngine wher we can do performance optimizations.
    
    Modifications:
    
    - Reduce JNI calls when possible
    - Detect finished handshake as soon as possible
    - Eliminate double calculations
    - wrap multiple ByteBuffer if possible in a loop
    
    Result:
    
    Better performance

commit a69fbaeed9505f017b144050bd0e1cc49f6585c6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Feb 6 12:14:59 2015 +0100

    Not execute shutdownOutput(...) and close(...) in the EventLoop if SO_LINGER is used.
    
    Motivation:
    
    If SO_LINGER is used shutdownOutput() and close() syscalls will block until either all data was send or until the timeout exceed. This is a problem when we try to execute them on the EventLoop as this means the EventLoop may be blocked and so can not process any other I/O.
    
    Modifications:
    
    - Add AbstractUnsafe.closeExecutor() which returns null by default and use this Executor for close if not null.
    - Override the closeExecutor() in NioSocketChannel and EpollSocketChannel and return GlobalEventExecutor.INSTANCE if getSoLinger() > 0
    - use closeExecutor() in shutdownInput(...) in NioSocketChannel and EpollSocketChannel
    
     Result:
    
    No more blocking of the EventLoop if SO_LINGER is used and shutdownOutput() or close() is called.

commit aa8917115c594b111929c4115cb699327af2ff73
Author: Brendt Lucas <brendt@idnet.com>
Date:   Sun Feb 8 12:07:46 2015 +0000

    Determine CompositeByteBuf implementation by using ByteBufAllocator
    
    Motivation:
    
    Currently, using a MessageAggregator in the pipeline always results in the creation of an unpooled heap CompositeByteBuf. By using the ByteBufAllocator the CompositeByteBuf will use the implementation specified by the ByteBufAllocator.
    
    Modifications:
    
    Use the ChannelHandlerContext's ByteBufAllocator to create the CompositeByteBuf for message aggregation
    
    Result:
    
    The CompositeByteBuf is now configured based on the ByteBufAllocator's settings.

commit 7a3d91f43d12eb0b23a65662d26026c6cd451d76
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 5 12:58:34 2015 +0100

    Give compiler hint about inline functions
    
    Motivation:
    
    Some of the methods are frequently called and so should be inlined if possible.
    
    Modifications:
    
    Give the compiler a hint that we want to inline these methods.
    
    Result:
    
    Better performance if inlined.

commit f762b4bb6847cac912a4c2b5920a80d95e42d981
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Feb 8 13:04:12 2015 +0100

    Cleanup code. Part of [#3398]

commit 0a452bef8edbf023fd950eb6d3875acaea553cdb
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Feb 6 07:34:54 2015 +0100

    Add workaround for bug in older linux kernels handling epoll_wait(...)
    
    Motivation:
    
    Older linux kernels have problems handling a large value for epoll_wait(...) and so wait for ever.
    
    Modifications:
    
    Adjust timeout on the fly if a too big value is passed in.
    
    Result:
    
    Correctly works also on older kernels.

commit 4e6cec0e26e7c690aeff5d262bc7feb29f26f488
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Feb 6 16:29:15 2015 +0100

    Respect ChannelConfig.getWriteSpinCount() when using epoll transport
    
    Motivation:
    
    The writeSpinCount was ignored in the epoll transport and it just kept on trying writing. This could cause unnessary cpu spinning if a slow remote peer was reading the data very very slow.
    
    Modification:
    
    - Correctly take writeSpinCount into account when writing.
    
    Result:
    
    Less cpu spinning when writing to a slow remote peer.

commit a1efd1871bff4566e1666d4ad8c649e7451316fe
Author: Trustin Lee <t@motd.kr>
Date:   Sun Feb 8 11:54:40 2015 +0900

    Reorder PlatformDependent.isRoot() check
    
    Motivation:
    
    isRoot() is an expensive operation. We should avoid calling it if
    possible.
    
    Modifications:
    
    Move the isRoot() checks to the end of the 'if' block, so that isRoot()
    is evaluated only when really necessary.
    
    Result:
    
    isRoot() is evaluated only when SO_BROADCAST is set and the bind address
    is anylocal address.

commit 730ec357d22bc2dfeade2f7742cc21b3d1e296d9
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Feb 7 21:29:46 2015 +0100

    Correctly set EPOLLRDHUP for all stream channels.
    
    Motivation:
    
    Fix regression introduced by 585ce1593fdccc5a8d868a96c7643e0d63b1e21b, which missed to set EPOLLRDHUP for all stream channels.
    
    Modifications:
    
    Correctly set EPOLLRDHUP for all stream channels in the AbstractEpollStreamChannel constructor.
    
    Result:
    
    No more test failures in EpollDomain*Channel tests.

commit 720faa4df101c22ff591ae4a916e93648951c374
Author: Trustin Lee <t@motd.kr>
Date:   Sat Feb 7 22:49:52 2015 +0900

    Do not suppress channelReadComplete() when a handler was just added
    
    Related:
    - 27a25e29f7c002eb9f4d52b52ecccb2f3a7d6b15
    
    Motivation:
    
    The commit mentioned above introduced a regression where
    channelReadComplete() event is swallowed by a handler which was added
    dynamically.
    
    Modifications:
    
    Do not suppress channelReadComplete() if the current handler's
    channelRead() method was not invoked at all, so that a just-added
    handler does not suppress channelReadComplete().
    
    Result:
    
    Regression is gone, and channelReadComplete() is invoked when necessary.

commit ed98ce27e1eedd200d49e199cb14baf6981d3c40
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Feb 2 11:51:19 2015 +0100

    Faster event processing when epoll transport is used
    
    Motivation:
    
    Before we used a long[] to store the ready events, this had a few problems and limitations:
     - An extra loop was needed to translate between epoll_event and our long
     - JNI may need to do extra memory copy if the JVM not supports pinning
     - More branches
    
    Modifications:
    
    - Introduce a EpollEventArray which allows to directly write in a struct epoll_event* and pass it to epoll_wait.
    
    Result:
    
    Better speed when using native transport, as shown in the benchmark.
    
    Before:
    [xxx@xxx wrk]$ ./wrk -H 'Connection: keep-alive' -d 120 -c 256 -t 16 -s scripts/pipeline-many.lua  http://xxx:8080/plaintext
    Running 2m test @ http://xxx:8080/plaintext
     16 threads and 256 connections
     Thread Stats   Avg      Stdev     Max   +/- Stdev
       Latency    14.56ms    8.64ms 117.15ms   80.58%
       Req/Sec   286.17k    38.71k  421.48k    68.17%
     546324329 requests in 2.00m, 73.78GB read
    Requests/sec: 4553438.39
    Transfer/sec:    629.66MB
    
    After:
    [xxx@xxx wrk]$ ./wrk -H 'Connection: keep-alive' -d 120 -c 256 -t 16 -s scripts/pipeline-many.lua  http://xxx:8080/plaintext
    Running 2m test @ http://xxx:8080/plaintext
     16 threads and 256 connections
     Thread Stats   Avg      Stdev     Max   +/- Stdev
       Latency    14.12ms    8.69ms 100.40ms   83.08%
       Req/Sec   294.79k    40.23k  472.70k    66.75%
     555997226 requests in 2.00m, 75.08GB read
    Requests/sec: 4634343.40
    Transfer/sec:    640.85MB

commit 27a25e29f7c002eb9f4d52b52ecccb2f3a7d6b15
Author: Trustin Lee <t@motd.kr>
Date:   Sat Feb 7 15:54:42 2015 +0900

    Ensure channelReadComplete() is called only when necessary
    
    Motivation:
    
    Even if a handler called ctx.fireChannelReadComplete(), the next handler
    should not get its channelReadComplete() invoked if fireChannelRead()
    was not invoked before.
    
    Modifications:
    
    - Ensure channelReadComplete() is invoked only when the handler of the
      current context actually produced a message, because otherwise there's
      no point of triggering channelReadComplete().
      i.e. channelReadComplete() must follow channelRead().
    - Fix a bug where ctx.read() was not called if the handler of the
      current context did not produce any message, making the connection
      stall. Read the new comment for more information.
    
    Result:
    
    - channelReadComplete() is invoked only when it makes sense.
    - No stale connection

commit 270e0785fd1b62db5638af96c4253c6f2e13e8eb
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Feb 5 21:02:56 2015 +0100

    Log only on debug log level in OpenSslEngine
    
    Motivation:
    
    At the moment we log priming read and handshake errors via info log level and still throw a SSLException that contains the error. We should only log with debug level to generate less noise.
    
    Modifications:
    
    Change logging to debug level.
    
    Result:
    
    Less noise .

commit 0bd89bacea8ea4c845a9f170403116c59f3a592f
Author: Ngoc Dao <ngocdaothanh@gmail.com>
Date:   Sat Feb 7 04:52:23 2015 +0900

    Fix #3331 Update Javassist from 3.18.0-GA to 3.19.0-GA

commit 8b5f2d7716af42ec05decbc8f9de775e81683944
Author: Scott Mitchell <scott.k.mitch1@gmail.com>
Date:   Fri Jan 30 22:54:35 2015 -0500

    Http2DefaultFrameWriter direct write instead of copy
    
    Motivation:
    The Http2DefaultFrameWriter copies all contents into a buffer (or uses a CompositeBuffer in 1 case) and then writes that buffer to the socket. There is an opportunity to avoid the copy operations and write directly to the socket.
    
    Modifications:
    - Http2DefaultFrameWriter should avoid copy operations where possible.
    - The Http2FrameWriter interface should be clarified to indicate that ByteBuf objects will be released.
    
    Result:
    Hopefully less allocation/copy leads to memory and throughput performance benefit.

commit abf7afca760ec43f1498fa00dd791170abe47e49
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jan 30 20:27:27 2015 +0100

    [#3367] Fix re-entrance bug in PendingWriteQueue
    
    Motivation:
    
    Because of a re-entrance bug in PendingWriteQueue it was possible to get the queue corrupted and also trigger an IllegalStateException caused by multiple recycling of the internal PendingWrite objects.
    
    Modifications:
    
    - Correctly guard against re-entrance
    
    Result:
    
    No more IllegalStateException possible

commit afa9e71ed37ad1e46a837f3212d6ff1712f12a92
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Jan 6 06:55:01 2015 +0100

    Allow to use WebSocketClientHandshaker and WebSocketServerHandshaker with HttpResponse / HttpRequest
    
    Motivation:
    
    To use WebSocketClientHandshaker / WebSocketServerHandshaker it's currently a requirement of having a HttpObjectAggregator in the ChannelPipeline. This is not a big deal when a user only wants to server WebSockets but is a limitation if the server serves WebSockets and normal HTTP traffic.
    
    Modifications:
    
    Allow to use WebSocketClientHandshaker and WebSocketServerHandshaker without HttpObjectAggregator in the ChannelPipeline.
    
    Result:
    
    More flexibility

commit b984ca7979670a86bb4acc3b83eed0b1125824a6
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 29 06:49:14 2015 +0100

    Allow to change epoll mode
    
    Motivation:
    Netty uses edge-triggered epoll by default for performance reasons. The downside here is that a messagesPerRead limit can not be enforced correctly, as we need to consume everything from the channel when notified.
    
    Modification:
    - Allow to switch epoll modes before channel is registered
    - Some refactoring to share more code
    
    Result:
    It's now possible to switch epoll mode.

commit bc76bfa1991821dbf9433405b8316a0fc393bbf8
Author: nmittler <nathanmittler@google.com>
Date:   Mon Feb 2 10:20:56 2015 -0800

    Consolidating HTTP/2 stream state
    
    Motivation:
    
    Http2Stream has several methods that provide state information. We need
    to simplify how state is used and consolidate as many of these fields as
    possible.
    
    Modifications:
    
    Since we already have a concept of a stream being active or inactive,
    I'm now separating the deactivation of a stream from the act of closing
    it.  The reason for this is the case of sending a frame with
    endOfStream=true. In this case we want to close the stream immediately
    in order to disallow further writing, but we don't want to mark the
    stream as inactive until the write has completed since the inactive
    event triggers the flow controller to cancel any pending writes on the
    stream.
    
    With deactivation separated out, we are able to eliminate most of the
    additional state methods with the exception of `isResetSent`.  This is
    still required because we need to ignore inbound frames in this case (as
    per the spec), since the remote endpoint may not yet know that the
    stream has been closed.
    
    Result:
    
    Fixes #3382

commit 3030b4afe30f96b59807b24bd4f5250d41de283f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 15 14:38:14 2015 +0100

    Allow to recv and send file descriptors when using EpollDomainSocketChannel.
    
    Motiviation:
    
    When using domain sockets on linux it is supported to recv and send file descriptors. This can be used to pass around for example sockets.
    
    Modifications:
    - Add support for recv and send file descriptors when using EpollDomainSocketChannel.
    - Allow to obtain the file descriptor for an Epoll*Channel so it can be send via domain sockets.
    
    Result:
    recv and send of file descriptors is supported now.

commit f771a97592d95d70cbb6f6b5afb6e4a3a450a499
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Jan 14 16:38:46 2015 +0100

    Add support for Unix Domain Sockets when using native epoll transport
    
    Motivation:
    
    Using Unix Domain Sockets can be very useful when communication should take place on the same host and has less overhead then using loopback. We should support this with the native epoll transport.
    
    Modifications:
    
    - Add support for Unix Domain Sockets.
    - Adjust testsuite to be able to reuse tests.
    
    Result:
    
    Unix Domain Sockets are now support when using native epoll transport.

commit 6d07264412d8524d73af2da4d5bb7d54532786c6
Author: Marco Craveiro <marco.craveiro@gmail.com>
Date:   Tue Feb 3 19:54:48 2015 +0000

    Minor idiomatic changes to java docs

commit 86cb41bf956dd961851084c4d00eafb63c7e4a8c
Author: scottmitch <scott.k.mitch1@gmail.com>
Date:   Tue Jan 27 14:34:00 2015 -0500

    Possible leak in AbstractDiskHttpData
    
    Motivation:
    SonarQube (clinker.netty.io/sonar) reported a resource which may not have been properly closed in all situations in AbstractDiskHttpData.
    
    Modifications:
    - Ensure file channels are closed in the presence of exceptions.
    - Correct instances where local channels were created but potentially not closed.
    
    Result:
    Less leaks. Less SonarQube vulnerabilities.

commit 50a857cecfd19059be37cf643beedca40de56b9b
Author: scottmitch <scott.k.mitch1@gmail.com>
Date:   Tue Jan 27 18:29:01 2015 -0500

    SonarQube issues OpenSslEngine
    
    Motivation:
    SonarQube (clinker.netty.io/sonar) reported a few 'critical' issues related to the OpenSslEngine.
    
    Modifications:
    - Remove potential for dereference of null variable.
    - Remove duplicate null check and TODO cleanup.
    
    Results:
    Less potential for null dereference, cleaner code, and 1 less TODO.

commit 8bbfcb05a08bc0dd11064d964a77da35fc2e5eb8
Author: louiscryan <Police123>
Date:   Fri Jan 23 11:32:17 2015 -0800

    Make flow-controller a write-queue for HEADERS and DATA
    
    Motivation:
    
    Previously flow-controller had to know the implementation details of each frame type in order to write it correctly. That concern is more correctly handled by the encoder. By encapsulating the payload types to be flow-controlled it will be easier to add support for extension types later. This change also fixes #3353.
    
    Modifications:
    
    Add interface FlowControlled which is now delivered to flow-controller.
    Implement this interface for HEADERS and DATA
    Refactor and improve tests for flow-control.
    
    Result:
    
    Flow control semantics are more cleanly separated for data encoding and implementation is simpler overall.

commit b19a12b952398dba12e46db452f0b8220d1e0267
Author: Nitesh Kant <nkant@netflix.com>
Date:   Thu Jan 29 23:08:15 2015 -0800

    Fixes #3362 (Possible wrong behavior in `HttpResponseDecoder`/`HttpRequestDecoder` for large header/initline/content)
    
    Motivation:
    
    `HttpResponseDecoder` and `HttpRequestDecoder` in the event when the max configured sizes for HTTP initial line, headers or content is breached, sends a `DefaultHttpResponse` and `DefaultHttpRequest` respectively. After this `HttpObjectDecoder` gets into `BAD_MESSAGE` state and ignores any other data received on this connection.
    The combination of the above two behaviors, means that the decoded response/request are not complete (absence of sending `LastHTTPContent`). So, any code, waiting for a complete message will have to additionally check for decoder result to follow the correct semantics of HTTP.
    
    If `HttpResponseDecoder` and `HttpRequestDecoder` creates a Full* invalid message then the request/response is a complete HTTP message and hence obeys the HTTP contract.
    
    Modification:
    
    Modified `HttpRequestDecoder`, `HttpResponseDecoder`, `RtspRequestDecoder` and  `RtspResponseDecoder` to return Full* messages from `createInvalidMessage()`
    
    Result:
    
    Fixes the wrong behavior of sending incomplete messages from these codecs

commit 3c6cbd40e297b397abe6d942b3c7d8f31062e348
Author: Trustin Lee <t@motd.kr>
Date:   Mon Feb 2 16:08:29 2015 +0900

    Fix an sporadic failure in ServerCookieEncoderTest
    
    In testEncodingSingleCookieV0():
    
    Let's assume we encoded a cookie with MaxAge=50 when currentTimeMillis
    is 10999.
    
    Because the encoder will not encode the millisecond part for Expires,
    the timeMillis value of the encoded Expires field will be 60000. (If we
    did not dropped the millisecond part, it would be 60999.)
    
    Encoding a cookie will take some time, so currentTimeMillis will
    increase slightly, such as to 11001.
    
      diff = (60000 - 11001) / 1000 = 48999 / 1000 = 48
      maxAge - diff = 50 - 48 = 2
    
    Due to losing millisecond part twice, we end up with the precision
    problem illustrated above, and thus we should increase the tolerance
    from 1 second to 2 seconds.
    
    /cc @slandelle

commit 200c6efc750615bc9610c88d16aee6ac9f44ba9c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jan 30 07:28:04 2015 +0100

    [#3364] Not use VoidChannelPromise in SslHandler to guard against IllegalStateException
    
    Motivation:
    
    SslHandler adds a pending write with an empty buffer and a VoidChannelPromise when a user flush and not pending writes are currently stored. This may produce an IllegalStateException later if the user try to add a ChannelFutureListener to the promise in the next ChannelOutboundHandler.
    
    Modifications:
    
    Replace ctx.voidPromise() with ctx.newPromise()
    
    Result:
    
    No more IllegalStateException possible

commit 6b8ec6b781b3413c3aa98c3e79a562598be83d2d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 29 20:53:52 2015 +0100

    [#3378] Automatically increase number of possible handled events
    
    Motivation:
    
    At the moment the max number of events that can be handled per epoll wakup was set during construction.
    
    Modifications:
    
    - Automatically increase the max number of events to handle
    
    Result:
    
    Better performance when a lot of events need to be handled without adjusting the code.

commit c66da29644b0d308acd02236caf5b6fd9ead562c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Jan 29 09:45:17 2015 +0100

    [#3377] Faster overflow guard when generate nextId in EpollEventLoop
    
    Motivation:
    
    The current way how the guard against overflow when generating the nextId() is pretty slow once an overflow happened.
    
    Modifications:
    
    Once a possible overflow is detected all ids used by the EpollEventLoop are scrubed and re-assigned to the registered Channels. This way we only need to do extra work each time an overflow is detected.
    
    Result:
    
    More consistent performance even after the first overflow was detected.

commit 8bc21ecdd0a21e116d11f972e24e4eb3255ba851
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Jan 25 20:44:47 2015 +0100

    [#3376] Use IllegalArgumentException as replacement for NPE as stated in javadocs
    
    Motivation:
    
    SSLEngine specifies that IllegalArgumentException must be thrown if a null argument is given when using wrap(...) or unwrap(...).
    
    Modifications:
    
    Replace NullPointerException with IllegalArgumentException to match the javadocs.
    
    Result:
    
    Match the javadocs.

commit 4619e88a7b1b90b3a341d0aa0aa22f2899d7fb8d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sun Jan 25 20:33:07 2015 +0100

    [#3375] Correctly calculate the endOffset when wrap multiple ByteBuffer
    
    Motivation:
    
    We failed to correctly calculate the endOffset when wrap multiple ByteBuffer and so not wrapped everything when an offset > 0 is used.
    
    Modifications:
    
    Correctly calculate endOffset.
    
    Result:
    
    All ByteBuffers are correctly wrapped when offset > 0.

commit 4bafb4f95b38dbccfdd4d95cc3e591676c1f4a3c
Author: haohao <sammy105@gmail.com>
Date:   Thu Jan 29 16:26:13 2015 +0800

    [#3368] Ensure ByteBuf is not release two times
    
    Motivation:
    
    As the ByteBuf is not set to null after release it we may try to release it again in handleReadException()
    
    Modifications:
    
    -  set ByteBuf to null to avoid another byteBuf.release() to be called in handleReadException()
    
    Result:
    
    No IllegalReferenceCountException anymore

commit c5bd8fd264986b1a3bdbaf5cb4488981ce554b78
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Nov 13 14:06:47 2014 +0100

    [#3112] Add supprt for TCP_INFO when using EpollSocketChannel
    
    Motivation:
    
    On Linux, you can gather various metrics using getsockopt(..., TCP_INFO,
    ...).
    
    Modifications:
    
    Add EpollSocketChannel.tcpInfo() which returns EpollTcpInfo that exposes
    all metrics exposed via getsockopt(..., TCP_INFO, ...)
    
    Result:
    
    TCP_INFO support implemented

commit a9577c0a4bb1cf4464d8d6b17223df9748b1049d
Author: Scott Mitchell <scott.k.mitch1@gmail.com>
Date:   Mon Jan 26 10:11:23 2015 -0500

    Zlib decoder calls reduction and index fix
    
    Motivation:
    The JdkZlibDecoder and JZlibDecoder call isReadable and readableBytes in the same method. There is an opportunity to reduce the number of methods calls to just use readableBytes.  JdkZlibDecoder reads from a ByteBuf with an absolute index instead of using readerIndex()
    
    Modifications:
    - Use readableBytes where isReadable was used
    - Correct absolute ByteBuf index to be relative to readerIndex()
    
    Result:
    Less method calls duplicating work and preventing an index out of bounds exception.

commit bc97d7d7a17b058a7ed1084aa3aced5fe349e86c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Sat Jan 17 20:30:18 2015 +0100

    Fix NPE when remote address can not be obtained
    
    Motivation:
    
    In the native transport we use getpeername to obtain the remote address from the file descriptor. This may fail for various reasons in which case NULL is returned.
    
    Modifications:
    
    - Check for null when try to obtain remote / local address
    
    Result:
    
    No more NPE

commit 8614b88c188895c226c7987d28acb3107edc3607
Author: Stephane Landelle <slandelle@excilys.com>
Date:   Wed Jan 21 15:11:30 2015 +0100

    Generate Expires attribute along MaxAge one so IE can honor it, close #1466
    
    Motivation:
    
    Internet Explorer doesn't honor Set-Cookie header Max-Age attribute. It only honors the Expires one.
    
    Modification:
    
    Always generate an Expires attribute along the Max-Age one.
    
    Result:
    
    Internet Explorer compatible expiring cookies. Close #1466.

commit c6bfc92df1bec98e2b21d222ca507fb4dd2c5080
Author: Adrian Cole <adrian.f.cole@gmail.com>
Date:   Thu Jan 22 10:28:14 2015 +0800

    Zero length data frames should apply flow control.
    
    Motivation:
    A downstream consumer of Netty failed as emitting zero-length http2 data frames in a unit test resulted in assertion errors in Http2LocalFlowController. Since zero-length frames are valid, an assertion that http2 data frame length must be positive is invalid.
    
    Modifications:
    
    Assertions of data length in Http2LocalFlowController now permit zero.
    
    Result:
    
    Those running netty with assertions on can now emit zero length http2 data frames.

commit 2d24e1f27d00d13401d543a04beb5b76102dfd7d
Author: Nitesh Kant <nkant@netflix.com>
Date:   Mon Jan 19 16:48:11 2015 -0800

    Back port HTTP/2 codec from master to 4.1
    
    Motivation:
    
    HTTP/2 codec was implemented in master branch.
    Since, master is not yet stable and will be some time before it gets released, backporting it to 4.1, enables people to use the codec with a stable netty version.
    
    Modification:
    
    The code has been copied from master branch as is, with minor modifications to suit the `ChannelHandler` API in 4.x.
    Apart from that change, there are two backward incompatible API changes included, namely,
    
    - Added an abstract method:
    
      `public abstract Map.Entry<CharSequence, CharSequence> forEachEntry(EntryVisitor<CharSequence> visitor)
                throws Exception;`
    
    to `HttpHeaders` and implemented the same in `DefaultHttpHeaders` as a delegate to the internal `TextHeader` instance.
    
    - Added a method:
    
    `FullHttpMessage copy(ByteBuf newContent);`
    
    in `FullHttpMessage` with the implementations copied from relevant places in the master branch.
    
    - Added missing abstract method related to setting/adding short values to `HttpHeaders`
    
    Result:
    
    HTTP/2 codec can be used with netty 4.1

commit ed10513238c271a2c9b372b702dec4943b64f0d5
Author: igariev <igariev@zynga.com>
Date:   Wed Jan 14 23:27:37 2015 -0800

    Fixed several issues with HttpContentDecoder
    
    Motivation:
    
    HttpContentDecoder had the following issues:
    - For chunked content, the decoder set invalid "Content-Length" header
    	with length of the first decoded chunk.
    - Decoding of FullHttpRequests put both the original conent and decoded
    	content into output. As result, using HttpObjectAggregator before the
    	decoder lead to errors.
    - Requests with "Expect: 100-continue" header were not acknowleged:
    	the decoder didn't pass the header message down the handler's chain
    	until content is received. If client expected "100 Continue" response,
    	deadlock happened.
    
    Modification:
    
    - Invalid "Content-Length" header is removed; handlers down the chain can either
    	rely on LastHttpContent message or ask HttpObjectAggregator to add the header.
    - FullHttpRequest is split into HttpRequest and HttpContent (decoded) parts.
    - Header (HttpRequest) part of request is sent down the chain as soon as it's received.
    
    Result:
    
    The issues are fixed, unittest is added.

commit f0181a35ef09bab51467c0eed9d249e91013c27e
Author: Stephane Landelle <slandelle@excilys.com>
Date:   Wed Jan 21 15:02:21 2015 +0100

    Drop first flag that's no longer used
    
    Motivation:
    
    Pull request for RFC6265 support had some unused flag first in ClientCookieDecoder.
    
    Modification:
    
    Remove unused flag first.
    
    Result:
    
    Cleaner code.

commit c4a5c3966caacde7e483041f7194bb657708ee22
Author: Scott Mitchell <scott.k.mitch1@gmail.com>
Date:   Wed Jan 21 15:10:07 2015 -0500

    Headers remove infrequently used member variables
    
    Motivation:
    There are two member variables (addAllVisitor, setAllVisitor) which are likely not to be used in the majority of use cases.
    
    Modifications:
    Remove these member variables and rely on a method to return a new object when needed.
    
    Result:
    Two less member variables for each DefaultHeaders instance.

commit 27a2017f7f5db2707b21600c2d976afbc7b57cfd
Author: Scott Mitchell <scott.k.mitch1@gmail.com>
Date:   Wed Jan 21 13:40:09 2015 -0500

    Opportunity for lazy initialization in Headers interface
    
    Motivation:
    The Headers interface had two member variables (addAllVisitor, setAllVisitor) which are not necessarily always needed but are always instantiated.  This may result in excess memory being used.
    
    Modifications:
     - addAllVisitor will be accessed via a method addAllVisitor() which will use lazy initialization.
     - setAllVisitor will be accessed via a method addAllVisitor() which will use lazy initialization.
    
    Result:
    Potential memory savings by using lazy initialization.

commit 0fc097cb20b43dab41b196c77db86a2bb1aecd20
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jan 21 22:31:06 2015 +0900

    Remove the references to the deprecated CookieDecoder

commit 7d102084c1c775d15141970beb5fd98d08b6131a
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jan 21 22:24:46 2015 +0900

    Remove Rfc6265 prefix from cookie encoders and decoders
    
    Motivation:
    
    Rfc6265Client/ServerCookieEncoder is a better replacement of the old
    Client/ServerCookieEncoder, and thus there's no point of keeping both.
    
    Modifications:
    
    - Remove the old Client/ServerCookieEncoder
    - Remove the 'Rfc6265' prefix from the new cookie encoder/decoder
      classes
    - Deprecate CookieDecoder
    
    Result:
    
    We have much better cookie encoder/decoder implementation now.

commit 0ba4d32040bd4505a6791d78851b12299f4c5eee
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jan 21 19:13:51 2015 +0900

    Fix Javadoc

commit c298230128a72c791d101bb6fd5d0451e274e90f
Author: Stephane Landelle <slandelle@excilys.com>
Date:   Mon Jan 19 15:06:35 2015 +0100

    RFC6265 cookies support
    
    Motivation:
    
    Currently Netty supports a weird implementation of RFC 2965.
    First, this RFC has been deprecated by RFC 6265 and nobody on the
    internet use this format.
    
    Then, there's a confusion between client side and server side encoding
    and decoding.
    
    Typically, clients should only send name=value pairs.
    
    This PR introduces RFC 6265 support, but keeps on supporting RFC 2965 in
    the sense that old unused fields are simply ignored, and Cookie fields
    won't be populated. Deprecated fields are comment, commentUrl, version,
    discard and ports.
    
    It also provides a mechanism for safe server-client-server roundtrip, as
    User-Agents are not supposed to interpret cookie values but return them
    as-is (e.g. if Set-Cookie contained a quoted value, it should be sent
    back in the Cookie header in quoted form too).
    
    Also, there are performance gains to be obtained by not allocating the
    attribute name Strings, as we only want to match them to find which POJO
    field to populate.
    
    Modifications:
    
    - New RFC6265ClientCookieEncoder/Decoder and
      RFC6265ServerCookieEncoder/Decoder pairs that live alongside old
      CookieEncoder/Decoder pair to not break backward compatibility.
    - New Cookie.rawValue field, used for lossless server-client-server
      roundtrip.
    
    Result:
    
    RFC 6265 support.
    Clean separation of client and server side.
    
    Decoder performance gain:
    
    Benchmark                     Mode  Samples        Score        Error
    Units
    parseOldClientDecoder        thrpt       20  2070169,228 ± 105044,970
    ops/s
    parseRFC6265ClientDecoder    thrpt       20  2954015,476 ± 126670,633
    ops/s
    
    This commit closes #3221 and #1406.

commit 279187ba5e53803df4929051080af8a7be478b12
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jan 20 16:46:51 2015 +0900

    Make NetUtil.isValidIp4Word() private
    
    We have deprecated NetUtil.isValidIp4Word() in 4.0. See:
    
    - b0747e743251c786ddd1a6d524af6b34303bd4a3

commit 70541eb72f679a7f8c37389ac7fe8e80f65257d1
Author: JongYoonLim <seedengine@gmail.com>
Date:   Tue Jan 13 10:17:07 2015 +0900

    Fix typo in param name

commit e1a53e61d02d195c952b2eb723c3275eb5989827
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Jan 16 16:47:51 2015 +0100

    Fix compilation error introduced by 7f907e8c2aa2284ea8e48953ec5d3b5f13ed9435

commit 7f907e8c2aa2284ea8e48953ec5d3b5f13ed9435
Author: Frederic Bregier <fredbregier@free.fr>
Date:   Thu Jan 15 09:38:19 2015 +0100

    Accept ';' '\\"' in the filename of HTTP Content-Disposition header
    
    Motivation:
    HttpPostMultipartRequestDecoder threw an ArrayIndexOutOfBoundsException
    when trying to decode Content-Disposition header with filename
    containing ';' or protected \\".
    See issue #3326 and #3327.
    
    Modifications:
    Added splitMultipartHeaderValues method which cares about quotes, and
    use it in splitMultipartHeader method, instead of StringUtils.split.
    
    Result:
    Filenames can contain semicolons and protected \\".

commit 392fb764b6dd4cc05b3dc8f2f3bb53eae689b868
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jan 13 18:09:56 2015 +0900

    Fix IndexOutOfBoundsException from SslHandler on JDK 8
    
    Motivation:
    
    When SslHandler.unwrap() copies SSL records into a heap buffer, it does
    not update the start offset, causing IndexOutOfBoundsException.
    
    Modifications:
    
    - Copy to a heap buffer before calling unwrap() for simplicity
    - Do not copy an empty buffer to a heap buffer.
      - unwrap(... EMPTY_BUFFER ...) never involves copying now.
    - Use better parameter names for unwrap()
    - Clean-up log messages
    
    Result:
    
    - Bugs fixed
    - Cleaner code

commit 1bb818bb59612f1676bb34eb9cde4ea9fb1d3025
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Nov 24 20:26:39 2014 +0100

    Reduce memory copies when using OpenSslEngine with SslHandler
    
    Motivation:
    
    When using OpenSslEngine with the SslHandler it is possible to reduce memory copies by unwrap(...) multiple ByteBuffers at the same time. This way we can eliminate a memory copy that is needed otherwise to cumulate partial received data.
    
    Modifications:
    
    - Add OpenSslEngine.unwrap(ByteBuffer[],...) method that can be used to unwrap multiple src ByteBuffer a the same time
    - Use a CompositeByteBuffer in SslHandler for inbound data so we not need to memory copy
    - Add OpenSslEngine.unwrap(ByteBuffer[],...) in SslHandler if OpenSslEngine is used and the inbound ByteBuf is backed by more then one ByteBuffer
    - Reduce object allocation
    
    Result:
    
    SslHandler is faster when using OpenSslEngine and produce less GC

commit 3ebe2ee36978fca5e3e4f8861e81f9b61a2c7549
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jan 12 00:13:15 2015 +0900

    Remove unnecessary loop and indentation in decompressors
    
    Motivation:
    
    Decompression handlers contain heavy use of switch-case statements. We
    use compact indentation style for 'case' so that we utilize our screen
    real-estate more efficiently.
    
    Also, the following decompression handlers do not need to run a loop,
    because ByteToMessageDecoder already runs a loop for them:
    
    - FastLzFrameDecoder
    - Lz4FrameDecoder
    - LzfDecoder
    
    Modifications:
    
    - Fix indentations
    - Do not wrap the decoding logic with a for loop when unnecessary
    - Handle the case where a FastLz/Lzf frame contains no data properly so
      that the buffer does not leak and less garbage is produced.
    
    Result:
    
    - Efficiency
    - Compact source code
    - No buffer leak

commit fbc0ce4784a589802f812f8dcb2bfae76b783b30
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jan 11 12:45:49 2015 +0900

    Avoid unnecessary string conversion where possible
    
    Motivation:
    
    HttpResponseStaus, HttpMethod and HttpVersion have methods that return
    AsciiString.  There's no need for object-to-string conversion.
    
    Modifications:
    
    Use codeAsText(), name(), text() instead of setInt() and setObject()
    
    Result:
    
    Efficiency

commit edb93a6fccc8e1cecbf84520185bf85ac7eb6aed
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jan 11 12:43:38 2015 +0900

    Remove static imports and inner class imports for disambiguation

commit 04dd885421918ec6ad1bdb252439876e08d663a6
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Sat Jan 10 10:53:54 2015 -0800

    SPDY: fix support for pushed resources in SpdyHttpEncoder
    
    Motivation:
    
    The SpdyHttpDecoder was modified to support pushed resources that are
    divided into multiple frames. The decoder accepts a pushed
    SpdySynStreamFrame containing the request headers, followed by a
    SpdyHeadersFrame containing the response headers.
    
    Modifications:
    
    This commit modifies the SpdyHttpEncoder so that it encodes pushed
    resources in a format that the SpdyHttpDecoder can decode. The encoder
    will accept an HttpRequest object containing the request headers,
    followed by an HttpResponse object containing the response headers.
    
    Result:
    
    The SpdyHttpEncoder will create a SpdySynStreamFrame followed by a
    SpdyHeadersFrame when sending pushed resources.

commit c4630c03285e86d84b83149ba395036447305f63
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jan 9 17:57:42 2015 +0900

    Disable NioUdtMessageRendezvousChannelTest.basicEcho()
    
    Motivation:
    
    NioUdtMessageRendezvoudChannelTest.basicEcho() is flakey on Linux and
    failing on Windows.
    
    Modifications:
    
    Disable the problematic test until it's fixed.
    
    Result:
    
    Less annoyance

commit cb7ab1f6a4acb2e3c27c10f46469bf5ef146ecd1
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jan 9 16:00:26 2015 +0900

    Fix a compilation error

commit 50af9b916c198de51b648582197cea078309b57e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Nov 21 21:10:47 2014 +0100

    Eliminate memory copy in ByteToMessageDecoder whenever possible
    
    Motivation:
    
    Currently when there are bytes left in the cumulation buffer we do a byte copy to produce the input buffer for the decode method. This can put quite some overhead on the impl.
    
    Modification:
    
    - Use a CompositeByteBuf to eliminate the byte copy.
    - Allow to specify if a CompositeBytebug should be used or not as some handlers can only act on one ByteBuffer in an efficient way (like SslHandler :( ).
    
    Result:
    
    Performance improvement as shown in the following benchmark.
    
    Without this patch:
    [xxx@xxx ~]$ ./wrk-benchmark
    Running 5m test @ http://xxx:8080/plaintext
      16 threads and 256 connections
      Thread Stats   Avg      Stdev     Max   +/- Stdev
        Latency    20.19ms   38.34ms   1.02s    98.70%
        Req/Sec   241.10k    26.50k  303.45k    93.46%
      1153994119 requests in 5.00m, 155.84GB read
    Requests/sec: 3846702.44
    Transfer/sec:    531.93MB
    
    With the patch:
    [xxx@xxx ~]$ ./wrk-benchmark
    Running 5m test @ http://xxx:8080/plaintext
      16 threads and 256 connections
      Thread Stats   Avg      Stdev     Max   +/- Stdev
        Latency    17.34ms   27.14ms 877.62ms   98.26%
        Req/Sec   252.55k    23.77k  329.50k    87.71%
      1209772221 requests in 5.00m, 163.37GB read
    Requests/sec: 4032584.22
    Transfer/sec:    557.64MB

commit 98731a51c8332a222258eecdbc61464961fecdbf
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jan 8 12:43:03 2015 +0900

    Add the URL of the wiki for easier troubleshooting
    
    Motivation:
    
    When a user sees an error message, sometimes he or she does not know
    what exactly he or she has to do to fix the problem.
    
    Modifications:
    
    Log the URL of the wiki pages that might help the user troubleshoot.
    
    Result:
    
    We are more friendly.

commit 2c3f4a374a7680b354ce03b67fc94f932759ed47
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jan 8 12:23:14 2015 +0900

    Do not log CNFE when tcnative is not in classpath
    
    Motivation:
    
    When a user deliberatively omitted netty-tcnative from classpath, he or
    she will see an ugly stack trace of ClassNotFoundException.
    
    Modifications:
    
    Log more briefly when netty-tcnative is not in classpath.
    
    Result:
    
    Better-looking log at DEBUG level

commit 85fecba770d803c1990c07ac9aed098585ef0e90
Author: Frederic Bregier <fredbregier@free.fr>
Date:   Tue Jan 6 09:32:13 2015 +0100

    Fix for Issue #3308 related to slice missing retain
    
    Motivations:
    It seems that slicing a buffer and using this slice to write to CTX will
    decrease the initial refCnt to 0, while the original buffer is not yet
    fully used (not empty).
    
    Modifications:
    As suggested in the ticket and tested, when the currentBuffer is sliced
    since it will still be used later on, the currentBuffer is retained.
    
    Add a test case for this issue.
    
    Result:
    The currentBuffer still has its correct refCnt when reaching the last
    write (not sliced) of 1 and therefore will be released correctly.
    The exception does no more occur.
    
    This fix should be applied to all branches >= 4.0.

commit 8ed4807360371ed81bc40b62394b01dc2bb9a7c2
Author: Trustin Lee <t@motd.kr>
Date:   Sat Jan 3 11:51:12 2015 +0900

    Fix broken OSGi version range for NPN and ALPN dependency
    
    Related: #3302

commit 186cf2b8ea4ee1f3ef7c32d2238a172c638e6655
Author: Trustin Lee <t@motd.kr>
Date:   Wed Dec 31 20:40:02 2014 +0900

    Require RHEL 6.6 to release
    
    Motivation:
    
    The latest stable RHEL version of 6.x is now 6.6.
    
    Modification:
    
    Update pom.xml's validation configuration
    
    Result:
    
    Can release on the latest stable RHEL version in 6.x

commit df186f38a086a84dbb8b728169e101e660b0cadf
Author: Trustin Lee <t@motd.kr>
Date:   Wed Dec 31 20:31:56 2014 +0900

    Do not pre-populate cipher suite conversion table
    
    Motivation:
    
    - There's no point of pre-population.
    - Waste of memory and time because they are going to be cached lazily
    - Some pre-populated cipher suites are ancient and will be unused
    
    Modification:
    
    - Remove cache pre-population
    
    Result:
    
    Sanity restored

commit 1d344f488cb5b3adb0630ea9a000b699fb76c09c
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Tue Dec 30 17:19:08 2014 +0100

    Fix ByteBufUtilBenchmark on utf8 encodings.
    
    Motivation
    ----------
    The performance tests for utf8 also used the getBytes on ASCII,
    which is incorrect and also provides different performance numbers.
    
    Modifications
    -------------
    Use CharsetUtil.UTF_8 instead of US_ASCII for the getBytes calls.
    
    Result
    ------
    Accurate and semantically correct benchmarking results on utf8
    comparisons.

commit ecfa241768499dae2bffa174a874e8f9d81d6d1f
Author: Trustin Lee <t@motd.kr>
Date:   Wed Dec 31 19:24:53 2014 +0900

    Make sure AggregatedFullHttpMessage.trailingHeaders() return non-null
    
    When handling an oversized message, HttpObjectAggregator does not wait
    until the last chunk is received to produce the failed message, making
    AggregatedFullHttpMessage.trailingHeaders() return null.

commit 650bb5358de39422bbfbb455e643d1fab7f00a0d
Author: Trustin Lee <t@motd.kr>
Date:   Wed Dec 31 19:13:27 2014 +0900

    Fix duplicate channelReadComplete() in EpollDatagramChannel

commit 20d818ccec9670bea362273be44e1a4c486bcdbe
Author: Trustin Lee <t@motd.kr>
Date:   Wed Dec 31 18:32:48 2014 +0900

    Implement toString() for all HttpMessage implementations
    
    Related: #3019
    
    Motivation:
    
    We have multiple (Full)HttpRequest/Response implementations and only
    some of them implements toString() properly.
    
    Modifications:
    
    - Add the reusable string converter for HttpMessages to HttpMessageUtil
    - Implement toString() of (Full)HttpRequest/Response implementations
      properly using HttpMessageUtil
    
    Result:
    
    Prettier string representation is returned by HttpMessage
    implementations.

commit f398f2f7b5bd40a78ca8ddf71cdbc5114c6b13a0
Author: Trustin Lee <t@motd.kr>
Date:   Wed Dec 31 17:30:56 2014 +0900

    Fire channelReadComplete() in EpollDatagramChannel
    
    Related: #3274
    
    Motivation:
    
    channelReadComplete() event is not triggered after reading successfully
    in EpollDatagramChannel.
    
    Modifications:
    
    - Trigger exceptionCaught() event for read failure only once for less
      noise
    - Trigger channelReadComplete() event at the end of the read.
    
    Result:
    
    Fix #3274

commit 1173699dff65e4f786e098d8b2ffcf172235127a
Author: Trustin Lee <t@motd.kr>
Date:   Tue Dec 30 23:55:47 2014 +0900

    Enable client-side OpenSSL in SocketSslEchoTest

commit 405cdc89dd79f3e6fe0a81a9f81bf794a581c6fb
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Nov 26 10:13:50 2014 +0100

    Only call JNI methods if really needed
    
    Motivation:
    
    Calling JNI methods is pretty expensive, so we should only do if needed.
    
    Modifications:
    
    Lazy call methods if needed.
    
    Result:
    
    Better performance.

commit ea5f38955a8cb50e19a06f06129d4806f522ee1b
Author: Trustin Lee <t@motd.kr>
Date:   Tue Dec 30 19:20:43 2014 +0900

    Raise an exception when the specified cipher suite is not available
    
    Motivation:
    
    SSL_set_cipher_list() in OpenSSL does not fail as long as at least one
    cipher suite is available.  It is different from the semantics of
    SSLEngine.setEnabledCipherSuites(), which raises an exception when the
    list contains an unavailable cipher suite.
    
    Modifications:
    
    - Add OpenSsl.isCipherSuiteAvailable(String) which checks the
      availability of a cipher suite
    - Raise an IllegalArgumentException when the specified cipher suite is
      not available
    
    Result:
    
    Fixed compatibility

commit 7d50f7864c47e6f2a21cab616235350bd2c60f80
Author: Trustin Lee <t@motd.kr>
Date:   Tue Dec 30 18:59:30 2014 +0900

    Implement OpenSslEngine.getSupportedCipherSuites() and get/setEnabledCipherSuites()
    
    Motivation:
    
    To make OpenSslEngine a full drop-in replacement, we need to implement
    getSupportedCipherSuites() and get/setEnabledCipherSuites().
    
    Modifications:
    
    - Retrieve the list of the available cipher suites when initializing
      OpenSsl.
    - Improve CipherSuiteConverter to understand SRP
    - Add more test data to CipherSuiteConverterTest
    - Add bulk-conversion method to CipherSuiteConverter
    
    Result:
    
    OpenSslEngine should now be a drop-in replacement for JDK SSLEngineImpl
    for most cases.

commit a093f00b67222c4e82d9d271545ad89d6204ddfe
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 29 19:13:54 2014 +0900

    Cipher suite conversion between Java and OpenSSL
    
    Related: #3285
    
    Motivation:
    
    When a user attempts to switch from JdkSslContext to OpenSslContext, he
    or she will see the initialization failure if he or she specified custom
    cipher suites.
    
    Modifications:
    
    - Provide a utility class that converts between Java cipher suite string
      and OpenSSL cipher suite string
    - Attempt to convert the cipher suite so that a user can use the cipher
      suite string format of Java regardless of the chosen SslContext impl
    
    Result:
    
    - It is possible to convert all known cipher suite strings.
    - It is possible to switch from JdkSslContext and OpenSslContext and
      vice versa without any configuration changes

commit 155c0e2f369eaebe78f91d69e7eada7c1ac64ea7
Author: Trustin Lee <t@motd.kr>
Date:   Tue Dec 30 15:52:57 2014 +0900

    Implement internal memory access methods of CompositeByteBuf correctly
    
    Motivation:
    
    When a CompositeByteBuf is empty (i.e. has no component), its internal
    memory access operations do not always behave as expected.
    
    Modifications:
    
    Check if the nunmber of components is zero. If so, return an empty
    array or an empty NIO buffer, etc.
    
    Result:
    
    More robustness

commit a666acce6d48bf50f49f3cca9874ac64a89d7c4a
Author: Trustin Lee <t@motd.kr>
Date:   Tue Dec 30 15:47:33 2014 +0900

    Add more tests to EmptyByteBufTest
    
    - Ensure an EmptyByteBuf has an array, an NIO buffer, and a memory
      address at the same time
    - Add an assertion that checks if EMPTY_BUFFER is an EmptyByteBuf,
      just in case we make a mistake in the future

commit f26be2e97364ee3d697a5d773469622772d78291
Author: Trustin Lee <t@motd.kr>
Date:   Tue Dec 30 12:48:37 2014 +0900

    Clean up the exception messages
    
    - Consistency
    - Use the method name of the current scope if possible

commit aa42287e46f39f6a907d5da09194bb4487be8309
Author: Trustin Lee <t@motd.kr>
Date:   Tue Dec 30 12:20:43 2014 +0900

    Throw exceptions outside the native code
    
    Rebased and cleaned-up based on the work by @normanmaurer
    
    Motivation:
    
    Currently, IOExceptions and ClosedChannelExceptions are thrown from
    inside the JNI methods. Instantiation of Java objects inside JNI code is
    an expensive operation, needless to say about filling stack trace for
    every instantiation of an exception.
    
    Modifications:
    
    Change most JNI methods to return a negative value on failure so that
    the exceptions are instantiated outside the native code.
    
    Also, pre-instantiate some commonly-thrown exceptions for better
    performance.
    
    Result:
    
    Performance gain

commit a77070fe9ffc64c9e4fada03b0fe20087e109dd4
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 29 15:54:56 2014 +0900

    Clean-up

commit 268111208007b1336dc1bbdcb0b9c15427e14e1f
Author: Frederic Bregier <fredbregier@free.fr>
Date:   Sat Oct 25 13:16:56 2014 +0200

    Fix big transfer and Write traffic shaping issues
    
    Motivation:
    
    Several issues were shown by various ticket (#2900 #2956).
    Also use the improvement on writability user management from #3036.
    And finally add a mixte handler, both for Global and Channels, with
    the advantages of being uniquely created and using less memory and
    less shaping.
    
    Issue #2900
    
    When a huge amount of data are written, the current behavior of the
    TrafficShaping handler is to limit the delay to 15s, whatever the delay
    the previous write has. This is wrong, and when a huge amount of writes
    are done in a short time, the traffic is not correctly shapened.
    
    Moreover, there is a high risk of OOM if one is not using in his/her own
    handler for instance ChannelFuture.addListener() to handle the write
    bufferisation in the TrafficShapingHandler.
    
    This fix use the "user-defined writability flags" from #3036 to
    allow the TrafficShapingHandlers to "user-defined" managed writability
    directly, as for reading, thus using the default isWritable() and
    channelWritabilityChanged().
    This allows for instance HttpChunkedInput to be fully compatible.
    
    The "bandwidth" compute on write is only on "acquired" write orders, not
    on "real" write orders, which is wrong from statistic point of view.
    
    Issue #2956
    
    When using GlobalTrafficShaping, every write (and read) are
    synchronized, thus leading to a drop of performance.
    ChannelTrafficShaping is not touched by this issue since synchronized is
    then correct (handler is per channel, so the synchronized).
    
    Modifications:
    The current write delay computation takes into account the previous
    write delay and time to check is the 15s delay (maxTime) is really
    exceeded or not (using last scheduled write time). The algorithm is
    simplified and in the same time more accurate.
    
    This proposal uses the #3036 improvement on user-defined writability
    flags.
    
    When the real write occurs, the statistics are update accordingly on a
    new attribute (getRealWriteThroughput()).
    
    To limit the synchronisations, all synchronized on
    GlobalTrafficShapingHandler on submitWrite were removed. They are
    replaced with a lock per channel (since synchronization is still needed
    to prevent unordered write per channel), as in the sendAllValid method
    for the very same reason.
    Also all synchronized on TrafficCounter on read/writeTimeToWait() are
    removed as they are unnecessary since already locked before by the
    caller.
    Still the creation and remove operations on lock per channel (PerChannel
    object) are synchronized to prevent concurrency issue on this critical
    part, but then limited.
    
    Additionnal changes:
    1) Use System.nanoTime() instead of System.currentTimeMillis() and
    minimize calls
    2) Remove / 10 ° 10 since no more sleep usage
    3) Use nanoTime instead of currentTime such that time spend is computed,
    not real time clock. Therefore the "now" relative time (nanoTime based)
    is passed on all sub methods.
    4) Take care of removal of the handler to force write all pending writes
    and release read too
    8) Review Javadoc to explicit:
    
    - recommandations to take into account isWritable
    
    - recommandations to provide reasonable message size according to
    traffic shaping limit
    
    - explicit "best effort" traffic shaping behavior when changing
    configuration dynamically
    
    Add a MixteGlobalChannelTrafficShapingHandler which allows to use only one
    handler for mixing Global and Channel TSH. I enables to save more memory and
    tries to optimize the traffic among various channels.
    
    Result:
    The traffic shaping is more stable, even with a huge number of writes in
    short time by taking into consideration last scheduled write time.
    
    The current implementation of TrafficShapingHandler using user-defined
    writability flags and default isWritable() and
    fireChannelWritabilityChanged works as expected.
    
    The statistics are more valuable (asked write vs real write).
    
    The Global TrafficShapingHandler should now have less "global"
    synchronization, hoping to the minimum, but still per Channel as needed.
    
    The GlobalChannel TrafficShapingHandler allows to have only one handler for all channels while still offering per channel in addition to global traffic shaping.
    
    And finally maintain backward compatibility.

commit 58c14418a093c60cbe37533538f5079687d77267
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 28 19:10:01 2014 +0900

    Upgrade to netty-tcnative-1.1.32.Fork1

commit f0e306c2fdc394c9af901243e35a95df2323a1ae
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Dec 8 08:32:48 2014 +0100

    Allow to override how headers are encoded
    
    Motivation:
    
    Even if its against the HTTP RFC there are situations where it may be useful to use other chars then US_ASCII in the headers. We should allow to make it possible by allow the user to override the how headers are encoded.
    
    Modifications:
    
    - Add encodeHeaders(...) method and so allow to override it.
    
    Result:
    
    It's now possible to encode headers with other charset then US_ASCII by just extend the encoder and override the encodeHeaders(...) method.

commit b8dd95b8ad592badc9a8aa53fa3b9f48ffad13fb
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Nov 6 09:48:54 2014 +0100

    Allow to set the context for which sessions can be used.
    
    Motivation:
    
    Openssl supports the SSL_CTX_set_session_id_context function to limit for which context a session can be used. We should support this.
    
    Modifications:
    
    Add OpenSslServerSessionContext that exposes a setSessionIdContext(...) method now.
    
    Result:
    
    It's now possible to use SSL_CTX_set_session_id_context.

commit 8e6739ddc0d411f1d74838ce2085efff6ef7449f
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Nov 3 19:19:40 2014 +0100

    Explicit allow to enable / disable session cache
    
    Motivation:
    
    It is sometimes useful to enable / disable the session cache.
    
    Modifications:
    
    * Add OpenSslSessionContext.setSessionCacheEnabled(...) and isSessionCacheEnabled()
    
    Result:
    
    It is now possible to enable / disable cache on the fly

commit 8a1c7f2ca6805b35fc26c2f1a59c814d4a07fd7d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Nov 7 11:05:07 2014 +0100

    Allow to enable/disable protocols on the OpenSslEngine
    
    Motivation:
    
    To be compatible with SSLEngine we need to support enable / disable procols on the OpenSslEngine
    
    Modifications:
    
    Implement OpenSslEngine.getSupportedProtocols() , getEnabledProtocols() and setEnabledProtocols(...)
    
    Result:
    
    Better compability with SSLEngine

commit 7423db0b8e29248ba78a9b1e98dafb876e828836
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Nov 6 09:02:57 2014 +0100

    Add proper Openssl.SSLSession.getId() implementation
    
    Motivation:
    
    The current implementation not returns the real session as byte[] representation.
    
    Modifications:
    
    Create a proper Openssl.SSLSession.get() implementation which returns the real session as byte[].
    
    Result:
    
    More correct implementation

commit fb3b16d9d4ffc194dae1d4454680359b48396dba
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Nov 3 15:34:21 2014 +0100

    Allow to enable session cache when using OpenSsl
    
    Motivation:
    
    At the moment it is not possible to make use of the session cache when OpenSsl is used. This should be possible when server mode is used.
    
    Modifications:
    
    - Add OpenSslSessionContext (implements SSLSessionContext) which exposes all the methods to modify the session cache.
    - Add various extra methods to OpenSslSessionContext for extra functionality
    - Return OpenSslSessionContext when OpenSslEngine.getSession().getContext() is called.
    - Add sessionContext() to SslContext
    - Move OpenSsl specific session operations to OpenSslSessionContext and mark the old methods @deprecated
    
    Result:
    
    It's now possible to use session cache with OpenSsl

commit fe796fc8abaaf71a083f041e235b7b7ba6b00cee
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Sep 4 16:04:33 2014 +0200

    Provide helper methods in ByteBufUtil to write UTF-8/ASCII CharSequences. Related to [#909]
    
    Motivation:
    
    We expose no methods in ByteBuf to directly write a CharSequence into it. This leads to have the user either convert the CharSequence first to a byte array or use CharsetEncoder. Both cases have some overheads and we can do a lot better for well known Charsets like UTF-8 and ASCII.
    
    Modifications:
    
    Add ByteBufUtil.writeAscii(...) and ByteBufUtil.writeUtf8(...) which can do the task in an optimized way. This is especially true if the passed in ByteBuf extends AbstractByteBuf which is true for all of our implementations which not wrap another ByteBuf.
    
    Result:
    
    Writing an ASCII and UTF-8 CharSequence into a AbstractByteBuf is a lot faster then what the user could do by himself as we can make use of some package private methods and so eliminate reference and range checks. When the Charseq is not ASCII or UTF-8 we can still do a very good job and are on par in most of the cases with what the user would do.
    
    The following benchmark shows the improvements:
    
    Result: 2456866.966 ?(99.9%) 59066.370 ops/s [Average]
      Statistics: (min, avg, max) = (2297025.189, 2456866.966, 2586003.225), stdev = 78851.914
      Confidence interval (99.9%): [2397800.596, 2515933.336]
    
    Benchmark                                                        Mode   Samples        Score  Score error    Units
    i.n.m.b.ByteBufUtilBenchmark.writeAscii                         thrpt        50  9398165.238   131503.098    ops/s
    i.n.m.b.ByteBufUtilBenchmark.writeAsciiString                   thrpt        50  9695177.968   176684.821    ops/s
    i.n.m.b.ByteBufUtilBenchmark.writeAsciiStringViaArray           thrpt        50  4788597.415    83181.549    ops/s
    i.n.m.b.ByteBufUtilBenchmark.writeAsciiStringViaArrayWrapped    thrpt        50  4722297.435    98984.491    ops/s
    i.n.m.b.ByteBufUtilBenchmark.writeAsciiStringWrapped            thrpt        50  4028689.762    66192.505    ops/s
    i.n.m.b.ByteBufUtilBenchmark.writeAsciiViaArray                 thrpt        50  3234841.565    91308.009    ops/s
    i.n.m.b.ByteBufUtilBenchmark.writeAsciiViaArrayWrapped          thrpt        50  3311387.474    39018.933    ops/s
    i.n.m.b.ByteBufUtilBenchmark.writeAsciiWrapped                  thrpt        50  3379764.250    66735.415    ops/s
    i.n.m.b.ByteBufUtilBenchmark.writeUtf8                          thrpt        50  5671116.821   101760.081    ops/s
    i.n.m.b.ByteBufUtilBenchmark.writeUtf8String                    thrpt        50  5682733.440   111874.084    ops/s
    i.n.m.b.ByteBufUtilBenchmark.writeUtf8StringViaArray            thrpt        50  3564548.995    55709.512    ops/s
    i.n.m.b.ByteBufUtilBenchmark.writeUtf8StringViaArrayWrapped     thrpt        50  3621053.671    47632.820    ops/s
    i.n.m.b.ByteBufUtilBenchmark.writeUtf8StringWrapped             thrpt        50  2634029.071    52304.876    ops/s
    i.n.m.b.ByteBufUtilBenchmark.writeUtf8ViaArray                  thrpt        50  3397049.332    57784.119    ops/s
    i.n.m.b.ByteBufUtilBenchmark.writeUtf8ViaArrayWrapped           thrpt        50  3318685.262    35869.562    ops/s
    i.n.m.b.ByteBufUtilBenchmark.writeUtf8Wrapped                   thrpt        50  2473791.249    46423.114    ops/s
    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1,387.417 sec - in io.netty.microbench.buffer.ByteBufUtilBenchmark
    
    Results :
    
    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0
    
    Results :
    
    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0
    
    The *ViaArray* benchmarks are basically doing a toString().getBytes(Charset) which the others are using ByteBufUtil.write*(...).

commit cf6eb70f936497c833d357efebc05157c0e59c0c
Author: Trustin Lee <t@motd.kr>
Date:   Fri Dec 26 15:44:39 2014 +0900

    Fix NoClassDefFoundError when netty-tcnative is unavailable
    
    Motivation:
    
    ProxyHandlerTest fails with NoClassDefFoundError raised by
    SslContext.newClientContext().
    
    Modifications:
    
    Fix a missing 'return' statement that makes the switch-case block fall
    through unncecessarily
    
    Result:
    
    - ProxyHandlerTest does not fail anymore.
    - SslContext.newClientContext() does not raise NoClassDefFoundError
      anymore.

commit 5ba4fdf3bafc36708212c1b11804c4ff04903701
Author: Jeff Beck <beckje01@gmail.com>
Date:   Wed Dec 24 14:48:41 2014 -0600

    HttpObjectAggregator only set Content-Length is not already set.
    
    Motivation:
    
    HEAD requests will have a Content-Length set that doesn't match the
    actual length. So we only want to set Content-Length header if it isn't
    already set.
    
    Modifications:
    
    If check around setting the Content-Length.
    
    Result:
    
    A HEAD request will no correctly return the specified Content-Length
    instead of the body length.

commit 5c57b5de5bbe3c5297d434842acd58e2d61c566d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Oct 17 16:11:40 2014 +0200

    Check for errors without object allocation
    
    Motivation:
    
    At the moment we use SSL.getLastError() in unwrap(...) to check for error. This is very inefficient as it creates a new String for each check and we also use a String.startsWith(...) to detect if there was an error we need to handle.
    
    Modifications:
    
    Use SSL.getLastErrorNumber() to detect if we need to handle an error, as this only returns a long and so no String creation happens. Also the detection is much cheaper as we can now only compare longs. Once an error is detected the lately SSL.getErrorString(long) is used to conver the error number to a String and include it in log and exception message.
    
    Result:
    
    Performance improvements in OpenSslEngine.unwrap(...) due less object allocation and also faster comparations.

commit 1729859c68f5d7ba647854b69b4fccf5bf2ccb9d
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Oct 30 08:56:07 2014 +0100

    Use OpenSslClientContext as default if openssl is avaible
    
    Motivation:
    
    As we now support OpenSslEngine for client side, we should use it when avaible.
    
    Modifications:
    
    Use SslProvider.OPENSSL when openssl can be found
    
    Result:
    
    OpenSslEngine is used whenever possible

commit 15ca81a5656b4202df3584eee0b98511405901d5
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Oct 22 11:18:00 2014 +0200

    Allow to use custom TrustManagerFactory for JdkSslServerContent and OpenSslServerContext
    
    Motivation:
    
    When using client auth it is sometimes needed to use a custom TrustManagerFactory.
    
    Modifications:
    
    Allow to pass in TrustManagerFactory
    
    Result:
    
    It's now possible to use custom TrustManagerFactories for JdkSslServerContext and OpenSslServerContext

commit 393e3ea38360add92294982c422a770cf5dd1ed8
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Oct 21 22:14:34 2014 +0200

    Use TrustManager for certificate verification
    
    Motivation:
    
    To make OpenSsl*Context a drop in replacement for JdkSsl*Context we need to use TrustManager.
    
    Modifications:
    
    Correctly hook in the TrustManager
    
    Result:
    
    Better compatibility

commit 473c23aec9febb9e79bb1ef7add44cb26cfe227c
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Oct 21 10:14:15 2014 +0200

    Allow to enable client authentication on the OpenSslEngine
    
    Motivation:
    
    At the moment there is no way to enable client authentication when using OpenSslEngine. This limits the uses of OpenSslEngine.
    
    Modifications:
    
    Add support for different authentication modes.
    
    Result:
    
    OpenSslEngine can now also be used when client authenticiation is needed.

commit 87eca066da16ba848d0f069835c706ecabd5ca74
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Oct 20 09:59:39 2014 +0200

    More complete OpenSslEngine SSLSession implementation
    
    Motivation:
    
    The current SSLSession implementation used by OpenSslEngine does not support various operations and so may not be a good replacement by the SSLEngine provided by the JDK implementation.
    
    Modifications:
    
    - Add SSLSession.getCreationTime()
    - Add SSLSession.getLastAccessedTime()
    - Add SSLSession.putValue(...), getValue(...), removeValue(...), getValueNames()
    - Add correct SSLSession.getProtocol()
    - Ensure OpenSSLEngine.getSession() is thread-safe
    - Use optimized AtomicIntegerFieldUpdater when possible
    
    Result:
    
    More complete OpenSslEngine SSLSession implementation

commit 682df517c9d8c9a0ad2a37f7a4eb219305de28e5
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Mon Oct 13 13:21:29 2014 +0200

    Add OpenSslClientContext to allow creating SslEngine for client side
    
    Motivation:
    
    We only support openssl for server side at the moment but it would be also useful for client side.
    
    Modification:
    
    * Upgrade to new netty-tcnative snapshot to support client side openssl support
    * Add OpenSslClientContext which can be used to create SslEngine for client side usage
    * Factor out common logic between OpenSslClientContext and OpenSslServerContent into new abstract base class called OpenSslContext
    * Correctly detect handshake failures as soon as possible
    * Guard against segfault caused by multiple calls to destroyPools(). This can happen if OpenSslContext throws an exception in the constructor and the finalize() method is called later during GC
    
    Result:
    
    openssl can be used for client and servers now.

commit 79bb200f591bed06cdf4f47783e41ced06c05515
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 22 22:32:21 2014 +0900

    Remove thepiratebay.se from the test domain list
    
    .. due to its instability

commit b7e82b2ccb13dd6749f66471016cf37713050342
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Fri Nov 21 21:13:41 2014 +0100

    Efficiently handle writing ( wrap(...) ) of CompositeByteBuf when using SslHandler
    
    Motivation:
    
    SslHandler.wrap(...) does a poor job when handling CompositeByteBuf as it always call ByteBuf.nioBuffer() which will do a memory copy when a CompositeByteBuf is used that is backed by multiple ByteBuf.
    
    Modifications:
    
    - Use SslEngine.wrap(ByteBuffer[]...) to allow wrap CompositeByteBuf in an efficient manner
    - Reduce object allocation in unwrapNonAppData(...)
    
    Result:
    
    Performance improvement when a CompositeByteBuf is written and the SslHandler is in the ChannelPipeline.

commit 66294892a0eb7ec5c28bb75e173de205ea86100b
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Nov 25 18:30:53 2014 +0100

    CompositeByteBuf.nioBuffers(...) must not return an empty ByteBuffer array
    
    Motivation:
    
    CompositeByteBuf.nioBuffers(...) returns an empty ByteBuffer array if the specified length is 0. This is not consistent with other ByteBuf implementations which return an ByteBuffer array of size 1 with an empty ByteBuffer included.
    
    Modifications:
    
    Make CompositeByteBuf.nioBuffers(...) consistent with other ByteBuf implementations.
    
    Result:
    
    Consistent and correct behaviour of nioBufffers(...)

commit a69a39c84949c6093182858092d57139a128e2bf
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Dec 11 20:50:54 2014 +0100

    Always return SliceByteBuf on slice(...) to eliminate possible leak
    
    Motivation:
    
    When calling slice(...) on a ByteBuf the returned ByteBuf should be the slice of a ByteBuf and shares it's reference count. This is important as it is perfect legal to use buf.slice(...).release() and have both, the slice and the original ByteBuf released. At the moment this is only the case if the requested slice size is > 0. This makes the behavior inconsistent and so may lead to a memory leak.
    
    Modifications:
    
    - Never return Unpooled.EMPTY_BUFFER when calling slice(...).
    - Adding test case for buffer.slice(...).release() and buffer.duplicate(...).release()
    
    Result:
    
    Consistent behaviour and so no more leaks possible.

commit 699e6e3b024d4e42f11cad11c080b33e8ea4dcac
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Thu Dec 11 10:36:56 2014 +0100

    Fix memory leak in OpenSslEngine
    
    Motivation:
    
    When a remote peer did open a connection and only do the handshake without sending any data and then directly close the connection we did not call shutdown() in the OpenSslEngine. This leads to a native memory leak. Beside this it also was not fireed when a OpenSslEngine was created but never used.
    
    Modifications:
    
    - Make sure shutdown() is called in all cases when closeInbound() is called
    - Call shutdown() also in the finalize() method to ensure we release native memory when the OpenSslEngine is GC'ed
    
    Result:
    
    No more memory leak when using OpenSslEngine

commit 563bf24424a5516765105cfbf3989c359925832d
Author: Trustin Lee <t@motd.kr>
Date:   Wed Dec 17 10:15:52 2014 +0900

    Do not use SLF4J/Logback API directly
    
    Motivation:
    
    TrafficShapingHandlerTest uses Logback API directly, which is
    discouraged.  Also, it overrides the global default log level, which
    silences the DEBUG messages from other tests.
    
    Modifications:
    
    Remove the direct use of Logback API
    
    Result:
    
    The tests executed after TrafficShapingHandlerTest logs their DEBUG
    messages correctly.

commit 93194c65950f155669cd6c342c5eaa7ac05af4ac
Author: Scott Mitchell <scott.k.mitch1@gmail.com>
Date:   Tue Dec 16 19:08:47 2014 -0500

    Parent pom inconsistent between baselines
    
    Motivation:
    ALPN version updates revealed an inconsistency visible by defaulting to npn when alpn was expected.
    
    Modifications:
    Default to ALPN.
    
    Result:
    Build and unit tests should pass.

commit 08f7b24d6a3374fceb781333c794321cd501a929
Author: Scott Mitchell <scott.k.mitch1@gmail.com>
Date:   Tue Dec 16 09:24:49 2014 -0500

    Java ALPN provider version update
    
    Motivation:
    
    There was a bug in the Java ALPN library we are using.  A new version was released to fix this bug and we should update our pom.xml to use the new version.
    
    Modifications:
    
    Update pom.xml to use new ALPN library.
    
    Result:
    
    Newer versions of JDK (1.7_u71, 1.7_u72, 1.8_u25) have the bug fixed.

commit 4f7632a853639cf015936a1c51412936dcb1cf84
Author: Trustin Lee <t@motd.kr>
Date:   Tue Dec 16 20:34:01 2014 +0900

    Fix checkstyle

commit 98a2bb62f5f4bb0b6bfc08e01ced827e06e2ea2d
Author: Trustin Lee <t@motd.kr>
Date:   Tue Dec 16 17:40:00 2014 +0900

    Log detailed information about renegotiation and traffic
    
    Motivation:
    
    We need more information to understand why SocketSslEchoTest fails
    sporadically in the CI machine.
    
    Modifications:
    
    - Refactor SocketSslEchoTest so that it is easier to retrieve the
      information about renegotiation and the current progress
    
    Result:
    
    We will get more information when the test fails.

commit c7b407e28871a01db7541df4eddd196349ce32ab
Author: Trustin Lee <t@motd.kr>
Date:   Tue Dec 16 16:13:08 2014 +0900

    Compress the heap dump after tests are finished
    
    Motivation:
    
    Tests sometimes time out because it took too long to compress the
    generated heap dump.
    
    Modifications:
    
    - Move the compression logic to a new method 'compressHeapDumps()'
    - Call TestUtils.compressHeapDumps() at the end of the tests, so that
      the tests do not fail because of timeout
    
    Result:
    
    JUnit reports the real cause of the test failure instead of timeout
    exception.

commit 9ee75126ebc7fb025468fee0c13012a75f6e642c
Author: Leonardo Freitas Gomes <leonardo.f.gomes@gmail.com>
Date:   Sun Dec 14 14:35:43 2014 +0100

    Motivation: Sonar points out an equals comparison, where the types compared are different and don't share any common parent http://clinker.netty.io/sonar/drilldown/issues/io.netty:netty-parent:master?severity=CRITICAL#
    
    Modifications:
    Converted AsciiString into a String by calling toString() method before comparing with equals(). Also added a unit-test to show that it works.
    
    Result:
    Major violation is gone. Code is correct.

commit bd6d0f3fd56318da43f0ae75f0f0d5ebbf490cb6
Author: zcourts <courtney@crlog.info>
Date:   Mon Dec 15 17:23:45 2014 +0000

    ensure getRawQuery is not null before appending
    
    Motivation:
    
    without this check then given a URI with path /path the resulting URL will be /path?null=
    
    Modifications:
    
    check that getRawQuery doesn't return null and only append if not
    
    Result:
    
    urls of the form /path will not have a null?= appended

commit 8d4a97e05be6bbe3072a24bbd51db39a57be60b3
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 14 21:57:24 2014 +0900

    Generate non-test JAR for netty-testsuite
    
    Motivation:
    
    So far, we generated and deployed test JARs to Maven repositories. The
    deployed JAR had the classifier 'test-jar'.  The test JAR is consumed by
    transport-native-epoll as a test dependency.
    
    The problem is, when netty-transport-native-epoll pulls the test JAR as
    a dependency, that Maven resolves its transitive dependencies at
    'compile' and 'runtime' scope only, which is incorrect.
    
    I was bitten by this problem recently while trying to add a new
    dependency to netty-testsuite.  Because I added a new dependency at the
    'test' scope, the new dependency was not pulled transitively by
    transport-native-epoll and caused an unexpected build failure.
    
    - d6160208c37cfd21b690f1a0df67776bf986b28e
    - bf77bb4c3ae04778e65b8a38c2a9ec0e15207de8
    
    Modifications:
    
    - Move all classes in netty-testsuite from src/test to src/main
    - Update the 'compile' scope dependencies of netty-testsuite
    - Override the test directory configuration properties of the surefire
      plugin
    - Do not generate the test JAR anymore
    - Update the dependency of netty-transport-native-epoll
    
    Result:
    
    It is less error-prone to add a new dependency to netty-testsuite.

commit 5dd48cf3fe7c197a541a425f4df75f55dfffef5e
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 14 21:29:26 2014 +0900

    Fix build errors due to missing dependency

commit cbbf5eb96bcc60b9119b707603f1031f43edf080
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 14 11:59:09 2014 +0900

    Compress the heap dump generated by TestUtils.dump()
    
    Motivation:
    
    It takes too long to download the heap dump from the CI server.
    
    Modifications:
    
    Compress the heap dump as much as possible.
    
    Result:
    
    When heap dump is generated by certain test failure, the generated heap
    dump file is about 3 times smaller than before, although the compression
    time will increase the build time when the test fails.

commit 0bc08515699dc4b385c0e2ea314a94b82c01493f
Author: ysammy <samuel.j.young@gmail.com>
Date:   Fri Dec 12 09:27:22 2014 -0800

    Fix documentation for ChannelHandlerContext#fireChannelReadComplete
    
    Motivation:
    Fix a minor documentation bug in
    ChannelHandlerContext#fireChannelReadComplete.
    
    Modifications:
    ChannelHandlerContext#fireChannelReadComplete no longer references an
    incorrect method in its javadoc.
    
    Results:
    Documentation is correct.

commit 73c0f85d63ccabdbd29de433243975ab2e098265
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Oct 22 15:25:30 2014 +0200

    Remove bottleneck while create InetSocketAddress in native transport
    
    Motivation:
    
    Everytime a new connection is accepted via EpollSocketServerChannel it will create a new EpollSocketChannel that needs to get the remote and local addresses in the constructor. The current implementation uses new InetSocketAddress(String, int) to create these. This is quite slow due the implementation in oracle and openjdk.
    
    Modifications:
    
    Encode all needed informations into a byte array before return from jni layer and then use new InetSocketAddress(InetAddress, int) to create the socket addresses. This allows to create the InetAddress via a byte[] and so reduce the overhead, this is done either by using InetAddress.getByteAddress(byte[]) or by Inet6Address.getByteAddress(String, byte[], int).
    
    Result:
    
    Reduce performance overhead while accept new connections with native transport

commit dfd0cc5ea2c2e271a591585913da985f328ea639
Author: Trustin Lee <t@motd.kr>
Date:   Fri Dec 12 18:00:50 2014 +0900

    Add more assertions related with TLS renegotiation

commit e7cf1dcb989b7b04b11621b0fa95eafa8277d49c
Author: Trustin Lee <t@motd.kr>
Date:   Fri Dec 12 17:43:23 2014 +0900

    Test TLS renegotiation with explicit cipher suite change
    
    Motivation:
    
    So far, our TLS renegotiation test did not test changing cipher suite
    during renegotiation explicitly.
    
    Modifications:
    
    - Switch the cipher suite during renegotiation
    
    Result:
    
    We are now sure the cipher suite change works.

commit 6ee069ffb4869580e4e67d6b9c4ae01b53017105
Author: Trustin Lee <t@motd.kr>
Date:   Fri Dec 12 11:54:14 2014 +0900

    Add log messages when dump starts
    
    .. to make it easier to find the right dump file for a test when there
    are multiple dump files.

commit e72b2235fbddd17e13dfefb7bb439dd1ea8538bf
Author: Trustin Lee <t@motd.kr>
Date:   Fri Dec 12 11:47:52 2014 +0900

    Make sure to notify handshake success even if SSLEngine is closed
    
    Related:
    
    e9685ea45aebcb4f9dad0f3a1fc328a06b4932dd
    
    Motivation:
    
    SslHandler.unwrap() does not evaluate the handshake status of
    SSLEngine.unwrap() when the status of SSLEngine.unwrap() is CLOSED.
    
    It is not correct because the status does not reflect the state of the
    handshake currently in progress, accoding to the API documentation of
    SSLEngineResult.Status.
    
    Also, sslCloseFuture can be notified earlier than handshake notification
    because we call sslCloseFuture.trySuccess() before evaluating handshake
    status.
    
    Modifications:
    
    - Notify sslCloseFuture after the unwrap loop is finished
    - Add more assertions to SocketSslEchoTest
    
    Result:
    
    Potentially fix the regression caused by:
    - e9685ea45aebcb4f9dad0f3a1fc328a06b4932dd

commit 3cd94822f5b687700d1fa088f1638e14f6d1953b
Author: Trustin Lee <t@motd.kr>
Date:   Fri Dec 12 10:30:57 2014 +0900

    Generate heap and thread dump when some tests fail
    
    Motivation:
    
    We have a few sporadic test failures which are only easily reproduceable
    in our CI machine.  To get more information about the failure, we need
    heap and full thread dump at the moment of failure.
    
    Modifications:
    
    - Add TestUtils.dump() method to dump heap and threads
    - Modify SocketGatheringWriteTest and SocketSslEchoTest to call
      TestUtils.dump() on failure
    
    Result:
    
    We get more information about the test failure.

commit 12c9ce7f679cc593ea7e902302cef756cd2bef05
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Tue Oct 28 19:42:07 2014 +0100

    Allow to lazy create a DefaultFileRegion from a File
    
    Motivation:
    
    We only provided a constructor in DefaultFileRegion that takes a FileChannel which means the File itself needs to get opened on construction. This has the problem that if you want to write a lot of Files very fast you may end up with may open FD's even if they are not needed yet. This can lead to hit the open FD limit of the OS.
    
    Modifications:
    
    Add a new constructor to DefaultFileRegion which allows to construct it from a File. The FileChannel will only be obtained when transferTo(...) is called or the DefaultFileRegion is explicit open'ed via open() (this is needed for the native epoll transport)
    
    Result:
    
    Less resource usage when writing a lot of DefaultFileRegion.

commit 182c91f06c5c9ae52af884eaf4d7726472363a8e
Author: Norman Maurer <norman_maurer@apple.com>
Date:   Wed Nov 5 14:38:56 2014 +0100

    Ensure buffer is not released when call array() / memoryAddress()
    
    Motivation:
    
    Before we missed to check if a buffer was released before we return the backing byte array or memoryaddress. This could lead to JVM crashes when someone tried various bulk operations on the Unsafe*ByteBuf implementations.
    
    Modifications:
    
    Always check if the buffer is released before all to return the byte array and memoryaddress.
    
    Result:
    
    No more JVM crashes because of released buffers when doing bulk operations on Unsafe*ByteBuf implementations.

commit d5a24d4f6c5110fcd2c3185e3752c4537ad84b7c
Author: Trustin Lee <t@motd.kr>
Date:   Thu Dec 11 17:48:45 2014 +0900

    Make SslHandler work when autoRead is turned off
    
    Related: #2958
    
    Motivation:
    
    SslHandler currently does not issue a read() request when it is
    handshaking. It makes a connection with autoRead off stall, because a
    user's read() request can be used to read the handshake response which
    is invisible to the user.
    
    Modifications:
    
    - SslHandler now issues a read() request when:
      - the current handshake is in progress and channelReadComplete() is
        invoked
      - the current handshake is complete and a user issued a read() request
        during handshake
    - Rename flushedBeforeHandshakeDone to flushedBeforeHandshake for
      consistency with the new variable 'readDuringHandshake'
    
    Result:
    
    SslHandler should work regardless whether autoRead is on or off.

commit 1dc1831abfb4a8f818e34f5c6781b1a96a60456f
Author: Trustin Lee <t@motd.kr>
Date:   Wed Dec 10 18:47:53 2014 +0900

    Add SslHandler.renegotiate()
    
    Related: #3125
    
    Motivation:
    
    We did not expose a way to initiate TLS renegotiation and to get
    notified when the renegotiation is done.
    
    Modifications:
    
    - Add SslHandler.renegotiate() so that a user can initiate TLS
      renegotiation and get the future that's notified on completion
    - Make SslHandler.handshakeFuture() return the future for the most
      recent handshake so that a user can get the future of the last
      renegotiation
    - Add the test for renegotiation to SocketSslEchoTest
    
    Result:
    
    Both client-initiated and server-initiated renegotiations are now
    supported properly.

commit 298e7af6473f359cf7b608e7f9dcbe6526f792dd
Author: Trustin Lee <t@motd.kr>
Date:   Wed Dec 10 18:36:53 2014 +0900

    Trigger channelWritabilityChanged() later to avoid reentrance
    
    Related: #3212
    
    Motivation:
    
    When SslHandler and ChunkedWriteHandler exists in a pipeline together,
    it is possible that ChunkedWriteHandler.channelWritabilityChanged()
    invokes SslHandler.flush() and vice versa. Because they can feed each
    other (i.e. ChunkedWriteHandler.channelWritabilityChanged() ->
    SslHandler.flush() -> ChunkedWriteHandler.channelWritabilityChanged() ->
    ..), they can fall into an inconsistent state due to reentrance (e.g.
    bad MAC record at the remote peer due to incorrect ordering.)
    
    Modifications:
    
    - Trigger channelWritabilityChanged() using EventLoop.execute() when
      there's a chance where channelWritabilityChanged() can cause a
      reentrance issue
    - Fix test failures caused by the modification
    
    Result:
    
    Fix the handler reentrance issues related with a
    channelWritabilityChanged() event

commit 9ff234abedb92596b3c0c2f8c3a969cb533f7cc3
Author: Trustin Lee <t@motd.kr>
Date:   Tue Dec 9 18:16:55 2014 +0900

    Call ctx.flush() at least once in ChunkedWriteHandler.flush()
    
    Related: #3219
    
    Motivation:
    
    ChunkedWriteHandler.flush() does not call ctx.flush() when channel is
    not writable. This can be a problem when other handler / non-Netty
    thread writes messages simultaneously, because
    ChunkedWriteHandler.flush() might have no chance to observe
    channel.isWritable() returns true and thus the channel is never flushed.
    
    Modifications:
    
    - Ensure that ChunkedWriteHandler.flush() calls ctx.flush() at least
      once.
    
    Result:
    
    A stall connection issue, that occurs when certain combination of
    handlers exist in a pipeline, has been fixed. (e.g. SslHandler and
    ChunkedWriteHandler)

commit 2a426b3d447c2a0a6345b6a2bb9ee384f6266a3b
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Mon Dec 8 13:52:54 2014 +0100

    Fixing minor typo in FastThreadLocal javadoc.

commit 9b2fede68edd9b12e3abc8421c6c484339d75042
Author: Frederic Bregier <fredbregier@free.fr>
Date:   Sun Dec 7 13:19:20 2014 +0100

    Fix AbstractDiskHttpData int conversion from long
    
    Motivations:
    The chunkSize might be oversized after comparison (size being > of int
    capacity) if file size is bigger than an integer.
    
    Modifications:
    Change it to long.
    
    Result:
    There is no more int oversized.
    
    Same fix for 4.1 and Master

commit 3957a88a9482fd41d22840ca45e2a0e31030d3d1
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 7 23:24:19 2014 +0900

    Make PendingWriteQueue.recycle() update its state before triggering an event
    
    Related: #3212
    
    Motivation:
    
    PendingWriteQueue.recycle() updates its data structure after triggering
    a channelWritabilityChanged() event. It causes a rare corruption such as
    double free when channelWritabilityChanged() method accesses the
    PendingWriteQueue.
    
    Modifications:
    
    Update the state of PendingWriteQueue before triggering an event.
    
    Result:
    
    Fix a rare double-free problem

commit 1ef6f147349c145542d77c987f57e1dfbd405406
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 7 16:00:35 2014 +0900

    Trigger exceptionCaught() when VoidChannelPromise fails
    
    Related: #3190
    
    Motivation:
    
    When an outbound handler method raises an exception, its promise is
    marked as failed.  If the promise is done already, the exception is
    logged.
    
    When the promise is void, exceptionCaught() must be triggered to notify
    a user. However, ChannelHandlerInvokerUtil simply swallows it.
    
    Modifications:
    
    Do not swallow an exception when the promise is void.
    
    Result:
    
    A user who uses a void promise for an outbound operation will be
    notified on failure.

commit 3dbca4a9e2d2343e9c8af3bac085fd5b3a44da3b
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 7 12:06:11 2014 +0900

    Fire channelRead() event immediately in OIO message channels
    
    Related: #3189
    
    Motivation:
    
    OIO transport implementations block for at most 1 second to wait for
    additional messages (or accepted connections).
    
    However, because AbstractOioMessageChannel defers the channelRead()
    events for the messages read so far until there's nothing to read up to
    maxMessagesPerRead, any read operation will be followed by a 1-second
    delay.
    
    Modifications:
    
    Fire channelRead() events as soon as doRead() returns so that there is
    no 1 second delay between the actual read and the channelRead() event.
    
    Result:
    
    No more weird 1-second delay

commit 8206cc6e146a72f9b9ac4fc1efcfce0e393d7fe2
Author: Scott Mitchell <scott.k.mitch1@gmail.com>
Date:   Sun Nov 2 21:05:47 2014 -0500

    Headers set/add/contains timeMillis methods
    
    Motivation:
    The new Headers interface contains methods to getTimeMillis but no add/set/contains variants.  These should be added for consistency.
    
    Modifications:
    - Add three new methods: addTimeMillis, setTimeMillis, containsTimeMillis to the Headers interface.
    - Add a new method to the Headers.ValueConverter interface: T convertTimeMillis(long)
    - Bring these new interfaces up the class hierarchy
    
    Result:
    All Headers classes have setters/getters for timeMillis.

commit 23db94f5a1f6f70db273d53a18fa1c03f2b9545a
Author: Trustin Lee <t@motd.kr>
Date:   Sat Dec 6 22:31:44 2014 +0900

    Fix Java 6 compatibility issue in DnsNameResolver
    
    Related: #3173
    
    Motivation:
    
    DnsNameResolver was using InetSocketAddress.getHostString() which is
    only available since Java 7.
    
    Modifications:
    
    Use InetSocketAddress.getHostName() in lieu of getHostString() when the
    current Java version is less than 7.
    
    Result:
    
    DnsNameResolver runs fine on Java 6.

commit 7f92771496ef59eaf6fe86b516f5a8abdb38b9c0
Author: Trustin Lee <t@motd.kr>
Date:   Fri Dec 5 21:09:28 2014 +0900

    Fix a bug where Recycler's capacity can increase beyond its maximum
    
    Related: #3166
    
    Motivation:
    
    When the recyclable object created at one thread is returned at the
    other thread, it is stored in a WeakOrderedQueue.
    
    The objects stored in the WeakOrderedQueue is added back to the stack by
    WeakOrderedQueue.transfer() when the owner thread ran out of recyclable
    objects.
    
    However, WeakOrderedQueue.transfer() does not have any mechanism that
    prevents the stack from growing beyond its maximum capacity.
    
    Modifications:
    
    - Make WeakOrderedQueue.transfer() increase the capacity of the stack
      only up to its maximum
    - Add tests for the cases where the recyclable object is returned at the
      non-owner thread
    - Fix a bug where Stack.scavengeSome() does not scavenge the objects
      when it's the first time it ran out of objects and thus its cursor is
      null.
    - Overall clean-up of scavengeSome() and transfer()
    
    Result:
    
    The capacity of Stack never increases beyond its maximum.

commit a79466769fe359fbfc5cbca8d55e64197e049176
Author: Greg Gibeling <gdgib@bina.com>
Date:   Tue Nov 25 09:28:10 2014 -0800

    Lazily check for root, avoids unnecessary errors & resources
    
    Motivation:
    
    io.netty.util.internal.PlatformDependent.isRoot() depends on the IS_ROOT field which is filled in during class initialization. This spawns processes and consumes resources, which are not generally necessary to the complete functioning of that class.
    
    Modifications:
    
    This switches the class to use lazy initialization this field inside of the isRoot() method using double-checked locking (http://en.wikipedia.org/wiki/Double-checked_locking).
    
    Result:
    
    The first call to isRoot() will be slightly slower, at a tradeoff that class loading is faster, uses fewer resources and platform errors are avoided unless necessary.

commit 54a39a94aca1c68d630c641187e135fd6873901b
Author: Daniel Norberg <dano@spotify.com>
Date:   Fri Dec 5 16:32:30 2014 +0900

    example: memcache: fix set command
    
    Motivation:
    
    The example MemcacheClient set command doesn't work.
    
    Modifications:
    
    Fill the extras field buffer with zeros so that it gets written to the
    request payload.
    
    Result:
    
    The example MemcacheClient set command works.

commit 46576fd2ff8f7069cdaf7eb1479bde7fb3811c74
Author: Trustin Lee <t@motd.kr>
Date:   Fri Dec 5 15:51:40 2014 +0900

    Fix a race condition where handler is removed before unregistration
    
    Related: #3156
    
    Motivation:
    
    Let's say we have a channel with the following pipeline configuration:
    
      HEAD --> [E1] H1 --> [E2] H2 --> TAIL
    
    when the channel is deregistered, the channelUnregistered() methods of
    H1 and H2 will be invoked from the executor thread of E1 and E2
    respectively. To ensure that the channelUnregistered() methods are
    invoked from the correct thread, new one-time tasks will be created
    accordingly and be scheduled via Executor.execute(Runnable).
    
    As soon as the one-time tasks are scheduled,
    DefaultChannelPipeline.fireChannelUnregistered() will start to remove
    all handlers from the pipeline via teardownAll(). This process is
    performed in reversed order of event propagation. i.e. H2 is removed
    first, and then H1 is removed.
    
    If the channelUnregistered() event has been passed to H2 before H2 is
    removed, a user does not see any problem.
    
    If H2 has been removed before channelUnregistered() event is passed to
    H2, a user will often see the following confusing warning message:
    
      An exceptionCaught() event was fired, and it reached at the tail of
      the pipeline. It usually means the last handler in the pipeline did
      not handle the exception.
    
    Modifications:
    
    To ensure that the handlers are removed *after* all events are
    propagated, traverse the pipeline in ascending order before performing
    the actual removal.
    
    Result:
    
    A user does not get the confusing warning message anymore.

commit bd8a5bc9b3db224c446e0c05fa127ba7022db942
Author: Trustin Lee <t@motd.kr>
Date:   Thu Dec 4 20:52:55 2014 +0900

    Add missing @Override annotation

commit 70a91c72c418147728faea34cfddcbb41b5a4c24
Author: Trustin Lee <t@motd.kr>
Date:   Thu Dec 4 18:40:36 2014 +0900

    Fix checkstyle

commit bf58f871c38645401ab3cf421954777708b4a9f1
Author: Trustin Lee <t@motd.kr>
Date:   Thu Dec 4 18:19:50 2014 +0900

    Overall clean-up of the initial SniHandler/DomainNameMapping work
    
    - Parameterize DomainNameMapping to make it useful for other use cases
      than just mapping to SslContext
    - Move DomainNameMapping to io.netty.util
    - Clean-up the API documentation
    - Make SniHandler.hostname and sslContext volatile because they can be
      accessed by non-I/O threads

commit 96d596802b5ee06e0bd0ebba63b441396a94f696
Author: Trustin Lee <t@motd.kr>
Date:   Thu Dec 4 17:53:35 2014 +0900

    Fix dependency issues with hamcrest
    
    Motivation:
    
    We use 3 (!) libraries to build mock objects - easymock, mockito, jmock.
    Mockito and jMock pulls in the different versions of Hamcrest, and it
    conflicts with the version pulled by jUnit.
    
    Modifications:
    
    - Replace mockito-all with mockito-core to avoid pulling in outdated
      jUnit and Hamcrest
    - Exclude junit-dep when pulling in jmock-junit4, because it pulls an
      outdated Hamcrest version
    - Pull in the hamcrest-library version used by jUnit explicitly
    
    Result:
    
    No more dependency hell that results in NoSuchMethodError during the
    tests

commit 8f77c807956ca2f0b486641b6ffd6ef3895aa364
Author: Sun Ning <sunng@about.me>
Date:   Tue Nov 18 22:38:50 2014 +0800

    Added support for SSL Server Name Indication.
    
    Motivation:
    
    When we need to host multiple server name with a single IP, it requires
    the server to support Server Name Indication extension to serve clients
    with proper certificate. So the SniHandler will host multiple
    SslContext(s) and append SslHandler for requested hostname.
    
    Modification:
    
    * Added SniHandler to host multiple certifications in a single server
    * Test case
    
    Result:
    
    User could use SniHandler to host multiple certifcates at a time.
    It's server-side only.

commit bbe880f5ea05b6a8769e77c2df801107a1343502
Author: Ronald Chen <Ronald.Chen@elasticpath.com>
Date:   Fri Nov 28 11:39:15 2014 -0800

    Rocumented decoder pitfalls to avoid mistakes found in [#3184]

commit a37c4ad7f4578f725831f4f989fa82f389e6bfc7
Author: Sam Young <sayo@amazon.com>
Date:   Mon Nov 24 09:51:14 2014 -0800

    Add @SafeVarargs to PromiseAggregator#add and PromiseNotifier#(...) https://github.com/netty/netty/issues/3147
    
    Motivation:
    
    8fbc513 introduced stray warnings in callsites of
    PromiseAggregator#add and PromiseNotifier#(...).
    
    Modifications:
    
    This commit adds the @SafeVarargs annotation to PromiseAggregator#add
    and PromiseNotifier#(...). As Netty is built with JDK7, this is a
    recognized annotation and should not affect runtime VM versions 1.5 and
    1.6.
    
    Result:
    
    Building Netty with JDK7 will no longer produce warnings in the
    callsites mentioned above.

commit 46ef370ee1cccbc0b8562408d3e4721b4da37d02
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 1 19:48:59 2014 +0900

    Copy the resolver configuration when cloning Bootstrap
    
    Motivation:
    
    Bootstrap.clone() does not copy the resolver configuration.
    
    Modifications:
    
    Copy the resolver configuration when cloning.
    
    Result:
    
    Bug fixed

commit 2769ad428a042e48e2d5a52dccb48c4cbcf14a03
Author: Jay <github@heinousjay.com>
Date:   Tue Nov 18 12:28:45 2014 -0800

    Check the bindFuture before writing a DNS query
    
    Related: #3149
    
    Motivation:
    
    DnsQueryContext, using the DatagramChannel bound in DnsNameResolver,
    blindly writes to the channel without checking the bind future for
    success.
    
    Modifications:
    
    Check the bindFuture before writing a DNS query to a DatagramChannel
    
    Result:
    
    Bug fixed

commit f4d3f81d6ccd0f6ec3081462fca5f9ab5702fad6
Author: Frank Barber <fbarber@amazon.com>
Date:   Tue Nov 11 20:14:42 2014 -0800

    Prevent channel re-registration from firing channelActive
    
    Motivation:
    
    AbstractUnsafe considers two possibilities during channel registration. First,
    the channel may be an outgoing connection, in which case it will be registered
    before becoming active. Second, the channel may be an incoming connection in,
    which case the channel will already be active when it is registered. To handle
    the second case, AbstractUnsafe checks if the channel is active after
    registration and calls ChannelPipeline.fireChannelActive() if so.  However, if
    an active channel is deregistered and then re-registered this logic causes a
    second fireChannelActive() to be invoked. This is unexpected; it is reasonable
    for handlers to assume that this method will only be invoked once per channel.
    
    Modifications:
    
    This change introduces a flag into AbstractUnsafe to recognize if this is the
    first or a subsequent registration. ChannelPipeline.fireChannelActive() is only
    possible for the first registration.
    
    Result:
    
    ChannelPipeline.fireChannelActive() is only called once.

commit e1273147fa9c7eb5f831b5201db98d517708c73d
Author: Ronald Chen <Ronald.Chen@elasticpath.com>
Date:   Fri Nov 28 10:46:30 2014 -0800

    replaced broken &lt with &lt; and same for gt

commit d33a80da2686efeedb32fb1a5a6beeea9c1bb4fd
Author: Graham Edgecombe <graham@grahamedgecombe.com>
Date:   Wed Nov 26 19:05:17 2014 +0000

    Use Triple DES in JdkSslContext cipher suite list.
    
    Motivation:
    
    JdkSslContext used SSL_RSA_WITH_DES_CBC_SHA in its cipher suite list.
    OpenSslServerContext used DES-CBC3-SHA in the same place in its cipher suite
    list, which is equivalent to SSL_RSA_WITH_3DES_EDE_CBC_SHA.
    
    This means the lists were out of sync. Furthermore, using
    SSL_RSA_WITH_DES_CBC_SHA is not desirable as it uses DES, a weak cipher. Triple
    DES should be used instead.
    
    Modifications:
    
    Replace SSL_RSA_WITH_DES_CBC_SHA with SSL_RSA_WITH_3DES_EDE_CBC_SHA in
    JdkSslContext.
    
    Result:
    
    The JdkSslContext and OpenSslServerContext cipher suite lists are now in sync.
    Triple DES is used instead of DES, which is stronger.

commit 88aa9e7c4aec03190e80813b27e912b217a72ba5
Author: Trustin Lee <t@motd.kr>
Date:   Tue Nov 25 17:13:05 2014 +0900

    Remove or de-prioritize RC4 from default cipher suites
    
    Motivation:
    
    RC4 is not a recommended cipher suite anymore, as the recent research
    reveals, such as:
    
    - http://www.isg.rhul.ac.uk/tls/
    
    Modifications:
    
    - Remove most RC4 cipher suites from the default cipher suites
    - For backward compatibility, leave RC4-SHA, while de-prioritizing it
    
    Result:
    
    Potentially safer default

commit 247d5b1bd96fc1289879bcd7af54ea45b939df27
Author: Trustin Lee <t@motd.kr>
Date:   Sat Nov 22 07:46:40 2014 +0900

    Fix awful naming

commit 040c340f761ba955449d4a27cb58305739437a0d
Author: Trustin Lee <t@motd.kr>
Date:   Sat Nov 22 07:36:09 2014 +0900

    Add back IntObjectMap.values(Class<V>)
    
    Motivation:
    
    Although the new IntObjectMap.values() that returns Collection is
    useful, the removed values(Class<V>) that returns an array is also
    useful. It's also good for backward compatibility.
    
    Modifications:
    
    - Add IntObjectMap.values(Class<V>) back
    - Miscellaneous improvements
      - Cache the collection returned by IntObjectHashMap.values()
      - Inspector warnings
    - Update the IntObjectHashMapTest to test both values()
    
    Result:
    
    - Backward compatibility
    - Potential performance improvement of values()

commit 338b60821d91b12e57e9ea303eb7b6b0865fd64c
Author: Trustin Lee <t@motd.kr>
Date:   Fri Nov 21 11:43:32 2014 +0900

    Do not write LastHttpContent twice in HttpStaticFileServer example
    
    Related: #3122
    
    Motivation:
    
    The HttpStaticFileServer example writes the LastHttpContent twice at the
    end of the transfer.  HttpChunkedInput already produces a
    LastHttpContent at the end of the stream, so there's no reason to write
    another.
    
    Modifications:
    
    Do not write LastHttpContent in HttpStaticFileServerHandler when
    HttpChunkedInput is used to transfer a file.
    
    Result:
    
    HttpStaticFileServer does not violates the protocol anymore.

commit 9da4250917a709085ac064904db8253f00693dee
Author: Trustin Lee <t@motd.kr>
Date:   Fri Nov 21 11:07:24 2014 +0900

    Backport the IntObjectHashMap changes in f23f3b9617b01095416334060ca8379316946e5c
    
    Motivation:
    
    The mentioned commit contains a bug fix and an improvement in
    IntObjectHashMap that requires backporting.
    
    Modifications:
    
    Update IntObjectMap, IntObjectHashMap, and IntObjectHashMapTest
    
    Result:
    
    Easier to backport HTTP/2 and other changes in master in the future

commit 948eafdce252dbf5f2513d3cc9772a9d2d612a7a
Author: Trustin Lee <t@motd.kr>
Date:   Thu Nov 20 19:41:32 2014 +0900

    Add HttpStatusClass
    
    Related: #3157
    
    Motivation:
    
    It should be convenient to have an easy way to classify an
    HttpResponseStatus based on the first digit of the HTTP status code, as
    defined in the RFC 2616:
    
    - Information 1xx
    - Success 2xx
    - Redirection 3xx
    - Client Error 4xx
    - Server Error 5xx
    
    Modification:
    
    - Add HttpStatusClass
    - Add HttpResponseStatus.codeClass() that returns the class of the HTTP
      status code
    
    Result:
    
    It's easier to determine the class of an HTTP status

commit 8ba9e5bede083864bd34b3cd9f49528f13cdebeb
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Sun Nov 9 15:41:15 2014 +0100

    Add logLevel property to enable different log levels for the examples.
    
    Motivation:
    
    When running the examples using the provided run-examples.sh script the
    log level is 'info' level. It can be handy to be able to configure a
    different level, for example 'debug', while learning and trying out the
    the examples.
    
    Modifications:
    
    Added a dependency to logback-classic to the examples pom.xml, and also
    added a logback configuration file. The log level can be configured by
    setting the 'logLevel' system property, and if that property is not set
    the default will be 'info' level.
    The run-examples.sh was updated to show an example of using the system
    property to set the log level to 'debug'
    
    Result:
    
    It is now possible to turn on debug logging by settnig a system property
    on the command line.

commit c29e703275beffc3b9b127d4cbf5eaae8c5acd08
Author: Trustin Lee <t@motd.kr>
Date:   Thu Nov 20 20:39:18 2014 +0900

    Use Proxy-Authorization instead of Authorization for proxy authentication
    
    Motivation:
    
    When authenticating with a proxy server, HttpProxyHandler should use the
    'Proxy-Authorization' header rather than the 'Authorization' header.
    
    Modifications:
    
    - Use 'Proxy-Authorization' header
    
    Result:
    
    Can connect to an HTTP proxy server

commit ef11a31a065cfb2b6c2252fec817a926be8cb3f1
Author: Trustin Lee <t@motd.kr>
Date:   Thu Nov 20 19:08:16 2014 +0900

    Clean up 000d3a55c5b771b7ed8b71f54b44de72a85306c0
    
    - Rename httpResponseStatus() to newStatus()
      - Move newStatus up so that static methods are grouped together
    - Rename codeAsString to codeAsText

commit 3ebc1ab321f2ac51b59a58e8c1d11933e144171d
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Wed Nov 12 12:46:41 2014 +0100

    Adding codeAsText to HttpResponseStatus.
    
    Motivation:
    
    I found myself writing AsciiString constants in my code for
    response statuses and thought that perhaps it might be nice to have
    them defined by Netty instead.
    
    Modifications:
    
    Adding codeAsText to HttpResponseStatus that returns the status code as
    AsciiText.
    
    In addition, added the 421 Misdirected Request response code from
    https://tools.ietf.org/html/draft-ietf-httpbis-http2-15#section-9.1.2
    
    This response header was renamed in draft 15:
    https://tools.ietf.org/html/draft-ietf-httpbis-http2-15#appendix-A.1
    But the code itself was not changed, and I thought using the latest would
    be better.
    
    Result:
    
    It is now possible to specify a status like this:
    new DefaultHttp2Headers().status(HttpResponseStatus.OK.codeAsText());

commit 35db3c671070aaf5ee8f5cc0e026d3a3574f7f1b
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Sun Nov 9 01:46:30 2014 +0300

    Small performance improvements
    
    Motivation:
    
    Found performance issues via FindBugs and PMD.
    
    Modifications:
    
    - Removed unnecessary boxing/unboxing operations in DefaultTextHeaders.convertToInt(CharSequence) and DefaultTextHeaders.convertToLong(CharSequence). A boxed primitive is created from a string, just to extract the unboxed primitive value.
    - Added a static modifier for DefaultHttp2Connection.ParentChangedEvent class. This class is an inner class, but does not use its embedded reference to the object which created it. This reference makes the instances of the class larger, and may keep the reference to the creator object alive longer than necessary.
    - Added a static compiled Pattern to avoid compile it each time it is used when we need to replace some part of authority.
    - Improved using of StringBuilders.
    
    Result:
    
    Performance improvements.

commit 1765429335205ab5ee0ac072a0952d3a81f0dcd1
Author: Trustin Lee <t@motd.kr>
Date:   Wed Nov 19 18:36:23 2014 +0900

    Revert bad renaming in ZlibTest

commit 0795ee6130a0581f2ce416e16051d96559dae967
Author: Trustin Lee <t@motd.kr>
Date:   Wed Nov 19 18:03:29 2014 +0900

    Add more test cases to ZlibTest
    
    Motivation:
    
    Currently, we only test our ZlibEncoders against our ZlibDecoders. It is
    convenient to write such tests, but it does not necessarily guarantee
    their correctness. For example, both encoder and decoder might be faulty
    even if the tests pass.
    
    Modifications:
    
    Add another test that makes sure that our GZIP encoder generates the
    GZIP trailer, using the fact that GZIPInputStream raises an EOFException
    when GZIP trailer is missing.
    
    Result:
    
    More coverage for GZIP compression

commit 6f80fdcac49436fa404c57a5715ca75ae50dbb4d
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Fri Nov 14 15:07:00 2014 -0800

    SPDY: add support for pushed resources in SpdyHttpDecoder
    
    Motivation:
    
    The SPDY/3.1 spec does not adequate describe how to push resources
    from the server. This was solidified in the HTTP/2 drafts by dividing
    the push into two frames, a PushPromise containing the request,
    followed by a Headers frame containing the response.
    
    Modifications:
    
    This commit modifies the SpdyHttpDecoder to support pushed resources
    that are divided into multiple frames. The decoder will accept a
    pushed SpdySynStreamFrame containing the request headers, followed by
    a SpdyHeadersFrame containing the response headers.
    
    Result:
    
    The SpdyHttpDecoder will create an HttpRequest object followed by an
    HttpResponse object when receiving pushed resources.

commit e09ffc7d60c4f0bafe78c61fdb5cb26b3c0b7250
Author: Jongyeol Choi <jongyeol.choi@gmail.com>
Date:   Fri Nov 14 19:59:45 2014 +0900

    Add supporting MQTT 3.1.1
    
    Motivation:
    
    MQTT 3.1.1 became an OASIS Standard at 13 Nov 2014.
    http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html
    MQTT 3.1.1 is a minor update of 3.1. But, previous codec-mqtt supported only MQTT 3.1.
    
    Modifications:
    
    - Add protocol name `MQTT` with previous `MQIsdp` for `CONNECT`’s variable header.
    - Update client identifier validation for 3.1 with 3.1.1.
    - Add `FAILURE (0x80)` for `SUBACK`’s new error code.
    - Add a test for encode/decode `CONNECT` of 3.1.1.
    
    Result:
    
    MqttEncoder/MqttDecoder can encode/decode frames of 3.1 or 3.1.1.

commit 1db8b83d2256b0d73d539ddd5d80841b95eef0af
Author: Roelof Naude <roelof.naude@gmail.com>
Date:   Mon Nov 10 12:57:02 2014 +0200

    Cater for empty response bodies when performing response compression.
    
    Motivation:
    RFC 2616, 4.3 Message Body states that:
    All 1xx (informational), 204 (no content), and 304 (not modified) responses MUST NOT include a
    message-body. All other responses do include a message-body, although it MAY be of zero length.
    
    Modifications:
    HttpContentEncoder was previously modified to cater for HTTP 100 responses. This check is enhanced to
    include HTTP 204 and 304 responses.
    
    Result:
    Empty response bodies will not be modified to include the compression footer. This footer messed with Chrome's
    response parsing leading to "hanging" requests.

commit cff98fff510a9d9b1fa77ae6447f2dc5bb24f4e2
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Fri Nov 7 00:00:32 2014 +0300

    Benchmark for HttpRequestDecoder

commit fda8808210c4f4f092a93da5929df43062c3aa6c
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Tue Nov 4 19:02:51 2014 +0300

    Rewrite HttpObjectDecoder to make use of proper state machine
    
    Motivation:
    
    HttpObjectDecoder extended ReplayDecoder which is slightly slower then ByteToMessageDecoder.
    
    Modifications:
    
    - Changed super class of HttpObjectDecoder from ReplayDecoder to ByteToMessageDecoder.
    - Rewrote decode() method of HttpObjectDecoder to use proper state machine.
    - Changed private methods HeaderParser.parse(ByteBuf), readHeaders(ByteBuf) and readTrailingHeaders(ByteBuf), skipControlCharacters(ByteBuf) to consider available bytes.
    - Set HeaderParser and LineParser as static inner classes.
    - Replaced not safe actualReadableBytes() with buffer.readableBytes().
    
    Result:
    
    Improved performance of HttpObjectDecoder by approximately 177%.

commit 07fbff351308dd2d7bc7dd3ceaa1207695512f60
Author: Trustin Lee <t@motd.kr>
Date:   Wed Nov 12 12:28:04 2014 +0900

    Fix checkstyle

commit 4279efde59aa800047468cb8d16007eb67da84b6
Author: Trustin Lee <t@motd.kr>
Date:   Wed Nov 12 12:11:31 2014 +0900

    Handle the interface name in IPv6 address correctly
    
    Motivation:
    
    NetUtil.isValidIpV6Address() handles the interface name in IPv6 address
    incorrectly. For example, it returns false for the following addresses:
    
    - ::1%lo
    - ::1%_%_in_name_
    
    Modifications:
    
    - Strip the square brackets before validation for simplicity
    - Strip the part after the percent sign completely before validation for
      simplicity
    - Simplify and reformat NetUtilTest
    
    Result:
    
    - The interface names in IPv6 addresses are handled correctly.
    - NetUtilTest is cleaner

commit 9ba3126bd4b4c75b920d4015234fdc356318b17f
Author: Sam Young <sayo@amazon.com>
Date:   Thu Sep 18 22:20:23 2014 -0700

    Add generic versions of PromiseAggregator and PromiseNotifier.
    
    Motivation:
    
    ChannelPromiseAggregator and ChannelPromiseNotifiers only allow
    consumers to work with Channels as the result type. Generic versions
    of these classes allow consumers to aggregate or broadcast the results
    of an asynchronous execution with other result types.
    
    Modifications:
    
    Add PromiseAggregator and PromiseNotifier. Add unit tests for both.
    Remove code in ChannelPromiseAggregator and ChannelPromiseNotifier and
    modify them to extend the new base classes.
    
    Result:
    
    Consumers can now aggregate or broadcast the results of an asynchronous
    execution with results types other than Channel.

commit 72a611a28f5471fcffef1e6a13a5b1077bc65e08
Author: Scott Mitchell <scott.k.mitch1@gmail.com>
Date:   Tue Nov 4 10:43:57 2014 -0500

    HTTP Content Encoder allow EmptyLastHttpContent
    
    Motiviation:
    The HttpContentEncoder does not account for a EmptyLastHttpContent being provided as input.  This is useful in situations where the client is unable to determine if the current content chunk is the last content chunk (i.e. a proxy forwarding content when transfer encoding is chunked).
    
    Modifications:
    - HttpContentEncoder should not attempt to compress empty HttpContent objects
    
    Result:
    HttpContentEncoder supports a EmptyLastHttpContent to terminate the response.

commit e82595502bcd21c29f1c1e97136c79f7e9664327
Author: Trustin Lee <t@motd.kr>
Date:   Sat Nov 1 03:08:59 2014 +0900

    Replace HttpHeaders.getDate() with getTimeMillis()
    
    Motivation:
    
    Headers has getTimeMillis(), not getDate()
    
    Modification:
    
    - Replace HttpHeaders.getDate() with getTimeMillis() so that migration
      is smoother
    
    Result:
    
    User code which accesses a date header is easier to migrate

commit 53fbfbb590c9283dc40f437effbb9bbd867c0b23
Author: Trustin Lee <t@motd.kr>
Date:   Sat Nov 1 02:59:25 2014 +0900

    Remove CollectionUtils
    
    Motivation:
    
    CollectionUtils has only one method and it is used only in DefaultHeaders.
    
    Modification:
    
    Move CollectionUtils.equals() to DefaultHeaders and make it private
    
    Result:
    
    One less class to expose in our public API

commit 4ce994dd4fe58a03fa25b0911e5b3a2079b33692
Author: Trustin Lee <t@motd.kr>
Date:   Fri Oct 31 16:48:28 2014 +0900

    Fix backward compatibility from the previous backport
    
    Motivation:
    
    The commit 50e06442c3f2753c9b2a506f68ea70273b829e21 changed the type of
    the constants in HttpHeaders.Names and HttpHeaders.Values, making 4.1
    backward-incompatible with 4.0.
    
    It also introduces newer utility classes such as HttpHeaderUtil, which
    deprecates most static methods in HttpHeaders.  To ease the migration
    between 4.1 and 5.0, we should deprecate all static methods that are
    non-existent in 5.0, and provide proper counterpart.
    
    Modification:
    
    - Revert the changes in HttpHeaders.Names and Values
    - Deprecate all static methods in HttpHeaders in favor of:
      - HttpHeaderUtil
      - the member methods of HttpHeaders
      - AsciiString
    - Add integer and date access methods to HttpHeaders for easier future
      migration to 5.0
    - Add HttpHeaderNames and HttpHeaderValues which provide standard HTTP
      constants in AsciiString
      - Deprecate HttpHeaders.Names and Values
      - Make HttpHeaderValues.WEBSOCKET lowercased because it's actually
        lowercased in all WebSocket versions but the oldest one
    - Add RtspHeaderNames and RtspHeaderValues which provide standard RTSP
      constants in AsciiString
      - Deprecate RtspHeaders.*
    - Do not use AsciiString.equalsIgnoreCase(CharSeq, CharSeq) if one of
      the parameters are AsciiString
    - Avoid using AsciiString.toString() repetitively
      - Change the parameter type of some methods from String to
        CharSequence
    
    Result:
    
    Backward compatibility is recovered.  New classes and methods will make
    the migration to 5.0 easier, once (Http|Rtsp)Header(Names|Values) are
    ported to master.

commit 50e06442c3f2753c9b2a506f68ea70273b829e21
Author: Scott Mitchell <smitchel@akamai.com>
Date:   Thu Sep 18 19:04:35 2014 -0400

    Backport header improvements from 5.0
    
    Motivation:
    The header class hierarchy and algorithm was improved on the master branch for versions 5.x. These improvments should be backported to the 4.1 baseline.
    
    Modifications:
    - cherry-pick the following commits from the master branch: 2374e17, 36b4157, 222d258
    
    Result:
    Header improvements in master branch are available in 4.1 branch.

commit f2678a31ff6a16ef3b9697df88700e87a4ab8780
Author: Trustin Lee <t@motd.kr>
Date:   Fri Oct 31 14:09:46 2014 +0900

    Add ApplicationProtocolConfig.DISABLED
    
    Motivation:
    
    When ALPN/NPN is disabled, a user has to instantiate a new
    ApplicationProtocolConfig with meaningless parameters.
    
    Modifications:
    
    - Add ApplicationProtocolConfig.DISABLED, the singleton instance
    - Reject the constructor calls with Protocol.NONE, which doesn't make
      much sense because a user should use DISABLED instead.
    
    Result:
    
    More user-friendly API when ALPN/NPN is not needed by a user.

commit 06217aefb753904f431e9012cf65170e7eb07fa4
Author: Trustin Lee <t@motd.kr>
Date:   Fri Oct 31 13:21:02 2014 +0900

    Add back the removed deprecated methods in SslContext
    
    Motivation:
    
    Previous backport removed the old methods and constructors. They should
    not be removed in 4.x but just deprecated in favor of the new methods
    and constructors.
    
    Modifications:
    
    Add back the removed methods and constructors in SslContext and its
    subtypes for backward compatibility.
    
    Result:
    
    Backward compatibility issues fixed.

commit 16fb44cf9738f32ab59e97b533ea62bcf51b1aef
Author: Trustin Lee <t@motd.kr>
Date:   Fri Oct 31 13:00:05 2014 +0900

    Code clean-up
    
    - Fix the inspector warnings
    - Fix the infinite recursion in SslContext.newClientContext()
    - Fix Javadoc errors

commit 04f77b76f802a5bb30447eb0e3580f6ba0e1f2db
Author: Scott Mitchell <scott.k.mitch1@gmail.com>
Date:   Fri Oct 3 18:16:04 2014 -0400

    Backport ALPN and Mutual Auth SSL
    
    Motivation:
    
    Improvements were made on the main line to support ALPN and mutual
    authentication for TLS. These should be backported.
    
    Modifications:
    
    - Backport commits from the master branch
      - f8af84d5993456426a63ad0146479147b1a4a5e5
      - e74c8edba3fcbfd2e895ed6aac440efeb3aa637f
    
    Result:
    
    Support for ALPN and mutual authentication.

commit 746c8cab32338e8861ade9708449308b288878a2
Author: Scott Mitchell <scott.k.mitch1@gmail.com>
Date:   Wed Oct 29 14:12:10 2014 -0400

    SslHander wrap conditional direct buffer allocation
    
    Motivation:
    The SslHandler currently forces the use of a direct buffer for the input to the SSLEngine.wrap(..) operation. This allocation may not always be desired and should be conditionally done.
    
    Modifications:
    - Use the pre-existing wantsDirectBuffer variable as the condition to do the conversion.
    
    Result:
    - An allocation of a direct byte buffer and a copy of data is now not required for every SslHandler wrap operation.

commit 7e65c09373029a63a57e8ad2eae530f48c76724f
Author: Scott Mitchell <scott.k.mitch1@gmail.com>
Date:   Thu Sep 4 06:58:28 2014 -0400

    IPv6 address to string rfc5952
    
    Motivation:
    The java implementations for Inet6Address.getHostName() do not follow the RFC 5952 (http://tools.ietf.org/html/rfc5952#section-4) for recommended string representation. This introduces inconsistencies when integrating with other technologies that do follow the RFC.
    
    Modifications:
    -NetUtil.java to have another public static method to convert InetAddress to string. Inet4Address will use the java InetAddress.getHostAddress() implementation and there will be new code to implement the RFC 5952 IPV6 string conversion.
    -New unit tests to test the new method
    
    Result:
    Netty provides a RFC 5952 compliant string conversion method for IPV6 addresses

commit 06ea226a2827a5b31b6a55efac44c8a3b1ed1e2c
Author: Scott Mitchell <scott.k.mitch1@gmail.com>
Date:   Mon Oct 27 13:47:54 2014 -0400

    SslHandler wrap memory leak
    
    Motivation:
    The SslHandler wrap method requires that a direct buffer be passed to the SSLEngine.wrap() call. If the ByteBuf parameter does not have an underlying direct buffer then one is allocated in this method, but it is not released.
    
    Modifications:
    - Release the direct ByteBuffer only accessible in the scope of SslHandler.wrap
    
    Result:
    Memory leak in SslHandler.wrap is fixed.

commit 7fbd66f8143408fa30f275416a598b344a9a071e
Author: Matthias Einwag <matthias.einwag@live.com>
Date:   Wed Oct 22 21:59:45 2014 +0200

    Added an option to use websockets without masking
    
    Motivation:
    
    The requirement for the masking of frames and for checks of correct
    masking in the websocket specifiation have a large impact on performance.
    While it is mandatory for browsers to use masking there are other
    applications (like IPC protocols) that want to user websocket framing and proxy-traversing
    characteristics without the overhead of masking. The websocket standard
    also mentions that the requirement for mask verification on server side
    might be dropped in future.
    
    Modifications:
    
    Added an optional parameter allowMaskMismatch for the websocket decoder
    that allows a server to also accept unmasked frames (and clients to accept
    masked frames).
    Allowed to set this option through the websocket handshaker
    constructors as well as the websocket client and server handlers.
    The public API for existing components doesn't change, it will be
    forwarded to functions which implicetly set masking as required in the
    specification.
    For websocket clients an additional parameter is added that allows to
    disable the masking of frames that are sent by the client.
    
    Result:
    
    This update gives netty users the ability to create and use completely
    unmasked websocket connections in addition to the normal masked channels
    that the standard describes.

commit c0079840be596ab26ace825fcd0e99809ac527d4
Author: Trustin Lee <t@motd.kr>
Date:   Sat Oct 25 17:29:06 2014 +0900

    Improve DnsNameResolverTest.testResolveA()
    
    Motivation:
    
    DnsNameResolver.testResolveA() tests if the cache works as well as the usual DNS protocol test.  To ensure the result from the cache is identical to the result without cache, it compares the two Maps which contain the result of cached/uncached resolution.  The comparison of two Maps yields an expected behavior, but the output of the comparison on failure is often unreadable due to its long length.
    
    Modifications:
    
    Compare entry-by-entry for more comprehensible test failure output
    
    Result:
    
    When failure occurs, it's easier to see which domain was the cause of the problem.

commit 9826d9bc1ad80bdfb4ebc22060fad3d3b4a92e9c
Author: Trustin Lee <t@motd.kr>
Date:   Sat Oct 25 16:57:22 2014 +0900

    Fix compilation errors in ChannelOutboundBufferTest

commit a653a8ecf44adb06ec899c5648ead7b01cdc8c42
Author: Trustin Lee <t@motd.kr>
Date:   Sat Oct 25 16:42:36 2014 +0900

    Overall cleanup of cf4c464d99f0723d908151c2b4a2b9d2b203061c

commit cf4c464d99f0723d908151c2b4a2b9d2b203061c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Aug 27 08:29:25 2014 +0200

    Modify HttpObjectDecoder to allow parsing the HTTP headers in multiple steps.
    
    Motivation:
    At the moment the whole HTTP header must be parsed at once which can lead to multiple parsing of the same bytes. We can do better here and allow to parse it in multiple steps.
    
    Modifications:
    
     - Not parse headers multiple times
     - Simplify the code
     - Eliminate uncessary String[] creations
     - Use readSlice(...).retain() when possible.
    
    Result:
    
    Performance improvements as shown in the included benchmark below.
    
    Before change:
    [nmaurer@xxx]~% ./wrk-benchmark
    Running 2m test @ http://xxx:8080/plaintext
      16 threads and 256 connections
      Thread Stats   Avg      Stdev     Max   +/- Stdev
        Latency    21.55ms   15.10ms 245.02ms   90.26%
        Req/Sec   196.33k    30.17k  297.29k    76.03%
      373954750 requests in 2.00m, 50.15GB read
    Requests/sec: 3116466.08
    Transfer/sec:    427.98MB
    
    After change:
    [nmaurer@xxx]~% ./wrk-benchmark
    Running 2m test @ http://xxx:8080/plaintext
      16 threads and 256 connections
      Thread Stats   Avg      Stdev     Max   +/- Stdev
        Latency    20.91ms   36.79ms   1.26s    98.24%
        Req/Sec   206.67k    21.69k  243.62k    94.96%
      393071191 requests in 2.00m, 52.71GB read
    Requests/sec: 3275971.50
    Transfer/sec:    449.89MB

commit a7a654c82f3eb1374001032a44b08b6b105b4992
Author: Matthias Einwag <matthias.einwag@live.com>
Date:   Wed Oct 22 20:18:00 2014 +0200

    Fix the websocket server example
    
    Motivation:
    As report in #2953 the websocket server example contained a bug and did therefore not work with chrome:
    A websocket extension is added to the pipeline but extensions were disallowed in the handshaker and decoder,
    which is leading the decoder to closing the connection after receiving an extension frame.
    
    Modifications:
    Allow websocket extensions in the handshaker to correctly enable the extension.
    
    Result:
    Working websocket server example
    Fixes #2953

commit d59629377c747758c96cf2a02c74a4d5f4b33fc2
Author: Trustin Lee <t@motd.kr>
Date:   Wed Oct 22 17:45:28 2014 +0900

    Implement user-defined writability flags
    
    Related: #2945
    
    Motivation:
    
    Some special handlers such as TrafficShapingHandler need to override the
    writability of a Channel to throttle the outbound traffic.
    
    Modifications:
    
    Add a new indexed property called 'user-defined writability flag' to
    ChannelOutboundBuffer so that a handler can override the writability of
    a Channel easily.
    
    Result:
    
    A handler can override the writability of a Channel using an unsafe API.
    For example:
    
      Channel ch = ...;
      ch.unsafe().outboundBuffer().setUserDefinedWritability(1, false);

commit 0666924e8c41428adb329e47da73546c96e13825
Author: George Agnelli <george.agnelli@gmail.com>
Date:   Tue Oct 7 14:56:15 2014 +0100

    Don't close the connection whenever Expect: 100-continue is missing.
    
    Motivation:
    
    The 4.1.0-Beta3 implementation of HttpObjectAggregator.handleOversizedMessage closes the
    connection if the client sent oversized chunked data with no Expect:
    100-continue header. This causes a broken pipe or "connection reset by
    peer" error in some clients (tested on Firefox 31 OS X 10.9.5,
    async-http-client 1.8.14).
    
    This part of the HTTP 1.1 spec (below) seems to say that in this scenario the connection
    should not be closed (unless the intention is to be very strict about
    how data should be sent).
    
    http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html
    
    "If an origin server receives a request that does not include an
    Expect request-header field with the "100-continue" expectation,
    the request includes a request body, and the server responds
    with a final status code before reading the entire request body
    from the transport connection, then the server SHOULD NOT close
    the transport connection until it has read the entire request,
    or until the client closes the connection. Otherwise, the client
    might not reliably receive the response message. However, this
    requirement is not be construed as preventing a server from
    defending itself against denial-of-service attacks, or from
    badly broken client implementations."
    
    Modifications:
    
    Change HttpObjectAggregator.handleOversizedMessage to close the
    connection only if keep-alive is off and Expect: 100-continue is
    missing. Update test to reflect the change.
    
    Result:
    
    Broken pipe and connection reset errors on the client are avoided when
    oversized data is sent.

commit 789e323b79d642ea2c0a024cb1c839654b7b8fad
Author: Trustin Lee <t@motd.kr>
Date:   Wed Oct 22 14:39:31 2014 +0900

    Handle an empty ByteBuf specially in HttpObjectEncoder
    
    Related: #2983
    
    Motivation:
    
    It is a well known idiom to write an empty buffer and add a listener to
    its future to close a channel when the last byte has been written out:
    
      ChannelFuture f = channel.writeAndFlush(Unpooled.EMPTY_BUFFER);
      f.addListener(ChannelFutureListener.CLOSE);
    
    When HttpObjectEncoder is in the pipeline, this still works, but it
    silently raises an IllegalStateException, because HttpObjectEncoder does
    not allow writing a ByteBuf when it is expecting an HttpMessage.
    
    Modifications:
    
    - Handle an empty ByteBuf specially in HttpObjectEncoder, so that
      writing an empty buffer does not fail even if the pipeline contains an
      HttpObjectEncoder
    - Add a test
    
    Result:
    
    An exception is not triggered anymore by HttpObjectEncoder, when a user
    attempts to write an empty buffer.

commit 67c68ef8ba3458456b8db74b5d51530ed9f363ea
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Tue Oct 21 09:47:42 2014 +0200

    CorsHandler should release HttpRequest after processing preflight/error.
    
    Motivation:
    Currently, when the CorsHandler processes a preflight request, or
    respondes with an 403 Forbidden using the short-curcuit option, the
    HttpRequest is not released which leads to a buffer leak.
    
    Modifications:
    Releasing the HttpRequest when done processing a preflight request or
    responding with an 403.
    
    Result:
    Using the CorsHandler will not cause buffer leaks.

commit 232e529a3b036dccd572480ded7974ce53f6d416
Author: Trustin Lee <t@motd.kr>
Date:   Tue Oct 21 22:31:46 2014 +0900

    Fix missing version properties of transport-epoll in all-in-one JAR
    
    Related: #2952
    
    Motivation:
    
    META-INF/io.netty.versions.properties in netty-all-*.jar does not
    contain the version information about the netty-transport-epoll module.
    
    Modifications:
    
    Fix a bug in the regular expression in pom.xml, so that the artifacts
    with a classifier is also included in the version properties file.
    
    Result:
    
    The version information of all modules are included in the version
    properties file, and Version.identify() does not miss
    netty-transport-epoll.

commit eb415fded66b5c825aa2818f6223eb8a6480c024
Author: Frederic Bregier <fredbregier@free.fr>
Date:   Wed Oct 15 23:47:27 2014 +0200

    V4.1 Fix "=" character in HttpPostRequestDecoder
    
    Motivation
    Issue #3004 shows that "=" character was not supported as it should in
    the HttpPostRequestDecoder in form-data boundary.
    
    Modifications:
    Add 2 methods in StringUtil
    - split with maxPart argument: String split with max parts only (to prevent multiple '='
    to be source of extra split while not needed)
    - substringAfter: String part after delimiter (since first part is not
    needed)
    Use those methods in HttpPostRequestDecoder.
    Change and the HttpPostRequestDecoderTest to check using a boundary
    beginning with "=".
    
    Results:
    The fix implies more stability and fix the issue.

commit a1af35313cc8414109e7a411bb2401ae31046289
Author: Trustin Lee <t@motd.kr>
Date:   Tue Oct 21 13:55:32 2014 +0900

    Disable SSLv3 to avoid POODLE vulnerability
    
    Related: #3031
    
    Motivation:
    
    The only way to protect ourselves from POODLE vulnerability in Java for
    now is to disable SSLv3.
    
    - http://en.wikipedia.org/wiki/POODLE
    - https://blogs.oracle.com/security/entry/information_about_ssl_poodle_vulnerability
    
    Modifivation:
    
    Disable SSLv3 in SslContext implementations
    
    Result:
    
    Prevent POODLE vulnerability when a user used SslContext with the
    default configuration

commit f3ef94d35edb7bc46013711a74343062bcca0878
Author: nmittler <nmittler@gmail.com>
Date:   Mon Oct 20 12:38:08 2014 -0700

    Slight performance improvement to IntObjectHashMap.hashIndex()
    
    Motivation:
    
    Using a needless local copy of keys.length.
    
    Modifications:
    
    Using keys.length explicitly everywhere.
    
    Result:
    
    Slight performance improvement of hashIndex.

commit 30060b60833d099f8ebefdf8174755284f2716d8
Author: nmittler <nmittler@gmail.com>
Date:   Mon Oct 20 10:19:54 2014 -0700

    Optimize IntObjectHashMap handling of negative keys.
    
    Motivation:
    
    The hashIndex method currently uses a conditional to handle negative
    keys. This could be done without a conditional to slightly improve
    performance.
    
    Modifications:
    
    Modified hashIndex() to avoid using a conditional.
    
    Result:
    
    Slight performance improvement to hashIndex().

commit dd5b2c30c58d09bf962356069e5db6814894d918
Author: nmittler <nmittler@gmail.com>
Date:   Mon Oct 20 08:58:38 2014 -0700

    Allowing negative keys in IntObjectHashMap.
    
    Motivation:
    
    IntObjectHashMap throws an exception when using negative values for
    keys.
    
    Modifications:
    
    Changed hashIndex() to normalize the index if the mod operation returns
    a negative number.
    
    Result:
    
    IntObjectHashMap supports negative key values.

commit 5f94d7a31955f2e0d02cc820cb2aa11ebb6b51ec
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Sun Oct 19 19:28:02 2014 +0400

    Refactor LzfDecoder to use proper state machine
    
    Motivation:
    
    Make it much more readable code.
    
    Modifications:
    
    - Added states of decompression.
    - Refactored decode(...) method to use this states.
    
    Result:
    
    Much more readable decoder which looks like other compression decoders.

commit 7ddc8a445cec72af9ab6a52d8eaabd7868592f63
Author: Trustin Lee <t@motd.kr>
Date:   Fri Oct 17 16:16:13 2014 +0900

    Make Bootstrap and ServerBootstrap fully overridable
    
    Related: #2034
    
    Motivation:
    
    Some users want to mock Bootstrap (or ServerBootstrap), and thus they
    should not be final but be fully overridable and extensible.
    
    Modifications:
    
    Remove finals wherever possible
    
    Result:
    
    @daschl is happy.

commit f3a2c22738c53af5770183ff8a60a49ae21f62eb
Author: Trustin Lee <t@motd.kr>
Date:   Fri Oct 17 16:04:37 2014 +0900

    Fix an infinite loop when writing a zero-length FileRegion
    
    Related: #2964
    
    Motivation:
    
    Writing a zero-length FileRegion to an NIO channel will lead to an
    infinite loop.
    
    Modification:
    
    - Do not write a zero-length FileRegion by protecting with proper 'if'.
    - Update the testsuite
    
    Result:
    
    Another bug fixed

commit d63413754eb42f4e371ee5163e103e569762172f
Author: Trustin Lee <t@motd.kr>
Date:   Fri Oct 17 15:01:51 2014 +0900

    Make TestUtils.getFreePort() check both TCP and UDP
    
    Motivation:
    
    We see occational failures in the datagram tests saying 'address already
    in use' when we attempt to bind on a port returned by
    TestUtils.getFreePort().
    
    It turns out that TestUtils.getFreePort() only checks if TCP port is
    available.
    
    Modifications:
    
    Also check if UDP port is available, so that the datagram tests do not
    fail because of the 'address already in use' error during a bind
    attempt.
    
    Result:
    
    Less chance of datagram test failures

commit e1787e68768816583f11c9ccebd6beb439f25e21
Author: Trustin Lee <t@motd.kr>
Date:   Fri Oct 17 11:38:43 2014 +0900

    Fix another resource leak in DnsNameResolver
    
    - Fix a bug in cache expiration task; wrong object was being released
    - Added more sanity checks when caching an entry

commit c811d50d6187e51ffbb8d07feac744a8b77a97bd
Author: Trustin Lee <t@motd.kr>
Date:   Thu Oct 16 17:56:12 2014 +0900

    Fix resource leak in DnsNameResolver

commit b9eb8f0e01f96e957eef8f57a1e865aa08744c86
Author: Trustin Lee <t@motd.kr>
Date:   Tue Oct 14 18:18:47 2014 +0900

    Fix test failures in ProxyHandlerTest
    
    Motivation:
    
    The default name resolver attempts to resolve the bad host name (destination.com) and actually succeeds, making the ProxyHandlerTest fail.
    
    Modification:
    
    Use NoopNameResolverGroup instead.
    
    Result:
    
    ProxyHandlerTest passes again.

commit e848066cab19c5b374e44d3e3ceceed03cd42305
Author: Trustin Lee <t@motd.kr>
Date:   Fri Sep 19 22:36:32 2014 +0900

    Name resolver API and DNS-based name resolver
    
    Motivation:
    
    So far, we relied on the domain name resolution mechanism provided by
    JDK.  It served its purpose very well, but had the following
    shortcomings:
    
    - Domain name resolution is performed in a blocking manner.
      This becomes a problem when a user has to connect to thousands of
      different hosts. e.g. web crawlers
    - It is impossible to employ an alternative cache/retry policy.
      e.g. lower/upper bound in TTL, round-robin
    - It is impossible to employ an alternative name resolution mechanism.
      e.g. Zookeeper-based name resolver
    
    Modification:
    
    - Add the resolver API in the new module: netty-resolver
    - Implement the DNS-based resolver: netty-resolver-dns
      .. which uses netty-codec-dns
    - Make ChannelFactory reusable because it's now used by
      io.netty.bootstrap, io.netty.resolver.dns, and potentially by other
      modules in the future
      - Move ChannelFactory from io.netty.bootstrap to io.netty.channel
      - Deprecate the old ChannelFactory
      - Add ReflectiveChannelFactory
    
    Result:
    
    It is trivial to resolve a large number of domain names asynchronously.

commit ab2e80fbb17803fba6638abde3630fdc1f66f9fb
Author: Trustin Lee <t@motd.kr>
Date:   Tue Oct 7 14:58:43 2014 +0900

    Add EDNS support to DnsQueryEncoder
    
    Motivation:
    
    DnsQueryEncoder does not encode the 'additional resources' section at all, which contains the pseudo-RR as defined in RFC 2671.
    
    Modifications:
    
    - Modify DnsQueryEncoder to encode the additional resources
    - Fix a bug in DnsQueryEncoder where an empty name is encoded incorrectly
    
    Result:
    
    A user can send an EDNS query.

commit 87c82d4845276484f60a939142ffea8366b99d34
Author: Trustin Lee <t@motd.kr>
Date:   Wed Sep 24 01:44:47 2014 +0900

    Do not consider PortUnreachableException to require channel closure
    
    Motivation:
    
    When a datagram packet is sent to a destination where nobody actually listens to,
    the server O/S will respond with an ICMP Port Unreachable packet.
    The ICMP Port Unreachable packet is translated into PortUnreachableException by JDK.
    PortUnreachableException is not a harmful exception that prevents a user from sending a datagram.
    Therefore, we should not close a datagram channel when PortUnreachableException is caught.
    
    Modifications:
    
    - Do not close a channel when the caught exception is PortUnreachableException.
    
    Result:
    
    A datagram channel is not closed unexpectedly anymore.

commit 2309a75d15ffbd063b9a710df4fa1ec3c63702f9
Author: Trustin Lee <t@motd.kr>
Date:   Mon Aug 25 17:50:37 2014 +0900

    Add proxy support for client socket connections
    
    Related issue: #1133
    
    Motivation:
    
    There is no support for client socket connections via a proxy server in
    Netty.
    
    Modifications:
    
    - Add a new module 'handler-proxy'
    - Add ProxyHandler and its subclasses to support SOCKS 4a/5 and HTTP(S)
      proxy connections
    - Add a full parameterized test for most scenarios
    - Clean up pom.xml
    
    Result:
    
    A user can make an outgoing connection via proxy servers with only
    trivial effort.

commit f8349f8dc5f6e4418e0d1a5ba3f2e4db0138c8c5
Author: Trustin Lee <t@motd.kr>
Date:   Tue Sep 16 19:25:26 2014 +0900

    Add AbstractUnsafe.annotateConnectException()
    
    Motivation:
    
    JDK's exception messages triggered by a connection attempt failure do
    not contain the related remote address in its message.  We currently
    append the remote address to ConnectException's message, but I found
    that we need to cover more exception types such as SocketException.
    
    Modifications:
    
    - Add AbstractUnsafe.annotateConnectException() to de-duplicate the
      code that appends the remote address
    
    Result:
    
    - Less duplication
    - A transport implementor can annotate connection attempt failure
      message more easily

commit 0b935b85ce1cb1bc7af7e8b73f27d2f858061321
Author: Trustin Lee <t@motd.kr>
Date:   Tue Sep 16 19:11:40 2014 +0900

    Fix an incorrect use of ByteBuf.array() in Socks5CmdRequestDecoder
    
    Motivation:
    
    Socks5CmdRequestDecoder uses ByteBuf.array() naively assuming that the
    array's base offset is always 0, which is not the case.
    
    Modification:
    
    - Allocate a new byte array and copy the content there instead
    
    Result:
    
    Another bug fixed

commit 9839990fffd557d617ae4a97ccc0a931917c07b9
Author: Trustin Lee <t@motd.kr>
Date:   Tue Sep 16 19:08:52 2014 +0900

    Fix a bug in NetUtil.createByteArrayFromIpAddressString()
    
    Motivation:
    
    An IPv6 string can have a zone index which is followed by the '%' sign.
    When a user passes an IPv6 string with a zone index,
    NetUtil.createByteArrayFromIpAddressString() returns an incorrect value.
    
    Modification:
    
    - Strip the zone index before conversion
    
    Result:
    
    An IPv6 string with a zone index is decoded correctly.

commit fe05b6e5142d51c3501af3d6c90e6c67055047c6
Author: Trustin Lee <t@motd.kr>
Date:   Tue Sep 16 17:02:31 2014 +0900

    Auto-generate the handler name when null is specified as a name
    
    Motivation:
    
    There's no way to generate the name of a handler being newly added
    automatically and reliably.
    
    For example, let's say you have a routine that adds a set of handlers to
    a pipeline using addBefore() or addAfter().  Because addBefore() and
    addAfter() always require non-conflicting non-null handler name, making
    the multiple invocation of the routine on the same pipeline is
    non-trivial.
    
    Modifications:
    
    - If a user specifies null as the name of the new handler,
      DefaultChannelPipeline generates one.
    - Update the documentation of ChannelPipeline to match the new behavior
    
    Result:
    
    A user doesn't need to worry about name conflicts anymore.

commit 4a45d23129e990bc7b13dd37df9a119d35e1e299
Author: Trustin Lee <t@motd.kr>
Date:   Tue Sep 16 16:48:30 2014 +0900

    Add the encoder/decoder getter methods to HttpClientCodec
    
    Motivation:
    
    There's no way for a user to get the encoder and the decoder of an
    HttpClientCodec.  The lack of such getter methods makes it impossible to
    remove the codec handlers from the pipeline correctly.
    
    For example, a user could add more than one HttpClientCodec to the
    pipeline, and then the user cannot easily decide which encoder and
    decoder to remove.
    
    Modifications:
    
    - Add encoder() and decoder() method to HttpClientCodec which returns
      HttpRequestEncoder and HttpResponseDecoder respectively
    - Also made the same changes to HttpServerCodec
    
    Result:
    
    A user can distinguish the handlers added by multiple HttpClientCodecs
    easily.

commit a64484249c86c282532f9d53d09465b2a4bf98c8
Author: Luke Wood <luke@lwood.me.uk>
Date:   Thu Oct 9 09:05:30 2014 +0100

    Access autoRead via an AtomicIntegerFieldUpdater.
    
    Motiviation:
    
    Before this change, autoRead was a volatile boolean accessed directly.  Any thread that invoked the DefaultChannelConfig#setAutoRead(boolean) method would read the current value of autoRead, and then set a new value.  If the old value did not match the new value, some action would be immediately taken as part of the same method call.
    
    As volatile only provides happens-before consistency, there was no guarantee that the calling thread was actually the thread mutating the state of the autoRead variable (such that it should be the one to invoke the follow-up actions).  For example, with 3 threads:
     * Thread 1: get = false
     * Thread 1: set = true
     * Thread 1: invokes read()
     * Thread 2: get = true
     * Thread 3: get = true
     * Thread 2: set = false
     * Thread 2: invokes autoReadCleared()
     * Event Loop receives notification from the Selector that data is available, but as autoRead has been cleared, cancels the operation and removes read interest
     * Thread 3: set = true
    
    This results in a livelock - autoRead is set true, but no reads will happen even if data is available (as readyOps).  The only way around this livelock currently is to set autoRead to false, and then back to true.
    
    Modifications:
    
    Write access to the autoRead variable is now made using the getAndSet() method of an AtomicIntegerFieldUpdater, AUTOREAD_UPDATER.  This also changed the type of the underlying autoRead variable to be an integer, as no AtomicBooleanFieldUpdater class exists.  Boolean logic is retained by assuming that 1 is true and 0 is false.
    
    Result:
    
    There is no longer a race condition between retrieving the old value of the autoRead variable and setting a new value.

commit 01e3bcf30c801138acf6dafc0f578030333a78f6
Author: Matthias Einwag <matthias.einwag@live.com>
Date:   Fri Sep 26 21:56:44 2014 +0200

    Add verification for websocket subprotocol on the client side.
    
    Motivation:
    
    Websocket clients can request to speak a specific subprotocol. The list of
    subprotocols the client understands are sent to the server. The server
    should select one of the protocols an reply this with the websocket
    handshake response. The added code verifies that the reponded subprotocol
    is valid.
    
    Modifications:
    
    Added verification of the subprotocol received from the server against the
    subprotocol(s) that the user requests. If the user requests a subprotocol
    but the server responds none or a non-requested subprotocol this is an
    error and the handshake fails through an exception. If the user requests
    no subprotocol but the server responds one this is also marked as an
    error.
    
    Addiontionally a getter for the WebSocketClientHandshaker in the
    WebSocketClientProtocolHandler is added to enable the user of a
    WebSocketClientProtocolHandler to extract the used negotiated subprotocol.
    
    Result:
    
    The subprotocol field which is received from a websocket server is now
    properly verified on client side and clients and websocket connection
    attempts will now only succeed if both parties can negotiate on a
    subprotocol.
    If the client sends a list of multiple possible subprotocols it can
    extract the negotiated subprotocol through the added handshaker getter (WebSocketClientProtocolHandler.handshaker().actualSubprotocol()).

commit f7405f2c0cb9e917d854e721437daaee1fb1f41d
Author: Jongyeol Choi <jongyeol.choi@gmail.com>
Date:   Thu Oct 9 01:38:20 2014 +0900

    Add exceptions for CONNACK's return code for MQTT 3.1 specification
    
    Motivation:
    
    http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connack
    In MQTT 3.1, MQTT server must send a CONNACK with return code if CONNECT
    request contains an invalid client identifier or an unacceptable protocol
    version. The return code is one of MqttConnectReturnCode.
    But, MqttDecoder throws DecoderException when CONNECT request contains
    invalid value without distinguish situations. This makes it difficult
    for codec-mqtt users to send a response with return code to clients.
    
    Modifications:
    
    Added exceptions for client identifier rejected and unacceptable
    protocol version. MqttDecoder will throw those exceptions instead of
    DecoderException.
    
    Result:
    
    Users of codec-mqtt can distinguish which is invalid when CONNECT
    contains invalid client identifier or invalid protocol version. And, users can
    send CONNACK with return code to clients.

commit 80ae2c9180767f814172522c5a1b6b2d73b6b080
Author: Matthias Einwag <matthias.einwag@live.com>
Date:   Mon Oct 6 21:03:36 2014 +0200

    Add a test for handover from HTTP to Websocket
    
    Motivation:
    I was not fully reassured that whether everything works correctly when a websocket client receives the websocket handshake HTTP response and a websocket frame in a single ByteBuf (which can happen when the server sends a response directly or shortly after the connect). In this case some parts of the ByteBuf must be processed by HTTP decoder and the remaining by the websocket decoder.
    
    Modification:
    Adding a test that verifies that in this scenaria the handshake and the message are correctly interpreted and delivered by Netty.
    
    Result:
    One more test for Netty.
    The test succeeds - No problems

commit 9589e0baca43ca229dd39b041e77e0cee6f06447
Author: Jongyeol Choi <jongyeol.choi@gmail.com>
Date:   Fri Oct 10 20:34:37 2014 +0900

    Change client id validation range in codec-mqtt
    
    Motivation:
    
    In MQTT 3.1 specification, "The Client Identifier (Client ID) is between
    1 and 23 characters long, and uniquely identifies the client to the
    server". But, current client id validation length is 0~23. It must be
    1~23. The empty string is invalid client id in MQTT 3.1
    
    Modifications:
    
    Change isValidClientId method. Add MIN_CLIENT_ID_LENGTH.
    
    Result:
    
    The validation check for client id length is between 1 and 23.

commit 547a0b04df9c3f242306efcd3a54c713ac0aea81
Author: Matthias Einwag <matthias.einwag@live.com>
Date:   Wed Oct 1 22:02:22 2014 +0200

    Adding a benchmark for websockets
    
    Motivation:
    
    It is often helpful to measure the performance of connections, e.g. the
    latency and the throughput. This can be performed through benchmarks.
    
    Modification:
    
    This adds a simple but configurable benchmark for websockets into the
    example directory. The Netty WebSocket server will echo all received
    websocket frames and will provide an HTML/JS page which serves as the
    client for the benchmark.
    The benchmark also provides a verification mode that verifies the sent
    against the received data. This can be used for the verification ob
    websocket frame encoding and decoding funtionality.
    
    Result:
    
    A benchmark is added in form a further Netty websocket example.
    With this benchmark it is easily possible to measure the performance between Netty and a browser

commit a6b3fd8a72c1f19bdabf901ff1b7e01e185fb5e5
Author: Matthias Einwag <matthias.einwag@live.com>
Date:   Tue Oct 7 00:11:08 2014 +0200

    Fix the leak in the WebSocketClientProtocolHandshakeHandler
    
    Motivation:
    The WebSocketClientProtocolHandshakeHandler never releases the received handshake response.
    
    Modification:
    Release the message in a finally block.
    
    Result:
    No more leak

commit 43681b56086a73edb290f1facd6ba10f20da469f
Author: Matthias Einwag <matthias.einwag@live.com>
Date:   Fri Oct 3 23:35:46 2014 +0200

    Avoid vectored writes for small websocket messages
    
    Motivation:
    The WebSocket08FrameEncoder contains an optimization path for small messages which copies the message content into the header buffer to avoid vectored writes. However this path is in the current implementation never taken because the target buffer is preallocated only for exactly the size of the header.
    
    Modification:
    For messages below a certain treshold allocate the buffer so that the message can be directly copied. Thereby the optimized path is taken.
    
    Result:
    A speedup of about 25% for 100byte messages. Declines with bigger message sizes. I have currently set the treshold to 1kB which is a point where I could still see a few percent speedup, but we should also avoid burning too many CPU cycles.

commit 4eb1529d2cbfb268ada31f53b3a4d6c660caeb35
Author: Matthias Einwag <matthias.einwag@live.com>
Date:   Thu Oct 2 00:25:24 2014 +0200

    Improve WebSocket performance
    
    Motivation:
    
    Websocket performance is to a large account determined through the masking
    and unmasking of frames. The current behavior of this in Netty can be
    improved.
    
    Modifications:
    
    Perform the XOR operation not bytewise but in int blocks as long as
    possible. This reduces the number of necessary operations by 4. Also don't
    read the writerIndex in each iteration.
    Added a unit test for websocket decoding and encoding for verifiation.
    
    Result:
    
    A large performance gain (up to 50%) in websocket throughput.

commit b828e823ef2638f154328fbe55e8cfdd8c5ee570
Author: kerr <hepin@sosia.us>
Date:   Fri Sep 19 12:45:47 2014 +0800

    Change the operator order of TrafficCounter to calculate the throughput to get the correct result
    
    Motivation:
    Currently the last read/write throughput is calculated by first division,this will be 0 if the last read/write bytes < interval,change the order will get the correct result
    
    Modifications:
    Change the operator order from first do division to multiplication
    
    Result:
    Get the correct result instead of 0 when bytes are smaller than interval

commit ffda229cf4632f00a816828e4a6753c674ab21b3
Author: Matthias Einwag <matthias.einwag@live.com>
Date:   Fri Sep 26 22:47:27 2014 +0200

    Send a websocket close frame with status code when receiving invalid frames
    
    Motivation:
    
    According to the websocket specification peers may send a close frame when
    they detect a protocol violation (with status code 1002). The current
    implementation simply closes the connection. This update should add this
    functionality. The functionality is optional - but it might help other
    implementations with debugging when they receive such a frame.
    
    Modification:
    
    When a protocol violation in the decoder is detected and a close was not
    already initiated by the remote peer a close frame is
    sent.
    
    Result:
    
    Remotes which will send an invalid frame will now get a close frame that
    indicates the protocol violation instead of only seeing a closed
    connection.

commit eef2ad7cd2424da63f83052607a232eefc7c36e4
Author: Norman Maurer <norman.maurer@googlemail.com>
Date:   Fri Sep 26 20:53:54 2014 +0200

    [#2939] Fix SslContext usage in the examples for client side
    
    Motivation:
    
    We incorrectly used SslContext.newServerContext() in some places where a we needed a client context.
    
    Modifications:
    
    Use SslContext.newClientContext() when using ssl on the client side.
    
    Result:
    
    Working ssl client examples.

commit 89d4c50c300c8786af254173d307070cdd15a844
Author: Norman Maurer <norman.maurer@googlemail.com>
Date:   Mon Sep 22 15:07:40 2014 +0200

    [#2926] Fix 1 byte memory leak in native transport
    
    Motivation:
    
    We use malloc(1) in the on JNI_OnLoad method but never free the allocated memory. This means we have a tiny memory leak of 1 byte.
    
    Modifications:
    
    Call free(...) on previous allocated memory.
    
    Result:
    
    Fix memory leak

commit 48f13988696c885662f613148e61684da1a24684
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Sep 2 07:15:58 2014 +0200

    Disable caching of PooledByteBuf for different threads.
    
    Motivation:
    
    We introduced a PoolThreadCache which is used in our PooledByteBufAllocator to reduce the synchronization overhead on PoolArenas when allocate / deallocate PooledByteBuf instances. This cache is used for both the allocation path and deallocation path by:
      - Look for cached memory in the PoolThreadCache for the Thread that tries to allocate a new PooledByteBuf and if one is found return it.
      - Add the memory that is used by a PooledByteBuf to the PoolThreadCache of the Thread that release the PooledByteBuf
    
    This works out very well when all allocation / deallocation is done in the EventLoop as the EventLoop will be used for read and write. On the otherside this can lead to surprising side-effects if the user allocate from outside the EventLoop and and pass the ByteBuf over for writing. The problem here is that the memory will be added to the PoolThreadCache that did the actual write on the underlying transport and not on the Thread that previously allocated the buffer.
    
    Modifications:
    
    Don't cache if different Threads are used for allocating/deallocating
    
    Result:
    
    Less confusing behavior for users that allocate PooledByteBufs from outside the EventLoop.

commit 858de5699baacfa0de0810cf8da631f83d6f3e87
Author: Norman Maurer <norman.maurer@googlemail.com>
Date:   Mon Sep 22 10:56:17 2014 +0200

    [#2924] Correctly update head in MemoryRegionCache.trim()
    
    Motivation:
    When MemoryRegionCache.trim() is called, some unused cache entries will be freed (started from head). However, in MeoryRegionCache.trim() the head is not updated, which make entry list's head point to an entry whose chunk is null now and following allocate of MeoryRegionCache will return false immediately.
    
    In other word, cache is no longer usable once trim happen.
    
    Modifications:
    
    Update head to correct idx after free entries in trim().
    
    Result:
    
    MemoryRegionCache behaves correctly even after calling trim().

commit a25c585f39aefc9cfd45d8190239f3443e729c03
Author: Frederic Bregier <fredbregier@free.fr>
Date:   Sat Sep 20 19:07:23 2014 +0200

    Fix overriden method not called in TrafficShaping
    
    Motivation:
    handlerAdded and handlerRemoved were overriden but super was never
    called, while it should.
    Also add one missing information in the toString method.
    
    Modifications:
    Add the super corresponding call, and add checkInterval to the
    toString() method
    
    Result;
    super method calls are correctly passed to the super implementation
    part.

commit 8988b3f4c0ab891f31679d97d48dd376b4bd2fee
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Mon Sep 15 18:30:00 2014 +0400

    Fixed typo in LzmaFrameEncoder constructor
    
    Motivation:
    
    A discovered typo in LzmaFrameEncoder constructor when we check `lc + lp` for better compatibility.
    
    Modifications:
    
    Changed `lc + pb` to `lc + lp`.
    
    Result:
    
    Correct check of `lc + lp` value.

commit f76a6f40d40d581d615252a9a115ad7be5be4aad
Author: Norman Maurer <norman.maurer@googlemail.com>
Date:   Fri Sep 19 20:06:22 2014 +0200

    Allow to access uri of QueryStringDecoder. Related to [#2896]
    
    Motivation:
    
    Sometimes it is useful to be able to access the uri that was used to initialize the QueryStringDecoder.
    
    Modifications:
    
    Add method which allows to retrieve the uri.
    
    Result:
    
    Allow to retrieve the uri that was used to create the QueryStringDecoder.

commit 57f48e0ec84f1d2b57dd134595370579aa2e707a
Author: Wolfgang Profer <wolfgang@profer.org>
Date:   Tue Sep 16 18:18:01 2014 +0200

    Fixed FingerprintTrustManagerFactory constructor
    
    Motivation:
    
    When constructing a FingerprintTrustManagerFactory from an Iterable of Strings, the fingerprints were correctly parsed but never added to the result array. The constructed FingerprintTrustManagerFactory consequently fails to validate any certificate.
    
    Modifications:
    
    I added a line to add each converted SHA-1 certificate fingerprint to the result array which then gets passed on to the next constructor.
    
    Result:
    
    Certificate fingerprints passed to the constructor are now correctly added to the array of valid fingerprints. The resulting FingerprintTrustManagerFactory object correctly validates certificates against the list of specified fingerprints.

commit 9572868e57d49f257ecac23689052b2df45be737
Author: Scott Mitchell <smitchel@akamai.com>
Date:   Fri Sep 12 15:30:50 2014 -0400

    Fix Native EPOLL Build Failure
    
    Motiviation:
    If sendmmsg is already defined then the native epoll module failed to build because of conflicting definitions.
    The mmsghdr type was also redefined on systems that already supported this structure.
    
    Modifications:
    Provide a way so that systems which already define sendmmsg and mmsghdr can build
    Provide a way so that systems which don't define sendmmsg and mmsghdr can build
    
    Result:
    The native EPOLL module can build in more environments

commit cf5aea52eda2d46d44676afe2d71788a3c54c7a6
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Mon Sep 15 17:02:27 2014 +0400

    Implemented LZMA frame encoder
    
    Motivation:
    
    LZMA compression algorithm has a very good compression ratio.
    
    Modifications:
    
    - Added `lzma-java` library which implements LZMA algorithm.
    - Implemented LzmaFrameEncoder which extends MessageToByteEncoder and provides compression of outgoing messages.
    - Added tests to verify the LzmaFrameEncoder and how it can compress data for the next uncompression using the original library.
    
    Result:
    
    LZMA encoder which can compress data using LZMA algorithm.

commit 08cec3c56b8ee9431832bbbb1f5fd64af0ed4fde
Author: Barber, Francis <fbarber@amazon.com>
Date:   Thu Aug 28 21:24:38 2014 -0700

    Add support for ExtensionRegistryLite in ProtobufDecoder
    
    Motivation:
    
    ExtensionRegistry is a subclass of ExtensionRegistryLite.  The ProtobufDecoder
    doesn't use the registry directly, it simply passes it through to the Protobuf
    API.  The Protobuf calls in question are themselves written in terms
    ExtensionRegistryLite not ExtensionRegistry.
    
    Modifications:
    
    Require ExtensionRegistryLite instead of ExtensionRegistry in ProtobufDecoder.
    
    Result:
    
    Consumers can use ExtensionRegistryLite with ProtobufDecoder.

commit f7616d22ebb6e1edb0b8e4e8d080053f05c84ec3
Author: Brad Fritz <brad@fewerhassles.com>
Date:   Wed Sep 10 14:51:32 2014 -0400

    Correct javadoc typo in IdleStateHandler example code

commit 003f97168c87fc350b6ea63405dbe98885a102bc
Author: Scott Mitchell <scott.k.mitch1@gmail.com>
Date:   Wed Sep 10 08:33:32 2014 -0400

    HTTP Content Decoder Cleanup Bug
    
    Motiviation:
    The HTTP content decoder's cleanup method is not cleaning up the decoder correctly.
    The cleanup method is currently doing a readOutbound on the EmbeddedChannel but
    for decoding the call should be readInbound.
    
    Modifications:
    -Change readOutbound to readInbound in the cleanup method
    
    Result:
    The cleanup method should be correctly releaseing unused resources

commit 3cf65e3987785150d20e061049f7625cbcdd016d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Sep 10 14:30:58 2014 +0200

    Directly write CompositeByteBuf if possible without memory copy. Related to [#2719]
    
    Motivation:
    
    In linux it is possible to write more then one buffer withone syscall when sending datagram messages.
    
    Modifications:
    
    Not copy CompositeByteBuf if it only contains direct buffers.
    
    Result:
    
    More performance due less overhead for copy.

commit 6379075bb906e0502815d5c9c61ee9186c96ce3c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Sep 10 11:40:53 2014 +0200

    Fix buffer leak in DatagramUnicastTest caused by incorrect usage of CompositeByteBuf
    
    Motivation:
    
    Due incorrect usage of CompositeByteBuf a buffer leak was introduced.
    
    Modifications:
    
    Correctly handle tests with CompositeByteBuf.
    
    Result:
    
    No more buffer leaks

commit 9428d51e2f4387c1eb719803b1d6f5ca275fe84b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Sep 3 13:54:44 2014 +0100

    Add support for sendmmsg(...) and so allow to write multiple DatagramPackets with one syscall. Related to [#2719]
    
    Motivation:
    
    On linux with glibc >= 2.14 it is possible to send multiple DatagramPackets with one syscall. This can be a huge performance win and so we should support it in our native transport.
    
    Modification:
    
    - Add support for sendmmsg by reuse IovArray
    - Factor out ThreadLocal support of IovArray to IovArrayThreadLocal for better separation as we use IovArray also without ThreadLocal in NativeDatagramPacketArray now
    - Introduce NativeDatagramPacketArray which is used for sendmmsg(...)
    - Implement sendmmsg(...) via jni
    - Expand DatagramUnicastTest to test also sendmmsg(...)
    
    Result:
    
    Netty now automatically use sendmmsg(...) if it is supported and we have more then 1 DatagramPacket in the ChannelOutboundBuffer and flush() is called.

commit 646753c2eb3766352c81e783908ef8ceb2dc4423
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Aug 25 08:47:00 2014 +0200

    Allow to write CompositeByteBuf directly via EpollDatagramChannel. Related to [#2719]
    
    Motivation:
    
    On linux it is possible to use the sendMsg(...) system call to write multiple buffers with one system call when using datagram/udp.
    
    Modifications:
    
    - Implement the needed changes and make use of sendMsg(...) if possible for max performance
    - Add tests that test sending datagram packets with all kind of different ByteBuf implementations.
    
    Result:
    
    Performance improvement when using CompoisteByteBuf and EpollDatagramChannel.

commit cb1bf1a74e7af909a9374e924e4e19a680c27125
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Sep 7 13:38:00 2014 +0200

    [#2867] Workaround performance issue with IPv4-mapped-on-IPv6 addresses
    
    Motivation:
    
    InetAddress.getByName(...) uses exceptions for control flow when try to parse IPv4-mapped-on-IPv6 addresses. This is quite expensive.
    
    Modifications:
    
    Detect IPv4-mapped-on-IPv6 addresses in the JNI level and convert to IPv4 addresses before pass to InetAddress.getByName(...) (via InetSocketAddress constructor).
    
    Result:
    
    Eliminate performance problem causes by exception creation when parsing IPv4-mapped-on-IPv6 addresses.

commit 4e62b51c6d0eaecb3f426f281449db5766a45482
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Sep 1 08:48:15 2014 +0200

    [#2843] Add test-case to show correct behavior of ByteBuf.refCnt() and ByteBuf.release(...)
    
    Motivation:
    
    We received a bug-report that the ByteBuf.refCnt() does sometimes not show the correct value when release() and refCnt() is called from different Threads.
    
    Modifications:
    
    Add test-case which shows that all is working like expected
    
    Result:
    
    Test-case added which shows everything is ok.

commit 98a533ae449ac4821caea3bce35a33c3f56ab122
Author: Amir Szekely <kichik@gmail.com>
Date:   Sat Aug 30 17:39:03 2014 -0700

    Don't ignore maxCapacity if it's not a power of 2
    
    Motivation:
    
    This fixes bug #2848 which caused Recycler to become unbounded and cache infinite number of objects with maxCapacity that's not a power of two. This can result in general sluggishness of the application and OutOfMemoryError.
    
    Modifications:
    
    The test for maxCapacity has been moved out of test to check if the buffer has filled. The buffer is now also capped at maxCapacity and cannot grow over it as it jumps from one power of two to the other.
    
    Additionally, a unit test was added to verify maxCapacity is honored even when it's not a power of two.
    
    Result:
    
    With these changes the user is able to use a custom maxCapacity number and not have it ignored. The unit test assures this bug will not repeat itself.

commit 9b99a611ad250f75d5c73a1660a762ca0e0afbd9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Aug 26 15:07:02 2014 +0200

    [#2823] Writing DefaultFileRegion with EpollSocketChannel may cause hang
    
    Motivation:
    
    In EpollSocketchannel.doWriteFileRegion(...) we need to make sure we write until sendFile(...) returns either 0 or all is written. Otherwise we may not get notified once the Channel is writable again.
    
    This is the case as we use EPOLL_ET.
    
    Modifications:
    
    Always write until either sendFile returns 0 or all is written.
    
    Result:
    
    No more hangs when writing DefaultFileRegion can happen.

commit 2026f15be2f628a53dc5256e7e7e2236310bd541
Author: Trustin Lee <t@motd.kr>
Date:   Tue Aug 26 16:11:45 2014 +0900

    Check noJdkZlibEncoder before comparing other parameters
    
    .. for consistency

commit 8cb6b779c98a0668e48bbadde3364cc60acfdad1
Author: Trustin Lee <t@motd.kr>
Date:   Tue Aug 26 15:46:11 2014 +0900

    Add io.netty.noJdkZlibEncoder system property
    
    Related issue: #2821
    
    Motivation:
    
    There's no way for a user to change the default ZlibEncoder
    implementation.
    
    It is already possible to change the default ZlibDecoder implementation.
    
    Modification:
    
    Add a new system property 'io.netty.noJdkZlibEncoder'.
    
    Result:
    
    A user can disable JDK ZlibEncoder, just like he or she can disable JDK
    ZlibDecoder.

commit b2018777347162936c55f4433db58598ca4a7a56
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Aug 25 07:36:03 2014 +0200

    Move duplicated code into CodecUtil
    
    Motivation:
    
    We have some duplicated code that can be reused.
    
    Modifications:
    
    Create package private class called CodecUtil that now contains the shared code / helper method.
    
    Result:
    
    Less code-duplication

commit fbf853375982acdddf5be676b1c647182b2d210c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Aug 23 21:01:23 2014 +0200

    [#2812] Ensure we call checkForSharableAnnotation in all constructors of ByteToMessageCodec
    
    Motivation:
    
    ByteToMessageCodec miss to check for @Sharable annotation in one of its constructors.
    
    Modifications:
    
    Ensure we call checkForSharableAnnotation in all constructors.
    
    Result:
    
    After your change, what will change.

commit 65686b6c83ef289a696a5d10b1ce2d58399700c1
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jun 25 21:16:27 2014 +0200

    Reduce memory copies in spdy compression implementation.
    
    Motivation:
    
    Currently we do more memory copies then needed.
    
    Modification:
    
    - Directly use heap buffers to reduce memory copy
    - Correctly release buffers to fix buffer leak
    
    Result:
    
    Less memory copies and no leaks

commit 1504d2044de1fb2fdd8a0414e6b456fc3f641bcd
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Aug 19 07:59:52 2014 +0200

    Allow efficient writing of CompositeByteBuf when using native epoll transport.
    
    Motivation:
    
    There were no way to efficient write a CompositeByteBuf as we always did a memory copy to a direct buffer in this case. This is not needed as we can just write a CompositeByteBuf as long as all the components are buffers with a memory address.
    
    Modifications:
    
    - Write CompositeByteBuf which contains only direct buffers without memory copy
    - Also handle CompositeByteBuf that have more components then 1024.
    
    Result:
    
    More efficient writing of CompositeByteBuf.

commit 09100e5043cb731cd84cdcb8e0a5c2bd0977d5b5
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Aug 18 08:35:25 2014 +0200

    Avoid redundant reads of head in peakNode
    
    Motivation:
    
    There is not need todo redunant reads of head in peakNode as we can just spin on next() until it becomes visible.
    
    Modifications:
    
    Remove redundant reads of head in peakNode. This is based on @nitsanw's patch for akka.
    See https://github.com/akka/akka/pull/15596
    
    Result:
    
    Less volatile access.

commit 2c9d1dafac30875074e80bfebd15ef99fabe864d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Aug 21 07:32:05 2014 +0200

    Code-inspection fixes
    
    Motivation:
    
    Saw some code-inspection warnings
    
    Modifications:
    
    Fix warnings
    
    Result:
    
    Less code-inspection warnings

commit 246b65c6b6b978ad858a5ee31a7ca0e328668578
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Aug 20 16:32:39 2014 +0200

    [#2586] Use correct EventExecutor to notify for bind failures on late registration
    
    Motivation:
    
    We used the wrong EventExecutor to notify for bind failures if a late registration was done.
    
    Modifications:
    
    Use the correct EventExecutor to notify and only use the GlobelEventExecutor if the registration fails itself.
    
    Result:
    
    The correct Thread will do the notification.

commit 56fd33df23d4f76b7a6af10a483b5e24a49011a5
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Aug 20 06:53:37 2014 +0200

    codec-socks test cleanup
    
    Motivation:
    
    The unit tests in codec-socks contained redundant casts and empty test classes.
    
    Modifications:
    
    - Remove redundant casts
    - Delete empty test classes
    
    Result:
    
    Cleanup

commit 5b3b48409f48548b8e96b59eda4e156004f7157b
Author: fredericBregier <fredbregier@free.fr>
Date:   Sun Aug 17 20:37:33 2014 +0200

    Fix example for Http Upload
    
    Motivation:
    The example mis handle two elements:
    1) Last message is a LastHttpContent and is not taken into account by
    the server handler
    2) The client makes a sync on last write (chunked) but there is no flush
    before, therefore the sync is waiting forever.
    
    Modifications:
    1) Take into account the message LastHttpContent in simple Get.
    2) Removes sync but add flush for each post and multipost parts
    
    Results:
    Example is no more blocked after get test.
    
    Should be done also in 4.0 and Master (similar changes)

commit a9da2f9d8bdc91e6e92602b07b1cc62b8f71b478
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Aug 18 05:57:35 2014 +0200

    Document the correct default value of SOMAXCONN
    
    Motivation:
    
    Recently we changed the default value of SOMAXCONN that is used when we can not determine it by reading /proc/sys/net/core/somaxconn. While doing this we missed to update the javadocs to reflect the new default value that is used.
    
    Modifications:
    
    List correct default value in the javadocs of SOMAXCONN.
    
    Result:
    
    Correct javadocs.

commit b285994e103b549465115c6a71e684a4f61f304b
Author: Jakob Buchgraber <jakob.buchgraber@tum.de>
Date:   Sun Aug 17 00:34:49 2014 +0200

    Support IPv4 default route in ipfilter.
    
    Motivation:
    
    In GitHub issue #2767 a bug was reported that the IPv4
    default route leads to the ipfilter package denying
    instead of accepting all addresses.
    
    While the issue was reported for Netty 3.9, this bug
    also applies to Netty 4 and higher.
    
    Modifications:
    
    When computing the subnet address from the CIDR prefix,
    correctly handle the case where the prefix is set to zero.
    
    Result:
    
    Ipfilter accepts all addresses when passed the
    IPv4 default route.

commit bcbc23913e5d705412c2f2f47ddf8159aa1b002f
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sat Aug 16 18:10:10 2014 +0200

    Better fix for TrafficShapingHandlerTest
    
    Motivation:
    The test procedure is unstable when testing quick time (factor less or equal to 1). Changing to default 10ms in this case will force time to be correct and time to be checked only when factor is >= 2.
    
    Modifications:
    When factor is <= 1, minimalWaitBetween is 10ms
    
    Result:
    Hoping this version is finally stable.

commit 0ca84b3527756ba55b31ff5d181e65d20b03a5e3
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sat Aug 16 10:54:54 2014 +0200

    Better fix for TrafficShapingHandlerTest
    
    Motivation:
    It seems that in certain conditions, the write back from the server is so quick that the handler has no time to compute traffic shaping. So 10ms of wait before acknowledging is added in server side.
    
    Modifications:
    Add 10ms waiting before server ackonwledge the client.
    
    Result:
    The timing is now suppsed to be stable.

commit b5f61d0de590b52adae3285c93e3a2506cb180e9
Author: Trustin Lee <t@motd.kr>
Date:   Sat Aug 16 03:27:42 2014 +0900

    [maven-release-plugin] prepare for next development iteration

commit 76ac3b21a5196e29e704518b8ea03793ca2fa654
Author: Trustin Lee <t@motd.kr>
Date:   Sat Aug 16 03:27:37 2014 +0900

    [maven-release-plugin] prepare release netty-4.1.0.Beta3

commit 52232a796854988af0d444ca6a0f25237996da8e
Author: Trustin Lee <t@motd.kr>
Date:   Fri Aug 15 11:09:26 2014 -0700

    Fix checkstyle

commit 88c273364df04ebf53c2d3fbbf48916180c2159e
Author: Trustin Lee <t@motd.kr>
Date:   Fri Aug 15 10:18:05 2014 -0700

    Fix for issue #2765 relative to unstable trafficshaping test procedure
    
    Motivation:
    
    The test procedure is unstable due to not enough precise timestamping
    during the check.
    
    Modifications:
    
    Reducing the test cases and cibling "stable" test ("timestamp-able")
    bring more stability to the tests.
    
    Result:
    
    Tests for TrafficShapingHandler seem more stable (whatever using JVM 6,
    7 or 8).

commit 02643e41fb94fd216ddced121fa95c6acb43270b
Author: Trustin Lee <t@motd.kr>
Date:   Fri Aug 15 09:54:32 2014 -0700

    Fix a bug where ChannelOutboundBuffer.removeBytes() throws ClassCastException
    
    When a ChannelOutboundBuffer contains ByteBufs followed by a FileRegion,
    removeBytes() will fail with a ClassCastException.  It should break the
    loop instead.

commit 9ee51fc4c7be58d9d937959854f86ac58764538b
Author: Trustin Lee <t@motd.kr>
Date:   Fri Aug 15 09:41:07 2014 -0700

    Fix the regression caused by f31c630c8cc15c4de1cc7e45b6c5c8053d5bcb75
    
    f31c630c8cc15c4de1cc7e45b6c5c8053d5bcb75 was causing
    SocketGatheringWriteTest to fail because it does not take the case where
    an empty buffer exists in a gathering write.
    
    When there is an empty buffer in a gathering write, the number of
    buffers returned by ChannelOutboundBuffer.nioBuffer() and the actual
    number of write attemps can differ.
    
    To remove the write requests correctly, a byte transport must use
    ChannelOutboundBuffer.removeBytes()

commit 9b99ac0bcb2a0588e06dabbd766115168ae56499
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Aug 15 12:12:57 2014 +0200

    [#2771] Correctly handle constructing of EmbeddedChannel
    
    Motivation:
    
    Because of an incorrect logic in teh EmbeddedChannel constructor it is not possible to use EmbeddedChannel with a ChannelInitializer as constructor argument. This is because it adds the internal LastInboundHandler to its ChannelPipeline before it register itself to the EventLoop.
    
    Modifications:
    
    First register self to EventLoop before add LastInboundHandler to the ChannelPipeline.
    
    Result:
    
    It's now possible to use EmbeddedChannel with ChannelInitializer.

commit dcfdad9e9ec90a4b90567cfe081a3b802946912c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Aug 15 11:53:17 2014 +0200

    [#2769] Fix regression when writing different message types
    
    Motivation:
    
    Due a regression NioSocketChannel.doWrite(...) will throw a ClassCastException if you do something like:
    
    channel.write(bytebuf);
    channel.write(fileregion);
    channel.flush();
    
    Modifications:
    
    Correctly handle writing of different message types by using the correct message count while loop over them.
    
    Result:
    
    No more ClassCastException

commit b3c1904cc9530e8c2e99ddb6f75c924e246c1dd6
Author: Trustin Lee <t@motd.kr>
Date:   Fri Aug 15 09:31:03 2014 +0900

    [maven-release-plugin] prepare for next development iteration

commit e013b2400fb9b24219c7c9b19a5d37149922376b
Author: Trustin Lee <t@motd.kr>
Date:   Fri Aug 15 09:30:59 2014 +0900

    [maven-release-plugin] prepare release netty-4.1.0.Beta2

commit ca29be5e77ef7999b2707cf5d4f32d5e306d568b
Author: plucury <plucury@gmail.com>
Date:   Wed Aug 13 22:52:24 2014 +0800

    Allow ChunkedInput to provide the progress of its transfer
    
    Related issue: #2741 and #2151
    
    Motivation:
    
    There is no way for ChunkedWriteHandler to know the progress of the
    transfer of a ChannelInput. Therefore, ChannelProgressiveFutureListener
    cannot get exact information about the progress of the transfer.
    
    If you add a few methods that optionally provides the transfer progress
    to ChannelInput, it becomes possible for ChunkedWriteHandler to notify
    ChannelProgressiveFutureListeners.
    
    If the input has no definite length, we can still use the progress so
    far, and consider the length of the input as 'undefined'.
    
    Modifications:
    
    - Add ChunkedInput.progress() and ChunkedInput.length()
    - Modify ChunkedWriteHandler to use progress() and length() to notify
      the transfer progress
    
    Result:
    
    ChunkedWriteHandler now notifies ChannelProgressiveFutureListener.

commit fc1429c00c6a365e37363091a3ee14291bb8f010
Author: Trustin Lee <t@motd.kr>
Date:   Thu Aug 14 16:30:36 2014 -0700

    Overall clean-up on socksx package
    
    - SocksV[45] -> Socks[45]
    - Make encodeAsByteBuf package private with some hassle
    - Split SocksMessageEncoder into Socks4MessageEncoder and
      Socks5MessageEncoder, and remove the original
    - Remove lazy singleton instantiation; we don't need it.
    - Remove the deprecated methods
    - Fix Javadoc errors

commit 1a0500452300efdfcc1ecd7631f89b07398ab8c9
Author: bk1te <bk1te@yandex.ru>
Date:   Tue Aug 12 07:12:52 2014 +0400

    Add socksx package which supports SOCKS 4/4a/5
    
    Motivation:
    
    SOCKS 4 and 5 are very different protocols although they share the same
    name.  It is not possible to incorporate the two protocol versions into
    a single package.
    
    Modifications:
    
    - Add a new package called 'socksx' to supercede 'socks' package.
    - Add SOCKS 4/4a support to the 'socksx' package
    
    Result:
    
    codec-socks now supports all SOCKS versions

commit dcd3cadeaa08f711e8e5b833f8ebec48a72dd4d8
Author: Trustin Lee <t@motd.kr>
Date:   Thu Aug 14 15:40:18 2014 -0700

    Reduce the fallback SOMAXCONN value
    
    Related issue: #2407
    
    Motivation:
    
    The current fallback SOMAXCONN value is 3072.  It is way too large
    comparing to the default SOMAXCONN value of popular OSes.
    
    Modifications:
    
    Decrease the fallback SOMAXCONN value to 128 or 200 depending on the
    current OS
    
    Result:
    
    Saner fallback value

commit 1971bd1da6a55797de816bcfb29fe98e6bb86673
Author: Trustin Lee <t@motd.kr>
Date:   Thu Aug 14 15:17:10 2014 -0700

    Rename SnappyFramedEncoder/Decoder to SnappyFrameEncoder/Decoder
    
    Related issue: #2766
    
    Motivation:
    
    Forgot to rename them before the final release by mistake.
    
    Modifications:
    
    Rename and then re-introduce the deprecated version that extends the
    renamed class.
    
    Result:
    
    Better naming

commit c8841bc9de2480f8e37c545997c0eec4a88ec786
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Tue Aug 5 23:48:23 2014 +0400

    Implemented LZ4 compression codec
    
    Motivation:
    
    LZ4 compression codec provides sending and receiving data encoded by very fast LZ4 algorithm.
    
    Modifications:
    
    - Added `lz4` library which implements LZ4 algorithm.
    - Implemented Lz4FramedEncoder which extends MessageToByteEncoder and provides compression of outgoing messages.
    - Added tests to verify the Lz4FramedEncoder and how it can compress data for the next uncompression using the original library.
    - Implemented Lz4FramedDecoder which extends ByteToMessageDecoder and provides uncompression of incoming messages.
    - Added tests to verify the Lz4FramedDecoder and how it can uncompress data after compression using the original library.
    - Added integration tests for Lz4FramedEncoder/Decoder.
    
    Result:
    
    Full LZ4 compression codec which can compress/uncompress data using LZ4 algorithm.

commit d0b5fb9548be90a906d59601898a0a4e5a3f6c2e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Aug 14 09:50:40 2014 +0200

    [#2768] Correctly duplicate buffer for CloseWebSocketFrames
    
    Motivation:
    
    The _0XFF_0X00 buffer is not duplicated and empty after the first usage preventing the connection close to happen on subsequent close frames.
    
    Modifications:
    
    Correctly duplicate the buffer.
    
    Result:
    
    Multiple CloseWebSocketFrames are handled correctly.

commit 1aa20e860953f66c42858968ffe56ef95e2df4fd
Author: Trustin Lee <t@motd.kr>
Date:   Wed Aug 13 22:58:21 2014 -0700

    Fix class description of FastLzFrameDecoder

commit f3110124554e88f142f657ee69fe02666ee120aa
Author: Trustin Lee <t@motd.kr>
Date:   Wed Aug 13 22:55:05 2014 -0700

    Rename FastLzFramed* to FastLzFrame*

commit d315bbaa1428b5f946cc1609d220121f8be642b9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Aug 14 06:43:22 2014 +0200

    Fix and clearify javadocs
    
    Motivation:
    
    ByteToMessageDecoder and ReplayingDecoder have incorrect javadocs in some places.
    
    Modifications:
    
    Fix incorrect javadocs for both classes.
    
    Result:
    
    Correct javadocs for both classes

commit 061d5bc261f8167f5a4716e4d100261ed17a6cf6
Author: Trustin Lee <t@motd.kr>
Date:   Wed Aug 13 16:50:18 2014 -0700

    Fix data corruption in FileRegion transfer with epoll transport
    
    Related issue: #2764
    
    Motivation:
    
    EpollSocketChannel.writeFileRegion() does not handle the case where the
    position of a FileRegion is non-zero properly.
    
    Modifications:
    
    - Improve SocketFileRegionTest so that it tests the cases where the file
      transfer begins from the middle of the file
    - Add another jlong parameter named 'base_off' so that we can take the
      position of a FileRegion into account
    
    Result:
    
    Improved test passes. Corruption is gone.

commit af625f2274a401c7fc1f5acca7a1bb8e69513b16
Author: Trustin Lee <t@motd.kr>
Date:   Wed Aug 13 15:41:42 2014 -0700

    Reduce the execution time of maven-antrun-plugin
    
    Related issue: #2508
    
    Motivation:
    
    The '<exec/>' task takes unnecessarily long time due to a known issue:
    
    - https://issues.apache.org/bugzilla/show_bug.cgi?id=54128
    
    Modifications:
    
    - Reduce the number of '<exec/>' tasks for faster build
    - Use '<propertyregex/>' to extract the output
    
    Result:
    
    Slightly faster build

commit 0dc6a8dccfe6a5b9841f779fd9ff1d51df74f54d
Author: Trustin Lee <t@motd.kr>
Date:   Wed Aug 13 15:05:42 2014 -0700

    Use heap buffers for Unpooled.copiedBuffer()
    
    Related issue: #2028
    
    Motivation:
    
    Some copiedBuffer() methods in Unpooled allocated a direct buffer.  An
    allocation of a direct buffer is an expensive operation, and thus should
    be avoided for unpooled buffers.
    
    Modifications:
    
    - Use heap buffers in all copiedBuffer() methods
    
    Result:
    
    Unpooled.copiedBuffers() are less expensive now.

commit 0eac4fce2988d0fd4b3c17c4aab3bc7db27a87be
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Aug 13 21:47:00 2014 +0200

    Revert "[#2761] ChannelOutboundBuffer can cause data-corruption because of caching ByteBuffers"
    
    This reverts commit 536141ba699ba9d4c955de978166bd1ce2274018.

commit a7d1f983a215b043a5f592cb20697eb285e8eac1
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Aug 13 21:21:15 2014 +0200

    [#2761] Proper work-around for data-corruption caused by cached ByteBuffers
    
    Motivation:
    
    The previous fix did disable the caching of ByteBuffers completely which can cause performance regressions. This fix makes sure we use nioBuffers() for all writes in NioSocketChannel and so prevent data-corruptions. This is still kind of a workaround which will be replaced by a more fundamental fix later.
    
    Modifications:
    
    - Revert 4059c9f3549753119576a287492dd70ae4742988
    - Use nioBuffers() for all writes to prevent data-corruption
    
    Result:
    
    No more data-corruption but still retain the original speed.

commit f89907dba54bcd8d6d5d2c8f9badbec24b7e4ee0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Aug 13 16:40:34 2014 +0200

    Revert "[#2762] Not expand ByteBuffer[] in ChannelOutboundBuffer"
    
    This reverts commit de3c0507c12f9e03f11589f922020cf1320c042f as it may cause problem if a CompositeByteBuf has more then 1024 components.

commit ef572d859da76da63f7c59aaefa65b233281ebc8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Aug 13 12:07:06 2014 +0200

    Change back default allocator to pooled.
    
    Motivation:
    
    While porting some changes from 4.0 to 4.1 and master branch I changed the default allocator from pooled to unpooled by mistake. This should be reverted. The guilty commit is 4a3ef90381f343a457243d6e2eabac01e551315b.
    
    Thanks to @blucas for spotting this.
    
    Modifications:
    
    Revert changes related to allocator.
    
    Result:
    
    Use the correct default allocator again.

commit de3c0507c12f9e03f11589f922020cf1320c042f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Aug 13 11:55:06 2014 +0200

    [#2762] Not expand ByteBuffer[] in ChannelOutboundBuffer
    
    Motivation:
    
    At the moment we expand the ByteBuffer[] when we have more then 1024 ByteBuffer to write and replace the stored instance in its FastThreadLocal. This is not needed and may even harm performance on linux as IOV_MAX is 1024 and so this may cause the JVM to do an array copy.
    
    Modifications:
    
    Just exit the nioBuffers() method if we can not fit more ByteBuffer in the array. This way we will pick them up on the next call.
    
    Result:
    
    Remove uncessary array copy and simplify the code.

commit 536141ba699ba9d4c955de978166bd1ce2274018
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Aug 13 11:06:03 2014 +0200

    [#2761] ChannelOutboundBuffer can cause data-corruption because of caching ByteBuffers
    
    Motivation:
    
    We cache the ByteBuffers in ChannelOutboundBuffer.nioBuffers() for the Entries in the ChannelOutboundBuffer to reduce some overhead. The problem is this can lead to data-corruption if an incomplete write happens and next time we try to do a non-gathering write.
    
    To fix this we should remove the caching which does not help a lot anyway and just make the code buggy.
    
    Modifications:
    
    Remove the caching of ByteBuffers.
    
    Result:
    
    No more data-corruption.

commit bc1379d19dcf59626ef8d5b431830a189957e3bd
Author: fbregier <fbregier@scm-manager.local>
Date:   Fri Aug 1 10:13:00 2014 +0200

    [#2721] Improve Traffic Shaping handler
    
    Motivation:
    Currently Traffic Shaping is using 1 timer only and could lead to
    "partial" wrong bandwidth computation when "short" time occurs between
    adding used bytes and when the TrafficCounter updates itself and finally
    when the traffic is computed.
    Indeed, the TrafficCounter is updated every x delay and it is at the
    same time saved into "lastXxxxBytes" and set to 0. Therefore, when one
    request the counter, it first updates the TrafficCounter with the added
    used bytes. If this value is set just before the TrafficCounter is
    updated, then the bandwidth computation will use the TrafficCounter with
    a "0" value (this value being reset once the delay occurs). Therefore,
    the traffic shaping computation is wrong in rare cases.
    
    Secondly the traffic shapping should avoid if possible the "Timeout"
    effect by not stopping reading or writing more than a maxTime, this
    maxTime being less than the TimeOut limit.
    
    Thirdly the traffic shapping in read had an issue since the readOp
    was not set but should, turning in no read blocking from socket
    point of view.
    
    Modifications:
    The TrafficCounter has 2 new methods that compute the time to wait
    according to read or write) using in priority the currentXxxxBytes (as
    before), but could used (if current is at 0) the lastXxxxxBytes, and
    therefore having more chance to take into account the real traffic.
    
    Moreover the Handler could change the default "max time to wait", which
    is by default set to half of "standard" Time Out (30s:2 = 15s).
    
    Finally we add the setAutoRead(boolean) accordingly to the situation,
    as proposed in #2696 (this pull request is in error for unknown reason).
    
    Result:
    The Traffic Shaping is better take into account (no 0 value when it
    shouldn't) and it tries to not block traffic more than Time Out event.
    
    Moreover the read is really stopped from socket point of view.
    
    This version is similar to #2388 and #2450.
    This version is for V4.1, and includes the #2696 pull request
    to ease the merge process.
    It is compatible with master too.
    
    Including also #2748
    
    The test minimizes time check by reducing to 66ms steps (55s).

commit a0c466a27673a02c86f364cc78a500050bd91383
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Tue Aug 12 03:00:56 2014 +0400

    Implemented FastLZ compression codec
    
    Motivation:
    
    FastLZ compression codec provides sending and receiving data encoded by fast FastLZ algorithm using block mode.
    
    Modifications:
    
    - Added part of `jfastlz` library which implements FastLZ algorithm. See FastLz class.
    - Implemented FastLzFramedEncoder which extends MessageToByteEncoder and provides compression of outgoing messages.
    - Implemented FastLzFramedDecoder which extends ByteToMessageDecoder and provides uncompression of incoming messages.
    - Added integration tests for `FastLzFramedEncoder/Decoder`.
    
    Result:
    
    Full FastLZ compression codec which can compress/uncompress data using FastLZ algorithm.

commit 60764200d71a6365934d9ea9152b19646412adc2
Author: Trustin Lee <t@motd.kr>
Date:   Tue Aug 12 11:09:47 2014 -0700

    Do not throw an exception when failed to get a header
    
    Motivation:
    
    It is often very expensive to instantiate an exception. TextHeader
    should not raise an exception when it failed to find a header or when
    its header value is not valid.
    
    Modification:
    
    - Change the return type of the getter methods to Integer and Long so
      that null is returned when no header is found or its value is invalid
    - Update Javadoc
    
    Result:
    
    - Fixes #2758
    - No unnecessary instantiation of exceptions

commit de724063f38590b9009703a0ba33683e8f9b0367
Author: Trustin Lee <t@motd.kr>
Date:   Tue Aug 12 10:36:13 2014 -0700

    Reduce the initial capacity of the value list from 4 to 2
    
    Motivation:
    
    DefaultTextHeaders.getAll*() methods create an ArrayList whose initial
    capacity is 4.  However, it is more likely that the actual number of
    values is smaller than that.
    
    Modifications:
    
    Reduce the initial capacity of the value list from 4 to 2
    
    Result:
    
    Slightly reduced memory footprint

commit 2d36caa9f64786942c123ef34e58f82b6d962951
Author: jxu <jensen@happylatte.com>
Date:   Wed Aug 6 17:06:58 2014 +0800

    Add TextHeaders.getAndRemove(...) and its variants
    
    Related issue: #2649 and #2745
    
    Motivation:
    
    At the moment there is no way to get and remove a header with one call.
    This means you need to search the headers two times. We should add
    getAndRemove(...) to allow doing so with one call.
    
    Modifications:
    
    Add getAndRemove(...) and getUnconvertedAndRemove(...) and their
    variants
    
    Result:
    
    More efficient API

commit 286b89933ccc0d7ace84bffc46c59853809700ca
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Aug 6 14:38:23 2014 +0200

    Allow to obtain RecvByteBufAllocator.Handle to allow more flexible implementations
    
    Motivation:
    
    At the moment it's only possible for a user to set the RecvByteBufAllocator for a Channel but not access the Handle once it is assigned. This makes it hard to write more flexible implementations.
    
    Modifications:
    
    Add a new method to the Channel.Unsafe to allow access the the used Handle for the Channel. The RecvByteBufAllocator.Handle is created lazily.
    
    Result:
    
    It's possible to write more flexible implementatons that allow to adjust stuff on the fly for a Handle that is used by a Channel

commit 02e7e53cbb845e7b7ce0a377cba59ca3a7d09d2b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Aug 10 13:40:41 2014 +0200

    [#2752] Add PendingWriteQueue for queue up writes
    
    Motivation:
    
    Sometimes ChannelHandler need to queue writes to some point and then process these. We currently have no datastructure for this so the user will use an Queue or something like this. The problem is with this Channel.isWritable() will not work as expected and so the user risk to write to fast. That's exactly what happened in our SslHandler. For this purpose we need to add a special datastructure which will also take care of update the Channel and so be sure that Channel.isWritable() works as expected.
    
    Modifications:
    
    - Add PendingWriteQueue which can be used for this purpose
    - Make use of PendingWriteQueue in SslHandler
    
    Result:
    
    It is now possible to queue writes in a ChannelHandler and still have Channel.isWritable() working as expected. This also fixes #2752.

commit 486de44680c6b266e013183226976c6081f41535
Author: Trustin Lee <t@motd.kr>
Date:   Mon Aug 11 10:45:56 2014 -0700

    Fix a resource leak in StompSubframeAggregatorTest

commit af2682634857281157b4f372a8bf0ee64f655978
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Fri Aug 8 16:16:45 2014 -0700

    SPDY: fix SpdySessionHandler::updateSendWindowSize
    
    In Netty 3, downstream writes of SPDY data frames and upstream reads of
    SPDY window udpate frames occur on different threads.
    
    When receiving a window update frame, we synchronize on a java object
    (SpdySessionHandler::flowControlLock) while sending any pending writes
    that are now able to complete.
    
    When writing a data frame, we check the send window size to see if we
    are allowed to write it to the socket, or if we have to enqueue it as a
    pending write. To prevent races with the window update frame, this is
    also synchronized on the same SpdySessionHandler::flowControlLock.
    
    In Netty 4, upstream and downstream operations on any given channel now
    occur on the same thread. Since java locks are re-entrant, this now
    allows downstream writes to occur while processing window update frames.
    
    In particular, when we receive a window update frame that unblocks a
    pending write, this write completes which triggers an event notification
    on the response, which in turn triggers a write of a data frame. Since
    this is on the same thread it re-enters the lock and modifies the send
    window. When the write completes, we continue processing pending writes
    without knowledge that the window size has been decremented.

commit 23d3b842735db25c775c15b2fbab652848f5cd93
Author: Trustin Lee <t@motd.kr>
Date:   Fri Aug 8 11:25:48 2014 -0700

    Fix resource leaks in StompSubframeDecoderTest

commit d5fd57262b9877a0f5b035a7c019d576ee1c60f3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Aug 6 07:01:24 2014 +0200

    [#2744] Fix flakey HashedWheelTimerTest.testExecutionOnTime()
    
    Motivation:
    
    The calculation of the max wait time for HashedWheelTimerTest.testExecutionOnTime() was wrong and so the test sometimes failed.
    
    Modifications:
    
    Fix the max wait time.
    
    Result:
    
    No more test-failures

commit a9ae80fc8ff2f7d87eea2ad2889909e910572b8a
Author: Trustin Lee <t@motd.kr>
Date:   Tue Aug 5 18:11:45 2014 -0700

    Fix resource leaks in StompSubframeAggregatorTest

commit 8e1007d69326bf2394e596e349d75a96fc006c6e
Author: Trustin Lee <t@motd.kr>
Date:   Tue Aug 5 16:50:16 2014 -0700

    Fix a bug where SpdySession.getActiveStreams() returns incorrect set
    
    Related issue: #2743
    
    Motivation:
    
    When there are more than one stream with the same priority, the set
    returned by SpdySession.getActiveStream() will not include all of them,
    because it uses TreeSet and only compares the priority of streams. If
    two different streams have the same priority, one of them will be
    discarded by TreeSet.
    
    Modification:
    
    - Rename getActiveStreams() to activeStreams()
    - Replace PriorityComparator with StreamComparator
    
    Result:
    
    Two different streams with the same priority are compared correctly.

commit fd813f76fa41f315187bf194f74cbc39f7dc9f4f
Author: Trustin Lee <t@motd.kr>
Date:   Tue Aug 5 15:47:30 2014 -0700

    Add test cases for HttpContentCompressor
    
    - Ported from 386a06dbfa13f981aff59a9abb7cbecee2701e65

commit 073ec8d10a5d05f2a1bf12857c4fcf9fc19bbcc1
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Wed Aug 6 00:34:35 2014 +0400

    Consider writerIndex when LzfDecoder writes into a new heap buffer
    
    Motivation:
    
    Now LzfDecoder do not consider writerIndex when it writes into array of a new heap buffer (when it decodes a compressed chuck of data)

commit 8fce6316adecc577d4b19902d04548feeeb8383b
Author: Trustin Lee <t@motd.kr>
Date:   Tue Aug 5 11:23:28 2014 -0700

    Fix a bug where ChannelFuture.setFailure(null) doesn't fail
    
    Motivation:
    
    We forgot to do a null check on the cause parameter of
    ChannelFuture.setFailure(cause)
    
    Modifications:
    
    Add a null check
    
    Result:
    
    Fixed issue: #2728

commit 869687bd711e1358367203526128d9a2ad90663a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Aug 5 14:24:49 2014 +0200

    Port ChannelOutboundBuffer and related changes from 4.0
    
    Motivation:
    
    We did various changes related to the ChannelOutboundBuffer in 4.0 branch. This commit port all of them over and so make sure our branches are synced in terms of these changes.
    
    Related to [#2734], [#2709], [#2729], [#2710] and [#2693] .
    
    Modification:
    Port all changes that was done on the ChannelOutboundBuffer.
    
    This includes the port of the following commits:
     - 73dfd7c01b49aca006a34cc48197dee3fc360af1
     - 997d8c32d23f2d88903b7b607360907b99101002
     - e282e504f17b0874719ff606c728494e3509b1a0
     - 5e5d1a58fd3159c04ac7d10edfb8ed7a83d3935e
     - 8ee3575e72d6ee000a99c717d96f36695a8667a0
     - d6f0d12a8692c095df43b2a4462cbc97cf5c5a2d
     - 16e50765d1fb99005ad761409c28dcedf477531b
     - 3f3e66c31ae3da70c36cc125ca9bcac8215390e4
    
    Result:
     - Less memory usage by ChannelOutboundBuffer
     - Same code as in 4.0 branch
     - Make it possible to use ChannelOutboundBuffer with Channel implementation that not extends AbstractChannel

commit e33f12f5b8a37b3f2a7291a10a61c8bce6ce73e0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Aug 5 10:13:05 2014 +0200

    [#2732] HttpRequestEncoder may produce invalid uri if uri parameters are included.
    
    Motivation:
    
    If the requests contains uri parameters but not path the HttpRequestEncoder does produce an invalid uri while try to add the missing path.
    
    Modifications:
    
    Correctly handle the case of uri with paramaters but no path.
    
    Result:
    
    HttpRequestEncoder produce correct uri in all cases.

commit cc33417c0e302c8d33f170b1db37014cce8c35d2
Author: Trustin Lee <t@motd.kr>
Date:   Mon Aug 4 15:03:25 2014 -0700

    Add more utility methods to check the availability of the epoll transport
    
    Related issue: #2733
    
    Motivation:
    
    Unlike OpenSsl, Epoll lacks a couple useful availability checker
    methods:
    
    - ensureAvailability()
    - unavailabilityCause()
    
    Modifications:
    
    Add missing methods
    
    Result:
    
    More ways to check the availability and to get the cause of
    unavailability programatically.

commit 8263a6201405982de39c19db766314bf895e2b0f
Author: Trustin Lee <t@motd.kr>
Date:   Mon Aug 4 10:45:39 2014 -0700

    Clean-up d9cccccbb3344997e016e6a3603126ce65705c4d
    
    - Revert irrelevant formatting changes
    - Rename resource files
      - Add .pem
      - Remove 'netty' from names

commit a5ccec5ef3691a4b4323bb1ea3ce93e55b826d40
Author: Trustin Lee <t@motd.kr>
Date:   Mon Aug 4 10:25:11 2014 -0700

    More brief somaxconn logging
    
    - Consistent log message format
    - Avoid unnecessary autoboxing when debug level is off
    - Remove the duplication of somaxconn path

commit 20dffa8ee644b451776cee7e79f15d7d1c2151d8
Author: Peter Schulz <schulzp@users.noreply.github.com>
Date:   Sat Aug 2 12:30:41 2014 +0200

    [#2718] Added private key decryption to JDK SSL server context.
    
    Motivation:
    
    Currently it is not possible to load an encrypted private key when
    creating a JDK based SSL server context.
    
    Modifications:
    
    - Added static method to JdkSslServerContext which handles key spec generation for (encrypted) private keys and make use of it.
    -Added tests for creating a SSL server context based on a (encrypted)
    private key.
    
    Result:
    
    It is now possible to create a JDK based SSL server context with an
    encrypted (password protected) private key.

commit 74dd295e5964401ce7d281e1aa9a66cafdaf19fc
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Aug 4 14:05:02 2014 +0200

    Fix buffer leaks in DnsResponseDecoder and DnsResponseDecoderTest
    
    Motivation:
    
    There were two buffer leaks in the codec-dns.
    
    Modifications:
    
    - Fix buffer leak in DnsResponseTest.readResponseTest()
    - Correctly release DnsResources on Exception
    
    Result:
    
    No more buffer leaks in the codec-dns module.

commit c13419750d5d158642edf550b3c23cb28334d980
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Fri Jul 25 23:29:35 2014 +0400

    Improve Bzip2BitReader/Writer
    
    Motivation:
    
    Before this changes Bzip2BitReader and Bzip2BitWriter accessed to ByteBuf byte by byte. So tests for Bzip2 compression codec takes a lot of time if we ran them with paranoid level of resource leak detection. For more information see comments to #2681 and #2689.
    
    Modifications:
    
    - Increased size of bit buffers from 8 to 64 bits.
    - Improved reading and writing operations.
    - Save link to incoming ByteBuf inside Bzip2BitReader.
    - Added methods to check possible readable bits and bytes in Bzip2BitReader.
    - Updated Bzip2 classes to use new API of Bzip2BitReader.
    - Added new constants to Bzip2Constants.
    
    Result:
    
    Increased size of bit buffers and improved performance of Bzip2 compression codec (for general work by 13% and for tests with paranoid level of resource leak detection by 55%).

commit ff9cc74bf695c16585f453badc911e5b0776e752
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 31 18:09:54 2014 -0700

    Remove duplicated code

commit 1f95e5db4c790f0d3b5df226ba5d71708c175f9e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 31 18:05:18 2014 -0700

    [#2720] Check if /proc/sys/net/core/somaxconn exists before try to parse it
    
    Motivation:
    
    As /proc/sys/net/core/somaxconn does not exists on non-linux platforms you see a noisy stacktrace when debug level is enabled while the static method of NetUtil is executed.
    
    Modifications:
    
    Check if the file exists before try to parse it.
    
    Result:
    
    Less noisy logging on non-linux platforms.

commit 3c4321ce43b4dd7bea3d8d36721d50ae7cf10bd9
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 31 17:05:54 2014 -0700

    Use our own URL shortener wherever possible

commit 9a654d8a617485cb417071f7b77d74ae181f709f
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 29 15:57:58 2014 -0700

    Remove duplicate range check in AbstractByteBuf.skipBytes()

commit a35233a4d4e6a2e923f81006f00cb79f598bd2e4
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 29 15:45:50 2014 -0700

    Fix a ConstantPoolTest failure

commit 77609cf6ed78325ef8c308d6fbc0d045596e46eb
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 29 14:56:28 2014 -0700

    Fix a bug where AbstractConstant.compareTo() returns 0 for different constants
    
    Related issue: #2354
    
    Motivation:
    
    AbstractConstant.compareTo() can return 0 even if the specified constant
    object is not the same instance with 'this'.
    
    Modifications:
    
    - Compare the identityHashCode of constant first. If that fails,
      allocate a small direct buffer and use its memory address as a unique
      value.  If the platform does not provide a way to get the memory
      address of a direct buffer, use a thread-local random value.
    - Signal cannot extend AbstractConstant. Use delegation.
    
    Result:
    
    It is practically impossible for AbstractConstant.compareTo() to return
    0 for different constant objects.

commit 3207fac88e040a18f6fd5c8fcc0f37bde1a01183
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 28 13:31:26 2014 -0700

    Use correct exception message when throw exception from native code
    
    Motivation:
    
    We sometimes not use the correct exception message when throw it from the native code.
    
    Modifications:
    
    Fixed the message.
    
    Result:
    
    Correct message in exception

commit 750eed1804515c43e1ba60d8a1a927ea745424fc
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 28 10:39:01 2014 -0700

    Fix broken test after change the maximal value of the pid. Part of [#2706]

commit 168e2dde05146bda83ad25023b3bbc10c9bd3c06
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 28 10:12:49 2014 -0700

    [#2706] Allow pid up to 4194304
    
    Motivation:
    
    The PID_MAX_LIMIT on 64bit linux systems is 4194304 and on osx it is 99998. At the moment we use 65535 as an upper-limit which is too small.
    
    Modifications:
    
    Use 4194304 as max possible value
    
    Result:
    
    No more false-positives when try to detect current pid.

commit e09d2f32fb1c7f2ab8d1e41fdb72e00adb7032ff
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 28 04:24:26 2014 -0700

    [#2708] DnsResource.duplicate() should return DnsResource and not ByteBufHolder
    
    Motivation:
    
    DnsResource.duplicate() should return DnsResource and not ByteBufHolder
    
    Modifications:
    
    Change return type from ByteBufHolder to DnsResource
    
    Result:
    
    No need to cast to the correct type when using duplicate()

commit f88cd62354464a3445c68976d6f3a535d775180a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 28 04:12:59 2014 -0700

    [#2692] Allows notify ChannelFutureProgressListener on complete writes
    
    Motivation:
    
    We have some inconsistency when handling writes. Sometimes we call ChannelOutboundBuffer.progress(...) also for complete writes and sometimes not. We should call it always.
    
    Modifications:
    
    Correctly call ChannelOuboundBuffer.progress(...) for complete and incomplete writes.
    
    Result:
    
    Consistent behavior

commit d5b7c131dd4de9a1a28e0791746680503fc29907
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 25 17:27:22 2014 +0200

    Correctly write single ByteBuf with memoryAddress
    
    Motivation:
    
    While optimize gathering writes I introduced a bug when writing single ByteBuf that have a memoryAddress. This regression was introduced by 88bd6e7a9300073707f305409fa6481f1eeb2077.
    
    Modifications:
    
    Correctly use the writerIndex as argument when call Native.writeAddress(...)
    
    Result:
    
    No more corruption while write single buffers.

commit 88bd6e7a9300073707f305409fa6481f1eeb2077
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 22 22:27:50 2014 +0200

    Optimize native transport for gathering writes
    
    Motivation:
    
    While benchmarking the native transport with gathering writes I noticed that it is quite slow. This is due the fact that we need to do a lot of array copies to get the buffers into the iov array.
    
    Modification:
    
    Introduce a new class calles IovArray which allows to fill buffers directly in a iov array that can be passed over to JNI without any array copies. This gives a nice optimization in terms of speed when doing gathering writes.
    
    Result:
    
    Big performance improvement when doing gathering writes. See the included benchmark...
    
    Before:
    [nmaurer@xxx]~% wrk/wrk -H 'Host: localhost' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' -H 'Connection: keep-alive' -d 120 -c 256 -t 16 --pipeline 256  http://xxx:8080/plaintext
    Running 2m test @ http://xxx:8080/plaintext
      16 threads and 256 connections
      Thread Stats   Avg      Stdev     Max   +/- Stdev
        Latency    23.44ms   16.37ms 259.57ms   91.77%
        Req/Sec   181.99k    31.69k  304.60k    78.12%
      346544071 requests in 2.00m, 46.48GB read
    Requests/sec: 2887885.09
    Transfer/sec:    396.59MB
    
    With this change:
    [nmaurer@xxx]~% wrk/wrk -H 'Host: localhost' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' -H 'Connection: keep-alive' -d 120 -c 256 -t 16 --pipeline 256  http://xxx:8080/plaintext
    Running 2m test @ http://xxx:8080/plaintext
      16 threads and 256 connections
      Thread Stats   Avg      Stdev     Max   +/- Stdev
        Latency    21.93ms   16.33ms 305.73ms   92.34%
        Req/Sec   194.56k    33.75k  309.33k    77.04%
      369617503 requests in 2.00m, 49.57GB read
    Requests/sec: 3080169.65
    Transfer/sec:    423.00MB

commit 5b2bdd844db56079e6cb75b0e1142d337723e1c3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 21 14:17:35 2014 +0200

    [#2662] Fix race in cancellation of TimerTasks which could let to NPE
    
    Motivation:
    
    Due some race-condition while handling canellation of TimerTasks it was possibleto corrupt the linked-list structure that is represent by HashedWheelBucket and so produce a NPE.
    
    Modification:
    
    Fix the problem by adding another MpscLinkedQueue which holds the cancellation tasks and process them on each tick. This allows to use no synchronization / locking at all while introduce a latency of max 1 tick before the TimerTask can be GC'ed.
    
    Result:
    
    No more NPE

commit e1cc1fbabce9b0d7247e6a955496c78e3772390a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 24 14:33:56 2014 +0200

    [#2705] Call fireChannelReadComplete() if channelActive(...) decodes messages in ReplayingDecoder / ByteToMessageDecoder
    
    Motivation:
    
    In ReplayingDecoder / ByteToMessageDecoder channelInactive(...) method we try to decode a last time and fire all decoded messages throw the pipeline before call ctx.fireChannelInactive(...). To keep the correct order of events we also need to call ctx.fireChannelReadComplete() if we read anything.
    
    Modifications:
    
    - Channel channelInactive(...) to call ctx.fireChannelReadComplete() if something was decoded
    - Move out.recycle() to finally block
    
    Result:
    
    Correct order of events.

commit b029800b68d7024d709eb7749bf804074707fac6
Author: Willem Jiang <willem.jiang@gmail.com>
Date:   Thu Jul 24 16:18:56 2014 +0800

    Updated the ChannelGroup JavaDoc by removing b.releaseExternalResources();

commit 4bde044957a6587667277ff0bd4410509790456e
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jul 23 14:33:35 2014 -0700

    Overall cleanup of codec-dns
    
    Related issue: #2688
    
    - DnsClass and DnsType
      - Make DnsClass and DnsType implement Comparable
      - Optimize the message generation of IllegalArgumentException,
        by pre-populating the list of the expected parameters
      - Move the static methods up
      - Relax the validation rule of DnsClass so that a user can define a
        CLASS which is not listed in the RFC 1035
      - valueOf(int) does not throw IllegalArgumentException anymore as long
        as the specified value is an unsigned short.
      - Rename create() and forName() to valueOf() so that they look like a
        real enum
      - Rename type() and clazz() to intValue() so that they conform to our
        naming convention
    - Add missing null checks in DnsEntry

commit 9734170b7dcc0ca0f5f48bd250819c2fca17c564
Author: Tim Boudreau <niftiness@gmail.com>
Date:   Tue Jul 22 03:02:58 2014 -0400

    Use value types for class and type in DNS entries to make them immune to parameter order bugs
    
    Motivation:
    
    DNS class and type were represented as integers rather than an enum or a
    similar dedicated value type.  This can be a potential source of a
    parameter order bug which might be difficult to track down.
    
    Modifications:
    
    Add DnsClass and DnsType to replace integer parameters
    
    Result:
    
    Type safety and less error-proneness

commit 4816533638caf263bfe9a033d1a34beca0fc19d5
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Wed Jul 23 18:30:41 2014 +0400

    Refactor Bzip2 tests
    
    Motivation:
    
    Complicated code of Bzip2 tests with some unnecessary actions.
    
    Modifications:
    
    - Reduce size of BYTES_LARGE array of random test data for Bzip2  tests.
    - Removed unnecessary creations of EmbeddedChannel instances in Bzip2 tests.
    - Simplified tests in Bzip2DecoderTest which expect exception.
    - Removed unnecessary testStreamInitialization() from Bzip2EncoderTest.
    
    Result:
    
    Reduced time to test the 'codec' package by 7 percent, simplified code of Bzip2 tests.

commit 99cf6f0732d5b8cbe9ab3dd53a73ffac2870c556
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Wed Jul 23 18:58:27 2014 +0400

    Refactor integration tests of compression codecs
    
    Motivation:
    
    Duplicated code of integration tests for different compression codecs.
    
    Modifications:
    
    - Added abstract class IntegrationTest which contains common tests for any compression codec.
    - Removed common tests from Bzip2IntegrationTest and LzfIntegrationTest.
    - Implemented abstract methods of IntegrationTest in Bzip2IntegrationTest, LzfIntegrationTest and SnappyIntegrationTest.
    
    Result:
    
    Removed duplicated code of integration tests for compression codecs and simplified an addition of integration tests for new compression codecs.

commit 830091c2604b4c9f39d9d411b812c7d67db05f77
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 22 13:28:02 2014 -0700

    Reduce the default initial capacity of ChannelOutboundBuffer
    
    Motivation:
    
    ChannelOutboundBuffer is basically a circular array queue of its entry
    objects.  Once an entry is created in the array, it is never nulled out
    to reduce the allocation cost.
    
    However, because it is a circular queue, the array almost always ends up
    with as many entry instances as the size of the array, regardless of the
    number of pending writes.
    
    At worst case, a channel might have only 1 pending writes at maximum
    while creating 32 entry objects, where 32 is the initial capacity of the
    array.
    
    Modifications:
    
    - Reduce the initial capacity of the circular array queue to 4.
    - Make the initial capacity of the circular array queue configurable
    
    Result:
    
    We spend 4 times less memory for entry objects under certain
    circumstances.

commit ca87cc887e3609426417d0288245e030486b0468
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Tue Jul 22 13:34:40 2014 +0400

    Simplify Bzip2 tests
    
    Motivation:
    
    Sometimes we have a 'build time out' error because tests for bzip2 codec take a long time.
    
    Modifications:
    
    Removed cycles from Bzip2EncoderTest.testCompression(byte[]) and Bzip2DecoderTest.testDecompression(byte[]).
    
    Result:
    
    Reduced time to test the 'codec' package by 30 percent.

commit 923a0e71acdc8529b991cbec2f8477f104bd859f
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jul 21 16:48:08 2014 -0700

    Raise a meaningful exception instead of NPE
    
    Motivation:
    
    When decoding the NAME field in a DNS Resource Record, DnsResponseDecoder
    can raise a NullPointerException if the NAME field contains a loop.
    
    Modification:
    
    Instead of raising an NPE, raise CorruptedFrameException so that the
    exception itself has meaning.
    
    Result:
    
    Less confusing when a malformed DNS RR is received

commit ae9963a40cbf7714f3f30e0093ff41f2f200b6e8
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jul 21 16:37:49 2014 -0700

    Fix NPE while decoding authority section of a DNS response
    
    Motivation:
    
    NullPointerException is raised when a DNS response conrains a resource
    record whose NAME is empty, which is the case for the authority section.
    
    Modification:
    
    Allow an empty name for DnsEntry. Only disallow an empty name for
    DnsQuestion.
    
    Result:
    
    Fixes #2686

commit 530750d60669156d508041e3c99ce95111b7e81d
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jul 21 12:10:16 2014 -0700

    Add a link to the 'native transports' page

commit 07024a4e4b6c0303f893c9d5020a66652a037f7a
Author: Osvaldo Doederlein <opinali@google.com>
Date:   Sat Jul 19 18:16:50 2014 -0400

    Fixes and improvements to IntObjectHashMap. Related to [#2659]
    
    - Rewrite with linear probing, no state array, compaction at cleanup
    - Optimize keys() and values() to not use reflection
    - Optimize hashCode() and equals() for efficient iteration
    - Fixed equals() to not return true for equals(null)
    - Optimize iterator to not allocate new Entry at each next()
    - Added toString()
    - Added some new unit tests

commit c85319213a7d3fb35729ce4e75448a3c10f91b71
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 21 08:21:27 2014 +0200

    [#2675] Replace synchronization performed on util.concurrent instance in TrafficCounter
    
    Motivation:
    
    Message from FindBugs:
    This method performs synchronization an object that is an instance of a class from the java.util.concurrent package (or its subclasses). Instances of these classes have their own concurrency control mechanisms that are orthogonal to the synchronization provided by the Java keyword synchronized. For example, synchronizing on an AtomicBoolean will not prevent other threads from modifying the AtomicBoolean.
    Such code may be correct, but should be carefully reviewed and documented, and may confuse people who have to maintain the code at a later date.
    
    Modification:
    
    Use synchronized(this)
    
    Result:
    
    Less confusing code

commit 2e2abb0b74104662aee76ba532b98e4ea99c2bbe
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Sun Jul 20 19:43:02 2014 -0700

    SPDY: fix pushed response NullPointerException

commit 512d1a11ff2ea041e2fbaddae492c1b053fc9076
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 21 07:00:46 2014 +0200

    [#2685] Epoll transport should use GetPrimitiveArrayCritical / ReleasePrimitiveArrayCritical
    
    Motivation:
    
    At the moment we use Get*ArrayElement all the time in the epoll transport which may be wasteful as the JVM may do a memory copy for this. For code-path that will get executed fast (without blocking) we should better make use of GetPrimitiveArrayCritical and ReleasePrimitiveArrayCritical as this signal the JVM that we not want to do any memory copy if not really needed. It is important to only do this on non-blocking code-path as this may even suspend the GC to disallow the JVM to move the arrays around.
    
    See also http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/functions.html#GetPrimitiveArrayCritical
    
    Modification:
    
    Make use of GetPrimitiveArrayCritical / ReleasePrimitiveArrayCritical as replacement for Get*ArrayElement / Release*ArrayElement where possible.
    
    Result:
    
    Better performance due less memory copies.

commit 695fbc91405412ce19eb5728acb2e8962dc8390c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 21 06:43:49 2014 +0200

    [#2684] EpollSocketChannel gathering writes should take fast-path if possible
    
    Motivation:
    
    In EpollSocketchannel.writeBytesMultiple(...) we loop over all buffers to see if we need to adjust the readerIndex for incomplete writes. We can skip this if we know that everything was written (a.k.a complete write).
    
    Modification:
    
    Use fast-path if all bytes are written and so no need to loop over buffers
    
    Result:
    
    Fast write path for the average use.

commit 9939c00541193977b599b4837bc28045f1326f69
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 21 06:27:30 2014 +0200

    Use the correct memoryAddress size when do a gathering write. Part of [#2680]

commit faf9ac9a30d10ad9406a6020d860d017ef5dd28c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jul 20 19:57:01 2014 +0200

    [#2680] NioSocketChannelOutboundBuffer.nioBuffers() / EpollSocketChannelOutboundBuffer.memoryAddresses() should always return non-null array as stated in javadocs
    
    Motivation:
    
    At the moment NioSocketChannelOutboundBuffer.nioBuffers() / EpollSocketChannelOutboundBuffer.memoryAddresses() returns null if something is contained in the ChannelOutboundBuffer which is not a ByteBuf. This is a problem for two reasons:
      1 - In the javadocs we state that it will never return null
      2 - We may do a not optimal write as there may be things that could be written via gathering writes
    
    Modifications:
    
    Change NioSocketChannelOutboundBuffer.nioBuffers() /  EpollSocketChannelOutboundBuffer.memoryAddresses() to never return null but have it contain all ByteBuffer that were found before the non ByteBuf. This way we can do a gathering write and also conform to the javadocs.
    
    Result:
    
    Better speed and also correct implementation in terms of the api.

commit 702ebbc19b6c1c7a95e06ba1abd8a62cc48e6907
Author: Adam <Adam@sigterm.info>
Date:   Sun Jul 20 05:24:18 2014 -0400

    Don't spin from malformed dns packets containing loops
    
    Motivation:
    
    DNS packets that contain pointers in a loop will cause
    DnsResponseDecoder.readName() to infinite loop.
    
    Modifications:
    
    Fixed DnsResponseDecoder.readName() to detect when packets have loops
    and return null instead.
    
    Result:
    
    It is no longer possible to cause Netty to infinite loop by sending it malformed
    DNS packets with a loop.

commit b83df4c6b36557d0fa666956b659b7c5d941098f
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Sat Jul 19 21:51:19 2014 +0400

    Fix NPE problems
    
    Motivation:
    
    Now Netty has a few problems with null values.
    
    Modifications:
    
    - Check HAProxyProxiedProtocol in HAProxyMessage constructor and throw NPE if it is null.
    If HAProxyProxiedProtocol is null we will set AddressFamily as null. So we will get NPE inside checkAddress(String, AddressFamily) and it won't be easy to understand why addrFamily is null.
    - Check File in DiskFileUpload.toString().
    If File is null we will get NPE when calling toString() method.
    - Check Result<String> in MqttDecoder.decodeConnectionPayload(...).
    If !mqttConnectVariableHeader.isWillFlag() || !mqttConnectVariableHeader.hasUserName() || !mqttConnectVariableHeader.hasPassword() we will get NPE when we will try to create new instance of MqttConnectPayload.
    - Check Unsafe before calling unsafe.getClass() in PlatformDependent0 static block.
    - Removed unnecessary null check in WebSocket08FrameEncoder.encode(...).
    Because msg.content() can not return null.
    - Removed unnecessary null check in DefaultStompFrame(StompCommand) constructor.
    Because we have this check in the super class.
    - Removed unnecessary null checks in ConcurrentHashMapV8.removeTreeNode(TreeNode<K,V>).
    - Removed unnecessary null check in OioDatagramChannel.doReadMessages(List<Object>).
    Because tmpPacket.getSocketAddress() always returns new SocketAddress instance.
    - Removed unnecessary null check in OioServerSocketChannel.doReadMessages(List<Object>).
    Because socket.accept() always returns new Socket instance.
    - Pass Unpooled.buffer(0) instead of null inside CloseWebSocketFrame(boolean, int) constructor.
    If we will pass null we will get NPE in super class constructor.
    - Added throw new IllegalStateException in GlobalEventExecutor.awaitInactivity(long, TimeUnit) if it will be called before GlobalEventExecutor.execute(Runnable).
    Because now we will get NPE. IllegalStateException will be better in this case.
    - Fixed null check in OpenSslServerContext.setTicketKeys(byte[]).
    Now we throw new NPE if byte[] is not null.
    
    Result:
    
    Added new null checks when it is necessary, removed unnecessary null checks and fixed some NPE problems.

commit dd429b249504b8f7c3caa3bcd417696839c6d328
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Sun Jul 20 00:40:45 2014 +0400

    Small fixes and improvements
    
    Motivation:
    
    Fix some typos in Netty.
    
    Modifications:
    
    - Fix potentially dangerous use of non-short-circuit logic in Recycler.transfer(Stack<?>).
    - Removed double 'the the' in javadoc of EmbeddedChannel.
    - Write to log an exception message if we can not get SOMAXCONN in the NetUtil's static block.

commit dc9d933d7419a0513f1bc84bd3faae47391d7a48
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Sat Jul 19 15:55:15 2014 +0400

    Fixes for compression codecs
    
    Motivation:
    
    Fixed founded mistakes in compression codecs.
    
    Modifications:
    
    - Changed return type of ZlibUtil.inflaterException() from CompressionException to DecompressionException
    - Updated @throws in javadoc of JZlibDecoder to throw DecompressionException instead of CompressionException
    - Fixed JdkZlibDecoder to throw DecompressionException instead of CompressionException
    - Removed unnecessary empty lines in JdkZlibEncoder and JZlibEncoder
    - Removed public modifier from Snappy class
    - Added MAX_UNCOMPRESSED_DATA_SIZE constant in SnappyFramedDecoder
    - Used in.readableBytes() instead of (in.writerIndex() - in.readerIndex()) in SnappyFramedDecoder
    - Added private modifier for enum ChunkType in SnappyFramedDecoder
    - Fixed potential bug (sum overflow) in Bzip2HuffmanAllocator.first(). For more info, see http://googleresearch.blogspot.ru/2006/06/extra-extra-read-all-about-it-nearly.html
    
    Result:
    
    Fixed sum overflow in Bzip2HuffmanAllocator, improved exceptions in ZlibDecoder implementations, hid Snappy class

commit ad1389be9d808b637aa10889a29aad0eb7c55ea0
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Sat Jul 19 16:48:54 2014 +0400

    Small performance improvements
    
    Modifications:
    
    - Added a static modifier for CompositeByteBuf.Component.
    This class is an inner class, but does not use its embedded reference to the object which created it. This reference makes the instances of the class larger, and may keep the reference to the creator object alive longer than necessary.
    - Removed unnecessary boxing/unboxing operations in HttpResponseDecoder, RtspResponseDecoder, PerMessageDeflateClientExtensionHandshaker and PerMessageDeflateServerExtensionHandshaker
    A boxed primitive is created from a String, just to extract the unboxed primitive value.
    - Removed unnecessary 3 times calculations in DiskAttribute.addContent(...).
    - Removed unnecessary checks if file exists before call mkdirs() in NativeLibraryLoader and PlatformDependent.
    Because the method mkdirs() has this check inside.
    - Removed unnecessary `instanceof AsciiString` check in StompSubframeAggregator.contentLength(StompHeadersSubframe) and StompSubframeDecoder.getContentLength(StompHeaders, long).
    Because StompHeaders.get(CharSequence) always returns java.lang.String.

commit 0cc3eccc2b5c6bb5f81e12ac6929e563fc3e5506
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Sun Jul 20 00:02:03 2014 +0400

    Close ObjectInputStream in ObjectDecoder.decode(...)
    
    Motivation:
    
    We create a new CompactObjectInputStream with ByteBufInputStream in ObjectDecoder.decode(...) method and don't close this InputStreams before return statement.
    
    Modifications:
    
    Save link to the ObjectInputStream and close it before return statement.
    
    Result:
    
    Close InputStreams and clean up unused resources. It will be better for GC.

commit 53141b04a87261de2b5f79b3bfdb9d27e3eed90e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Jul 19 14:41:18 2014 +0200

    Fix buffer leak in Bzip2EncoderTest

commit aa66f556e54be58654f0dea387f48cab1a2b263f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 18 20:31:19 2014 +0200

    [#2667] Write until EAGAIN in native transport and only call setEpollOut() in this case
    
    Motivation:
    
    In the previous fix for #2667 I did introduce a bit overhead by calling setEpollOut() too often.
    
    Modification:
    
    Only call setEpollOut() if really needed and remove unused code.
    
    Result:
    
    Less overhead when saturate network.

commit 7e615387905fab9a3350b91a4cb4e8adf8e6d656
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 18 12:35:18 2014 +0200

    [#2665] Continue writing on IOException when using DatagramChannel
    
    Motivation:
    
    As a DatagramChannel supports to write to multiple remote peers we must not close the Channel once a IOException accours as this error may be only valid for one remote peer.
    
    Modification:
    
    Continue writing on IOException.
    
    Result:
    
    DatagramChannel can be used even after an IOException accours during writing.

commit 14096d85cdf1db78bbd65d65b33dcf5476c670f3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 18 09:40:15 2014 +0200

    [#2667] Write until EAGAIN in native transport
    
    Motivation:
    
    We need to continue write until we hit EAGAIN to make sure we not see an starvation
    
    Modification:
    
    Write until EAGAIN is returned
    
    Result:
    
    No starvation when using native transport with ET.

commit 89593a719bee31b54efd7f18734258d0d8a8a423
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 18 07:08:30 2014 +0200

    [#2666] Fix possible NPE when try to fullfill connect ChannelPromise
    
    Motivation:
    
    Because of a missing return statement we may produce a NPE when try to fullfill the connect ChannelPromise when it was fullfilled before.
    
    Modification:
    
    Add missing return statement.
    
    Result:
    
    No more NPE.

commit 4db6c655349df5581332dac5059a67f087756158
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 17 16:00:53 2014 +0200

     [#2647] Handle IOV_MAX in java code
    
    Motivation:
    
    The handling of IOV_MAX was done in JNI code base which makes stuff really complicated to maintain etc.
    
    Modifications:
    
    Move handling of IOV_MAX to java code to simplify stuff
    
    Result:
    
    Cleaner code.

commit 89261fd8df9b4bfab949c5e23cfcdb523f43914e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 17 13:07:47 2014 +0200

    [#2664] Support write-spinning also in native transport
    
    Motivation:
    
    In our nio implementation we use write-spinning for maximize throughput, but in the native implementation this is not used.
    
    Modification:
    
    Respect writeSpinCount in native transport.
    
    Result:
    
    Better throughput

commit ed7240b597adfb1c0851a6e988bba6fdd68ae202
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Thu Jul 17 14:36:00 2014 +0400

    Implemented a Bzip2Encoder
    
    Motivation:
    
    Bzip2Encoder provides sending data compressed in bzip2 format.
    
    Modifications:
    
    Added classes:
    - Bzip2Encoder
    - Bzip2BitWriter
    - Bzip2BlockCompressor
    - Bzip2DivSufSort
    - Bzip2HuffmanAllocator
    - Bzip2HuffmanStageEncoder
    - Bzip2MTFAndRLE2StageEncoder
    - Bzip2EncoderTest
    
    Modified classes:
    - Bzip2Constants (splited BLOCK_HEADER_MAGIC and END_OF_STREAM_MAGIC)
    - Bzip2Decoder (use splited magic numbers)
    
    Added integration tests for Bzip2Encoder/Decoder
    
    Result:
    
    Implemented new encoder which can compress outgoing data in bzip2 format.

commit 3c6017a9b1237eba5d79caca03b90efadedf2540
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Mon Jul 14 23:10:30 2014 +0400

    Implemented LZF compression codec
    
    Motivation:
    
    LZF compression codec provides sending and receiving data encoded by very fast LZF algorithm.
    
    Modifications:
    
    - Added Compress-LZF library which implements LZF algorithm
    - Implemented LzfEncoder which extends MessageToByteEncoder and provides compression of outgoing messages
    - Added tests to verify the LzfEncoder and how it can compress data for the next uncompression using the original library
    - Implemented LzfDecoder which extends ByteToMessageDecoder and provides uncompression of incoming messages
    - Added tests to verify the LzfDecoder and how it can uncompress data after compression using the original library
    - Added integration tests for LzfEncoder/Decoder
    
    Result:
    
    Full LZF compression codec which can compress/uncompress data using LZF algorithm.

commit 7d8d9b2c6e07e7f0b7356dd96170572ac0412d0d
Author: Gernot Pansy <gernot.pansy@ut11.net>
Date:   Wed Jul 16 13:39:03 2014 +0200

    Fixed NPE in WebSocket00FrameDecoder if end couldn't be found in text frame
    
    Motivation:
    When we receive an incomplete WebSocketFrame we need to make sure to wait for more data. Because we not did this we could produce a NPE.
    
    Modification:
    Make sure we not try to add null into the RecyclableArrayList
    
    Result:
    no more NPE on incomplete frames.

commit f88dfd043030fd7ef68cd02d71894127cea35eab
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 14 21:02:07 2014 +0200

    [#2653] Remove unnecessary ensureAccessible() calls
    
    Motivation:
    
    I introduced ensureAccessible() class as part of 6c47cc97111146396d2daf1a97051135d2eaf69e in some places. Unfortunally I also added some where these are not needed and so caused a performance regression.
    
    Modification:
    
    Remove calls where not needed.
    
    Result:
    
    Fixed performance regression.

commit 93c306602abff12145a0036bbc1b504c864782f5
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 14 11:40:27 2014 +0200

    [#2653] Remove uncessary range checks for performance reasons
    
    Motivation:
    
    I introduced range checks as part of 6c47cc97111146396d2daf1a97051135d2eaf69e in some places. Unfortunally I also added some where these are not needed and so caused a performance regression.
    
    Modification:
    
    Remove range checks where not needed
    
    Result:
    
    Fixed performance regression.

commit c75783abb5aa3419039c1736bfbd150431f15eb3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jul 13 17:19:15 2014 +0200

    Fix over-sensible testcase

commit 8b0bc7f33dc4a303916a08f414cb5815b3912181
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 11 13:41:03 2014 +0000

    [#2651] Fix possible infinite-loop when cancel tasks
    
    Motivations:
    In our new version of HWT we used some kind of lazy cancelation of timeouts by put them back in the queue and let them pick up on the next tick. This  multiple problems:
     - we may corrupt the MpscLinkedQueue if the task is used as tombstone
     - this sometimes lead to an uncessary delay especially when someone did executed some "heavy" logic in the TimeTask
    
    Modifications:
    Use a Lock per HashedWheelBucket for save and fast removal.
    
    Modifications:
    Cancellation of tasks can be done fast and so stuff can be GC'ed and no more infinite-loop possible

commit 8edfde3f26fe6b52aa4b899ece870bcba730a0e6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 11 08:31:39 2014 +0200

    [#2650] Allow to disable http header validation in SpdyHttpDecoder and SpdyHttpCodec
    
    Motivation:
    
    HTTP header validation can be expensive so we should allow to disable it like we do in HttpObjectDecoder.
    
    Modification:
    
    Add constructor argument to disable validation.
    
    Result:
    Performance improvement

commit 909d1f2c0f746d288ddbd9bcdd10d7390e5d3f2a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 4 11:48:23 2014 +0200

    Reuse previous created HttpHeaders by HttpObjectAggregator
    
    Motivation:
    
    HttpObjectAggregator currently creates a new FullHttpResponse / FullHttpRequest for each message it needs to aggregate. While doing so it also creates 2 DefaultHttpHeader instances (one for the headers and one for the trailing headers). This is bad for two reasons:
      - More objects are created then needed and also populate the headers is not for free
      - Headers may get validated even if the validation was disabled in the decoder
    
    Modification:
    
    - Wrap the previous created HttpResponse / HttpRequest and so reuse the original HttpHeaders
    - Reuse the previous created trailing HttpHeader.
    - Fix a bug where the trailing HttpHeader was incorrectly mixed in the headers.
    
    Result:
    
    - Less GC
    - Faster HttpObjectAggregator implementation

commit 81126ab42973bcb53b71621d750b600fe0bdaa64
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 10 07:12:21 2014 +0200

    Fix checkstyle error introduced by 52cb55d3887034df778575799fdd00f174495809

commit 17280116c48b91c2dd8988d625f749318150de3b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 10 06:53:51 2014 +0200

    [#2643] Throw TooLongFrameException instead of using fireExceptionCaught
    
    Motivation:
    
    It's not always the case that there is another handler in the pipeline that will intercept the exceptionCaught event because sometimes users just sub-class. In this case the exception will just hit the end of the pipeline.
    
    Modification:
    Throw the TooLongFrameException so that sub-classes can handle it in the exceptionCaught(...) method directly.
    
    Result:
    Sub-classes can correctly handle the exception,

commit deda8f15a20e6836f62c6a1f7ac1371ac722003c
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Sun Jul 6 23:23:21 2014 +0400

    Moved bit-level read operations from Bzip2Decoder to the new Bzip2BitReader
    
    Motivation:
    
    Collect all bit-level read operations in one class is better. And now it's easy to use not only in Bzip2Decoder. For example, in Bzip2HuffmanStageDecoder.
    
    Modifications:
    
    Created a new class - Bzip2BitReader which provides bit-level reads.
    Removed bit-level read operations from Bzip2Decoder.
    Improved javadoc.
    
    Result:
    
    Bzip2BitReader allows the reading of single bit booleans, bit strings of arbitrary length (up to 24 bits), and bit aligned 32-bit integers.

commit 62bbd4220a977e02d8c2d16dcf7a3eb1954a2861
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 9 13:34:15 2014 +0200

    Fix JVM segfault during JNI call. Part of [#2647]
    
    Motivation:
    Currently when Native.writev(...) is used it is possible to see a JVM segfault because the offset is updated to early.
    
    Modification:
    Only update the offset once it is safe to do so.
    
    Result:
    No more segfault

commit fb22d3492542e33e6e380ceb8d862cfbb8f753a3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 9 12:18:48 2014 +0200

    [#2647] Respect IOV_MAX when call writev in native transport
    
    Motivation:
    
    epoll transport fails on gathering write of more then 1024 buffers. As linux supports max. 1024 iov entries when calling writev(...) the epoll transport throws an exception.
    
    Thanks again to @blucas to provide me with a reproducer and so helped me to understand what the issue is.
    
    Modifications:
    
    Make sure we break down the writes if to many buffers are uses for gathering writes.
    
    Result:
    
    Gathering writes work with any number of buffers

commit ac8ac591488b976aba5ebe7a1bbfb24f5e1ecc09
Author: Brendt Lucas <brendt@idnet.com>
Date:   Tue Jul 8 18:31:37 2014 +0100

    [#2642] CompositeByteBuf.deallocate memory/GC improvement
    
    Motivation:
    
    CompositeByteBuf.deallocate generates unnecessary GC pressure when using the 'foreach' loop, as a 'foreach' loop creates an iterator when looping.
    
    Modification:
    
    Convert 'foreach' loop into regular 'for' loop.
    
    Result:
    
    Less GC pressure (and possibly more throughput) as the 'for' loop does not create an iterator

commit 33a810a513dc5d69ec171adb1c84378524e066e3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 7 09:34:33 2014 +0200

    Move generic code to HttpOrSpdyChooser to simplify implementations
    
    Motivation:
    
    HttpOrSpdyChooser can be simplified so the user not need to implement getProtocol(...) method.
    
    Modification:
    
    Add implementation for the method. The user can override it if necessary.
    
    Result:
    
    Easier usage of HttpOrSpdyChooser.

commit 0fe2824729ee744f95ca18d6aa799919c4d0d17b
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jul 6 16:52:20 2014 +0900

    Add missing m2eclipse life cycle mapping
    
    Also, use ignore instead of execution because those plugins are not
    really useful when building from Eclipse anyway.

commit e167b02d5285f03799f9021e5f064555116df724
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 4 17:26:02 2014 +0900

    [maven-release-plugin] prepare for next development iteration

commit ba50cb829bb2a2dbbb88d80559f7ce0b1f6cb762
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 4 17:25:54 2014 +0900

    [maven-release-plugin] prepare release netty-4.1.0.Beta1

commit 787663a64447e8e1622e41d12397c72bb827fc9f
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 4 17:11:14 2014 +0900

    [maven-release-plugin] rollback the release of netty-4.1.0.Beta1

commit 83eae705e134fca28c82f0326de5b7b56c160d56
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 4 17:02:17 2014 +0900

    [maven-release-plugin] prepare release netty-4.1.0.Beta1

commit 97825598d2fd0df54f0686d6577a162e7f044b80
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 4 16:11:38 2014 +0900

    Fix another buffer leaks in JsonObjectDecoderTest

commit 5b87cdc8bdbeea22b6c5a39e8454a9c46c3c6665
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 4 14:14:37 2014 +0900

    Reduce the perceived time taken to retrieve initialSeedUniquifier
    
    Motivation:
    
    When system is in short of entrophy, the initialization of
    ThreadLocalRandom can take at most 3 seconds.  The initialization occurs
    when ThreadLocalRandom.current() is invoked first time, which might be
    much later than the moment when the application has started.  If we
    start the initialization of ThreadLocalRandom as early as possible, we
    can reduce the perceived time taken for the retrieval.
    
    Modification:
    
    Begin the initialization of ThreadLocalRandom in InternalLoggerFactory,
    potentially one of the firstly initialized class in a Netty application.
    
    Make DefaultChannelId retrieve the current process ID before retrieving
    the current machine ID, because retrieval of a machine ID is more likely
    to use ThreadLocalRandom.current().
    
    Use a dummy channel ID for EmbeddedChannel, which prevents many unit
    tests from creating a ThreadLocalRandom instance.
    
    Result:
    
    We gain extra 100ms at minimum for initialSeedUniquifier generation.  If
    an application has its own initialization that takes long enough time
    and generates good amount of entrophy, it is very likely that we will
    gain a lot more.

commit 11fdec3c4a740a84796f2b78ac302c87044a4080
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 4 13:25:26 2014 +0900

    Log the time taken for generating the initialSeedUniquifier
    
    - Sometimes useful to know it how long it takes from the log, to make
      sure it's not something else that is blocking.

commit cde7157c3998cf6e7d773c861cd0d6b2a406da32
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 4 11:13:35 2014 +0900

    Make JsonObjectDecoder discard everything after stream corruption
    
    Motivation:
    
    There's no way to recover from a corrupted JSON stream. The current
    implementation will raise an infinite exception storm when a peer sends
    a large corrupted stream.
    
    Modification:
    
    Discard everything once stream corruption is detected.
    
    Result:
    
    Fixes a buffer leak
    Fixes exception storm

commit f8c95c3827bd88f51dfb5fd717930c33716c5c7c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 3 21:24:15 2014 +0200

    [#2586] Use correct EventLoop to notify delayed bind failures
    
    Motivation:
    
    When a bind fails AbstractBootstrap will use the GlobalEventExecutor to notify the ChannelPromise. We should use the EventLoop of the Channel if possible.
    
    Modification:
    
    Use EventLoop of the Channel if possible to use the correct Thread to notify and so guaranteer the right order of events.
    
    Result:
    
    Use the correct EventLoop for notification

commit 217fb0de055258b70e540d139ae945db94ee8390
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 2 10:39:34 2014 +0200

    [#2618] Introduce ChannelPromise.unvoid() and ChannelFuture.isVoid()
    
    Motivation:
    
    There is no way for a ChannelHandler to check if the passed in ChannelPromise for a write(...) call is a VoidChannelPromise. This is a problem as some handlers need to add listeners to the ChannelPromise which is not possible in the case of a VoidChannelPromise.
    
    Modification:
    
    - Introduce ChannelFuture.isVoid() which will return true if it is not possible to add listeners or wait on the result.
    - Add ChannelPromise.unvoid() which allows to create a ChannelFuture out of a void ChannelFuture which supports all the operations.
    
    Result:
    
    It's now easy to write ChannelHandler implementations which also works when a void ChannelPromise is used.

commit a1974ef35bbf01733a99c81d52fbeeb2709de073
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 3 20:01:23 2014 +0900

    Fix an inspector warning in JsonObjectDecoder

commit d0b355b26e51d517db77172668b7c050e27c736f
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 3 19:58:06 2014 +0900

    Fix a buffer leak in JsonObjectDecoderTest

commit aed13ba5ef908397071a8d23c63c13357145efa4
Author: Jakob Buchgraber <jakob.buchgraber@tum.de>
Date:   Thu Jun 5 03:00:50 2014 +0200

    Split a JSON byte stream into JSON objects/arrays. Fixes #2536
    
    Motivation:
    
    See GitHub Issue #2536.
    
    Modifications:
    
    Introduce the class JsonObjectDecoder to split a JSON byte stream
    into individual JSON objets/arrays.
    
    Result:
    
    A Netty application can now handle a byte stream where multiple JSON
    documents follow eachother as opposed to only a single JSON document
    per request.

commit 10623ae1332ed7bdd8e10e55f6166e5af2da515b
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 3 18:13:03 2014 +0900

    Let OkResponseHandler extend SimpleChannelInboundHandler
    
    Motivation:
    
    OkResponseHandler is the last handler in the pipeline of the HTTP CORS
    example.  It is responsible for releasing all messages it handled.
    
    Modification:
    
    Extend SimpleChannelInboundHandler instead of
    ChannelInboundHandlerAdapter
    
    Result:
    
    Fixed a leak

commit fbf1bdbef15a21aa31b01119003190a55e88eb6b
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 3 17:51:15 2014 +0900

    Fix the build timeout when 'leak' profile is active
    
    Motivation:
    
    AbstractByteBufTest.testInternalBuffer() uses writeByte() operations to
    populate the sample data.  Usually, this isn't a problem, but it starts
    to take a lot of time when the resource leak detection level gets
    higher.
    
    In our CI machine, testInternalBuffer() takes more than 30 minutes,
    causing the build timeout when the 'leak' profile is active (paranoid
    level resource detection.)
    
    Modification:
    
    Populate the sample data using ThreadLocalRandom.nextBytes() instead of
    using millions of writeByte() operations.
    
    Result:
    
    Test runs much faster when leak detection level is high.

commit 3c6bc0b4cbb1f5c87ee70186c3ed85e714c2f585
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jul 2 20:27:06 2014 +0900

    Fix unclean backport in InternalLoggerFactory
    
    .. which leaked in from d0912f27091e4548466df81f545c017a25c9d256

commit d0912f27091e4548466df81f545c017a25c9d256
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jul 2 19:04:11 2014 +0900

    Fix most inspector warnings
    
    Motivation:
    
    It's good to minimize potentially broken windows.
    
    Modifications:
    
    Fix most inspector warnings from our profile
    Update IntObjectHashMap
    
    Result:
    
    Cleaner code

commit 7a05a617f6a68875b4ab56db0012086151684685
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 2 09:36:58 2014 +0200

    [#2558] Define SO_REUSEPORT if not defined
    
    Motivation:
    
    Currently it is impossible to build netty on linux system that not define SO_REUSEPORT even if it is supported.
    
    Modification:
    
    Define SO_REUSEPORT if not defined.
    
    Result:
    
    Possible to build on more linux dists.

commit 36b80c25f76b766a823198d35e944842dcdb1714
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 2 07:07:38 2014 +0200

    Correctly return from selector loop one a scheduled task is ready for processing
    
    Motivation:
    
    We use the nanoTime of the scheduledTasks to calculate the milli-seconds to wait for a select operation to select something. Once these elapsed we check if there was something selected or some task is ready for processing. Unfortunally we not take into account scheduled tasks here so the selection loop will continue if only scheduled tasks are ready for processing. This will delay the execution of these tasks.
    
    Modification:
    
    - Check if a scheduled task is ready after selecting
    - also make a tiny change in NioEventLoop to not trigger a rebuild if nothing was selected because the timeout was reached a few times in a row.
    
    Result:
    
    Execute scheduled tasks on time.

commit 23840b76d7ffc29f6a5e9fac83d0d654b8fc1b68
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jun 30 09:22:58 2014 +0200

    [#2623] Release local references to guard against StackOverflow in JNI
    
    Motivation:
    
    When we do a (env*)->GetObjectArrayElement(...) call we may created many local references which will only be cleaned up once we exist the native method. Thus a lot of memory can be used and so a StackOverFlow may be triggered. Beside this the JNI specification only say that an implementation must cope with 16 local references.
    
    Modification:
    
    Call (env*)->ReleaseLocalRef(...) to release the resource once not needed anymore.
    
    Result:
    
    Less memory usage and guard against StackOverflow

commit 9594a81b958cb22bc51d9e766477faa12e7a2d0d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jun 30 07:10:12 2014 +0200

    [#2622] Correctly check reference count before try to work on the underlying memory
    
    Motivation:
    
    Because of how we use reference counting we need to check for the reference count before each operation that touches the underlying memory. This is especially true as we use sun.misc.Cleaner.clean() to release the memory ASAP when possible. Because of this the user may cause a SEGFAULT if an operation is called that tries to access the backing memory after it was released.
    
    Modification:
    
    Correctly check the reference count on all methods that access the underlying memory or expose it via a ByteBuffer.
    
    Result:
    
    Safer usage of ByteBuf

commit 461d3c876f27c32eaa673f0d2073de0922ca4277
Author: Jay <github@heinousjay.com>
Date:   Sat Jun 28 00:27:21 2014 -0400

    Maintain decoder result in HttpObjectAggregator
    
    Motivation:
    DecodeResult is dropped when aggregate HTTP messages.
    
    Modification:
    
    Make sure we not drop the DecodeResult while aggregate HTTP messages.
    
    Result:
    
    Correctly include the DecodeResult for later processing.

commit 79195da0d7f6bec950aa148b9bafb69b4a8c0abc
Author: xmxsuperstar <xmxsuperstar@gmail.com>
Date:   Sat Jun 28 22:55:49 2014 +0800

    fix example missing break statement in ReplayingDecoder

commit 2fa0b83e7345709873727ff695c4c2e9f93a7647
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jun 27 21:35:54 2014 +0200

    Cleanup comment / code

commit 776f3aeb3db663c6b0adc4239bec80a8e5f2cffe
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jun 27 17:55:55 2014 +0200

    Let EpollReuseAddrTest also work with kernel versions that not have bugfix release part

commit 8bf8252060fdc04b7dcf147140154db87a51c8bd
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jun 27 17:09:27 2014 +0200

    [#2615] Correctly update SelectionKey after selector rebuild
    
    Motivation:
    
    When a select rebuild was triggered the reference to the SelectionKey is not updated in AbstractNioChannel. This will cause a CancelledKeyException later.
    
    Modification:
    
    Correctly update SelectionKey reference after rebuild
    
    Result:
    
    Fix exception

commit cd62f2f21e26f1e0ea2cea764b496cbc0154ffac
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 27 17:23:03 2014 +0900

    Upgrade JACOCO to the latest version
    
    .. to fix the build errors triggered by the old JACOCO release

commit 520479d43bd29f7a6df0d5f4a5d4ace8d10e463c
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 27 17:09:18 2014 +0900

    Enable verbose:gc only when 'leak' profile is disabled
    
    The leak profile generates a lot of garbage which makes the verbose:gc
    output too large.

commit 2c0ecd9d4435f6fedd34829bba3a463fdae0f0af
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 27 16:46:45 2014 +0900

    Remove the deprecated methods in SPDY
    
    SPDY is an experimental package. No need to keep ABI compatibility.

commit 90c65b7157c17816683910156e46cd8ffb186ef9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jun 26 12:48:51 2014 +0200

    [#2604] Not try to use sun.misc.Cleaner when on android
    
    Motivation:
    
    When a user tries to use netty on android it currently fails with "Could not find class 'sun.misc.Cleaner'"
    
    Modification:
    
    Encapsulate sun.misc.Cleaner usage in extra class to workaround this isssue.
    
    Result:
    Netty can be used on android again

commit c4441642bb26647afd64f9011644c4b904b03505
Author: Zhihui Jiao <zhihui.jiao@gmail.com>
Date:   Fri Jun 27 10:15:59 2014 +0800

    Fix inconsistent code in the doc

commit 76cd3a37e5ea33c7d79d6aa6dace5167bd60f8a0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jun 26 12:20:47 2014 +0200

    [#2598] Add Epoll.isAvailable() which allows to check if epoll can be used.
    
    Motivation:
    
    At the moment there is no simple way for a user to check if the native epoll transport can be used on the running platform. Thus the user can only try to instance it and catch any exception and fallback to nio transport.
    
    Modification:
    
    Add Epoll.isAvailable() which allows to check if epoll can be used.
    
    Result:
    
    User can easily check if epoll transport can be used or not

commit b0e5c9be009bf4b481144432b711e167d16ebc8b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jun 26 11:53:23 2014 +0200

    [#2605] Use SO_REUSEADDR on EpollServerSocketChannel to match defaults of java.nio.ServerSocketChannel impl
    
    Motivation:
    
    When using openjdk and oracle jdk's nio (while using the nio transport) the ServerSocketChannel uses SO_REUSEADDR by default. Our native transport should do the same to make it easier to switch between the different implementations and get the expected result.
    
    Modification:
    
    Change EpollServerSocketChannelConfig to set SO_REUSEADDR on the created socket.
    
    Result:
    
    SO_REUSEADDR is used by default on servers.

commit d2e385acc2afe12f50dafd66385f63c4c6316e83
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 26 18:53:50 2014 +0900

    Fix incorrect bytesBefore/indexOf() in ReplayingDecoderBuffer
    
    Motivation:
    
    bytesBefore(length, ...), bytesBefore(index, length, ...), and
    indexOf(fromIndex, toIndex,...) in ReplayingDecoderBuffer are buggy.
    They trigger 'REPLAY even when they don't need to.
    
    Modification:
    
    Implement the buggy methods properly so that REPLAYs are not triggered
    unnecessarily.
    
    Result:
    
    Correct behvaior

commit 4d2b78ca3cd0ffe43340fe4c4cc98b6c8f24328f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jun 26 10:57:27 2014 +0200

    Reduce the memory copies in JdkZlibEncoder
    
    Motivation:
    
    At the moment we use a lot of unnecessary memory copies in JdkZlibEncoder. This is caused by either allocate a to small ByteBuf and expand it later or using a temporary byte array.
    Beside this the memory footprint of JdkZlibEncoder is pretty high because of the byte[] used for compressing.
    
    Modification:
    
    - Override allocateBuffer(...) and calculate the estimatedsize in there, this reduce expanding of the ByteBuf later
    - Not use byte[] in the instance itself but allocate a heap ByteBuf and write directly into the byte array
    
    Result:
    
    Less memory copies and smaller memory footprint

commit 937f790f7098da5eea31b9856cf0bfb92d4bb95e
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 26 17:48:11 2014 +0900

    Checkstyle

commit 5f889d92a14ab6ddb80903988b92c19766215737
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 26 17:45:41 2014 +0900

    Fix buffer leaks in Bzip2Decoder(Test)
    
    If decompression fails, the buffer that contains the decompressed data
    is not released.  Bzip2DecoderTest.testStreamCrcError() also does not
    release the partial output Bzip2Decoder produces.

commit c0462c0c3bdd7d802dd220e0c830e2caa87989e6
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 26 17:00:52 2014 +0900

    Optimize PoolChunk
    
    - Using short[] for memoryMap did not improve performance. Reverting
      back to the original dual-byte[] structure in favor of simplicity.
    - Optimize allocateRun() which yields small performence improvement
    - Use local variable when member fields are accessed more than once

commit dbc011c3f40c093057dfb9fd1cedf4bc783bd250
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 26 16:08:48 2014 +0900

    Fix inspector warnings

commit 69a6ad940a88005f83dfff86f0b1eea6d567a190
Author: Pavan Kumar <pavanka@fb.com>
Date:   Wed Jun 18 19:57:20 2014 -0700

    Improve the allocation algorithm in PoolChunk
    
    Motivation:
    
    Depth-first search is not always efficient for buddy allocation.
    
    Modification:
    
    Employ a new faster search algorithm with different memoryMap layout.
    
    Result:
    
    With thread-local cache disabled, we see a lot of performance
    improvment, especially when the size of the allocation is as small as
    the page size, which had the largest search space previously.

commit 56d732d43995b31d1ec040007efd730fd18aa1ac
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jun 26 09:21:44 2014 +0200

    Fix buffer leaks in Bzip2DecoderTest

commit 31211487e9e27e030646d070f43cc31f3f12f72e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jun 25 20:17:54 2014 +0200

    Use IntObjectMap to replace Map in EpollEventLoop.
    
    Motivation:
    
    We need to map from ints to AbstractEpollChannel in EpollEventLoop but there is no need for box to Integer.
    
    Modification:
    
    Replace Map with IntObjectMap.
    
    Result:
    
    No more auto-boxing needed.

commit 8a75ba35ef0908529bccd85e5c08bdb6f5fb04bc
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jun 25 15:01:57 2014 +0200

    [#2599] Not use sun.nio.ch.DirectBuffer as it not exists on android
    
    Motivation:
    
    During some refactoring we changed PlatformDependend0 to use sun.nio.ch.DirectBuffer for release direct buffers. This broke support for android as the class does not exist there and so an exception is thrown.
    
    Modification:
    
    Use again the fieldoffset to get access to Cleaner for release direct buffers.
    
    Result:
    Netty can be used on android again

commit 4b4f4e619e776e661e439ee6f6f89d4f4e123291
Author: Alexey Parfenov <alepar@gmail.com>
Date:   Sun Jun 15 22:44:09 2014 -0700

    Fix integer overflow in HttpObjectEncoder when handling chunked encoding and FileRegion > Integer.MAX_VALUE
    
    Motivation:
    
    Due to integer overflow bug, writes of FileRegions to http server pipeline (eg like one from HttpStaticFileServer example) with length greater than Integer.MAX_VALUE are ignored in 1/2 of cases (ie no data gets sent to client)
    
    Modification:
    
    Correctly handle chunk sized > Integer.MAX_VALUE
    
    Result:
    
    Be able to use FileRegion > Integer.MAX_VALUE when using chunked encoding.

commit 41d44a8161ac394af674362c149d764121d49ccb
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 24 17:39:46 2014 +0900

    Remove 'get' prefix from all HTTP/SPDY messages
    
    Motivation:
    
    Persuit for the consistency in method naming
    
    Modifications:
    
    - Remove the 'get' prefix from all HTTP/SPDY message classes
    - Fix some inspector warnings
    
    Result:
    
    Consistency

commit 5275f37ffb942b5ccd8cedef009822cf9cf7b486
Author: onlychoice <jzhihui521@gmail.com>
Date:   Tue Jun 24 16:40:35 2014 +0800

    Fix a typo in comment

commit 030bcaae816ea070b630e8d46990495adb57ae79
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jun 13 11:56:35 2014 +0200

    Improve performance of Recycler
    
    Motivation:
    
    Recycler is used in many places to reduce GC-pressure but is still not as fast as possible because of the internal datastructures used.
    
    Modification:
    
     - Rewrite Recycler to use a WeakOrderQueue which makes minimal guaranteer about order and visibility for max performance.
     - Recycling of the same object multiple times without acquire it will fail.
     - Introduce a RecyclableMpscLinkedQueueNode which can be used for MpscLinkedQueueNodes that use Recycler
    
    These changes are based on @belliottsmith 's work that was part of #2504.
    
    Result:
    
    Huge increase in performance.
    
    4.0 branch without this commit:
    
    Benchmark                                                (size)   Mode   Samples        Score  Score error    Units
    i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    00000  thrpt        20 116026994.130  2763381.305    ops/s
    i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    00256  thrpt        20 110823170.627  3007221.464    ops/s
    i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    01024  thrpt        20 118290272.413  7143962.304    ops/s
    i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    04096  thrpt        20 120560396.523  6483323.228    ops/s
    i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    16384  thrpt        20 114726607.428  2960013.108    ops/s
    i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    65536  thrpt        20 119385917.899  3172913.684    ops/s
    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 297.617 sec - in io.netty.microbench.internal.RecyclableArrayListBenchmark
    
    4.0 branch with this commit:
    
    Benchmark                                                (size)   Mode   Samples        Score  Score error    Units
    i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    00000  thrpt        20 204158855.315  5031432.145    ops/s
    i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    00256  thrpt        20 205179685.861  1934137.841    ops/s
    i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    01024  thrpt        20 209906801.437  8007811.254    ops/s
    i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    04096  thrpt        20 214288320.053  6413126.689    ops/s
    i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    16384  thrpt        20 215940902.649  7837706.133    ops/s
    i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    65536  thrpt        20 211141994.206  5017868.542    ops/s
    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 297.648 sec - in io.netty.microbench.internal.RecyclableArrayListBenchmark

commit bf85af57438b943a0982bc67087a747309fd6730
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 24 16:46:56 2014 +0900

    Fix buffer leaks in Bzip2DecoderTest

commit 448b0105b467ea5821f741be5256352ee8b52a54
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 24 16:40:44 2014 +0900

    Deprecate SocksMessage.encodeAsByteBuf()
    
    It was an internal use only method which became public by a mistake
    during the review process.

commit 45fde9abba8732a0dd18d166d521eb6ac77ccbaa
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 24 16:34:52 2014 +0900

    Rename fromByte() to valueOf()
    
    Motivation:
    
    Persuit the consistency in method naming
    
    Modifications:
    
    Rename fromByte(byte) to valueOf(byte)
    
    Result:
    
    Consistency

commit 33b9bc02ed7f08959c33acfef44323fadc1eb23a
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 24 16:22:53 2014 +0900

    Fix potential buffer leak in AbstractBinaryMemcacheDecoder
    
    If a connection is closed unexpectedly while
    AbstractBinaryMemcacheDecoder decodes a message, the half-constructed
    message's content might not be released.

commit cde319dabd52d39fbcbf94179f31d32b8da27b7b
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 24 16:08:46 2014 +0900

    Adhere to our getter/setter naming rules
    
    Motivation:
    
    Persuit for consistent method naming across all classes
    
    Modifications:
    
    Remove 'get' prefix for the getter methods in codec-memcache
    
    Result:
    
    More consistent method naming

commit 3c21b1cc4343b4a95c59dd197d0a2d50bac6cb83
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 24 15:04:50 2014 +0900

    Fix buffer leak in DefaultFullBinaryMemcacheRequest/Response
    
    Motivation:
    
    DefaultFullBinaryMemcacheRequest/Response overrides release(), retain(),
    and touch() methods without calling its super, resulting in a leak of
    the extras.
    
    Modifications:
    
    When overriding release(), retain(), and touch(), ensure to call super.
    
    Result:
    
    Fixes #2533 by fixing the buffer leak

commit f9021a60611d472dee48573ecf36624102487c00
Author: Idel Pivnitskiy <Idel.Pivnitskiy@gmail.com>
Date:   Tue Jun 17 03:46:34 2014 +0400

    Implement a Bzip2Decoder
    
    Motivation:
    
    Bzip2Decoder provides receiving data compressed in bzip2 format.
    
    Modifications:
    
    Added classes:
    - Bzip2Decoder
    - Bzip2Constants
    - Bzip2BlockDecompressor
    - Bzip2HuffmanStageDecoder
    - Bzip2MoveToFrontTable
    - Bzip2Rand
    - Crc32
    - Bzip2DecoderTest
    
    Result:
    
    Implemented and tested new decoder which can uncompress incoming data in bzip2 format.

commit 12a3e23e4731eb53b88dedb2d9d8139f8b1a588c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jun 23 07:01:05 2014 +0200

    MessageToByteEncoder always starts with ByteBuf that use initalCapacity == 0
    
    Motivation:
    
    MessageToByteEncoder always starts with ByteBuf that use initalCapacity == 0 when preferDirect is used. This is really wasteful in terms of performance as every first write into the buffer will cause an expand of the buffer itself.
    
    Modifications:
    
     - Change ByteBufAllocator.ioBuffer() use the same default initialCapacity as heapBuffer() and directBuffer()
     - Add new allocateBuffer method to MessageToByteEncoder that allow the user to do some smarter allocation based on the message that will be encoded.
    
    Result:
    
    Less expanding of buffer and more flexibilty when allocate the buffer for encoding.

commit 4036eda048e053007a2e4480998267b9a055225f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jun 23 09:38:31 2014 +0200

    Make use of HttpChunkedInput as this will also work when compression is used

commit 37b07a04d404422e42c275f8665f50a8f2122d58
Author: Trustin Lee <t@motd.kr>
Date:   Sat Jun 21 19:18:45 2014 +0900

    Revert "Improve the allocation algorithm in PoolChunk"
    
    This reverts commit 36305d7dcee60bac9d353ba12e044c260435da57, which
    seems to cause an assertion failure on our CI machine.

commit e99f26fe096c115f24a6eac0824853d7c541e55a
Author: Trustin Lee <t@motd.kr>
Date:   Sat Jun 21 18:28:07 2014 +0900

    Make sure OpenSslEngine is tested against transport-native-epoll

commit cdaeb54fb9d957a0e1b84efc27502f5dc4ebd63c
Author: Trustin Lee <t@motd.kr>
Date:   Sat Jun 21 17:59:20 2014 +0900

    Remove padding utility classes
    
    - It's not used anywhere

commit f44720850c6d1459f651b44e098513789273fabb
Author: Trustin Lee <t@motd.kr>
Date:   Sat Jun 21 17:52:40 2014 +0900

    Add missing last padding / Comment

commit a368f9d12a68873241c240f1bf06308c97648d9e
Author: Trustin Lee <t@motd.kr>
Date:   Sat Jun 21 17:46:38 2014 +0900

    Checkstyle / Overall clean-up / Fix serialization

commit 32aab3b0b321be5e050bcbba540c81fd661124c0
Author: nitsanw <nitsanw@yahoo.com>
Date:   Fri Jun 20 13:44:51 2014 +0200

    Fix false sharing between head and tail reference in MpscLinkedQueue
    
    Motivation:
    
    The tail node reference writes (by producer threads) are very likely to
    invalidate the cache line holding the headRef which is read by the
    consumer threads in order to access the padded reference to the head
    node. This is because the resulting layout for the object is:
    
    - header
    - Object AtomicReference.value -> Tail node
    - Object MpscLinkedQueue.headRef -> PaddedRef -> Head node
    
    This is 'passive' false sharing where one thread reads and the other
    writes.  The current implementation suffers from further passive false
    sharing potential from any and all neighbours to the queue object as no
    pre/post padding is provided for the class fields.
    
    Modifications:
    
    Fix the memory layout by adding pre-post padding for the head node and
    putting the tail node reference in the same object.
    
    Result:
    
    Fixed false sharing

commit c65d5b170df2a91735a4ad9e6ccafc45a545d105
Author: Trustin Lee <t@motd.kr>
Date:   Sat Jun 21 17:14:20 2014 +0900

    Mqtt -> MQTT

commit cd8e35e95a859fda654e379250a3dff9f1436b73
Author: Trustin Lee <t@motd.kr>
Date:   Sat Jun 21 17:11:08 2014 +0900

    Fix test failures due to incorrect validation

commit 00d2cea8bad744d15a5daed1e36590308f715ee3
Author: Trustin Lee <t@motd.kr>
Date:   Sat Jun 21 16:46:09 2014 +0900

    Overall clean-up on codec-mqtt
    
    - Use simple string concatenation instead of String.format()
    - Rewrite exception messages so that it follows our style
    - Merge MqttCommonUtil and MqttValidationUtil into MqttCodecUtil
    - Hide MqttCodecUtil from users
    - Rename MqttConnectReturnCode.value to byteValue
    - Rename MqttMessageFactory.create*() to new*()
    - Rename QoS to MqttQoS
    - Make MqttSubAckPayload.grantedQoSLevels immutable and add more useful
      constructor

commit 1ba5fa4b4bdd923d8db7a5adef5f59d4e6d06e61
Author: Mousom Dhar Gupta <meetmousom@gmail.com>
Date:   Wed Apr 16 14:59:09 2014 -0700

    Add MQTT protocol codec
    
    MQTT is a open source protocol on top of TCP which is widely used in
    mobile communication and also for IoT (Internet of Things) today. This
    will add an open source implementation of MQTT so that it becomes easier
    for Netty users to implement an MQTT application.
    
    For more information about the MQTT protocol, read this:
    
    http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html

commit e274a6549c5c6bcedc11d8fd088f621b8d028084
Author: Trustin Lee <t@motd.kr>
Date:   Sat Jun 21 16:03:57 2014 +0900

    Checkstyle

commit 3900d1c6656f617fd029b16ff1767aceaca083bb
Author: Trustin Lee <t@motd.kr>
Date:   Sat Jun 21 13:54:18 2014 +0900

    Overall refactoring of the haproxy codec
    
    - Convert constant classes to enum
    - Rename HAProxyProtocolMessage to HAProxyMessage for simpilicity
    - Rename HAProxyProtocolDecoder to HAProxyMessageDecoder
    - Rename HAProxyProtocolCommand to HAProxyCommand
    - Merge ProxiedProtocolAndFamity, ProxiedAddressFamily, and
      ProxiedTransportProtocol into HAProxiProxiedProtocol and its inner
      enums
    - Overall clean-up

commit 8c25830b0b4d2dc7eb9f0e309bdabf60056151b4
Author: Trustin Lee <t@motd.kr>
Date:   Sat Jun 21 13:48:13 2014 +0900

    Move haproxy codec to a separate module

commit d7b2affe321edeaa51c1fa7bb3df9a5badb4728a
Author: Jon Keys <jon.keys@gmail.com>
Date:   Tue Apr 22 22:25:10 2014 -0400

    Add HAProxy protocol decoder
    
    Motivation:
    
    The proxy protocol provides client connection information for proxied
    network services. Several implementations exist (e.g. Haproxy, Stunnel,
    Stud, Postfix), but the primary motivation for this implementation is to
    support the proxy protocol feature of Amazon Web Services Elastic Load
    Balancing.
    
    Modifications:
    
    This commit adds a proxy protocol decoder for proxy protocol version 1
    as specified at:
    
      http://haproxy.1wt.eu/download/1.5/doc/proxy-protocol.txt
    
    The foundation for version 2 support is also in this commit but it is
    explicitly NOT supported due to a lack of external implementations to
    test against.
    
    Result:
    
    The proxy protocol decoder can be used to send client connection
    information to inbound handlers in a channel pipeline from services
    which support the proxy protocol.

commit 02a6dc8ba79783360d84cc6311e3a5aa03748c30
Author: nmittler <nmittler@gmail.com>
Date:   Tue Jun 10 10:31:55 2014 -0700

    Adding int-to-object map implementation.
    
    Motivation:
    
    Maps with integer keys are used in several places (HTTP/2 code, for
    example). To reduce the memory footprint of these structures, we need a
    specialized map class that uses ints as keys.
    
    Modifications:
    
    Added IntObjectHashMap, which is uses open addressing and double hashing
    for collision resolution.
    
    Result:
    
    A new int-based map class that can be shared across Netty.

commit f67ac5e46df4bcb72d30ed8b92af262709c949e1
Author: Trustin Lee <t@motd.kr>
Date:   Sat Jun 21 13:27:28 2014 +0900

    Fix the inconsistencies between performance tests in ByteBufAllocatorBenchmark
    
    Motivation:
    
    default*() tests are performing a test in a different way, and they must be same with other tests.
    
    Modification:
    
    Make sure default*() tests are same with the others
    
    Result:
    
    Easier to compare default and non-default allocators

commit 6bd8c5d4d0128e645ac63aaa28de130d3ebef27d
Author: Pavan Kumar <pavanka@fb.com>
Date:   Wed Jun 18 19:57:20 2014 -0700

    Improve the allocation algorithm in PoolChunk
    
    Motivation:
    
    Depth-first search is not always efficient for buddy allocation.
    
    Modification:
    
    Employ a new faster search algorithm with different memoryMap layout.
    
    Result:
    
    With thread-local cache disabled, we see a lot of performance
    improvment, especially when the size of the allocation is as small as
    the page size, which had the largest search space previously:
    
    -- master head --
    Benchmark                (size) Mode    Score  Error Units
    pooledDirectAllocAndFree  8192 thrpt  215.392  1.565 ops/ms
    pooledDirectAllocAndFree 16384 thrpt  594.625  2.154 ops/ms
    pooledDirectAllocAndFree 65536 thrpt 1221.520 18.965 ops/ms
    pooledHeapAllocAndFree    8192 thrpt  217.175  1.653 ops/ms
    pooledHeapAllocAndFree   16384 thrpt  587.250 14.827 ops/ms
    pooledHeapAllocAndFree   65536 thrpt 1217.023 44.963 ops/ms
    
    -- changes --
    Benchmark                (size) Mode    Score  Error Units
    pooledDirectAllocAndFree  8192 thrpt 3656.744 94.093 ops/ms
    pooledDirectAllocAndFree 16384 thrpt 4087.152 22.921 ops/ms
    pooledDirectAllocAndFree 65536 thrpt 4058.814 29.276 ops/ms
    pooledHeapAllocAndFree    8192 thrpt 3640.355 44.418 ops/ms
    pooledHeapAllocAndFree   16384 thrpt 4030.206 24.365 ops/ms
    pooledHeapAllocAndFree   65536 thrpt 4103.991 70.991 ops/ms

commit 81e5f1ad4665d3591b512dc3b6392eb547baeb65
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jun 20 20:03:22 2014 +0200

    [#2589] LocalServerChannel.doClose() throws NPE when localAddress == null
    
    Motivation:
    
    LocalServerChannel.doClose() calls LocalChannelRegistry.unregister(localAddress); without check if localAddress is null and so produce a NPE when pass null the used ConcurrentHashMapV8
    
    Modification:
    Check for localAddress != null before try to remove it from Map. Also added a unit test which showed the stacktrace of the error.
    
    Result:
    
    No more NPE during doClose().

commit f05510063ecf567f0b7a1ad598c917c1feb047a7
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jun 20 19:42:08 2014 +0200

    Remove System.out.println(...) debug messages

commit 371f8066d2502f6c6d75c5d0f80cd25e19b5e58b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jun 20 18:19:45 2014 +0200

    [#2580] [#2587] Fix buffer corruption regression when ByteBuf.order(LITTLE_ENDIAN) is used
    
    Motivation:
    
    To improve the speed of ByteBuf with order LITTLE_ENDIAN and where the native order is also LITTLE_ENDIAN (intel) we introduces a new special SwappedByteBuf before in commit 4ad3984c8b725ef59856d174d09d1209d65933fc. Unfortunally the commit has a flaw which does not handle correctly the case when a ByteBuf expands. This was caused because the memoryAddress was cached and never changed again even if the underlying buffer expanded. This can lead to corrupt data or even to SEGFAULT the JVM if you are lucky enough.
    
    Modification:
    
    Always lookup the actual memoryAddress of the wrapped ByteBuf.
    
    Result:
    
    No more data-corruption for ByteBuf with order LITTLE_ENDIAN and no JVM crashes.

commit 3d3ec4753d5191b74125d5a7f065b818d052d84e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jun 20 16:51:28 2014 +0200

    [#2586] Use correct EventLoop to notify delayed successful registration
    
    Motivation:
    
    At the moment AbstractBoostrap.bind(...) will always use the GlobalEventExecutor to notify the returned ChannelFuture if the registration is not done yet. This should only be done if the registration fails later. If it completes successful we should just notify with the EventLoop of the Channel.
    
    Modification:
    
    Use EventLoop of the Channel if possible to use the correct Thread to notify and so guaranteer the right order of events.
    
    Result:
    
    Use the correct EventLoop for notification

commit 085a61a310187052e32b4a0e7ae9700dbe926848
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 17 18:37:58 2014 +0900

    Refactor FastThreadLocal to simplify TLV management
    
    Motivation:
    
    When Netty runs in a managed environment such as web application server,
    Netty needs to provide an explicit way to remove the thread-local
    variables it created to prevent class loader leaks.
    
    FastThreadLocal uses different execution paths for storing a
    thread-local variable depending on the type of the current thread.
    It increases the complexity of thread-local removal.
    
    Modifications:
    
    - Moved FastThreadLocal and FastThreadLocalThread out of the internal
      package so that a user can use it.
    - FastThreadLocal now keeps track of all thread local variables it has
      initialized, and calling FastThreadLocal.removeAll() will remove all
      thread-local variables of the caller thread.
    - Added FastThreadLocal.size() for diagnostics and tests
    - Introduce InternalThreadLocalMap which is a mixture of hard-wired
      thread local variable fields and extensible indexed variables
    - FastThreadLocal now uses InternalThreadLocalMap to implement a
      thread-local variable.
    - Added ThreadDeathWatcher.unwatch() so that PooledByteBufAllocator
      tells it to stop watching when its thread-local cache has been freed
      by FastThreadLocal.removeAll().
    - Added FastThreadLocalTest to ensure that removeAll() works
    - Added microbenchmark for FastThreadLocal and JDK ThreadLocal
    - Upgraded to JMH 0.9
    
    Result:
    
    - A user can remove all thread-local variables Netty created, as long as
      he or she did not exit from the current thread. (Note that there's no
      way to remove a thread-local variable from outside of the thread.)
    - FastThreadLocal exposes more useful operations such as isSet() because
      we always implement a thread local variable via InternalThreadLocalMap
      instead of falling back to JDK ThreadLocal.
    - FastThreadLocalBenchmark shows that this change improves the
      performance of FastThreadLocal even more.

commit 7ee18e92f9fd21009300f4adf0654fe6a82f5a09
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jun 18 14:49:11 2014 +0200

    Small improvement in SimpleChannelInboundHandlerAdapter javadoc

commit 061cb216899f1c091afe81b0906a22e9937096e7
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jun 17 18:02:41 2014 +0200

    Make use of AtomicLongFieldUpdater.addAndGet(...) for cleaner code
    
    Motivation:
    
    The code in ChannelOutboundBuffer can be simplified by using AtomicLongFieldUpdater.addAndGet(...)
    
    Modification:
    
    Replace our manual looping with AtomicLongFieldUpdater.addAndGet(...)
    
    Result:
    
    Cleaner code

commit ad86ec798d20cfd825aebf50cf14b7bb29cfae93
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jun 16 14:12:19 2014 +0200

    Move calculateNewCapacity(...) to ByteBufAllocator
    
    Motivation:
    
    Currently we have the algorithm of calculate the new capacity of a ByteBuf implemented in AbstractByteBuf. The problem with this is that it is impossible for a user to change it if it not fits well it's use-case. We should better move it to ByteBufAllocator and so let the user implement it's own by either write his/her own ByteBufAllocator or just override the default implementation in one of our provided ByteBufAllocators.
    
    Modifications:
    
    Move calculateNewCapacity(...) to ByteBufAllocator and move the implementation (which was part of AbstractByteBuf) to AbstractByteBufAllocator.
    
    Result:
    
    The user can now override the default calculation algorithm when needed.

commit 375da788e7d2d249befe9a439bc1115b5ca4c183
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jun 17 09:26:04 2014 +0200

    [#2577] ChannelOutboundBuffer.addFlush() unnecessary loop through all entries on multiple calls
    
    Motivation:
    
    If ChannelOutboundBuffer.addFlush() is called multiple times and flushed != unflushed it will still loop through all entries that are not flushed yet even if it is not needed anymore as these were marked uncancellable before.
    
    Modifications:
    
    Check if new messages were added since addFlush() was called and only if this was the case loop through all entries and try to mark the uncancellable.
    
    Result:
    
    Less overhead when ChannelOuboundBuffer.addFlush() is called multiple times without new messages been added.

commit 4d60ea2aeb1071bebcd6471b550e6648a9fe05a1
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 17 15:59:11 2014 +0900

    Fix incorrect method signature of awaitInactivity()
    
    - Related: #2084

commit 066f95d0472b9535f398019eb1012f4641dcf65e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jun 16 11:08:47 2014 +0200

    [#2573] UnpooledUnsafeDirectByteBuf.setBytes(int,ByteBuf,int,int) fails to use fast-path when src has array
    
    Motivation:
    
    UnpooledUnsafeDirectByteBuf.setBytes(int,ByteBuf,int,int) fails to use fast-path when src uses an array as backing storage. This is because the if else uses the wrong ByteBuf for its check.
    
    Modifications:
    
    - Use correct ByteBuf when check for array as backing storage
    - Also eliminate unecessary check in UnpooledDirectByteBuf which always fails anyway
    
    Result:
    
    Faster setBytes(...) when src ByteBuf is backed by an array.
    
    No more IndexOutOfBoundsException or data-corruption.

commit 984b0aa961b21845ab92cd2cddab3f2ee354f4f1
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jun 16 10:17:02 2014 +0200

    [#2572] Correctly calculate length of output buffer before inflate to fix IndexOutOfBoundException
    
    Motivation:
    
    JdkZlibDecoder fails to decode because the length of the output buffer is not calculated correctly.
    This can cause an IndexOutOfBoundsException or data-corruption when the PooledByteBuffAllocator is used.
    
    Modifications:
    
    Correctly calculate the length
    
    Result:
    
    No more IndexOutOfBoundsException or data-corruption.

commit a1e3c17eae63711538dde7969794180586e58727
Author: Phil.Baxter <phil.baxter@cyclone-technology.com>
Date:   Fri Jun 13 10:33:56 2014 +0100

    export sun security packages as optional

commit 776ac4ba190b6eeaaadca29438509ba3eb8ec80e
Author: Trustin Lee <t@motd.kr>
Date:   Sat Jun 14 17:45:43 2014 +0900

    Use FastThreadLocal in more places

commit c076c3390145c1a71d481b44278850d3c11ec88b
Author: Trustin Lee <t@motd.kr>
Date:   Sat Jun 14 17:33:34 2014 +0900

    Backport the additional AsciiString/TextHeader changes from master
    
    - Add useful static methods to AsciiString
    - Add more getters in TextHeaders
    - Remove unnecessary utility methods in SpdyHttpHeaders

commit 681d4609382f9741325b0b2743eb19b85352f425
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 5 18:31:04 2014 +0900

    Introduce TextHeaders and AsciiString
    
    Motivation:
    
    We have quite a bit of code duplication between HTTP/1, HTTP/2, SPDY,
    and STOMP codec, because they all have a notion of 'headers', which is a
    multimap of string names and values.
    
    Modifications:
    
    - Add TextHeaders and its default implementation
    - Add AsciiString to replace HttpHeaderEntity
      - Borrowed some portion from Apache Harmony's java.lang.String.
    - Reimplement HttpHeaders, SpdyHeaders, and StompHeaders using
      TextHeaders
    - Add AsciiHeadersEncoder to reuse the encoding a TextHeaders
      - Used a dedicated encoder for HTTP headers for better performance
        though
    - Remove shortcut methods in SpdyHeaders
    - Replace SpdyHeaders.getStatus() with HttpResponseStatus.parseLine()
    
    Result:
    
    - Removed quite a bit of code duplication in the header implementations.
    - Slightly better performance thanks to improved header validation and
      hash code calculation

commit 2a2a21ec59e4903d48b7f56ffc78a9f183e99813
Author: belliottsmith <github@sub.laerad.com>
Date:   Mon Jun 9 01:18:46 2014 +0100

    Introduce FastThreadLocal which uses an EnumMap and a predefined fixed set of possible thread locals
    
    Motivation:
    Provide a faster ThreadLocal implementation
    
    Modification:
    Add a "FastThreadLocal" which uses an EnumMap and a predefined fixed set of possible thread locals (all of the static instances created by netty) that is around 10-20% faster than standard ThreadLocal in my benchmarks (and can be seen having an effect in the direct PooledByteBufAllocator benchmark that uses the DEFAULT ByteBufAllocator which uses this FastThreadLocal, as opposed to normal instantiations that do not, and in the new RecyclableArrayList benchmark);
    
    Result:
    Improved performance

commit 3d81afb8a5ec31420fb503bc9476ecf23bb6bbfa
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jun 5 21:06:46 2014 +0200

    Make sure cancelled Timeouts are able to be GC'ed fast.
    
    Motivation:
    At the moment the HashedWheelTimer will only remove the cancelled Timeouts once the HashedWheelBucket is processed again. Until this the instance will not be able to be GC'ed as there are still strong referenced to it even if the user not reference it by himself/herself. This can cause to waste a lot of memory even if the Timeout was cancelled before.
    
    Modification:
    Add a new queue which holds CancelTasks that will be processed on each tick to remove cancelled Timeouts. Because all of this is done only by the WorkerThread there is no need for synchronization and only one extra object creation is needed when cancel() is executed. For addTimeout(...) no new overhead is introduced.
    
    Result:
    Less memory usage for cancelled Timeouts.

commit 8180f7922f40b099780ae13be3e1b6d45a32b3ff
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jun 10 12:16:50 2014 +0200

    Optimize DefaultChannelPipeline in terms of memory usage and initialization time
    
    Motivation:
    Each of DefaultChannelPipeline instance creates an head and tail that wraps a handler. These are used to chain together other DefaultChannelHandlerContext that are created once a new ChannelHandler is added. There are a few things here that can be improved in terms of memory usage and initialization time.
    
    Modification:
    - Only generate the name for the tail and head one time as it will never change anyway
    - Rename DefaultChannelHandlerContext to AbstractChannelHandlerContext and make it abstract
    - Create a new DefaultChannelHandlerContext that is used when a ChannelHandler is added to the DefaultChannelPipeline
    - Rename TailHandler to TailContext and HeadHandler to HeadContext and let them extend AbstractChannelHandlerContext. This way we can save 2 object creations per DefaultChannelPipeline
    
     Result:
    - Less memory usage because we have 2 less objects per DefaultChannelPipeline
    - Faster creation of DefaultChannelPipeline as we not need to generate the name for the head and tail

commit e3c76ec10617b4b29a08e2631e4e3a1d2d2a88e8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jun 2 15:00:33 2014 +0000

    DNS codec for Netty which is based on the work of [#1622].
    
    Motivation:
    As part of GSOC 2013 we had @mbakkar working on a DNS codec but did not integrate it yet as it needs some cleanup. This commit is based on @mbakkar's work and provide the codec for DNS.
    
    Modifications:
    Add DNS codec
    
    Result:
    Reusable DNS codec will be included in netty.
    
    This PR also includes a AsynchronousDnsResolver which allows to resolve DNS entries in a non blocking way by make use
    of the dns codec and netty transport itself.

commit 8074b5c6ee21b4898bb557fffc93e0ccab2d3c1e
Author: Frederic Bregier <fredbregier@free.fr>
Date:   Thu Jun 5 23:20:41 2014 +0200

    [#2542] HTTP post request decoder does not support quoted boundaries
    
    Motivation:
    According to RFC2616 section 19, boundary string could be quoted, but
    currently the PostRequestDecoder does not support it while it should.
    
    Modifications:
    Once the boundary is found, one check is made to verify if the boundary
    is "quoted", and if so, it is "unqoted".
    
    Note: in following usage of this boundary (as delimiter), quote seems no
    more allowed according to the same RFC, so the reason that only the
    boundary definition is corrected.
    
    Result:
    Now the boundary could be whatever quoted or not. A Junit test case
    checks it.

commit f402350d76e764ee0667b1d02563abe53df7eb6a
Author: Frederic Bregier <fredbregier@free.fr>
Date:   Sat Jun 7 12:13:32 2014 +0200

    [#2544] Correctly parse Multipart-mixed POST HTTP request in case of entity ends with odd number of 0x0D
    
    Motivation:
    When an attribute is ending with an odd number of CR (0x0D), the decoder
    add an extra CR in the decoded attribute and should not.
    
    Modifications:
    Each time a CR is detected, the next byte was tested to be LF or not. If
    not, in a number of places, the CR byte was lost while it should not be.
    When a CR is detected, if the next byte is not LF, the CR byte should be
    saved as the position point to the next byte (not LF). When a CR is
    detected, if there is not yet other available bytes, the position is
    reset to the position of CR (since a LF could follow).
    
    A new Junit test case is added, using DECODER and variable number of CR
    in the final attribute (testMultipartCodecWithCRasEndOfAttribute).
    
    Result:
    The attribute is now correctly decoded with the right number of CR
    ending bytes.

commit 61dbc353ca17af026d346b6fa83788a3ddcf8317
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jun 4 07:04:19 2014 +0200

    [#2436] Unsafe*ByteBuf implementation should only invert bytes if ByteOrder differ from native ByteOrder
    
    Motivation:
    Our Unsafe*ByteBuf implementation always invert bytes when the native ByteOrder is LITTLE_ENDIAN (this is true on intel), even when the user calls order(ByteOrder.LITTLE_ENDIAN). This is not optimal for performance reasons as the user should be able to set the ByteOrder to LITTLE_ENDIAN and so write bytes without the extra inverting.
    
    Modification:
    - Introduce a new special SwappedByteBuf (called UnsafeDirectSwappedByteBuf) that is used by all the Unsafe*ByteBuf implementation and allows to write without inverting the bytes.
    - Add benchmark
    - Upgrade jmh to 0.8
    
    Result:
    The user is be able to get the max performance even on servers that have ByteOrder.LITTLE_ENDIAN as their native ByteOrder.

commit a852ee41543ba4fbd71ac61a6f7eec7999f7f776
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 5 17:04:58 2014 +0900

    Fix StompSubframeEncoderTest failure
    
    Motivation:
    
    StompSubframeEncoderTest fails because StompHeaders does not respect the order of the headers set.
    
    Modifications:
    
    Use LinkedHashMap instead of HashMap
    
    Result:
    
    Fixes test failures

commit 8b0a0f9a8fd4ab8956fc959eb954dec6e3048b98
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jun 4 18:34:57 2014 +0900

    Introduce MessageAggregator and DecoderResultProvider
    
    Motivation:
    
    We have different message aggregator implementations for different
    protocols, but they are very similar with each other.  They all stems
    from HttpObjectAggregator.  If we provide an abstract class that provide
    generic message aggregation functionality, we will remove their code
    duplication.
    
    Modifications:
    
    - Add MessageAggregator which provides generic message aggregation
    - Reimplement all existing aggregators using MessageAggregator
    - Add DecoderResultProvider interface and extend it wherever possible so
      that MessageAggregator respects the state of the decoded message
    
    Result:
    
    Less code duplication

commit a8143eda274ac1f44f7da770bd5ec13527ceb8e2
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jun 4 16:39:50 2014 +0900

    Overall refactoring of the STOMP codec
    
    - StompObject -> StompSubframe
    - StompFrame -> StompHeadersSubframe
    - StompContent -> StompContntSubframe
    - FullStompFrame -> StompFrame
    - StompEncoder/Decoder -> StompSubframeEncoder/Decoder
    - StompAggregator -> StompSubframeAggregator
    - Simplify the example
    - Update Javadoc
    - Miscellaneous cleanup

commit b2860792055428e02fa97c51abaa907a18139b0a
Author: Sergey Skachkov <sskachkov@gmail.com>
Date:   Thu Jan 30 12:18:30 2014 -0800

    Initial STOMP protocol work from @sskachkov

commit d1b90774bc591225688902a3e5209b6509d74380
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 3 13:03:36 2014 +0900

    Clean up MpscLinkedQueue, fix its leak, and make it work without Unsafe
    
    Motivation:
    
    MpscLinkedQueue has various issues:
    - It does not work without sun.misc.Unsafe.
    - Some field names are confusing.
      - Node.tail does not refer to the tail node really.
      - The tail node is the starting point of iteration. I think the tail
        node should be the head node and vice versa to reduce confusion.
    - Some important methods are not implemented (e.g. iterator())
    - Not serializable
    - Potential false cache sharing problem due to lack of padding
    - MpscLinkedQueue extends AtomicReference and thus exposes various
      operations that mutates the internal state of the queue directly.
    
    Modifications:
    
    - Use AtomicReferenceFieldUpdater wherever possible so that we do not
      use Unsafe directly. (e.g. use lazySet() instead of putOrderedObject)
    - Extend AbstractQueue to implement most operations
    - Implement serialization and iterator()
    - Rename tail to head and head to tail to reduce confusion.
    - Rename Node.tail to Node.next.
    - Fix a leak where the references in the removed head are not cleared
      properly.
    - Add Node.clearMaybe() method so that the value of the new head node
      is cleared if possible.
    - Add some comments for my own educational purposes
    - Add padding to the head node
      - Add FullyPaddedReference and RightPaddedReference for future reuse
    - Make MpscLinkedQueue package-local so that a user cannot access the
      dangerous yet public operations exposed by the superclass.
      - MpscLinkedQueue.Node becomes MpscLinkedQueueNode, a top level class
    
    Result:
    
    - It's more like a drop-in replacement of ConcurrentLinkedQueue for the
      MPSC case.
    - Works without sun.misc.Unsafe
    - Code potentially easier to understand
    - Fixed leak (related: #2372)

commit 502d29a7216928b9c33bf7dd8513d87e9a4acc83
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jun 4 03:12:28 2014 +0900

    Require Maven 3.1.1 or above
    
    .. because the build fails with an older Maven version due to Eclipse
    Aether issues

commit a79b69adf5abf90250f44ccf0d9645bf30cdff62
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jun 3 10:24:44 2014 +0200

    ChannelFlushPromiseNotifier should allow long value for pendingDataSize
    
    Motivation:
    At the moment ChannelFlushPromiseNotifier.add(....) takes an int value for pendingDataSize, which may be too small as a user may need to use a long. This can for example be useful when a user writes a FileRegion etc. Beside this the notify* method names are kind of missleading as these should not contain *Future* because it is about ChannelPromises.
    
    Modification:
    Add a new add(...) method that takes a long for pendingDataSize and @deprecated the old method. Beside this also @deprecated all *Future* methods and add methods that have *Promise* in the method name to better reflect usage.
    
    Result:
    ChannelFlushPromiseNotifier can be used with bigger data.

commit c1d6ba0598251c10e05b508c792cf270498b0196
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Tue Jun 3 09:21:03 2014 +0200

    OkResponseHandler should return a FullHttpResponse.
    
    Motivation:
    Currently OkResponseHandler returns a DefaultHttpResponse which is not
    correct and it should be returning complete http response.
    
    Modifications:
    Updated OkResponseHandler to return an instance of
    DefaultFullHttpResponse.
    
    Result:
    It is not possible to add compression to the example without getting any
    errors.

commit eb27cd279c2f66bb785fad47ff949350d486ec6f
Author: DhanaRaj Durairaj <dhanaraj0@gmail.com>
Date:   Tue May 13 17:47:12 2014 +0530

    [#2494] Fix data curruption by ChannelTrafficShapingHandler
    
    Motivation:
    ChannelTrafficShapingHandler may corrupt inbound data stream by
    scheduling the fireChannelRead event.
    
    Modification:
    Always call fireChannelRead(...) and only suspend reads after it
    
    Result:
    No more data corruption

commit 13c0cfde59f72c73fe036e5ae87602ca2d34fd79
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jun 2 19:23:50 2014 +0900

    Add awaitInactivity() to GlobalEventExecutor and ThreadDeathWatcher
    
    Motivation:
    
    When running Netty on a container environment, the container will often
    complain about the lingering threads such as the worker threads of
    ThreadDeathWatcher and GlobalEventExecutor.  We should provide an
    operation that allows a use to wait until such threads are terminated.
    
    Modifications:
    
    - Add awaitInactivity()
    - (misc) Fix typo in GlobalEventExecutorTest
    - (misc) Port ThreadDeathWatch's CAS-based thread life cycle management
      to GlobalEventExecutor
    
    Result:
    
    - Fixes #2084
    - Less overhead on task submission of GlobalEventExecutor

commit 08c1f55d3aa572f60a7b2960ebd286a2709faacb
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jun 2 18:26:54 2014 +0900

    Fix checkstyle

commit 7d9374a582edd47f973255618a35d36d032059eb
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jun 2 18:25:25 2014 +0900

    Use Java 5 foreach for arrays for brevity at no cost

commit af4c30fa562d662ddf2b900792908808dd052127
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jun 2 18:24:19 2014 +0900

    Remove the deprecated constructor

commit e79ca269b8bf057f0b4250a9b9e193c398104998
Author: Trustin Lee <t@motd.kr>
Date:   Fri May 30 18:43:40 2014 +0900

    Introduce ThreadDeathWatcher
    
    Motivation:
    
    PooledByteBufAllocator's thread local cache and
    ReferenceCountUtil.releaseLater() are in need of a way to run an
    arbitrary logic when a certain thread is terminated.
    
    Modifications:
    
    - Add ThreadDeathWatcher, which spawns a low-priority daemon thread
      that watches a list of threads periodically (every second) and
      invokes the specified tasks when the associated threads are not alive
      anymore
      - Start-stop logic based on CAS operation proposed by @tea-dragon
    - Add debug-level log messages to see if ThreadDeathWatcher works
    
    Result:
    
    - Fixes #2519 because we don't use GlobalEventExecutor anymore
    - Cleaner code

commit b0ddfb9b65344109c55e75ced8a33af4aaea7050
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jun 1 19:24:30 2014 +0200

    [#2525] Use VoidChannelPromise in MessageToMessageEncoder when possible
    
    Motivation:
    At the moment MessageToMessageEncoder uses ctx.write(msg) when have more then one message was produced. This may produce more GC pressure then necessary as when the original ChannelPromise is a VoidChannelPromise we can safely also use one when write messages.
    
    Modifications:
    Use VoidChannelPromise when the original ChannelPromise was of this type
    
    Result:
    Less object creation and GC pressure

commit 5b2a01a1969fa50b6b27d87967f4ac60776a4e20
Author: Korotaev Boris <korotaev@multivi.ru>
Date:   Sat May 31 13:36:50 2014 +0600

    Fix broken CompositeMatcher
    
    Motivation:
    
    ChannelMatchers#CompositeMatcher inverts matches result.
    
    Modifications:
    
    Switched return values.
    
    Result:
    
    ChannelMatchers#CompositeMatcher will return correct results.

commit d0f3bfd4cc81202705857b4bd3ba7a3dceb7025a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jun 1 13:06:50 2014 +0200

    [#2523] Fix infinite-loop when remove attribute and create the same attribute again
    
    Motivation:
    The current DefaultAttributeMap cause an infinite-loop when the user removes an attribute and create the same attribute again. This regression was introduced by c3bd7a8ff10021026b0c223d36f022dbbf4fe397.
    
    Modification:
    Correctly break out loop
    
    Result:
    No infinite-loop anymore.

commit 8583dd03fcf17ad4bcdf790b03521b7e068c3f19
Author: Josh Hoyt <jhoyt@twitter.com>
Date:   Wed May 21 12:26:05 2014 -0700

    codec-http: Document the semantics of HttpResponseStatus equality and comparison

commit c255f38647bd39e24f4f7e631e00b00f199a862d
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Thu May 22 09:15:20 2014 +0200

    Correction on StringBuilder default init size
    
    Motivation:
    The default StringBuilder size is too small (data.length + 4) while it will be 2*data.length (byte to Hex) + 5 "-" char (since 5 peaces appended).
    
    Modification:
    Changing initial size to the correct one
    
    Result:
    Allocation of the correct final size from the beginning for this StringBuilder.

commit ea3dac0753292ca7c8d2b0841ed0b5e0752759bd
Author: Trustin Lee <t@motd.kr>
Date:   Fri May 30 11:23:46 2014 +0900

    Do not use a pseudo random for tree traversal
    
    Motivation:
    
    If we make allocateRun/SubpageSimple() always try the left node first and make allocateRun/Subpage() always tries the right node first,  it is more likely that allocateRun/Subpage() will find a node with ST_UNUSED sooner.
    
    Modifications:
    
    - Make allocateRunSimple() and allocateSubpageSimple() always try the left node first.
    - Make allocateRun() and allocateSubpage() always try the right node first.
    - Remove randome
    
    Result:
    
    We get the same performance without using random numbers.

commit e5ed69241b390e905fe420ae6985d1752b56f593
Author: Trustin Lee <t@motd.kr>
Date:   Fri May 30 10:45:28 2014 +0900

    Optimize PooledByteBufAllocator
    
    Motivation:
    
    We still have a room for improvement in PoolChunk.allocateRun() and
    Subpage.allocate().
    
    Modifications:
    
    - Unroll the recursion in PoolChunk.allocateRun()
    - Subpage.allocate() makes use of the 'nextAvail' value set by previous
      free().
    
    Result:
    
    - PoolChunk.allocateRun() optimization yields 10%+ improvements in
      allocation throughput for non-subpage allocations.
    - Subpage.allocate() optimization makes the subpage allocations for
      tiny buffers as fast as non-tiny buffers even when the pageSize is
      huge (e.g. 1048576) because it doesn't need to perform a linear search
      in most cases.

commit 0cc264b76bee267c77f507a23736e8a145fa2505
Author: Trustin Lee <t@motd.kr>
Date:   Thu May 29 19:50:43 2014 +0900

    More realistic ByteBuf allocation benchmark
    
    Motivation:
    
    Allocating a single buffer and releasing it repetitively for a benchmark will not involve the realistic execution path of the allocators.
    
    Modifications:
    
    Keep the last 8192 allocations and release them randomly.
    
    Result:
    
    We are now getting the result close to what we got with caliper.

commit b4e69312947648c97f46c067f4ae7ee77244c907
Author: Trustin Lee <t@motd.kr>
Date:   Wed May 28 10:55:52 2014 +0900

    Upgrade to netty-tcnative 1.1.30.Fork2 to support Windows

commit 8df9dd7dda2d04a3478d414f34a694aec7515dde
Author: Trustin Lee <t@motd.kr>
Date:   Wed May 28 09:38:42 2014 +0900

    Work around the system configuration issue that causes NioSocketChannelTest to fail
    
    Motivation:
    
    On some ill-configured systems, InetAddress.getLocalHost() fails.  NioSocketChannelTest calls java.net.Socket.connect() and it internally invoked InetAddress.getLocalHost(), which causes the test failures in NioSocketChannelTes on such an ill-configured system.
    
    Modifications:
    
    Use NetUtil.LOCALHOST explicitly.
    
    Result:
    
    NioSocketChannelTest should not fail anymore.

commit c5112ed55210afcbb263397b37c0031983b883db
Author: Trustin Lee <t@motd.kr>
Date:   Tue May 27 04:41:58 2014 +0900

    Upgrade os-maven-plugin to fix an issue with IntelliJ IDEA on Windows

commit 9961cae7cf7819e853714fcf06ae0a00d8fc8d39
Author: Trustin Lee <t@motd.kr>
Date:   Fri May 23 20:03:14 2014 +0900

    Use a forked exec-maven-plugin instead of maven-antrun-plugin
    
    Motivation:
    
    maven-antrun-plugin does not redirect stdin, and thus it's impossible to
    run interactive examples such as securechat-client and telnet-client.
    org.codehaus.mojo:exec-maven-plugin redirects stdin, but it buffers
    stdout and stderr, and thus an application output is not flushed timely.
    
    Modifications:
    
    Deploy a forked version of exec-maven-plugin which flushes output
    buffers in a timely manner.
    
    Result:
    
    Interactive examples work.  Launches faster than maven-antrun-plugin.

commit 223efc5f9969414f104ec98d9b2fad137d0f195b
Author: Trustin Lee <t@motd.kr>
Date:   Fri May 23 16:46:31 2014 +0900

    Clean up the examples
    
    Motivation:
    
    The examples have not been updated since long time ago, showing various
    issues fixed in this commit.
    
    Modifications:
    
    - Overall simplification to reduce LoC
      - Use system properties to get options instead of parsing args.
      - Minimize option validation
      - Just use System.out/err instead of Logger
      - Do not pass config as parameters - just access it directly
      - Move the main logic to main(String[]) instead of creating a new
        instance meaninglessly
        - Update netty-build-21 to make checkstyle not complain
      - Remove 'throws Exception' clause if possible
    - Line wrap at 120 (previously at 80)
    - Add an option to enable SSL for most examples
    - Use ChannelFuture.sync() instead of await()
    - Use System.out for the actual result. Use System.err otherwise.
    - Delete examples that are not very useful:
      - applet
      - websocket/html5
      - websocketx/sslserver
      - localecho/multithreaded
    - Add run-example.sh which simplifies launching an example from command
      line
    - Rewrite FileServer example
    
    Result:
    
    Shorter and simpler examples.  A user can focus more on what it actually
    does than miscellaneous stuff.  A user can launch an example very
    easily.

commit c7825f63c0983c3a4d8858f9fe741940c663006a
Author: Trustin Lee <t@motd.kr>
Date:   Fri May 23 09:47:22 2014 +0900

    Fix a bug in DefaultPromise.notifyLateListener() where the listener is not notified
    
    Motivation:
    
    When (listeners == null && lateListeners == null) and (stackDepth >= MAX_LISTENER_STACK_DEPTH), the listener is not notified at all. The discard client does not work.
    
    Modification:
    
    Make sure to submit the notification task.
    
    Result:
    
    The discard client works again and all listeners are notified.

commit 60a83fc6ac66ab6972dedb0a24c36c383a8e7940
Author: Trustin Lee <t@motd.kr>
Date:   Thu May 22 19:11:01 2014 +0900

    Fix packagine issues in all-in-one JAR
    
    Motivation:
    
    - dependencyVersionsDir property is not resolved during the build
      process. The build doesn't fail because of this, but it creates an
      ugly directory.
    - All-in-one JAR contains libnetty-tcnative.so, which is not part of the
      all-in-one JAR.
    
    Modifications:
    
    - Fix an incorrect property name
      (dependencyVersionDir -> dependencyVersionsDir)
    - Exclude libnetty-tcnative.so
    - Remove unnecessary includes in source expanding configuration
    
    Result:
    
    - Cleaner pom.xml
    - We do not ship libnetty-tcnative.so in all-in-one JAR anymore, which
      is correct, because strictly speaking the native library belongs to
      org.apache.tomcat.jni package.

commit 37931306d54066f222def676e9f797afa8f40260
Author: Trustin Lee <t@motd.kr>
Date:   Thu May 22 18:53:09 2014 +0900

    Use maven-antrun-plugin instead of exec-maven-plugin
    
    Motivation:
    
    exec-maven-plugin does not flush stdout and stderr, making the console
    output from the examples invisible to users
    
    Modification:
    
    Use maven-antrun-plugin instead
    
    Result:
    
    A user sees the output from the examples immediately.

commit cdab518562b0db0c19a2c9ff7712c8250c6b7cc7
Author: Trustin Lee <t@motd.kr>
Date:   Thu May 22 17:57:12 2014 +0900

    Fix an incorrect path problem in run-example.sh

commit d7f553562e70b5d10ab181ef4bee2d98b7769db9
Author: Trustin Lee <t@motd.kr>
Date:   Thu May 22 17:54:31 2014 +0900

    Display example names in 2 columns
    
    - ported from ba286797752851e4d4426661fffda2f12feb7920

commit 2f8c13e85ac2debd1f6370e7007d700cc434d042
Author: Trustin Lee <t@motd.kr>
Date:   Thu May 22 10:28:38 2014 +0900

    Fix NPE

commit 5ce410c69e9b2aed881693b41c5583105b004b9f
Author: Trustin Lee <t@motd.kr>
Date:   Thu May 22 09:59:58 2014 +0900

    Future compatibility with TLS ALPN
    
    Motivation:
    
    According to TLS ALPN draft-05, a client sends the list of the supported
    protocols and a server responds with the selected protocol, which is
    different from NPN.  Therefore, ApplicationProtocolSelector won't work
    with ALPN
    
    Modifications:
    
    - Use Iterable<String> to list the supported protocols on the client
      side, rather than using ApplicationProtocolSelector
    - Remove ApplicationProtocolSelector
    
    Result:
    
    Future compatibility with TLS ALPN

commit 27b67e981e5fe82820ebc3b413107c559ae0a4bd
Author: Trustin Lee <t@motd.kr>
Date:   Wed May 21 20:02:15 2014 +0900

    Fix NPE in OpenSslEngine

commit ac968fbf7b7248e476679a13f5a38f2cc82e703b
Author: Trustin Lee <t@motd.kr>
Date:   Wed May 21 17:44:07 2014 +0900

    Escape a colon in protocol names

commit d318f526a2de207d2979099227054fb62c386bb3
Author: Trustin Lee <t@motd.kr>
Date:   Wed May 21 17:29:18 2014 +0900

    Update the instruction for running SPDY examples

commit 861ed1e7adc426308a6a62fa6b8872b35b1bc06a
Author: Trustin Lee <t@motd.kr>
Date:   Wed May 21 17:21:18 2014 +0900

    Add unified NextProtoNego extension support to SslContext
    
    Motivation:
    
    - OpenSslEngine and JDK SSLEngine (+ Jetty NPN) have different APIs to
      support NextProtoNego extension.
      - It is impossible to configure NPN with SslContext when the provider
        type is JDK.
    
    Modification:
    
    - Implement NextProtoNego extension by overriding the behavior of
      SSLSession.getProtocol() for both OpenSSLEngine and JDK SSLEngine.
      - SSLEngine.getProtocol() returns a string delimited by a colon (':')
        where the first component is the transport protosol (e.g. TLSv1.2)
        and the second component is the name of the application protocol
    - Remove the direct reference of Jetty NPN classes from the examples
    - Add SslContext.newApplicationProtocolSelector
    
    Result:
    
    - A user can now use both JDK SSLEngine and OpenSslEngine for NPN-based
      protocols such as HTTP2 and SPDY

commit d4f2488eacce2680c4d9ebaa66527cfe5ceb4762
Author: Trustin Lee <t@motd.kr>
Date:   Wed May 21 13:35:28 2014 +0900

    Bash 3 compatibility
    
    Motivation:
    
    Mac OS X ships Bash 3, and it does not have an associative array
    (declare -A).
    
    Modifications:
    
    Do not use an associative array.
    
    Result:
    
    Can run examples on Mac OS X using run-example.sh

commit e61ad7f80b1a72f9f0077ac4e93bab407c6add93
Author: Trustin Lee <t@motd.kr>
Date:   Tue May 20 23:38:53 2014 +0900

    Improve run-example.sh
    
    - More usage example
    - Newlines for prettier output

commit 4436870b28a253718a3305333b21e0e7fb82abd9
Author: Trustin Lee <t@motd.kr>
Date:   Tue May 20 23:24:34 2014 +0900

    Clean up the execution mechanism of examples
    
    Motivation:
    
    - There's no way to pass an argument to an example.
    - Assigning a Maven profile for each example is an overkill.
      It makes the pom.xml crowded.
    
    Modifications:
    
    - Remove example profiles from example/pom.xml
    - Keep the list of examples in run-example.sh
    - run-example.sh passes all options to exec-maven-plugin.
      For example, we can now do this:
    
        ./run-example.sh -Dssl -Dport=443 http-server
    
    Result:
    
    - It's much easier to add a new example and provide an easy way to
      launch it.
    - We can still pass an arbitrary argument to the example being launched.
      (I'll update all examples to make them get their options from system
      properties rather than from args[].

commit 5354ccaa8f732caa46d6fd3d6fc80433dac47063
Author: Trustin Lee <t@motd.kr>
Date:   Tue May 20 22:37:55 2014 +0900

    Fix a build problem with JDK 8
    
    Motivation:
    
    Build fails with JDK 8 because npn-boot does not work with JDK 8
    
    Modifications:
    
    Do not specify bootclasspath when on JDK 8
    
    Result:
    
    Build is green again.

commit d942c13c8efde4204b88f958c0d565fa3df6387c
Author: Trustin Lee <t@motd.kr>
Date:   Tue May 20 20:04:41 2014 +0900

    Fix a problem where all classes are compiled again
    
    Motivation:
    
    Due to a known problem[1] of maven-compiler-plugin, our build always
    compiles everything from scratch, which is waste of time.
    
    Modifications:
    
    Exclude package-info.java from the source list.
    
    Result:
    
    Much shorter build time.
    
    [1]: https://jira.codehaus.org/browse/MCOMPILER-205

commit c77375cf54f5fc37ffa87f3a547b8271fa7bc7f6
Author: Trustin Lee <t@motd.kr>
Date:   Tue May 20 19:46:19 2014 +0900

    Clean up example execution
    
    Motivation:
    
    - example/pom.xml has quite a bit of duplication.
    - We expect that we depend on npn-boot in more than one module in the
      near future. (e.g. handler, codec-http, and codec-http2)
    
    Modification:
    
    - Deduplicate the profiles in example/pom.xml
    - Move the build configuration related with npn-boot to the parent pom.
    - Add run-example.sh that helps a user launch an example easily
    
    Result:
    
    - Cleaner build files
    - Easier to add a new example
    - Easier to launch an example
    - Easier to run the tests that relies on npn-boot in the future

commit c4fc6b70439626f16ad343c245d071c5582cbee5
Author: Trustin Lee <t@motd.kr>
Date:   Tue May 20 17:38:52 2014 +0900

    Checkstyle

commit 7252934f9b133e3c120bc0f9480e09bd03f83ce5
Author: Trustin Lee <t@motd.kr>
Date:   Tue May 20 17:16:15 2014 +0900

    Limit the number of bytes to copy per Unsafe.copyMemory()
    
    Motivation:
    
    During a large memory copy, safepoint polling is diabled, hindering
    accurate profiling.
    
    Modifications:
    
    Only copy up to 1 MiB per Unsafe.copyMemory()
    
    Result:
    
    Potentially more reliable performance

commit 4882377c2757d82f02849f3c38b10fbbc8d632a9
Author: Trustin Lee <t@motd.kr>
Date:   Mon May 19 11:44:50 2014 +0900

    Work around the JVM crash that occurs when cipher suite uses GCM
    
    Motivation:
    
    For an unknown reason, JVM of JDK8 crashes intermittently when
    SslHandler feeds a direct buffer to SSLEngine.unwrap() *and* the current
    cipher suite has GCM (Galois/Counter Mode) enabled.
    
    Modifications:
    
    Convert the inbound network buffer to a heap buffer when the current
    cipher suite is using GCM.
    
    Result:
    
    JVM does not crash anymore.

commit 66851d222b46951812d823a350ce720ef0164b67
Author: Trustin Lee <t@motd.kr>
Date:   Mon May 19 01:32:31 2014 +0900

    Update os-maven-plugin again to address an IDEA integration issue

commit ccbc19a45f70a9269f2f328243be4b4ea4c6d058
Author: Trustin Lee <t@motd.kr>
Date:   Sun May 18 21:34:51 2014 +0900

    Add JVM crash logs to .gitignore

commit 2a30d0c22aec545238afe529bf99acf589cb5dbb
Author: Trustin Lee <t@motd.kr>
Date:   Sun May 18 17:30:29 2014 +0900

    Upgrade os-maven-plugin to fix the build issue

commit ae61b12b9ebe0911fed3ec0f00257ec0063cd023
Author: Trustin Lee <t@motd.kr>
Date:   Sun May 18 05:09:22 2014 +0900

    Reduce memory usage of SslHandler when OpenSslEngine is in use
    
    Motivation:
    
    JDK's SSLEngine.wrap() requires the output buffer to be always as large as MAX_ENCRYPTED_PACKET_LENGTH even if the input buffer contains small number of bytes.  Our OpenSslEngine implementation does not have such wasteful behaviot.
    
    Modifications:
    
    If the current SSLEngine is OpenSslEngine, allocate as much as only needed.
    
    Result:
    
    Less peak memory usage.

commit ef59c4ce61838fce193273291cdba9f617374c57
Author: Trustin Lee <t@motd.kr>
Date:   Sun May 18 04:27:43 2014 +0900

    Add netty-tcnative dependency to netty-example
    
    Motivation:
    
    It's useful to have netty-tcnative dependency in netty-example because
    we can play with OpenSslEngine from our IDE.
    
    Modifications:
    
    Add netty-tcnative to example/pom.xml

commit 28c390d86d4d01d35f11a88034143763066f3d21
Author: Trustin Lee <t@motd.kr>
Date:   Sun May 18 04:26:16 2014 +0900

    Fix buffer leaks during PEM to KeyStore conversion

commit 167a685a5f3d375eb3a851d594d8a9be6b93ffdf
Author: Trustin Lee <t@motd.kr>
Date:   Sun May 18 03:45:58 2014 +0900

    Fix JDK 8 compatibility issue with OpenJdkSelfSignedCertGenerator
    
    - X509CertInfo.setSubject/setIssuer() requires X500Name instead of
      CertificateSubjectName/CertificateIssuerName.

commit 9125060752f5124949e55a6868647c75f88cdb01
Author: Trustin Lee <t@motd.kr>
Date:   Sun May 18 03:32:35 2014 +0900

    Optimize SslHandler in an OpenSslEngine-friendly way
    
    Motivation:
    
    Previous fix for the OpenSslEngine compatibility issue (#2216 and
    18b0e95659c057b126653bad2f018a8ce5385255) was to feed SSL records one by
    one to OpenSslEngine.unwrap().  It is not optimal because it will result
    in more JNI calls.
    
    Modifications:
    
    - Do not feed SSL records one by one.
    - Feed as many records as possible up to MAX_ENCRYPTED_PACKET_LENGTH
    - Deduplicate MAX_ENCRYPTED_PACKET_LENGTH definitions
    
    Result:
    
    - No allocation of intemediary arrays
    - Reduced number of calls to SSLEngine and thus its underlying JNI calls
    - A tad bit increase in throughput, probably reverting the tiny drop
      caused by 18b0e95659c057b126653bad2f018a8ce5385255

commit b6c0c0c95fcad288043d4a76a77c8bdd600946fe
Author: Trustin Lee <t@motd.kr>
Date:   Sun May 18 02:26:01 2014 +0900

    Add an OpenSslEngine and the universal API for enabling SSL
    
    Motivation:
    
    Some users already use an SSLEngine implementation in finagle-native. It
    wraps OpenSSL to get higher SSL performance.  However, to take advantage
    of it, finagle-native must be compiled manually, and it means we cannot
    pull it in as a dependency and thus we cannot test our SslHandler
    against the OpenSSL-based SSLEngine.  For an instance, we had #2216.
    
    Because the construction procedures of JDK SSLEngine and OpenSslEngine
    are very different from each other, we also need to provide a universal
    way to enable SSL in a Netty application.
    
    Modifications:
    
    - Pull netty-tcnative in as an optional dependency.
      http://netty.io/wiki/forked-tomcat-native.html
    - Backport NativeLibraryLoader from 4.0
    - Move OpenSSL-based SSLEngine implementation into our code base.
      - Copied from finagle-native; originally written by @jpinner et al.
      - Overall cleanup by @trustin.
    - Run all SslHandler tests with both default SSLEngine and OpenSslEngine
    - Add a unified API for creating an SSL context
      - SslContext allows you to create a new SSLEngine or a new SslHandler
        with your PKCS#8 key and X.509 certificate chain.
      - Add JdkSslContext and its subclasses
      - Add OpenSslServerContext
    - Add ApplicationProtocolSelector to ensure the future support for NPN
      (NextProtoNego) and ALPN (Application Layer Protocol Negotiation) on
      the client-side.
    - Add SimpleTrustManagerFactory to help a user write a
      TrustManagerFactory easily, which should be useful for those who need
      to write an alternative verification mechanism. For example, we can
      use it to implement an unsafe TrustManagerFactory that accepts
      self-signed certificates for testing purposes.
    - Add InsecureTrustManagerFactory and FingerprintTrustManager for quick
      and dirty testing
    - Add SelfSignedCertificate class which generates a self-signed X.509
      certificate very easily.
    - Update all our examples to use SslContext.newClient/ServerContext()
    - SslHandler now logs the chosen cipher suite when handshake is
      finished.
    
    Result:
    
    - Cleaner unified API for configuring an SSL client and an SSL server
      regardless of its internal implementation.
    - When native libraries are available, OpenSSL-based SSLEngine
      implementation is selected automatically to take advantage of its
      performance benefit.
    - Examples take advantage of this modification and thus are cleaner.

commit 2a6ed67efc4ffb15647313b82e450a3951a6a3bd
Author: Trustin Lee <t@motd.kr>
Date:   Sat May 17 20:00:21 2014 +0900

    Preparation for porting OpenSSL support in 3.10
    
    - Add licenses and dependencies

commit 2d9e0f53a5059765f5f5976472440c0a2fec848d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue May 13 14:23:23 2014 +0200

    Better implementation of AttributeMap and also add hasAttr(...). See [#2439]
    
    Motivation:
    The old DefaultAttributeMap impl did more synchronization then needed and also did not expose a efficient way to check if an attribute exists with a specific key.
    
    Modifications:
    * Rewrite DefaultAttributeMap to not use IdentityHashMap and synchronization on the map directly. The new impl uses a combination of AtomicReferenceArray and synchronization per chain (linked-list). Also access the first Attribute per bucket can be done without any synchronization at all and just uses atomic operations. This should fit for most use-cases pretty weel.
    * Add hasAttr(...) implementation
    
    Result:
    It's now possible to check for the existence of a attribute without create one. Synchronization is per linked-list and the first entry can even be added via atomic operation.

commit d547b5d51d2fb1707d2f69f8d47bc5930fdab83f
Author: Jake Luciani <jake@apache.org>
Date:   Fri May 9 16:32:43 2014 -0400

    Fix capacity check bug affecting offheap buffers

commit e29f8231aab921c6a1337cf3a12d1822f94a3979
Author: Trustin Lee <t@motd.kr>
Date:   Mon May 12 21:35:13 2014 +0900

    Fix the life cycle mapping problem with m2e
    
    Motivation:
    
    It should be frictionless to import our project into Eclipse
    
    Modifications:
    
    Exclude the plugins with missing life cycle mapping. They are not useful
    for use with IDE anyway.
    
    Result:
    
    Fixes #2488
    Netty is imported into Eclipse without a problem.

commit 2f7d60f234f6b1fb47ffc9e79259d1da00834405
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri May 2 09:52:59 2014 +0200

    Minimize memory footprint of HashedWheelTimer and context-switching
    
    Motivation:
    At the moment there are two issues with HashedWheelTimer:
    * the memory footprint of it is pretty heavy (250kb fon an empty instance)
    * the way how added Timeouts are handled is inefficient in terms of how locks etc are used and so a lot of context-switching / condition can happen.
    
    Modification:
    Rewrite HashedWheelTimer to use an optimized bucket implementation to store the submitted Timeouts and a MPSC queue to handover the timeouts.  So volatile writes are reduced to a minimum and also the memory foot-print of the buckets itself is reduced a lot as the bucket uses a double-linked-list. Beside this we use Atomic*FieldUpdater where-ever possible to improve the memory foot-print and performance.
    
    Result:
    Lower memory-footprint and better performance

commit d69ad2f85c71c39cdf778a1455a4ae7262563894
Author: Trustin Lee <t@motd.kr>
Date:   Sun May 11 18:53:15 2014 +0900

    More robust native library discovery in Mac OS X
    
    Motivation:
    
    Some JDK versions of Mac OS X generates a JNI dynamic library with '.jnilib' extension rather than with '.dynlib' extension.  However, System.mapLibraryName() always returns 'lib<name>.dynlib'. As a result, NativeLibraryLoader fails to load the native library whose extension is .jnilib.
    
    Modification:
    
    Try to find both '.jnilib' and '.dynlib' resources on OS X.
    
    Result:
    
    Dynamic libraries are loaded correctly in Mac OS X, and thus we can continue the OpenSslEngine work.

commit 880acbca722002adc347ad297c776fdd8db9b0bd
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri May 9 08:31:07 2014 +0200

    Use ByteBuf.readSlice(...).retain() to minimize memory copies.
    
    Motivation:
    At the moment we call ByteBuf.readBytes(...) in these handlers but with optimizations done as part of 25e0d9d we can just use readSlice(...).retain() and eliminate the memory copy.
    
    Modifications:
    Replace ByteBuf.readBytes(...) usage with readSlice(...).retain().
    
    Result:
    Less memory copies.

commit 59d92ad6cfbf69fadb109a415112597c911f475a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat May 10 15:21:25 2014 +0200

    [#2485] Use RecvByteBufAllocator for all allocations related to read from Channel
    
    Motivation:
    At the moment we sometimes use only RecvByteBufAllocator.guess() to guess the next size and the use the ByteBufAllocator.* directly to allocate the buffer. We should always use RecvByteBufAllocator.allocate(...) all the time as this makes the behavior easier to adjust.
    
    Modifications:
    Change the read() implementations to make use of RecvByteBufAllocator.
    
    Result:
    Behavior is more consistent.

commit 69c72220aa85cf3cd59df163ae2cd5d4e13eb22a
Author: Trustin Lee <t@motd.kr>
Date:   Thu May 8 09:59:18 2014 +0900

    Update netty-build to version 20
    
    - Preparation for merging OpenSslEngine work

commit c5e4c2294ebbe446cdfa1af1f63ebb7319190776
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed May 7 07:13:39 2014 +0200

    [#2469] Correctly update indices after incomplete gathering write
    
     Motivation:
     When doing a gathering write we need to update the indices after the write partial completes. In the current code-base we use the wrong value when compare the expected written bytes and the actual written bytes.
    
     Modifications:
     Use the correct value when compare.
    
    Result:
    Indices are updated correctly and so no corruption can happen when resume writing after data was only partial written before.

commit 1a22186645e7d638b729e8acc32bc1ccdc197724
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Tue May 6 08:24:21 2014 +0200

    Adding short-curcuit option for CORS
    
    Motivation:
    CORS request are currently processed, and potentially failed, after the
    target ChannelHandler(s) have been invoked. This might not be desired, for
    example a HTTP PUT or POST might have been performed.
    
    Modifications:
    Added a shortCurcuit option to CorsConfig which when set will
    cause a validation of the HTTP request's 'Origin' header and verify that
    it is valid according to the configuration. If found invalid an 403
    "Forbidden" response will be returned and not further processing will
    take place.
    
    This is indeed no help for non browser request, like using curl, which
    can set the 'Origin' header.
    
    Result:
    Users can now configure if the 'Origin' header should be validated
    upfront and have the request rejected before any further processing
    takes place.

commit 8a39b9fedc59e0e7611423b3e2ad550e3cbadc72
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue May 6 10:03:24 2014 +0200

    Fix buffer leak introduced by #2462
    
    Motivation:
    Because of not correctly release a buffer before null out the reference a memory leak shows up.
    
    Modifications:
    Correct call buffer.release() before null out reference.
    
    Result:
    No more leak

commit 1351349243128ea7048a98e01e65609af8628d96
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Sun May 4 15:08:07 2014 -0700

    SPDY: ensure SpdyHeaderBlockRawDecoder always reads entire input

commit 326efe5b4219f63f27c3449b2a326964cc47bfe5
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Sun May 4 13:18:58 2014 -0700

    SPDY: release headerBlock in SpdyFrameCodec

commit 1d9c431604cdc87b482d15134913747616111ddb
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Sun May 4 13:17:30 2014 -0700

    SPDY: remove unused code in SpdyHeaderBlockRawEncoder

commit d713f015da03a6d90230ebe723a6f33e26a6afca
Author: Sun Ning <nsun@avos.com>
Date:   Sun May 4 16:29:30 2014 +0800

    Made websocket maxFramePayloadSize configurable from WebSocketServerProtocolHandler.
    
    Motivation:
    
    Currently there's no way to configure maxFramePayloadSize from
    WebSocketServerProtocolHandler, which is the most used entry point of
    WebSocket server.
    
    Modifications:
    
    Added another constructor for maxFramePayloadSize.
    
    Result:
    
    We can configure max frame size for websocket packet in
    WebSocketServerProtocolHandler. It will also keep backward compatibility
    with default max size: 65536. (65536 is hard-coded max size in previous
    version of Netty)

commit 9752f37fa0100cb3cab1ae842630610abd4eb301
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun May 4 21:09:58 2014 +0200

    [#2454] Correctly return null when DefaultChannelPipeline.firstContext() is called on empty pipeline
    
    Motivation:
    DefaultChannelPipeline.firstContext() should return null when the ipeline is empty. This is not the case atm.
    
    Modification:
    Fix incorrect check in DefaultChannelPipeline.firstContext() and add unit tests.
    
    Result:
    Correctly return null when DefaultChannelPipeline.firstContext() is called on empty pipeline.

commit 9dbcf1af49979593d0d3d0cf4c6b8b16d1450927
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Fri May 2 09:12:55 2014 -0700

    SPDY: allow subclassing of SpdyFrameCodec

commit 296db210ab24b04e04a8b2dc7ac55cd17e964914
Author: Trustin Lee <t@motd.kr>
Date:   Sat May 3 17:28:28 2014 +0900

    Generate the default JAR to make oss.sonatype.org happy
    
    Motivation:
    
    oss.sonatype.org refuses to promote an artifact if it doesn't have the
    default JAR (the JAR without classifier.)
    
    Modifications:
    
    - Generate both the default JAR and the native JAR to make
      oss.sonatype.org happy
    - Rename the profile 'release' to 'restricted-release' which reflects
      what it really does better
    - Remove the redundant <quickbuild>true</quickbuild> in all/pom.xml
      We specify the profile 'full' that triggers that property already
      in maven-release-plugin configuration.
    
    Result:
    
    oss.sonatype.org is happy.  Simpler pom.xml

commit a566164b988488a138fd6222ecd7728a4a4a8ae9
Author: Trustin Lee <t@motd.kr>
Date:   Fri May 2 16:31:40 2014 +0900

    Enforce the release is performed only from RHEL 6.5 or equivalent
    
    Motivation:
    
    Netty must be released from RHEL 6.5 x86_64 or compatible so that:
    
    1) we ship x86_64 version of epoll transport officially, and
    2) we ensure the ABI compatibility with older GLIBC versions.
       The shared library built on a distribution with newer GLIBC will not
       run on older distributions.
    
    Modifications:
    
    - When 'release' profile is active, perform an additional check using
      maven-enforcer-plugin so that 'mvn release:*' fails when running on
      non-RHEL6.5.  This rule is active only when releasing, so a user
      should not be affected.
    - Simplify maven-release-plugin configuration by removing redundant
      profiles such as 'linux'.  'linux' is automatically activated when
      releasing because we now enforce the release occurs on linux-x86_64.
    - Remove the no-osgi profile, which is unused
    - Remove the reference to 'sonatype-oss-release' profile in all/pom.xml,
      because we always specify 'release' profile when releasing
    - Rename the profile 'linux-native' to 'linux' for brevity
    - Upgrade oss-parent and maven-enforcer-plugin
    
    Result:
    
    No one can make a mistake to release Netty on an environment that can
    produce incompatible or missing native library.

commit df93b350276c439f496bde9400130f207b4a9b04
Author: Trustin Lee <t@motd.kr>
Date:   Fri May 2 21:14:54 2014 +0900

    Upgrade os-maven-plugin to fix a build issue on windows-x86_32

commit 2ff06676ca54b1caf53ed73a063c4a1355236833
Author: Trustin Lee <t@motd.kr>
Date:   Fri May 2 14:35:30 2014 +0900

    Fix a build failure due to missing classifier

commit 6c1af9036fd2be2d3a943734f101c5643a21453e
Author: Trustin Lee <t@motd.kr>
Date:   Thu May 1 19:26:51 2014 +0900

    Simplify native library resolution using os-maven-plugin
    
    Motivation:
    
    So far, we used a very simple platform string such as linux64 and
    linux32.  However, this is far from perfection because it does not
    include anything about the CPU architecture.
    
    Also, the current build tries to put multiple versions of .so files into
    a single JAR.  This doesn't work very well when we have to ship for many
    different platforms.  Think about shipping .so/.dynlib files for both
    Linux and Mac OS X.
    
    Modification:
    
    - Use os-maven-plugin as an extension to determine the current OS and
      CPU architecture reliable at build time
    - Use Maven classifier instead of trying to put all shared libraries
      into a single JAR
    - NativeLibraryLoader does not guess the OS and bit mode anymore and it
      always looks for the same location regardless of platform, because the
      Maven classifier does the job instead.
    
    Result:
    
    Better scalable native library deployment and retrieval

commit 93fab1d5a3a45a8104e560118930c1d652dce8cb
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Apr 30 08:04:35 2014 +0200

    Remove ContinuationWebSocketFrame.aggregatedText()
    
    Motivation:
    Before we aggregated the full text in the WebSocket08FrameDecoder just to fill in the ContinuationWebSocketFrame.aggregatedText(). The problem was that there was no upper-limit and so it would be possible to see an OOME if the remote peer sends a TextWebSocketFrame + a never ending stream of ContinuationWebSocketFrames. Furthermore the aggregation does not really belong in the WebSocket08FrameDecoder, as we provide an extra ChannelHandler for this anyway (WebSocketFrameAggregator).
    
    Modification:
    Remove the ContinuationWebSocketFrame.aggregatedText() method and corresponding constructor. Also refactored WebSocket08FrameDecoder a bit to me more efficient which is now possible as we not need to aggregate here.
    
    Result:
    No more risk of OOME because of frames.

commit 0aea9eaed56968970da87684b7f8e1ca05b69b85
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Apr 30 12:31:41 2014 +0200

    Correctly write pending data after ssl handshake completes. Related to [#2437]
    
    Motivation:
    When writing data from a server before the ssl handshake completes may not be written at all to the remote peer
    if nothing else is written after the handshake was done.
    
    Modification:
    Correctly try to write pending data after the handshake was complete
    
    Result:
    Correctly write out all pending data

commit 3ba856a5f45c467b280ee37ff8d4f144f67eb819
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Apr 30 10:40:00 2014 +0200

    Correctly handle SocksCmdResponse. Related to #2428
    
    Motivation:
    Ports range check is not correct
    
    Modification:
    Allow port between 0 and 65535. 0 is wildcard / unknown port here
    
    Result:
    Correct validation

commit 80f1dfaec0a8b53a9a36a2ae5e9339e48b7c7a4c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Apr 30 06:56:22 2014 +0200

    [#2428] Proper fix of incorrect port range check
    
    Motivation:
    
    In the Internet Protocol, the valid port number range is from 1 to 65535
    (inclusive on the both side.)  However, SocksCmdRequest and SocksCmdResponse
    refuses to construct itself when the port number 65535 is specified. Beside
    this it excepts 0 as port number which should not allowed.
    
        Modification:
    
    * Not raise an exception when the specified port number is 65535.
    * Raise an exception when the specified port number is 0
    
    Result:
    
    Fixes #2428

commit 01ef614e77ec45d2b1abbe97e28d3fb6fe11bd13
Author: Trustin Lee <t@motd.kr>
Date:   Tue Apr 29 17:55:13 2014 +0900

    Fix incorrect port range check
    
    Motivation:
    
    In the Internet Protocol, the valid port number range is from 1 to 65535
    (inclusive on the both side.)  However, SocksCmdRequest refuses to
    construct itself when the port number 65535 is specified.
    
    Modification:
    
    Do not raise an exception when the specified port number is 65535.
    
    Result:
    
    Fixes #2428

commit e8b5f19b82eb116abb4e53a9fb1fa716e7623742
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Apr 25 20:38:44 2014 +0200

    Not cause busy loop when interrupt Thread of NioEventLoop
    
    Motivation:
    Because Thread.currentThread().interrupt() will unblock Selector.select() we need to take special care when check if we need to rebuild the Selector. If the unblock was caused by the interrupt() we will clear it and move on as this is most likely a bug in a custom ChannelHandler or a library the user makes use of.
    
    Modification:
    Clear the interrupt state of the Thread if the Selector was unblock because of an interrupt and the returned keys was 0.
    
    Result:
    No more busy loop caused by Thread.currentThread().interrupt()

commit 2f082cf9a2b6ef001340b059a2087488d5773568
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Fri Apr 25 13:26:41 2014 +0200

    Adding support for echoing the request origin for CORS.
    
    Motivation:
    When CORS has been configured to allow "*" origin, and at the same time
    is allowing credentials/cookies, this causes an error from the browser
    because when the response 'Access-Control-Allow-Credentials' header
    is true, the 'Access-Control-Allow-Origin' must be an actual origin.
    
    Modifications:
    Changed CorsHandler setOrigin method to check for the combination of "*"
    origin and allowCredentials, and if the check matches echo the CORS
    request's 'Origin' value.
    
    Result:
    This addition enables the echoing of the request 'Origin' value as the
    'Access-Control-Allow-Origin' value when the server has been configured
    to allow any origin in combination with allowCredentials.
    
    This allows client requests to succeed when expecting the server to
    be able to handle "*" origin and at the same time be able to send cookies
    by setting 'xhr.withCredentials=true'. A concrete example of this is
    the SockJS protocol which expects behaviour.

commit d8d822fddd34dedbeec5a78a9b880a90080a4db4
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Apr 25 08:46:10 2014 +0200

    Eliminate unnecessary extra synchronization in DefaultChannelPipeline
    
    Motivation:
    At the moment whenever we add/remove a ChannelHandler with an EventExecutorGroup we have two synchronization points in the execution path. One to find the childInvoker and one for add/remove itself. We can eliminate the former by call findIInvoker in the synchronization block, as we need to synchronize anyway.
    
    Modification:
    Remove the usage of AtomicFieldUpdater and the extra synchronization in findInvoker by moving the call of the method in the synchronized(this) block.
    
    Result:
    Less synchronization points and volatile reads/writes

commit 1492b32da7ee982628f2447d7c82951c7d57ae4f
Author: Trustin Lee <t@motd.kr>
Date:   Fri Apr 25 17:42:00 2014 +0900

    Code clean-up
    
    Motivation:
    
    It is less confusing not to spread Thread.interrupt() calls.
    
    Modification:
    
    - Comments
    - Move generatorThread.interrupt() to where currentThread.interrupt() is
      triggered
    
    Result:
    
    Code that is easier to read

commit 0fceef8ab675570a06d6d74c0e39185e6466f44f
Author: Trustin Lee <t@motd.kr>
Date:   Fri Apr 25 16:40:42 2014 +0900

    Undeprecate deregister() and chanelUnregistered()
    
    Motivation:
    
    As discussed in #2250, it will become much less complicated to implement
    deregistration and reregistration of a channel once #2250 is resolved.
    Therefore, there's no need to deprecate deregister() and
    channelUnregistered().
    
    Modification:
    
    - Undeprecate deregister() and channelUnregistered()
    - Remove SuppressWarnings annotations where applicable
    
    Result:
    
    We (including @jakobbuchgraber) are now ready to play with #2250 at
    master

commit d765f6b870fda68ccea79c1903f17f2127158e8c
Author: Trustin Lee <t@motd.kr>
Date:   Fri Apr 25 14:00:04 2014 +0900

    Synchronized between 4.1 and master (part 3)
    
    Motivation:
    
    4 and 5 were diverged long time ago and we recently reverted some of the
    early commits in master.  We must make sure 4.1 and master are not very
    different now.
    
    Modification:
    
    Fix found differences
    
    Result:
    
    4.1 and master got closer.

commit b9039eaa82e5651a4eeb444954cacbe64fff8b73
Author: Trustin Lee <t@motd.kr>
Date:   Fri Apr 25 14:00:04 2014 +0900

    Synchronized between 4.1 and master again (part 2)
    
    Motivation:
    4 and 5 were diverged long time ago and we recently reverted some of the
    early commits in master.  We must make sure 4.1 and master are not very
    different now.
    
    Modification:
    Remove ChannelHandlerInvoker.writeAndFlush(...) and the related
    implementations.
    
    Result:
    4.1 and master got closer.

commit 8c3eaf3b567df14934fb6f49357a872b671232aa
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Apr 24 21:28:24 2014 +0200

    Synchronized between 4.1 and master again
    
    Motivation:
    4 and 5 were diverged long time ago and we recently reverted some of the
    early commits in master.  We must make sure 4.1 and master are not very
    different now.
    
    Modification:
    Remove ChannelHandlerInvoker.writeAndFlush(...) and the related implementations.
    
    Result:
    4.1 and master got closer.

commit a2f1f216122eb40c849ffa31431c93a8988de124
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Apr 24 21:04:20 2014 +0200

    Synchronized between 4.1 and master
    
    Motivation:
    
    4 and 5 were diverged long time ago and we recently reverted some of the
    early commits in master.  We must make sure 4.1 and master are not very
    different now.
    
    Modification:
    
    Small adjustments to match up branches
    
    Result:
    
    4.1 and master got closer.

commit db3709e652dfc42514fd61698a4114941916ff7e
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 24 21:13:19 2014 +0900

    Synchronized between 4.1 and master
    
    Motivation:
    
    4 and 5 were diverged long time ago and we recently reverted some of the
    early commits in master.  We must make sure 4.1 and master are not very
    different now.
    
    Modification:
    
    Fix found differences
    
    Result:
    
    4.1 and master got closer.

commit 65ee10fbd042af8f67a6094be11a8fd605b30fa1
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Wed Apr 23 11:38:55 2014 +0200

    [codec-memcache] Avoid NPE on channelInactive.
    
    Motivation:
    When no currentMessage has been set and the channel is inactive, a NPE is raised.
    
    Modification:
    Make sure that a currentMessage is available before checking the extras.
    
    Result:
    No more NPE raised potentially.

commit 8fd2f1c88088af526242489cb234e00ec6c783d9
Author: Jens Reimann <jens.reimann@ibh-systems.com>
Date:   Wed Apr 23 10:07:25 2014 +0200

    Mark sun.nio.ch as optional
    
    Motivation:
    
    If sun.nio.ch is not optional this will cause troubles in the
    OSGi world. The package is not exposed by default in OSGi, so
    actually the whole netty framework cannot be used directly.
    
    There are workarounds, but workarounds are ugly. Especially since
    the use of sun.nio.ch is optional. So the requirement on the
    package should be optional as well.
    
    Modifications:
    
    Make the import of sun.nio.ch optional.
    
    Result:
    
    If the package cannot be imported it will behave as if the package
    sun.nio.ch is not present (like with other JVMs). If the package is
    exposed in OSGi (e.g. bootclassloader delegation, extension fragment)
    it will be used.

commit 81b0e2af02e1f6166890f96cf4c0d9c02f64189b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Apr 23 09:26:09 2014 +0200

    Make NioSocketChannelTest more bullet-proof
    
    Motivation:
    I had the NioSocketChannelTest.testFlushCloseReentrance() fail sometimes on one of my linux installation. This change let it pass all the time.
    
    Modification:
    Set the SO_SNDBUF to a small value to force split writes
    
    Result:
    Test is passing all the time where it was sometimes fail before.

commit 9afb56c3c6b4e19e5a831961c7907975dc135feb
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Apr 22 10:14:31 2014 +0200

    [#2414] Fix IllegalStateException when try to configure AbstractEpollChannel once it is deregistered
    
    Motivation:
    AbstractEpollChannel.clearEpollIn() throws an IllegalStateException if a user tries to change the autoRead configuration for the Channel and the Channel is not registered on an EventLoop yet. This makes it for example impossible to set AUTO_READ to false via the ServerBootstrap as the configuration is modifed before the Channel is registered.
    
    Modification:
    Check if the Channel is registered and if not just modify the flags directly so they are respected once the Channel is registered
    
    Result:
    It is possible now to configure AUTO_READ via the ServerBootstrap

commit ff4a89b5ae315425ab3b462a21e8477aa64c8e9e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Apr 21 11:16:07 2014 +0200

    [#2414] Fix RuntimeException during modify events via EpollEventLoop
    
    Motivation:
    We are currently try to modify the events via EpollEventLoop even when the channel was closed before and so the fd was set to -1. This fails with a RuntimeException in this case.
    
    Modification:
    Always check if the Channel is still open before try to modify the events.
    
    Result:
    No more RuntimeException because of a not open channel

commit 7ae40ace328e273fe5f46d4be009bbff5f94f1d9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Apr 20 19:47:48 2014 +0200

    [#2400] Not close LocalChannel during deregister() to allow register to other EventLoop
    
    Motivation:
    At the moment it is not possible to deregister a LocalChannel from its EventLoop and register it to another one as the LocalChannel is closed during the deregister.
    
    Modification:
    Not close the LocalChannel during dergister
    
    Result:
    It is now possible to deregister a LocalChannel and register it to another EventLoop

commit b5ab5150bea67885e56ad7db97b815af7ad1b7d7
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Apr 21 09:56:57 2014 +0200

    Use correct generics for TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT in EpollChannelOption. Part of [#2396]
    
    Motivation:
    Currently the generics used for TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT are incorrect.
    
    Modifications:
    Use Integer as type
    
    Result:
    User can use TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT as expected

commit a31f36d9331abac1125f397cde8cdcdf6c2cbcf8
Author: Trustin Lee <t@motd.kr>
Date:   Sun Apr 20 17:54:57 2014 +0900

    Stop ThreadLocalRandom's initial seed generation immediately on interruption
    
    Motivation:
    
    ThreadLocalRandomTest reveals that ThreadLocalRandom's initial seed generation loop becomes tight if the thread is interrupted.
    We currently interrupt ourselves inside the wait loop, which will raise an InterruptedException again in the next iteration, resulting in infinite (up to 3 seconds) exception construction and thread interruptions.
    
    Modification:
    
    - When the initial seed generator thread is interrupted, break out of the wait loop immediately.
    - Log properly when the initial seed generation failed due to interruption.
    - When failed to generate the initial seed, interrupt the generator thread just in case the SecureRandom implementation handles it properly.
    - Make the initial seed generator thread daemon and handle potential exceptions raised due to the interruption.
    
    Result:
    
    No more tight loop on interruption.  More robust generator thread termination. Fixes #2412

commit af9ab8b37016a666741c08e9c4a3e8634515cbac
Author: Trustin Lee <t@motd.kr>
Date:   Sun Apr 20 17:20:00 2014 +0900

    Feed only a single SSL record to SSLEngine.unwrap()
    
    Motivation:
    
    Some SSLEngine implementations violate the contract and raises an
    exception when SslHandler feeds an input buffer that contains multiple
    SSL records to SSLEngine.unwrap(), while the expected behavior is to
    decode the first record and return.
    
    Modification:
    
    - Modify SslHandler.decode() to keep the lengths of each record and feed
      SSLEngine.unwrap() record by record to work around the forementioned
      issue.
    - Rename unwrap() to unwrapMultiple() and unwrapNonApp()
    - Rename unwrap0() to unwrapSingle()
    
    Result:
    
    SslHandler now works OpenSSLEngine from finagle-native.  Performance
    impact remains unnoticeable.  Slightly better readability. Fixes #2116.

commit d854d3a617d6c24bee9368186aa268e476be70b7
Author: Martin Krüger <mkrueger92github@mkru.de>
Date:   Fri Apr 18 21:48:07 2014 +0200

    Fix chunk type for stream identifier
    
    Motivation:
    The problem with the current snappy implementation is that it does
    not comply with framing format definition found on
    https://code.google.com/p/snappy/source/browse/trunk/framing_format.txt
    
    The document describes that chunk type of the stream identifier is defined
    as 0xff. The current implentation uses 0x80.
    
    Modifications:
    This patch replaces the first byte of the chunk type of the stream identifier
    with 0xff.
    
    Result:
    After this modification the snappy implementation is compliant to the
    framing format described at
    https://code.google.com/p/snappy/source/browse/trunk/framing_format.txt.
    This results in a better compatibility with other implementations.

commit d6ec44c871e8598a62a2a403949fbc28d52898bc
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Apr 18 20:34:37 2014 +0200

    Fix buffer leak in EpollDatagramChannel
    
    Motivation:
    EpollDatagramChannel produced buffer leaks when tried to read from the channel and nothing was ready to be read.
    
    Modifications:
    Correctly release buffer if nothing was read
    
    Result:
    No buffer leak

commit 97553069b68a2b0f7b205b654ac761d8836786b3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Apr 17 21:41:04 2014 +0200

    [#2396] Allow to set TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT in native transport
    
    Motivation:
    Allow to set TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT in native transport to offer the user with more flexibility.
    
    Modifications:
    Expose methods to set these options and write the JNI implementation.
    
    Result:
    User can now use TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT.

commit e9161147a5b18fde5631cee5ae8b79d2550cd125
Author: Trustin Lee <t@motd.kr>
Date:   Fri Apr 18 17:59:48 2014 +0900

    Work around an Android SSLEngine issue
    
    Motivation:
    
    Some Android SSLEngine implementations skip FINISHED handshake status
    and go straightly into NOT_HANDSHAKING.  This behavior blocks SslHandler
    from notifying its handshakeFuture, because we do the notification when
    SSLEngine enters the FINISHED state.
    
    Modification:
    
    When the current handshake state is NOT_HANDSHAKING and the
    handshakeFuture is not fulfilled yet, treat NOT_HANDSHAKING as FINISHED.
    
    Result:
    
    Better Android compatibility - fixes #1823

commit 9e02a9bbee4cd3db1fa08955cb7fe4515bf3c50c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Apr 17 16:01:26 2014 +0200

    Move validatePromise(...) to ChannelHandlerInvokerUtil. Related to [#2398]
    
    Motivation:
    Once a user implement a custom ChannelHandlerInvoker it is needed to validate the ChannelPromise. We should expose a utility method for this.
    
    Modifications:
    Move validatePromise(...) from DefaultChannelHandlerInvoker to ChannelHandlerInvokerUtil and make it public.
    
    Result:
    User is able to reuse code

commit 18e2a45d7c38a674997cb022669f5d2b74b551be
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Apr 17 15:42:47 2014 +0200

    [#2401] Improve documentation of HttpObjectAggregator
    
    Motivation:
    Make it more clear what the output of HttpObjectAggregator is and that it need to come after the encoder in the pipeline.
    
    Modifications:
    Change javadocs to make things more clear.
    
    Result:
    Better docs

commit 9b670d819f321bf8f58084d928ff210dce4a8b9c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Apr 17 14:24:36 2014 +0200

    [#2144] Fix NPE in Local transport caused by a race
    
    Motivation:
    At the moment it is possible to see a NPE when the LocalSocketChannels doRegister() method is called and the LocalSocketChannels doClose() method is called before the registration was completed.
    
    Modifications:
    Make sure we delay the actual close until the registration task was executed.
    
    Result:
    No more NPE

commit 199d2b499c0091d992f8693d76b879c247f09d11
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Apr 17 11:19:00 2014 +0200

    [#2405] Add support for SO_REUSEPORT to EpollDatagramChannel
    
    Motivation:
    With SO_REUSEPORT it is possible to bind multiple sockets to the same port and so handle the processing of packets via multiple threads. This allows to handle DatagramPackets with more then one thread on the same port and so gives better performance.
    
    Modifications:
    Expose EpollDatagramChannelConfig.setReusePort(..) and isReusePort()
    
    Result:
    Allow to bind multiple times to the same local address and so archive better performance.

commit 20ef4690e74a7a5007468815f070a6c1f5074d0d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Apr 10 08:27:27 2014 +0200

    [#2375] [#2404] Fix bug in respecting ChannelConfig.setAutoRead(false) and also fix Channel.read() for OIO
    
    Motivation:
    At the moment ChanneConfig.setAutoRead(false) only is guaranteer to not have an extra channelRead(...) triggered when used from within the channelRead(...) or channelReadComplete(...) method. This is not the correct behaviour as it should also work from other methods that are triggered from within the EventLoop. For example a valid use case is to have it called from within a ChannelFutureListener, which currently not work as expected.
    
    Beside this there is another bug which is kind of related. Currently Channel.read() will not work as expected for OIO as we will stop try to read even if nothing could be read there after one read operation on the socket (when the SO_TIMEOUT kicks in).
    
    Modifications:
    Implement the logic the right way for the NIO/OIO/SCTP and native transport, specific to the transport implementation. Also correctly handle Channel.read() for OIO transport by trigger a new read if SO_TIMEOUT was catched.
    
    Result:
    It is now also possible to use ChannelConfig.setAutoRead(false) from other methods that are called from within the EventLoop and have direct effect.
    
    Conflicts:
    	transport-sctp/src/main/java/io/netty/channel/sctp/nio/NioSctpChannel.java
    	transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java
    	transport/src/main/java/io/netty/channel/socket/nio/NioSocketChannel.java

commit 91b378005461b85f965aa296daa087bc009b9da0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Apr 11 21:08:26 2014 +0200

    [#2377] Implement epoll based DatagramChannel
    
    Motivation:
    There is currently no epoll based DatagramChannel. We should add one to make the set of provided channels complete and also to be able to offer better performance compared to the NioDatagramChannel once SO_REUSEPORT is implemented.
    
    Modifications:
    Add implementation of DatagramChannel which uses epoll. This implementation does currently not support multicast yet which will me implemented later on. As most users will not use multicast anyway I think it is fair to just add the EpollDatagramChannel without the support for now. We shipped NioDatagramChannel without support earlier too ...
    
    Result:
    Be able to use EpollDatagramChannel for max. performance on linux

commit 6615d72db072b02a2dd66620d4ac58b8785350d2
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Apr 11 15:54:31 2014 +0200

    [#2376] Add support for SO_REUSEPORT in native transport
    
    Motivation:
    In linux kernel 3.9 a new featured named SO_REUSEPORT was introduced which allows to have multiple sockets bind to the same port and so handle the accept() of new connections with multiple threads. This can greatly improve the performance when you not to accept a lot of connections.
    
    Modifications:
    Implement SO_REUSEPORT via JNI
    
    Result:
    Be able to use the SO_REUSEPORT feature when using the EpollServerSocketChannel

commit 40bcb17bf9f6c94eb01049c470050fa02e4d5e17
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Apr 16 14:01:50 2014 +0200

     Fix missed buffer leaks in SpdyFrameDecoderTest
    
     Motivation:
     Fix leaks reported during running SpdyFrameDecoderTest
    
    Modifications:
    Make sure the produced buffers of SpdyFrameDecoder and SpdyFrameDecoderTest are released
    
    Result:
    
    No more leak reports during run the tests.

commit 2e8e7e486ad86841b40b877b5af8491761712beb
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Apr 16 10:45:45 2014 +0200

    Fix buffer leaks in SpdyFrameDecoderTest
    
    Motivation:
    
    Fix leaks reported during running SpdyFrameDecoderTest
    
    Modifications:
    Make sure the produced buffer of SpdyFrameDecoder is released
    
    Result:
    
    No more leak reports during run the tests.

commit 71f5bb84a6370f229169512688fde24e9746f1d8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Apr 16 06:49:25 2014 +0200

    Fix buffer leaks in SPDY test
    
    Motivation:
    
    Fix leaks reported during SPDY test.
    
    Modifications:
    
    Use ReferenceCountUtil.releaseLater(...) to make sure everything is released once the tests are done.
    
    Result:
    
    No more leak reports during run the tests.

commit 7808b9926d26e8abc0571bcffdbc134195d7b949
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Sun Apr 13 13:55:29 2014 -0700

    SPDY: refactor frame codec implementation
    
    Motivation:
    
    Currently, the SPDY frame encoding and decoding code is based upon
    the ChannelHandler abstraction. This requires maintaining multiple
    versions for 3.x and 4.x (and possibly 5.x moving forward).
    
    Modifications:
    
    The SPDY frame encoding and decoding code is separated from the
    ChannelHandler and SpdyFrame abstractions. Also test coverage is
    improved.
    
    Result:
    
    SpdyFrameCodec now implements the ChannelHandler abstraction and is
    responsible for creating and handling SpdyFrame objects.

commit 15d11289b0406ae2d12b5e7337701cc676791a59
Author: ian <ian@addthis.com>
Date:   Mon Apr 14 16:57:24 2014 -0400

    Fix error that causes (up to) double memory usage
    
    Motivation:
    
    PoolArena's 'normalizeCapacity' function was micro-optimized some
    time ago to remove a while loop. However, there was a change of
    behavior in the function as a result. Capacities passed into it
    that are already powers of 2 (and >= 512) are doubled in size. So
    if I ask for a buffer with a capacity of 1024, I will get back one
    that actually uses 2048 bytes (stored in maxLength).
    
    Aligning to powers of two for book keeping ease is reasonable,
    and if someone tries to expand a buffer, you might as well use some
    of the previously wasted space. However, since this distinction
    between 'easily expanded' and 'costly to expand' space is not
    supported at all by the APIs, I cannot imagine this change to
    doubling is desirable or intentional.
    
    This is especially costly when using composite buffers. They
    frequently allocate components with a capacity that is a power of
    2, and they never attempt to expand components themselves. The end
    result is that heavy use of pool-backed composite buffers wastes
    almost half of the memory pool (the smaller / initial components are
    <512 and so are not affected by the off-by-one bug).
    
    Modifications:
    
    Although I find it difficult to believe that such an optimization
    is really helpful, I left it in and fixed the off-by-one issue by
    decrementing the value at the start.
    
    I also added a simple test to both attempt to verify that the
    decrement fixes the issue without introducing any other change, and
    to make it easy for a reviewer to test the existing behavior. PoolArena
    does not seem to have much testing or testability support though so
    the test is kind of a hack and will break for unrelated changes. I
    suggest either removing it or factoring out the single non-static
    portion of normalizeCapacity so that the fragile dummy PoolArena is
    not required.
    
    Result:
    
    Pooled allocators will allocate less resources to the highly
    inefficient and undocumented buffer section between length and
    maxLength.
    
    Composite buffers of non-trivial size that are backed by pooled
    allocators will use about half as much memory.

commit 17334a0a427458f0387f708825d23d756d36a2f8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Apr 15 06:40:15 2014 +0200

    [#2390] Minimize memory usage of NioDatagramChannel
    
    Motivation:
    At the moment we create a HashMap that holds the MembershipKeys for multicast with every NioDatagramChannel even when most people not need it at al
    
    Modifications:
    Lazy create the HashMap when needed.
    
    Result:
    Less memory usage and less object creation

commit 837ddc01d25a61e79de4fa907a49f6f225c09273
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Fri Apr 11 12:16:28 2014 +0200

    [example-memcache] fix formatting introduced by the memcache examples.

commit 7a6fa73989753662de1e2b3527d54939d8218040
Author: Matthew Leventi <mleventi@gmail.com>
Date:   Sat Jan 25 16:39:14 2014 -0800

    Add a Example for Memcache Binary Codec
    
    Motivation:
    Currently, there exists no example which shows how to use the memcache binary
    protocol.
    
    Modifications:
    Add an example client and client handler to show how to utilize the binary
    protocol in a memcache client with a simple interactive shell.
    
    Result:
    Users looking for an example can now start off with the provided one.

commit ad955fa8a488ba592f6426d714cad250a1bfd92f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Apr 9 14:22:23 2014 +0200

    [#2371] Fix Potential data corruption in EpollSocketChannel when writing to the Channel
    
    Motivation:
    We sometimes see data corruption when writing to the EpollSocketChannel.
    
    Modifications:
    Correctly update the position of the ByteBuffer after something was written.
    
    Result:
    Fix data-corruption which could happen on partial writes

commit ceffa82d0d341c08804554441601fdf253227fa9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Apr 9 11:07:14 2014 +0200

    [#2370] Periodically check for not alive Threads and free up their ThreadPoolCache
    
    Motivation:
    At the moment we create new ThreadPoolCache whenever a Thread tries either allocate or release something on the PooledByteBufAllocator. When something is released we put it then in its ThreadPoolCache. The problem is we never check if a Thread is not alive anymore and so we may end up with memory that is never freed again if a user create many short living Threads that use the PooledByteBufAllocator.
    
    Modifications:
    Periodically check if the Thread is still alive that has a ThreadPoolCache assinged and if not free it.
    
    Result:
    Memory is freed up correctly even for short living Threads.

commit 88481131be5bc565335a37081c17fb62d023f923
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Apr 8 13:56:14 2014 +0200

    [#2353] Use a privileged block to get ClassLoader and System property if needed
    
    Motivation:
    When using System.getProperty(...) and various methods to get a ClassLoader it will fail when a SecurityManager is in place.
    
    Modifications:
    Use a priveled block if needed. This work is based in the PR #2353 done by @anilsaldhana .
    
    Result:
    Code works also when SecurityManager is present

commit cb9660f83d45ab439b4f4ba751131dcadb1913c2
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Apr 6 20:49:03 2014 +0200

    Allow the user to call slice().retain() or duplicate.retain() in his/her ByteToMessageDecoder.decode(...) method.
    
    Motivation:
    At the moment a user can not safetly call slice().retain() or duplicate.retain()in the ByteToMessageDecoder.decode(...) implementation without the risk to see coruption because we may call discardSomeReadBytes() to make room on the buffer once the handling is done.
    
    Modifications:
    Check for the refCnt() before call discardSomeReadBytes() and also check before call decode(...) to create a copy if needed.
    
    Result:
    The user can safetly call slice().retain() or duplicate.retain() in his/her ByteToMessageDecoder.decode(...) method.

commit 1087160fa7fa024991d8944dfe2823429773bc5c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Apr 5 19:27:09 2014 +0200

    [#2363] SelectedSelectionKeySet may hold strong reference to SelectionKey after Channel is closed
    
    Motivation:
    Because we not null out the array entry in the SelectionKey[] which is produced by SelectedSelectionKeySet.flip() we may end up with a few SelectionKeyreferences still hanging around here even after the Channel was closed. As these entries may be present at the end of the SelectionKey[] which is never updated for a long time as not enough SelectionKeys are ready.
    
    Modifications:
    Once we access the SelectionKey out of the SelectionKey[] we directly null it out.
    
    Result:
    Reference can be GC'ed right away once the Channel was closed.

commit 791c38befe1885cad549460a4de6d9d0b5d5cc68
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Apr 4 15:22:06 2014 +0200

    [#2359] EpollSocketChannel.remoteAddress0() is always null on accepted EpollSocketChannels
    
    Motivation:
    EpollSocketChannel.remoteAddress0() is always null on accepted EpollSocketChannels as we not set it excplicit.
    
    Modifications:
    Correctly retrieve the local and remote address when accept new channel and store it
    
    Result:
    EpollSocketchannel.remoteAddress0() and EpollSocketChannel.localAddress0() return correct addresses

commit fdb1db90c47f5a793d4740e5f6fd2d96045cd2aa
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Apr 4 09:45:03 2014 +0200

    [#2362] AbstractChannel.AbstractUnsafe.write(...) is slow
    
    Motivation:
    At the moment we do a Channel.isActive() check in every AbstractChannel.AbstractUnsafe.write(...) call which gives quite some overhead as shown in the profiler when you write fast enough. We can eliminate the check and do something more smart here.
    
    Modifications:
    Remove the isActive() check and just check if the ChannelOutboundBuffer was set to null before, which means the Channel was closed. The rest will be handled in flush0() anyway.
    
    Result:
    Less overhead when doing many write calls

commit 2fa79b2d5d7f99dfba48be605dac4ab9a3e7d90e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Apr 4 07:45:23 2014 +0200

    [#2361] Native.epollCreate(...) fails on systems using a kernel < 2.6.27 / glibc < 2.9
    
    Motivation:
    Native.epollCreate(...) fails on systems using a kernel < 2.6.27 / glibc < 2.9 because it uses epoll_create1(...) without checking if it is present
    
    Modifications:
    Check if epoll_create1(...) exists abd if not fall back to use epoll_create(...)
    
    Result:
    Works even on systems with kernel < 2.6.27 / glibc < 2.9

commit 3eec26b0a24e07601cb222a4d2b17442bd338fc2
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Apr 3 13:27:33 2014 +0200

    [#2358] SslHandler.safeClose(...) may not notify the ChannelPromise
    
    Motivation:
    In SslHandler.safeClose(...) we attach a ChannelFutureListener to the flushFuture and will notify the ChannelPromise which was used for close(...) in it. The problem here is that we only call ChannelHandlerContext.close(ChannelPromise) if Channel.isActive() is true and otherwise not notify it at all. We should just call ChannelHandlerContext.close(ChannelPromise) in all cases.
    
    Modifications:
    Always call ChannelHandlerContext.close(ChannelPromise) in the ChannelFutureListeiner
    
    Result:
    ChannelPromise used for close the Channel is notified in all cases

commit 772a9d261094463d35df86f2c9e1548e4ba96ff0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Mar 31 07:29:31 2014 +0200

    [#2349] Correctly handle cancelled ChannelPromise in DefaultChannelHandlerContext
    
    Motivation:
    At the moment an IllegalArgumentException will be thrown if a ChannelPromise is cancelled while propagate through the ChannelPipeline. This is not correct, we should just stop to propagate it as it is valid to cancel at any time.
    
    Modifications:
    Stop propagate the operation through the ChannelPipeline once a ChannelPromise is cancelled.
    
    Result:
    No more IllegalArgumentException when cancel a ChannelPromise while moving through the ChannelPipeline.

commit 4fc9afa1023935b674f624933fc2510702d1c2b5
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Sun Mar 30 09:19:06 2014 +0200

    Adding origins whitelist support for CORS
    
    Motivation:
    Currently the CORS support only handles a single origin, or a wildcard
    origin. This task should enhance Netty's CORS support to allow multiple
    origins to be specified. Just being allowed to specify one origin is
    particulary limiting when a site support both http and https for
    example.
    
    Modifications:
    - Updated CorsConfig and its Builder to accept multiple origins.
    
    Result:
    Users are now able to configure multiple origins for CORS.
    
    [https://github.com/netty/netty/issues/2346]

commit cf9c1f946add66c079096338dfe41beea14ceadc
Author: Ian Barfield <ian.barfield@gmail.com>
Date:   Fri Mar 28 13:34:31 2014 -0400

    Deleting redundant needsFlush boolean
    
    Motivation:
    
    In ChunkedWriteHandler, there is a redundant variable that servers
    no purpose. It implies that under some conditions you might not want
    to flush.
    
    Modifications:
    
    Removed the variable and the if condition that read it. The boolean
    was always true so just removing the if statement was fine.
    
    Result:
    
    Slightly less misleading code.

commit 2a4999b6b851645109abb0918236afc78548f771
Author: Alexey Diomin <xhumanoid@gmail.com>
Date:   Mon Mar 24 18:36:54 2014 +0300

    [#2339] Reduce memory usage in ProtobufVarint32LengthFieldPrepender
    
    Motivation:
    
    Reduce memory usage in ProtobufVarint32LengthFieldPrepender.
    
    Modifications:
    
    Explicit set the buffer size that is needed for the header (between 1 and 5 bytes).
    
    Result:
    
    Less memory usage in ProtobufVarint32LengthFieldPrepender.

commit 844362a947e7fea7e8df65636749708f9b068c81
Author: Trustin Lee <t@motd.kr>
Date:   Mon Mar 24 18:09:27 2014 +0900

    User-definable thread model via ChannelHandlerInvoker
    
    Motivation:
    
    While the default thread model provided by Netty is reasonable enough for most applications, some users might have a special requirement for the thread model.  Here are a few examples:
    
    - A user might want to invoke handlers from the caller thread directly, assuming that his or her application is completely asynchronous and does not make any invocation from non-I/O thread.  In this case, the default invoker implementation will only add the overhead of checking if the current thread is an I/O thread or not.
    - A user might want to invoke handlers from different threads depending on the type of events flexibly.
    
    Modifications:
    
    - Backport 132af3a485015ff912bd567a47881814d2ce1828 which is a fix for #1912
      - Add a new interface called 'ChannelHandlerInvoker' that performs the invocation of event handler methods.
      - Add pipeline manipulation methods that accept ChannelHandlerInvoker
    - The differences from the original commit:
      - Separated the irrelevant changes out
      - Channel.eventLoop is null until the registration is complete in this branch, so Channel.Unsafe.invoker() doesn't work before registration.
      - Deregistration is not gone in this branch, so the methods related with deregistration were added to ChannelHandlerInvoker

commit 6d4c4d9e4b70bf34ddf72a39abe84343f96e2d63
Author: Trustin Lee <t@motd.kr>
Date:   Mon Mar 24 17:05:36 2014 +0900

    Correct the return type of MultithreadEventLoopGroup.newChild()
    
    Motivation:
    
    MultithreadEventLoopGroup.newChild() does not override MultithreadEventExecutorGroup.newChild() which returns EventExecutor.  MultithreadEventLoopGroup.newChild() should never return an EventExecutor, so this is incorrect.
    
    Modifications:
    
    Override MultithreadEventLoopGroup.newChild() so that it returns EventLoop
    
    Result:
    
    Correct API

commit aeb6ba56844513760e6b586965c359691db6c541
Author: Trustin Lee <t@motd.kr>
Date:   Mon Mar 24 16:04:33 2014 +0900

    Update the Javadoc of ChannelHandler and ChannelHandlerContext
    
    Motivation:
    
    It's out of date and it has broken links, etc.
    
    Modifications:
    
    Backport the fixes from master (132af3a485015ff912bd567a47881814d2ce1828)
    
    Result:
    
    Better Javadoc

commit 7dc63ccd95f362a17c777765c08df7d45114169f
Author: Trustin Lee <t@motd.kr>
Date:   Mon Mar 24 12:32:55 2014 +0900

    Add EventExecutor.children() in favor of iterator()
    
    Motivation:
    
    EventExecutor.iterator() is fixed to return Iterator<EventExecutor> and there's no way to change that as long as we don't extend Iterable.  However, a user should have a way to cast the returned set of executors painlessly.  Currently, it is only possible with an explicit cast like (Iterator<NioEventLoop>).
    
    Modifications:
    
    Instead, I added a new method called 'children()' which returns an immutable collection of child executors whose method signature looks like the following:
    
        <E extends EventExecutor> Set<E> children();
    
    Result:
    
    A user can now do this:
    
        Set<NioEventLoop> loops = group.children();
        for (NioEventLoop l: loops) { ... }
    
    Unfortunately, this is not possible:
    
        for (NioEventLoop l: group.children()) { ... }
    
    However, it's still a gain that a user doesn't need to down-cast explicitly and to add the '@SuppressWarnings` annotation.

commit 1e3b7d8273c0b4f651ead36fd7b01b397056e89e
Author: Trustin Lee <t@motd.kr>
Date:   Mon Mar 24 11:39:55 2014 +0900

    Replace LocalEventLoopGroup with DefaultEventLoopGroup
    
    Motivation:
    
    LocalEventLoopGroup and LocalEventLoop are not really special for LocalChannels.  It can be used for other channel implementations as long as they don't require special handling.
    
    Modifications:
    
    - Add DefaultEventLoopGroup and DefaultEventLoop
    - Deprecate LocalEventLoopGroup and make it extend DefaultEventLoopGroup
    - Add DefaultEventLoop and remove LocalEventLoop
    - Fix inspector warnings
    
    Result:
    
    - Better class names.

commit 924113ce8c48c043fc666e71f50ae0fb1c82e41b
Author: Trustin Lee <t@motd.kr>
Date:   Mon Mar 24 11:18:03 2014 +0900

    Make DefaultEventExecutor usable by users.
    
    Motivation:
    
    There's no reason to keep our users from using DefaultEventExecutor directly.  It should be actually very useful to them.
    
    Modifications:
    
    Make DefaultEventExecutor public and add useful public constructors.
    
    Result:
    
    DefaultEventExecutor got usable by anyone, yielding more value as a generic library.

commit 4332821e6f501c4b721314846e8f00d8ab82de69
Author: Trustin Lee <t@motd.kr>
Date:   Mon Mar 24 11:12:17 2014 +0900

    Use common non-magic number for shutdown timeout
    
    Motivation:
    
    AbstractEventExecutor and AbstractEventExecutorGroup have hard-coded magic timeout numbers.  They should have the same timeout numbers, but it's easy to break that rule because they are hard-coded in each place.
    
    Modifications:
    
    Add package private constants to AbstractEventExecutor and let AbstractEventExecutorGroup use them.
    
    Result:
    
    Single timeout change affects two classes.

commit 007694b963ec136b1be6f791e8ffbd0c93813222
Author: Trustin Lee <t@motd.kr>
Date:   Mon Mar 24 11:05:51 2014 +0900

    Implement EventExecutor.parent() in AbstractEventExecutor
    
    Motivation:
    
    EventExecutor.parent() and EventLoop.parent() almost always return a constant parent executor.  There's not much reason to let it implemented in subclasses.
    
    Modifications:
    
    - Implement AbstractEventExecutor.parent() with an additional contructor
    - Add AbstractEventLoop so that subclasses extend AbstractEventLoop, which implements parent() appropriately
    - Remove redundant parent() implementations in the subclasses
    - Fix inspector warnings
    
    Result:
    
    Less duplication.

commit ac5e838398ee57229bd972a1813b29a4aaf11fb1
Author: CoNDoRip <cndr.ip@gmail.com>
Date:   Sun Mar 23 13:09:41 2014 +0400

    Allow specifying `SelectorProvider` when constructing an NIO channel #2311
    
    Motivation:
    
    At the moment we use the system-wide default selector provider for this invocation of the Java virtual machine when constructing a new NIO channel, which makes using an alternative SelectorProvider practically useless.
    This change allows user specify his/her preferred SelectorProvider.
    
    Modifications:
    
    Add SelectorProvider as a param for current `private static *Channel newSocket` method of NioSocketChannel, NioServerSocketChannel and NioDatagramChannel.
    Change default constructors of NioSocketChannel, NioServerSocketChannel and NioDatagramChannel to use DEFAULT_SELECTOR_PROVIDER when calling newSocket(SelectorProvider).
    Add new constructors for NioSocketChannel, NioServerSocketChannel and NioDatagramChannel which allow user specify his/her preferred SelectorProvider.
    
    Result:
    
    Now users can specify his/her preferred SelectorProvider when constructing an NIO channel.

commit 32ccdcdb189996211bff873b8cf2cd42f66f5a5e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Mar 22 15:01:49 2014 +0100

    Make sure the local / remote InetSocketAddres can be obtained. Part of [#2262]
    
    Motivation:
    Make sure the remote/local InetSocketAddress can be obtained correctly
    
    Modifications:
    Set the remote/local InetSocketAddress after a bind/connect operation was performed
    
    Result:
    It is possible to still access the informations even after the fd became invalid. This mirror the behaviour of NIO.

commit 6bce61bf1b9008efc543c3d8a88956718c087141
Author: Brendt Lucas <brendt@idnet.com>
Date:   Fri Mar 21 09:13:23 2014 +0000

    [#2234] Use QueryStringDecoder.decodeComponent to decode url-encoded data instead of Java's URLDecoder.
    
    Motivation:
    Previously, we used URLDecoder.decode(...) to decode url-encoded data. This generates a lot of garbage and takes a considerable amount of time.
    
    Modifications:
    Replace URLDecoder.decode(...) with QueryStringDecoder.decodeComponent(...)
    
    Result:
    Less garbage to GC and faster decode processing.

commit 110878fe2c86cf07100dfbb3e97701e94107c915
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Sat Mar 22 07:20:10 2014 +0100

    Fixing CorsConfigTest failure under Java 8.
    
    Motivation:
    When running the build with Java 8 the following error occurred:
    
    java: reference to preflightResponseHeader is ambiguous
      both method
      <T>preflightResponseHeader(java.lang.CharSequence,java.lang.Iterable<T>)
      in io.netty.handler.codec.http.cors.CorsConfig.Builder and method
      <T>preflightResponseHeader(java.lang.String,java.util.concurrent.Callable<T>)
      in io.netty.handler.codec.http.cors.CorsConfig.Builder match
    
    The offending class was CorsConfigTest and its shouldThrowIfValueIsNull
    which contained the following line:
    withOrigin("*").preflightResponseHeader("HeaderName", null).build();
    
    Modifications:
    Updated the offending method with to supply a type, and object array, to
    avoid the error.
    
    Result:
    After this I was able to build with Java 7 and Java 8

commit 74f418bace1bb905ddeff3256c0553d21f884f98
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Sat Mar 8 16:30:54 2014 +0100

    Adding support for specifying preflight response headers.
    
    Motivation:
    
    An intermediary like a load balancer might require that a Cross Origin
    Resource Sharing (CORS) preflight request have certain headers set.
    As a concrete example the Elastic Load Balancer (ELB) requires the
    'Date' and 'Content-Length' header to be set or it will fail with a 502
    error code.
    
    This works is an enhancement of https://github.com/netty/netty/pull/2290
    
    Modifications:
    
    CorsConfig has been extended to make additional HTTP response headers
    configurable for preflight responses. Since some headers, like the
    'Date' header need to be generated each time, m0wfo suggested using a
    Callable.
    
    Result:
    
    By default, the 'Date' and 'Content-Lenght' headers will be sent in a
    preflight response. This can be overriden and users can specify
    any headers that might be required by different intermediaries.

commit 2215ed0a353f8a63b8962a911f507d2dbb0969b5
Author: Trustin Lee <t@motd.kr>
Date:   Fri Mar 21 13:43:15 2014 +0900

    Use SecureRandom.generateSeed() to generate ThreadLocalRandom's initialSeedUniquifier
    
    Motivation:
    
    Previously, we used SecureRandom.nextLong() to generate the initialSeedUniquifier.  This required more entrophy than necessary because it has to 1) generate the seed of SecureRandom first and then 2) generate a random long integer.  Instead, we can use generateSeed() to skip the step (2)
    
    Modifications:
    
    Use generateSeed() instead of nextLong()
    
    Result:
    
    ThreadLocalRandom requires less amount of entrphy to start up

commit b5c97bcc8215033a38b5c77fba2614bf72523b5a
Author: Trustin Lee <t@motd.kr>
Date:   Fri Mar 21 12:58:58 2014 +0900

    Use the length of MAC address as the last property to compare to get the best MAC address
    
    Motivation:
    
    Some operating systems like Windows 7 uses a valid globally unique EUI-64 MAC address for a virtual device (e.g. 00:00:00:00:00:00:00:E0), and because it's usually longer than the legit MAC-48 address, we should not use the length of MAC address when two MAC addresses are of the same quality.  Instead, we should compare the INET address of the NICs before comparing the length of the MAC addresses.
    
    Modification:
    
    Compare the length of MAC addresses as a last resort.
    
    Result:
    
    Correct MAC address detection in Windows with IPv6 enabled.

commit 3613d2d59ea9486c5d9aaaf4499f02e85dda8c8b
Author: Trustin Lee <t@motd.kr>
Date:   Fri Mar 21 12:32:26 2014 +0900

    Prefer the NIC with global IP address when getting the default machine ID
    
    Motivation:
    
    When there are two MAC addresses which are good enough, we can choose the one with better IP address rather than just choosing the first appeared one.
    
    Modification:
    
    Replace isBetterAddress() with compareAddresses() to make it return if both addresses are in the same preference level.
    Add compareAddresses() which compare InetAddresses and use it when compareAddress(byte[], byte[]) returns 0 (same preference)
    
    Result:
    
    More correct primary MAC address detection

commit ff179c343038fea5df3c989386d3422c60f2eb34
Author: Trustin Lee <t@motd.kr>
Date:   Fri Mar 21 11:39:41 2014 +0900

    Reduce the time taken by NetUtil and DefaultChannelId class initialization
    
    Motivation:
    
    As reported in #2331, some query operations in NetworkInterface takes much longer time than we expected.  For example, specifying -Djava.net.preferIPv4Stack=true option in Window increases the execution time by more than 4 times.  Some Windows systems have more than 20 network interfaces, and this problem gets bigger as the number of unused (virtual) NICs increases.
    
    Modification:
    
    Use NetworkInterface.getInetAddresses() wherever possible.
    Before iterating over all NICs reported by NetworkInterface, filter the NICs without proper InetAddresses.  This reduces the number of candidates quite a lot.
    NetUtil does not query hardware address of NIC in the first place but uses InetAddress.isLoopbackAddress().
    Do not call unnecessary query operations on NetworkInterface.  Just get hardware address and compare.
    
    Result:
    
    Significantly reduced class initialization time, which should fix #2331.

commit 8429ecfcc410d22402a6b7ea2b409908190d6428
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Mar 1 15:47:03 2014 +0100

    Implement Thread caches for pooled buffers to minimize conditions. This fixes [#2264] and [#808].
    
    Motivation:
    Remove the synchronization bottleneck in PoolArena and so speed up things
    
    Modifications:
    
    This implementation uses kind of the same technics as outlined in the jemalloc paper and jemalloc
    blogpost https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919.
    
    At the moment we only cache for "known" Threads (that powers EventExecutors) and not for others to keep the overhead
    minimal when need to free up unused buffers in the cache and free up cached buffers once the Thread completes. Here
    we use multi-level caches for tiny, small and normal allocations. Huge allocations are not cached at all to keep the
    memory usage at a sane level. All the different cache configurations can be adjusted via system properties or the constructor
    directly where it makes sense.
    
    Result:
    Less conditions as most allocations can be served by the cache itself

commit 19422972e3f6515bfc45b3a9950d627256fcabee
Author: Trustin Lee <t@motd.kr>
Date:   Thu Mar 20 11:11:07 2014 +0900

    Fix and simplify freeing a direct buffer / Fix Android support
    
    Motivation:
    
    6e8ba291cfcb325fe4397a8e7db43579070e7a07 introduced a regression in Android because Android does not have sun.nio.ch.DirectBuffer (see #2330.)  I also found PlatformDependent0.freeDirectBuffer() and freeDirectBufferUnsafe() are pretty much same after the commit and the unsafe version should be removed.
    
    Modifications:
    
    - Do not use the pooled allocator in Android because it's too resource hungry for Androids.
    - Merge PlatformDependent0.freeDirectBuffer() and freeDirectBufferUnsafe() into one method.
    - Make the Unsafe unavailable when sun.nio.ch.DirectBuffer is unavailable.  We could keep the Unsafe available and handle the sun.nio.ch.DirectBuffer case separately, but I don't want to complicate our code just because of that.  All supported JDK versions have sun.nio.ch.DirectBuffer if the Unsafe is available.
    
    Result:
    
    Simpler code. Fixes Android support (#2330)

commit 9fe9710315bb89b015a3de0fbf4c1019a10e5c85
Author: Trustin Lee <t@motd.kr>
Date:   Tue Mar 18 16:25:32 2014 +0900

    Rename "io.netty.recycler.maxCapacity.default" to "io.netty.recycler.maxCapacity"
    
    Motivation:
    
    'io.netty.recycler.maxCapacity.default' is the only property for recycler's default maximum capacity, so having the 'default' suffix only increases the length of the property name.
    
    Modifications:
    
    Rename "io.netty.recycler.maxCapacity.default" to "io.netty.recycler.maxCapacity"
    
    Result:
    
    Shorter system property name. The future addition of system properties, such as io.netty.recycler.maxCapacity.outboundBuffer, are not confusing either.

commit 985656314450cba9908765ca8373ed296ee1c6a8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Mar 14 08:47:18 2014 +0100

    Replace usage of System.currentTimeMillis() with System.nanoTime()
    
    Motivation:
    
    Currently we use System.currentTimeMillis() in our timeout handlers this is bad
    for various reasons like when the clock adjusts etc.
    
    Modifications:
    
    Replace System.currentTimeMillis() with System.nanoTime()
    
    Result:
    
    More robust timeout handling

commit 1bce46dbb37e79c5d5793646064f029cdac0e5ef
Author: Jakob Buchgraber <jakob.buchgraber@tum.de>
Date:   Mon Mar 17 16:32:39 2014 +0100

    Bit tricks to check for and calculate power of two.
    
    Motivation:
    I was studying the code and thought this was simpler and easier to
    understand.
    
    Modifications:
    Replaced the for loop and if conditions, with a simple implementation.
    
    Result:
    Code is easier to understand.

commit b79f0cb1d3e9b689edd5ef7054f1fe44b4bfa667
Author: Trustin Lee <t@motd.kr>
Date:   Mon Mar 17 14:17:08 2014 +0900

    Add -verbose:gc option for test runs
    
    Motivation:
    
    While investigating the recent CI machine crashes, I observed that the
    JVM processes spawned by surefire sometimes take up to 1 GiB RAM.
    Consuming large amount of memory isn't really a problem, but we need to
    make sure no GC trashing is occuring during the tests.
    
    Modifications:
    
    Add -verbose:gc option to the test JVM arguments
    
    Result:
    
    We can determine if there is any GC anomalies going on in our CI
    machine.

commit c87db9b17ac258f398d69a40832b2f45439e7f99
Author: Trustin Lee <t@motd.kr>
Date:   Mon Mar 17 10:53:49 2014 +0900

    Reduce SO_TIMEOUT of testsuite so it finishes sooner
    
    Motivation:
    
    Testing the OIO transport takes longer time than other transports because it has to wait for SO_TIMEOUT if there is nothing to read.  In production, it's not a good idea to decrease this value (1000ms) because it will result in so many SocketTimeoutExceptions internally, but doing so in the testsuite should be fine.
    
    Modifications:
    
    Reduce the default SO_TIMEOUT of OIO channels to 10 ms.
    
    Result:
    
    Our testsuite finishes sooner.

commit bd9ad4b532c3e8686be1c423eda099a0887199fc
Author: Trustin Lee <t@motd.kr>
Date:   Mon Mar 17 10:35:48 2014 +0900

    Perform cross-tests between NIO and epoll transport
    
    Motivation:
    
    The epoll testsuite tests the epoll transport only against itself (i.e. epoll x epoll only).  We should test the epoll transport also against the well-tested NIO transport, too.
    
    Modifications:
    
    - Make SocketTestPermutation extensible and reusable so that the epoll testsuite can take advantage of it.
    - Rename EpollTestUtils to EpollSocketTestPermutation and make it extend SocketTestPermutation.
    - Overall clean-up of SocketTestPermutation
      - Use Arrays.asList() for simplicity
      - Add combo() method to remove code duplication
    
    Result:
    
    The epoll transport is now also tested against the NIO transport.  SocketTestPermutation got cleaner.

commit 1a72bd09d532a5b9ec3432bdd4d487702d70f937
Author: Trustin Lee <t@motd.kr>
Date:   Mon Mar 17 09:51:16 2014 +0900

    Fix 'incompatible event loop' regression
    
    Motivation:
    
    Previous commit (2de65e25e90dec5c0a28b2d57e6c6d15d5a49087) introduced a regression that makes the epoll testsuite fail with an 'incompatible event loop' error.
    
    Modifications:
    
    Use the correct event loop type.
    
    Result:
    
    Build doesn't fail anymore.

commit 2de65e25e90dec5c0a28b2d57e6c6d15d5a49087
Author: Trustin Lee <t@motd.kr>
Date:   Mon Mar 17 09:30:58 2014 +0900

    Set timeout for SocketSslEchoTest
    
    Motivation:
    
    We are seeing EpollSocketSslEchoTest does not finish itself while its I/O thread is busy.  Jenkins should have terminated them when the global build timeout reaches, but Jenkins seems to fail to do so.  What's more interesting is that Jenkins will start another job before the EpollSocketSslEchoTest is terminated, and Linux starts to oom-kill them, impacting the uptime of the CI service.
    
    Modifications:
    
    - Set timeout for all test cases in SocketSslEchoTest so that all SSL tests terminate themselves when they take too long.
    - Fix a bug where the epoll testsuite uses non-daemon threads which can potentially prevent JVM from quitting.
    - (Cleanup) Separate boss group and worker group just like we do for NIO/OIO transport testsuite.
    
    Result:
    
    Potentially more stable CI machine.

commit 218bb8b03410bb0af3b7ee8a9cb76c5ce693aad6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Mar 16 08:29:45 2014 -0700

    Replace usage of UnknownHostException with UnresolveableAddressException. Part of [#2262]
    
    Motivation:
    We better use UnresolveableAddressException as NIO does the same.
    
    Modifications:
    Replace usage of UnknownHostException with UnresolveableAddressException
    
    Result:
    epoll transport and nio transport behave the same way

commit afcc7fb7ccaac8908a68e9f725212aea858716e5
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Mar 16 07:00:44 2014 -0700

    [#2326] Add constructor to NioServerSocketChannel which accepts a ServerSocketChannel
    
    Motivation:
    Allow the user to create a NioServerSocketChannel from an existing ServerSocketChannel.
    
    Modifications:
    Add an extra constructor
    
    Result:
    Now the user is be able to create a NioServerSocketChannel from an existing ServerSocketChannel, like he can do with all the other Nio*Channel implemntations.

commit 9a11c4346353a560c01947d08c4445804aa2b6c4
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Mar 16 06:56:49 2014 -0700

    [#2323] Make it clear a Channel must be closed to release all resources
    
    Motivation:
    Ensure the user know the Channel must be closed to release resources like filehandles.
    
    Modifications:
    Add some extra javadoc.
    
    Result:
    More clear documentation

commit 4f5f4cdc9df6e8c3bf65d3f72ef7cf5a8404fdd4
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Mar 16 06:25:52 2014 -0700

    [#2262] Fix NPE triggered by unresolveable InetSocketAddress in epoll transport
    
    Motivation:
    At the moment when an unresolvable InetSocketAddress is passed into the epoll transport a NPE is thrown
    
    Modifications:
    Add check in place which will throw an UnknownHostException if an InetSocketAddress could not been resolved.
    
    Result:
    Proper handling of unresolvable InetSocketAddresses

commit 397f81f253ee3fede182b2b3711cf933ca698efa
Author: Frederic Bregier <fredbregier@free.fr>
Date:   Thu Mar 13 18:15:09 2014 +0100

    [#2305] Fix issue related to decoding post request raized an exception due to a split of information by chunk not correctly taken into account by the decoder
    
    Motivation:
    
    If the last item analyzed in a previous received HttpChunk/HttpContent was a part of an attribute's name, the read index was not set to the new right place and therefore raizing an exception in some case (since the "new" name analyzed is empty, which is not allowed so the exception).
    
    What appears there is that the read index should be reset to the last valid position encountered whatever the case. Currently it was set when only when there is an attribute not already finished (name is ok, but content is possibly not).
    
    Therefore the issue is that elements could be rescanned multiple times (including completed elements) and moreover some bad decoding can occur such as when in a middle of an attribute's name.
    
    Modifications:
    
    To fix this issue, since "firstpos" contains the last "valid" read index of the decoding (when finding a '&', '=', 'CR/LF'), we should add the setting of the read index for the following cases:
    
    'lastchunk' encountered, therefore finishing the current buffer
    any other cases than current attribute is not finished (name not found yet in particular)
    So adding for this 2 cases:
    
    undecodedChunk.readerIndex(firstpos);
    
    Result:
    
    Now the decoding is done once, content is added from chunk/content to chunk/content, name is decoded correctly even if in the middle of 2 chunks/contents.
    A Junit test code was added: testChunkCorrect that should not raized any exception.

commit 1334d34e9dc750841a0fd8a919fcbcf6479cd5eb
Author: Bourne, Geoff <geoff.bourne@tekcomms.com>
Date:   Thu Mar 13 15:10:24 2014 -0500

    Fix limit computation of NIO ByteBuffers obtained via ReadOnlyByteBufferBuf.nioBuffer
    
    Motivation:
    
    When starting with a read-only NIO buffer, wrapping it in a ByteBuf,
    and then later retrieving a re-wrapped NIO buffer the limit was getting
    too short.
    
    Modifications:
    
    Changed ReadOnlyByteBufferBuf.nioBuffer(int,int) to compute the
    limit in the same manner as the internalNioBuffer method.
    
    Result:
    
    Round-trip conversion from NIO to ByteBuf to NIO will work reliably.

commit 16a85e6cca46cfdcfe07c9e76a3b935c72c5ec1d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Mar 13 08:01:42 2014 +0100

    [#2307] Remove synchronized bottleneck in SingleThreadEventExecutor.execute(...)
    
    Motivation:
    Remove the synchronization bottleneck in startThread() which is called by each execute(..) call from outside the EventLoop.
    
    Modifications:
    Replace the synchronized block with the use of AtomicInteger and compareAndSet loops.
    
    Result:
    Less conditions during SingleThreadEventExecutor.execute(...)

commit 195e4b1fa694e6dbf649407b9dcb54712b2633ba
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Mar 13 06:58:36 2014 +0100

    Remove sniffer whitelist entries for NIO.2
    
    Motivation:
    Cleanup pom.xml file.
    
    Modifications:
    Remove sniffer whitelist entries for NIO.2 as we not include a NIO.2 bases transport anymore.
    
    Result:
    Less entries in pom.xml

commit 69d3cf5539587554af76e100b75b9976b16b7941
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Mar 13 06:46:05 2014 +0100

    [#2308] Use SelectorProvider.open*() to open NIO channels and so remove condition when create new NIO channels.
    
    Motivation:
    At the moment we use SocketChannel.open(), ServerSocketChannel.open() and DatagramSocketChannel.open(...) within the constructor of our
    NIO channels. This introduces a bottleneck if you create a lot of connections as these calls delegate to SelectorProvider.provider() which
    uses synchronized internal. This change removed the bottleneck.
    
    Modifications:
    Obtain a static instance of the SelectorProvider and use SelectorProvider.openSocketChannel(), SelectorProvider.openServerSocketChannel() and
    SelectorProvider.openDatagramChannel(). This eliminates the bottleneck as SelectorProvider.provider() is not called on every channel creation.
    
    Result:
    Less conditions when create new channels.

commit 50e95383a30d88bf6b454832c97755a49f4e9e61
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Mar 12 12:41:06 2014 +0100

    Fix checkstyle errors introduced by f0d1bbd63ec910b9c5bccc925bdf0b0f55db1f9c

commit adcc2d4b4b325d5b405c614a14cd659084cb9cbc
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Mar 10 11:23:56 2014 +0100

    Remove condition in ChannelHandlerAdapter.isSharable() by caching the result of the annotation lookup.
    
    Motivation:
    Remove the synchronization bottleneck and so speed up things
    
    Modifications:
    Introduce a ThreadLocal cache that holds mappings between classes of ChannelHandlerAdapater implementations and the result of checking if the @Sharable annotation is present.
    This way we only will need to do the real check one time and server the other calls via the cache. A ThreadLocal and WeakHashMap combo is used to implement the cache
    as this way we can minimize the conditions while still be sure we not leak class instances in containers.
    
    Result:
    Less conditions during adding ChannelHandlerAdapter to the ChannelPipeline

commit e57cf9d201fc2a1a6cdb8585364babf34e2fe6ad
Author: Trustin Lee <t@motd.kr>
Date:   Wed Mar 12 18:16:53 2014 +0900

    Add capacity limit to Recycler / Optimize when assertion is off
    
    Motivation:
    
    - As reported recently [1], Recycler's thread-local object pool has unbounded capacity which is a potential problem.
    - It accesses a hash table on each push and pop for debugging purposes.  We don't really need it besides debugging Netty itself.
    
    Modifications:
    
    - Introduced the maxCapacity constructor parameter to Recycler.  The default default maxCapacity is retrieved from the system property whose default is 256K, which should be plenty for most cases.
    - Recycler.Stack.map is now created and accessed only when assertion is enabled for Recycler.
    
    Result:
    
    - Recycler does not grow infinitely anymore.
    - If assertion is disabled, Recycler should be much faster.
    
    [1] https://github.com/netty/netty/issues/1841

commit 1e4c22453c2157d7aa7aa70a08acd024da387023
Author: Trustin Lee <t@motd.kr>
Date:   Wed Mar 12 16:17:40 2014 +0900

    Do not use finally to propagate events in AbstractRemoteAddressFilter
    
    Motivation:
    
    We don't really need to propagate an event when handling the event fails.
    
    Modifications:
    
    Do not use finally block in AbstractRemoteAddressFilter
    
    Result:
    
    AbstractRemoteaddressFilter does not forward an event in case of failure.

commit cf275237c95a35161783d06680ebcc1862505add
Author: Trustin Lee <t@motd.kr>
Date:   Wed Mar 12 16:06:04 2014 +0900

    Overall clean-up of ipfilter package
    
    Motivation:
    
    Recently merged ipfilter package has the following problems:
    * AbstractIpFilterHandler could be improved to support any SocketAddress types rather than only InetSocketAddress.
    * AbstractIpFilterHandler can be removed immediately after decision is made rather than keeping the outcome of the decision as an attribute.
    * AbstractIpFilterHandler doesn't have a hook for the accepted addresses.
    * The hook method (reject()) needs to be named in line with other handler methods (i.e. channelRejected())
    * IpFilterRuleHandler should allow accepting zero rules - it's particularly useful for machine-configured setup (i.e. specifying zero rules disables ipfilter).
    * IpFilterRuleType.ALLOW/DENY should be ACCEPT/REJECT for consistency.
    
    Modifications:
    
    * AbstractIpFilterHandler has been renamed to AbstractRemoteAddressFilter and now uses type parameter.
    * Added channelAccepted() and renamed reject() to channelRejected()
    * Added ChannelHandlerContext as a parameter of accept() so that accept() can add a listener to the closeFuture() of the channel. This way, UniqueIpFilter continue working even if we remove the filtering handler early.
    * Various renames
      * IpFilterRuleHandler -> RuleBasedIpFilter
      * UniqueIpFilterHandler -> UniqueIpFilter
    
    Result:
    
    * Much cleaner API with more extensibility

commit e8bdaff80f4f69358046a78d79dba98453b14189
Author: Trustin Lee <t@motd.kr>
Date:   Wed Mar 12 13:13:58 2014 +0900

    Move the pull request guide to the developer guide
    
    Motivation:
    
    CONTRIBUTING.md is useful only because it lets Github show a user the
    link to it so the user can check what information we need before
    submitting a bug report.  However, Github does not do the same for a
    pull request submission form, and thus there's no reason to keep the
    information about how to submit a good pull request in CONTRIBUTING.md.
    
    Modification:
    
    Replace the section about issuing a pull request with the link to the
    official developer guide.
    
    Result:
    
    CONTRIBUTING.md is easier to maintain.

commit 722f6c5e1a626ddfa7d3477fc3d6a76b48665216
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Mar 10 19:53:16 2014 +0100

    Use bitwise operations to choose next EventExecutor if number of EventExecutors is power of two

commit 386cc2cb733e4bf23ef4024e954aa2d07d942510
Author: Jakob Buchgraber <jakob.buchgraber@tum.de>
Date:   Wed Mar 5 00:36:54 2014 +0100

    ipfilter implementation for netty 4/5 [#2129]

commit d63c9f2bdb82c7d686a29a865d37ab3a5455d488
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Mar 10 20:27:44 2014 +0100

    [#2297] Correctly close all registered Channels on EpollEventLoop.closeAll()

commit 4f069e5c36e56e484e87db16cbc47e656265ee7c
Author: David Dossot <david@dossot.net>
Date:   Fri Mar 7 12:00:03 2014 -0800

    added support for empty query parameters

commit 99995876dc2f2876d510141a065467c9dac236ed
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Mar 10 06:24:53 2014 +0100

    Fix buffer leak in test which was introduced while implement ZLIB_OR_NONE support. Related to [#2269]

commit f62012cba5376f2c199bd4be6030ee1147ae016c
Author: Aaron Riekenberg <aaron.riekenberg@gmail.com>
Date:   Sun Mar 9 07:41:14 2014 -0500

    [#2280] Correct logic in Native.finishConnect. Fix use of optval parameter in c getOption function. In epoll event loop, check that channel is open before processing event.

commit 01daefe9255ab08b4f30e0bbab69df86ab70610d
Author: Chris Mowforth <chris@mowforth.com>
Date:   Thu Mar 6 19:43:18 2014 +0000

    Add content length and date headers to CORS response

commit d89bfc593e86008d0440bbcf1a69fbc7774adb8b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Mar 6 20:03:40 2014 +0100

    Fix buffer leak in test which was introduced while implement ZLIB_OR_NONE support. Related to [#2269]

commit 05874ad97f6a3f3a953529ea92b4702fc50f4c89
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 7 01:52:21 2014 +0900

    Update CONTRIBUTING.md

commit b0f259b7798a702816802284265db2137fd7da3f
Author: Trustin Lee <t@motd.kr>
Date:   Fri Mar 7 01:47:14 2014 +0900

    Add CONTRIBUTING.md
    
    Motivation:
    We often receive a bug report or a pull request which do not give us
    enough information.  If CONTRIBUTING.md exists in the repository, Github
    will display some notice in the beginning of the issue submission form,
    which might increase the overall quality of the bug reports and pull
    requests.
    
    Modification:
    Write CONTRIBUTING.md
    
    Result:
    Potentially higher-quality bug reports and pull requests

commit 7c4ad004f6e1386012c93663767de62489562ee6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Mar 5 06:56:21 2014 +0100

    Ensure the HttpResponseEncoder is always placed before the HttpObjectAggregator. Part of [#2219]

commit 37ee6ef79a614faea77bca03306f1c4b1e1aad12
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Fri Feb 28 08:08:40 2014 +0100

    [codec-memcache] Simplify object hierachy and remove Headers.
    
    This changeset removes the separate message headers and merges the
    field directly into the messages. This greatly simplifies the
    object hierachy and also saves header allocations in the pipeline.

commit 95ff172c8265cb14f7d2bad264de0e4f2e9e4fae
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Mar 4 06:34:14 2014 +0100

    Corrected inconsistencies in the Javadoc.
    
    Port of 80030493b9f7824c02dc88260c2579afc0aed8bc

commit 8afc2cd3787b72ea141b137f25a1aab4128cd8ff
Author: Jatinder <jatinder@mediaiqdigital.com>
Date:   Mon Mar 3 17:16:59 2014 +0530

    [#2252] Fix bug where AppendableCharSequence private constructor does not set correct position

commit 918dd54a721458f46888ef8beb2c8f9b2911dee0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Mar 3 07:03:58 2014 +0100

    [#2261] Correct javadoc of ChunkedInput

commit 156f311ee998bf859e93118fff672f000902fa6a
Author: Jakob Buchgraber <jakob.buchgraber@tum.de>
Date:   Thu Feb 27 03:17:39 2014 +0100

    Added a secure WebSocket client example
    
    Merged WebSocketClient and WebSocketSslClient
    
    Add private constructors to fix checkstyle errors.
    
    More checkstyle madness.
    
    made WebSocketClientRunner final

commit 1f5b74762b3dd7a7421da96b3b2e6c73c77a261c
Author: Andrew Gaul <gaul@maginatics.com>
Date:   Thu Feb 27 21:54:51 2014 -0800

    Correct ConcurrentHashMapV8 bitwise arithmetic
    
    Previously ConcurrentHashMapV8 evaulated ((x | 1) == 0), an expression
    that always returned false.  This commit brings Netty closer to the
    Java 8 implementation.

commit dd38c8fa78c21a1b1806cd0441458c5780ddcff7
Author: Jakob Buchgraber <jakob.buchgraber@tum.de>
Date:   Mon Mar 3 01:21:50 2014 +0100

    Added asserts to make sure ChannelHandlers are removed from the pipeline

commit 9fb235459eba26a531246b8f746735bcc5fa5a7b
Author: Jakob Buchgraber <jakob.buchgraber@tum.de>
Date:   Thu Feb 27 19:41:48 2014 +0100

    Add ZLIB_OR_NONE support to JdkZlibDecoder [#2016]

commit fcc6b544a4cd1069ee39fdfb0d9b0bd97197b186
Author: Dao Ngoc <ngoc@Daos-MacBook-Pro.local>
Date:   Sat Mar 1 06:38:54 2014 +0900

    Fix #2275 %s WebSocket version %s server handshake

commit d3ffa1b02b2ba112546070c16d8786f514d6be51
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Feb 26 12:00:04 2014 +0100

    [#1259] Add optimized queue for SCMP pattern and use it in NIO and native transport
    
    This queue also produces less GC then CLQ when make use of OneTimeTask

commit ac5592fc057b56c343c7c4327b7a32ae5c930cda
Author: Trustin Lee <t@motd.kr>
Date:   Wed Feb 26 16:18:19 2014 -0800

    Fix checkstyle

commit 24fc1b9b3781434bfc4a7142a292e96993d1a72e
Author: Trustin Lee <t@motd.kr>
Date:   Wed Feb 26 15:53:53 2014 -0800

    Fix a bug where HttpObjectDecoder generates two LastHttpContent consecutively
    
    Motivation:
    When an HttpResponseDecoder decodes an invalid chunk, a LastHttpContent instance is produced and the decoder enters the 'BAD_MESSAGE' state, which is not supposed to produce a message any further.  However, because HttpObjectDecoder.invalidChunk() did not clear this.message out to null, decodeLast() will produce another LastHttpContent message on a certain situation.
    
    Modification:
    Do not forget to null out HttpObjectDecoder.message in invalidChunk(), and add a test case for it.
    
    Result:
    No more consecutive LastHttpContent messages produced by HttpObjectDecoder.

commit cd6b5def8d5d25d4215bb12654bdd2fcbec0be6f
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Fri Feb 21 08:11:04 2014 +0100

    Always upstream full memcache messages.
    
    This changeset is related to #2182, which exposes the failure in
    the http codec, but the memcache codec works very similar. In addition,
    better failure handling in the decoder has been added.

commit 7d62594cc62d40b6a0a679c4036df3f250dabff1
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Fri Feb 21 08:45:57 2014 +0100

    Upgrade JMH to 0.4.1 and make use of @Params.

commit cc4198971e08cc28c662589e90ed1a10a5be9ab4
Author: cmcmaugh <conor.mcmaugh@gmail.com>
Date:   Sat Feb 22 13:04:11 2014 +0000

    Apply receive timeout to commPort when using RxtxChannel. Part of [#1390]

commit 8c68c5a3ae4d3d907528b64ec4b3daa5512d4be6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Feb 22 20:06:21 2014 +0100

    Fix check to clear READ_OP and EPOLLIN. Part of [#2254]

commit b32316b33cad851a8e22b5bd4cbe1de2485f1416
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Feb 21 21:42:13 2014 +0100

    [#2254] Correctly handle Channel.read() and ChannelHandlerContext.read()
    
    This includes also when it is called from channelRead(...) and channelReadComplete(...) methods.

commit 47fab2bfe82032a9558edde1bb3e1efd2ac8ede5
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Feb 18 10:08:20 2014 +0100

    Directly use memory addresses for gathering writes to reduce gc pressure. Part of [#2239]
    
    This also does factor out some logic of ChannelOutboundBuffer. Mainly we not need nioBuffers() for many
    transports and also not need to copy from heap to direct buffer. So this functionality was moved to
    NioSocketChannelOutboundBuffer. Also introduce a EpollChannelOutboundBuffer which makes use of
    memory addresses for all the writes to reduce GC pressure

commit 78db65d0fb4744b26f6f47d48c58a95413890de2
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Feb 21 08:39:41 2014 +0100

    [#2254] Fix regression in handling autoRead and Channel.read()
    
    This regression was introduced by e0b39159657c9eb711047bc32367537c4870d467

commit 1884a5697c0c7957c534711a8f8a7fb0be9b7369
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 20 17:14:25 2014 -0800

    Avoid unnecessary IllegalStateException in ChunkedWriteHandler
    
    Motivation:
    ChunkedWriteHandler can sometimes fail to write the last chunk of a ChunkedInput due to an I/O error.  Subsequently, the ChunkedInput's associated promise is marked as failure and the connection is closed.  When the connection is closed, ChunkedWriteHandler attempts to clean up its message queue and to mark their promises as success or failure.  However, because the promise of the ChunkedInput, which was consumed completely yet failed to be written, is already marked as failure, the attempt to mark it as success fails, leading a WARN level log.
    
    Modification:
    Use trySuccess() instead of setSuccess() so that the attempt to mark a ChunkedInput as success does not raise an exception even if the promise is already done.
    
    Result:
    Fixes #2249

commit b02531f0aa62850bc796f59f05b20e4d673ee920
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Tue Feb 18 12:18:00 2014 -0800

    SPDY: remove SPDY/3 support

commit 738d3f77b9ae83982e3319c843291d6469d32280
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 20 14:30:25 2014 -0800

    Fix another leak in HttpObjectAggregatorTest by removing redundant code

commit 874a66c8fb26f51691594f7307dcde8334295cb1
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 20 13:49:35 2014 -0800

    Fix a memory leak in HttpObjectAggregatorTest

commit 2c4aff13c7ad4319ef172a1d0b4d756ca9da152e
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 20 13:41:54 2014 -0800

    Add an operation that resets the state of HttpObjectDecoder
    
    Motivation:
    
    Currently, it is impossible to give a user the full control over what to do in response to the request with 'Expect: 100-continue' header.  Currently, a user have to do one of the following:
    
    - Accept the request and respond with 100 Continue, or
    - Send the reject response and close the connection.
    
    .. which means it is impossible to send the reject response and keep the connection alive so that the client sends additional requests.
    
    Modification:
    
    Added a public method called 'reset()' to HttpObjectDecoder so that a user can reset the state of the decoder easily.  Once called, the decoder will assume the next input will be the beginning of a new request.
    
    HttpObjectAggregator now calls `reset()`right after calling 'handleOversizedMessage()' so that the decoder can continue to decode the subsequent request even after the request with 'Expect: 100-continue' header is rejected.
    
    Added relevant unit tests / Minor clean-up
    
    Result:
    
    This commit completes the fix of #2211

commit e278b57489e61e5dd20549e6bff1bafda2c88e85
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 20 11:46:41 2014 -0800

    Added a test for oversized HTTP responses

commit fcc41a62bdbe2a1477683aed41dc87daff683607
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 20 11:35:23 2014 -0800

    Overall clean-up of HttpObjectAggregator / Handle oversized response differently
    
    - Related: #2211

commit 91376263d722abf00e4024d158e5c897ab8dbabd
Author: Chris Mowforth <chris@logentries.com>
Date:   Fri Feb 7 16:59:51 2014 +0000

    Expose a callback in HttpObjectAggregator to handle oversized messages
    
    - Related: #2211

commit dbb21988395f49ec9257a72b1044360c71fe5ad6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 20 14:57:29 2014 +0100

    Fix a regression which could lead to GenericFutureListeners never been notifed. Part of [#2186].
    
    This regression was introduced by commit c97f2d2de00ad74835067cb6f5a62cd4651d1161

commit ddb6e3672cce60432f386e7f8e9022bf62a9c84e
Author: Trustin Lee <t@motd.kr>
Date:   Wed Feb 19 15:31:53 2014 -0800

    Fix a bug where HttpObjectAggregator doesn't always produce FullHttpMessage
    
    - Fixes #2182
    - Always convert an unfull invalid message to a full message

commit 396a81c811d6ae79e2edcca35adb0725472609ea
Author: Trustin Lee <t@motd.kr>
Date:   Wed Feb 19 15:19:35 2014 -0800

    Ensure that the last bad chunk is LastHttpChunk

commit b1f27d9aa816be49fd747dcc4b7b3dd9ae914eda
Author: Trustin Lee <t@motd.kr>
Date:   Wed Feb 19 14:58:51 2014 -0800

    HttpObjectDecoder.invalidChunk() should return LastHttpChunk
    
    because the decoder will enter 'BAD_MESSAGE' state and will not produce any chunk since then.

commit eb143d6d6ecddb27aab4047531520225ee36abee
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Feb 19 11:57:41 2014 +0100

    Correctly handle remove from epoll and EPOLLRDHUP. Also fix a bug with removing EPOLLIN and EPOLLOUT

commit 23374a185407ab013e4c5b685c6150e29d5e5fd9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Feb 17 22:44:37 2014 +0100

    Ensure native transport is included in all and tarball

commit 6bef9c8489028b9941b8c48dddaec2f76d5b0f53
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Feb 17 15:19:01 2014 +0100

    Use optimized write and read calls if memoryAddress is present. Part of [#2239]

commit 1c9c797e821636b9bef2f22bd6653840fd7c3c2f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Feb 17 16:14:25 2014 +0100

    Move marking ChannelPromise for writes uncancellable to addFlush for keep things simple

commit 5612472ae6a3b534b7e8957df7a05902f36a4812
Author: Trustin Lee <t@motd.kr>
Date:   Mon Feb 17 05:25:17 2014 -0800

    Fix an inspector warning

commit 91da8e228b9d9d43fd8e98b8d72faf575f670abc
Author: Trustin Lee <t@motd.kr>
Date:   Mon Feb 17 05:21:10 2014 -0800

    Overall clean-up in EpollSocketChannel
    
    - Extract writev part from doWrite() for simplicity
    - Clearer comments

commit 8f3c09ba6b8aa6d14d83047cc360189be5d44d94
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Feb 17 11:59:28 2014 +0100

    [#2238] Fix bug which caused a SIGSEGV when calling remoteAddress() or localAddress()

commit 5a369e60b1cdc29571cf18ba4568881d8d4c08eb
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Feb 17 07:18:39 2014 +0100

    Correctly update the ByteBuffers position on write and writev

commit a0378af850963ec1961f6212ec32d770bd4f3586
Author: Trustin Lee <t@motd.kr>
Date:   Sun Feb 16 11:49:25 2014 -0800

    Fix resource leaks in ByteArrayEncoderTest

commit 728417abd5a550e861a71455831fc1e884dff96d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Feb 16 20:21:14 2014 +0100

    Use correct writerIndex when read for channel

commit 9330172f803f340df677c370464126cd6112204a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Feb 15 22:26:36 2014 +0100

    Introduce a native transport for linux using epoll ET
    
    This transport use JNI (C) to directly make use of epoll in Edge-Triggered mode for maximal performance on Linux. Beside this it also support using TCP_CORK and produce less GC then the NIO transport using JDK NIO.
    It only builds on linux and skip the build if linux is not used. The transport produce a jar which contains all needed .so files for 32bit and 64 bit. The user only need to include the jar as dependency as usually
    to make use of it and use the correct classes.
    
    This includes also some cleanup of @trustin

commit a0e74ff98475ff8422cc1f111afbd243519d5f07
Author: Trustin Lee <t@motd.kr>
Date:   Sat Feb 15 11:24:01 2014 -0800

    Use thread local direct buffer for I/O when the current allocator is unpooled
    
    - Allocating and deallocating a direct buffer for I/O is an expensive
      operation, so we have to at least have a pool of direct buffers if the
      current allocator is not pooled

commit 99beb188c488296d0f6ab1d754b29e5a9d153d80
Author: Trustin Lee <t@motd.kr>
Date:   Fri Feb 14 13:25:57 2014 -0800

    Fix inefficient loop in QueryStringDecoder.decodeComponent()
    
    - Fixes #2228
    - There's no point of looping until the end of the component if at least one '%' or '+' is found.

commit 33197c7696bfee11a9366211394eeb10bd60b710
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Wed Feb 12 21:40:13 2014 +0100

    Update JMH to 0.3.2

commit fbd4385506230d8e9b37cb6c442cdd9659258c4f
Author: Trustin Lee <t@motd.kr>
Date:   Fri Feb 14 13:03:52 2014 -0800

    Determine the default allocator from system property
    
    - Add ByteBufAllocator.DEFAULT
    - The default allocator is now 'pooled'

commit f0127ec991fe122c2f139b25abcace84a9c9c031
Author: Trustin Lee <t@motd.kr>
Date:   Fri Feb 14 12:06:24 2014 -0800

    Do not warn about Unsafe in Android

commit bb145c0057726901f21421b8c873c1db3d81860a
Author: Trustin Lee <t@motd.kr>
Date:   Fri Feb 14 12:03:51 2014 -0800

    Fix wiki link

commit 0e4c80b95360e39cef89bb2a4eaa5d3adf89ffe9
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 13 19:44:40 2014 -0800

    Fix IllegalStateException caused by ChannelHandlerAppender

commit abcb39b638c1fe55429dd3a8fcbca7d002efd225
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 13 19:31:17 2014 -0800

    Do not use String.format() for log message generation
    
    - It's slow.

commit c6711032894c12d81972b5858d8192b94b415e63
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 13 19:20:56 2014 -0800

    Deprecate CombinedChannelDuplexHandler in favor of ChannelHandlerAppender
    
    - Fixes #2233
    - Add ChannelHandlerAppender

commit 7e1db4feb7501d53aab80c80e4d079e3c3940b8b
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 13 19:20:25 2014 -0800

    Deprecate CombinedChannelDuplexHandler in favor of ChannelHandlerAppender
    
    - Fixes #2233

commit dea5c688fd956adab0b1d28c7dfccfc7dc020bae
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 13 18:51:32 2014 -0800

    Fix checkstyle

commit ac70dc454639f72dfbaf1f5da15f05fe72b9b0c7
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 13 18:32:26 2014 -0800

    Update the version to 4.1.0.Alpha1-SNAPSHOT

commit 5226f75cfaea3bdcc9a0128d6a3f35a9b3108649
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 6 21:00:24 2014 -0800

    Clean up HttpObjectAggregator

commit 51349352e29d0a400b0fa8a883912fba682b8ede
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 6 21:00:05 2014 -0800

    Fix a bug that CompositeByteBuf.touch() does nothing

commit 8837afddf85dab7cc09e210dae1ba6e0ec24c16f
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jan 29 11:44:59 2014 +0900

    Enable a user specify an arbitrary information with ReferenceCounted.touch()
    
    - Related: #2163
    - Add ResourceLeakHint to allow a user to provide a meaningful information about the leak when touching it
    - DefaultChannelHandlerContext now implements ResourceLeakHint to tell where the message is going.
    - Cleaner resource leak report by excluding noisy stack trace elements

commit 0235244e55414597bd2327da9767695cb8d46cbb
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 13 18:11:54 2014 -0800

     Touch a ReferenceCounted while it traverses across a pipeline

commit 45e70d993568f11a8c13459dc28265d333a8b19e
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jan 28 20:00:28 2014 +0900

    Add ReferenceCounted.touch() / Add missing retain() overrides
    
    - Fixes #2163
    - Inspector warnings

commit 7e60877bc599074eae9c8ea5811753e9cb31fb29
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jan 20 15:16:12 2014 +0900

    Merge the attribute map of ChannelHandlerContext into Channel
    
    - Fixes #2136
    - Also fixes some generics warnings

commit 77d1f97b573a085b3290beb8a7396a00df9912ca
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 13 17:55:07 2014 -0800

     Add an HTML5 encoder mode for HttpPostRequestEncoder
    
     - backported from 709be30442ff160eb7571bcf340da1e347f198bf by @igstan

commit 4b0634b06a583e36fec0e6dac8eeddb9d473da85
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 13 17:48:13 2014 -0800

    Revive the deleted methods in HttpDataFactory and deprecate them

commit 574480e332df7af624f43f0377d86b2c17087d75
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Thu Jan 16 09:30:17 2014 +0100

    Rename HttpDataFactory.*datas to *data. Fixes #2094

commit 1d577a8d9541a072862dee5c2c015ebff31fb24a
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jan 13 22:28:28 2014 +0900

    Get the PID properly on Android
    
    - Related: #2109

commit d97f72d2c964c6dabeb30eba31112b9b40237e1e
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jan 13 17:32:55 2014 +0900

    Fix a problem where DefaultChannelId prevents Netty 5 from running on Android
    
    - Fixes #2109
    - Use reflection to find the current PID

commit 2b84314fddfbfd1a68b5495ff9d1df85e5b012c3
Author: Trustin Lee <t@motd.kr>
Date:   Wed Dec 18 23:05:37 2013 +0900

    Add Recycler.Handle.recycle() so that it's possible to recycle an object without an explicit reference to Recycler

commit df346a023bd64c1f0d69b54a9a0df8eecbc008fe
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 16 22:22:47 2013 +0900

    Change the return type of EmbeddedChannel.read*() from Object to an ad-hoc type parameter
    
    .. so that there's no need to explicitly down-cast.
    
    Fixes #2067

commit 5e69955d23d7f72ea1b3f8f4a909992577636a60
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 16 16:16:37 2013 +0900

    Fix another buffer leak in XmlFrameDecoderTest

commit 457cd2f6fa54e8d0f776f6b34c25acbfd932b13b
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 16 15:36:49 2013 +0900

    Fix buffer leaks in XmlFrameDecoderTest

commit 502ccabab316ae731e5fe8cbb68b898605e20487
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 16 14:45:57 2013 +0900

    Fix inspector warnings

commit ee8571824b55fb17af02330d80527518866de4d0
Author: Mirko Caserta <mirko.caserta@gmail.com>
Date:   Thu Dec 5 12:58:15 2013 +0100

    CDATA support

commit 086dbd1ba14c630358f856f8f61af997c92001e0
Author: Mirko Caserta <mirko.caserta@gmail.com>
Date:   Wed Dec 4 21:07:25 2013 +0100

    Fixed the XML decoder

commit 2d5a3b5898dec0bed54660563e6c7acefb515bec
Author: Trustin Lee <t@motd.kr>
Date:   Wed Dec 4 17:31:28 2013 +0900

    Add XML decoder
    
    - based on @mcaserta's work at https://github.com/netty/netty/pull/1121
    - not ready for a merge yet

commit 9bd44a1d7c6295b00710ce1206a3dcc496f3e639
Author: Frederic Bregier <fredbregier@free.fr>
Date:   Sat Dec 7 12:18:56 2013 +0100

    Add support for 'charset' property for multipart boundaries
    
    - Fixes #2004

commit b17a7656152a9982d69f94d2e87ea6b5cf4b2680
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Mon Dec 9 08:15:31 2013 +0100

    codec-memcache: prefix abstract classes with Abstract.

commit fcb32a77b9f8b89be1e6c695853e2e18c535f355
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Mon Dec 9 08:06:09 2013 +0100

    codec-memcache: No need to allocate a buffer if no extra is used.

commit 6e23cf8c92160834aa46413b0796d37531edeaa8
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 8 14:05:04 2013 +0900

    Fix checkstyle

commit 516795fcfba948d7bcb667d87bf6ccb591daf27d
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 8 13:20:52 2013 +0900

    Add convenient logging methods for logging exceptions quickly
    
    .. Mainly useful for writing tests or ad-hoc debugging

commit 9840de82f0a25ed5b1fb71368e15cc8d446e9a99
Author: Trustin Lee <t@motd.kr>
Date:   Sat Dec 7 21:50:49 2013 +0900

    Fix another buffer leak in BinaryMemcacheDecoderTest

commit b592a18cd1a963c99dfefabbb56222016fadceb5
Author: Trustin Lee <t@motd.kr>
Date:   Sat Dec 7 15:06:30 2013 +0900

    Fix buffer leaks in BinaryMemcacheDecoderTest

commit ccd231b8f42a717964ec52876037333dfa90e200
Author: Trustin Lee <t@motd.kr>
Date:   Sat Dec 7 15:00:32 2013 +0900

    Fix a buffer leak in BinaryMemcacheDecoder

commit acf7dbf811e28e8cff94deb2846a9332f9879dff
Author: Trustin Lee <t@motd.kr>
Date:   Sat Dec 7 12:15:44 2013 +0900

    Fix buffer leaks in BinaryMemcacheEncoderTest

commit a8bc720977a794091a4a0233e4b70203d31c4840
Author: Trustin Lee <t@motd.kr>
Date:   Sat Dec 7 11:59:53 2013 +0900

    Fixed buffer leaks in LoggingHandlerTest

commit 86c4166c244f2816a7b7ea1302c3523dd750fdda
Author: Trustin Lee <t@motd.kr>
Date:   Sat Dec 7 11:36:18 2013 +0900

    Fixed various buffer leaks in FixedCompositeByteBufTest

commit fab56bae94d0e2af869872d1f42e86c32e0c21e5
Author: Trustin Lee <t@motd.kr>
Date:   Sat Dec 7 11:22:59 2013 +0900

    Fix a buffer leak in BinaryMemcacheObjectAggregatorTest

commit d417e3dbd042633f69f9d080430c95b7c0656124
Author: Trustin Lee <t@motd.kr>
Date:   Sat Dec 7 11:19:26 2013 +0900

    Fix a buffer leak in BinaryMemcacheObjectAggregatorTest

commit 26fc84529feedbb5b6af1d3f5be123feaa5aa9d4
Author: Trustin Lee <t@motd.kr>
Date:   Fri Dec 6 13:44:59 2013 +0900

    Also record retain() and release()

commit 0ff98c98e2da1c209e1d365e464e836fe9b6900b
Author: Trustin Lee <t@motd.kr>
Date:   Fri Dec 6 13:29:46 2013 +0900

    readableBytes() ==0 -> !isReadable()

commit d31a3e41208d09b5f125d78050f82d5b771d80f5
Author: Trustin Lee <t@motd.kr>
Date:   Fri Dec 6 13:27:51 2013 +0900

    Hide protocol detail from users

commit 215e75c7d9457c65afea58ceae09c99fb5adc7f3
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Thu Dec 5 13:36:29 2013 +0100

    codec-memcache: increase default buffer size and only encode extras if set.

commit bea2acdf12ba6d2cb8f271fa2ee5da0125e74281
Author: Trustin Lee <t@motd.kr>
Date:   Thu Dec 5 11:23:23 2013 +0900

    Allow specifying a custom charset for a multipart Attribute
    
    - Fixed #2025
    - Adapted from @BabyDuncan's pull request: #2031
    - Overall ugliness clean-up

commit 2351b8ddd9ac56b1929cfc542d8316b6ed4e6290
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Oct 7 14:59:02 2013 +0200

    Add FixedCompositeByteBuf which can be used to write an array of ByteBuf in an efficient way.
    
    This implementation does not produce as much GC pressure as CompositeByteBuf and so is prefered,
    for writing an array of ByteBufs. Be aware that FixedCompositeByteBuf is readonly.
    
    When using this in a project that make heavy use of CompositeByteBuf for writes we was able to cut
    down allocation to a half.

commit f03c32e137dd89ec91fae04d112e9660a08f65d1
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Mon Dec 2 13:01:51 2013 +0100

    [codec-memcache] encode key directly, no need to use unpooled.

commit a1526bedd3b76a6b44cb906bb580de1d335909e4
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Mon Dec 2 11:58:44 2013 +0100

    codec-memcache: removed println in test case.

commit 183bfe8f9f78d05cf2d8e4a72216644c12d7af8b
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Mon Dec 2 11:48:30 2013 +0100

    codec-memcache: fix decoding issue for value parts.
    
    This changeset fixes an issue when decoding would stop if the value
    comes separated in two or more packets, leading to invalid bytes read.

commit 3d874f0bd793ee860bca3f37f95811f16e0646a9
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 2 18:58:56 2013 +0900

    Improve documentation for the two-args formatter in LoggingHandler

commit fbed62249ca191c7f97af6270eafef0f16945812
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 2 18:57:38 2013 +0900

    Rename formatUserMessage to formatSimple and use it in two-args formatter in LoggingHandler

commit a9150ee7d6284341738bbc580429b6c37ce5fb9f
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 2 18:56:33 2013 +0900

    Simplify two-args message formatter in LoggingHandler

commit 2e58497160d84e4fe6a558373a9d652ad86946c8
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 2 18:48:19 2013 +0900

    Make LoggingHandler.appendHexDump(..) protected for the subclasses

commit 835b4443f3d022041b1b305a091c90188047aa2d
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 2 18:43:49 2013 +0900

    Optimize and clean up LoggingHandler
    
    - Use ': ' instead of '(...)' for simpler string concatenation and prettier presentation
    - Optimize the overall performance of format*() methods
    - All format*() methods are now expected to encode the channel information by themselves so that StringBuilder instances are created less often.
    - Use a look-up table for generating per-row prefixes
    - Hid formatByteBuf(), formatByteBufHolder(), and formatNonByteBuf() from user because a user can always override format(ctx, eventName, arg).  For example, to disable hexdump:
    
        protected void format(ChannelHandlerContext ctx, String eventName, Object arg) {
            if (arg instanceof ByteBuf) {
                super.format(ctx, eventName, arg.toString());
            } else {
                super.format(ctx, eventName, arg);
            }
        }

commit f6ffc5c1c7dc91407f037b58b21ccd5bdcd2548f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Nov 23 20:35:47 2013 +0100

    [#1682] HttpVersion.valueOf(...) should not convert to uppercase

commit c78544cfaa5403f0599bcc8c73f3374295b4dd67
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Fri Nov 22 14:57:03 2013 +0100

    Avoid memory leak when encoding the key

commit eb308cfff66a6264d3eaf81aca28b918cb8fce1e
Author: Vladimir Krivosheev <vladimir.krivosheev@jetbrains.com>
Date:   Tue Aug 20 18:42:56 2013 +0200

    ability to use Executor instead of ThreadFactory

commit 780516471faba35322e78ee2a9c1466b874724d8
Author: Trustin Lee <t@motd.kr>
Date:   Mon Nov 18 15:59:44 2013 +0900

    Bring back ChannelGroup.find(id)

commit 40003ed250a41286dd73683e62737e318ab003ce
Author: Trustin Lee <t@motd.kr>
Date:   Fri Nov 15 22:50:53 2013 +0900

    Resurrect Channel.id() with global uniqueness
    
    - Fixes #1810
    - Add a new interface ChannelId and its default implementation which generates globally unique channel ID.
    - Replace AbstractChannel.hashCode with ChannelId.hashCode() and ChannelId.shortValue()
    - Add variants of ByteBuf.hexDump() which accept byte[] instead of ByteBuf.

commit ef4bc99849f79a5dbfc3297b25c17494314598aa
Author: Trustin Lee <t@motd.kr>
Date:   Fri Nov 15 23:07:19 2013 +0900

    Remove unnecessary parenthesis

commit fa33529ca5652acce38dfde1bae3d046e7c569e4
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Tue Nov 12 08:29:01 2013 +0100

    Adding check for zero readable bytes in WebSocket08FrameDecoder decode.

commit 812481602a18bdc148eb3a2c80f063ff57904d6d
Author: Trustin Lee <t@motd.kr>
Date:   Fri Nov 8 18:01:29 2013 +0900

    Don't create an EmbeddedSocketAddress every time

commit d748113c7d64b8bd7fdf624fd776660044b816ef
Author: Trustin Lee <t@motd.kr>
Date:   Mon Nov 4 20:21:55 2013 +0900

    Abstract classes' names should start with 'Abstract'

commit 71b6439c669f71150086f67e762b1dabce0f0357
Author: Trustin Lee <t@motd.kr>
Date:   Mon Nov 4 20:19:33 2013 +0900

    Fixed various inspector warnings

commit 3dd7fba320cb08f3e07eff6e44cb2bd23f8d0a47
Author: Trustin Lee <t@motd.kr>
Date:   Mon Nov 4 20:10:52 2013 +0900

    Moved constant classes out of util

commit 5551fc7351c8cc9efca7b4edcf0b7399fb901480
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Mon Nov 4 11:40:47 2013 +0100

    adding memcache codec to netty-all project.

commit a327a25a6cfa872877c440cd151df3ad57118388
Author: Trustin Lee <t@motd.kr>
Date:   Mon Nov 4 19:42:33 2013 +0900

    Use StringUtil.simpleClassName(..) instead of Class.getSimpleName() where necessary
    
    - Class.getSimpleName() doesn't render anonymous classes very well
    - + some minor cleanup

commit 20f6f7e01811a7da9963ba0416bfb1e947e327f1
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Tue Oct 1 15:42:05 2013 +0200

    Implementing the Binary Memcache protocol
    
    This changeset implements the full memcache binary protocol spec, including
    a first batch of tests. Ascii protocol and more coverage and helper classes
    will follow.

commit ebc78dab1d29fdf47c1614d14053a44cd028f297
Author: Trustin Lee <t@motd.kr>
Date:   Mon Nov 4 19:00:25 2013 +0900

    Add a getter method for accessing the ClassPool of JavassistTypeParameterMatcherGenerator
    
    .. so that a user can even manipulate the class pool as they wish.

commit a5f33f402073d1f2eaed823ceb549318946a80f2
Author: Trustin Lee <t@motd.kr>
Date:   Mon Nov 4 18:03:32 2013 +0900

    Fix some inspector warnings

commit 651c7b056a386254165303a23fc9d4d917477ffb
Author: fredericBregier <fredbregier@free.fr>
Date:   Mon Aug 19 23:22:22 2013 +0200

    Split HttpPostRequestDecoder into HttpPostStandardRequestDecoder and HttpPostMultipartRequestDecoder / Add HttpData.maxSize
    
    - Related issues: #1937 #1938 and #1946
    - Add InterfaceHttpPostRequestDecoder and Make HttpPostRequestDecoder implement it
    - HttpPostRequestDecoder actually delegates itself to HttpPostStandardRequestDecoder or HttpPostMultipartRequestDecoder
    - Remove IncompatibleDataDecoderException because it's not thrown anywhere now

commit 499033d44f6fb564f5164d0d84df3e9079b2622c
Author: Trustin Lee <t@motd.kr>
Date:   Fri Oct 25 20:01:31 2013 +0900

    Add a shortcut method for collision-free naming

commit b533a1361bbbc457c974ca365f8293ec27ffda1c
Author: Trustin Lee <t@motd.kr>
Date:   Fri Oct 25 19:21:53 2013 +0900

    Replace UniqueName with Constant and ConstantPool
    
    - Proposed fix for #1824
    
    UniqueName and its subtypes do not allow getting the previously registered instance.  For example, let's assume that a user is running his/her application in an OSGi container with Netty bundles and his server bundle.  Whenever the server bundle is reloaded, the server will try to create a new AttributeKey instance with the same name.  However, Netty bundles were not reloaded at all, so AttributeKey will complain that the name is taken already (by the previously loaded bundle.)
    
    To fix this problem:
    
    - Replaced UniqueName with Constant, AbstractConstant, and ConstantPool.  Better name and better design.
    
    - Sctp/Udt/RxtxChannelOption is not a ChannelOption anymore.  They are just constant providers and ChannelOption is final now.  It's because caching anything that's from outside of netty-transport will lead to ClassCastException on reload, because ChannelOption's constant pool will keep all option objects for reuse.
    
    - Signal implements Constant because we can't ensure its uniqueness anymore by relying on the exception raised by UniqueName's constructor.

commit 573b54a93d45553e1726bcab54f0e325ae9f0bde
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Oct 11 06:38:18 2013 +0200

    [#1907] LengthFieldPrepender should better extend MessageToMessageEncoder for less memory copies

commit 2d96b32155dd56f8ffcbcc2a571652df812fb06b
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 13 14:50:11 2014 -0800

    Clean-up ChannelOutboundBufferTest
    
    - partial port of 136e1ebba8a3965dab888d21aaa292ce921c704d

commit a65f097d53f8d1827556d4d1b41d8432d3c664b5
Author: Trustin Lee <t@motd.kr>
Date:   Tue Oct 8 17:18:41 2013 +0900

    Allow empty handler list when creating a new EmbeddedChannel
    
    .. so that it can be used for dynamically initialized pipelines
    
    - Fixes #1899

commit 517da2b46a41b779ebb41d4508c7abf5d027a9e2
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Oct 2 06:44:10 2013 +0200

    Fix checkstyle

commit 7e5aa4a911af76b8964d0fd55eb082a46eb419b4
Author: Bill Gallagher <bgallagher@twitter.com>
Date:   Tue Oct 1 15:15:48 2013 -0400

    use enum for state in LocalChannel

commit a19fe069284456b1c98028fb07e44332ba4b2498
Author: Bill Gallagher <bgallagher@twitter.com>
Date:   Tue Oct 1 15:00:28 2013 -0400

    use enum for state in EmbeddedChannel

commit 60acd54c7efb2385ab7488f69c5b62c2e1a33183
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Oct 1 10:20:01 2013 +0200

    [#1876] Make use of proper state machine in WebSocket08FrameDecoder for performance reasons

commit 449ce0dd7ab0361790d0f6d267d76a23f126129f
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 13 13:59:12 2014 -0800

    Remove the irrelevant AIO channel options

commit 85ab9b598209c342fac56077d476ce0d65c2f1c9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Sep 2 10:02:12 2013 +0200

    [#1710] Add missing duplicate() overrides in interfaces

commit faaff9bd86166c12ff98aa06a946db3e4dd9ee90
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 13 13:55:39 2014 -0800

    Backport the tests in ReentrantChannelTest
    
    - Originally from c149f4bcc0c0d02aa1abcd5e39c155a9e598822e by @wgallagher

commit 69a36b8beab76ad176a20554d692e89d62f8919b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 13 06:46:51 2014 +0100

    Prettify exception message

commit 62ebe88981ab42b28eafad89586307e0c249f00a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Feb 12 15:22:39 2014 +0100

    Allow to set IoRatio to 100%

commit 80e6f9adf4ef7eaa273eee8818a4ffd7bb0c5d06
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Feb 11 18:08:40 2014 +0100

    Correctly respect isAutoRead() and make it consistent across OIO/NIO

commit 7041a9238e5087efa5fb0fa3d8a5d0721eb5f610
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Feb 7 20:52:37 2014 +0100

    Allow to cancel non-flushed writes

commit d52dc3b740e778bbab60b2a7b5715ec44f31c10b
Author: Trustin Lee <t@motd.kr>
Date:   Mon Feb 10 15:03:46 2014 -0800

    Do not warn if failed to mark a void promise as success
    
    - it's always supposed to fail.

commit 96b0a949e102a5766abc5e12b3392b1bf3da7005
Author: Trustin Lee <t@motd.kr>
Date:   Mon Feb 10 14:52:24 2014 -0800

    Make most outbound operations cancellable / More robust promise update
    
    - Inspired by #2214 by @normanmaurer
    - Call setUncancellable() before performing an outbound operation
    - Add safeSetSuccess/Failure() and use them wherever

commit 852a7cec77ae0236ae0664f5f021b233f747c47f
Author: Trustin Lee <t@motd.kr>
Date:   Mon Feb 10 14:11:38 2014 -0800

    Make the build not fail in JDK8 until we fix Javadoc

commit 041d37e0c8b3616dc86468bd2c3b6332638bdf1b
Author: Trustin Lee <t@motd.kr>
Date:   Mon Feb 10 14:04:47 2014 -0800

    Make most outbound operations are cancellable
    
    - Inspired by #2214
    - It actually reduces the chance of trying to marking a cancelled promise as success again, which raises an IllegalStateException.

commit 838e80ed6b522cb797b206e43fd9b749c8aaac76
Author: Trustin Lee <t@motd.kr>
Date:   Mon Feb 10 13:40:30 2014 -0800

    Fix external Javadoc url

commit 0e71da3082d51b0099bd6e7e22369dd7d7615b98
Author: Trustin Lee <t@motd.kr>
Date:   Mon Feb 10 11:47:54 2014 -0800

    Fix a bug where DefaultPromise.setUncancellable() returns a wrong value
    
    - Fixes #2220 - again
    - Missing negation

commit 7e0e4c63258b3af6155dfe463d6ea4741ac48dc9
Author: Trustin Lee <t@motd.kr>
Date:   Mon Feb 10 11:39:29 2014 -0800

    Fix a bug where DefaultPromise.setUncancellable() returns a wrong value
    
    - Fixes #2220
    - Its Javadoc says it returns true when the promise is done (but not cancelled) or the promise is uncancellable, but it returns false when the promise is done.

commit 084db044cd57aededdb650ef17301b6ba9e60799
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Feb 9 17:10:09 2014 +0100

    [#2219] Fix javadocs of HttpObjectAggregator to show correct handler order in pipeline

commit ed4f7305ceff7eb91dd81f1e24c13d671b2eece1
Author: Trustin Lee <t@motd.kr>
Date:   Sat Feb 8 11:14:16 2014 -0800

    Remove the StringCache option which was removed in JDK8

commit c8ec5be8423533cd51466f226dd645057e01b1d3
Author: Trustin Lee <t@motd.kr>
Date:   Sat Feb 8 11:07:36 2014 -0800

    Remove a version clause added by mistake

commit aeeb2e7bac0545d85ade01ed4e837ed8ab679c35
Author: Trustin Lee <t@motd.kr>
Date:   Sat Feb 8 10:48:05 2014 -0800

    Fix a build error related with NPN version and JDK8

commit c93337b01ad951fd8e3df940cb1f34deb1ad90b8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Feb 8 19:00:59 2014 +0100

    [#2212] Skip autobahntestsuite when using -DskipTests

commit 50b862349ceaec9cccb9bf20971fa6e202d6bea5
Author: Trustin Lee <t@motd.kr>
Date:   Sat Feb 8 09:12:56 2014 -0800

    Fix a build error
    
    which occurred when -Pcoverage was not specified

commit e592d0636470fa720fc7715c90cfbe5af632ca78
Author: Trustin Lee <t@motd.kr>
Date:   Sat Feb 8 08:56:03 2014 -0800

    Fix the compilation error in ConcurrentHashMapV8 + JDK8

commit 060eed9e80241e59ea96a05839dc8569a36c6923
Author: Trustin Lee <t@motd.kr>
Date:   Sat Feb 8 08:50:27 2014 -0800

    Prefer interface to implementation in type declaration
    
    This fixes the build failure with JDK 8 due to animal sniffer error

commit 21c4aaa12b68358e3501971958c2377ea12fdb18
Author: Trustin Lee <t@motd.kr>
Date:   Sat Feb 8 08:42:03 2014 -0800

    Add 'coverage' profile that generates the test coverage report

commit 87602fde252b90850e3a702e82256a3b2e0b56b9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Feb 7 22:03:05 2014 +0100

    [#2215] DefaultChannelHandlerContext tasks needs to be volatile to ensure every thread only see full initialized instances

commit 87b853c60d97590ea49bc6b96b9b2d2abce5ff97
Author: Trustin Lee <t@motd.kr>
Date:   Fri Feb 7 14:42:49 2014 -0800

    Use smaller number of boss threads in the example
    
    .. because usually there's no need to use many boss threads.

commit ea345f6421a865e185e4c39ebb43a7a1def48280
Author: Trustin Lee <t@motd.kr>
Date:   Fri Feb 7 14:18:39 2014 -0800

    (Kind of) skip autobahn testsuite on -DskipTests
    
    - autobahntestsuite-maven-plugin does not provide a way to skip all
      tests, so we run only one simple test when -DskipTests is set

commit 617739c515876d046a29389ca254ab86b2cccb6a
Author: Trustin Lee <t@motd.kr>
Date:   Fri Feb 7 13:40:22 2014 -0800

    Simplify exec-maven-plugin configuration
    
    - Move the version number to the parent pom's pluginManagement section
    - Remove unnecessary system properties
    - Increase the scope of execution from compile to runtime

commit 8e854bbf18a712b35932283a279d3ac99544a265
Author: Trustin Lee <t@motd.kr>
Date:   Fri Feb 7 10:26:51 2014 -0800

    Fix indentation

commit 78cf0e37e2f8411c1179e2a48eecb7e401d18878
Author: Trustin Lee <t@motd.kr>
Date:   Fri Feb 7 10:22:04 2014 -0800

    Log the rejected listener notification task under a dedicated logger name.
    
    - Fixes #2166
    - Some user applications are fine with the failure of notification

commit 2e064ee87f372cd68aa870b92164f9c8cc2010aa
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Fri Feb 7 13:13:19 2014 +0100

    Fixing spelling of 'request' for handler names.

commit 9ca71f2d8e9546ffe56611612d33451f80813264
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Fri Feb 7 10:49:22 2014 +0100

    Adding ability to start spdy server/client using maven.

commit f23d68b42fd71674fee6623f6779d70b6849da21
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Feb 7 09:23:16 2014 +0100

    [#2187] Always do a volatile read on the refCnt

commit 103a08e6c622c1b9936bba2fac852890a2ef579e
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 6 22:29:53 2014 -0800

    Reduce code duplication in DefaultPromise

commit 309ee68c217b4d6a5e83a15dc0b9d7b713d3fd6c
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 6 16:06:30 2014 -0800

    Fix a race condition in DefaultPromise
    
    .. which occurs when a user adds a listener from different threads after the promise is done and the notifications for the listeners, that were added before the promise is done, is in progress.  For instance:
    
       Thread-1: p.addListener(listenerA);
       Thread-1: p.setSuccess(null);
       Thread-2: p.addListener(listenerB);
       Thread-2: p.executor.execute(taskNotifyListenerB);
       Thread-1: p.executor.execute(taskNotifyListenerA);
    
    taskNotifyListenerB should not really notify listenerB until taskNotifyListenerA is finished.
    
    To fix this issue:
    
    - Change the semantic of (listeners == null) to determine if the early
      listeners [1] were notified
    - If a late listener is added before the early listeners are notified,
      the notification of the late listener is deferred until the early
      listeners are notified (i.e. until listeners == null)
    - The late listeners with deferred notifications are stored in a lazily
      instantiated queue to preserve ordering, and then are notified once
      the early listeners are notified.
    
    [1] the listeners that were added before the promise is done
    [2] the listeners that were added after the promise is done

commit 2598223d0ecb31508de2a02d7310a7eeef864466
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 6 21:22:01 2014 -0800

    Fix resource leaks in WebSocketServerProtocol(Handshake)Handler
    
    - Related: #1975

commit c4c71e6d289b034e6415e3b04ea8e56c0fd11b99
Author: Trustin Lee <t@motd.kr>
Date:   Thu Feb 6 14:59:31 2014 -0800

    Fix the potential copyright issue in SocksCommonUtils
    
    - Add StringUtil.toHexString() methods which are based on LoggingHandler's lookup table implementation, and use it wherever possible

commit 9bee78f91c46bfe7f7e4049b568dc13675d4b611
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Feb 4 10:37:40 2014 +0100

    Provide an optimized AtomicIntegerFieldUpdater, AtomicLongFieldUpdater and AtomicReferenceFieldUpdater

commit 3d531231fe14666e11d0ade1955d6ccaa414845a
Author: Vladimir Schafer <vladimir.schafer@gmail.com>
Date:   Thu Feb 6 20:41:38 2014 +0200

    #2183 Fix for releasing of the internal cumulation buffer in ByteToMessageDecoder

commit 85a997d5ec36ef07e0c97cc273d5bd1782df8f3d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 6 10:47:59 2014 +0100

    Correctly calculate checksum when using GZIP. Part of [#2168]

commit dddfb149a5f7c043ff4d20c36a132a6f2dedd4f8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 6 10:34:05 2014 +0100

    [#2173] Fix regression that let HttpRequestDecoder fail if the websocket response and a websocketframe are send in one go

commit d343a258e201796f010bcf5926df1a77bc04637e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 6 07:10:33 2014 +0100

    Allow to skip autobahntestsuite by specify property skipAutobahnTestsuite

commit 417f7264fdb431b34adf8358b9dc2ac2bfcb87c1
Author: Trustin Lee <t@motd.kr>
Date:   Wed Feb 5 14:54:02 2014 -0800

    Reorganize the SPDY example
    
    - Move the server example to spdy.server
    - Move the client example to spdy.client
    - Fix inspection warnings

commit 69a1095976df0b2092b16cfb751514020f86bf64
Author: Leonardo Freitas Gomes <leonardo.f.gomes@gmail.com>
Date:   Fri Jan 24 01:25:46 2014 +0100

    SPDY client example
    
    Demonstrates the usage of SPDY from a client perspective. One can also
    use a SPDY-enabled browser as a client, but it’s easier to understand
    the internals of the protocol from a client point-of-view if you have
    some code you can debug.

commit 147e08a30e63b5f9afbdf1cb827d7894ba9fba55
Author: Vladimir Schafer <vladimir.schafer@gmail.com>
Date:   Sun Feb 2 21:31:27 2014 +0200

    #2177 Adding support for bound host and port for the SOCKS5 command response. Changes are fully backward compatible.

commit 40f4b5c9dbf8c93cc52585309322bfc4811d7237
Author: Valentin Kovalenko <valentin.male.kovalenko@gmail.com>
Date:   Fri Jan 31 14:51:21 2014 +0400

    Restore of interrupt status after catch of InterruptedException was added

commit 38d04c927f8277389c42ad433c7fd5887d31913f
Author: jwilson <jwilson@squareup.com>
Date:   Sat Feb 1 12:32:21 2014 -0500

    Tweak snoop example to send a full HTTP request.
    
    Without this, future HTTP requests on this channel will
    silently fail because the HttpObjectEncoder will be left
    in an unhappy state.

commit 64c3f58279809141a851becba445a20badc8a610
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 30 20:02:15 2014 +0100

    Not wakeup the EventLoop for writes as they will not cause a flush anyway

commit f94b563bcd64840a9978204e75812ed182830990
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 30 07:00:53 2014 +0100

    Better exception message to tell the user why it is not supported

commit 0f7379157a9a1170ba611110d554d26770e3cf25
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 30 06:29:52 2014 +0100

    [#2168] Eliminate unnessary memory copy for heap buffers in JdkZlibEncoder
    
    * Also adjust tests so it test with direct and heap buffers

commit 37e65888457cf62a0dcdb4f667ea6170bb6e582c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jan 29 13:56:42 2014 +0100

    [#2159] Not fail the ChannelPromise with WriteTimeoutException to prevent warning

commit 80ed147652133ce222279f34e21f4b44e8a4a728
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jan 29 07:18:29 2014 +0100

    [#2164] Only reregister SelectionKeys that are still valid

commit 9f7a9077d6fa1508690a7719199e586d001865b6
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jan 29 12:12:46 2014 +0900

    Remove code duplication

commit 8386aabf94ffab834bb09d7a454f093802670efd
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jan 29 11:55:51 2014 +0900

    Exclude sun.nio.ch.DirectBuffer from animal-sniffer check

commit 6e8ba291cfcb325fe4397a8e7db43579070e7a07
Author: MiddleBen <20092003023@m.scnu.edu.cn>
Date:   Sun Jan 26 23:21:39 2014 +0800

    Simplify the acquisition of Cleaner

commit 0bf5ca22cb0f3bc08850c61e5d09eb01cc98e406
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jan 29 11:52:28 2014 +0900

    Cleaner resource leak report by excluding noisy stack trace elements

commit 293e34e13f5c3f52975d4a4d5e9224c52f3b0b67
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jan 28 07:23:10 2014 +0100

    Run autobahntestsuite as part of the build

commit 9b0e5b914875f6cbb857ed34c1b157a36315e41a
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jan 28 13:56:13 2014 +0900

    Fix API documentation on the usage of AttributeKey

commit 407e12d99b7af20f9bddb17edb6e086439b02e23
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 23 15:02:38 2014 +0100

    Not throw an exception if subprotocol is not supported but just drop the header as stated in the RFC's

commit 6b790f1868ac71e437aae942cf243bce9eabbeae
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jan 24 20:07:33 2014 +0900

    Fix a compilation error

commit bea7039c3e900670d9feefb77a0df77df9c9a750
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jan 24 16:44:22 2014 +0900

    Add a log message on deletion failure

commit 22494372250b737c97c4e39692a2ecb665f99cf9
Author: Frederic Bregier <fredbregier@free.fr>
Date:   Thu Jan 23 13:21:59 2014 +0100

    Fix fileChannel not closed, preventing delete to occur correctly

commit f0c7c901d08dc5acaea2fa3a22119f9f4a5e8ada
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 23 07:04:42 2014 +0100

    Add testcase to try to reproduce #2144

commit d67184b488d163be03437e68ee2ec33ea7add2f6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jan 21 08:18:32 2014 +0100

    [maven-release-plugin] prepare for next development iteration

commit 287515210d2215d8355a60809871fe09ac943f10
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jan 21 08:18:26 2014 +0100

    [maven-release-plugin] prepare release netty-4.0.15.Final

commit 5f8a0cc10b97ce303fd2de90220cca9085b2eaeb
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jan 21 07:17:40 2014 +0100

    Make use of a Logger in the SPDY example and simplify it a bit

commit 9a9f98ffcd947668aeb8ca6bc974cb8dcb3870a9
Author: Veebs <vibuli@gmail.com>
Date:   Wed Jan 15 03:29:18 2014 -0800

    SPDY example app

commit b1392050f7c5205a50d7e9ee979ba27fa4741555
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jan 21 14:25:31 2014 +0900

    Disable Javassist completely on Android
    
    - Related: #2127
    - Inspector warnings

commit da5da8e212727991eaaad8f06cce108a3d025471
Author: Frederic Bregier <fredbregier@free.fr>
Date:   Mon Jan 20 16:43:55 2014 +0100

    Fix try to delete file while it does not exist anymore (see #2102 and #1713) in reference to this issue

commit ed8ee336610759b48b3e8974df1a849f0a603f63
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jan 20 14:41:40 2014 +0100

    [#2058] Use correct MANIFEST.MF file for source jars

commit 149c7e82a254c11b1b4982f13020a2b6fc0c98be
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jan 19 22:22:08 2014 +0900

    Add HttpPostrequestEncoderTest by @igstan

commit 95bcbe5e08c16f70553e00cc535a9e450c902f21
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jan 19 22:21:24 2014 +0900

    Backport the HttpPostRequestEncoder fixes by @igstan

commit f3482670f9e936ae8f9007d2e6678f13793331bd
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jan 19 17:50:48 2014 +0900

    Fix IllegalReferenceCountException which occurs when multipart data is stored in memory
    
    - Fixes #2102

commit 2389c71e81dbbfab3352e059bdf52d4de73fb0f4
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jan 19 16:53:43 2014 +0900

    Fix resource leak in InternalAttribute.setValue()

commit 9b38e8778c3ee7f9c317193a4868e6c280acfb28
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jan 19 15:09:41 2014 +0900

    Prettify / Saner initial capacity

commit 2746688fd7da77df0e72e2a20364a0b6803e4096
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jan 19 14:26:36 2014 +0900

    Fix occasional failure in SocketConnectionAttemptTest
    
    - Use the real host name with a firewall so that the connection attempt always takes long time on all platforms.
    - Fixes #2128

commit 39b8cc348ab1e3fefbd56751e949ab930db86853
Author: William Kemper <doohick@gmail.com>
Date:   Thu Jan 16 14:59:29 2014 -0800

    fix grouping for isActive - socket.isBound is almost always true and should not override 'isOpen'

commit faf8becf2e12fdb46ba256c39eedab501ed3cdcb
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jan 14 16:08:29 2014 +0100

    Make use of ByteBufProcessor for extract initial line and headers
    
    This gives some nice performance boost as readByte() is quite expensive because of the index / replay checks.

commit 89307099407ad73322fcdaf1aa81773c8bc2b8c5
Author: Stephane Landelle <slandelle@excilys.com>
Date:   Thu Jan 16 11:08:48 2014 +0100

    += won't let compile optimize String concats

commit e0b0a998870bf34faec35b13731fbb2576d9b3e1
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 16 09:00:27 2014 +0100

    Fix compile error

commit 75b0360867022e112bc8044e4e728f6bf235d700
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Mon Dec 16 14:36:45 2013 +0100

    Adding a Cross Origin Resource Sharing (CORS) handler.

commit 46df4f800f4fc8dcf6f3c48ae861f57299b5aaa6
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jan 16 14:33:00 2014 +0900

    Update README.md

commit ac332dfe02efa04a6fe4ce18f80157c5191bacf2
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Wed Jan 15 11:25:50 2014 +0100

    Using SystemPropertyUtil for prperty parsing.

commit 99f9c6dbc3393a7c21ab4052547ecb664a6c5c3b
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Tue Jan 14 13:34:23 2014 +0100

    Make JMH options modifiable through the subclassed benchmark.

commit 437a9403b0af507e1303659c24b94e4c59ec2639
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jan 15 17:02:04 2014 +0100

    Fix inspector warnings

commit 2df690b0e43eb55486a4adc9cefad8bd42345190
Author: Veebs <vibuli@gmail.com>
Date:   Mon Jan 13 15:07:35 2014 -0800

    Add HttpChunkedInput for easier streaming of chunked content

commit 462817cd96ad68e80b2c6d98e38e6225232708ce
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jan 15 16:00:18 2014 +0900

    Add a link to the wiki page about the microbench module

commit 03b0099b6305a3c9d7fe9df70b9d47d0ebfdf9c0
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Mon Dec 23 09:29:14 2013 +0100

    microbench: move from Caliper to JMH

commit f66be21ee35d0b7c114aa96ca72f8bbc48042b25
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jan 14 14:22:06 2014 +0900

    Use the source frame's allocator instead of the unpooled allocator

commit 237ba27499e102c6ad43d6111590a6c43570a660
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jan 13 23:29:41 2014 +0900

    Better exception message

commit 3373f83cbbdf86c3e6518f275e964de5f3b3f232
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jan 13 23:25:32 2014 +0900

    Fix a bug where DefaultChannelPipelineTest.testFireChannelRegistered() triggers channelRegistered() twice

commit febc53daaaa0e72dfaf071bc026f68e6b19fd350
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jan 13 23:07:51 2014 +0900

    Port the changes in SpdyHeaderBlockRawDecoder to master & 4.0
    
    Somehow it slipped away.

commit b8de47484a3822b097d6721fe443674ce18ffc0e
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jan 13 23:00:41 2014 +0900

    Port the changes in SpdyHeaderBlockZlibEncoder to master & 4.0
    
    Somehow it slipped away.

commit cead74f84db8e28b2bff9b8047ba8edce1c6b66b
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jan 13 22:57:34 2014 +0900

    Fix checkstyle

commit 06cbac922ada558e9b0ebeb9e58eb19d683ab451
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jan 13 22:40:34 2014 +0900

    Fix a bug where SpdyHeaderBlockZlibDecoder fails to decompress
    
    - Forward-port 4c35b593c1ec811d1134cb0ef43db9329935e18e, originally written by @wgallagher
    - Fixes #2077

commit 5cb9ab0fc0bba3891c3133e8b842f661ac6aaa5c
Author: Veebs <vibuli@gmail.com>
Date:   Sun Jan 12 15:50:46 2014 -0800

    Correct JavaDoc

commit 1326ba54ee60e0ad56933293f218a53bd43ffd9c
Author: Veebs <vibuli@gmail.com>
Date:   Sun Jan 12 16:28:03 2014 -0800

    Replaced deprecated 'sendUnsupportedWebSocketVersionResponse()' with 'sendUnsupportedVersionResponse()'

commit eca56135349ea5561a7e8ea73fec0dc67a63cd61
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Jan 11 14:19:43 2014 +0100

    Cleanup and remove get prefix of method to be more inline with our API

commit 3ce35c710a5fc9a8416436b4bce09c98e7ed45b2
Author: Leonardo Freitas Gomes <leonardo.f.gomes@gmail.com>
Date:   Sun Jan 5 15:53:52 2014 +0100

    Improves SelectedProtocol enum to avoid boilerplate on subclasses
    
    NPN server providers return a String version of the negotiated protocol
    and the getProtocolByName method allows to easily get an instance of
    the SelectedProtocol enum and avoid the need for a switch statement in
    each subclass to match the String against the enum value.

commit 2c3f02c4532583b5b4cf3258e93f81394da9cd87
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jan 6 16:38:03 2014 +0100

    Allow to extend the provided tests by the testsuite
    
    This allows custom transport implementations to just re-use the tests provided by netty and so make sure everything works like expected.

commit 8d431679d7b2d35e68b1730aa4bf896eb740bb6a
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jan 10 16:36:48 2014 +0900

    Fix a compilation error

commit b24494abeb3515fac9c5392a14f7a92b1f9550f2
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jan 10 16:16:02 2014 +0900

    Fix a bug where HttpObjectDecoder produces LastHttpContent after entering BAD_MESSAGE state
    
    - Fixes #2103
    - Added LastHttpContent.EMPTY_LAST_CONTENT.toString() for athestic reasons.

commit 2ca7eae136d5a3bf2a8bef4eb4a8204648e85268
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jan 10 15:14:17 2014 +0900

    Do not deploy the testsuite

commit a3fb9fc8234f2176a7832959606ed8f1e337fc32
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jan 10 15:06:25 2014 +0900

    Move the testsuite classes back to src/test

commit 13d65d7ccfcaa90f8e905e9b6c46aa0f246d8109
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 9 18:27:56 2014 +0100

    [#2104] Make sure we only act on the SelectionKey if it is valid

commit b5f49203de838fd3ddfac819f80206bef80f2abe
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jan 9 19:48:57 2014 +0900

    Remove unnecessary trailing newline

commit 0e5d6967329e0e8b81661e08717dd226720d7c76
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jan 9 19:43:47 2014 +0900

    Do not deploy an unused test jar

commit 44b25ff79bcf9cd5ce87fa4e5478022953dd3afc
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jan 9 19:39:10 2014 +0900

    Remove unnecessary test resource

commit 751943ed00e864f1104806c7e03a1207797cf1b6
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jan 9 19:24:44 2014 +0900

    Fix a potential NPE due to the race between a connection attempt and its cancellation
    
    - should fix #2086

commit 1b79781b4ef125b55819d8429b137e3a3e670d38
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jan 9 18:46:47 2014 +0900

    tab -> spaces

commit de5abdeb489d08b2ebd60f6dc6e176fd9eb74767
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jan 9 18:43:13 2014 +0900

    Move the reusable classes in netty-testsuite to main/java/src and deploy them

commit bc21443ea904ba37f46c1fb3b9ab99322e3bbb0d
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jan 9 18:07:36 2014 +0900

    Fix a regression in SslHandler where delegated tasks run in a different executor makes the session hang
    
    - Fixes #2098
    - Deprecate specifying an alternative Executor for delegated tasks for SslHandler

commit 0bbc3facec1fa6c83b0bec04bdfbefc424230a3f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 9 08:22:34 2014 +0100

    [#2086] Fix race which could produce NPE in AbstractNioUnsafe.finishConnect

commit 393f7b2306f282df852bb487173c725396607ea7
Author: milenkovicm <milenkovic.m@gmail.com>
Date:   Fri Jan 3 16:16:12 2014 +0000

    ChannelOutboundBuffer returns total pending write size
    
    total pending write size may be used to optimize write batching

commit b9bbded84e8bfe870fc3e29139d86b71c98d6908
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jan 6 17:34:19 2014 +0100

    [#2090] Correctly format DefaultHttpRequest#toString()

commit dd8f4bc0c4f46ec5f6dea23023cfa5fde8fb5448
Author: Veebs <vibuli@gmail.com>
Date:   Mon Dec 30 03:03:13 2013 -0800

    Fix typo

commit 7d90c5b756ff3b7179b9f63dc6399c1caa896d3a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jan 3 11:11:08 2014 +0100

    [#2088] Introduce sendUnsupportedVersionResponse(...) methods which allows to use the ChannelFuture/ChannelPromise to get notified once the response was send.
    
    Also mark the old method as deprecated.

commit e83d2e0b4e984f39a4cae020b75b34d5168190e2
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 22 21:57:48 2013 +0900

    [maven-release-plugin] prepare for next development iteration

commit cdb700c7a4d0aad49ca38e17c0c746548869641f
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 22 21:57:40 2013 +0900

    [maven-release-plugin] prepare release netty-4.0.14.Final

commit 0b7aedb13b519ebe7168be150a39913738415e3e
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 22 21:53:24 2013 +0900

    [maven-release-plugin] rollback the release of netty-4.0.14.Final

commit 4bf6ec71713b39cc88870429cb3d97687ba71e23
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 22 21:52:56 2013 +0900

    [maven-release-plugin] prepare release netty-4.0.14.Final

commit 372be721a15b1ff1cbfb358d0d9be412e57b924a
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 22 21:48:50 2013 +0900

    Use the latest Git SCM provider

commit 9c1a49c58e3d66008bfbf380214fb64dd051afc2
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 22 21:47:35 2013 +0900

    [maven-release-plugin] rollback the release of netty-4.0.14.Final

commit 008a049bf4c6629f79248d7fef0da7674d86b775
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 22 21:43:55 2013 +0900

    [maven-release-plugin] prepare for next development iteration

commit f6cb9088c620f7909b4e9824be4e816a5ce410da
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 22 21:43:45 2013 +0900

    [maven-release-plugin] prepare release netty-4.0.14.Final

commit 8ea48bd602cca8a681baf2b26301b141dfd28eb2
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 22 21:37:45 2013 +0900

    Trying out an older version of release plugin

commit af0dbb9072949b083183d5b2263a520af14d8d6e
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 22 21:23:49 2013 +0900

    Use the recommended maven-release-plugin version

commit f65237861bf82ca2d47abd163117232aceac0153
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 22 21:20:40 2013 +0900

    Potential fix for the release problem

commit dd49b1cfac998aaa963bcbebbd056dd869688d34
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 22 19:16:49 2013 +0900

    Use LinkedHashSet for HttpHeaders.names() and add Javadoc about the performance of names() and entries()

commit fc2e6916d996f6f1b16f9478c1c9213007fcbd20
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Dec 21 21:39:51 2013 +0100

    Fix regression which was introduced by 89a7cb8e710952e76a3a09b113fcb6ebe17acb12
    
    Related to [#2060]

commit bab227213ef30a414f3ec3db41c1a28646120a6c
Author: Trustin Lee <t@motd.kr>
Date:   Sat Dec 21 20:08:15 2013 +0900

    Increase the default maxMessagesPerRead of  AbstractNioByteChannel to 16
    
     - Related: #2079

commit 1fcd19a28fbab687eb2be65ad3535d1564d656cc
Author: Trustin Lee <t@motd.kr>
Date:   Sat Dec 21 19:56:36 2013 +0900

    Fix a bug where adaptive recvbuf size prediction doesn't work correctly when maxMessagesPerRead is > 1

commit b889d3f559ce9cb8ed715ed6ad9721efa6614b42
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Dec 21 10:37:19 2013 +0100

    [#2079] Stop reading once the NIO byte Channel was complete drained

commit 89a7cb8e710952e76a3a09b113fcb6ebe17acb12
Author: Trustin Lee <t@motd.kr>
Date:   Sat Dec 21 18:08:58 2013 +0900

    More graceful registration failure
    
    - Fixes #2060
    - Ensure to return a future/promise implementation that does not fail with 'not registered to an event loop' error for registration operations
    - If there is no usable event loop available, GlobalEventExecutor.INSTANCE is used as a fallback.

commit 836ac02ab931088a8608bb33a419fa55f44472d5
Author: Trustin Lee <t@motd.kr>
Date:   Sat Dec 21 16:23:05 2013 +0900

    Relax Maven version requirement

commit 47d0a85720a89b7ab4ccc13577b785b203cb1505
Author: Trustin Lee <t@motd.kr>
Date:   Thu Dec 19 01:13:02 2013 +0900

    Fix a leak in HttpResponseDecoderTest

commit 0052d83db18ce710be65d8a6732c994227bf31fe
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Dec 18 13:55:15 2013 +0100

    Limit the access of the HttpHeaders for performance reasons

commit e9f09ea9f5f1b371fbdce95c6ddc97030f9b5c58
Author: Trustin Lee <t@motd.kr>
Date:   Wed Dec 18 20:29:13 2013 +0900

    Stop decoding after protocol upgrade / Do not use singleDecode option

commit 0f76b3c357fbb3500a9f0742e9369139b3283ceb
Author: Trustin Lee <t@motd.kr>
Date:   Tue Dec 17 00:17:35 2013 +0900

    Remove unnecessary code from HttpObjectDecoder and re-enable all HTTP tests
    
    - Since Netty 4, HTTP decoder does not generate a full message at all.  Therefore, there's no need to keep separate states for the content smaller than maxChunkSize.
    - maxChunkSize must be greater than 0. Setting it to 0 should not disable chunked encoding. We have a dedicated flag for that.
    - Uncommented the tests that were commented out for an unknown reason, with some fixes.
    - Added more tests for HTTP decoder.
    - Removed the Ignore annotation on some tests.

commit 2b09d92c373813a0f3ebf79df73ca25a494b8911
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 16 21:55:14 2013 +0900

    Improve the unit test for #1742

commit 3444c0665490bfbd3fd100146a11736de9d58d36
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 16 21:44:44 2013 +0900

    Fix a bug where HttpObjectAggregator fails to send a '100 Continue' response
    
    - Fixes #1742

commit f7a38815363fbf67de0ddd819119808aee386543
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 16 16:30:24 2013 +0900

    Fix a bug in SslHandler where a ClassCastException is raised when non-ByteBuf message is passed
    
    - Fixes #1828

commit d7d4ea8c6ded087b3dfe8fd768ebbdce319719ee
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 16 15:15:53 2013 +0900

    Remove unnecessary check in DefaultPromise.await0()
    
    - Fixes #2032
    - Fix inspection warnings

commit ceaebd37edc2a2ee388d41b997c37e51f4d60d34
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 16 15:02:13 2013 +0900

    Rename flushAndWrite() to writeAndFlush()
    
    - Fixes: #2066
    - Fixed inspection warnings

commit 82b6e75b96c4cd3ae4b51039adcfd21bc83fa983
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 16 14:58:14 2013 +0900

    Rename flushAndWrite() to writeAndFlush()
    
    - Related: #2066

commit c3891a3df44a97570a3072aa4cd62d61fbe73d34
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Sat Dec 14 10:27:14 2013 -0800

    SPDY: add SETTINGS_MINOR_VERSION

commit 6447777ac236e9e0e3c6423ff0bfc5e116324587
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Thu Oct 17 08:21:35 2013 -0700

    SPDY: code cleanup

commit db59b38db330512219e6f7e3cf09b2c959d87cd1
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Mon Oct 14 07:27:50 2013 -0700

    SPDY: remove SPDY/2 support

commit 49587791b7b3a680b52193ef9259932b5e5cad0e
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 16 14:17:47 2013 +0900

    Fix a compilation error

commit c1704039f0a40d56d13a5fef348148150809b913
Author: Bill Gallagher <bgallagher@twitter.com>
Date:   Fri Oct 11 15:49:33 2013 -0400

    bring back entries()

commit e6eb7fa4664b18682be55745d3e0f663b661804b
Author: Bill Gallagher <bgallagher@twitter.com>
Date:   Fri Oct 11 11:59:30 2013 -0400

    minor gc optimization: better DefaultSpdyHeaders.iterator()

commit 39ae2dd3f1856def09b21995ff0496b6ee59a8b8
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Fri Sep 27 10:48:16 2013 -0700

    SPDY: add SPDY/3.1 support
    
    - with Michael Schore <mschore@twitter.com>

commit a79dfe74b75fb3c6f016e3c327d8df24e5fb4593
Author: Trustin Lee <t@motd.kr>
Date:   Mon Dec 16 13:54:23 2013 +0900

    Prevent NPE from StringUtil.simpleName(..)

commit e136227ee6446777a94dfa3fc75159c8cf2ffd02
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Dec 15 11:41:04 2013 +0100

    [#2065] Fix NPE in AbstractOioByteChannel during write to the socket

commit e96531839822be2966bbdd34181cf9397a7bd829
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Dec 13 11:39:39 2013 +0100

    Optimize encoding of websocket frames by merge if possible

commit bddfc38c644742d70efe8521ef888dc2ff49bee9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Dec 11 10:18:26 2013 +0100

    [#2053] Do not allow < 1 on AppendableCharSequence init.

commit 81fa70c98d7334a1abb50109279ab6567517530c
Author: Cruz Julian Bishop <cruz@techern.com>
Date:   Tue Dec 10 09:24:17 2013 +0000

    Format and partially describe Gitignore
    
    Signed-off-by: Cruz Julian Bishop <cruz@techern.com>

commit b8fb8f3dbe65a6ad7eec2cf1ffa5661aca34bfb0
Author: Cruz Julian Bishop <cruz@techern.com>
Date:   Tue Dec 10 09:20:51 2013 +0000

    Add KDevelop project files to the gitignore file
    
    Signed-off-by: Cruz Julian Bishop <cruz@techern.com>

commit 419b5a8de76cfd040e869c6d7689c8c26e5f7c19
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 8 14:17:35 2013 +0900

    Disable logging temporarily when running testRegistrationAfterShutdown

commit 0097b904b75a1847fbcc16e5f0e902a6692ca9e3
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 8 14:12:10 2013 +0900

    Disable logging temporarily when running testRegistrationAfterShutdown2

commit dc9537e672f931a7bc26aa90263d3dd7189c386e
Author: Trustin Lee <t@motd.kr>
Date:   Sun Dec 8 13:02:37 2013 +0900

    Add more diagnostics to SocketConnectionAttemptTest to fix the flaky test / Cleanup

commit 3812b897e6f67bfe64f58ba0026c291a47b954c8
Author: Trustin Lee <t@motd.kr>
Date:   Sat Dec 7 11:13:50 2013 +0900

    Fix buffer leak in AbstractMemoryHttpData

commit 4116de8360f90f6709b750cb8cdc403a12072850
Author: Trustin Lee <t@motd.kr>
Date:   Sat Dec 7 11:03:55 2013 +0900

    Fix NoSuchElementException raised by ChannelInitializer
    
    .. again.

commit 02703e8fc1cf1560fccc7ebd804b274d24acb1b3
Author: Trustin Lee <t@motd.kr>
Date:   Sat Dec 7 10:57:13 2013 +0900

    Revert "Fix NoSuchElementException raised by ChannelInitializer"
    
    This reverts commit 3c453f5dbaf8524d46c9fb3285d2ea7ae8bdb5b6.

commit b3d8c81557315ac5b5d4b381fe7461ce276a3f9e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Dec 6 12:40:11 2013 +0100

    Fix all leaks reported during tests
    
    - One notable leak is from WebSocketFrameAggregator
    - All other leaks are from tests

commit 51428004b3b4ff6267c81144cd01e9cc04f62193
Author: Trustin Lee <t@motd.kr>
Date:   Sat Dec 7 00:39:21 2013 +0900

    Fix NoSuchElementException raised by ChannelInitializer

commit 40001a7a5bdc216e45aa5541d6de2089f5fa49b9
Author: Trustin Lee <t@motd.kr>
Date:   Fri Dec 6 22:35:14 2013 +0900

    Add missing synchronization

commit 2102cb062b243df609cbb96393c23da77033980c
Author: Trustin Lee <t@motd.kr>
Date:   Fri Dec 6 21:32:33 2013 +0900

    Fix false-positive leaks
    
    - All derived buffers and swapped buffers of a leak-aware buffer must be wrapped again with the leak-aware buffer

commit e506581eb1f21bcd3e98fb22d91d1e366fde2541
Author: Trustin Lee <t@motd.kr>
Date:   Fri Dec 6 15:12:46 2013 +0900

    Add ReferenceCountUtil.releaseLater() to make writing tests easy with ReferenceCounteds

commit 128c4b96b5975c4ba2c7680eb7cc76839e0a59e2
Author: Trustin Lee <t@motd.kr>
Date:   Fri Dec 6 13:53:42 2013 +0900

    Checkstyle

commit 5d39b1fc3df8a0173bf6112a68d3258317d6e655
Author: Trustin Lee <t@motd.kr>
Date:   Fri Dec 6 13:44:59 2013 +0900

    Also record retain() and release()

commit 04a22498148669c5a1c2a8d32e50b2364ef61ae3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Dec 5 15:43:05 2013 +0100

    [#2041] Make PlatformDependent.isRoot0() work on solaris

commit 4f6a591e91058640393b4c00b022246b843169c3
Author: Trustin Lee <t@motd.kr>
Date:   Thu Dec 5 01:39:48 2013 +0900

    Do not log the deprecated system property when it's not specified by a user

commit e88172495a8167cc4a0dff717f1db4e212c39697
Author: Trustin Lee <t@motd.kr>
Date:   Thu Dec 5 01:02:38 2013 +0900

    Ensure backward compatibility
    
    .. by resurrecting the removed methods and system properties.

commit 65b522a2a75c78c977a65e15663509509b5f12e0
Author: Trustin Lee <t@motd.kr>
Date:   Wed Dec 4 19:03:32 2013 +0900

    Better buffer leak reporting
    
    - Remove the reference to ResourceLeak from the buffer implementations
      and use wrappers instead:
      - SimpleLeakAwareByteBuf and AdvancedLeakAwareByteBuf
      - It is now allocator's responsibility to create a leak-aware buffer.
      - Added AbstractByteBufAllocator.toLeakAwareBuffer() for easier
        implementation
    - Add WrappedByteBuf to reduce duplication between *LeakAwareByteBuf and
      UnreleasableByteBuf
    - Raise the level of leak reports to ERROR - because it will break the
      app eventually
    - Replace enabled/disabled property with the leak detection level
      - Only print stack trace when level is ADVANCED or above to avoid user
        confusion
    - Add the 'leak' build profile, which enables highly detailed leak
      reporting during the build
    - Remove ResourceLeakException which is unsed anymore

commit 7c7acdcaac89423de2bc2e8ddf104d5289829013
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Dec 3 13:56:43 2013 +0100

    [#2033] Correctly handle adding of IdleStateHandler after Channel was already active and registered

commit 05c10fae051163b3b3925ac1bd9b179fc3e3bb00
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Dec 3 12:04:07 2013 +0100

    Replace usage of StringBuilder by AppendableCharSequence for performance reasons

commit 053c512f6de708f1bb3f402cf6d911f88b1d38aa
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Dec 2 08:23:57 2013 +0100

    Fix checkstyle

commit 14600167d6ddc3829831a5470d73f091fc4b9aa7
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Nov 30 19:48:40 2013 +0100

    [#2021] No need to synchronize for unpooled chunks

commit 17f5865e381125c8ccc6e9188b62919f20c77572
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Nov 29 19:31:01 2013 +0100

    [maven-release-plugin] prepare for next development iteration

commit ead617fdcc1164f1e66e147a2484dea1193ede3c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Nov 29 19:30:55 2013 +0100

    [maven-release-plugin] prepare release netty-4.0.14.Beta1

commit 818bc602ee2ed0223ccc7b7fe440b931ae556b13
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Nov 29 15:57:31 2013 +0100

    Remove the use of ThreadLocal for performance reasons

commit 3f7b674db8c9c2fc562b95327e089bb3603c9009
Author: Trustin Lee <t@motd.kr>
Date:   Fri Nov 29 18:08:34 2013 +0900

    Fix bugs in ZLIB codec where they produce malformed stream or their streams are not flushed on time
    
    - Fixes #2014
    - Add the tests that mix JDK ZLIB codec and JZlib codecs
    - Fix a bug where JdkZlibEncoder does not encode the GZIP header when nothing was written to te channel
    - Fix a bug where the encoders do not consider the overhead of the wrapper format when calculating the estimated compressed output size.
    - Fix a bug where the decoders do not discard the received data after the compressed stream is finished

commit 6cf2748dbb49485b7f0851054dd0ad1776f0c5bd
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Nov 28 15:04:51 2013 +0100

    [maven-release-plugin] prepare for next development iteration

commit 5fe7596f4931e816b8e1f04e6dbe044c05421b86
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Nov 28 15:04:46 2013 +0100

    [maven-release-plugin] prepare release netty-4.0.13.Final

commit 0918f3edb2192ea3845524138dd852496b655444
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Nov 28 13:49:39 2013 +0100

    Fix test

commit 3dace666a34f82f5dac533eb357a853fd00bc29f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Nov 28 12:27:35 2013 +0100

    Merge buffers for performance reasons if possible when encode http requests/responses.

commit 7f57c5ed05302b708a63ac0e55ea57dca20cdbe9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Nov 28 08:15:14 2013 +0100

    Backport HTTP encoding / decoding optimizations which were introduced by #2007.
    
    The backport is partly done to keep backward compatibility

commit 14327706a3f032c0c37517d1674e925f961c742e
Author: Trustin Lee <t@motd.kr>
Date:   Thu Nov 28 18:24:03 2013 +0900

    Add test case for HttpHeaders.equalsIgnoreCase(...)

commit 313365cd5c313044247ef7b20fdffd230f4a07d5
Author: Trustin Lee <t@motd.kr>
Date:   Thu Nov 28 15:51:13 2013 +0900

    Fix NPE raised by HttpHeaders.equalsIgnoreCases() when one of its arguments is null

commit 6ade866d24eb9162a7d3b007f1d73c76ef91c401
Author: Trustin Lee <t@motd.kr>
Date:   Wed Nov 27 18:54:51 2013 +0900

    Fix maven-bundle-plugin life cycle mapping in Eclipse

commit 407f0a36f5ced80c1ebef8e3e6b419cd1e237a92
Author: Trustin Lee <t@motd.kr>
Date:   Tue Nov 26 20:27:58 2013 +0900

    Simplify bundle generation / Add io.netty.versions.properties to all JARs
    
    - Fixes #2003 properly
    - Instead of using 'bundle' packaging, use 'jar' packaging.  This is
      more robust because some strict build tools fail to retrieve the
      artifacts from a Maven repository unless their packaging is not 'jar'.
    - All artifacts now contain META-INF/io.netty.version.properties, which
      provides the detailed information about the build and repository.
    - Removed OSGi testsuite temporarily because it gives false errors
      during split package test and examination.
    - Add io.netty.util.Version for easy retrieval of version information

commit 8753412d07ade518704f738f5a8757369b084f54
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Nov 26 10:57:24 2013 +0100

    [#2006] Correctly handle HttpMessage / HttpContent implementations

commit 04e8d25792a6151c859bf087a96afbc521a5a2a1
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Nov 26 08:20:56 2013 +0100

    [#2005] Allow to use HttpContentDecompressor in strict mode

commit fd4435e6e36db2bd324d2eccc2016ce6675fd46c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Nov 26 08:09:14 2013 +0100

    Respect validateHeaders when duplicate/copy the response/request

commit 7ec70d0210ab6e48448ba78e11343ec8b699119a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Nov 22 20:18:19 2013 +0100

    Merge package private interfaces into public ones. Related to [#1989] and [#1991]

commit 80f72a827093b805596e1e46e9b73b692e2030be
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Nov 24 14:40:25 2013 +0100

    Optimize DefaultHttpHeaders.contains(...)

commit da84afe9cc5bb95025a6e431cc667eb08fd397cf
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Nov 24 14:32:55 2013 +0100

    Optimize check for equals header name and value

commit 5386882c543ed19667ca7b804dae6ef1cb13cbaf
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Nov 24 13:40:47 2013 +0100

    [#2003] Generate a io.netty.util.Version class which holds the version

commit 90309f906571fb47613cb8489c016dfff9584ee1
Author: Alex Petrov <alexp@coffeenco.de>
Date:   Wed Nov 20 10:13:33 2013 +0100

    Improve doc of IdleStateHandler according to example given in UptimeClientHandler (L57)

commit a159d3ebac5812e4f6c1394d81b853b0ac140510
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Nov 19 17:57:25 2013 +0100

    [#1994] DefaultPromise.cancel() should reuse CancellationException for performance reasons

commit fd776274c91e338af1364b75fae48547c8214c45
Author: Trustin Lee <t@motd.kr>
Date:   Mon Nov 18 17:00:23 2013 +0900

    Additional fix for potential race condition which occurs when a user cancels a connection attempt
    
    - Fixes #1986

commit 54d3c99469b923b409ce1a52b6d1181984470b11
Author: Trustin Lee <t@motd.kr>
Date:   Mon Nov 18 16:32:52 2013 +0900

    Fix an unexpected IllegalStateException from a selector loop when a user cancels a connection attempt
    
    - Fixes #1986

commit b5a587fadfd0821088d37d9d23388c343d73eb45
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Nov 15 12:00:33 2013 +0100

    Use pooled allocator for AutobahnServer and voidPromises

commit 5de4b23c7aab674ac6b73bfef1e2fca039065758
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Nov 14 09:33:40 2013 +0100

    [#1982] Limit the usage of ThreadLocal.get() for performance reasons

commit 8bfbf77b5898d3890f05fa55989e83bb457a6374
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Nov 14 08:19:49 2013 +0100

    Also allow to disable header validation via HttpServerCodec and HttpClientCodec. Related to [#1981]

commit c4130e0cf7b06308dab44b1b19851f3d9b266e7a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Nov 13 15:05:12 2013 +0100

    Allow to disable validation of HTTP headers which shows a 5k perf improvement here when disabled

commit b65b4199dc8ce2032a6b20a2712caa6aa0c7d2f2
Author: Trustin Lee <t@motd.kr>
Date:   Thu Nov 14 15:08:10 2013 +0900

    Fix regression introduced by 4c7fa950cc4f4c52eeaae5887335b1f3047592f8
    
    - Some promises were not fulfilled when SSLEngine produces 0 bytes.

commit 7231be592aa65ac1e91d0a319761f7e3df2225e9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Nov 12 12:40:41 2013 +0100

    Also allow to override how direct ByteBuffers are freed

commit e83fb821d512456113a5e16b21ddb5c5458d9e79
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Nov 12 12:13:38 2013 +0100

    Allow to override how wrapped direct ByteBuffer are allocated to make it easier to extend

commit b00f8c63901369babae2009e48f6c4d12b9f4097
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Nov 9 20:13:24 2013 +0100

    [#1976] Fix IndexOutOfBoundsException when calling CompositeByteBuf.discardReadComponents()

commit e4f391f626f1ce358b3037e38ecfec82eb9a4e30
Author: Alex Petrov <alexp@coffeenco.de>
Date:   Fri Nov 8 12:02:33 2013 +0100

    Improve docstrings for and of

commit ec1040931405be9469fb2b5b2045d4d257001b45
Author: Trustin Lee <t@motd.kr>
Date:   Fri Nov 8 18:04:40 2013 +0900

    Saner toString() implementation for EmbeddedSocketAddress

commit ba3bc0c0205ed37f0541e43dd747ebcc103f8ed8
Author: Trustin Lee <t@motd.kr>
Date:   Fri Nov 8 17:53:57 2013 +0900

    Simpler toString() for ByteBufAllocators

commit 11f95c78e203084ad367c7fcb546f5374e073d3b
Author: Trustin Lee <t@motd.kr>
Date:   Fri Nov 8 14:21:19 2013 +0900

    Optimize SslHandler
    
    - Fixes #1905
    - Call ctx.flush() only when necessary
    - Improve the estimation of application and packet buffer sizes
    - decode() method now tries to call unwrap() with as many SSL records as
      possible to reduce the number of events triggered

commit db78581bbbe9e207a0d95b7c0e3b21a070aea9d1
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Nov 7 18:11:45 2013 +0100

    [maven-release-plugin] prepare for next development iteration

commit 2386777af8d7f828383e6ac6a547ad4bcbe94aa6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Nov 7 18:11:38 2013 +0100

    [maven-release-plugin] prepare release netty-4.0.12.Final

commit 7dddbbb2bdc1a2ab5648e7d4b4b24d6f328eac6a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Nov 7 10:24:15 2013 +0100

    Fix possible leak when a write is rejected

commit 77054d7ecbaec09f52afb03823ad24b555946a10
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Nov 7 07:12:19 2013 +0100

    Fix regression which lead to leak buffers when nothing could be read from the Channel.
    
    This was introduced as part of #1812, but fortunatualy was not part of any release.

commit d2032254b7b29aca620223c672ffa244171898b5
Author: Trustin Lee <t@motd.kr>
Date:   Tue Nov 5 17:40:23 2013 +0900

    Enable AUTO_CLOSE opton by default for backward compatibility / Deprecare AUTO_CLOSE option because it's gone in 5.0.
    
    - Related #1952

commit c7b66545b4a4b4a903f4393e08b9ba9498c19fc5
Author: Trustin Lee <t@motd.kr>
Date:   Tue Nov 5 17:23:22 2013 +0900

    Add AUTO_CLOSE option
    
    - Fixes #1952
    - If AUTO_CLOSE is turned on, Netty will close the channel immediately and automatically on write failure.  The default is false.

commit 77b4ec7e1bc0b8c6111728cc074226dd9cfe1b73
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Nov 4 15:18:21 2013 +0100

    [#1800] [#1802] Correctly expand capacity of ByteBuf while preserve content

commit 6cd9045b969212ffb04b9ee643e7bfdc0224a1d3
Author: Trustin Lee <t@motd.kr>
Date:   Mon Nov 4 19:49:19 2013 +0900

    Fix checkstyle

commit 54db9ec725d2b2f74436b15e6c7aef196f098a81
Author: Trustin Lee <t@motd.kr>
Date:   Mon Nov 4 19:42:33 2013 +0900

    Use StringUtil.simpleClassName(..) instead of Class.getSimpleName() where necessary
    
    - Class.getSimpleName() doesn't render anonymous classes very well
    - + some minor cleanup

commit 0d1567da0b7e884712265b38780704b026e8edc4
Author: Trustin Lee <t@motd.kr>
Date:   Mon Nov 4 18:56:19 2013 +0900

    Fix an API bug in the JavassistTypeParameterMatcherGenerator where some of its methods are not static
    
    - Related issue: #1402

commit 51ca4f3e91599d6879f14608c83f02a079ea9dac
Author: Trustin Lee <t@motd.kr>
Date:   Mon Nov 4 16:52:07 2013 +0900

    Fix a bug where SslHandler doesn't sometimes handle renegotiation correctly
    
    - Fixes #1964

commit e9967e55ad768165b8d360c646156483a427e06a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Nov 2 15:59:33 2013 +0100

    [#1940] Add javadoc to explain how the FileChannel is closed when using DefaultFileRegion

commit 4f5c52572b480b3d4c9fea904f3a83dbe163a3e5
Author: Trustin Lee <t@motd.kr>
Date:   Sat Nov 2 21:58:08 2013 +0900

    Allow a user to define his/her own length field decoder
    
    - Fixes #1960

commit e1baa3f9b49fe171cb404f0dfea15cc2ec99f3d5
Author: Trustin Lee <t@motd.kr>
Date:   Sat Nov 2 20:03:41 2013 +0900

    Simplify

commit 72c78ebe75cbe238787ffe900f1d8a0c41667a9d
Author: Trustin Lee <t@motd.kr>
Date:   Sat Nov 2 20:03:15 2013 +0900

    Add an important notice about future migration issue in SimpleChannelInboundHandler.
    
    - Related: #1590

commit 2712ed9cbb4bba69a8b30102ce036a0b06d41ec5
Author: Trustin Lee <t@motd.kr>
Date:   Sat Nov 2 20:00:14 2013 +0900

    Fix inspector warnings

commit 285f51d5ba005e3aedfb1590ca9adba943215252
Author: Trustin Lee <t@motd.kr>
Date:   Sat Nov 2 19:22:08 2013 +0900

    Instead of complicated capacity estimation, just use thread local buffers.
    
    Fixes #1951

commit 40c9de1b74c78b865259a68d9fa2b12df1775386
Author: Trustin Lee <t@motd.kr>
Date:   Sat Nov 2 19:16:23 2013 +0900

    Create StringBuilder with saner initial capacity when encoding a Cookie
    
    Fixes #1951

commit 31c1513229c853915c98198bd1ba17d4d6beb068
Author: Luke Wood <luke@lwood.me.uk>
Date:   Fri Nov 1 17:19:26 2013 +0000

    [#1958] Use CRC32-C in Snappy as per the spec

commit 16d32ed33ab7cf9806ade70f85a4ce12f65019c6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Oct 30 21:50:36 2013 +0100

    [#1959] Proposed fix to correctly handle timeouts that overflow the ticks in the wheel

commit b53fa5dd709ec00546efc4d606d978b0c64edbf2
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Oct 26 17:43:10 2013 +0200

    [#1812] All to have NioMessageUnsafe.read() inlined

commit af1ac4ca0c88b6cda02870ff70200d172605a00c
Author: Trustin Lee <t@motd.kr>
Date:   Fri Oct 25 21:04:10 2013 +0900

    Checkstyle

commit 1c2352e6a060152b6a226ea0705d836a7a666f20
Author: Trustin Lee <t@motd.kr>
Date:   Fri Oct 25 20:58:53 2013 +0900

    Replace constructor calls on UniqueName and its subtypes with valueOf() wherever possible

commit 8986245b47e738c004e9aa9bba56b8f973dd3dc4
Author: Trustin Lee <t@motd.kr>
Date:   Fri Oct 25 20:53:47 2013 +0900

    Deprecate UniqueName and its subtypes' constructors / Add valueOf() for easier future migration.

commit 8930cefab8640fa1bef3d1d49f93a23184b1bafe
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Oct 23 13:55:53 2013 +0200

    [#1812] Rework ByteToMessageDecoder.channelRead(..) method to allow for inlining

commit 544d68b396c4b7d42a4b07bac0ed101fa8d7d12e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Oct 23 11:10:12 2013 +0200

    [#1812] Allow for inline for most common cases when use NioByteUnsafe.read()

commit e4358ae6b8a8028de980f4fd41f0c93d3dbb40b2
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Oct 24 15:10:32 2013 +0200

    [#1947] Handle RejectExecutionException graceful for outbound operations

commit 926479e9046655b04ca5b9204a84b575ae4aa3f7
Author: Trustin Lee <t@motd.kr>
Date:   Thu Oct 24 17:39:50 2013 +0900

    Make all mutable fields in WebSocketClientHandshaker volatile
    
    - Fixes #1945

commit 4ce49a6195ea872569d316798d71bdde11810ab6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Oct 22 20:20:04 2013 +0200

    [#1943] Unpooled.copiedBuffer(ByteBuf pooled) should always return unpooled ByteBuf

commit ceab146b549eae760c35801dcd3e70e5231cc072
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Oct 21 07:43:42 2013 +0200

    [maven-release-plugin] prepare for next development iteration

commit 27a89d6032a90168137e491af7de39a1bbab28d1
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Oct 21 07:41:49 2013 +0200

    [maven-release-plugin] prepare release netty-4.0.11.Final

commit 79562d58911a827db9f9d1832b706fcbc7ade783
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Oct 20 09:32:21 2013 +0200

    [#1936] Fix example in javadoc

commit 35cd13d10efc30c54dc230fe5ffe61a9b0cb76a4
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Oct 19 20:53:57 2013 +0200

    [#1933] Correctly add the wsencoder before the httpencoder as the httpencoder also handle ByteBuf

commit 45524ea43ec16df1a20f3212306b8219a553e458
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Oct 18 18:22:20 2013 +0200

    More robust pipeline manipulation while upgrading to WebSocket
    - This commit allows a user to write its first web socket frame right after calling WebSocketServerHandshaker.handshake() rather than adding a listener to the future it returns.
    - Should fix #1933

commit bcdb3e88d872c5c6c48de5d9d1953e489640a88a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Oct 18 17:39:04 2013 +0200

    [#1934] Correctly log handshake errors and not print them to STDERR

commit 14e3c2c0d46d17838c0004f3aa762de290863690
Author: Trustin Lee <t@motd.kr>
Date:   Thu Oct 17 20:26:51 2013 +0900

    Make sure HttpVersion checks if the version string is not empty
    
    .. which was the behavior in 3.x.

commit 9fd8bf329d6c5b8e0305e5b75ee43f1ea3b9ef93
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Sep 13 21:05:08 2013 +0200

    More efficient handling of incomplete writes.
    
    The problem with the old way was that we always set the OP_WRITE when the buffer could not be written
    until the write-spin-count was reached. This means that in some cases the channel was still be writable
    but we just was not able to write out the data quick enough. For this cases we should better break out the
    write loop and schedule a write to be picked up later in the EventLoop, when other tasks was executed.
    The OP_WRITE will only be set if a write actual returned 0 which means there is no more room for writing data
    and this we need to wait for the os to notify us.

commit a6b4eddbba6643f9cc662089a59a9e13180a3c4b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Oct 16 11:51:16 2013 +0200

    Run tests with Pooled and Unpooled allocator

commit 68b616728a08b78f3af77f288f103c1cb0ba2c9c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Oct 16 10:34:33 2013 +0200

    [#1925] Only expose sub-region of ByteBuf on nioBuffer(...)

commit 53fcff2eab7836bcf2be262e1fd12712117c4797
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Oct 16 09:53:26 2013 +0200

    [#1920] Fix IndexOutOfBoundsException when using PooledByteBufAllocator with SCTP and NIO Datagram channels

commit df442b9b6ade46dedbc4b44ec1f085b6d4958c9b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Oct 15 15:21:42 2013 +0200

    #1924] Only log RejectExecutorException when call invokeLater(...)

commit 068c75a025be3e49284968d207429873387814f1
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Oct 15 14:01:59 2013 +0200

    [#1924] Correctly fail promise when EventExecutor was shutdown in between deregister

commit 812b0d11c2e9a1fe4cc412984f4da359467a2f77
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Oct 12 20:04:33 2013 +0200

    No need to slice before copy. Part of #1848

commit 951dcc6c102c5766c7562295691a7e0e3fb87a49
Author: Michael Grove <mike@clarkparsia.com>
Date:   Tue Sep 17 06:45:49 2013 -0400

    copy all sliced buffers, fixes #1848

commit b5f51753384859d86e1ae8fe436429a45b181f88
Author: Bill Gallagher <bgallagher@twitter.com>
Date:   Fri Oct 11 11:59:30 2013 -0400

    minor gc optimization: better DefaultSpdyHeaders.iterator()

commit ff6a06a9be820595c9b512b73a09842012cbfdf1
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Oct 11 21:28:02 2013 +0200

    Add HttpHeaders.contains(name, value, ...) to save creation of LinkedList for simple checks

commit 1542b36e803eff4426e0d3d50fef9b064164fc0f
Author: Bill Gallagher <bgallagher@twitter.com>
Date:   Fri Oct 11 11:12:08 2013 -0400

    minor gc optimization: better DefaultHttpHeaders.iterator()

commit c9b7f1f1b570eab9eb6b61df0e94cd4dbcc5e2ec
Author: Trustin Lee <t@motd.kr>
Date:   Fri Oct 11 12:07:46 2013 +0900

    Ensure the selector implementation can be instrumented before attempting instrumentation
    
    - Fixes #1908

commit d946659520bd95a757a843bec63a93ba80272751
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Oct 9 21:18:08 2013 +0200

    [#1906] Use a ByteBuf allocator from the ByteBufAllocator when encode Strings

commit beda02fad051e95f030f7b548bf10bb9b13595ac
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Oct 8 06:39:21 2013 +0200

    [#1898] No call fireExceptionCaught but just fail the write promise

commit 1c73be21fca57474c8fb1db61e32c311ebd4beff
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Oct 8 07:21:01 2013 +0200

    Remove redundant index check

commit c5f6760c6804b5f0dfbec1ddd2953b3c58db58ce
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Oct 8 06:36:59 2013 +0200

    [#1895] Fix IllegalStateException which was produced during failing ChunkedWrite after the channel was closed

commit d7f9b1ee76320dd9fc1e9992b4b75773718614bb
Author: Trustin Lee <t@motd.kr>
Date:   Tue Oct 8 12:24:16 2013 +0900

    Fixes the problem where the promise of the outbound operation that causes a channel closure is notified after channelInactive()
    
    - Fixes #1897

commit e307979a0d7318c2d3d0e6723f4beb458a4dd7a0
Author: Trustin Lee <t@motd.kr>
Date:   Mon Oct 7 17:09:00 2013 +0900

    Fix the problem where HashedWheelTimer puts a timeout into an incorrect place
    
    - the stopIndex of a timeout is calculated based on the start time of the worker thread and the current tick count for greater accuracy

commit 20a16ae8dcb87706e375c4d8a667f50243d27916
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Oct 7 08:07:38 2013 +0200

    Use direct ByteBuf for the test to make sure it is not copied

commit 00f99dbff6d3cc959bff65d072f2d48f18b883e3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Oct 7 07:31:21 2013 +0200

    [#1893] Fix bug in JdkZlibDecoder which did not let it handle large data

commit c0936fc8e70ec17f9248b139947cd2e85c793b6f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Oct 6 15:29:35 2013 +0200

    [#1890] Correctly expand ByteBuffer array in all cases
    
    The problem was that we did not handle the case correctly when doubling the array was not enough. We need to keep doubling until everything fits in.

commit 5317995a13d391e84b0ccafbf9d80a19576cf067
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Oct 4 09:54:21 2013 +0200

    [#1881] Use correct field name in NullPointerException

commit 8f612660b2fa94ea5854abdb29bdd3bb3c824759
Author: Bill Gallagher <bgallagher@twitter.com>
Date:   Wed Oct 2 13:10:26 2013 -0400

    disable debugging output during test

commit d7da19f745452f77a23d23af786eae3d23845d6e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Oct 2 15:48:52 2013 +0200

    [maven-release-plugin] prepare for next development iteration

commit d35768ae117e7f9f20fca5b5297c96019b9a574a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Oct 2 15:48:45 2013 +0200

    [maven-release-plugin] prepare release netty-4.0.10.Final

commit 3739ee90cf8be965d3cb0cef4f749f1960be39d0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Oct 2 06:44:55 2013 +0200

    [#1885] Correctly close leak detected also on non started HashedWheelTimer

commit ee192f0321c8f18cf19077cc82a3a0a3bc211727
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Oct 1 09:57:20 2013 +0200

    [#1880] Use ByteBufAllocator when read bytes into new chunks

commit 7e6649fd66102212c8c8223cbe55b00f5513aac7
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Oct 1 07:32:07 2013 +0200

    [#1879] Correctly validate close frame

commit f70ceeab58772ec99d12f65ddcd137d54b42dd9e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Oct 1 07:18:16 2013 +0200

    [#1878] Fix leak of ByteBuf when masked payload is used

commit be126395e3ee5c51b3e4d24900d398bfe05dc89e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Sep 30 20:43:30 2013 +0200

    [#1874] WebSocket08FrameDecoder may leak memory if channel is closed before the full frame was received

commit 013ac44d3a64d53ab9e131cb43124fcbc0873caf
Author: Bill Gallagher <bgallagher@twitter.com>
Date:   Mon Sep 30 11:33:12 2013 -0400

    [#1832] - Channel writability change notifications sometimes fail to fire

commit 6d09e57be72cd76b42741c3cba59e9d25f6738a7
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Sep 30 14:47:49 2013 +0200

    [#1875] Correctly check the readerIndex when try to read a byte from AbstractByteBuf

commit b4fa8af0791b3a31a91ea8112175adf6493b834b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Sep 26 10:44:42 2013 +0200

    Cache underlying ByteBuffers and count in ChannelOutboundBuffer.Entry to reduce object creation and so GC pressure
    
    Beside this it also helps to reduce CPU usage as nioBufferCount() is quite expensive when used on CompositeByteBuf which are
    nested and contains a lot of components

commit 2b9a07cac90f7a5a5e6e5fb7859ae19e6c11323c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Sep 26 07:04:53 2013 +0200

    CompositeByteBuf.isDirect() should return true if its only backed by direct buffers

commit a74149e9848fef73d909dd56843e0fbab23f877d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Sep 20 16:24:46 2013 +0200

    [#1865] Only use internalNioBuffer when one of the read* or write* methods are used. This is neccessary to prevent races as those can happen when a slice or duplicate is shared between different Channels
    that are not assigned to the same EventLoop. In general get* operations should always be safe to be used from different Threads.
    
    This aslo include unit tests that show the issue

commit cf4d25823c5ec8328e4b7e156330eabe20071084
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Sep 24 14:05:25 2013 +0200

    Propagate channelWritabilityChanged() through the pipeline after flushing. Related to [#1861]

commit ef936a6d41a88b2cc426383848f42a37b230b1da
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Sep 24 13:57:51 2013 +0200

    Correctly handle automatically suspend/resume in ChunkedWriteHandler. Related to [#1861]
    
    The old implementation was broken and could lead to pending message never be picked up again until the user either explicit called flush or
    resumeTransfer().

commit ae904a1f56d80cb3f4ad160006c05319e73d173a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Sep 24 11:42:58 2013 +0200

    Introduce a new ChannelOption called DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION. Related to [#1830]
    
    This ChannelOption allows to tell the DatagramChannel implementation to be active as soon as they are registrated to their EventLoop. This can be used to make it possible to write to a not bound DatagramChannel.
    The ChannelOption is marked as @deprecated as I'm looking for a better solution in master which breaks default behaviour with 4.0 branch.

commit 29d34c672c1cd64c153add03a5340574fdcb7cfe
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Sep 24 07:49:26 2013 +0200

    [#1855] Try to calculate the correct amount of written bytes to update the ChannelProgressiveFuture

commit ce58e76e13d68e15ac678a80527f19dde4aa41f4
Author: Arron Norwell <anorwell@mdialog.com>
Date:   Thu Sep 19 11:44:08 2013 -0400

    HttpRequestEncoder should append '/' to absolute path requests only when needed

commit 910ed31a1b838e4f10f0379338343d2d81053884
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Sep 21 20:40:08 2013 +0200

    [#1851] EmptyByteBuf.isWritable(..) and isReadable(...) should not throw IndexOutOfBoundsException

commit a2624a833e92a99d5ef50e30eea9743a873c0392
Author: Sasha Zverev <planerist@gmail.com>
Date:   Fri Sep 20 16:35:28 2013 +0400

    Slip in DefaultOioSocketChannelConfig (setAllowHalfClosure used to ignore argument)

commit 23baef8fb48fa363ffd0ed9f5d803a36a05e715f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Sep 19 07:29:21 2013 +0200

    [#1853] Optimize gathering writes for CompositeByteBuf that are only backed by one ByteBuffer

commit c0bbde48b78163a394ae3fd63f98b6b6c56acb25
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Sep 18 20:47:57 2013 +0200

    [#1852] Fix bug in UnpooledDirectByteBuf.nioBuffer(...) implementation

commit f034f90fb34689af29cbc3158b3a16411183a306
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Sep 17 06:58:23 2013 +0200

    [#1836] Add comment to explain why read is triggered

commit f1d4f813ed6404b83d539a5f68166bea89fc95df
Author: Greg Soltis <greg@firebase.com>
Date:   Sun Sep 15 14:39:57 2013 -0700

    Fix nioBuffer implementation for CompositeByteBuf

commit 3957ee32bb6a6dbf8858a05f50a1acdaeccd6d95
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Sep 14 11:53:30 2013 +0200

    [#1833] Add testcase for fix

commit 2243970294565ebe2c045345f9a06be0973ab94a
Author: Phillip Schichtel <quickwango@users.noreply.github.com>
Date:   Thu Sep 12 14:09:41 2013 +0200

    [#1833] Replace ; with & only in the QueryString and not the whole URI

commit cd275ba67e2d206519bde4b9074371feefa7978d
Author: Trustin Lee <t@motd.kr>
Date:   Fri Sep 13 14:09:32 2013 -0700

    No need to use an unreleasable buffer - just wrap an array

commit 357677d8fac857aae4e4b4b92d79dd37be81bb26
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Sep 12 09:27:43 2013 +0200

    [#1830] Add testcase for write to not bound DatagramChannel impls and revert change in OIO as it breaks things as the udnerlying socket lazy binds

commit f4f04a08c26092050ff8d0687ebc7f28bee718f4
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Sep 11 20:37:21 2013 +0200

    Make DatagramChannel impls .isActive() return true when the underlying Channel is open. This also fixes [#1830]

commit 7d9388a3cc90b322eb1e9ea048a16e31beaad387
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Sep 11 20:14:53 2013 +0200

    Allow to only register a Channel via AbstractBootstrap and bind/connect it later. Related to [#1829]

commit a857994d82cadfce21ab34434c3523a8e8653141
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Sep 11 07:29:02 2013 +0200

    Add test to show that writing a CompositeByteBuf when SslHandler is in use works. Related to [#1825]

commit f76497fe25b377ab92c7351623cf7ae412933458
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Sep 10 18:38:15 2013 +0200

    Set memory for compiler as otherwise it sometimes fails here

commit 451e91d1429c08ce8f92bb8ce0b9ad8c28afb904
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Sep 9 20:29:30 2013 +0200

    [#1821] Fix IndexOutOfBoundsException which was thrown if the last component was removed but other components was left

commit 36c8ac5e5c2a37af9d0a3df3d66194c3c5087742
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Sep 9 11:55:25 2013 +0200

    [#1819] Remove HTTP compressor and decompressor from the pipeline after websockets handshake completes

commit 0065006824005f711136467b211b06abf17e8562
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Sep 9 11:32:37 2013 +0200

    [#1818] Pass through message as they are when no compression is needed

commit ffab456aca37555b20550b4880e3ad67665a2640
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Sep 9 11:20:12 2013 +0200

    Bump up version to reflect correct one

commit af499b5fb4862041962cba2e00670ad415130897
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Sep 8 20:11:51 2013 +0200

    Mark ChannelHandler.exceptionCaught(...) as deprecated in preparation to move to ChannelInboundHandler. Related to [#1808]

commit 363531caf9d458303e7208817a289920ff0e730e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Sep 6 09:18:34 2013 +0200

    [maven-release-plugin] rollback the release of netty-4.0.9.Final

commit 9d53573ee8b70300e5cbcec29255dff0ad64b3b8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Sep 6 09:17:15 2013 +0200

    [maven-release-plugin] prepare for next development iteration

commit ad0c456209d31522a7729acba2264b432326c5b2
Author: Trustin Lee <t@motd.kr>
Date:   Thu Sep 5 18:36:48 2013 +0900

    Ensure operationProgressed is invoked even on completion
    
    - Fixes #1809

commit 845a7c5753e42e0d38a1485c68d941cc9d54d93e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Sep 5 10:15:51 2013 +0200

    Move encode of chunked content to an extra method, this allows for inline. Related to #1812
    
    encode of chunked content is not the most common pattern so moving it to an extra method makes it possible to inline the rest as it is a smaller method now.

commit 92cec8d2acdc08b75646e5e2c988183ca0841c17
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Sep 5 09:22:13 2013 +0200

    Split up the nioBuffers() method to allow for inline. Related to #1812
    
    This move less common method patterns to extra methods and so make the nioBuffers() method with most common pattern (backed by one ByteBuffer) small enough for inlining.

commit c97971b53adaa07c1f1e43774fd76f2e2ebd8862
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Sep 3 20:30:56 2013 +0200

    [#1805] Fix example in javadocs of SimpleChannelInboundHandler

commit 25c226a8357d324fb201b1150a3d629f3917d18d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Aug 16 21:53:47 2013 +0200

    Make sure only direct ByteBuffer are passed to the underlying jdk Channel.
    
    This is needed because of otherwise the JDK itself will do an extra ByteBuffer copy with it's own pool implementation. Even worth it will be done
    multiple times if the ByteBuffer is always only partial written. With this change the copy is done inside of netty using it's own allocator and
    only be done one time in all cases.

commit 5416f2315e222acf8d9a36a51bcd4142a0f1c022
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Aug 30 09:51:12 2013 +0200

    [#1797] No use internalNioBuffer() in derived buffers as it is not meant for concurrent access

commit 0007fb81efa7e08c4b3f8c3a99a15cf4b0d5c1bc
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Aug 30 07:58:45 2013 +0200

    Add tests to try to track down some buffer issues

commit 4a5c8402719586497a240e74a7893b3ccad90c11
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Sep 1 12:54:29 2013 +0200

    @Deprecated ChannelOutboundHandler.deregister(...)

commit 795182843dbf500643f3f8304f31ddb4ce5d693c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Sep 1 11:00:20 2013 +0200

    Remove legancy code which we not need anymore as we use gathering writes anyway everywhere

commit b8866aef330403353285486bbf5c0342b6c6a998
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Aug 30 06:31:58 2013 +0200

    No need to check instanceof everytime to find the next inbound / outbound context

commit aedd631dbbae6c1732fe0d800a9024a18e99dce7
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Aug 29 13:51:50 2013 +0200

    [#1798] Correctly handle skipping of too big frames

commit 5ddd7cee90d5b59ebacdc3da6a25f548646eddad
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Aug 29 11:14:36 2013 +0200

    [#1797] Throw IllegalArgumentException if AbstractByteBuf.skipBytes(...) is used with a negative value

commit 51a536fd3068ecff95dd27adf047299122ade8ea
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Aug 28 11:00:08 2013 +0200

    Free up all buffers after the tests

commit 7a38163743624c2f7c3fd263fd61fe70cb711aa0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Aug 28 09:51:04 2013 +0200

    [#1788] Correctly decode CRC32 and ISIZE when using JdkZlibDecoder
    
    Because of incorrect decoding a CompressionException was thrown before

commit 3aa77f54f7f77688082f78d3d0ecfcc11affcb30
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Aug 28 07:21:52 2013 +0200

    [#1792] PlatformDependent.freeDirectBuffer(..) now respect hasUnsafe()

commit 12fe7b52b633b787b1f38336e89965ed396e4a05
Author: Derek Troy-West <derek@troywest.com>
Date:   Tue Aug 27 18:36:59 2013 +1000

    HTTP Chunk, wrong delimiter written

commit 6a4131c10feaf0ce445f9d7092b30144d473cead
Author: Derek Troy-West <derek@troywest.com>
Date:   Tue Aug 27 16:23:06 2013 +1000

    Currently the system variable to chose which type of zlib decoder is being negated

commit 32deb2c22b56b4d775d185c8605084b33386bcf7
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Aug 27 06:54:50 2013 +0200

    [#1785] Fix incorrect javadocs

commit 2e39b25cd4252ca13e5f4dd508d598d27bc806a2
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Aug 26 12:01:03 2013 +0200

    [maven-release-plugin] prepare for next development iteration

commit b67659a866c40fd04ac38e5838ee1d562a6db5d5
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Aug 26 12:00:54 2013 +0200

    [maven-release-plugin] prepare release netty-4.0.8.Final

commit 5e9b199296478b9228c944235a50b02da9212a5e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Aug 26 06:58:50 2013 +0200

    @deprecated all methods which are related to deregister as it will be removed in 4.1.0.Final

commit 65d24a7647470879b891e78550166e60881a7225
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Aug 26 08:15:30 2013 +0200

    [#1735] Disable usage of JdkZlibDecoder by default, will be enabled in 4.1.0.Final

commit 80d30c3dd81a4409a3abaf04d7bff0525d4ad166
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Aug 26 07:52:47 2013 +0200

    Small code improvements

commit 77d4222db5794bb0ffe99065cc556c09e5aec68d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Aug 25 21:22:53 2013 +0200

    [#1777] Use correct Thread when close per channel

commit f76c01c3aac42a90708d3bbc665e5524b6a62778
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Aug 24 18:16:05 2013 +0200

    [#1782] Fix IndexOutOfBoundException with direct buffer and gathering writes

commit 005d33a761fc26591c26f2914cc8741596c6a71b
Author: Mike Schore <mschore@twitter.com>
Date:   Fri Aug 23 13:28:15 2013 -0700

    SPDY: allow MAX_CONCURRENT_STREAMS to be set to 0

commit 7aefd0cbdbc01aa344c5b2f3261734c4a2afe313
Author: Trustin Lee <t@motd.kr>
Date:   Sat Aug 24 17:20:53 2013 +0900

    Make AbstractBootstrap public
    
    .. to work around the issue with JDK reflection described here:
    
      http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4283544
    
    Fixes #1780

commit 8142aae765b74ba7934b363b562a5ffe4a01a12c
Author: Trustin Lee <t@motd.kr>
Date:   Sat Aug 24 12:25:50 2013 +0900

    Improve the randomness of ThreadLocalRandom for all platform
    
    - Fixes #1765
    Java 6 did a poor job of generating seedUniquifier unlike 7, so I implemented platform-independent seedUniquifier generator with configurability

commit 9ca20b73d3ee9e1aa1c83336854bb5ac6aca5f99
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Aug 23 17:17:28 2013 +0200

    Add testcase to show channelRegistered is called

commit 51fa7958197c3c712c9679042c82155e56d8ed6a
Author: bgallagher <bgallagher@twitter.com>
Date:   Fri Aug 23 09:38:30 2013 -0400

    fix race condition in test

commit 206dc2a3918d3754b8d9b4b73f107a085377a2d0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Aug 23 09:01:16 2013 +0200

    [#1772] Make sure ChannelOutboundBuffer.recycle() does also reset unflushed, flushed and tail.
    
    This fix a IndexOutOfBoundsException which as triggered if recycle() did cut down the buffer[] to the initial size.

commit 9fd35d09a26e1dd060baa9d307cd69f05d6f7ae6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Aug 22 12:38:56 2013 +0200

    [#1770] Fix NPE which was thrown if connection timeout was disabled and the connect did not finish directly when using NIO

commit 6a2f340ec0187ba68eee869863357b74b6e8c6bf
Author: bgallagher <bgallagher@twitter.com>
Date:   Wed Aug 21 13:28:37 2013 -0400

    trim buffers before recycling

commit fb619f23947aab158a11730e00f4dbd490093669
Author: bgallagher <bgallagher@twitter.com>
Date:   Wed Aug 21 10:12:58 2013 -0400

    fix writability callback

commit 217b8e255c05887a30803a6c96abac1d320c3d8b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Aug 20 21:15:05 2013 +0200

    [#1763] Fill ChannelOutboundBuffer.nioBuffers with null on close to allow the content to be GC'ed

commit 15cfa47ad9994367edea4ba0b246a549654dac3d
Author: Trustin Lee <t@motd.kr>
Date:   Tue Aug 20 14:40:28 2013 +0900

    Fix checkstyle

commit caf91b9c0687bedab40ba06f596b0c2c2f1ae7e3
Author: Trustin Lee <t@motd.kr>
Date:   Tue Aug 20 14:37:57 2013 +0900

    Fix IllegalStateException triggered while shutting down ThreadPerChannelEventLoopGroup
    
    - Fix #1718
    - Add the test case contributed by @mkw

commit 20894bc99e28191cc3926ae95a23f5c7d3969a33
Author: Trustin Lee <t@motd.kr>
Date:   Tue Aug 20 14:28:50 2013 +0900

    Fix a bug in internalNioBuffer() implementations of derived buffers
    
    - A user can create multiple duplicates of a buffer and access their internal NIO buffers. (e.g. write multiple duplicates to multiple channels assigned to different event loop.)  Because the derived buffers' internalNioBuffer() simply delegates the call to the original buffer, all derived buffers and the original buffer's internalNioBuffer() will return the same buffer, which will lead to a race condition.
    - Fixes #1739

commit a383988cdb57e56e5211fdf592545fe67331ff6e
Author: bgallagher <bgallagher@twitter.com>
Date:   Tue Aug 13 15:39:28 2013 -0400

    add struct to replace parallel arrays consolidate flushed & unflushed buffers

commit 06e250e493ddbff674d1ec11deb12541f93d6519
Author: bgallagher <bgallagher@twitter.com>
Date:   Tue Aug 13 14:58:01 2013 -0400

    remove unused initialCapacity

commit 9e7529b2f501323fd8031b82533f7a2b39796f99
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Aug 16 08:11:19 2013 +0200

    [#1743] Fix IllegalStateException by remove usage of PendingWrite in ChunkedWriteHandler. This needs more thoughts before re-introduce it

commit d1f592575ac31ddcefaafcb968c1df457ec4b617
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Tue Jul 23 23:31:42 2013 -0700

    SPDY: ensure channel close happens after outbound message is written

commit 39cabcd36ca5ea3d3586ec8708d47d49c5c8ca96
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Aug 12 20:33:09 2013 +0200

    [#1481] Add a JdkZlibDecoder which has no dependencies

commit 9acf130adb7deffb49e24a52b4e7c8130ba445ae
Author: radimch <rchlad@seznam.cz>
Date:   Fri Aug 9 12:18:16 2013 +0200

    resource leak: FileInputStream was never closed

commit 65fd9c0b120a6705e79647274fa3226356d2c254
Author: bk1te <b.k1te@yandex.ru>
Date:   Tue Aug 13 23:02:21 2013 +0400

    use Promise instead of CallbackNotifier

commit 48eb73f9b176158597a6692612674a165c8eaa54
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Aug 13 08:21:26 2013 +0200

    [#1733] Correctly pass the promise to the ctx.write(...) in AbstractTrafficShapingHandler

commit f8f19d1539487078afe78c8fbd2ec1f50787b15d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Aug 13 08:09:59 2013 +0200

    [#1732] Fix bug which lead ChannelTrafficShapingHandler stop to work after first Channel was disconnected

commit cc12e40065a0a27d81266cda863a4d24b4487a59
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Aug 12 07:23:00 2013 +0200

    [#1730] Correctly release resources in MixedFileUpload after switching from Memory to Disk

commit b9e279064d56da888893f0c54f62bc2b8ec4698d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Aug 11 21:52:14 2013 +0200

    Minimize buffer allocation as it is expensive if no pooled buffers are used

commit 7d31943326175581680192357a21d34e75a87b0c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Aug 11 21:37:43 2013 +0200

    Remove some dead code

commit 73755d12330bb0a976c9a32c3fcdc6f39b15249d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Aug 11 21:24:02 2013 +0200

    [#1729] Let StringEncoder extend MessageToMessageEncoder and so safe a memory copy

commit 9a88c50ffb1233a95d89b83d01d6c9673c8641e7
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Aug 11 21:04:55 2013 +0200

    [#1728] Recycle list after done with it in ReplayingDecoder/ByteToMessageDecoder channelInactive(..)

commit 9f88552f12c64ba3d8aafd36b56530860e6b076b
Author: bgallagher <bgallagher@twitter.com>
Date:   Fri Aug 9 17:12:14 2013 -0400

    remove some dead code

commit 280afda0130125708cf11267dabe7aafc7313885
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Aug 10 20:33:19 2013 +0200

    [#1715] Remove extra call socket.configureBlocking(false)

commit 8af5ea8d4f661c2e7aa51363edf8299166aafe0f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Aug 10 20:25:35 2013 +0200

    [#1658] Allow to use AbstractTrafficShapingHandler also with ByteBufHolder based messages

commit 59c2fd881318b5c421983881e68889225e0a4d18
Author: bgallagher <bgallagher@twitter.com>
Date:   Fri Aug 9 16:24:14 2013 -0400

    [#1723] invoke close in eventloop

commit c1d787bff75d203610758b1d38e566c8b3d54747
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Aug 9 21:32:17 2013 +0200

    [#1722] ChunkedWriteHandler.doFlush(...) should not call fireExceptionCaught(..)

commit 72395bf40073a6772ee06c58b0b08987af198eb5
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Aug 9 18:44:58 2013 +0200

    [#1719] Make sure PendingWrite is only recycled once in ChunkedWriteHandler

commit 0d6a6bde048f22687fed462041dd141545523ebc
Author: radimch <rchlad@seznam.cz>
Date:   Fri Aug 9 12:12:46 2013 +0200

    resource leak: Formatter was never closed

commit 9d8c4ded50702fdacb75a89e65471627095723ac
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Aug 9 13:30:04 2013 +0200

    Move method in correct scope

commit 4d0621855a40368052ecb9238c206d03d3067d25
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Aug 9 11:44:41 2013 +0200

    Remove unused package private method and so remove some complexity

commit 26ddf0849fd69addd51b853ee0da7de08dc2a96b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Aug 9 08:40:43 2013 +0200

    [#1714] Make sure ByteArrayDecoder also works correctly with pooled buffers

commit 1547876e97e9babc17f683e8a47894757a4e1bee
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Aug 9 08:24:24 2013 +0200

    Tiny optimizations

commit e954eb1c20e198f5f9279fc79aff328a8b2c87d8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Aug 8 20:43:26 2013 +0200

    Disallow usage of maven 3.1.x (and higher) because of non compability with plugins

commit b54937ab5051004faa6c04048d6bb0410e6dcb33
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Aug 8 20:37:35 2013 +0200

    [#1711] Allow to use ChannelOption for set / get MessageSizeEstimator

commit f40a3f34b17633b884f3d35dc2eb43d0810a0cfa
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Aug 8 20:30:01 2013 +0200

    [#1692] Allow to set WRITE_BUFFER_HIGH_WATER_MARK and WRITE_BUFFER_LOW_WATER_MARK via ChannelOption

commit 1d3560e3890b333a5bafc90aa064cc33f5301f6c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Aug 8 13:53:28 2013 +0200

    [maven-release-plugin] prepare for next development iteration

commit 8e97e6c4610182b14ae20d66e1a0bd50cf43ebba
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Aug 8 13:53:19 2013 +0200

    [maven-release-plugin] prepare release netty-4.0.7.Final

commit fc6213604dc3a1a596b5a6fb25fd9cf0759e0fc7
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Aug 8 13:42:25 2013 +0200

    Make sure ChannelOutboundBuffer not throw NPE during increment/decrement pending writes

commit b456adf404d9971b077184e56302f5e488305cbf
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Aug 8 11:57:05 2013 +0200

    [#1709] Correctly detect that Unsafe.copyMemory is missing

commit 194b64cff1a56babcfd5dd23f3e04ad5b1439c06
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Aug 8 06:54:32 2013 +0200

    [#1708] Correctly set the writerIndex in ReadOnlyByteBufferBuf if it is constructed with a buffer which has non zero position

commit b934b6009c9e7d2ed6df400698d6e6e4b550291d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Aug 7 20:28:33 2013 +0200

    Share some code, related to [#1707]]

commit 5ef30b6d8b55441fddc8ddfdd24251f378e24e60
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Aug 7 20:15:10 2013 +0200

    [#1707] More efficient implementation of ChannelHandlerContext.writeAndFlush(..)

commit 5b6e762bf42a274082e0632c3d1a240c68f38b08
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Aug 7 10:32:03 2013 +0200

    Allow to have the Channel GC'ed ASAP

commit 48a7a21541b96eba74b493d8a2ce4a678a6bc9db
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Aug 5 14:58:16 2013 +0200

    Correctly update Channel.isWritable() when the write happens from outside the EventLoop in a fast fashion. Fixes [#1697]
    
    Introduce a new interface called MessageSizeEstimator. This can be specific per Channel (via ChannelConfig). The MessageSizeEstimator will be used to estimate for a message that should be written. The default implementation handles ByteBuf, ByteBufHolder and FileRegion. A user is free to plug-in his/her own implementation for different behaviour.

commit 60b889375c47cfe9973f7ee39b44aeb933b056c9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Aug 5 08:22:04 2013 +0200

    Allow to also write FileRegion and ChunkInput when using HTTP chunked. Fixes [#1693]

commit ea1dca8105a4542bfe3f2c669c8bc14c4e3518a5
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Aug 6 12:22:22 2013 +0200

    [#1704] Make sure SwappedByteBuf.readSlice(..) returns ByteBuf with correct ByteOrder

commit 3b94154893bba3989673d4eae11228479aa2a3c3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Aug 6 07:12:45 2013 +0200

    [#1690] Correctly return first header value on DefaultHttpHeaders.get(..)

commit 20a010a2ea5f86f4063311a47e1387ba903cd8fc
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Aug 5 21:41:07 2013 +0200

    Small optimization in DefaultHttpHeaders.clear()

commit de44917e62c6ccadb2ae4cf62009f3fa0ad71827
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Aug 4 14:14:37 2013 +0200

    Use recyclable write task to reduce GC pressure

commit 87b17e195acec2a02a9e51ba271d6b7c0079bdf5
Author: Trustin Lee <t@motd.kr>
Date:   Mon Aug 5 17:40:45 2013 +0900

    Grammar

commit 0f80aad92957b5aba6693e2953926f5153078748
Author: Trustin Lee <t@motd.kr>
Date:   Mon Aug 5 17:02:17 2013 +0900

    Remove all/target/src and all/target/classes after building the all-in-one JAR and Xref
    
    .. so that IDEA does not add all/target/src  and all/target/classes to the source and class path.

commit 17b91f416d3a2017ca7ab985977302e70edb4dd6
Author: Trustin Lee <t@motd.kr>
Date:   Mon Aug 5 16:50:25 2013 +0900

    Remove an irrelevant comment
    
    .. because firedChannelActive is gone long ago

commit 4d064d85df79a432f01dd5e97da37a5c9d8830de
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Aug 2 07:24:49 2013 +0200

    Rename class

commit ebee56ef494bea72576f4efb6db2ea6a78a7ad8a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Aug 2 07:23:46 2013 +0200

    More tests related to self removal from pipeline in ByteToMessageDecoder and ReplayingDecoder

commit 487c28d93e404f13181588e9cdf42fd521a2e8cb
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Aug 1 20:37:26 2013 +0200

    Add testcases to prove that remove ReplayingDecoder/ByteToMessageDecoder from within the decode(...) method works

commit 3f2000fa3a6d2937114823d2c98e6930093c70cb
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Aug 1 10:59:55 2013 +0200

    [maven-release-plugin] prepare for next development iteration

commit 3f70d5caa4bf0201ff1861e8dcb111a537a4a64c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Aug 1 10:59:46 2013 +0200

    [maven-release-plugin] prepare release netty-4.0.6.Final

commit a06295fe0ad72358f980d09feb8c971613793527
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Aug 1 09:54:07 2013 +0200

    Correctly fix problem in ByteToMessageDecoder and ReplayingDecoder which could let to have a released buffer passed to the decode methods.
    
    This fixes #1664 and revert also the original commit which was meant to fix it 3b1881b523e61496d9bc50e44927f7b58fa449e6 . The problem with the original commit was that it could delay handlerRemove(..) calls and so mess up the order or forward bytes to late.

commit e3410680def77f7a9a47eebc23669d6a323c6f46
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 31 20:08:14 2013 +0200

    [maven-release-plugin] prepare for next development iteration

commit 0e124583d65940ba30e70d05e7e919d6e60a197d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 31 20:08:05 2013 +0200

    [maven-release-plugin] prepare release netty-4.0.5.Final

commit 81de2275e482c8954c85e67be0d2799b53ba6e6e
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jul 31 20:45:37 2013 +0900

    Remove unnecessary traversal of pipeline which occurs when a Channel is closed
    
    - Remove unnecessary ascending traversal of pipeline in DefaultChannelHandlerContext.freeInbound()
    - Move DefaultChannelHandlerContext.teardownAll() to DefaultChannelPipeline

commit 3b1881b523e61496d9bc50e44927f7b58fa449e6
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jul 31 20:35:51 2013 +0900

    Make sure ChannelHandler.handlerRemoved() is invoked while handler methods are not running
    
    - Fixes #1664

commit 3049f5ddc483de1afdaa52443fe946133e121808
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 31 12:21:50 2013 +0200

    Fix checkstyle

commit c79a3cdefe4ced7f7effc94a6862a0d1d5af0dae
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jul 31 19:07:38 2013 +0900

    Fix a bug in NioSocketChannel.doWrite() where flush() triggered from a ChannelFutureListener is ignored
    
    - Fixes #1679

commit ca29f1a37d49e86d2b7667ff41cf4dd58e7e1381
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 31 10:50:03 2013 +0200

    [#1683] Mark unused ChannelOption @deprecated, to prepare for removal in 4.1.0.Final

commit e81368af0632b28a7ba54be49142e2b5bf78d14b
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jul 31 16:32:16 2013 +0900

    Simplify handler invocations in DefaultChannelHandlerContext
    
    - Sometimes we delegated executor.inEventLoop() to the next context and sometimes we did not.  Now we always check inEventLoop() before delegating.

commit acb28e3ac8d04feffa15cdceaeda1284b3338b7e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 30 15:46:53 2013 +0200

    Multiple optimizations in the HttpObjectDecoder
    
    * Minimize allocation of StringBuilder and also minimize char array copy
    * Try to detect HttpVersion without calling toUpperCase() for performance reasons

commit e09aea5902457d6919f004c52f90659af8c508f9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 29 21:17:03 2013 +0200

    Rename methods of EmbeddedChannel and mark old ones as @deprecated

commit d4b8f16d1f6e1cc42b43ab45138d50d93f466ff4
Author: Josh Wilson <josh@clover.com>
Date:   Mon Jul 29 18:38:53 2013 -0700

    Added http status codes from RFC 6585

commit 56646920c0a3a720660967e0ae0cea43a9e0a9ad
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 29 20:59:45 2013 +0200

    Formatting

commit 9da81acec12e08e66708f8a09a8894b9594c9f02
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 29 20:57:33 2013 +0200

    [#1657] Log content of ByteBufHolder

commit 4222610b2aae92414eed176fe39989cbb5c4515f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 29 08:33:20 2013 +0200

    Remove synchronized in SPDY code

commit 00f1533fa9d9ee344836e9632f4be59bd291858e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 29 16:23:43 2013 +0200

    [#1671] Fix bug in ChunkedWriteHandler which produce a NPE on empty chunks

commit 0cb3541b53f5e5673ab3fe16702fb98c522a0ce2
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 29 08:09:52 2013 +0200

    [#1669] Correctly notify the ChannelPromise of delayed writes

commit 5e703e7419855cdc0e4cc702d16fa54a20c07193
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 29 07:31:09 2013 +0200

    [#1658] Let trafficshaping work with ByteBuf and ByteBufHolder out of the box

commit 6ce8571df3eeae593fd71e53354c04edc023b66c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 29 07:08:49 2013 +0200

    [#1668] Remove synchronized usage in JZlibEncoder and JdkZlibEncoder

commit 3922c518cdbeb0d8091ce06698e569bc37b54acf
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Sun Jul 28 13:05:34 2013 -0700

    Clean up AbstractUnsafe#bind and AbstractUnsafe#disconnect.

commit bf2430d255956ff32307aea3a5e725ee2be16dc2
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Sat Jul 27 11:08:45 2013 -0700

    Change AbstractChannel#doRegister return type from Runnable to void.

commit ca59c1201e2ee2abe0c1548b371dcd056cbe2b56
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Fri Jul 26 09:13:56 2013 -0700

    Change AbstractChannel#doDeregister return type from Runnable to void.

commit 61b1214b2401a31d8c23f126a8b610edd29ba8e1
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Thu Jul 25 15:19:42 2013 +0200

    Fix for first issue from #1652 on computation of time to wait in AbstractTrafficShapingHandler for Netty 4
    
    Fix for first issue from #1652 on computation of time to wait in AbstractTrafficShapingHandler for Netty 4, using the same formula than in Netty 3 (wrong place for parenthese).
    Was:
    
        (bytes * 1000 / limit - interval / 10) * 10;
    
    Becomes:
    
        (bytes * 1000 / limit - interval) / 10 * 10;

commit 15279b2525f694d1789ce06d74cf2d55a9a64e01
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 26 14:21:11 2013 +0200

    [#1654] Notify close future after the close was complete

commit cffbba94ee476b87a3932d2d5a975e55714657f9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 26 14:10:31 2013 +0200

    [#1654] Remove AbstractChannel.doPreClose() and notify close future on register failure. Based on patch of @jpinner

commit 6278d88d2f46e5facebc805b1dc0cd015eaf35b9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 26 11:46:26 2013 +0200

    [#1656] Fix IndexOutOfBoundsException in MessageToMessageException

commit 5f363e8adeef9ddd118e6906e2848ce0a0b049c7
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 26 11:23:11 2013 +0200

    Revert "remove AbstractChannel#doPreClose"
    
    This reverts commit 241f856cc721dbf786321a94c987c5026eea5412.

commit 241f856cc721dbf786321a94c987c5026eea5412
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Thu Jul 25 23:21:40 2013 -0700

    remove AbstractChannel#doPreClose

commit fabefba79185ce7ec143d911ae86f5ab8bb08845
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 25 20:24:27 2013 +0200

    [#1650] Make it possible to override isSharable() to simplify things for clojure users

commit 2b3ac3d446c9cc9a0f080fd4aabb9bbe3906d212
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 25 12:36:24 2013 +0200

    Factor out the PendingWrite class and put it in internal package. Make use of it in SslHandler and ChunkedWriteHandler to reduce GC-pressure

commit 6ff87cc20d5b728ebe6be2d6f4a2cb0092f6abf6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 25 09:28:54 2013 +0200

    Small optimitation to limit volatile reads

commit 6873111d72599453a03493774ce28b175e61c821
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 24 15:59:59 2013 +0200

    [#1648] Make sure trailing headers are not dropped during content encoding/decoding

commit d5bf1a1187925f76329ec96bd4ea0913bc2d4815
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Tue Jul 23 22:57:29 2013 -0700

    SPDY: fix NullPointerException in SpdyFrameDecoder

commit 8a673db92b728a668564563f6d7fb0c2664ef91f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 24 07:35:51 2013 +0200

    [#1644] Fixed IndexOutOfBoundException when calling copy() on a empty CompositeByteBuf

commit 5e4169802f407114aa18d1b4265bf5231673b20b
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jul 24 11:26:03 2013 +0900

    Fix potential reentrance issue in ChannelOutboundBuffer

commit 0bc7d3f5d10186497c3abce999c17c01c3232d65
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 23 10:04:23 2013 +0200

    [maven-release-plugin] prepare for next development iteration

commit ca0018279754557576bb2ecc17d209c2b6874609
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 23 10:04:14 2013 +0200

    [maven-release-plugin] prepare release netty-4.0.4.Final

commit ed9527ba41bca660d96b62a6a42470efab50b5a5
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 23 09:05:10 2013 +0200

    [#1639] Fix bug where SpdyOrHttpChooser may not buffer data correctly during protocol detection

commit 0b175867315f63154a734dcb8520166f4e9b9702
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 23 09:03:42 2013 +0200

    [#1623] Fix javadocs for ChannelGroup

commit 7903697c36bbd79e729695e3ca35e24f7674a5bb
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 23 15:09:14 2013 +0900

    Remove Arrays.fill(..., null)
    
    .. because we can just set each element to null while looping

commit a89b17fa944504a00107d40ecf6043de197f34df
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 23 14:33:37 2013 +0900

    Merge ChannelOutboundBuffer.failUnflushed() and recycle() into a single method and make sure it is run later on reentrance
    
    - Previously, failUnflushed() did not run when inFail is true, which made unflushed writes are not released on reentrance.   This has been fixed by this commit.
    - Also, AbstractUnsafe.outboundBuffer is set to null as early as possible to remove the chance of any write attempts made after the closure.

commit f4e128b8070a197ac3b770a203dcdc72af1088fc
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 23 07:11:11 2013 +0200

    [#1612] No need for volatile as it is not needed to be precise

commit 764741c5ce73f42f6451027c8f87d4021deac0e1
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 23 14:06:58 2013 +0900

    Change the contract of ResourceLeakDetector.open() so that unsampled resources are recycled
    
    - This also fixes the problem introduced while trying to implement #1612 (Allow to disable resource leak detection).

commit d4aa5b53d6410d543834f3d54841bd5eaf95dbee
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 23 13:47:43 2013 +0900

    Simplify the validation logic proposed in 25f96b164498988439c38baf6ff4c57763464824

commit 35802207e1c9dbd5512948d1bfe33f6e3a0ae5d3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 23 06:42:41 2013 +0200

    Fix compile error

commit dbc74fcc97bd76f722c2a7de343d23141db67a79
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 23 06:29:54 2013 +0200

    [#1637] Check for null parameters

commit ec370e1d977f5766b6478f31be84c89580aceddd
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 23 13:30:27 2013 +0900

    Remove an unnecessary empty line

commit 70e7bcc963f180aa0f88fdaa415fd8ba1025cd60
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 23 13:28:05 2013 +0900

    Remove ResourceLeakDetector.ENABLED / Replace ResourceLeakDetector.is/setDisabled() with is/setEnabled()
    
    - Related: #1612

commit 2bbad8e4e59f39d5f288b56a2094977b9a43eefa
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 22 20:55:49 2013 +0200

    [#1612] Allow to disable resource leak detection via API

commit ada07cb9e0700dff4ecdc3d20afc46ea46f1bc38
Author: kerr <hepin1989@gmail.com>
Date:   Mon Jul 22 19:51:09 2013 +0800

    Fix types in javadocs

commit 25f96b164498988439c38baf6ff4c57763464824
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 22 11:28:02 2013 +0200

    [#1606] Reduce overhead during writes because of ChannelPromise validation

commit 81612f8e9bc02bdb1bac6f1d6bd4d221668bb559
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 22 10:59:06 2013 +0200

    [#1624] Fix resource leak when writing to a closed / not-open channel

commit 0f6cc0cc7bcc546c124ed875d197f0333bca2da9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 22 10:44:33 2013 +0200

    [#1630] Fix re-entrance bug in ChannelOutboundBuffer.remove(...)

commit 125070958d3f5bdf8a66bed74179b22c4bc30e7b
Author: tsingxu <3x3h3q@gmail.com>
Date:   Mon Jul 22 11:32:30 2013 +0800

    Fix up ChannelPipeline javadocs by add lost "don't "

commit f478fcd3b0ced600abb3b5163f12cd10bc91979e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 22 07:12:05 2013 +0200

    [#1628] Fix bug in ReadOnlyByteByteBufferBuf where get operations threw ReadOnlyBufferException

commit feb8d101bddc032cf55d6c63bc1020ac6930e30a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 22 06:47:29 2013 +0200

    [#1626] Use static fields for default values

commit fa4e15e198911b8b5666a8062b0a5ac41b1aafa5
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Jul 20 18:15:35 2013 +0200

    Make PendingWrites recyclable to reduce GC pressure

commit 7f86550ef83316352d0d52c0f31836c7b3fb1506
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Jul 20 10:03:53 2013 +0200

    [#1619] Fix bug in ChannelOutboundBuffer which could lead to invalid write order when fireChannelWritabilityChanged() write another message

commit 80f92f90cbc9a8267cad3f338641982b53478e8a
Author: Shawn Silverman <ssilverman@twitter.com>
Date:   Fri Jul 19 13:03:18 2013 -0700

    netty-1616: Adding a 'last' check to SpdyHttpEncoder.

commit 60529ac3ee31f72bd07f2a18f869666e42a26117
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Jul 20 08:09:08 2013 +0200

    Fix checkstyle

commit 674f4bce51047a19000ac1074bb934414511e9aa
Author: Shawn Silverman <ssilverman@twitter.com>
Date:   Fri Jul 19 16:07:36 2013 -0700

    netty-1597: Rewrite ByteBufInputStream.readLine() to avoid IndexOutOfBoundsException and to behave more correctly for lines ending in '\r'.

commit 6c9c151d662b7b8ca036e86d932bba4e1c4c6729
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Fri Jul 19 19:54:09 2013 -0700

    minor documentation cleanup

commit a4d0341ea11140b1cfed2414f5292dffd3445dc8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 19 11:18:41 2013 +0200

    [#1614] Fix bug in SingleThreadEventExecutor which prevent scheduled tasks to get executed
    
    The problem was that with OioSocketChannel there was always a read Task in the taskQueue and with the old logic it never tried to execute scheduled tasks if there was at least one task in the taskQueue.

commit eb3283c59c1eaff64eba3798d4903f100ec5028a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 19 09:39:06 2013 +0200

    [#1613] Allow to specify if direct buffers are prefered in ByteToMessageCodec

commit 904385117f0c162f8b68f77a2ac24f951ce63c58
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 19 08:28:07 2013 +0200

    [#1607] Make use of gathering writes for WebSocket encoders, to minimize memory copy

commit 4d69848aec0e8c0a9cbe327fcca4f2c87d99a78a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 19 07:40:12 2013 +0200

    Fix broken javadocs

commit 19c92ceb59b8f2c77511b49cb3e0e9f70c50a711
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 19 14:09:08 2013 +0900

    Separate 'progress total' and 'pending number of bytes'
    
    - Reverted the recent changes in AbstractChannel.calculateMessageSize()

commit 4f6ba4fe3dd1ab5443020923d14c5e4c379e56ec
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 19 13:30:33 2013 +0900

    Use tryProgress just in case of user error

commit 762adfcb69266a7ba1786a966fe371d69a1043fd
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 19 13:21:32 2013 +0900

    Update HttpStaticFileServer example / Fix bugs related with progress notification
    
     - Fix a bug in DefaultProgressivePromise.tryProgress() where the notification is dropped
     - Fix a bug in AbstractChannel.calculateMessageSize() where FileRegion is not counted
     - HttpStaticFileServer example now uses zero copy file transfer if possible.

commit f96a8e595171a5ed75a05ea16da07647de54ca64
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 19 12:53:23 2013 +0900

    Implement ProgressivePromise notification in NIO byte channels and ChunkedWriteHandler
    
    - Refine the contract of GenericProgressiveFutureListener.
    - Negative 'total' now means 'unknown', which is useful for ChunkedWriteHandler.

commit 0653efcd759f9b2ce4668f7a0a6ff014123c59d4
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 19 09:38:25 2013 +0900

    Even better promise validation messages

commit d5e202d7554f79a7a7d670e371486d66a9f75c9d
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 19 09:37:56 2013 +0900

    Better promise validation messages

commit 67919841467360415308ceb64e0b6d88ed5168bc
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 19 09:24:19 2013 +0900

    Remove unnecessary code from SslHandler
    
    - Remove CloseNotifyListener which was used only to reduce the noisy logging.
    - Instead, simply do a string match.
    - Fixes #1608

commit faf8b76b5a5487b0308ebe021f45461881b2c568
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 19 08:56:17 2013 +0900

    Fix a potential bug where AbstractUnsafe.flush0() fails to clear the inFlush0 flag
    
    - Fixes #1609

commit 8178322c5cc81a4f496a5a493a7adf27d7e31540
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 19 01:17:00 2013 +0900

    A little bit of Javadoc for ChannelOutboundBuffer

commit fef838f197ca42189f9760c4927993abd9055c01
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 19 01:09:19 2013 +0900

    Make sure channelInactive() and channelDeregistered() are triggered even if outboundBuffer.recycle() fails

commit 7215c011ca1527f79d725c111b3c8ac1dd9f6424
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 18 23:42:51 2013 +0900

    Fix resource leaks in the tests

commit 8828d5327a6a7ddb71dcd0a66ca5f262b1a26e60
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 18 23:33:39 2013 +0900

    Move inFlush0 and outboundBuffer in AbstractChannel to AbstractUnsafe
    
    .. because they are accessed by AbstractUnsafe much more often.

commit 5e5df6bd09b30b11deb2d8ee7b12b949636cbdb2
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 18 23:29:13 2013 +0900

    Fix NPE

commit 4cd7e625556f86eb25a4a4cfae20ed0d34aaf5ed
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 18 23:26:45 2013 +0900

    Make ChannelOutboundBuffer recycled

commit 46ea0d4e7b8380cfc8c3f5508ac2a3896262e08e
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 18 23:14:39 2013 +0900

    Implement gathering writes in NioSocketChannel
    
    - Add some support methods in ChannelOutputBuffer

commit 4f0a9522419d358ceef9e09f4eab135dfc5200d3
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 18 21:01:01 2013 +0900

    Checkstyle

commit bcef796dc7cfa340ff1c26231ffbdf5eef397192
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 18 20:59:14 2013 +0900

    Rewrite ChannelOutboundBuffer
    
    - Merge MessageList into ChannelOutboundBuffer
    - Make ChannelOutboundBuffer a queue-like data structure so that it is nearly impossible to leak a message
    - Make ChannelOutboundBuffer public so that AbstractChannel can expose it to its subclasses.
    - TODO: Re-enable gathering write in NioSocketChannel

commit fe59ab1b9c1a5d69056a6b0863edbf98dc7bf603
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 18 20:55:02 2013 +0900

    Fix resource leak in LengthFieldBasedFrameDecoderTest

commit ac6c3b85f2ec0240c6420d3f2e9e4f2056b292af
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 18 14:49:58 2013 +0900

    Simplify

commit 28b8573b2a50d58e0e350cc9ff45981a5a31091d
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 18 14:49:22 2013 +0900

    Fix a potential race condition where the worker thread of GlobalEventExecutor terminates with a pending task
    
    - Potential fix for the hanging SpdyFrameDecoderTest

commit 57d591d188a66af40b455ff48edd753e97ca11e5
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 18 14:05:41 2013 +0900

    Fix checkstyle

commit 0f2542ded5348da38ab5a21a925ca09df669b530
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 18 14:03:48 2013 +0900

    Fix StackOverflowError raised by DefaultPromise.notifyListeners() when ImmediateEventExecutor was used
    
    - Fixed #1602

commit b130ee6a6cf023c27a9734ec1cced989bbe19b95
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 18 11:17:42 2013 +0900

    [maven-release-plugin] prepare for next development iteration

commit 10d395e82921c255985de4f6bf13bd8abcd3dd58
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 18 11:17:31 2013 +0900

    [maven-release-plugin] prepare release netty-4.0.3.Final

commit ef17a9c5d45b5c88dced58737ce387d8766a7a20
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 18 10:49:37 2013 +0900

    Grammar - Fixes #1598

commit 568166d55454a079e558c66c35c867ac5ff7fcd7
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 18 10:29:34 2013 +0900

    Cleanup

commit 473af5c98e4bac87a214f85d514904f5419f636b
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 18 10:25:16 2013 +0900

    Fix checkstyle

commit e28594952b7e9e0c7eeced17142484ceb0d5d84b
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 18 10:23:26 2013 +0900

    Make the cleanup logic in ChannelOutboundBuffer more robust
    
    - Fixes #1601

commit 9c8d980a74d7cf786aabaa233c692e247767aaac
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 18 10:14:55 2013 +0900

    Fix a bug where a ChannelFutureListener can allow Unsafe.close() and Unsafe.flush() to overlap and reenter from flush() to close().
    
     - Fixes #1600

commit f0a3f849f7d0e028eb97e672a3cbf52648b98617
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 18 09:53:45 2013 +0900

    Fix a bug in AbstractByteBuf.writeZero() where the capacity is not auto-expanded

commit fc7c950b08073914a01b1d63615a74396c662e24
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 17 15:58:36 2013 +0200

    [maven-release-plugin] prepare for next development iteration

commit bbbf72359e5a38851cd2b2e3eba9af71477ea3c2
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 17 15:58:28 2013 +0200

    [maven-release-plugin] prepare release netty-4.0.2.Final

commit 939fd8d17e974236bb3298d7fcc0c2385c1854ac
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 17 15:00:43 2013 +0200

    Improve the HttpPostRequestDecoder and so make it configurable when it will discard read bytes to prevent OOM

commit e53738f38c8e23cae301c6b0b72f931e812ebaa6
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jul 17 21:29:03 2013 +0900

    Less confusing leak warning message

commit 88cbdb50d2e77c5e1f1f900b85af32d3216925b5
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jul 17 21:25:51 2013 +0900

    Fail unflushed writes with ClosedChannelException
    
    ... instead of cryptic exception message.

commit 5f235eafc35da8b9960842606aaf4a7e06baf570
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jul 17 21:17:52 2013 +0900

    Fix checkstyle

commit 31ecd17212f9fe2e520824d23c9463b7bb46cffc
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jul 17 21:16:52 2013 +0900

    Fix test failure

commit cc9b9567b990ad3fa6cdf0bf42b7dd04fd0cb108
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jul 17 21:14:07 2013 +0900

    Make sure all write attempts made after a channel is closed are marked as failure

commit a8d67b02825d6fbb1d145c7aaee8382f5f648035
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jul 17 21:02:20 2013 +0900

    Fix data structure corruption and resource leak in ChannelOutboundBuffer

commit 66c4c07ec08b568923b60752a89146f279140f64
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 17 12:01:50 2013 +0200

    [#1595] Fix IllegalStateException thrown by HttpObjectEncoder when an empty HttpContent was written

commit b9bae2b5e4bf32f6db783664a02e1d22ba4159db
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jul 17 16:02:14 2013 +0900

    Disable the timeout of some tests in SocketEchoTest to find out why it is hanging in CI

commit 8e71186153d2d1c01de32684584bed6495347cd3
Author: Derek Troy-West <derek@troywest.com>
Date:   Tue Jul 16 23:47:46 2013 +1000

    Modify HttpContentDecoder to writeInbound and readInbound from its internal decoder

commit dcf78961724abf97fea9e768cca02ba65146b324
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 16 18:39:29 2013 +0900

    Do not close ServerChannel on IOException while accepting an incoming connection
    
    .. so that we can recover from 'too many open files'
    
    - Fixes #1578

commit 57eb531eb893bdb9351d07b5df50b7f88728040a
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 16 17:16:10 2013 +0900

    [maven-release-plugin] prepare for next development iteration

commit 76cefcc421681622831e5e38709d5552c916d6c5
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 16 17:15:54 2013 +0900

    [maven-release-plugin] prepare release netty-4.0.1.Final

commit def3dbe0358c0e0eed096191f8608a90a8854054
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 16 07:39:33 2013 +0200

    Add missing closing paren

commit 22be797054a27a749af48a517472c6100b1e7d15
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 16 07:24:45 2013 +0200

    Use Unpooled to allocate buffer in Base64

commit ed729255478ac877708c5fe5efb219fe54495a3c
Author: kxbmap <kxbmap@gmail.com>
Date:   Tue Jul 16 06:00:49 2013 +0900

    Fix sendNumbers logic

commit b8200d975cd0bc402a638a54b5b76c4b7c546a2c
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Mon Jul 15 13:39:39 2013 -0700

    SPDY: port SpdySessionHandler to netty 4

commit e879848056a5f53c1055ebbf4f9971b5ab2282d6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 15 19:12:24 2013 +0200

    [#1579] Fix resource leakage in WebSocketUtil.base64(...)

commit 5297eba280555a7b785e7f57975546a2af07e045
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 15 15:48:15 2013 +0200

    [maven-release-plugin] prepare for next development iteration

commit c5d8af446a39db10a1744d47e5a466fa1c87a374
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 15 15:48:05 2013 +0200

    [maven-release-plugin] prepare release netty-4.0.0.Final

commit 246a3ecdcbc0cf9be85cca1420a5882f5329d59a
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jul 15 20:58:33 2013 +0900

    [maven-release-plugin] prepare for next development iteration

commit e8fd2091153e884c3a463aa1e9eded35fe8c6091
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jul 15 20:58:21 2013 +0900

    [maven-release-plugin] prepare release netty-4.0.0.Final

commit e1c78b471b772b68e6762ed24642dc5db6773222
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jul 14 23:38:02 2013 +0200

    Use the configured ByteBufAllocator in SpdyFrameEncoder

commit 2de491aa7f8460f7ca99afb242e1c14f18e78e1b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 15 10:44:33 2013 +0200

    Use UnpooledByteBufAllocator as default

commit d5f052f39c65291c8a2553903c0f8a9f2ea00759
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 15 10:42:36 2013 +0200

    Rename ChannelGroupMatcher to ChannelMatcher

commit df5daadd0f015eda9046bb80073e11e0a9fb6ef8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 15 10:09:17 2013 +0200

    Remove unused import

commit 7522d530ac0f9825e6998e997a1b0757302e25c7
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 15 10:08:44 2013 +0200

    Use the allocator of the src ByteBuf to allocate the new ByteBuf

commit 9b9f6216908d177b9a6f97949a8ffce80d03c7b6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 15 09:33:33 2013 +0200

    Make DefaultFutureListeners package private

commit efd08efd1b9a45189994c50792076655bb42dbc8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 15 08:18:57 2013 +0200

    Add missing @Override annotations

commit cd516740705a71b216a850a8315f3f7926f71dda
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 15 08:18:37 2013 +0200

    Small performance improvements for RTSP

commit 2f7759a2642c0f1efc1293353c6f3c6469c71f99
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jul 14 23:50:27 2013 +0200

    Remove unused package private classes

commit 3140282ae378214b9278325d89091df7557ba81a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jul 14 23:34:36 2013 +0200

    Use the ByteBufAllocator when possible

commit 0393ffbfb2d8cebd3f5a87679ca9c30e59ba048b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jul 14 23:12:49 2013 +0200

    Reduce memory copies in HttpContentDecoder and so also the risk of memory leaks

commit ecb215c12fc68ff53bdc353d51205a7f20af778e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jul 14 22:50:53 2013 +0200

    Fix buffer leaks

commit 9dfad35423df0fb4564dccddfe69b73608f826a4
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jul 14 18:32:10 2013 +0200

    Fix checkstyle

commit 75997545eda02f77603bd59a05932819acea7a56
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jul 14 18:13:47 2013 +0200

    Fix checkstyle

commit c20c8526025fb391d6e1a8d0bdfc344fc223d917
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jul 14 18:04:33 2013 +0200

    More javadoc fixes

commit 43d22f6d237f35bb2b395e9c0fd4d6eb98878c14
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jul 14 17:54:07 2013 +0200

    Remove unused class which was package private anyway

commit 7254a5c2c66a34ae2f0f0f776c679668d27ff88f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jul 14 16:02:03 2013 +0200

    Just some tiny javadocs optimizations

commit 32b671f4dcb54bf4eaa3c910911425fb4b97a9e2
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jul 14 15:48:00 2013 +0200

    [1575] Correctly parse Content-Type value

commit a07abee55fec9df6af7408ba7623aff29ab266d9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Jul 13 19:42:02 2013 +0200

    Add and correct javadocs

commit 910c5fd594f7435ec9a9693260dbbccc5e8bb340
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Jul 13 16:57:44 2013 +0200

    Hide RecyclableArrayList from sub-classes

commit 2af7db361b73f17af4b43ff40ac3f1fc49bc0bcb
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 12 22:57:03 2013 +0200

    [#1573] Fix NPE which could be triggered one failed promises that trigger a close89

commit 2871079c4a1563cdb4904074f4979b484313d18a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 12 18:45:24 2013 +0200

    [#1557] Make the contract of Channel.Unsafe.flush() more clear
    
    * Remove boolean parameter from Channel.Unsafe.flush() method
    * Move NIO related things to AbstractNioChannel.NioUnsafe

commit a215ba6ef619fd3ac9ffcf7d51e6f5c023b99e0e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 12 15:43:50 2013 +0200

    Some javadocs

commit 85a3d320cb546c1fc933ba712642d16b2d6eeb12
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 12 21:07:10 2013 +0900

    Update dependency versions

commit a8af57742334d2962bba108a0773878a3a4af346
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 12 13:49:54 2013 +0200

    Add javadocs to methods that user may override and make the others final

commit 660729bd56a05b3178861a9a73555d850511878b
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 12 20:41:29 2013 +0900

    Kill the cruft

commit 765d4705001004ea2638a0c6d41dcb9febbde159
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 12 20:40:39 2013 +0900

    Remove UnreplayableOperationException
    
    - Can't find a reason to keep it.

commit 456994607bcd25f34ce4e69a3d984685e033c284
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 12 20:30:25 2013 +0900

    || -> &&

commit edb6786a5c0140d015f18a6e811c03343f167ca3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 12 13:29:54 2013 +0200

    Make the cumulation field in ByteToMessageDecoder package private to hide it

commit 99716993f64154f75cb526350ccf3e64566c9c0a
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 12 20:14:50 2013 +0900

    Add a boolean parameter to Channel.Unsafe.flush() so that SelectionKey state check can be bypassed.

commit e10e9d38c4ec9ed081da916b924b43a6381fb93d
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 12 20:12:18 2013 +0900

    Fix embarassing compilation error :-/

commit 85a2ba37529bbd0f11443390af2544a1ee9a1742
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 12 20:10:39 2013 +0900

    Remove dead code
    
    - Fixed #1557

commit 6d1220b55e4b9a74ec57d9755976c40fd675fac5
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 12 20:04:01 2013 +0900

    Reduce garbage in AbstractUnsafe.flush0()

commit 529d904d2902ecd619933db570a4dcc1f5a482be
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 12 20:01:38 2013 +0900

    Fix a bug where ChannelOutboundBuffer.addFlush() is called multiple times

commit e2fcb06d9ab37e4cff9e513327461ccc492cb704
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 12 20:00:30 2013 +0900

    Remove unnecessary try-catch block in AbstractUnsafe.flush()

commit 43f12569aa6429e2544e5905766e30ac98db5d14
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 12 11:57:33 2013 +0200

    Cache flush(..) tasks which are used when executing with different EventExecutor to lower GC pressure

commit aa64c13bb8bff65fb25e772de2fb5ef0cb8ef9a4
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 12 11:48:26 2013 +0200

    Cleanup

commit 4e604a65538e35a4e6c05627b940504477e9fb1a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 12 11:21:51 2013 +0200

    Make clear how to use HTTPS in the helloworld example

commit 023201f68436109c67cddd9078732f6ce54f7a1f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 12 10:58:38 2013 +0200

    [#1570] ChunkedWriteHandler.discard(..) must not call fireExceptionCaught(...)

commit 1a7d1f70239bc35ab94fa6444ef9846fd71de309
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 12 10:42:39 2013 +0200

    [#1568] Fix problem where an exception was fired after the channel was closed.
    
    * Calling fireExceptionCaught(...) in this case was not correct as we failed writes which are outbound operations.

commit 030d9fd22789b3c15ee8ef13210b823c0714974f
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Thu Jul 11 23:32:27 2013 -0700

    SPDY: check if spdyHeadersFrame is null before adding it to out

commit 3a4c7c9c93dc537d1f33d252a2ac7f18e211334b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 12 08:25:19 2013 +0200

    Also dissallow null elements on set

commit 98c6a5810a18ff115eb61c79249dad003ad4c109
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 12 08:23:01 2013 +0200

    Just tiny optimization to avoid object creation

commit c38db2afe3dcffb1cdbdbb65f27ac3f1a3111387
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 12 08:01:31 2013 +0200

    Dissallow adding null elements into RecyclableArrayList

commit be963d4cafc67897edc45751b0991ef668f8b8c9
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Thu Jul 11 22:09:47 2013 -0700

    rewrite SslHandler's flush0 message to match docs

commit c77ab7d09261912ae3bd99f14c86000faa6a370c
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Thu Jul 11 17:45:28 2013 -0700

    Fix a NoSuchElementException and out-of-order event problem caused by SslHandler
    
    The fix prevents from reentering channelRead incorrectly. It also
    prevents from getting the inbound requests out of order.

commit d8479a04df5621683a404363ddf1a902597b4b17
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 12 00:02:54 2013 +0200

    Allocate buffer from ByteBufAllocator in ChunkedFile

commit 3db3a9a2bf204967edeba68c96bee82aa95b1f0f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 11 23:44:36 2013 +0200

    [#1558] Use correct scheme to detect port. Thanks @golovnin for spotting it.

commit 2380461861781d6f6d1a4102ab22c28b344b37bc
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 11 23:23:36 2013 +0200

    [#1558] Corrects handling of port number in WebSockets handshake header values
    
    * This patch was inspired by the work of @golovnin

commit daa79f3a118ab9c006b731ebaf94c56e44d95381
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Thu Jul 11 13:54:49 2013 -0700

    SPDY: fix bug #1211 reintroduced in 7bedd8f

commit 64686deaff75d3a188828364a55f218f3d8c8436
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 11 15:47:29 2013 +0200

    Tiny optimization

commit e85ae721b24e6903a212896763bf69d3ae6bb923
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 11 13:48:37 2013 +0200

    Set the destroyed flag at the correct time and fix a the httpupload example to release all resources

commit 10097bf881063565473f680e0734e9666794bd62
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 11 11:50:56 2013 +0200

    Correctly set the destroyed flag

commit c0580cfe7137b4ba461d47b5d13a18cfe65704d0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 11 11:25:40 2013 +0200

    Fix examples

commit 1d577b1b8bd3f51bcf8d9d89bb4598a28020af07
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 11 11:07:06 2013 +0200

    [#1561] Fix Securechat example which was broken because Channel was not flushed

commit d23c3b3382ff6b2dc7625cb0a0cd31d767efafc5
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 8 07:42:19 2013 +0200

    Introduce ChannelGroupMatcher which can be used to only apply operations of a ChannelGroup on matching Channels.
    
    This is often useful if you for example use a ChannelGroup to hold all connected Channels and want to broadcast a message too all of them
    except one Channel.

commit 12ea35fd5f004f2708d7e61ef15ae64a19b7cc29
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 11 10:26:10 2013 +0200

    Add missing javadocs

commit f47fa76b9ad82e29b0cf1ac2d3d75d84eeaeb41c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 11 10:20:38 2013 +0200

    Fix resource leakage in example

commit 4d94f1d1e1aef8c0cbb745e8f4e876e0e96c3474
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 11 06:40:04 2013 +0200

    [#1534] Finally fix SslHandler to also correctly handle partial data

commit 9c49322b9c1cb78c68d263baf64a522e5cba4497
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 10 22:25:20 2013 +0200

    Improve performance of HttpRequestEncoder.encodeInitialLine(...)

commit 46f6e1d360f459a7e1b6654cffe2796b62d8192f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 10 22:10:48 2013 +0200

    [#1542] Fix resource-leak in HttpObjectAggregator when a too long frame was detected

commit 224f05e6263660a9afeb0524869b58b443c71a16
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Wed Jul 10 12:42:56 2013 -0700

    Use correct permission mode for java files

commit b5527e905ef3192db653dd3914aed4fda1ca8adb
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Wed Jul 10 12:20:46 2013 -0700

    fix SpdyHttpDecoder

commit cf9ee928b012bb2af24372ab180bacdb02cf7c74
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Wed Jul 10 11:16:29 2013 -0700

    HttpContentEncoder should not remove Content-Length when acting as a passthrough.

commit 2adf393277e6ce918c1bf13693f7c1f71a3526b8
Author: alain <alain.wan@gmail.com>
Date:   Tue Jul 9 18:37:36 2013 -0700

    [#1553] Improve performance of encodeInitialLine

commit 40bbe2130a28d1aff150f0266e346432e18cc5df
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 10 20:56:23 2013 +0200

    [#1545] Fix ClassCastException by using the correct type for SCTP_INIT_MAXSTREAMS

commit 4d44b379394f0ce82c5b0cfa610d8ba5a0d5d4e3
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 11 01:10:52 2013 +0900

    Fix potential leak in HttpContentEncoder

commit b7a7c33fe35c331d11423db949e1d4b8951da08a
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 11 01:05:26 2013 +0900

    Fix a bug in ChannelOutboundBuffer.addFlush()
    
    It should not advance the tail if no write() was issued so far.

commit b57d9f307f61161b62a335734438fb0c49260c84
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 10 13:00:42 2013 +0200

    Allow per-write promises and disallow promises on flush()
    
    - write() now accepts a ChannelPromise and returns ChannelFuture as most
      users expected.  It makes the user's life much easier because it is
      now much easier to get notified when a specific message has been
      written.
    - flush() does not create a ChannelPromise nor returns ChannelFuture.
      It is now similar to what read() looks like.

commit dd763698dce324e35e0e181fbea1f2e4c373b72b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 10 08:27:11 2013 +0200

    Adjust ChannelGroup to behave the same like a Channel in terms of write and flush

commit da5c6add14d1d6ad5c33254d65439b6e3f91a849
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 10 07:50:26 2013 +0200

    Rename CodecOutput to RecyclableArrayList and move it to internal package.
    
    * Also reuse it in SslHandler

commit 768152cf88417ecb5700bdff519d149114f7e975
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 9 22:41:56 2013 +0200

    Correctly handle forward of remaining data on removal

commit 488ffb11d8bb1650982d7514392c4951b4365e98
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 9 21:53:44 2013 +0200

    Revert "Fixed ClassCastException in setting min,max sctp streams"
    
    This reverts commit 276d619afbe47667c7cc552aee652a1f385fd1ad.

commit d83daf05303393b08882d26d8cbd6aaa972d0bc3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 9 21:53:19 2013 +0200

    Revert "Minor refactoring in variable naming in sctp stream config"
    
    This reverts commit e062f7f6f9ee9d64980a0e71947b3477d96e022d.

commit e062f7f6f9ee9d64980a0e71947b3477d96e022d
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Tue Jul 9 22:51:29 2013 +0530

    Minor refactoring in variable naming in sctp stream config

commit 276d619afbe47667c7cc552aee652a1f385fd1ad
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat Jul 6 17:23:20 2013 +0530

    Fixed ClassCastException in setting min,max sctp streams

commit 7bedd8f28ef52a0c825133bc5926764444d7b3a9
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jul 10 00:36:47 2013 +0900

    Simplify the exception handling of ChannelOutboundHandler.write()
    
    DefaultChannelHandlerContext does not trigger exceptionCaught() immediately when ChannelOutboundHandler.write() raises an exception.  It just records the exception until flush() is triggered.  On invokeFlush(), if there's any exception recorded, DefaultChannelHandlerContext will fail the promise without calling ChannelOutboundHandler.flush().  If more than one exception were raised, only the first exception is used as the cause of the failure and the others will be logged at warn level.

commit 26e9d704578807b927363e17be75978daea66163
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 9 23:09:28 2013 +0900

    Remove channelReadSuspended / Rename messageReceived(Last) to channelRead(Complete)
    
    - Remove channelReadSuspended because it's actually same with messageReceivedLast
    - Rename messageReceived to channelRead
    - Rename messageReceivedLast to channelReadComplete
    
    We renamed messageReceivedLast to channelReadComplete because it
    reflects what it really is for.  Also, we renamed messageReceived to
    channelRead for consistency in method names.

commit 354de0a8f031fd7ad29d20ef50dda5c784bf2202
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 8 14:22:54 2013 +0200

    [#1534] Fix handling of partial frames in SslHandler
    
    * Let SslHandler not extend ByteToMessageDecoder

commit cbd88179051a51e66abac4c65d4af865c203c337
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jul 8 19:03:40 2013 +0900

    Remove MessageList from public API and change ChannelInbound/OutboundHandler accordingly
    
    I must admit MesageList was pain in the ass.  Instead of forcing a
    handler always loop over the list of messages, this commit splits
    messageReceived(ctx, list) into two event handlers:
    
    - messageReceived(ctx, msg)
    - mmessageReceivedLast(ctx)
    
    When Netty reads one or more messages, messageReceived(ctx, msg) event
    is triggered for each message.  Once the current read operation is
    finished, messageReceivedLast() is triggered to tell the handler that
    the last messageReceived() was the last message in the current batch.
    
    Similarly, for outbound, write(ctx, list) has been split into two:
    
    - write(ctx, msg)
    - flush(ctx, promise)
    
    Instead of writing a list of message with a promise, a user is now
    supposed to call write(msg) multiple times and then call flush() to
    actually flush the buffered messages.
    
    Please note that write() doesn't have a promise with it.  You must call
    flush() to get notified on completion. (or you can use writeAndFlush())
    
    Other changes:
    
    - Because MessageList is completely hidden, codec framework uses
      List<Object> instead of MessageList as an output parameter.

commit 1d196c5b591269eec0fd0be7f1807a1effccd94e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 8 14:22:54 2013 +0200

    [#1534] Fix handling of partial frames in SslHandler
    
    * Let SslHandler not extend ByteToMessageDecoder

commit 75229e145a8a593c6058938eb78c3b6dacdf9315
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 9 14:53:05 2013 +0900

    Prettier web socket log messages

commit 7396f9f2b224c1ac3b2276ecca5dac74d6ba4ddc
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 9 14:49:06 2013 +0900

    Remove Channel.id completely / Use 64-bit hashCode internally to reduce the chance of collision in compareTo()

commit 9c1b31d20a2a6f913802f4200e6910f32990634e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 8 13:31:59 2013 +0200

    [#1535] Remove Channel.id() and so fix the possible leakage of the previous used Channel id map
    
    The user can still use Channel.hashCode() for logging. It's just not 100% unique but should be good enough for most cases

commit 39b57b889cf77f38b25f45bd38fad58d22a4bb73
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 8 13:36:39 2013 +0200

    [#1539] Fix bug in DefaultChannelGroup.close() which was blocking the close() call on ServerChannel

commit 65c2a6ed46c163081fed5307f33489a606177f33
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jul 8 13:32:33 2013 +0900

    Make ByteBuf an abstract class rather than an interface
    
    - 5% improvement in throughput (HelloWorldServer example)
    - Made CompositeByteBuf a concrete class (renamed from DefaultCompositeByteBuf) because there's no multiple inheritance in Java
    
    Fixes #1536

commit 40b4c35574a429fb47acc4fe4c0a5a7d0223079b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 8 07:41:40 2013 +0200

    Forgot to commit this class before. Related to [#1433]

commit 1bf2f702cb08b7a1b85a2a64012d1e1ae8f05d55
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jul 7 15:28:43 2013 +0900

    Do not use unreleaseableBuffer and duplicate
    
    .. because it's not as fast as just creating a new direct buffer.

commit a52ac692a96a79fd4c906f650962f44b270c442e
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jul 7 15:15:52 2013 +0900

    Faster MessageList iteration in NioSocketChannel.doWrite()

commit 553cd034b9d1fb8b9a55c1439860b728bfa623bd
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jul 7 12:39:29 2013 +0900

    Fix checkstyle

commit a4f2789e55b4fd0430f0a970785d3438d02e9b59
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jul 7 12:38:53 2013 +0900

    Add missing final modifier

commit 2b2f8db5d2555ce359f0b47c1680590cf37b9f9e
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jul 7 12:37:36 2013 +0900

    Use ThreadLocalRandom where possible

commit 1fa087ecbf7663e675c431471fc263324f131bf1
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jul 7 12:29:33 2013 +0900

    Fix checkstyle

commit ff97d1db292327a361d44c1a6a2f9b8dc9bd00f9
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jul 7 12:29:11 2013 +0900

    Fix checkstyle

commit 70df5a6f63a89c6de4afbf64774a5ddb66557985
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jul 7 12:26:48 2013 +0900

    Add ThreadLocalRandom back because it's used by ForkJoinPool now.

commit 378626b31fcf93efae154a4e71edfce45a091394
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jul 7 12:22:59 2013 +0900

    Port ConcurrentHashMapV8 again to get the recent upstream fixes

commit da5a5af5205813a827ff8251c3921d185768b2aa
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jul 7 11:52:34 2013 +0900

    Add Test case for truncated SSL packets
    
    - Related issue: #1534
    - Also made sure ByteToMessageDecoder does not wrap EncoderException.

commit 5010fe0a61436ee34651866e86153c8c20e1ed22
Author: Trustin Lee <t@motd.kr>
Date:   Sun Jul 7 11:22:02 2013 +0900

    Fix a bug in SslHandler where a truncated packet isn't handled correctly
    
    - Fixes #1534

commit 086ae3536cfd10411a36f4aba475e2e348f868b8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Jul 6 21:17:51 2013 +0200

    [#1533] Introduce ByteBufHolder.duplicate() and make use of it in DefaultChannelGroup.write(...)

commit 7dda4b9ce410f464342f77b8223fc27302c8c293
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Jul 6 20:14:53 2013 +0200

    [#1532] Remove @deprecated ByteBufIndexFinder and all methods that take it as argument

commit dfc05a6ed7dbc59416b0a2cff26ac91f64e6af26
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 5 17:03:34 2013 +0900

    Fix documentation error in ByteBuf
    
    - Fixes #1531
    - Thanks to @daschl

commit b63f3488b7b6ff25fcaa6152eb9c00008ed4d941
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 5 08:31:07 2013 +0200

    Add a HttpPostRequestDecoder.destory() method which should be used to destroy the decoder and free up resources
    
    * Also make the contract more clear about who needs to call release()

commit b26e61d689ce3f7bc52d392d0c4750c54a094f06
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 5 07:18:33 2013 +0200

    Fix broken tests

commit eb8df35f211282aa1602706d59187b8da78d1f7d
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 5 14:11:09 2013 +0900

    Use MessageList.first() and last() wherever possible
    
    - Related issue: #1530

commit b7e6a86c1e9b5920af696e7f7149d4675fbf0485
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 5 14:07:51 2013 +0900

    Add MessageList.first() and last() for convenience.
    
    - Fixes #1530

commit 0b9235f072f8bdac8bfa2f3e365a9cbcdbb0fe81
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jul 5 14:00:05 2013 +0900

    Simplify ByteBufProcessor and MessageListProcessor and Add internal component accessors to CompositeByteBuf
    
    - Fixes #1528
    
    It's not really easy to provide a general-purpose abstraction for fast-yet-safe iteration. Instead of making forEachByte() less optimal, let's make it do what it does really well, and allow a user to implement potentially unsafe-yet-fast loop using unsafe operations.

commit ea85054eabb9846813f52bc7fbe0f11982529dc9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 5 06:41:48 2013 +0200

    Correctly detect LastHttpContent after encoding

commit 9f0f653588ce1b1715d1b6516cf47635d6810cfc
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 5 06:38:25 2013 +0200

    Optimize HttpContentEncoder to do less memory copies as those are not needed

commit d900f8c21d2c8205eff3fb392f1b6f134dc447a1
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jul 5 06:27:25 2013 +0200

    [#1524] Fix resource leak in HttpContentEncoder

commit 2bda1b530adad4e92039c3e16fc08044634f0cd8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 4 16:15:33 2013 +0200

    [#1523] Fix bug which lead to have SelectedKeys handled two times and so caused a NPE on heavy load

commit cad7c1f1b0e23a4a1320d967b17aafcaa0119ace
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 4 11:59:30 2013 +0200

    [#1521] Fix performance issue in AbstractHttpData

commit 1fee1ef74ed8ac515c19a7f8eebd16f41a37b7b6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 4 10:58:37 2013 +0200

    [#1520] Release previous set buffer when setting a new data source

commit 45d20d5c9faf51a506d4d2a9fdb04b9cfd876876
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 4 10:41:49 2013 +0200

    [#1516] Fix resource leakage which was caused by the AbstractDiskHttpData which did not release the buffer after copy to disk

commit 08b75e594cbe4f16ec73c3840a3981af7871066f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 4 09:32:38 2013 +0200

    [#1519] VoidChannelPromise don't fire CancellationException anymore which was incorrect

commit cea873286e68e0e164456cecce55401b3187df13
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 4 09:20:24 2013 +0200

    [#1517] Only fire the exception throught the pipeline if the channel is registered when using VoidChannelPromise

commit f64a121de78fe739b61d503dc61cc62fe98659d5
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jul 4 06:41:22 2013 +0200

    [#1515] Add WebSocketFrameEncoder and WebSocketFrameDecoder interfaces and let our impls implement it

commit 998b408db3403e44566ab3f08dd381a7e03f7d1d
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jul 4 12:04:28 2013 +0900

    Fix NPE in OioByteStreamChannel
    
    - Do not assign null to 'is' and 'os' but assign an alternative stream implementation

commit 79576d15c281ae18449cfa7f457932455e219974
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 3 19:54:08 2013 +0200

    [#1513] Use the correct names when add the websocket decoder and encoder

commit 7ec12d327f5adabffb71adffe8a5ebdaa680437a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 3 10:00:13 2013 +0200

    Remove deprecated ByteBufUtil.release(..) and ByteBufUtil.retain(..) methods and its usage. Also fix a problem where an object would have been released two times.
    
    * The problem with the release(..) calls here was that it would have called release on an unsupported message and then throw an exception. This exception will trigger ChannelOutboundBuffer.fail(..), which will also try to release the message again.
    * Also use the same exception type for unsupported messages as in other channel impls.

commit 328969485cf164b0c646c990c12a74479864745b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jul 3 06:41:12 2013 +0200

    Add explaination to the javadocs to not call retain() on the request when doing the handshake. Related to [#1508]

commit 824bb3419a4f44980374b4f73bbf5063ac567f1e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 2 19:30:05 2013 +0200

    [#1511] Fix NPE in AbstractTrafficShapingHandler which could happen if the READ_SUSPEND attr was not set yet

commit a4ee2841be0be8e69d624f0543ab9d0ebb4b9567
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 2 13:46:09 2013 +0200

    [#1507] Fix buffer leak in WebSocket08FrameDecoder

commit ec5e793a2fd244e334c2b1f2c22d55389a3452f7
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 2 11:41:18 2013 +0200

    [maven-release-plugin] prepare for next development iteration

commit ca73eaef0dcf4f4889492253d78f679a84a1917b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 2 11:41:09 2013 +0200

    [maven-release-plugin] prepare release netty-4.0.0.CR9

commit 830c5594054d0653fb4c7a569eb4e2ff7a10ab8d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 2 11:34:29 2013 +0200

    [maven-release-plugin] rollback the release of netty-4.0.0.CR9

commit 66a16b133c1916e4dee16151b72f691484b8a1da
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 2 10:45:12 2013 +0200

    [maven-release-plugin] prepare release netty-4.0.0.CR9

commit 956c0f8b9059c84122357000258a00cf0bc5e905
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 2 17:22:56 2013 +0900

    Better explanation of reentrance issue of ChannelOutboundBuffer

commit 54378358327ac0fdaa2982114f74a17ec4cfe0ad
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 2 09:58:41 2013 +0200

    [#1501] Fix NPE correctly which could accour if ChannelOutboundBuffer.fail(..) triggered another call to ChannelOutboundBuffer.fail(...)

commit 8dfbcbda299ac0ff13ab88650784aff70d9811a0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jul 2 09:32:34 2013 +0200

    [#1501] Fix NPE which could accour if ChannelOutboundBuffer.fail(..) triggered another call to ChannelOutboundBuffer.fail(...)

commit 963376990927b1169304ccad7546168a74d012bf
Author: alain <alain.wan@gmail.com>
Date:   Fri Jun 28 15:57:26 2013 -0700

    Improve performance of encodeHeader

commit 7e3a01cc51136f3bc928c0d5537e9985090b563d
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 2 10:26:48 2013 +0900

    [maven-release-plugin] prepare for next development iteration

commit 149db34c1907ee162b785560289877d20ba44138
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 2 10:26:32 2013 +0900

    [maven-release-plugin] prepare release netty-4.0.0.CR8

commit efd9c9477556ad9e7dddfb0e02edcbb1b09c9489
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 2 10:20:15 2013 +0900

    Use higher maxMessagesPerRead as default for ServerChannels
    
    - Fixes #1493

commit 26b56d3addb34b409bf10b819a1e70ea2ad46b71
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 2 10:11:17 2013 +0900

    Fix a bug in MessageList.add(T[])
    
    - where it uses incorrect source index while iteration

commit 720de2e6ccd9bac41ffe24612d979a38a28fb616
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 2 09:36:01 2013 +0900

    Add missing sanity check for DefaultChannelHandlerContext.write(...)

commit 4b11aff08fb23f43ed849824bf68f532986cc510
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jul 2 09:23:29 2013 +0900

    Less confusing log messages for system properties
    
    - Fixes #1502

commit 43da224978a895e2e8312090101225dbe7fae675
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 1 11:46:34 2013 +0200

    Only log about not avaible JavaAssist in debug level

commit a6bdd7cda43d17fb7721a0b695e66811c5bb6bc8
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jul 1 17:27:45 2013 +0900

    Fix compilation errors

commit 5d88c423dfa458d82fd2c12083307507b163a32f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jul 1 08:53:02 2013 +0200

    [#1500] Remove @deprecated methods

commit 617ab6321ba860c418de1ac61d7417e4937455de
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jun 30 17:18:33 2013 +0200

    [#1489] Correctly handle channelReadSuspended and channelWritabilityChanged in CombinedChannelDuplexHandler

commit 0c8cf5cdc8cf98a8de3605279c5d0cdfe5e47b42
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Fri Jun 28 13:33:14 2013 -0700

    SPDY: SpdyHeaderBlockDecoder should not discard input data

commit 4dab51b619a010b4030b3d15f5a7dc70a7e7b008
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jun 28 20:41:01 2013 +0200

    Remove un-used method parameter

commit e234abdbf764513024cdedd09e27868ad0ecfbdf
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jun 28 20:28:29 2013 +0200

    Add javadocs

commit 613547b0b94e387ea90de025287c5d2005b3ffc4
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 28 22:15:33 2013 +0900

    [maven-release-plugin] prepare for next development iteration

commit a6abd2feb202e9a54da7bb37620656054489f5ac
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 28 22:15:20 2013 +0900

    [maven-release-plugin] prepare release netty-4.0.0.CR7

commit ea963c25c99c9b90acb893843f14bacd2a7d9250
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 28 22:09:00 2013 +0900

    Improve Javadoc of ChannelPipeline
    
    - Fixes #1226

commit 1b40a0ebc5ff3e3c868ec15ce2debb1967291a4d
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Fri Jun 28 00:40:01 2013 -0700

    SPDY: SpdyFrameDecoder should buffer unread data when decoding headers

commit 5f1aa6afde4f2727e2230b530d52bef98757eac6
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 28 21:25:15 2013 +0900

    Remove potentially misleading exception message
    
    .. because the MessageList itself is not read-only.

commit 591dce565a01b8f8ec25b2bb17bd24e8724157c4
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 28 21:17:18 2013 +0900

    checkExclusive() -> checkIndex()

commit d4665f1703241a4f0325348d0e3010520f5bbdaa
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 28 21:14:23 2013 +0900

    Fix test failures

commit 1e0146da3e36d8d5bf67cf63158b3517af2d1d0b
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 28 20:53:57 2013 +0900

    Optimize MessageList.add(MessageList, int, int)

commit 7cf88a1a3c9e72c55df00ffb8af12c7930eb6ec3
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 28 20:47:19 2013 +0900

    Add MessageList.array() / Rewrite MessageList.add(T[], int, int)
    
    - MessageList.array() should give better performance + concise code
    - MessageList.add(T[], int, int) iterated over the source array 3 times at worst case. This commit reduces that to 1 time.

commit 0dcf352f4c1d048bf0e8a7566ebee7a6859f423c
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 28 20:29:00 2013 +0900

    Vastly simplified ByteBufProcessor and MessageListProcessor
    
    - Related: #1378
    - They now accept only one argument.
    - A user who wants to use a buffer for more complex use cases, he or she can always access the buffer directly via memoryAddress() and array()

commit 094d01873bee480c787f9ebda2c845e822c09a71
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jun 27 22:36:08 2013 +0200

    Throw IllegalStateException if implementations of ByteToMessageDecoder and ByteToMessageCodec use @Sharable

commit 52691488ee0b95381c8a4d25a567c78b29c4b00e
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 27 19:01:01 2013 +0900

    Update Javadoc of ByteBufProcessor and MessageListProcessor
    
    - in response to @shacharo's suggestion

commit ac39cad5fff8fecd79c83ad46900581b2fe4624a
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 27 18:48:09 2013 +0900

    Split ByteBuf.forEachByte() into forEachByte() and forEachByteDesc()
    
    - Related: #1378
    - As suggested by @liqweed

commit 9804741fb3412d47af414cda7239deab24f84ed7
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 27 17:49:46 2013 +0900

    Fix test failure in SlicedByteBuf / Add tests for built-in ByteBufProcessor impls
    
    - Related: #1378

commit 98531313de0332521b571580ebb8ad0b18939fe9
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 27 17:36:22 2013 +0900

    Optimize derived buffers' forEachByte(...) implementation
    
    - Related: #1378

commit b5bb36c08750074d884b1f08cfac9d2a91144bda
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 27 17:30:19 2013 +0900

    Use (fromIndex, toIndex) instead of (index, length) for ByteBuf.forEachByte(...)
    
    - Related: #1378

commit 792edf631cb799b59e59588308b6310d9bad75b9
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 27 14:26:58 2013 +0900

    Deprecate ByteBufIndexFinder
    
    - Prefer ByteBufProcessor
    - Related: #1378

commit 4dd9b6ef2e1cf321874e4a613e48bd2833f3453e
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 27 13:55:42 2013 +0900

    Add ByteBufProcessor and ByteBuf.forEach(...)
    
    - Fixes #1378
    - Needs to provide optimized forEach implementations though.

commit 734ec51ac9440a4a61950cfc82580b94cf05cbe9
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 27 10:39:39 2013 +0900

    Allow specifying 0 as the default number of threads when instantiating an EventLoopGroup
    
    - Fixes #1426
    - We already allow a user instantiate an EventLoopGroup with the default number of threads via the default constructor, so I think it's OK although it's not always optimal.

commit 1c57e3830c38187eb39e53b21a7b9a9bdf896e90
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jun 26 21:13:32 2013 +0200

    [#1474] Make sure testsuite also pass when no network/internet connection is present

commit a52eafd7e8e9ac25206088748b8e53d3809a9e4c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jun 26 20:22:34 2013 +0200

    Fix FileServer example

commit cfd514d099fb41b2a467ca208fe1334bb04f8f6c
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 25 18:52:27 2013 +0900

    Add WebSocketClientHandshaker.close()
    
    - Fixes #1470

commit c7c9e743ce8d08fecccea11372c976e63b2f2955
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 25 18:37:29 2013 +0900

    Fix naming

commit bc483724f42215c4ba53590540d83b57bfdf2099
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 25 18:27:29 2013 +0900

    Improve the documentation of MessageList
    
    - Fixes #1459

commit 1f27c3b39060e544b4d3aaf05b700dd5c433a0cd
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 25 18:08:39 2013 +0900

    Make NioByteUnsafe.read() respect ChannelConfig.maxMessagesPerRead and adjust the default from 16 to 1
    
    - Fixes #1486
    - Decreased the default from 16 to 1 because unnecessary extra read on req-res protocols results in lower throughput due to extra syscalls.

commit a1632e7d1526698c0e6db6e65e49d8a38fa0d926
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 25 17:49:28 2013 +0900

    Add ChannelConfig.maxMessagesPerRead and ChannelOption.MAX_MESSAGES_PER_READ
    
    - Fixes #1486
    - Make sure AbstractNioMessageChannel.NioMessageUnsafe.read() only up to maxMessagesPerRead

commit 58b968b6036dc194dce5a3e70d05d493b2fb6b58
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jun 21 16:38:37 2013 +0200

    [#1454] Fix IndexOutOfBoundsException which was thrown if last component of a CompositeByteBuf was removed

commit e8ea98017f1c1dd5c892e2580e7635608afce83a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jun 21 16:09:49 2013 +0200

    Fix regression introduced by 0364265f4692b2f2f28ab36037c4ab6f3c242eae which could lead to corrupt attribute values

commit dbab41cc50f4ddb71a153df342748ca1d85ab8e7
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 21 11:15:24 2013 +0900

    Improve the utilization of subpage pools
    
    .. by avoiding the overly frequent removal of a subpage from a pool
    
    This change makes sure that the unused subpage is not removed when there's no subpage left in the pool.  If the last subpage is removed from the pool, it is very likely that the allocator will create a new subpage very soon again, so it's better not remove it.

commit a6795d7780bf2dcb7bd02fe4f169cdb1bca51b4e
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 21 08:59:06 2013 +0900

    [maven-release-plugin] prepare for next development iteration

commit 2221446425709d465605c124d44a508d47264195
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 21 08:58:55 2013 +0900

    [maven-release-plugin] prepare release netty-4.0.0.CR6

commit e0805ecea9240a4a9e2b0eb70e77c2d5affbe1a2
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 21 08:37:00 2013 +0900

    SPDY: handle too large header blocks
    
    - Forward-ported 22b8a96e044b77e5fadc5a1217080a1f9c69aa9c

commit c77f03d886f5785e3a59935fc347c0c4c72bbe37
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 21 07:36:32 2013 +0900

    Fix AdaptiveRecvByteBufAllocator.getSizeTableIndex()

commit c9d01b2fb59c6ef7905ed0209962a34e3b4ba853
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jun 20 16:20:23 2013 +0200

    [#1461] Correctly handle DefaultChannelGroup.write(..) of ByteBuf and ByteBufHolder

commit e06fcdbc6a162f085b77e25bed1f847026cfd3ea
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jun 20 16:07:36 2013 +0200

    [#1475] Correctly handle writes with empty MessageList in SslHandler

commit ad73dce7a1bc8927ac1e46bc320dfdae68e5c1b0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jun 20 15:42:50 2013 +0200

    [#1464] Make sure the ChannelPromise for writes is notified while using SslHandler

commit cfb3b977a1d65e8e0805b37ca243681a9d93a4b7
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 20 21:27:49 2013 +0900

    Fix the catastrophic failure caused by AdaptiveRecvByteBufAllocator.getSizeTableIndex()

commit a2f232720b4cb64c340f81d15eb445925fd66047
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 20 18:38:11 2013 +0900

    Make AdaptiveRecvByteBufAllocator's lookup table simpler / Optimize buffer size normalization
    
    - No need to have fine-grained lookup table because the buffer pool has
      much more coarse capacities available
    - No need to use a loop to normalize a buffer capacity

commit dba3aa2d4f59b6d7a93cb1fcaee61cd83e3342e7
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 20 18:32:24 2013 +0900

    Add io.netty.noResourceLeak option to microbench

commit c07b0cac70064c081d76e9f9f1990a4e40e0e7ff
Author: Andrej Golovnin <andrej.golovnin@googlemail.com>
Date:   Sun Jun 16 21:48:00 2013 +0200

    Adds port to the host header value. Due to http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.23 the port should be added if it differs from the default port. To simplify the code we just always add the port.

commit c86155e4d4bb0286cdd0298ec4c1e88a7a19d020
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Mon Jun 17 20:53:57 2013 -0700

    SPDY: replace exception in SpdyHeaderBlockZlibEncoder with EMPTY_BUFFER

commit a969613540833a16d439c6c76ef5fd027fb8efaf
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 20 17:21:47 2013 +0900

    Merge ChannelInboundConsumingHandler into SimpleChannelInboundHandler
    
    - SimpleChannelInboundHandler now has a constructor parameter to let a
      user decide to enable automatic message release. (the default is to
      enable), which makes ChannelInboundConsumingHandler of less value.

commit bfc9c6d80d3623b0bcaf4997d3ee941027f2a1e8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jun 14 21:44:30 2013 +0200

    Add ChannelInboundConsumingHandler
    
    ..which is useful when the handler is placed at the last position of the
    pipeline because it releases the received messages automatically.

commit 6c5c119f8cb1c5795b43ab73ccc54ad7ad5b37a3
Author: Tony Rice <tony@tonyrice.me>
Date:   Wed Jun 19 12:19:57 2013 -0500

    Fix incorrect parameter validation in DefaultFileRegion

commit dc6e2cd62537ce1b60ccf9e7ad09efb04f155d40
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 20 15:51:56 2013 +0900

    Make AbstractMemoryHttpData generate less garbage

commit 58c33d71db9efd02feafc32a845bbb3ea0c9d16d
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 20 15:45:47 2013 +0900

    Fix another compilation error

commit 39d71440e1581e9a318dd7ee81edb43d8e6a2ff1
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 20 15:23:51 2013 +0900

    Fix checkstyle

commit 96c5ab62e66975f01d82ac9a913f4457273893fb
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 20 15:19:46 2013 +0900

    Fix IndexOutOfBoundsException raised by JZlibEncoder.encode()
    
    - Fixes #1471

commit c7038ed8d6e3cc8b7aa2b744c3146f1a1cfe86a3
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 20 15:00:35 2013 +0900

    Fix a compilation error

commit b6fdac7df30697a5ba94897c1bea647a76d04b15
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 20 14:46:53 2013 +0900

    Remove unnecessary logging handler - ByteLoggingHandler and MessageLoggingHandler / Extensible log message formatiing

commit 63403884f71250f61d59fde80c9f7d38911f5d00
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 20 14:25:10 2013 +0900

    Make sure PlatformDependent.isRoot0() works fine in Android
    
    .. by swallowing ErrnoException raised by process.destroy().
    
    Fixes #1472

commit 32aa6616044076b3c569a27f873f11695f08887d
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jun 19 20:41:10 2013 +0900

    Make sure PlatformDependent.maxDirectMemory() works on Android
    
    - Fixes #1451

commit 952e7bbec706f655397438ec481dad4363a9245f
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jun 19 11:46:01 2013 +0900

    Remove cruft

commit 6f86f38ae973279c1278f07ea22df66fc7e6273c
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jun 19 11:45:31 2013 +0900

    Fix IllegalStateException triggered by a successful connection attempt
    
    - Fixes #1467
    - Provide more information about the tasks and promises on exception for easier debugging

commit 8570c717addb242014fd9aab08e1b6b62aa1bfa8
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 18 17:00:28 2013 +0900

    Upgrade to javassist 3.18.0-GA

commit f0ad07973797592b741dd97c6137b2097bc71b5e
Author: Luke Wood <luke@lwood.me.uk>
Date:   Mon Jun 17 20:35:17 2013 +0100

    SCTP: Reduce object allocation overhead and fix receive buffer allocation
    
    There are a couple of changes here all related to making the SCTP
    transport less garbage-heavy:
    
    - Remove the SctpNotificationEvent and just passes along the JDK NIO
      Notification, as passing the Notification and always null inside a
      wrapped object seemed a little bit superfluous
    - Apply @trustin's changes to receive buffer allocation to SCTP
      transport, and also makes the SCTP transport use the configured buffer
      allocator rather than always creating a direct buffer (which seems
      like a bug)

commit 0d9aecbbc1a9cd70a9225d686f6378b61d0c59ff
Author: Mike Schore <mschore@twitter.com>
Date:   Sun Jun 16 23:01:56 2013 -0700

    SPDY: better encapsulation of header encoding/decoding

commit 14f2e29af9cb23021facc075c38dd42cb8ff678b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jun 16 16:53:03 2013 +0200

    [#1450] Fix examples in ReplayDecoder javadocs

commit cce74efded455f042f3d86789b2f76c980dcc0ea
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jun 16 14:25:02 2013 +0200

    [#1448] Don't print failure if VoidChannelPromise is used

commit 6a9f965f9bf4a486c5dfc1ff013e1225df1fbecf
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jun 14 07:07:33 2013 +0200

    Introduce new utility class calles ReferenceCountUtil and move utility methods from ByteBufUtil to it.
    
    The ones in ByteBufUtil were marked as @deprecated

commit 4bf5003f76c8fb5dc47eea713423585fc5646c30
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jun 14 06:41:27 2013 +0200

    Don't release messages before throw UnsupportedOperationException, as the caller method will take care

commit a5871dfd86378bfd4e1b8f450d5e2e2a61991aaf
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 14 12:55:15 2013 +0900

    [maven-release-plugin] prepare for next development iteration

commit f5377cc8d7a5f8a32bfd5ad54b3caa03fe176f2f
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 14 12:55:05 2013 +0900

    [maven-release-plugin] prepare release netty-4.0.0.CR5

commit 0da48e7e7f3e5e510b272442a391b26566587fa3
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 14 12:14:45 2013 +0900

    Determine the default number of heap/direct arenas of PooledByteBufAllocator conservatively
    
    - Fixes #1445
    - Add PlatformDependent.maxDirectMemory()
    - Ensure the default number or arenas is decreased if the max memory of the VM is not large enough.

commit fe40d4b67f65dc31b747f6282463f50bdcfa151e
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 14 11:15:46 2013 +0900

    Make sure writing to a closed channel does not trigger an UnsupportedOperationException
    
    - Fixes #1442

commit 25c51279cfc83830f7a0fa94c062702f8dd38a53
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 14 10:47:31 2013 +0900

    Revert "[#1442] Make sure closing the channel will not cause an UnsupportedOperationException"
    
    This reverts commit a1a86b9de48e4696e3496904dd972336f57b4a0b because the
    semantic of ctx.isRemoved() is confusing to a user - why is
    ctx.isRemoved() false when handlerRemoved() is invoked? A better
    solution would be check if the connection is inactive and mark the
    promise as failure before attempting to write anything.

commit 30bfb989c1ea7433150651990cfc4dcdf63d7f9e
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 14 10:44:22 2013 +0900

    Fix memory leak

commit a0c082497a22a34e5cd4117c1205d61bd153e0d6
Author: Trustin Lee <t@motd.kr>
Date:   Fri Jun 14 10:21:41 2013 +0900

    Remove unused exception classes

commit 86e95dd7ac91b618c55b0c30482becb61ea1592b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jun 13 21:41:55 2013 +0200

    Make sure the exception is thrown when it happens during test

commit 8edee3272a086a57c9ae2cdba7eba5bea436c64f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jun 13 20:56:17 2013 +0200

    More javadoc fixes

commit dc070a00b228a5a4356db0a79430a5cb035d6012
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jun 13 20:50:21 2013 +0200

    Deprecate IncompleteFlushException as its not used anymore

commit 9100256a567761da87acbc7be79d3b28ef975ac3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jun 13 20:49:05 2013 +0200

    Javadocs cleanup

commit 0e16b22aa1dddced62e025f4dfc0a1ccd52720a4
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jun 13 20:48:54 2013 +0200

    Deprecate NoSuchBufferException as it's not used anymore

commit a1a86b9de48e4696e3496904dd972336f57b4a0b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jun 13 18:10:56 2013 +0200

    [#1442] Make sure closing the channel will not cause an UnsupportedOperationException

commit e5ca6518ba963c1906d3c928404f28e055df085a
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 13 17:02:32 2013 +0900

    [maven-release-plugin] prepare for next development iteration

commit 381063e09c4ea3c756048fd88a603aea6ede35cc
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 13 17:02:19 2013 +0900

    [maven-release-plugin] prepare release netty-4.0.0.CR4

commit f002d539e1a22aedd2afe48f68d1540633be6a58
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 13 16:56:50 2013 +0900

    Upgrade dependencies

commit fa277eda200228dbef1de9317184a6dc8b1945a6
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 13 15:24:19 2013 +0900

    Fix reported leaks

commit 427d9c4bf237cede1f86536edb98d5698237af8d
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 13 15:18:11 2013 +0900

    Fix test failures and reported leaks

commit 01d9f10af680166880fc175e7d58a35b4830f201
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 13 14:43:39 2013 +0900

    Remove the volatile modifiers where they are unnecessary

commit ef21ab62bba07c299c4d0fb0213a9f94f5c7a35e
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 13 14:24:38 2013 +0900

    Simplify hello world content generation

commit ca1a37a3b38bf1f9b8bccf16ae982ab05e2ca465
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 13 14:21:56 2013 +0900

    Log correct system property name

commit 32bf3054e12750e88f80161468f3617c1c585004
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 13 14:21:26 2013 +0900

    Prefer direct buffer by default
    
    - Because it's faster in most cases thanks to unsafe

commit 6d1cd0d0cd0f8b4a6b6f088020b8a03aaed626f3
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 13 14:00:15 2013 +0900

    ReferenceCountException -> IllegalReferenceCountException

commit 7eb0f6105dac524a0b48ff5a8b36c91001ce5409
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 13 13:32:47 2013 +0900

    Fix memory leaks

commit f178b8d421ae0f14ca21e3b414da0b0b88b8bc87
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 13 13:23:52 2013 +0900

    Suppress duplicate warning message printed when a message reaches at the end of pipeline

commit 175526b6bde9033e021e113b64e1a0f3f85674aa
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 13 13:14:21 2013 +0900

    Move ReferenceCounted and AbstractReferenceCounted to io.netty.util
    
    - Fixes #1441
    - Also move and rename IllegalBufferAccessException to ReferenceCountException
    - Prettier reference count exception messages

commit 283feda119cf40746da5db0d63cda0a101eaec2e
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 13 12:40:26 2013 +0900

    Reduce even more garbage by exposing ByteBuf.internalNioBuffer()

commit 5131c024fa4852e89d0349149a2cebccff9eda94
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 13 12:15:41 2013 +0900

    Tiny optimization

commit 96380e756c069e5f8ee48dcfa3e0c64fe64a1ecd
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 13 11:51:03 2013 +0900

    Fix test failures introduced by 78d8f05c218cab107255c4dc1a1344aef138d379

commit a403da3042335288bf10f58f9d0a16f7585b4557
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jun 12 10:59:51 2013 +0200

    Rewrite HTTP encoder to use gathering writes

commit 78d8f05c218cab107255c4dc1a1344aef138d379
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 13 10:57:06 2013 +0900

    Make sure that HttpObjectDecoder decodes the last HTTP message without 'Content-Length' header
    
    - Fixes #1410
    - Revert 1e5f266a3c2eb592b55387b4ef187ed0dabbf019 and provide a proper fix with a test

commit 2088d1b491fdfe25fc4d71d2472ead7f770147a9
Author: Trustin Lee <t@motd.kr>
Date:   Thu Jun 13 10:27:10 2013 +0900

    Generate less garbage when performing gathering writes

commit 78c6925921fbbc44261b7480d396bc243f07ca26
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jun 12 23:13:36 2013 +0200

    Clearify when you need to call retain()

commit c6886f9d0e3954c9c32f4f59eb3b9ef204a8ed96
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jun 12 23:02:38 2013 +0200

    Add very simple httpserver example which just respond with Hello World

commit 1e5f266a3c2eb592b55387b4ef187ed0dabbf019
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jun 12 09:56:00 2013 +0200

    [#1410] Make sure we generate a Http response if the server writes back 200 response with empty body and and close the connection

commit d1a3806ebdf8b1272b42fc1c684a5e290bee6a24
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jun 12 09:45:33 2013 +0200

    Make use of gathering writes if a MessageList which only contains ByteBuf msgs is written to a NioSocketChannel

commit 2320a13a4e72d496f03022a0ea27c6f5dce5ca22
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jun 12 08:24:36 2013 +0900

    Better use NoOpTypeParameterMatcher as a class path source
    
    .. because we tries to load it really

commit be695636d23d413009305c2d95adc044da65b851
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jun 12 08:17:17 2013 +0900

    Make JavassistTypeParameterMatcherGenerator.generate() public

commit 3fc6e02f8b122bc2a22b138af3ca768fc98a832f
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jun 12 08:09:11 2013 +0900

    Allow appending classpath to the ClassPool of JavassistTypeParameterMatcherGenerator
    
    - Fixes: #1402
    - Make JavassistTypeParameterMatcherGenerator public
    - Add appendClassPath()

commit 79e236dfc2eebbe025b80bc7b410609c548c8bad
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jun 12 08:00:54 2013 +0900

    Make EventExecutor.shutdownGracefully() return Future
    
    - Also added EventExecutor.terminationFuture()
    - Also fixed type signature problem with Future.add/removeListener()
    - Related issue: #1389

commit fd0084ecfa254bc5f619f50ec50a8cb8e3cc083e
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jun 12 06:50:38 2013 +0900

    Remove the constructors that uses ImmediateEventExecutor from DefaultChannelGroup
    
    .. which is incorrect in my opinion.
    
    + minor cleanup

commit 17492109850e5cd1ba22cacb3e02fc6f705af073
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jun 12 06:40:01 2013 +0900

    Add GlobalEventExecutor
    
    - Related issue: #1389
    - Also extracted SingleThreadEventExecutor.ScheduledFutureTask into a top level class for a reuse

commit 786501d9721e767c89fab029b217a2adead13623
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jun 12 05:03:55 2013 +0900

    Remove unused thread local and its getter

commit 7a1550631d5ee3f87961f53b8842d8ffdf364247
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jun 12 04:24:07 2013 +0900

    Make write operation cancellation while it's in progress
    
    .. which should be useful when writing a large buffer/file

commit 2d7c6f8ee13a87cc33edf2884ed2f6f445982687
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jun 12 04:18:40 2013 +0900

    Make PooledByteBuf recyclable regardless its maxCapacity
    
    - Make AbstractByteBuf.maxCapacity internally mutable so that PooledByteBuf is completely recyclable

commit 9396246fe979e31703dfc915d856e67741390aab
Author: Trustin Lee <t@motd.kr>
Date:   Wed Jun 12 04:07:09 2013 +0900

    "  " -> " " / Cleanup

commit 5b978497f84d6015f41653ce2b8dbedcf18ef6ee
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jun 11 16:24:06 2013 +0200

    Cleanup

commit 341f7757aa1a6046ca0803a9d42904e399e6fc7f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jun 11 16:12:34 2013 +0200

    Fix checkstyle

commit bf046492fb41899a715b9b8e79bee1b6854e40ac
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jun 11 16:02:36 2013 +0200

    [#1439] Fix CompositeByteBuf.nioBufferCount() to return the correct number

commit c3034c896489f76b95ae4517b8f3d86e75e46215
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 11 18:46:39 2013 +0900

    Implement the cancellation of connection attmpe for NIO and OIO transport
    
    - Related issue: #1432
    - Also added test cases to validate the implementation

commit 7a5cf48b8decf2a37a4b2de685e1101bb79c222a
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 11 17:54:35 2013 +0900

    Implement Promise/Future cancellation properly for outbound traffic
    
    - Related issue: #1432
    - Make sure the Promise of a write operation is not cancellable before writing out

commit 41af9a1eb3f9e5c814cc668736a006ee2593b325
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 11 17:46:21 2013 +0900

    Implement cancellation properly for Promise/Future
    
    - Related issue: #1432
    - Add Future.isCancellable()
    - Add Promise.setUncancellable() which is meant to be used for the party that runs the task uncancellable once started
    - Implement Future.isCancelled() and Promise.cancel(boolean) properly

commit 85afdda3ced86f74ea77a7b725b5657cdc1957be
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jun 11 09:12:43 2013 +0200

    Correctly write MessageList which contains more then one message

commit e3ec124ccd88e9f9f7461315ee659a222f9828fd
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jun 11 08:53:14 2013 +0200

    Make sure WebSocketFrameAggregator and HttpObjectAggregator don't leak ByteBufs

commit 16e12b45f8e3e56afcac1989441b07ce44f97154
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jun 11 07:57:35 2013 +0200

    Use Correct NoSuchElementException

commit e4a985f6ac70ed856eba95e4b83c5c207be38768
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jun 11 07:55:41 2013 +0200

    Let MessageList implement Iterable

commit f2f6d68d2e76fd10272949b7726423ddbf6e0377
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jun 10 20:54:17 2013 +0200

    Make sure writing empty ByteBuf will not cause a stavation.
    
    This also fixes [#1436]

commit b1b1a906f066fd5bf4508928a5c9a7574276ac71
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jun 10 18:56:33 2013 +0200

    [#1390] Make sure RxtxChannel does not block forever when reading

commit bf5960e9eb08396b7fdf17aad963f5e0c4dd1557
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 11 00:57:23 2013 +0900

    Fix #1435 and #1436 by reverting 7f7bf304b0b43a1445e68c15ee6f6403c7ca5b9e
    
    Different PooledByteBufs can have the reference to the same PooledChunk (and its ByteBuffer), so it's incorrect not to create a duplicate.

commit 3ce9ab2e72235bf2ae45f57de11803249419cb69
Author: Trustin Lee <t@motd.kr>
Date:   Tue Jun 11 00:00:16 2013 +0900

    Replace the sun.nio.ch.SelectorImpl.selectedKeys with faster one
    
    - Yield much less garbage
    - Slight performance gain (1~2%)

commit c8ca3299324a1e2b9ce501c95715cf10ea70c238
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Tue Jun 4 14:32:11 2013 -0700

    SPDY: update object hierarchy

commit 7f7bf304b0b43a1445e68c15ee6f6403c7ca5b9e
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jun 10 22:07:46 2013 +0900

    Optimize PooledUnsafeDirectByteBuf.newInternalNioBuffer()
    
    - No need to produce garbage

commit d9806c812731481a0066968ca1fa2a308a711009
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jun 10 14:23:40 2013 +0200

    Add javadocs

commit 68c737f0c0823f6a6753e9da2046a25b8285fb40
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jun 10 14:07:25 2013 +0200

    Optimize the way messages are added from one MessageList to another one

commit 383bb80d1ef42b32f8986672269550f37356adb8
Merge: 92bd4d2 6732c67
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jun 10 14:06:53 2013 +0200

    Merge branch 'master' of github.com:netty/netty

commit 92bd4d2fe0e433283ca75426b080dabc987c9328
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jun 10 13:44:01 2013 +0200

    Remove MessageList.remove(*) , MessageList.set(*) and MessageList.add(i,*)

commit 6732c6761bcc06183a71ad676b0110d2d226ab68
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jun 10 19:52:56 2013 +0900

    Recycle PooledByteBuf partially
    
    - Related issue: #1397
    - Resource leak detection should be turned off and the maxCapacity has to be Integer.MAX_VALUE
    - It's technically possible to pool PooledByteBufs with different maxCapacity, which will be addressed in another commit.

commit 7234a00f0da2197958065d8da3a549d469078cd5
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jun 10 19:13:06 2013 +0900

    Add ResourceLeakDetector.ENABLED
    
    .. to provide a way to check if resource leak detection was enabled programmatically.

commit e9c6406819ec569a4dd256df0cf2d18c07543910
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jun 10 11:26:04 2013 +0200

    Remove the AIO transport as NIO is just faster
    
    The AIO transport was added in the past as we hoped it would have better latency as the NIO transport. But in reality this was never the case.
    So there is no reason to use the AIO transport at all. It just put more burden on us as we need to also support it and fix bugs.
    Because of this we dedicided to remove it for now. It will stay in the master_with_aio_transport branch so we can pick it up later again if it is ever needed.

commit 65e4161e637f03b952132b44b8efb83e0b30fd4e
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jun 10 18:20:24 2013 +0900

    Remove an unnecessary empty line

commit fa205defa1897bd0ce6cb6c3d59814624ce09597
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jun 10 18:19:58 2013 +0900

    Simplify the logic for updating OP_WRITE in the NIO transport
    
    - Removed code duplication

commit 3be25694d09c1d45981cda020982e0cde638e4ee
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jun 10 11:14:41 2013 +0200

    Add ChannelHandlerContext.isRemoved() to easily detect the removal of a ChannelHandler while in a method.

commit 9449efb9b2a2c6a2a9a2f7263c2e5ba0437e2475
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jun 10 16:38:24 2013 +0900

    Optimize Recycler.Stack
    
    - No need to use a deque at all
    - Increase the initial capacity so that there's no practical chance of capacity expansion

commit 07858a3bd4b0729c358563c6e61d70b5de1c9b3a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jun 10 08:07:39 2013 +0200

    [#1411] Correctly check for null in AbstractTrafficShapperHandler.read() and so prevent NPE

commit e71a521284359be8a55e7ece5910689f0cfe9ed4
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jun 10 07:58:59 2013 +0200

    [#1414] Use gathering writes in AbstractMemoryHttpData if the buffer is backed by multiple ByteBuffers
    
    * This fix the bug which caused an UnsupportedOperationException when renameTo(...) was called and the underlying ByteBuf was backed by multiple ByteBuffers

commit fa6999cd4285d12e01e93c96d4141ec483dfa209
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jun 10 07:54:53 2013 +0200

    [#1425] Allow to access the EventLoopGroups via the Bootstraps

commit d9af92f354776d54ecd6d392b7343543bc4b7181
Author: Wolfgang Profer <wolfgang@profer.org>
Date:   Fri Jun 7 21:41:47 2013 +0200

    [#1430] Fixed byte order problem on little endian platforms that support Unsafe but not unaligned memory access.

commit f2d8a745b156d7002044076e17346955795a114d
Author: Derek Troy-West <derek@troywest.com>
Date:   Wed Jun 5 18:55:03 2013 +1000

    [#1422] ReadOnlyByteBuffer.isWritable() should return false

commit ccd43e0cdafc2048e4b56123123839fd162b45ea
Author: Trustin Lee <t@motd.kr>
Date:   Mon Jun 10 16:18:22 2013 +0900

    Fix compilation error

commit 14158070bf8b3f831702061ffd657c84179fc639
Author: Trustin Lee <t@motd.kr>
Date:   Tue May 28 20:40:19 2013 +0900

    Revamp the core API to reduce memory footprint and consumption
    
    The API changes made so far turned out to increase the memory footprint
    and consumption while our intention was actually decreasing them.
    
    Memory consumption issue:
    
    When there are many connections which does not exchange data frequently,
    the old Netty 4 API spent a lot more memory than 3 because it always
    allocates per-handler buffer for each connection unless otherwise
    explicitly stated by a user.  In a usual real world load, a client
    doesn't always send requests without pausing, so the idea of having a
    buffer whose life cycle if bound to the life cycle of a connection
    didn't work as expected.
    
    Memory footprint issue:
    
    The old Netty 4 API decreased overall memory footprint by a great deal
    in many cases.  It was mainly because the old Netty 4 API did not
    allocate a new buffer and event object for each read.  Instead, it
    created a new buffer for each handler in a pipeline.  This works pretty
    well as long as the number of handlers in a pipeline is only a few.
    However, for a highly modular application with many handlers which
    handles connections which lasts for relatively short period, it actually
    makes the memory footprint issue much worse.
    
    Changes:
    
    All in all, this is about retaining all the good changes we made in 4 so
    far such as better thread model and going back to the way how we dealt
    with message events in 3.
    
    To fix the memory consumption/footprint issue mentioned above, we made a
    hard decision to break the backward compatibility again with the
    following changes:
    
    - Remove MessageBuf
    - Merge Buf into ByteBuf
    - Merge ChannelInboundByte/MessageHandler and ChannelStateHandler into ChannelInboundHandler
      - Similar changes were made to the adapter classes
    - Merge ChannelOutboundByte/MessageHandler and ChannelOperationHandler into ChannelOutboundHandler
      - Similar changes were made to the adapter classes
    - Introduce MessageList which is similar to `MessageEvent` in Netty 3
    - Replace inboundBufferUpdated(ctx) with messageReceived(ctx, MessageList)
    - Replace flush(ctx, promise) with write(ctx, MessageList, promise)
    - Remove ByteToByteEncoder/Decoder/Codec
      - Replaced by MessageToByteEncoder<ByteBuf>, ByteToMessageDecoder<ByteBuf>, and ByteMessageCodec<ByteBuf>
    - Merge EmbeddedByteChannel and EmbeddedMessageChannel into EmbeddedChannel
    - Add SimpleChannelInboundHandler which is sometimes more useful than
      ChannelInboundHandlerAdapter
    - Bring back Channel.isWritable() from Netty 3
    - Add ChannelInboundHandler.channelWritabilityChanges() event
    - Add RecvByteBufAllocator configuration property
      - Similar to ReceiveBufferSizePredictor in Netty 3
      - Some existing configuration properties such as
        DatagramChannelConfig.receivePacketSize is gone now.
    - Remove suspend/resumeIntermediaryDeallocation() in ByteBuf
    
    This change would have been impossible without @normanmaurer's help. He
    fixed, ported, and improved many parts of the changes.

commit fe711f65fb125ed946dbccd5aa7b7275ab6b72bc
Merge: bc20107 cf757f1
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Wed Jun 5 07:45:05 2013 -0700

    Merge pull request #1421 from jpinner/spdy_fix_stalled_streams_master
    
    SPDY: always enqueue data frames if stream is stalled

commit cf757f17f6c71bf7fa3b3def62aba92074c7448c
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Tue Jun 4 23:33:06 2013 -0700

    SPDY: always enqueue data frames if stream is stalled

commit bc20107b688db0107b1a859306d0b5036f646a3b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu May 30 20:24:11 2013 +0200

    Use correct value to disable/enable direct arenas in PooledByteBufAllocator

commit 89f1f3f4d1a5d8ba63fe8950a3ac1f958e070397
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon May 27 15:45:34 2013 +0200

    [#1399] DefaultChannelHandlerPipeline.firstContext() should return null if no user handlers are in in the pipeline

commit f7931af704cb0baeb9ce5ac7b81a4f5580b110c0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat May 25 14:35:22 2013 +0200

    Re-add Unsafe.voidPromise() which can be used for Unsafe operations for which no notification should be done [#1375]

commit d9c700e9fed0ea964eeabc46809aeb76425c2a5f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri May 24 23:18:14 2013 +0200

    [#1392] Fix bug where SslHandler returned wrong value for getCloseNotifyTimeoutMillis()

commit aa96b4b2866bfd9faaa9f6e11c2750a4b1d2d606
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri May 24 19:58:55 2013 +0200

    No need to create temporary arrays

commit f5dc482a593a426b1c28d0825641d896102358bf
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri May 24 12:50:04 2013 +0200

    No need to clear buffer as it is cleared later anyway and only update interestedOps if needed

commit d31ccebd620d3fa84221093166016d9c4d0b3583
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri May 24 12:49:21 2013 +0200

    Make sure that setAutoRead(false) has a direct effect and only update interestedOps if needed

commit 252bd2585556087c74ae29cfc80dee78f13da2c4
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri May 24 12:46:30 2013 +0200

    Only call key.interestedOps() if needed

commit 0e8fb215540d1b6bdeaabf8d6bf1b622313f9f33
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri May 24 09:07:17 2013 +0200

    Some optimizations to the http codec

commit a3b4cdd614d0ecd20c1b23758df969df0ca410a4
Author: Trustin Lee <t@motd.kr>
Date:   Fri May 24 11:54:44 2013 +0900

    Fix StackOverflowError in LocalEcho.doBeginRead() when the peer channel keeps writing data
    
    - Fixes #1380

commit 5398792ffa19829bfdc7e9ac02ebdb8952c84032
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu May 23 17:17:21 2013 +0200

    [#1388] Correctly break the loop on exceptions

commit 50ac0cdfcb35907fa38df61ff23708acd592d510
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu May 23 16:59:03 2013 +0200

    [#1388] Ensure AbstractNioMessageChannel based Channels will call fireInboundBufferUpdated() soon enough to release resources

commit 83dcf829d6d46112f09097a3b81393b5c5805f97
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu May 23 11:39:50 2013 +0200

    [#1384] Cache HttpHeaderDateFormat in ThreadLocal

commit 9c925b104aec2105649bf7b4d65400d6caeb817f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu May 23 07:42:01 2013 +0200

    [#1385] Fix NPE which was triggered if a write was executed but the HeadHandler not init yet

commit 1801ecfe30fc1c7e61c7cf38456d6e0b7d1c3811
Author: shreyharia <shrey.haria@gmail.com>
Date:   Wed May 22 14:57:04 2013 +0530

    Update HttpHeaderDateFormat.java
    
    Output for "E, dd-MMM-y HH:mm:ss z"
    on java 1.6 I get: Wed, 22-May-13 09:11:41 GM
    on java 1.7 I get: Wed, 22-May-2013 09:11:14 GMT
    
    To be uniform on both jdks.. modified it to
    "E, dd-MMM-yy HH:mm:ss z"
    
    learnt from - http://stackoverflow.com/questions/16687298/simpledateformat-different-behaviour-depending-on-java-version

commit 9a7addbebe97d9cc7825c1d097c35ac191db92dd
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue May 21 20:27:16 2013 +0200

    No need to use NioSocketChannel.class directly

commit 548540bc2de34d776206f32f15218bdcadb36c19
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue May 21 20:19:00 2013 +0200

    Fix a which could cause data corruption when using AioSocketChannel.
    
    This was because it was possible to have the JDK read into a wrong buffer region if the user called discardReadBytes() later. Fixes #1377

commit c1cbe8bec399efa8b5dc6d26397a8fc81767ed5e
Author: Luke Wood <luke@lwood.me.uk>
Date:   Mon May 20 17:31:04 2013 +0100

    Clarify SnappyFramedDecoder javadoc to make it as clear as possible regarding the default settings

commit 81e3c1719a2f7e5e9cc80d29e879fd0bfa97b866
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat May 18 09:59:13 2013 +0200

    [maven-release-plugin] prepare for next development iteration

commit 99caefdf398baca4fefaab3d0f821644630aa233
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat May 18 09:57:11 2013 +0200

    [maven-release-plugin] prepare release netty-4.0.0.CR3

commit 50433f7b9a016c153cbd454d831dfe97374bc07a
Author: Trustin Lee <t@motd.kr>
Date:   Sat May 18 05:50:58 2013 +0900

    Make sure successful SslHandshakeCompletionEvent is a singleton
    
    - Related: #1373
    - This commit is an amendment to 2a7bea2ad3102d7290194c5e72fdd15aa9a6e973

commit 620c3e025ac5c5aaedca94f3e2aa2cad53434cc3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri May 17 22:16:29 2013 +0200

    Just some tiny javadoc fixes

commit bd2230961d0db207cfdc848b4e1012bff71220d4
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri May 17 22:09:11 2013 +0200

    Fix checkstyle

commit aaca9df99a941d5d6f4de2d5118c62d24e0c952f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri May 17 22:00:55 2013 +0200

    @Deprecate a method as it's not needed anymore

commit 8a5e249d6f93699c4222240928a9180ee327727d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri May 17 21:57:47 2013 +0200

    [#1374] Allow users to all all subprotocols by using * as wildcard

commit abb4e20d0b2a32a9225219be48b7024646234f95
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri May 17 21:35:01 2013 +0200

    [#1369] Move ImmediateEventExecutor to common and let it access via a static
    
    * Also fix a bug there to return a correct implementation of ProgressivPRomi
      ImmediateEventExecutor

commit a8830aee4252864370167c8ed72e1ef79ef3824d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri May 17 21:19:59 2013 +0200

    [#1369] Move ImmediateEventExecutor to common and let it access via a static public field
    
    * Also fix a bug there to return a correct implementation of ProgressivPRomise to work with the
     ImmediateEventExecutor

commit 6942dba8555d11d2c3ada35e80e4383ae853c7ba
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri May 17 20:55:56 2013 +0200

    [#1363] Make sure ChannnelConfig.setAutoRead(false) will stop read from socket directly

commit 2a7bea2ad3102d7290194c5e72fdd15aa9a6e973
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri May 17 19:39:52 2013 +0200

    [#1373] Make SslHandshakeCompletionEvent constructor public

commit 699ef0784ef7527b8dc51026033d33fc86bc0230
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed May 15 15:10:41 2013 +0200

    [#1317] Allow to use VoidPromise for flush(...), write(...) and sendFile(...)
    
    * This also move rename Channel.Unsafe.voidFuture() to ChannelPropertyAccess.voidPromise()

commit fd1d31e7d8c8e218a2e283d2bde32ef3f977cbdd
Author: Trustin Lee <t@motd.kr>
Date:   Fri May 17 19:20:46 2013 +0900

    Remove unnecessary inEventLoop() checks in Channel.Unsafe
    
    .. because HeadHandler in the pipeline always ensures those methods are always invoked from the correct I/O thread

commit 41f5d5650d6a9e358f27f5bcfa60fd319b25d43b
Author: Trustin Lee <t@motd.kr>
Date:   Fri May 17 18:32:27 2013 +0900

    Add Javadoc to tarball / Upgrade maven-compiler-plugin
    
    - Fixes #1360

commit e58af1bc94fa614d5246662f40aa7e13d87782b0
Author: Trustin Lee <t@motd.kr>
Date:   Fri May 17 17:58:34 2013 +0900

    Readability / Fix inception year

commit 3a5aa1200028bbd0323306a40bd29276fa9b6e2a
Author: kxbmap <kxbmap@gmail.com>
Date:   Thu May 16 07:52:02 2013 +0900

    Add LengthFieldPrepender.lengthAdjustment parameter

commit f92cfba388bf97909236c0fcdf098c93f89aecde
Author: Trustin Lee <t@motd.kr>
Date:   Fri May 17 16:54:47 2013 +0900

    Remove DefaultCompositeByteBuf.lastAccessed and use binary search instead
    
    - Fixes #1364
    - Even if a user creates a duplicate/slice, lastAccessed was shared between the derived buffers and it's updated even by a read operation, which made multithread access impossible

commit 7140e4e63bee37617466408e63e9c4ec9fb8d686
Author: Trustin Lee <t@motd.kr>
Date:   Fri May 17 11:07:53 2013 +0900

    Test if ChannelHandler.handlerRemoved() is called on closure / Reduced timeout

commit e1a378aa03034541c1269eab4077743f02ec845f
Author: Trustin Lee <t@motd.kr>
Date:   Fri May 17 10:54:20 2013 +0900

    Clean up DefaultChannelPipelineTest
    
    - Use the local transport in a correct way (i.e. no need to trigger channelActive et al by ourselves)
    - Use Promise/Future instead of CountDownLatch where they simplifies

commit f841056752414939969bbe3780aab899578d82cb
Author: Luke Wood <luke@lwood.me.uk>
Date:   Thu May 16 10:48:19 2013 +0100

    Fix SnappyFramedDecoder checksum validation and add a pair of suitable unit tests

commit 2040b0784990cad529a8b9c5d3878d483348eb16
Author: Trustin Lee <t@motd.kr>
Date:   Thu May 16 19:41:02 2013 +0900

    Free the cleared buffer as early as possible / Better naming

commit dc13b68632957faf6e2e3a57a0e40c11cce45366
Author: Trustin Lee <t@motd.kr>
Date:   Thu May 16 19:32:39 2013 +0900

    Make sure ChannelHandler.handlerRemoved() is always invoked
    
    - Fixes #1366: No elegant way to free non-in/outbound buffers held by a handler
    - handlerRemoved() is now also invoked when a channel is deregistered, as well as when a handler is removed from a pipeline.
    - A little bit of clean-up for readability
    - Fix a bug in forwardBufferContentAndRemove() where the handler buffers are not freed (mainly because we were relying on channel.isRegistered() to determine if the handler has been removed from inside the handler.
    - ChunkedWriteHandler.handlerRemoved() is unnecessary anymore because ChannelPipeline now always forwards the content of the buffer.

commit 670d3f53a8189f3c062de48a9fc5e4c0d76abe12
Author: Trustin Lee <t@motd.kr>
Date:   Thu May 16 16:18:01 2013 +0900

    Make uninitialization code in DefaultChannel easier to understand
    
    .. by fixing bad / outdated method names

commit a331c87a7ae6ef3fdefe0d22a3c8a8a03c57148d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue May 14 15:24:01 2013 +0200

    [#1358] Fix Encoding of multipart attribute names and filenames for non ASCII  chars

commit dbad71366dae6e6d5eab4a8006e228551f1e981d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue May 14 14:35:06 2013 +0200

    [#1359] Fix incorrect response when 100-continue is needed

commit feab823bfb8a180c537454ee00024a3641d733bc
Author: Andrei.Pozolotin <Andrei.Pozolotin@gmail.com>
Date:   Mon May 13 09:38:34 2013 -0500

    use barchardt-udt 2.3.0 release. This fixes #1290 and 1329

commit 57a459d970ab6482267e9c7f270e751403a524e9
Author: Andrei Pozolotin <Andrei.Pozolotin@gmail.com>
Date:   Sun May 12 14:48:22 2013 -0500

    updated udt and connection test

commit 55df4fc24620bb8c4857aa4364fccfa5ff3b4a03
Author: Edwin Mol <edwin@siteware.be>
Date:   Thu May 2 20:13:32 2013 +0200

    added UDT client server testcase

commit 5c187ca02d6f75593100ef4a14b33b559c0bb5bd
Author: Edwin Mol <edwin@siteware.be>
Date:   Thu May 2 20:08:50 2013 +0200

    added UDT Client-Server Test

commit c3b0a9c6b8b40756dc866a11d71281e70b83506b
Author: Trustin Lee <t@motd.kr>
Date:   Mon May 13 16:03:00 2013 +0900

    Fix duplicate invocation of same plugins due to needless fork of maven-source-plugin
    
    - Fixes #1355

commit f4ad6173ca704acdd7e4dfdaaf5f26dc0bff1419
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun May 12 17:01:12 2013 +0200

    [#1299] Make sure a handshake error will not trigger fireExceptionCaught two times

commit 3268d6fc2ebfbd83d2f8574607316a6e990cb1f8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu May 9 21:12:36 2013 +0200

    [#1352] WebSocketFrameAggregator should only throw TooLongFrameException once per complete frame

commit c8de4f03f10a2f42af1d2aa3693434bae56d93bf
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu May 9 20:11:34 2013 +0200

    [#1007] Make sure the current message is only reset on LastHttpContent

commit 268b059ebb87749a5f9c0c172d00a32b5746a50a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu May 9 19:44:39 2013 +0200

    [#1007] HttpObjectAggregator should only throw one TooLongFrameException per full HTTP message

commit 80f4c0b33448490b8b6c8800d8e67cb8739f648a
Author: Trustin Lee <t@motd.kr>
Date:   Thu May 9 15:23:56 2013 +0900

    Merge SnappyChecksumUtil into Snappy and make calculateChecksum() public / Overall clean up

commit c406647bb2f55c495e79b8a4914836976bac7a0f
Author: Trustin Lee <t@motd.kr>
Date:   Thu May 9 08:51:01 2013 +0900

    Use short for DefaultPromise.waiters for less memory consumption

commit c43950a03f82e65b692f228f35ce24b7176ff3de
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed May 8 18:19:51 2013 +0200

    [maven-release-plugin] prepare for next development iteration

commit ae765020402f19a010f88bbed8b65791df75c9f5
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed May 8 18:19:38 2013 +0200

    [maven-release-plugin] prepare release netty-4.0.0.CR2

commit 18bda09d6c7d0b7dcd0f585c46a4b4feb6e1b8d5
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed May 8 06:57:52 2013 +0200

    Allow to recover from exception triggered by accept() more easily
    
    This is done by stop accept() new sockets for 1 seconds
    Beside this this commit also makes sure accept() exceptions of OioServerSocketChannel trigger
    the fireExceptionCaught(...). The same is true fo the AioServerSocketChannel.

commit b65c8716a562147a410ff606b61a61dfb9c03f19
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed May 8 17:20:44 2013 +0200

    Correctly handle multipart disposition

commit 6c0b2be41234c6593d1ca8283f1a766ecc861026
Author: Frederic Bregier <nomail@nomail.com>
Date:   Wed May 8 12:34:02 2013 +0200

    Same fix for Netty V4 for issue #1313
    
    Remove encodeAttribute/decodeAttribute for Multipart element
    Replace where necessary by cleanString (to remove '"') on name part (not
    on value part)

commit c07234ed7253bcc70e56db5c74cf34a649fa4568
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed May 8 15:11:08 2013 +0200

    [#1346] Make sure HttpPostRequestEncoder.nextChunk() return LastHttpContent once all chunks are read

commit e48bc9c0860e71bf91e2bfd7397483ae82ac6fef
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed May 8 10:11:26 2013 +0200

    [#1344] Fix race condition in DefaultChannelPromise / DefaultChannelProgressivePromise which could lead to listeners that are not notified

commit 5dd867ee239581e8ba24e5b66df37aa3855ae75d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue May 7 14:54:27 2013 +0200

    [#1340] use full url in comment

commit 6cbc6e9886deb080b8d565bde9d79b0666431296
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue May 7 09:42:02 2013 +0200

    [#1340] Log SslExceptions thrown by SslEngine.closeInbound() with debug level

commit 97bdabad9c62eecb72555911cfa9f74570204943
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon May 6 21:36:30 2013 +0200

    [#1293] Fix IllegalBufferAccessException in HttpPostRequestDecoder
    
    * Also let HttpPostRequestDecoder extends Iterator and let its Exceptiosn extend DecoderException

commit a170f05b4bf7cb4b7bed244275fc90f978654988
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon May 6 15:00:18 2013 +0200

    [#1293] Fix handling of chunked requests in HttpPostRequestEncoder and the multipart examples

commit a4a92ee14aa7796ad2aae9c12a7be6f6affb1517
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon May 6 10:29:14 2013 +0200

    Try to reproduce #1335 without luck

commit 17e50491946812a528958c8118d1171c32b109de
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon May 6 10:27:06 2013 +0200

    Fix examples

commit 108c7d9b448da41964b167178d088db513013cea
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon May 6 07:46:26 2013 +0200

    No need to pass the next BufType to the constructor

commit c230afaed17fd1c3134f0d5448e0b5a8f5d69a0d
Author: Frederic Bregier <nomail@nomail.com>
Date:   Sun May 5 17:05:24 2013 +0200

    Fix for #1313 and #1332
    
    Add TEXTPLAIN in HttpHeaders
    Remove all coding/decoding Attribute using URL scheme for name and
    attribute
    Add text/plain to contant-type

commit 128bbe322551f88b299c563a9a502b298d6e0a10
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Thu May 2 17:17:36 2013 -0400

    SPDY: refactor SpdyHttpDecoder to allow subclasses to access messageMap

commit 7b854072d43b2d0df0bc6c9ad294661a7d992c35
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu May 2 13:22:31 2013 +0200

    [#1327] Fix javadoc diagram for new api

commit d8a250aba0bb7e75d7ec5694ad38d33ba77ea2f0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu May 2 08:43:29 2013 +0200

    Log with info level and not with warn

commit 0c5bea8b30bddab46048d604cb8e1d6e751018fb
Author: Trustin Lee <t@motd.kr>
Date:   Thu May 2 00:37:02 2013 +0900

    Fix style

commit e05fdb35142f04764acdde6001d05b0e1f6b87c8
Author: Andrei.Pozolotin <Andrei.Pozolotin@gmail.com>
Date:   Wed May 1 10:20:18 2013 -0500

    Update OSGI Test Suite.

commit 2a15f658d67309c9601c33048e6db1d7b9f8d9bf
Author: Trustin Lee <t@motd.kr>
Date:   Wed May 1 20:43:23 2013 +0900

    Ensure UnreleasableByteBuf does not expose the wrapped buffer to the caller
    
    - Fixes #1324

commit 1e0c83db23eb4ef70b5f9cc911942ee5330ce746
Author: Trustin Lee <t@motd.kr>
Date:   Wed May 1 17:04:43 2013 +0900

    Introduce AddressedEnvelope message type for generic representation of an addressed message
    
    - Fixes #1282 (not perfectly, but to the extent it's possible with the current API)
    - Add AddressedEnvelope and DefaultAddressedEnvelope
    - Make DatagramPacket extend DefaultAddressedEnvelope<ByteBuf, InetSocketAddress>
    - Rename ByteBufHolder.data() to content() so that a message can implement both AddressedEnvelope and ByteBufHolder (DatagramPacket does) without introducing two getter methods for the content
    - Datagram channel implementations now understand ByteBuf and ByteBufHolder as a message with unspecified remote address.

commit bc96c4b7b36d96ce9a290905ea2b9cdb15f94eca
Author: Trustin Lee <t@motd.kr>
Date:   Wed May 1 16:56:34 2013 +0900

    Fix a bug where SingleThreadEventExecutor sets its internal state flag too early during termination

commit 2e0dd65250be7d04f2429cecbc8de31c2e30cb9c
Author: Trustin Lee <t@motd.kr>
Date:   Wed May 1 11:14:21 2013 +0900

    Fix a bug where the unpooled buffer returned by the pooled allocator reports an incorrect allocator

commit 23d017849429c18e1890b0a5799e5262df4f269f
Author: Trustin Lee <t@motd.kr>
Date:   Sat Apr 27 16:39:19 2013 +0900

    Introduce EventExecutor.shutdownGracefully() that deprecates shutdown()
    
    shutdownGracefully() provides two optional parameters that give more
    control over when an executor has to be shut down.
    
    - Related issue: #1307
    - Add shutdownGracefully(..) and isShuttingDown()
    - Deprecate shutdown() / shutdownNow()
    - Replace lastAccessTime with lastExecutionTime and update it after task
      execution for accurate quiet period check
      - runAllTasks() and runShutdownTasks() update it automatically.
      - Add updateLastExecutionTime() so that subclasses can update it
    - Add a constructor parameter that tells not to add an unncessary wakeup
      task in execute() if addTask() wakes up the executor thread
      automatically.  Previously, execute() always called wakeup() after
      addTask(), which often caused an extra dummy task in the task queue.
    - Use shutdownGracefully() wherever possible / Deprecation javadoc
    - Reduce the running time of SingleThreadEventLoopTest from 40s to 15s
      using custom graceful shutdown parameters
    
    - Other changes made along with this commit:
      - takeTask() does not throw InterruptedException anymore.
        - Returns null on interruption or wakeup
      - Make sure runShutdownTasks() return true even if an exception was
        raised while running the shutdown tasks
      - Remove unnecessary isShutdown() checks
      - Consistent use of SingleThreadEventExecutor.nanoTime()
    
    Replace isWakeupOverridden with a constructor parameter

commit 9128d4f16a8ccb102bbf863b88e6be8e5574333d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Apr 30 21:11:41 2013 +0200

    Fix checkstyle

commit ee433ea911ac9254a46c25f6d66dbd56490f0be2
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Apr 30 20:55:50 2013 +0200

    Fix checkstyle

commit a48ed71e86d00726b5bc5a6418b9693af5b8e603
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Apr 30 20:41:50 2013 +0200

    Fix type in class name

commit 57a8a9fd983a6030de81c99c7b4518ac40d9195e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Apr 30 20:41:20 2013 +0200

    [#1321] HttpHeaders.removeTransferEncodingChunked(..) must handle the value in case insensitive manner

commit 6646db171ecc66b33ea81548b05e7434e27d212b
Author: Trustin Lee <t@motd.kr>
Date:   Tue Apr 30 18:30:17 2013 +0900

    Use tryFailure() to notify registration failure to avoid IllegalStateException
    
     .. which is raised when the registration promise has been failed already due to an internal error in the pipeline.
    
    - Fixes #1319

commit 61327b5871ba9c4ef0c5a0ccab5af1f47264d1be
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Apr 30 07:17:07 2013 +0200

    Simplify a bit

commit 4bac0443e828863c3c4456f31fe6995e9f3bd9cc
Author: kerr <hepin1989@gmail.com>
Date:   Sun Apr 28 11:01:59 2013 +0800

    update to barchart-udt 2.2.6
    * which fix https://github.com/barchart/barchart-udt/issues/48

commit d92bcff1b6c595e8fea888009b994044bd00793d
Author: Trustin Lee <t@motd.kr>
Date:   Sat Apr 27 15:38:28 2013 +0900

    Fix a bug where HttpContentEncoder generates an empty chunk even if it's not the last chunk
    
    - Fixes #1312
    - Added more test cases to ensure the fix

commit a218eb6f6fe07d572c90bc3bfac3f5a8cde6f5ab
Author: Trustin Lee <t@motd.kr>
Date:   Sat Apr 27 08:55:16 2013 +0900

    Allow to disable only heap or direct buffer pool
    
    - Fixes #1315
    
    If a user specifies the arena size of 0, the pool is now disabled
    instead of raising an IllegalArgumentException. Using this, you can
    disable only heap or direct buffer pool easily. Once disabled,
    PooledByteBufAllocator will delegate the allocation request to
    UnpooledByteBufAllocator.

commit 8bb6d5b3034dc7c6a1c987f249266387dff0defc
Author: Trustin Lee <t@motd.kr>
Date:   Fri Apr 26 10:23:01 2013 +0900

    Rename Unsafe.directOutboundContext to headContext

commit 3a2b099e4b7b35beb4dd443ee366db980279545c
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 25 21:56:34 2013 +0900

    Fix test failure in testsuite-osgi-deps
    
    This commit fixes both failure of test itself and failure of compiling
    and running test.
    
    - When the test was run via 'mvn test', Maven gives karaf-maven-plugin a
      list of class directories instead of OSGi bundles, so that
      karaf-maven-plugin generates incorrect feature.xml.  I added a
      workaround for this specific case to DependencyIT
    - When the packaging of project is 'feature', maven-compiler-plugin is
      not run at all.  Added a <plugin/> section so that it's always
      compiled.

commit 73c35aef4efcc47af9cfe4137e99d3c6e9e3941e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Apr 25 08:32:07 2013 +0200

    [#1309] Make sure ReplayDecoder respect isSingleDecode()
    
    * This could cause for example corrupt WebSocketFrame's if they was written from the server
      to the client directly after it send the handshake response.

commit 7884574c7b484f0def359be16fc9c59d06f9fd4c
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 25 09:15:55 2013 +0900

    Remove freeInboundBuffer() and freeOutboundBuffer() which has no value
    
    - Fixes #1308
    
    freeInboundBuffer() and freeOutboundBuffer() were introduced in the early days of the new API when we did not have reference counting mechanism in the buffer. A user did not want Netty to free the handler buffers had to override these methods.
    
    However, now that we have reference counting mechanism built into the buffer, a user who wants to retain the buffers beyond handler's life cycle can simply return the buffer whose reference count is greater than 1 in newInbound/OutboundBuffer().

commit 1b3d7f532562d0c6f565dcf0cae92d63d463a3bf
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 24 19:25:43 2013 +0900

    Make sure handlerAdded() is called before forwarding the buffer content of the removed handler
    
    - Added a test case that reproduces the problem in ReplayingDecoderTest
    - Call newHandler.handlerAdded() *before* oldHandler.handlerRemoved() to ensure newHandlerAdded() is called before forwarding the buffer content of the old handler in replace0().

commit 99b999760abb20e0eec60bc345873de515d3153a
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 24 19:02:34 2013 +0900

    Move multiplicity check to the early stage
    
    .. no need to do it late

commit 6282b31bc006b0cdebbf0ebd726f9dad4252247b
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 24 18:57:14 2013 +0900

    Format

commit 7c5dc363fbb96c581bb3ed6c0be54cdc005c9e6e
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 24 18:55:51 2013 +0900

    Rename methods to catch up the recent changes in handler life cycle listener methods / Ensure to call handlerRemoved() even if ctx.forwardContentAndRemove() failed

commit 5dd35448a2282bab8f004318460d570c989d5356
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 24 18:47:36 2013 +0900

    Add a failing test that will pass once #1306 is fixed

commit c72b5341a38519390f51ce6d4831f3e3df2a20b0
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 24 18:46:35 2013 +0900

    ChannelHandler.handlerRemoved() must be invoked *after* the handler has been removed completely and its buffers should be inaccessible.

commit a68d39fcf2067caf272e8094fa476364ad0bc7e6
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 24 18:39:34 2013 +0900

    Fix an infinite exception storm triggered by DefaultChannelHandlerContext.invokeInboundBufferUpdated()
    
    - it has to break from the infinite loop when an exception is raised by handler

commit cd26da96b87501e27edbb5d2e9781ca02601a53e
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 24 18:06:14 2013 +0900

    Add more safe-to-ignore exception messages for SslHandler
    
    - Just in case SslHandler is used on UDT

commit 24551ccfffe1c2e341ce354c6044019333e0230d
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 24 17:56:52 2013 +0900

    Unignore DatagramMulticastTest because it seems to pass on Linux, MacOS X, and Windows
    
    More specifically: Ubuntu Linux 13.04, MacOS X Lion, Windows 7

commit 8a4e70884781a567f6da28ade87633b0fe1c9f37
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 24 17:43:24 2013 +0900

    Fix 'unsupported address type error' in UDP tests / Fix checkstyle

commit cee0dc6f81fa4ac6ff6fc6f64425d5f28a21c96f
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 24 17:32:42 2013 +0900

    Add IPv4 and IPv6 specific localhost constants to NetUtil

commit 322449eedc73d3c2208c946353823ff43539e2d8
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 24 17:05:55 2013 +0900

    Add another safe-to-ignore socket error message for SslHandler
    
    .. which covers the 'Software caused connection abort: recv failed' from Windows

commit c37b53fdd1c2627ed504b0a57915ab006e0b172a
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 24 11:33:19 2013 +0900

    Format code

commit 656d7ca054b8c479235a470617a0e1bd0f60ed0c
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 24 11:28:42 2013 +0900

    Improve localhost / local interface detection mechanism in NetUtil
    
    - Do not attempt to validate localhost by binding a socket because it can fail when SecurityManager is in use
    - Find loopback interface first and get address from there instead of getting loopback address from InetAddress.getLocalHost() (because it's more reliable)
    - Instead of throwing an Error, just log and fall back to 127.0.0.1 while determining localhost address

commit b5989e244917250bae6b925e817ee752ef7aede6
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 24 09:32:53 2013 +0900

    Reduce exception instantiation overhead in SslHandler / Reduce unnecessary empty array creation
    
    - Added EmptyArrays as an internal utility class

commit c95796d981035eeb8e118aa9c15265752af232a3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Apr 23 18:20:38 2013 +0200

    [#1302] Make sure the handshake future is failed with a ClosedChannelException on channelInactive

commit 7452d05fa6952bdf155b9ba08aae1a356b453ce5
Author: Trustin Lee <t@motd.kr>
Date:   Tue Apr 23 22:57:29 2013 +0900

    Add some logging for easier diagnosis in NetUtil
    
    .. + formatting

commit be1426a22096f6e95d36f389a5ea9b8a38482ebe
Author: Trustin Lee <t@motd.kr>
Date:   Tue Apr 23 22:53:26 2013 +0900

    Fix incorrect log level in NetUtil

commit d292fdafddafb749f5b5f077f5cfb00d14ae536a
Author: Trustin Lee <t@motd.kr>
Date:   Tue Apr 23 22:42:47 2013 +0900

    Make sure to close the accept channel which couldn't be initialized or added to the message buffer

commit cc0ad9f1cce1101a841e45f79120718da923bd20
Author: Trustin Lee <t@motd.kr>
Date:   Tue Apr 23 22:38:28 2013 +0900

    Fix hanging SocketBufReleaseTest / Make sure AioServerSocketChannel closes the accepted channel when the server socket is being shut down

commit f03b2cde62016615eb9e3c4dd46741017c66eef4
Author: Trustin Lee <t@motd.kr>
Date:   Tue Apr 23 22:12:07 2013 +0900

    Fix intermittent infinite loop in AbstractOioByteChannel.doRead()
    
    - OioByteStreamChannel.doReadBytes() did not expand the capacity of the inbound buffer properly.

commit 32fa4c07f328d99522cdce8b35aa77bb49cbf6be
Author: Trustin Lee <t@motd.kr>
Date:   Tue Apr 23 21:53:51 2013 +0900

    Do not unwrap a CompositeByteBuf when it is added as a component of another CompositeByteBuf
    
    .. because Reference counting introduces life cycle issues to the CompositeByteBuf being added.
    
     - Fixes #1266

commit 94aad586270abbb95569d3d45fad8db810bfc098
Author: Trustin Lee <t@motd.kr>
Date:   Tue Apr 23 19:26:50 2013 +0900

    Fix incorrect name validation in AbstractHttpData
    
    - Fixes #1228

commit 9fe504817523888c72536ac63d4e41cacb84e207
Author: Trustin Lee <t@motd.kr>
Date:   Tue Apr 23 18:40:49 2013 +0900

    No need to make CaseIgnoringComparator public
    
    .. because it's unsed only internally

commit 87007d4eb80705f0a1784c729920effffc80a45c
Author: Trustin Lee <t@motd.kr>
Date:   Tue Apr 23 13:46:34 2013 +0900

    Fix another memory leak in AbstractByteBufTest

commit f149cf522075849e263e6e235188f0b912751924
Author: Trustin Lee <t@motd.kr>
Date:   Tue Apr 23 13:42:00 2013 +0900

    Reduce code duplication

commit 5d5c60bdd30efbf4aa311f09b2fc788d629910e2
Author: Trustin Lee <t@motd.kr>
Date:   Tue Apr 23 13:35:32 2013 +0900

    Fix a bug where fireInboundBufferUpdated() and flush() swallow the event too early
    
    - Fixes #1292
    - Replace DefaultChannelPipeline.inbound/outboundShutdown flag with per-context flags
    - Update the flags in free() / freeInbound() / freeOutbound() for clarity

commit 8e2e22c2707292913f93de4397ecef16044042fd
Author: Trustin Lee <t@motd.kr>
Date:   Tue Apr 23 13:06:27 2013 +0900

    Change the thread model slightly for new/freeInbound/OutboundBuffer() for future improvement
    
    - Related: #1283
    - Make ReplayingDecoder work with the modified thread model

commit c6f936f265159cf0b7e4cf7752710900021176fc
Author: Trustin Lee <t@motd.kr>
Date:   Tue Apr 23 13:03:25 2013 +0900

    Ensure Javassist is loaded when running an example from an IDE

commit d85757a008fee55069daf367a0bb70774e95bbc6
Author: Trustin Lee <t@motd.kr>
Date:   Mon Apr 22 22:18:10 2013 +0900

    Fix memory leak in DefaultChannelHandlerContext
    
    .. where freeInbound() and freeOutbound() are not called for all contexts
    
    - Fixes #1298

commit e80fb65c363369d97fa669908477e736ee91c492
Author: Trustin Lee <t@motd.kr>
Date:   Mon Apr 22 19:40:23 2013 +0900

    Clean up the pipeline implementation / Ensure Embedded*Channel does not run pending tasks immediately
    
    - Replace ugly 'prev != null' check with explicit event scheduling
    - Fix an incorrect flag operation in freeHandlerBuffersAfterRemoval()
    - Fix a bug in AbstractEmbeddedChannel.doRegister where it makes pending tasks immediately, where the pending tasks actually triggers inbound events
    - Remove unnecessary suppression of inboundBufferUpdated() event in DefaultChannelPipeline, which potentially hides an event ordering bug. Unfortunately, I don't remember why I added it in cca35454d214611792067c89b78f7477aae3a323.

commit 9c4bfa44d97f3056a7432539a032d47f8b6b7005
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Apr 22 11:04:56 2013 +0200

    [#1294] Make sure ByteBuf is released once written to channel

commit 9a5f45a0c1fdeea3b277addccbb73657f38293c5
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Apr 22 10:07:01 2013 +0200

    [#1297] Make sure ResourceLeakDetector.open(...) is only used after constructing was successful

commit f979c17b67aaf2d7b1184edd60b5bffe8093d9cd
Author: Trustin Lee <t@motd.kr>
Date:   Mon Apr 22 16:58:54 2013 +0900

    Revert "Fix #1075: DefaultChannelHandlerContext.fireChannelSuspended and fireInboundBufferUpdated do not work correctly if handlers with EventExecutor are added or removed from pipeline."
    
    This reverts commit 273948055a5ae38a01f1f24f64026aaa1a8bf0a5, which is
    incorrect.
    
    - Related: #1075

commit ab685de7a31d5c4745b9956f975b96c65cf4fc65
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Apr 22 09:47:44 2013 +0200

    [#1273] Fix resource leaks in test

commit c01d37ad050bdf17e1340c96d23746ffcb8e6224
Author: Trustin Lee <t@motd.kr>
Date:   Mon Apr 22 14:47:17 2013 +0900

    Merge forwardBufferContent and setRemoved()

commit 9b89c303cc36b2ce8202b62fa88c9d8b849c6e6c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Apr 21 13:41:34 2013 +0200

    Return correct type on retain(..)

commit c987dd556e8a1286451eb498cb7592156f5b9b74
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Apr 21 13:00:50 2013 +0200

    [#1295] Make sure retain(..) returns the correct WebSocketFrame type

commit 2640832a38c105f2320efc8ab390b4985abbf90b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Apr 21 12:52:42 2013 +0200

    Fix checkstyle

commit 584669357734071f426d6fa50b57a867b1a29d1b
Author: Trustin Lee <t@motd.kr>
Date:   Sun Apr 21 07:45:37 2013 +0900

    Typo

commit 475039532ce6096f2d2299eb91d9ad416c35d875
Author: Trustin Lee <t@motd.kr>
Date:   Sun Apr 21 07:44:37 2013 +0900

    Split dynamic pipeline manipulation test into a new class / Replace PrefixThreadFactory with DefaultThreadFactory / Port the latest tests from the branch 'out-of-order' written by @normanmaurer

commit 1cdb9e0b488865527359ca3d7e527d414a779188
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Apr 19 07:06:22 2013 +0200

    Just fail all futures that are left to not cause out-of-order writes

commit ca5554dfe7707d2cce712d1165a648129e0a9c84
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Apr 5 15:46:18 2013 +0200

    [#1236] Fix problem where adding a new ChannelHandler could block the eventloop
    
    This change also introduce a few other changes which was needed:
     * ChannelHandler.beforeAdd(...) and ChannelHandler.beforeRemove(...) were removed
     * ChannelHandler.afterAdd(...) -> handlerAdded(...)
     * ChannelHandler.afterRemoved(...) -> handlerRemoved(...)
     * SslHandler.handshake() -> SslHandler.hanshakeFuture() as the handshake is triggered automatically after
       the Channel becomes active

commit 4a5dc3222488db44b0174297f20b83195601cb8d
Author: Trustin Lee <t@motd.kr>
Date:   Fri Apr 19 13:04:20 2013 +0900

    Fix a bug where LineBasedFrameDecoder does not handle too long lines correctly
    
     - Related: #1287

commit 6bb00cea6f58fc758703a6ac7cfa15b07ff53e47
Author: Trustin Lee <t@motd.kr>
Date:   Fri Apr 19 05:57:53 2013 +0900

    Fix failures in testsuite-osgi-deps
    
    - Make only netty-common depend on javassist at compile scope, and
      all others at test scope

commit 58bfd6bf3bb0ede4c275c3cc91f282cc5e24f928
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Apr 18 22:15:50 2013 +0200

    [#1284] Fix bug which can cause in infinity-loop triggered by a handler removal

commit 18dca2a8a48a5cd872d6d889c7bceeb6eb65a08e
Author: Trustin Lee <t@motd.kr>
Date:   Fri Apr 19 04:37:51 2013 +0900

    Fix checkstyle

commit 8884e311f1829ddacbad5bbc2b9930b9a8fbf422
Author: Trustin Lee <t@motd.kr>
Date:   Fri Apr 19 04:35:44 2013 +0900

    Fix a bug where DefaultCompositeByteBuf.nioBuffers() fails when its component's nioBufferCount() is greater than 1
    
    - Fixes #1267

commit 9e890f0ab8e1bb17b9cfd7426aa6c51351212111
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 18 16:40:22 2013 +0900

    Ensure to release the component when it's removed from CompositeByteBuf / Add tests for reference counting of CompositeByteBuf

commit 70eee55a48daad4222f8ff37d47f7182f05de473
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 17 12:51:22 2013 +0900

    Revamp HttpContentEncoder
    
    - Use state machine to simplify the code
    - Always produce a chunked response for simplicity
    - Change the signature of beginEncode() - HttpContent was simply unnecessary.
    - Add more test cases
    - Fixes #1280

commit 4b1df148a6caf13d7a696f68452bb9243f83dcb9
Author: Trustin Lee <t@motd.kr>
Date:   Tue Apr 16 11:49:47 2013 +0900

    Fix a bug where HttpContentEncoder does not update 'Content-Length' and 'Transfer-Encoding' correctly
    
    - Add 'Content-Length' and remove 'Transfer-Encoding' in case of FullHttpMessage
    - Remove 'Content-Length' and add 'Transfer-Encoding: chunked' in case of non-full HttpMessage
    - Fixes #1275

commit 7ee571968c63502814b18def3d172ac8e81e4110
Author: Trustin Lee <t@motd.kr>
Date:   Mon Apr 15 20:11:02 2013 +0900

    Use progress + total instead of delta
    
    .. because there is sometimes a task whose total is only a rough
    estimation

commit e69033a4c39ed20a7af92ad8ffe1d20582376e5c
Author: Trustin Lee <t@motd.kr>
Date:   Mon Apr 15 15:26:20 2013 +0900

    Replace TransferFuture(Listener) with (Channel)ProgressiveFuture(Listener)
    
    - Now works without the transport package
    - Renamed TransferFuture to ProgressiveFuture and ChannelProgressiveFuture / same for promises
    - ProgressiveFutureListener now extends GenericProgressiveFutureListener and GenericFutureListener (add/removeTransferListener*() were removed)
    - Renamed DefaultEventListeners to DefaultFutureListeners and only accept GenericFutureListeners
    - Various clean-up

commit 391c0117644646a034693d5b2be16164af5675a4
Author: Trustin Lee <t@motd.kr>
Date:   Mon Apr 15 11:03:59 2013 +0900

    Renames and typos

commit 713b200adf7059b123b94ac6282555f066ee16e1
Author: kerr <hepin1989@gmail.com>
Date:   Sat Apr 13 20:38:16 2013 +0800

    [#1244] Support ChannelTransferPromise for sendFile

commit d8387fa4c3f362842a775f1f49bac1f20b249a1f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Apr 13 18:19:33 2013 +0200

    [#858] Merge ChannelPipeline.replaceAndForward into replace and removeAndForward into remove

commit 4a792151b0848ee639ac5efaa3fcca42e11241d3
Author: Trustin Lee <t@motd.kr>
Date:   Fri Apr 12 12:57:37 2013 +0900

    Rewrite bridge implementation in DefaultChannelHandlerContext
    
    This commit splits bridge into two parts.  One is NextBridgeFeeder,
    which provides ByteBuf and MessageBuf that are local to the context
    whose next*Buffer() has been invoked on.  The other is a thread-safe
    queue that stores the data fed by NextBridgeFeeder.feed().
    
    By splitting the bridge into the two parts, the data pushed by a handler
    is not lost anymore when the next handler who provided the next buffer
    is removed from the pipeline.
    
    - Fixes #1272

commit 5bfb408b7d921451af102a29c4e78ab438b2df89
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 11 19:36:27 2013 +0900

    Add setRefCnt(int) method to AbstractReferenceCounted(ByteBuf)
    
    - Fixes #1265

commit 2600f46fd738faa5ffbb427a2c30fefe84de3028
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 11 17:54:20 2013 +0900

    Fix checkstyle

commit 15ac4127e4202548d1d71401adaad3a39b96d1a2
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 11 17:29:37 2013 +0900

    Remove @Ignore and add expected / Fix inspector warnings

commit e556232aeb8234e851308b030e66414d09444897
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 11 16:50:42 2013 +0900

    Rename HandshakeCompletionEvent to SslHandshakeCompletionEvent

commit b3429af1ccfe1add9f77ad016607334e8c4d65e1
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Apr 11 06:47:43 2013 +0200

    [#1260] Fire a HandshakeCompletationEvent once the SSL handshake completes

commit 725156f08262895def7a7041584c39d18356f503
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Apr 10 15:39:58 2013 +0200

    [#1242] Fix infinity-loop which was triggered when a write failed and AioSocketChannel was used

commit 3b8673733e5a052fab5013fff9c25fec574f59de
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Apr 10 14:19:03 2013 +0200

    [#1262] Respect adjustment when using SlicedByteBuf.nioBuffers()

commit 4746e74124c01351d0cecf2e9d0e14bb7ab7d44e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Apr 10 11:27:54 2013 +0200

    [#1247] Add javadocs which tell the limitation of the type detection as there is nothing we can do about

commit 73db1f886da7c5597d3fe8bf21665071f98afadf
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Apr 10 07:08:08 2013 +0200

    [#1247] Add test which shows the problem with concrete classes that pass in the type based on a generic

commit e8ee6a2772508dcbdff76880aa99f9dd5d5e508d
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 10 13:44:05 2013 +0900

    Better exception message when tickDuration is too big
    
    - Related: #1246
    - Fix misc inspector warnings

commit b58e6787ee428377ae754cf324aa558081c1afa1
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 10 10:40:43 2013 +0900

    Fix typo

commit da174f4290278c390aa815e3decf0e6ff90d41d0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Apr 9 12:50:29 2013 +0200

    Add a warning about SingleThreadEventExecutor.pendingTasks() operation

commit 0efebd5a82e23be33cac50e2934e13546bc6d301
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Apr 9 07:15:49 2013 +0200

    Allow to get an Iterator over all of the EventExecutor an EventExecutorGroup contains. Beside this allow to get basic stats for the EventExecutor like pendingTasks and executorCount

commit 067a2af700b1cfa476a4bcf1f55071ccb178e25e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Apr 8 21:23:53 2013 +0200

    Fix a few typos

commit 60cfb547b42aef40f1bac6717b7d445d629b3cc1
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Apr 8 21:19:20 2013 +0200

    Fix logging of android platform detection

commit 9308625b2c3cd09cd41504c142f64036aec7d201
Author: irelandKen <fengxue2026@qq.com>
Date:   Mon Apr 8 21:03:44 2013 +0800

    Update FullHttpMessage.java
    
    I think FullHttpMessage = HttpMessage + LastHttpContent,
    not that FullHttpMessage = FullHttpMessage + LastHttpContent

commit 51de21f25022c6ed98663b7f6c2dc7145795d80b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Apr 8 10:42:54 2013 +0200

    [#1246] Correctly convert to nanos

commit d34daebeca3c7cb5d884c5ac62946ef8174a0a0e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Apr 8 09:38:50 2013 +0200

    [#1238] Correctly log the content of the MessageBuf and not depend on MessageBuf.toString()
    
    Add an extra static method to BufUtil which will convert the content of any MessaBuf implementation to a String

commit 2a162eb1408a627bcecd08bb9a3bb157d029bb13
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Apr 8 08:06:46 2013 +0200

    Rename method to better reflect usage

commit 2508c76e97b40ac8aa14fa364f462c930079a437
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Apr 8 07:01:08 2013 +0200

    [#1246] Fix cpu-spinning regression in HashedWheelTimer
    
    Also remove the usage of System.currentTimeMillis() completely here to make it more consistent and correct

commit ded09fc778130152486187c3f72432f5ab0dc749
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Apr 8 06:45:10 2013 +0200

    No need t let SpdyOrHttpChooser extends ChannelDuplexHandler

commit 3305a7df8278ef121e9c6e57a2db737b5cfce74d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Apr 7 11:54:13 2013 +0200

    Also provide implementation for flush out of the box

commit b36e815026d2e9a345ade3997ff45e8f2f3b57de
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Apr 7 11:02:32 2013 +0200

    [#1241] Fix NPE in AbstractTrafficShapingHandler and the logic

commit 8632d9011e03ed1280ca20defeb4711aa327bc28
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Apr 5 19:23:49 2013 +0200

    [#1239] Fix possible NPE while fail flush futures during close

commit d299eeb48576639ef8916fd78a7503fb453fcd79
Author: Trustin Lee <t@motd.kr>
Date:   Fri Apr 5 13:44:51 2013 +0900

    Fix a bug in AbstractTrafficShapingHandler.getTimeToWait() where it doesn't work OK when system time goes back.

commit 7ccbcb90af69a386c737b4f3991bd58efd05af92
Author: Trustin Lee <t@motd.kr>
Date:   Fri Apr 5 05:38:24 2013 +0900

    Upgrade to netty-build-19

commit a3e760a003b8477e0401a414c9b773d3cf4d4f5d
Author: Andrei Pozolotin <Andrei.Pozolotin@gmail.com>
Date:   Wed Apr 3 22:18:37 2013 -0500

    fix #1234 - duplicate package-info.java errors in eclipse requires release of netty-build v 19 and netty-parent update.

commit 0ac31ae846740bbcc14aca1129b9f8fdc2835d52
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 4 17:26:14 2013 +0900

    Make Unpooled*ByteBuf public so that ByteBufAllocator implementor can extend it

commit 05bc0ba17f6d388905d8f808cbb4b616ab540675
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 4 16:47:10 2013 +0900

    Fix checkstyle

commit 6dfa455f9e3ccf6545d2fe910fe1533379aa06ec
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 4 16:31:41 2013 +0900

    Fix compiler warnings

commit 4505e7f1b33b2fca3278f588be263595c2f8fda9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Apr 4 08:38:58 2013 +0200

    Make sure OP_WRITE is correctly cleared when using FileRegion and other NioTasks

commit c03179c81cac581fe51cb6c5b4111bcd296c56bb
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 4 15:00:07 2013 +0900

    Clean up try/catch blocks / Prefer 'throw' to 'fireExceptionCaught'

commit 3b9994455a84be3c7cedfe475a7c93f2cad98857
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 4 14:53:32 2013 +0900

    Saner field order

commit 03955428bc97365dfe29bf7ad8a319623c4c8a97
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 4 14:50:25 2013 +0900

    Ensure BufUtil.release() is called even if writeBytes() fails in writeAndRelease()

commit 015e60b00fa3e2a0dfbd5b6ddfd55c9bda01cad3
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 4 14:48:30 2013 +0900

    Clean up catch blocks
    
    - No need to have nested try blocks because the catch block catches everything and rethrows it
    - No need to do instanceof-checks

commit c25fd78ca00402282162ace98209a909f7326807
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 4 14:44:52 2013 +0900

    No need to have nested try blocks
    
    .. because the catch block catches everything and rethrows it

commit 788b88b7af6c5cb2d111d5fc7e9ba34208e8baff
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 4 14:37:54 2013 +0900

    Make sure to release the buffer when it's written to the next byte buffer
    
    .. otherwise it will leak.

commit 46540578fcf4bf3778d66dc450339d374cfaa4e7
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 4 14:32:48 2013 +0900

    Optimize OutputMessageBuf.drainToNextInbound/Outbound()
    
    - Return early when the buffer is empty
    - Keep only the number of byte buffers
    - Remove unnecessary null check in the loop (because we know buffer is not empty at certain point)

commit 8a672c2800efc3697b70c32c08a60edb9e654eb1
Author: Trustin Lee <t@motd.kr>
Date:   Thu Apr 4 14:11:24 2013 +0900

    Proper assertion instead of blindly clearing the OutputMessageBuf

commit 7ee2adb5878b7261abf8ce5f3e7e977627ff8c84
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Apr 3 18:52:57 2013 +0200

    Move drain logic to OutputMessageBuf and optimize it as far as possible

commit 1675e61f5baeef17c1b4cbfb914d91e73b1fb07e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Apr 3 18:19:35 2013 +0200

    Share same ThreadLocal for all decoder/encoders to minimize memory usage

commit 94ef7dc1b9dbbde24140ab43f4192c97d1fc50c2
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Apr 3 18:03:55 2013 +0200

    Optimize to minimize volatile reads to access next buffer in codec framework

commit 9828267165587e02524318d7a64a71c357230f56
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Apr 3 17:07:52 2013 +0200

    Fix performance regression which was caused by calling the fireInboundBufferUpdated() a way to often
    
    * Also use a ThreadLocal for the decoder buffer to safe space as it is cheap

commit c3559ddbda7dab23d372e6bc8eb83c17f5d65683
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 3 22:18:38 2013 +0900

    Fix misleading example in ByteBuf

commit baf9ecfe7baae6acb5c022484c19af2426dac85c
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 3 22:15:34 2013 +0900

    Fix IndexOutOfBoundsException raised when numHeapArenas and numDirectArenas differ
    
    - Fixes #1227

commit 8fef51139063c49d452118053c2109ea298d507c
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 3 22:08:43 2013 +0900

    Fix typo

commit af4b71a00e30faf86ef1c2365e965e8f04f65bee
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Apr 3 11:32:33 2013 +0200

    Remove special handling of Object[] in codec framework (a.k.a unfolding)
    
    - Fixes #1229
    - Primarily written by @normanmaurer and revised by @trustin
    
    This commit removes the notion of unfolding from the codec framework
    completely.  Unfolding was introduced in Netty 3.x to work around the
    shortcoming of the codec framework where encode() and decode() did not
    allow generating multiple messages.
    
    Such a shortcoming can be fixed by changing the signature of encode()
    and decode() instead of introducing an obscure workaround like
    unfolding.  Therefore, we changed the signature of them in 4.0.
    
    The change is simple, but backward-incompatible.  encode() and decode()
    do not return anything.  Instead, the codec framework will pass a
    MessageBuf<Object> so encode() and decode() can add the generated
    messages into the MessageBuf.

commit cd0b5ec2db593d45c96bd6b55b0024042534af04
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 3 18:06:46 2013 +0900

    Keep Socket/SctpTestPermutation from creating too many event loops
    
    - Also made the event loops created by *TestPermutation use daemon threads for simplicity (i.e. no need to shut down the event loops)

commit 117ad8acd7e386c4dacb24469927346a1e89e5cb
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 3 17:49:30 2013 +0900

    Add MultithreadEventLoopGroup.DEFAULT_EVENT_LOOP_THREADS / Add DefaultThreadFactory
    
    - Allow overriding the default thread factory when a user specified no thread factory

commit 312a35dfedad5e999e980a5adc9916b3d7b2ea3b
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 3 17:15:25 2013 +0900

    Remove MultithreadEventExecutorGroup.DEFAULT_POOL_SIZE
    
    - We should never define a default nThread for MultithreadEventExecutorGroup because we don't know what a user do with it.

commit b7797917ab63aa3983e30d01b28752f92a3198d3
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 3 16:15:33 2013 +0900

    Deprecate Bootstrap.shutdown() and use EventLoopGroup.shutdown() wherever possible
    
    There are still some tests that use Bootstrap.shutdown() though.  They need non-trivial refactoring, which will come soon.

commit 3f8a830963eb9676b91c2a24c17ad4f8331069d1
Author: Andrew Cox <andrewcox@fb.com>
Date:   Tue Apr 2 21:18:19 2013 -0700

    Fix DefaultChannelPipeline.first() so that it returns null when only the sentinel handlers remain (this is how DefaultChannelPipeline.last() works already)

commit 2ffa083d3ce613dec27e498d6f103ef20ddb1ec4
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 3 12:08:01 2013 +0900

    Allow overriding the default allocator properties and log them / Prettier log

commit 0f3dc0409a724da5ffec286273883abe43eda3e6
Author: Trustin Lee <t@motd.kr>
Date:   Wed Apr 3 11:44:30 2013 +0900

    Log various properties at startup time for easier diagnosis

commit bcb0b83b44cf383accb26a422c0767b2548700f5
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Apr 2 13:58:15 2013 +0200

    Use unfoldAndAdd(..) for now

commit f95dbb7a4d5111978d6b2e793d5dd9a4dc250b2c
Author: Trustin Lee <t@motd.kr>
Date:   Tue Apr 2 16:07:31 2013 +0900

    Make HttpPostRequestDecoder.addHttpData() and getFileUpload() protected
    
    .. so that a user can extend it to get notified when changes are made

commit 436380c41e28aed55ebfa7dc02778638b5c21321
Author: George Cao <matrix3456@163.com>
Date:   Tue Apr 2 13:56:34 2013 +0800

    Fix Javadoc issues. Replace Upstream with Inbound and Downstream with Outbound.

commit 2e3b8f13ea902b6c1e56ad36473c400ef1012daa
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Apr 2 07:56:49 2013 +0200

    Revert "Let ProtobufEncoder extend MessageToByteEncoder which makes more sense. Related to [#1222]"
    
    This reverts commit 6a9d055f578bc85eb7780dcc5484aa11e9da50f6.

commit d9ac6638f4853180a2e46cd504b6483b7381ea87
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Apr 2 07:38:46 2013 +0200

    [#1221] Make sure HttpObjectAggregator 100-Continue buffer is not released

commit 6a9d055f578bc85eb7780dcc5484aa11e9da50f6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Apr 2 07:17:45 2013 +0200

    Let ProtobufEncoder extend MessageToByteEncoder which makes more sense. Related to [#1222]

commit a0fca9312805a84c1903acd78be2e84ae88bb0e2
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Apr 2 07:17:10 2013 +0200

    [#1222] Correctly handle the case when a MessageToMessageEncoder encodes to ByteBuf and the next outbound buffer is of type ByteBuf

commit 96bf71e814c2d7024d38cdeb8dc05a627670f09a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Mar 28 11:56:58 2013 +0100

    Let EventExecutorGroup extend ScheduledExecutorService as it shares quite some semantic

commit 05850da8638a5af14c7ee5f1ebf4e17cf10dd71a
Author: Prajwal Tuladhar <praj@infynyxx.com>
Date:   Wed Mar 27 03:31:43 2013 -0400

    enable checkstyle for test source directory and fix checkstyle errors

commit 8e23ab68864bd7a07ffc0fbf2bc90e5390cf21f8
Author: Adam Vandenberg <flangy@gmail.com>
Date:   Thu Mar 28 15:49:35 2013 -0700

    Fix typo in BufType javadoc

commit c2cd99d90cde91d2dc91c21b8006fc947c4f5a67
Author: Prajwal Tuladhar <praj@infynyxx.com>
Date:   Tue Mar 26 14:41:41 2013 -0400

    upgrade to maven 3.0.5
    
    As Netty is using its own CI now

commit b4b0be4e532a83802c6c192ee2aa8c836b12ea80
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Thu Mar 28 06:54:08 2013 -0700

    SPDY: allow multiple notification of closeSessionFuture

commit 5a7f049fe2bca201d76edef987a3ec36580c410b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Mar 28 10:01:26 2013 +0100

    [#1202] Fix javadoc

commit 14a47075bea2c38540bd5b0429335b97614f0eb0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Mar 28 07:20:34 2013 +0100

    [#1211] Fail ChannelPromise on SpdyProtocolException like it was before in 3.x

commit a97cca50df0ef0644dbe97df82a64b2a7e3408c3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Mar 28 06:57:04 2013 +0100

    [#1212] Fire handshake status events to notify the user about handshake states

commit 4a9ab4f57c77c5d9a977cd87bf38adf977b0dbcc
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Mar 25 10:50:59 2013 +0100

    Add WebSocketFrameAggregator which takes care to aggregate fragmented websocket frames

commit 71727e42dee8e36d3cfc3ef36560b1bd68106f98
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Mar 27 07:30:12 2013 +0100

    [#1210] Allow to use derived buffers with DefaultBufferHolder and so fix broken SpdySessionHandler

commit f53db96a3e3b12269f85e870820b52fb8f679ed5
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Mar 25 11:06:58 2013 +0100

    [#1198] Fix references to ChannelBuffer and ChannelBuffers

commit 4eb01722517dc1332c5e31c63ab86872b1c2b148
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Mar 25 10:58:50 2013 +0100

    [#1196] Make it clear that addComponent(..) of CompositeByteBuf does NOT increase the writerIndex

commit 20d76610da7d022706fe67fbacd7fed7a9c741d5
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Mar 25 08:32:52 2013 +0100

    [#1204] Correctly detect lastChunk in HttpPostRequestDecoder

commit f76e38592d83a23328960b430973a338fde894ae
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Mar 25 08:12:48 2013 +0100

    [#1201] Correctly handle mix of not compressed and compressed requests

commit 8057c699cd03b2f59207cd016d6a60e3cc3d3910
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 25 16:05:19 2013 +0900

    Fix another bad xml

commit bf032044bfdc869c290ed7c562e11d32dc121cb7
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 25 16:04:24 2013 +0900

    Fix bad xml

commit 59012390f6e98c29862853d06d766475cb1c1960
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Mar 25 08:01:11 2013 +0100

    Fix version numbering

commit 4e60c395a9f0903d763eda0998990b5e5f57bcbc
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Sun Mar 24 14:58:28 2013 -0700

    Fix SslHandler handshake timeout cancellation bug

commit f136fb3673f1cc050b1ef2596e6a2faac45809e0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Mar 23 11:24:34 2013 +0100

    [#1197] Add Unpooled.unreleasableBuffer(...) to create a unreleasable view on a ByteBuf)

commit c71dc9d4b67bb8486caeb2fb4fbfcf8f094c7291
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Mar 23 10:54:43 2013 +0100

    [#1195] Fix Unpooled.wrappedBuffer(..) with non-direct read-only ByteBuffer

commit 7d7b676eebc74bf8e4768448c8dda9456c3e765c
Author: Norman Maurer <norman@dev-linux.(none)>
Date:   Fri Mar 22 15:20:35 2013 +0100

    [maven-release-plugin] prepare for next development iteration

commit 60fc7dac4dea95211df7d636e2b9c45ca44a6bae
Author: Norman Maurer <norman@dev-linux.(none)>
Date:   Fri Mar 22 15:20:11 2013 +0100

    [maven-release-plugin] prepare release netty-4.0.0.CR1

commit 915cb8b55c6088ae566d178612e939b3b29752e8
Author: Prajwal Tuladhar <praj@infynyxx.com>
Date:   Fri Mar 15 23:27:33 2013 -0400

    [#744] Port fixes from Akka to HashedWheelTimer
    
    port fix from Akka with following commits:
    *
    https://github.com/akka/akka/commit/cb4e3536b0ed3483bd3636d7789c0ddcadaf
    a2da
    *
    https://github.com/akka/akka/commit/7e590f3071bdf89a4aa9d7d262bac8923d85
    e754
    
    And also use constants for worker state for time instead of numeric.

commit 4bd9c0195ffa5e5365e8c421dd5b234f9a0a0962
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Mar 20 10:04:17 2013 +0100

    Add a handler that makes writing websocket clients much easier

commit 624bda4695d16ec90bdb4e71b400247af60128f1
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Mar 22 08:12:57 2013 +0100

    Make sure cancelled scheduled tasks will not run again if cancelled before

commit 28576aa41ed3527289e6d60873c3fa75f87cf0aa
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 22 16:07:10 2013 +0900

    Fix incorrect exception message
    
    - Thanks @hepin1989

commit e147615ddde69e733d4ad949b7085e0b48a40f9a
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 22 14:49:37 2013 +0900

    Upgrade to the latest maven-checkstyle-plugin

commit 19ffdd5c297ca45dd42a193c5de6065dfdbefc2b
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 22 14:33:47 2013 +0900

    Revamp the selector auto rebuild checker
    
    - Count the number of select() calls made to wait until reaching at the expected dead line, and rebuild selectors if too many select() calls were made.

commit 69e5a0eb9c21969a91c07dc3f4c8cc2be1def8ec
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 22 12:59:47 2013 +0900

    Log prematurly returning select() at DEBUG level and increase the minimum required consecutive premature returns to log

commit d525295d2091253e031c94b29b659013b3af8c45
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 22 12:46:31 2013 +0900

    Revert NioEventLoop.hasTasks() which is not really true

commit 1bad0b48cf1ad654e1c063ad97f7c0e3a9f27c89
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 22 12:37:57 2013 +0900

    Fix memory leak in the test

commit 34853e7ba0e0438220d5399a9526571383610b95
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 22 12:37:11 2013 +0900

    Selector auto-rebuilder tweaks

commit ffdc2a6b1144ebd0ee077ace96d05fb77549c2c9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 22 11:57:15 2013 +0900

    Upgrade dependencies

commit f6e0df125a410faa4e8393b87cecd238971701f6
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 22 11:50:53 2013 +0900

    Allow disabling automatic selector rebuilding by specifing non-positive threshold

commit 1ab2813405dfda0fd975aaac82b83e98b14cd8e0
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 22 11:48:41 2013 +0900

    Enable automatic selector rebuilding by default
    
    - Fixes #1192
    - Log at WARN level for easier diagnosis

commit fa02ffddae42307fd5571ce6af8b122ca8a79f75
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 22 09:06:08 2013 +0900

    Remove TaskScheduler and ImmediateEventExecutor that requires TaskScheduler
    
    - Related issue: #817

commit 6869a2bd232c302fe5d6f7b44f4e2e0673af6ca0
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 22 09:01:28 2013 +0900

    Fix memory leak in AbstractCompositeByteBufTest

commit 4097dee49d2d798e2262ac68954859944c3625ab
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 22 09:00:38 2013 +0900

    Make SingleThreadEventExecutor independent from TaskScheduler
    
    - Related issue: #817

commit 52c4e042d64cd09bb11e3f77e9c037ab690f7d13
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Mar 21 15:49:14 2013 +0100

    Correctly handle read-only direct ByteBuffer when wrap them

commit 8fb80e91796e8567aca5e2b8244f853f8631217b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 21 21:34:13 2013 +0900

    Fix a dead lock in ServerBootstrap as described in #1175
    
    - Reduce code duplication between bootstrap implementations

commit 9b208028ef1300b1a49eb1315ba58e58c2b87152
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 21 20:22:25 2013 +0900

    Use clearer term when data is discarded by pipeline

commit a8723412ddf2272fd791da2bc0e6db656efe6593
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 21 19:50:33 2013 +0900

    Fix checkstyle

commit f858a2fe627e2f2749cb656647eed3d95ce3db99
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Mar 21 11:49:58 2013 +0100

    Fix multiple calls to fireChannelActive() when using AIO

commit 4fa7e854933c8b388a5ad52f600661ff9b38910f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 21 19:40:52 2013 +0900

    Make sure ChannelFuture of Bootstrap.bind() and connect() notify with the right cause when registration fails
    
    - Related: #1175

commit b6dd5938ab748f4d3482f58106bd8018f5cf4bb4
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Mar 21 11:23:40 2013 +0100

    No need to do any deadlock check here

commit c08919d0a0a8b391598fc1be49956a5ae5c7b375
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 21 19:19:14 2013 +0900

    Fix the dead lock described in #1175
    
    - Similar to @normanmaurer's fix in that this commit also makes Bootstrap.init(Channel) asynchronous, but it is simpler and less invasive.
    - Also made sure a connection attempt failure in the local transport does not trigger an exceptionCaught event

commit bd8d53eaedbe7c6251df76716a6cdae79ef6f8b9
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 21 19:02:34 2013 +0900

    Fix checkstyle

commit cfa2f726816e4604e65a280791757e6d2c469ab8
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 21 19:01:53 2013 +0900

    Fix checkstyle

commit 2aa0bf73dc7b44175622055b891e8eec6f65de46
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 21 18:43:03 2013 +0900

    Add a unit test that reproduces the dead lock described in #1175
    
    - The offending test case is annotated with `@Ignore`
    - Also fixed a bug where channel initialization failure swallows the original cause of initialization failure

commit a980638190c055a596145ec2a6963fa8cd30126a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 21 17:48:10 2013 +0900

    Ensure the best effort is made even if future listeners could not be notified / Handle registration failure in a robust manner
    
    - Related: #1187

commit 9175abc451b3573fc62847960a64c771e7a2c723
Author: kerr <hepin1989@gmail.com>
Date:   Thu Mar 21 15:35:37 2013 +0800

    Update pom.xml
    
    update the barchart-udt to 2.2.5

commit 8b722d29a76a88cc3f9ffd27669ce1428c406e8b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 21 16:11:47 2013 +0900

    Add constructor parameters that do not perform type parameter auto-detection for the languages without type parameters
    
    - Fixes #1177
    - Add TypeParameterMatcher.get(parameterType)
    - Add alternative constructors

commit 2b014ce82a71cad586ce3919d31d160fe05366cd
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Mar 20 18:28:55 2013 +0100

    [#1183] Fix BlockingOperationException in ChannelGroup.close().awaitUninterruptibly()

commit f008ac8d4774574630a88fbc04c0c96c114e0457
Author: hepin1989 <hepin@sosia.us>
Date:   Wed Mar 20 23:06:20 2013 +0800

    1 Rename package name "rendzvous" to "rendezvous" 2 Add bytes stream rendezvous example

commit ce87b627be941e3dc56e85164088ab68f80188db
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Mar 18 14:18:31 2013 +0100

    Let EventExecutor return our Future to allow the user to work also with FutureListener here. Also add a special ScheduledFuture that extends our Future for this purpose.

commit 2970383bac8a78a41ba5f7b0d823c7306d6a3865
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 19 16:48:53 2013 +0900

    Make sure OSGi testsuite runs on 'mvn test'

commit f70babcd940e8b5dd241c972c4bcc9a3038df7eb
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 19 15:56:20 2013 +0900

    Upgrade to Karaf 3.0.0.RC1

commit 5a88227856193663ba39bd7eac3bb7fc4443b376
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Mon Mar 18 08:28:02 2013 +0100

    Transport: Clarifying the role of AbstractBootstrap#bind()
    
    This small changeset clarifies the role of AbstractBootstrap#bind(),
    especially when not used in a ServerBoostrap context.

commit f4c18c6e744564442a0ffdd229a9d8dba608f9ad
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 18 15:01:19 2013 +0900

    Fix a bug where NioEventLoop.processSelectedKeys() enters an infinite loop when too many connections are closed at once
    
    - Fixes #1171

commit 97f2fa734133bde9aff1a572aef2f0620542cfa6
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 18 13:58:48 2013 +0900

    Allow a user specify the byte order of the length field for LengthFieldBasedFrameDecoder
    
    - Fixes #1164

commit 660e6f4afe6a5e1e53619600a5b14f11dac5537c
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 18 13:48:15 2013 +0900

    Fix IllegalBufferAccessException in the UDT message examples
    
    - Fixes #1104

commit d3327e7f467427c04e45784044c8cadfbb6afdbf
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 18 13:10:55 2013 +0900

    Fix inspector warnings

commit ecaba683482a9bff9f1e6cdd04c6d7531238542a
Author: ursa <Kuzma.Deretuke@gmail.com>
Date:   Sat Mar 16 23:08:27 2013 +0400

    Fix bug in memory-based HTTP data content initialization with input stream, add test (port from branch 3).
    
    - Fixes #1170

commit 7498e0f9131394d989f785ada634744a39f3b567
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Sun Mar 17 12:03:16 2013 -0700

    make deregister protected in ThreadPerChannelEventLoop

commit 2a8795078420cdbaa6afed06c753316488449bec
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Mar 16 18:41:36 2013 +0900

    [maven-release-plugin] prepare for next development iteration

commit adfb29330bbd081a9ab11e2656d110ce062b3746
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Mar 16 18:40:59 2013 +0900

    [maven-release-plugin] prepare release netty-4.0.0.Beta3

commit e3d10ad493979c25904aee78bb12bf3151bbc920
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Mar 16 18:28:58 2013 +0900

    Break the decode loop if decoder raises an exception to give a chance to close the connection to a user handler
    
    - Fixes: #1161

commit b186342f5214a9884639439a587b710ac7d2a549
Author: Michael Nitschinger <michael@nitschinger.at>
Date:   Fri Mar 15 13:19:26 2013 +0100

    Fixing 2 typos in codec documentation.

commit e69b99fca400ed1049f8161956f5f15513a2c741
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Mar 16 10:15:42 2013 +0900

    Allow overriding JVM options for tests

commit d9c3f4bc05e4c15e37ad35ce0f8ae78233d7c43a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Mar 14 12:45:24 2013 +0100

    [#1159] Make sure we not produce an empty bytebuf on decodeLast(..)

commit 835a40fa251ccfd6da922d11bd4f74f90e1f4247
Author: ursa <Kuzma.Deretuke@gmail.com>
Date:   Thu Mar 14 13:43:12 2013 +0400

    Port test for handler's life-cycle processing into master branch.

commit 289d474a23571ae54cc5f90d5480b02a272c84f1
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 14 17:44:32 2013 +0900

    Make ByteArrayEncoder sharable

commit 8372e2ffc90c0c9626e2ec2e40088741ca9255a2
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 14 17:21:53 2013 +0900

    Skip OSGi testsuite if 'no-osgi' profile is active

commit 5fe2e7fc9d2f02530a68805062fd7a5abe396afa
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 14 17:21:31 2013 +0900

    Fix more memory leaks in buffer tests

commit 0f351d2c4734cba9edbdaf82c69f42fe2001abe7
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 14 16:37:20 2013 +0900

    Fix memory leak in DefaultCompositeByteBuf when a component is another CompositeByteBuf / Allow retain() and release() on a derived buffer

commit 60d9984db14bcd427fb93c6b00767683430da9de
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 14 16:06:38 2013 +0900

    Fix memory leak in DefaultCompositeByteBuf when a component is another CompositeByteBuf

commit 70a51bcd8d9044bdf3b73e3da7aa29482f61e05d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 14 15:51:33 2013 +0900

    Fix memory leak in AbstractEmbeddedChannel
    
    - Allow a transport implementation to perform an arbitrary task when a channel has been deregistered completely

commit d2b137649d753b593ad00318c8b0cdba13b77447
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 14 15:25:22 2013 +0900

    Fix more memory leaks in the buffer tests

commit 9c96791176614b02dce8ec3ba7cfd14b922357cc
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 14 15:01:35 2013 +0900

    Move the methods that's only used by DefaultChannelPipeline to DefaultChannelPipeline

commit d55567e21b5ea8c33de57a5cca6a61b441a59e77
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 14 14:35:56 2013 +0900

    Remove DefaultChannelHandlerContext.needsLazyBufInit which is used only by the head handler

commit f1ecb4ab1a8b4bd8a8eda27cd7cb62e654b54016
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 14 14:14:04 2013 +0900

    Remove ChannelHandlerContext.types() which is barely useful / Remove ChannelHandlerType together

commit d19b575c312ff9db4ec0b53de2f588032f1cee58
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 14 13:17:07 2013 +0900

    Fix an incorrect modulo operation

commit 9feb27d58c0434afc03f3de59ff8dd8beb324a69
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 14 08:54:33 2013 +0900

    Specify timeout on Selector.select()

commit 4323fea5fb8790a757c8a272fe59b4564e403837
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 14 07:22:44 2013 +0900

    Fix a bug where TypeParameterMatcher does not detect the case where the type parameter is derived from an outer class
    
    - Fixes #1153

commit b86d3d692aa1a5417c2890f3fef78cc2dcfa6577
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 14 06:58:14 2013 +0900

    Fix a bug where AbstractByteBuf.order() doesn't return a swapped buffer if capacity is 0.
    
    - Fixes #1152

commit 644d5abbda93ca3b06f772a47b8dc7a5b5543775
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 14 06:54:57 2013 +0900

    Add an empty line

commit 8dcb1387e3efcbc471837de2cd68e45f51aeb15f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 14 06:49:08 2013 +0900

    Add I/O ratio parameter to NioEventLoop
    
    - Add SingleThreadEventExecutor.runAllTasks(timeout)
    - Add NioEventLoop.ioRatio property
    - Merge SelectorUtil into NioEventLoop

commit 97b2feedecb537e2415fa700d410897b2a67cdaa
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 13 16:54:20 2013 +0900

    HexDumpProxy should log hex dump.

commit 42e31a444579b24e96dae11c594827311c1217d0
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 13 15:17:06 2013 +0900

    Revert "[#1131] Codecs must not cache next buffer during processing"
    
    This reverts commit b1775a3223e54e076f0abba85360a19ded368498.

commit 5830875b42be079855e440b2e2bb364eab42169f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 13 15:09:26 2013 +0900

    Fix a memory leak in AbstractCompositeByteBufTest
    
    - Fixed #1147

commit 94a9096be589f113432a769372f7083db651c259
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 12 17:57:23 2013 +0900

    Fix a memory leak in AbstractCompositeByteBufTest

commit b271774c905c4e63146203734ca62984fb84f308
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 12 16:49:14 2013 +0900

    Fix memory leak in UnpooledTest
    
    - nothing critical. It's a test that leaks.  Not CompositeByteBuf implementation.

commit cef81f1bffe4076896e9a3735fed4dd3f69edc3f
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 12 16:43:46 2013 +0900

    Revert e66fc219ffe6621e71a409b078ace9cab87eac16

commit fe66f33f4219fa1d40fee2e90eecc8ea4d8ae0fb
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Mar 12 07:19:31 2013 +0100

    Fix issue where the bytes/messages are forwarded to the wrong handler

commit 17ebbdec207c2001a22423a357216c6a48eeda0e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Mar 11 08:38:56 2013 +0100

    Let ChannelGroupFuture extends ChannelFuture and ChannelGroupFutureListener GenericFutureListener

commit f2a35273e655041b5055676cb55f440a5bb1e95a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Mar 12 08:35:24 2013 +0100

    Fix checkstype

commit c25513d5e1dd8eb9906989e83a1ce41495d3e6a9
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 12 16:25:35 2013 +0900

    Upgrade to protobuf 2.5 and take advantage of MessageLite.getParserFromType()
    
    - also fall back to MessageBuilder if getParserFromType() is not available.

commit 559b860ff661325dc8b619687fa0940491b34963
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 12 15:23:09 2013 +0900

    Fix grammar

commit 397830d238b809aaa453db3dd556dc37b616da93
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 12 15:20:46 2013 +0900

    Allow SingleOutboundMessageHandler.beginFlush() to reject the flush request by returning false / Replace PartialFlushException with IncompleteFlushException which is more correct.

commit 83cdbeca1d25d37a8655e48eeecd28c0176ce242
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 12 14:50:38 2013 +0900

    Add ThreadPerChannelEventLoopGroup and ThreadPerChannelEventLoop to enable a user to write a new thread-per-channel transport easily
    
    - Fixes #1124

commit 6e0e38f09f74fb633a33cfd5c59265518bcf85be
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 12 14:43:38 2013 +0900

    Fix test failures

commit e1dd149ca6b686fbed3abc3054e87244505139d0
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 12 13:08:10 2013 +0900

    Reschedule the streaming API for later
    
    - Will release as a part of http_next

commit c660002b4ebd358fc839622dbb0aaa2cf97e4ba3
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 12 13:02:50 2013 +0900

    Add DecoderResult.UNFINISHED to represent the case where a decoder generated a message that was not decoded completely / Remove partial failure in DecoderResult which is not very useful but confusing

commit acde9a3f8e520e2fb02e33602dac4e5af5df532c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Mar 11 14:39:18 2013 +0100

    Fix a NoSuchElementException when WebSocketClientHandshaker is used with HttpRequestEncoder. This time for real

commit 978cf0d98a5c53e0bfbadfe666674fbc90adb429
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Mar 11 13:54:03 2013 +0100

    Fix a NoSuchElementException when WebSocketClientHandshaker is used with HttpRequestEncoder

commit 2406a9f8b8e4dc614adffb735a1b50bcb6e29301
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Mar 11 06:38:39 2013 +0100

    Use LinkedHashSet

commit e203618007a270373d17e6f059dbdd26d5a684ff
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 11 09:55:43 2013 +0900

    Travis CI branch whitelisting

commit 8f5eaaa740c6c58ddda48b7279a04aeef1d1eea7
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 11 09:46:36 2013 +0900

    Make StreamTest finish sooner to make CI happy

commit 5bcde105576193a4b225fe4f1b167d2e4ab44e4e
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 11 09:20:20 2013 +0900

    Clean before installation in Travis CI

commit 24c3b3f6e74bf649f25684b5635e2092b7d9cb46
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 11 09:14:06 2013 +0900

    Run full build on Travis CI install

commit 27b2f1304b352cc15901b0b5dff90be469176e9c
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 11 09:11:11 2013 +0900

    Why don't CI services upgrade to Maven 3.0.5?
    
    Do they just wait for someone to exploit the vulnerability?

commit 5d65bbc0a9b9c7ab9b81ac4fc06bd08e7668ec94
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 11 09:09:46 2013 +0900

    Add package-info.java for the Stream API / Print maven version on travis CI

commit 806e9b1f8cfbfcdc0ff22a644de351b02aa7617c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Mar 8 14:05:40 2013 +0100

    Make sure we handle outbound messages of type ByteBuf special

commit 32efba34d8905c925c5f20421a3d280d9e395faa
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Mar 9 20:54:42 2013 +0900

    Initial implementation of the Streaming API
    
    This pull request provides a framework for exchanging a very large
    stream between handlers, typically between a decoder and an inbound
    handler (or between a handler that writes a message and an encoder that
    encodes that message).
    
    For example, an HTTP decoder, previously, generates multiple
    micro-messages to decode an HTTP message (i.e. HttpRequest +
    HttpChunks). With the streaming API, The HTTP decoder can simply
    generate a single HTTP message whose content is a Stream. And then the
    inbound handler can consume the Stream via the buffer you created when
    you begin to read the stream. If you create a buffer whose capacity is
    bounded, you can handle a very large stream without allocating a lot of
    memory. If you just want to wait until the whole content is ready, you
    can also do that with an unbounded buffer.
    
    The streaming API also supports a limited form of communication between
    a producer (i.e. decoder) and a consumer. A producer can abort the
    stream if the stream is not valid anymore. A consumer can choose to
    reject or discard the stream, where rejection is for unrecoverable
    failure and discard is for recoverable failure.
    
    P.S. Special thanks to @jpinner for the initial input.

commit b4bf565ad92648c3703f344db78de85f20520c26
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 11 08:47:12 2013 +0900

    Travis CI configuration

commit 0a1bc86569adfeef662f6d84fb06ff80dfed4880
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Mar 10 21:07:19 2013 +0100

    Javadocs cleanup / added

commit 0504a442aefa918af7e70872b589ad73ccad5863
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Mar 10 21:06:59 2013 +0100

    Check for NPE and also optimze HashSet allocation

commit 0ac5fd9f185e4f7ec2d32ac5075551c260625012
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Mar 10 19:50:26 2013 +0100

    Let BufUtil.retain(...) return the given object

commit ed825de4bffe5a6238c750f3fba3a492f9263211
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Mar 9 09:19:34 2013 +0900

    Fix a bug where TypeParameterMatcher raises ClassCastException when an instance with raw type parameter is given

commit 4f2e347625c39b22c3218ea61a62e8cddf74412f
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Mar 9 08:48:22 2013 +0900

    More concise exception message

commit fcd6becad90515db7c7cc3b3ae2aed481e826eed
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Mar 8 21:55:36 2013 +0100

    [#1136] Fix possible IllegalBufferAccessException when remove itself from the pipeline

commit 7b4c83b462c8f2a8708b935c631be6c339e782ed
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Mar 8 21:41:47 2013 +0100

    [#1135] Fix endless loop which will get triggered when an exception is thrown during freeHandlerBuffersAfterRemoval

commit b1775a3223e54e076f0abba85360a19ded368498
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Mar 8 15:38:17 2013 +0100

    [#1131] Codecs must not cache next buffer during processing

commit 8d7f1e282037ae13228e9a19dd22be9445fea6dd
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Mar 8 15:11:29 2013 +0100

    Add stacktrace to the IllegalStateException which is thrown if a Promise was notified before

commit fd3f923b528b6857c8b80e1638c08a4719def6c7
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Mar 8 08:20:46 2013 +0100

    Allow to specify the used buffer type for ChannelInboundByteBufHandler and ChannelOutboundByteBufHandler by configuration. As default it tries to use a direct ByteBuf

commit a9a29bdf3fd4b828a2c631b97a5cd33ae9de1dc2
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 8 11:21:08 2013 +0900

    Use I/O buffer whenever possible now that our direct buffers are as fast as heap buffers

commit 63116239acb5d2f9ea50b95684456a2b6a069adc
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 8 11:03:11 2013 +0900

    Always use EmptyByteBuf when a user attempts to construct a buffer with 0 maxCapacity / Make EmptyByteBuf remember the allocator it came from / Optimize EmptyByteBuf a little bit

commit 096e4c95efd2d8430002f5bfe2bb4200da715b4e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 8 10:39:52 2013 +0900

    Fix checkstyle

commit 12f1d969147b6a55625850d3f1f36da4c9f03a64
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 8 10:32:20 2013 +0900

    Relaxed memory access constraint of ReferenceCounted.refCnt() for potentially better performance / More precise reference counting for MessageBuf

commit 6ac9b17ddd306bcf3dceeb62134a7e38103ac2ac
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Mar 7 10:57:27 2013 +0100

    Make WebSocket codec also work when HttpClientCodec and HttpServerCodec is used.
    
    Also refactor the handshakers to share more code and make it easier to implement a new one and less error-prone

commit 41ab17b9bf424e001da4a3a6c830d54768aec86a
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 8 08:45:17 2013 +0900

    Fix inspection warnings in HashedWheelTimer

commit 16f4de7adba25b6d0388863987194c761a8af983
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 8 08:40:28 2013 +0900

    Use the original stack trace when translating SocketTimeoutException to ConnectTimeoutException

commit e66fc219ffe6621e71a409b078ace9cab87eac16
Author: Prajwal Tuladhar <praj@infynyxx.com>
Date:   Thu Mar 7 02:29:48 2013 -0500

    port fix from Akka for HashedWheelTimer
    
    Ported from commits:
    
    * https://github.com/akka/akka/commit/cb4e3536b0ed3483bd3636d7789c0ddcadafa2da
    * https://github.com/akka/akka/commit/7e590f3071bdf89a4aa9d7d262bac8923d85e754

commit 61d6c48365337fb3840ccfc8a3d097b294e360b7
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Mar 7 20:53:45 2013 +0100

    [#1036] Add special ConnectTimeoutException which is thrown if a connection failed because of a timeout

commit 9599bfd5699ae2d525a016592eb5de3f7dd681b9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Mar 7 11:09:23 2013 +0100

    Fix class-cast exception which is a regression introduces in 256c931db20fbfaf597e501b74a34fd850c7f948

commit 526dafca7505904f26460a46cbe0283e161a1e9a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 7 16:13:44 2013 +0900

    Fix checkstyle

commit 88cc8c17392502e037cd1d893a8b74c222d4a287
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Mar 5 21:41:19 2013 +0100

    [#1065] Provide Future/Promise without channel reference

commit 0f8fbac9f8a57ee2a57b186f575652d66e2b4979
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 7 12:51:07 2013 +0900

    Fix a problem in SslHandler where it doesn't work with TLS False Start
    
    .. as suggested by @justinsb

commit 148abe52f92ef59d21999e7706d0df4dc5dfd685
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 7 12:43:16 2013 +0900

    Reduce the amount of memory used for handler names
    
    - Fixes #1123

commit 303f83043b200d940ac1d82ae23392de61f18fb3
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 6 18:23:08 2013 +0900

    Fix checkstyle

commit 88df53ec1a53912c2e34892247c8218c2fa01838
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 6 18:22:16 2013 +0900

    Fix infinite recursion when transferring data between different type of buffers / Add ByteBuf.hasMemoryAddress/memoryAddress()
    
    - Fixes: #1109 and #1110

commit 3d6d9f394d763aaed47fdd0c86023afebe3c5a9f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 6 17:10:26 2013 +0900

    Fix checkstyle

commit 81ce0555e622122d5bfe57bc98bebbe412132875
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 6 16:01:46 2013 +0900

    Add UnpooledUnsafeDirectByteBuf and use it when low-level access is available
    
    - Remove PooledUnsafeDirectByteBuf.setMedium() which is redundant
    - Fix constructor visibility

commit 6c3d5ed907042a04c362c3bb3c0eb386f07bfa9d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 6 14:56:27 2013 +0900

    Use _set* in AbstractByteBuf.write*()

commit 1c1570ffc43de209f46465c526faa891bd6e4a87
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 6 10:32:29 2013 +0900

    Make field access via ByteBuf.read/write*() faster by avoiding unnecessary boundary checks
    
    - also disabled a time consuming test that is actually a regression test

commit 5f2c2cdc9b094c1e13bcffa531da0701240b5b4a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 5 23:55:41 2013 +0900

    Fix a bug in PoolArena and PoolSubpage where subpage pools are not updated correctly
    
    - Make PoolSubpage a linked list node in the pool
    - Now that a subpage is added to and removed from the pool correctly, allocating a subpage from the pool became vastly simpler.

commit 6e5bb87219132dcc20240ffe2e316f60ac14f42d
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 5 18:42:34 2013 +0900

    Re-enable some critical tests

commit c5f606e63230b32bcecf0ffdf037f3da2cb2300d
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 5 18:06:01 2013 +0900

    Warn in case of incomplete low-level API

commit 4cb023f190d5739b0c19077d309e3d3ae24e482d
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 5 17:59:31 2013 +0900

    Add more variants of ByteBufAllocator.ioBuffer() / Update Javadoc

commit 8d88acb4a79830cb659a560e317be3ccfd94796e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 5 17:55:24 2013 +0900

    Change ByteBufAllocator.buffer() to allocate a direct buffer only when the platform can handle a direct buffer reliably
    
     - Rename directbyDefault to preferDirect
     - Add a system property 'io.netty.prederDirect' to allow a user from changing the preference on launch-time
     - Merge UnpooledByteBufAllocator.DEFAULT_BY_* to DEFAULT

commit a8a7c4f576181306570eb8de77511c3a9682eddd
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 5 12:52:05 2013 +0900

    Provide a way to implement an ChannelInbound/OutboundMessageHandler conveniently without extending an adapter class
    
    - Add ChannelHandlerUtil and move the core logic of ChannelInbound/OutboundMessageHandler to ChannelHandlerUtil
    - Add ChannelHandlerUtil.SingleInbound/OutboundMessageHandler and make ChannelInbound/OutboundMessageHandlerAdapter implement them.  This is a backward incompatible change because it forces all handler methods to be public (was protected previously)
    - Fixes: #1119

commit 307e6c47d8aec7356adff236e5d76170440ffaa4
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 5 15:25:25 2013 +0900

    Make hasUnsafe() return true only when all necessary low level operations are available for reliable direct buffer access

commit 256c931db20fbfaf597e501b74a34fd850c7f948
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Mar 5 07:34:34 2013 +0100

    Move exceptionCaught(..) back to ChannelHandler. Related to [#1118]

commit faaff91dd041b7100992eb60b6856c4de50ea7d2
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Mar 5 07:06:52 2013 +0100

    Fix checkstyle

commit 7e17f71b3068c5af2e0932e12a846efc0f78be49
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 5 14:27:15 2013 +0900

    Make PlatformDependent work with the platforms without unaligned access support

commit e4aa941bd440a433c7dab3a3d20ad98a3c1cf082
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 5 12:22:57 2013 +0900

    Simplify ChannelInboundMessageHandlerAdapter.inboundBufferUpdated() implementation

commit 0e3825899a6c7f4356a27bda541d8703572e563f
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 5 12:13:14 2013 +0900

    Move DefaultChannelPipeline.notifyHandlerException() to DefaultChannelHandlerContext / Always trigger exceptionCaught() at the handler that raised an exception
    
    - Related: #1118

commit 1603d9792dd972cdc6bd1b83a4e890cbe103c797
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Mar 1 11:45:48 2013 +0100

    Move methods from ChannelHandler to ChannelStateHandler like proposed in [#1107]

commit 3ac78b030a273fb574571f8e177ae02323194a88
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Mar 1 22:30:45 2013 +0100

    Improve javadocs

commit 03525f4b64cbc6811caa0a2604baa8aeba374b9f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Mar 1 21:42:08 2013 +0100

    Fix javadocs

commit 42dad6d9d48c909618ba4b92e8c70fd413753199
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 28 19:39:44 2013 +0100

    [#1106] Also handle FileRegion in ByteToByteEncoder and SslHandler

commit 881bd8eea35b76958a7c3d2c28051735059b86ec
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 28 10:37:55 2013 -0800

    Support array types in JavassistTypeParameterMatcherGenerator

commit b712b030fafb40b73dd5e209131cba8edd65489a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 28 10:29:03 2013 -0800

    Fix a bug where TypeParameterMatcher fails when a type parameter is an array
    
    - Fixes #1103

commit 6246825fda9332a421272ec649bd6ec0b3dd405a
Author: Justin Santa Barbara <justin@fathomdb.com>
Date:   Wed Feb 27 14:23:36 2013 -0800

    [#1100 ] Fix SPDY codec to work again in 4.x

commit b6038534cc432a27fb47ba8ec2a29b2a136217d8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 28 07:13:21 2013 +0100

    [#1101] Fix NPE which accour when send a 100-continue response and using the HttpContentEncoder

commit 977b6f3a2846b1d16a07cbb060c103d86ba12566
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 28 07:06:39 2013 +0100

    [#1101] Fix NPE which accour when send a 100-continue response and using the HttpContentDecoder

commit d4d01ba52c8c4c57f53386ae6e6505f91349772d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 27 14:31:29 2013 -0800

    Optimize SlicedByteBuf a little bit

commit cb202da8323aa91ff6aebdae0a6eb3beda4d460d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Feb 27 10:19:26 2013 +0100

    [#1036] Use SocketTimeoutException when a connection timeout is detected to make it easier to detect timeout vs refused

commit dc4c4ab6b9369caf5d7d1bb25ac994bd1dfd4e3e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Feb 27 07:52:42 2013 +0100

    [#1094] Fix possible StackOverFlowError when send FileRegions via the AioSocketChannel

commit 71f25d13e2685493d13a157190d068c0a79655ae
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Feb 27 07:52:01 2013 +0100

    [#1095] Fix AioCompletionHandler stackoverflow detection to executed callback methods in all cases

commit 49aa907bd05cc58c8ab1a6d72c85835fd7a30394
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 26 16:55:07 2013 -0800

    [maven-release-plugin] prepare for next development iteration

commit 5026c2f359e11ac24149be91bf44d34f6c0d0171
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 26 16:54:53 2013 -0800

    [maven-release-plugin] prepare release netty-4.0.0.Beta2

commit d7b782ab7b7d8292e7e33e004b77549e0b8697e4
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 26 16:48:01 2013 -0800

    Add examples to Xref

commit bfbd4da1a5b56f277003c1ef1bafc0c33fd49241
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 26 16:42:10 2013 -0800

    We actually need Xref for source browsing. We just don't need it for example browsing.

commit ec50293f5bebdc54d9fbb7558fec05edc36c11a3
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 26 16:40:12 2013 -0800

    Remove JXR plugin

commit 4b48a227bc2306f73f12afedba479618a96ae269
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 26 16:29:24 2013 -0800

    Fix broken url

commit 72c71dbf27c0f829cc79072605a3a60d33afb4bf
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 26 16:28:24 2013 -0800

    update README.md

commit 7e42695fc2b73c3d443cdeb90284b3ce4f9918f8
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 26 16:21:49 2013 -0800

    Update README.md

commit 671f9d48d4b65ba2b75a5106dfece636cb46b407
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 26 15:54:51 2013 -0800

    Use ConcurrentHashMapV8 wherever possible
    
    - Fixes #1052

commit f67441354a1536cc214d78bba6143a8b462784f5
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 26 14:54:25 2013 -0800

    Move logging classes from internal to internal.logging
    
    .. because internal is crowded

commit 334b6c3129934570ddc375d2160a523a0679aaa6
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 26 14:43:12 2013 -0800

    Reduce the memory footprint of DefaultChannelPromise even more (part 2)
    
    - Rewirte DefaultChannelFutureListeners - this saves another int field when there are more then one listener.

commit d8f55212100b6482bb3c760e1c5fb094a49990d3
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 26 13:52:49 2013 -0800

    Reduce the memory footprint of DefaultChannelPromise even more
    
    - Merge waiters and fluchCheckpoint into a single field
    - This limits the number of waiter threads to 2^24 - 1, which is still very large.  Can you imagine an application with 16 million threads?

commit 98192d7c0164879b2415a75eddca1d79b40c3539
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 26 13:05:58 2013 -0800

    Simplify DefaultChannelPromise
    
    - Merge success0() and failure0() into set()
    - Remove unnecessary local variable

commit 709f2dfb332fcd5272eb2c287d608d47e4545695
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 26 11:28:49 2013 -0800

    Add comment about why we need to count the depth of the stack in AioCompletionHandler

commit 0317baa10d271a28187f8bcd831ffbfa9ef5cc93
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 26 10:19:59 2013 -0800

    Fix regression in AioCompletionHandler that leads to StackOverflowError

commit eb2aa7f6d4aa959bbc1ab5ba84526474743cf75f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Feb 26 08:01:18 2013 +0100

    Cleanup

commit a03bd5105a7036ec76430699fbb9015d48785bcd
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Feb 26 07:47:30 2013 +0100

    [##1064] Fix problem where the LastHttpContent was changed to HttpContent and so the end was never detected

commit 30e7ab2f7d600791992637368afc240fb1068dfb
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Feb 26 07:33:04 2013 +0100

    [#1089] Correctly offer FullHttpContent if it is used to construct HttpPostRequestDecoder

commit 4d969b964f68e3821f72d71eacbe5cca2f4e1d37
Author: alexey <alexey@desktop.home.org>
Date:   Mon Feb 25 21:29:08 2013 +0400

    add fireInboundBufferUpdated to fix #1085 socksproxy example

commit a75d42060afe0e52d057dc8a2a93aebdf242e1c5
Author: Luke Wood <luke@lwood.me.uk>
Date:   Mon Feb 25 16:40:58 2013 +0000

    Correct links and maven artifactId in README

commit e45db60b5e0c6f1ad3b5c2c675d62948f021d571
Author: Luke Wood <luke@lwood.me.uk>
Date:   Mon Feb 25 16:04:40 2013 +0000

    [#1069] Snappy decoding fixes
    * Correct reading offset of 1-byte-offset copies
    * Keep track of how much we've written so far in order to validate offsets
    * Uncomment and reduce number of tests

commit e65e17c72477a7cd398190c3628bf96d224ea78a
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 23 21:10:53 2013 -0800

    Require Maven 3.0.5 to stop users from using insecure 3.0.4

commit 434610b18c3b17be97de20dfa0ad8ca13089ab34
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 22 13:45:17 2013 -0800

    Tell what the remote address was when ConnectException occurs.
    
    - Fixes #1082

commit 58c72acd42dd3024744ae0c780b03ac5675ddfb1
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 22 10:06:24 2013 -0800

    Add more failing tests to SnappyIntegrationTest

commit f6d88ca5bf213d8ae528ba1104652200dc77e6e5
Author: Luke Wood <luke@lwood.me.uk>
Date:   Fri Feb 22 15:23:47 2013 +0000

    Use Short.MAX_VALUE, as it accurately represents what we're trying to limit ourselves to

commit 0bfa9159e3bed62e0228e2b28a2081633d772dc5
Author: Luke Wood <luke@lwood.me.uk>
Date:   Fri Feb 22 14:09:29 2013 +0000

    Do not attempt to compress trailing data that is less than the MIN_COMPRESSIBLE_LENGTH

commit 7a8e9d79934d465ea7d8705512349ccd9a6284cc
Author: Luke Wood <luke@lwood.me.uk>
Date:   Fri Feb 22 13:51:23 2013 +0000

    Ensure that at least 4 bytes are remaining in input buffer when compiling our hash table in search of duplicates, and restrict encoded frame sizes to 32,767 bytes (2^15 - 1)

commit 12b392b4cc4a93383e8034141ab739591770d3ea
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Feb 22 14:42:32 2013 +0100

    Revert "[#1058] Add Channel/ChannelHandlerContext/ChannelPipeline.isWritable()"
    
    This reverts commit 4e36fbca58138447dab10d69933b1633938640b3.

commit 03b7b2d2970540f60c200ed3dcc855145b5f2a32
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Feb 22 14:41:05 2013 +0100

    Revert "[#1058] Fix incorrect logic to detect if ChannelHandlerContext is writable"
    
    This reverts commit 3acb22c38c7c37600827e8d9a478bce9b5f6432a.

commit fada776756b41800b0c613f9972600c1e49350c8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Feb 18 14:23:02 2013 +0100

    Refactor the aio transport to not depend on the AioChannelFinder and so not need for refelection

commit 17641d52fb14b9d8485a85c1d8d6de90f7e82bce
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 21 18:38:58 2013 -0800

    Integrate @timboudreau's SnappyIntegrationTest improvements

commit 273948055a5ae38a01f1f24f64026aaa1a8bf0a5
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 21 17:16:05 2013 -0800

    Fix #1075: DefaultChannelHandlerContext.fireChannelSuspended and fireInboundBufferUpdated do not work correctly if handlers with EventExecutor are added or removed from pipeline.

commit 08e2914cefb2c59c787e2cc66486f7f6ab321e5e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 21 15:58:15 2013 -0800

    Do not keep Runnables for the events that are triggered only once in most cases

commit dfbe4e48ae220c7e38014a08918fef3dfb463146
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 21 15:53:50 2013 -0800

    Remove cruft

commit 32affc8c8b3816a4a3e40e96c464d1be68600409
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 21 15:49:51 2013 -0800

    Fix regression in DefaultAttributeMap / Add Attribute.key() / More fine-grained locking

commit e262f425d22f07ee6a9f2e4533780a79a0b81261
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 21 15:24:50 2013 -0800

    Fix bad updatePolicy string

commit 1053ead62ddbbc024dc53dcc3297e5a8abf96735
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 21 15:24:15 2013 -0800

    Update snapshots less often

commit 0f46d4b3798be5a19578cb18db4762ca5dae3107
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 21 15:19:42 2013 -0800

    Revert 25c7a783a788b04f148c56f12d6efe1e11d093cd and fix #1064 differently
    
    - Rename inbound/outboundBufferFreed to inbound/OutboundShutdown which makes more sense
    - Move DefaultChannelHandlerContext.isInbound/OutboundBufferFreed() to DefaultChannelPipeline
    - Fix a problem where invokeFreeInbound/OutboundBuffer() sets inbound/outboundShutdown too early (this was the direct cause of #1064)
    - Remove the volatile modifier - DCHC.prev/next are volatile and that's just enough

commit a9a8d5d8c2fe8810f239f9946521c5ac19baa54f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 21 14:17:04 2013 -0800

    Clean-up

commit 6e73d5471c17b0c42bf515c50099ddbb9de4d9bb
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 21 14:00:59 2013 -0800

    Add back jzlib license file and notice

commit 9e67cce93209aadcb0439ac4251405baa413b510
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 21 13:58:13 2013 -0800

    Use BufUtil.retain() where possible

commit 6568cbfec42c07e2121a5adeb342b069fa0a065a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 21 19:38:23 2013 +0100

    [#1071] Remove Attribute from map after Attribute.remove() was called

commit 43ff36cef0cc19f4ac64a69fe2381a0b93a591e6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 21 19:31:05 2013 +0100

    Cleanup

commit 3acb22c38c7c37600827e8d9a478bce9b5f6432a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 21 15:55:04 2013 +0100

    [#1058] Fix incorrect logic to detect if ChannelHandlerContext is writable

commit 25c7a783a788b04f148c56f12d6efe1e11d093cd
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 21 15:53:04 2013 +0100

    Fix unneccessary use of EventLoop.execute(..) which gives some nice perf boost and also fix [#1064] as we had a race

commit b644d4e9319eadc16d662e6bcf894e1cfda1f728
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 21 06:59:49 2013 +0100

    Fix variable name

commit b56f60c7ff5e32cac39a01f9c6be8c47680ccfc6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 21 06:59:16 2013 +0100

    Make jzlib dependency avaible in example for zlib

commit 00310d96af495ebb5531242ca1f9fc4336c1cc9c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 21 06:48:53 2013 +0100

    [#1067] Fix bug which can cause IllegalBufferAccessException when using aggregator and deflater the same time

commit c93f5afa99c74e1a03cb19ccd198887f6e4003e2
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Feb 20 12:52:55 2013 +0100

    [#1012] Cleanup

commit 8fdf788cbdb2f3d769604106d9213b791c208d4c
Author: Atsuhiko Yamanaka <atsuhiko.yamanaka@gmail.com>
Date:   Tue Feb 19 03:45:11 2013 -0800

    [#1012] Replace forked jzlib with official jzlib and add a test.

commit 7f780f439a1a664186d5d7e8595d3c96e5187b87
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Feb 20 07:05:35 2013 +0100

    Limit flush and object allocation

commit 5bda3a25b04405ca8376676329e202eb7c51c788
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Feb 19 19:08:04 2013 +0100

    add more debug info about discarded message

commit 74738fbd08eec71dc6c8dd801f79e7f2e3e7f366
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Feb 19 12:21:08 2013 +0100

    [#1061] Add workaround to not use PooledUnsafeDirectByteBuf when running on latest OpenJDK6 because of missing Unsafe method

commit 4ed5b07e4e4cc91c2ba2ed266f92b3f7c176cd76
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Feb 19 09:43:31 2013 +0100

    [#1060] Fix bug in CompositeByteBuf which let the buffer expand in a incorrect way and so result in corrupted data

commit 891cf343ca1063947244851d1b7080819da56c8c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Feb 18 06:22:03 2013 +0100

    Remove fixed TODO

commit 4e36fbca58138447dab10d69933b1633938640b3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Feb 17 21:13:03 2013 +0100

    [#1058] Add Channel/ChannelHandlerContext/ChannelPipeline.isWritable()

commit 1c6ed9b2ce4a46f7c6e2cce3c176a9af1d42e358
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Feb 17 20:12:48 2013 +0100

    Add javadocs

commit e5c326949d6e2ddc29920e4b1823a4cc5fb18ffa
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Feb 17 08:38:16 2013 +0100

    Update proxy example to show to implement a proxy with manual read operations for optimal memory usage

commit 2f737d4e701289413d59d195c7c1d185005bdf06
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Feb 17 08:26:06 2013 +0100

    Make use of AUTO_READ to not accept traffic before connection is complete

commit 60ee9460a931ceecf9fee8412d2b1955607c5838
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 15 16:24:59 2013 -0800

    Outbound bridge is flushed only when its handler also implements ChannelInboundHandler
    
    - Fixes #1056

commit ee58de0698bde35363368fba267d95ace35e150e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 15 15:58:09 2013 -0800

    Require Maven 3.0.4
    
    .. because testsuite-osgi already requires that

commit 189c2785c012c3981af4b12a4d29ae1fc8d85a78
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 15 15:50:12 2013 -0800

    ByteBridge.flush() does not flush anything if the target buffer is not writable but expandable
    
    - Fixes #1055
    - fire inboundBufferUpdated() again if the bridge was not flushed completely.

commit dc43c2d8a9d8517cb64af2ddb5b462ba1249ddb9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 15 15:00:41 2013 -0800

    ByteBridge.flush() does not flush anything if the target buffer is not writable but expandable
    
    - Fixes #1055

commit d68a04a879e8458beb138879fc62436af33b2520
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 14 12:56:24 2013 -0800

    [maven-release-plugin] prepare for next development iteration

commit 59e638f8f5f801618cf82bbbc97aee4a79f4db93
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 14 12:56:15 2013 -0800

    [maven-release-plugin] prepare release netty-4.0.0.Beta1

commit 39442a3663931fc2c20a6b25e761603384d6f6c1
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 14 12:48:42 2013 -0800

    Fix tarball packaging

commit acbb38653983c972ae5f76a8268b636adbf6b622
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 14 12:45:23 2013 -0800

    Fix all-in-one JAR artifactId

commit 31f5b7b86ca7ac96f14435e47b711409af1572a4
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 14 12:43:16 2013 -0800

    Skip testsuite-osgi-exam tests during release

commit 27e0ec1586d6eec906ce103ca13779d4a653db81
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 14 12:21:30 2013 -0800

    Indentation fixes

commit eeae6f993c3f8c096f06a9614957e869862d42de
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 14 12:15:58 2013 -0800

    Microbench doesn't need to be an OSGi bundle

commit 66205f619c0fa0f96419bd39223a3cea2976d3da
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 14 12:11:25 2013 -0800

    readme.md -> README.md

commit 1011227b88bae1d30c4ff63e0c779d192a0c06af
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 14 12:09:16 2013 -0800

    Remove apiviz tags - we are focusing on user guide instead and putting diagrams there

commit 6201fb98c75a02757691afad0a2922f9e165de63
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 14 11:55:58 2013 -0800

    Remove APIviz doclet

commit ba4c0e6194ba2953cc6bbad6623204a7f059dcb8
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 14 11:52:28 2013 -0800

    Add microbench to the module list

commit 54ac1cd420b0de5604e9bbece37d3825f8ec793b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 14 11:51:55 2013 -0800

    Fix build issues in microbench / Disable tests by default

commit e0cdeaaa2a15aa4b0cf43c7f89688433c04278e3
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 14 11:47:03 2013 -0800

    Revert the bad commit from maven-release-plugin

commit aa64209f9f7777eb2767413c04b9831e6e736806
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 14 11:45:49 2013 -0800

    [maven-release-plugin] rollback the release of netty-4.0.0.Beta1

commit 6fc86d0454b5583349661a3343b445ea2a0a63a7
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 14 11:37:49 2013 -0800

    Comment out compiler options to work around MRELEASE-715

commit 1e32835fbccc4b0547f8ab002f925388acd85cf2
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 14 11:33:51 2013 -0800

    Include testsuite-osgi as part of the build

commit c457c3e6d6251035b9541d593782cbdc65cd68bf
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 14 11:27:26 2013 -0800

    Rename verify -> testsuite-osgi / Ensure testsuite-osgi runs without ~/.m2/settings.xml changes

commit 1f3068fc6a6646cf5b4db9595950a0bf4678b3a1
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 14 11:19:05 2013 -0800

    Remove UTF-8 encoding configuration spread over poms

commit 7c002504a15324c2a3ca9ca4c6182fa99fa48ccb
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 14 14:28:47 2013 +0100

    [#1051] Increment by the correct value

commit 6983f704c0882dd322bc1cf0c7c1c635e4b05ea5
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 14 11:18:12 2013 +0100

    Fix unreplayble error

commit 54435a908fbcbfae4bb35e4ccf2d04cc761b4b4c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 14 09:36:27 2013 +0100

    Make internal class final and package private

commit 742db71a524496c8be21f49b472542cbddc05d4c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 13 23:56:55 2013 -0800

    Fix IllegalAccessError when Javassist is used

commit 7b0bf2da7e421af6661945dd82579ed524716724
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 13 23:19:01 2013 -0800

    Use double-checked locking idiom + volatile optimization

commit 4eff91df99a5ab0f443a7beab2cf4b2f0e25d6ff
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 13 22:53:10 2013 -0800

    Fix a bug where DefaultChannelPromise.failure0() always returns false / Revert a bad commit

commit 537057340067de07d445513cacb45613b414eef6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Feb 13 08:09:33 2013 +0100

    Change ReferenceCounted.retain* to return itself and so allow method chaining

commit 53c27ef5aeec29e8b04698a9dea40f482b1ae5c9
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 13 19:02:55 2013 -0800

    More robust type parameter detection
    
    - Also removed unnecessary constructors which were added due to incomplete type parameter detection logic

commit d0a3c2d95e446a25fd2b1a2e9e22e0b1c4bb5504
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 13 16:38:20 2013 -0800

    Reduce the memory footprint of DefaultChannelPromise

commit e2c948782b942d79911cec09c8862de0948b31e4
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 13 16:36:53 2013 -0800

    Fix a problem where flush future is set more than once

commit 6fe6456f8d7520bf2818e3048514aad6accdd50b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 13 15:33:09 2013 -0800

    Fix indentation

commit 7cefd10d9fe5afd27baa5963c43db17f9a63b994
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 13 15:32:35 2013 -0800

    Fill/flush bridges only when necessary

commit 87efff0bca06ef4f90081a7f687e7da816ba1206
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 13 15:17:10 2013 -0800

    DefaultChannelHandlerContext.removed doesn't need to be volatile

commit dc8ae16e61c2852bee16c12b612df2b9c8c588b0
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 13 15:16:40 2013 -0800

    Make inByte/MsgBuf final

commit a1540a49d3db2ba9534c670bcafe7b132a35476a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 13 14:58:21 2013 -0800

    More safety in DefaultMessageBuf

commit a3cb3651d0b4d41f03dc376af92e9ed72651a29d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 13 14:44:59 2013 -0800

    Use promise.isDone() instead of additional flag / Remove printStackTrace

commit a8216e7ce011a595bc5eaf12ecabb0f4526eda6f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Feb 13 09:52:07 2013 +0100

    Fix possible NPE

commit 7cf7d7455d17c7a30266edef6bc6b21b9b86cf03
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Feb 12 20:46:39 2013 +0100

    [#1048] Make sure the promise is not notified multiple times on failure

commit 17e37fdfe6ccd397cee3e41e12975a527f722f6b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Feb 12 20:34:59 2013 +0100

    [#1047] Not process with flush on failure

commit fcba55329c1bc7072d8c9a0e43f382c139a710ab
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Feb 12 20:32:27 2013 +0100

    [#1046] Make sure HttpContentEncoder calls ByteBuf.retain() if needed

commit 1cc04e7ddadd5fbe2471dfbb111c4d63ddb0599d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Feb 12 11:14:16 2013 +0100

    Remove reference to metrics as it is not used anymore

commit 151cf0c7824cdc1aa9572b91f898918502427970
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Feb 11 20:32:59 2013 +0100

    [#1041] Fix reference to HttpObjectAggregator

commit c1783cc8d3b4d763aed7f832bda6964110a65b56
Author: Luke Wood <luke@lwood.me.uk>
Date:   Mon Feb 11 13:20:51 2013 +0000

    More fixes to snappy: * Make Snappy.decode stateful instead of relying on the uncompressed length being equal to the compressed length * Correctly handle copies where offset < length * Take copies from the output buffer in decoding * Make the maximum encoded chunk size 32kB for compressed data

commit 30bcc72b4409fefd5075bf39420a6690e5a2d419
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Feb 11 14:16:45 2013 +0100

    [#1038] Remove ChannelHandlerContext.replace*Buffer() methods

commit ab3aa786d7a2b59d716993d13cd8888641b88e1b
Merge: b258a6d 00e059b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Feb 11 12:52:08 2013 +0100

    Merge branch 'master' of github.com:netty/netty

commit 00e059b064fe7294ce1b2387b95a8ce405f80c63
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 11 20:44:37 2013 +0900

    Fix intermittent test failure

commit 5218f38ed0cbe3ac4623dfca38c7094daecdcb6d
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 11 20:37:31 2013 +0900

    Use InternalLogger in our code / Use jul in examples

commit b258a6de661b3afd2894b5b0d3bf575159081a7f
Merge: 291bcab 3f16f0b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Feb 11 12:31:44 2013 +0100

    Merge branch 'master' of github.com:netty/netty

commit 3f16f0b4d23f616c0cd716b83394c676ef77bbdb
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 11 20:17:35 2013 +0900

    Do NOT use InternalLogger in examples

commit b4f4b957393428b04b003596bd3eab9fd8f54c68
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 11 20:08:18 2013 +0900

    Move io.netty.logging to io.netty.internal / Move Signal out of internal because we use it in Channel*MessageAdapters

commit e847fa64373be4e9e74d2924d78be2c575013d4d
Author: Artur Dryomov <artur.dryomov@gmail.com>
Date:   Sat Feb 9 13:27:26 2013 +0300

    Fix code indentation in the readme file.

commit 5f891952476515100a014a89d60e32277c6079be
Author: Roman Stoffel <roman.stoffel@gamlor.info>
Date:   Mon Feb 11 11:09:39 2013 +0100

    Fixing generic <> in documentation to display properly

commit a91c6596c47be14ffd8185d699edf4d140a0029b
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 11 19:43:53 2013 +0900

    Add TODO

commit a2e5cd94bebc4e917401e87fecb5bc14de489c6f
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 11 19:42:23 2013 +0900

    Prettify APIviz / Tighten visibility / Move subclasses to top level / Remove unused UnknownSocksMessage

commit 291bcab9f966d0ba01fb73f8933af4697474087a
Author: Roman Stoffel <roman.stoffel@gamlor.info>
Date:   Mon Feb 11 11:09:39 2013 +0100

    Fixing generic <> in documentation to display properly

commit 6c7bd6d174c6f562035b40171d4403e87cc51873
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 11 18:42:31 2013 +0900

    Tighten visibility

commit d5105834d6de58cec46408d7714a7a0c5d321d43
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 11 18:41:37 2013 +0900

    Hide SnappyChecksumUtil

commit 4aacf50758fd5cf3b8c04f4f559785be88612d60
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 11 18:33:15 2013 +0900

    Prettify APIviz diagrams / Remove an empty package

commit f98da73612b65a12698335968d1928fd8a4acfe0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Feb 11 09:44:04 2013 +0100

    Allow for method chaining

commit 707f910d2bdfc8956dd3c8a53d41b929a1abf9fa
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Feb 11 09:30:31 2013 +0100

    Make Channel*Invoker package private

commit aca0d5fa68b01a26045ed6ff0c83c2f7f55820a1
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 11 17:19:53 2013 +0900

    Make CompositeyteBuf and MessageBuf call release() on its elements when it is deallocated

commit bf0bfe9a6949b15e3954ee9ccb7905e4eb12774d
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 11 16:52:43 2013 +0900

    Fix inspector warnings

commit 6f8a69b956a45e392046cc3f7955545745ec46b2
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 11 16:28:57 2013 +0900

    Clean up

commit a22725d9fa4f539e81ef212ecd7a50de41062134
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Feb 11 07:33:22 2013 +0100

    Let ChannelPromiseAggregator take a vararg of ChannelPromises and rename method

commit df53d6d7c5f42d3bfd6800fab080d106bd93c6db
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Feb 11 07:29:13 2013 +0100

    Tighten up visibility

commit 9228c97546bef7bc954c18d32d87170d66d469fe
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Feb 11 07:27:05 2013 +0100

    Tighten up visibility

commit 0e47fb50e29bf7b6236a49b1c21c179b3a1a1c35
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Feb 11 07:26:10 2013 +0100

    Tighten up visibility

commit 7e95be0295bb2fcb5dbc85a13d469d063f3b52c6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Feb 11 07:22:12 2013 +0100

    Support method chaining in ChannelFlushPromiseNotifier

commit ba71e3dcd0c660005a608424de52fa6bcc053047
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Feb 11 07:19:40 2013 +0100

    Don'T call ChannelPipeline.fireExceptionCaught(..) for outbound events

commit 0e341c9d7230429fb3aea2f641aeedab6ab0a03b
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 11 15:08:51 2013 +0900

    Fix covariant return types in ChannelConfig interfaces for method chaining
    
    - Does it really worth doing this? I'm tempted to remove support for method chaining for ChannelConfig.

commit dea1fde604ec44f929ca7b645341f9f64ad66d91
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 11 14:42:29 2013 +0900

    Self-referential type parameter fix

commit a7b5d45bdf22fe89c7d2dc2aa119429fbd7030c1
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 11 10:39:50 2013 +0900

    A little bit of optimization that reduces interestOps() calls

commit 488e56a9b165b2d3f339aa08237f960e74eaff0f
Author: Andrei Pozolotin <Andrei.Pozolotin@gmail.com>
Date:   Sun Feb 10 11:24:59 2013 -0600

    list all release modules explicitly

commit 565e10e0dbfbe70240d3a315cfbe9b62910c6048
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Feb 10 20:42:40 2013 +0100

    Only update interestedOps if needed

commit 775856b3dbc5da0e7db6590bf80250321a7100eb
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Feb 10 17:19:43 2013 +0100

    Use the same buffer type in ByteBridge as the context

commit e3b8f4dea8d4b5bac65f3b57cd39fb9138b869c1
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Feb 10 17:12:37 2013 +0100

    Make sure all resources of a ByteBridge and MessageBridge are released

commit 547d4c20b085b06641708bda098de488ad2d287c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Feb 10 14:40:17 2013 +0100

    Fix javadocs

commit 657f16bf2b7f2f209b98d36d4490f3449870d807
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Feb 10 14:40:03 2013 +0100

    Add ChannelGroup.deregister()

commit 33c94a98a327bdf233e0f2b2080b8d334da22a92
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Feb 10 14:25:53 2013 +0100

    Let FileRegion extend ReferenceCounted and add ChannelGroup.flush() , ChannelGroup.sendFile(..)

commit 4f6d05365a284edf2f692e11b573e971c258a1e7
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Feb 10 14:22:14 2013 +0900

    Fix a race condition in reference counter implementation / Reference count never goes below 0

commit bd0729ac45cfaadb734efe2594cbbaaee3bbeadd
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Feb 10 14:02:43 2013 +0900

    Make ChannelGroup.write(..) retain the message

commit 2f1a0b0593af284221230d79c8d30a2d7383d4e6
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Feb 10 13:31:31 2013 +0900

    Remove freeInbound/OutboundMessage(), replaced by ReferenceCounted.retain/release()
    
    - Related: #1029

commit b9996908b1fac66526395414cc5c3a14a1567d4e
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Feb 10 13:10:09 2013 +0900

    Implement reference counting
    
    - Related: #1029
    - Replace Freeable with ReferenceCounted
    - Add AbstractReferenceCounted
    - Add AbstractReferenceCountedByteBuf
    - Add AbstractDerivedByteBuf
    - Add EmptyByteBuf

commit 8f895a7e9a5bc78febc3a2d27345e88f4d66dd48
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Feb 10 01:50:49 2013 +0900

    More robust type parameter detection
    
    - now handles '<List<Integer>>'

commit 27190fcb7f00f725661cc71b3c2b3d76e22a005d
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Feb 10 01:35:01 2013 +0900

    Fix a bug where HttpContentDecoder emits duplicate HttpMessage or raises NPE

commit 61bbb04852211e0200b669e260a1696c39d58935
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Feb 10 00:46:30 2013 +0900

    Fix a bug in AbstractEmbeddedChannel where flush failure is not recorded

commit 46a249a26b8f6cff9967ca9a45326a2706b6b6e1
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Feb 10 00:33:41 2013 +0900

    Add more failing tests for Snappy codec

commit bd87284829d17ceaabd7b4bc348d9c1177b85aa9
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Feb 10 00:20:49 2013 +0900

    Clean up SnappyIntegrationTest / Fix checksum encoding

commit 8bd7ea2f93817339670b3d6eae7499582de7ead2
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Feb 10 00:03:47 2013 +0900

    Fix SnappyFramedEncoderTest & SnappyFramedEncoder
    
    - chunkLength is 3 bytes

commit 32687816076e1dc15a0b28c0208301cdcf8936b8
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 9 23:57:14 2013 +0900

    Fix SnappyFramedDecoderTest

commit 319b7fa69ac5f4ae53216097184ac2eac42caaab
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 9 23:39:33 2013 +0900

    Fix SnappyFramedEncoder/Decoder / Fix Snappy preamble encoding / Add test for #1002
    
    - The new test still fails due to a bug in Snappy.encode/decode()

commit 36f86305124e711712be5e587f783f904676e598
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 9 20:58:55 2013 +0900

    Make SnappyFramedDecoder more robust against corrupt frame

commit 2ac798347118656145a7ec63d12cce44922727ff
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 9 20:32:49 2013 +0900

    Do not trigger inboundBufferUpdated unnecessarily / Fix a bug in WebSocketServerProtocolHandlerTest / Fix a bug in forbiddenHttpRequestResponder()

commit 51daf2a6a2575a4114a3f4bd926f708a853e3d9d
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 9 20:11:16 2013 +0900

    Add ABORT signal to Channel*MessageHandlerAdapter
    
    - Related: #1030

commit 779870321ce6c0f070e08abfc9833f02b365ccc2
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 9 18:41:00 2013 +0900

    More precise close_notify handling

commit 139b1b8382a07b990c64c44e61f14f91fbecb35f
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 9 17:31:20 2013 +0900

    Add begin/endFlush() and closeOnFailedFlush to ChannelOutboundMessageHandlerAdapter / Make ChannelInboundMessageHandlerAdapter stop processing on first exception to avoid excessive exceptionCaught() events against pipelined messages.

commit cedcee3f4298a625393135e4fa21d9db2040f831
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 9 12:27:38 2013 +0900

    Reduce the potential contention caused by ResourceLeakDetector sampling

commit 4df737864e4b536efa85896897cb60ac3eff9d0e
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 9 12:21:30 2013 +0900

    Revert the previous commit (sorry!)

commit ea6113d7fbd3808fc57e7a29ac83bce10eaed695
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 9 12:20:10 2013 +0900

    Call PhantomReference.clear() from close()

commit 09b022e9263f8bab28928986656839ec9477b77e
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 9 12:14:52 2013 +0900

    Use PhantomReference insteadof WeakReference for resource leak detection

commit 42b21222dcfec8c7f388d961539888c47de25209
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Feb 8 19:54:05 2013 +0100

    [#1025] Allow to add extra headers to the websocket handshake response

commit 3a12a2db46fc93b1880b0b4d75c50f8f2c38e1f8
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 9 02:37:07 2013 +0900

    Fix checkstyle

commit 43af599d52628d85869c2401ce59dcf1a5e19222
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 9 02:09:37 2013 +0900

    Faster memory copy between direct buffer and byte array (part 2)

commit 9a676bc7d591a28b3111b4f9cbc4f9d75bd79f45
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 9 01:55:01 2013 +0900

    Faster memory copy between direct buffer and byte array

commit e424a2f4b3fef26adafeeff01322560720961909
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 9 01:27:54 2013 +0900

    Move flushTaskInProgress to AbstractUnsafe
    
    .. because it's referenced only there.  Also did tiny optimizations.

commit a4c66dc2824221d05e1fcfd54e4f1f4e2c125c40
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 9 01:05:33 2013 +0900

    Reduce the number of unnecessary Selector.wakeup() / Fix a bug where channelReadSuspended() generates garbage

commit 801f563e80fa53e5db8a0a250571f1a0a3dd0d3a
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 23:33:10 2013 +0900

    Take advantage of buffering in HttpSnoopServer
    
    - 50% higher requests/sec with pipeline enabled

commit affd514b8c16422052ca23637c9b2b70a651356e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 23:23:26 2013 +0900

    Rename ByteBufUtil to BufUtil and move ChannelHandlerUtil.freeMessage() there / Remove ChannelHandlerUtil

commit 0746199ca4bfe2b512150a0c25448679301171ed
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 23:16:54 2013 +0900

    Remove unreachable code

commit 44ea0a116f08a49e727c6b18957b4662ff6da9c8
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 23:07:20 2013 +0900

    Replace ChannelHandlerUtil.unfoldAndAdd() with MessageBuf.unfoldAndAdd() / Remove unused methods in ChannelHandlerUtil

commit 9475f9aeeadd5052bdf1dc16c643c46b8b5fb6f4
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 22:14:38 2013 +0900

    Add a system property that disables Javassist

commit 54d44c6ac1032aa5994cebf30dda45e13cf29735
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 21:45:14 2013 +0900

    Use byte code generation if Javassist is available.

commit a3b46ec9d75f6e7552db51e9f8ac5ac1b493bf1e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Feb 8 11:31:48 2013 +0100

    Fix a bug where a closed channel was tried to register with the eventloop

commit 2f12f95d9b6cee3c674cf25acfae9a08f07ab922
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Feb 8 10:40:46 2013 +0100

    Use correct index when try to find the type of the message

commit ff5aec0c78f18fcd4ef95afabe521f9c1427a028
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 18:21:07 2013 +0900

    Replace TypeParameterFinder with TypeParameterMatcher
    
     - We can avoid reflective matching using byte code generation.
     - Better matching performance when message type is Object

commit ee189d1da764a9425e4688a3f573f4acb4988376
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 17:57:20 2013 +0900

    Use finer grained type parameter in SPDY

commit 01e65a01c79ee35c9b621e592b59b7b073472c9d
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 17:41:43 2013 +0900

    Make ReplayingDecoder.newInboundBuffer/discardInboundReadByte() final for safety

commit 82c46180c98cf3fd96dab11aa6465f3e929c4098
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 17:37:16 2013 +0900

    Tighten access modifier of encode/decode()

commit 646cd455eabf3454d615896c822edbd788d1afb3
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 17:25:16 2013 +0900

    Fix incorrect exception message

commit 1eafffbec57dded19909fb83b7a17e91cb648f4c
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 17:24:29 2013 +0900

    Use thread-local map instead of ConcurrentHashMap for faster instantiation of handler adapters

commit b4eaedf7124fcf9f7c7327b4ff86cf68e4723ba5
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 17:17:39 2013 +0900

    Remove confusing ChannelState/OperationHandlerAdapter.inboundBufferUpdated/flush() implementation

commit d385cba41cd74f528443dd1425728d21ec151998
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 17:08:58 2013 +0900

    Fix method naming / Make super method final

commit 76eb40a4d2c8a651e6b58cdebd3773f84e79b754
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 17:07:01 2013 +0900

    Make ChannelOutboundMessageHandlerAdapter similar to ChannelInboundMessageHandlerAdapter

commit 1640b1fea6347ef328590d1a466faa92245a5862
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 16:12:32 2013 +0900

    Automatically detect the message types in  MessageToMessageCodec

commit 71136390f1dfde13eea8d3f2e1b70ffc672a1dd8
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 15:56:48 2013 +0900

    Extract type parameter finder code to a utility class

commit 1033bec4cdea56a4510ce83f1f5c69856219830d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Feb 8 07:48:47 2013 +0100

    AbstractBootstrap.validate() should return reference to itself

commit fa1b49de98b898d760859ee547352be544eb6c8f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 15:44:41 2013 +0900

    More robust automatic messageType detection for ChannelInboundMessageHandlerAdapter and MessageToMessageDecoder

commit 38ee575839cf1798310bc69b19fce54ae02df29b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Feb 8 07:41:24 2013 +0100

    Let ChannelGroupFuture.addListener(..) return itself to make consistent with ChannelFuture

commit 539418ecac08a2be9f5e6f0d0da502d7876df1b7
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Feb 8 07:24:55 2013 +0100

    Let ChannelPipeline.set* methods return itself to be more consistent with the reset

commit 32e0b597612a0c9050ba515de9970b520bae1fac
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Feb 8 07:10:46 2013 +0100

    Let ChannelPipeline implement Iterable

commit e5616c85c44baea110472aa58e33cd0c97e1a6cf
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 13:48:47 2013 +0900

    Automatic messageType detection for ChannelInboundMessageHandlerAdapter

commit f9eff516839eb3c05a9b6a25f9f7ac32de96aa97
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 13:24:27 2013 +0900

    Fix missing ChannelHandlerUtil.acceptedMessageTypes() in ByteToMessageCodec constructor

commit df65b9303298dcf1a3ebe5b12fabb03f85735326
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 13:05:27 2013 +0900

    Use Message<Object> instead of Message<I>

commit ac72c3512e1bf740b8b707da6a4c93a26cfb3755
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 13:03:45 2013 +0900

    Ensure ChannelInboundMessageHandlerAdapter.endMessageReceived() is always called after handling the inbound message queue. / Call fireInboundBufferUpdated() automatically if the next inbound message buffer was changed.

commit 9319e3ebd0ad4934da7380d2df91127bdb89e621
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 01:50:44 2013 +0900

    Fix SocketShutdownOutputByPeerTest failure
    
    - With half-close enabled, the selector loop was spinning due to uncleared OP_READ flag.
     - Added some delay to the test for more reliable failure

commit d8c0bf3be2a5bcfc761ff2e3a81468ef00f487db
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 01:36:41 2013 +0900

    Add the 'nextBufferType' parameter to ByteArrayEncoder like did to StringEncoder / Consistent parameter order

commit b8c0751023ad0da49e877050438b4c370bfe7f8b
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 00:41:35 2013 +0900

    Fix a regression where writing a ByteBuf are discarded

commit 30e80f8c5c7f0bb692dfd8efeadb24d1cf840be6
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 00:08:39 2013 +0900

    Fix a regression in ChannelInboundMessageHandlerAdapter
    
    - Should forward the unsupported message to the next inbound buffer rather than the next outbound buffer.

commit ec51b359c9d1ca36873b2de5251a7fbd8b4177f3
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 8 00:00:14 2013 +0900

    Fix checkstyle again

commit 9aa9d8a99b43022df02851a10272cce18be8f7e4
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 7 23:58:21 2013 +0900

    Fix checkstyle
    
    - Basically a workaround for IntelliJ's automatic import optimization

commit d4742bbe16bd4864bf824d5946de16382de72a73
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 6 12:55:42 2013 +0900

    Clean up abstract ChannelHandler impls / Remove ChannelHandlerContext.hasNext*()
    
    - Rename ChannelHandlerAdapter to ChannelDuplexHandler
    - Add ChannelHandlerAdapter that implements only ChannelHandler
    - Rename CombinedChannelHandler to CombinedChannelDuplexHandler and
      improve runtime validation
    - Remove ChannelInbound/OutboundHandlerAdapter which are not useful
    - Make ChannelOutboundByteHandlerAdapter similar to
      ChannelInboundByteHandlerAdapter
    - Make the tail and head handler of DefaultChannelPipeline accept both
      bytes and messages.  ChannelHandlerContext.hasNext*() were removed
      because they always return true now.
    - Removed various unnecessary null checks.
    - Correct method/field names:
      inboundBufferSuspended -> channelReadSuspended

commit 7eed272e57e33524bab4b06439d4c3b98b93b273
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 7 23:20:54 2013 +0900

    Add FilteredMessageBuf

commit a13246a2b6a22135997364695c813135d36cc6ce
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 7 15:34:38 2013 +0100

    [#1024] Limit the number of SelectionKey.interestedOps(..) calls for performance reasons

commit 611bb3284650ccbd93696c4f699d2d1d09ab431d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 7 15:09:58 2013 +0100

    Fix build of all-in-one jar

commit 582c6be45668a829480a6543599dd5b842768962
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Feb 7 14:20:17 2013 +0100

    [#1023] WebSocketClientHandshaker00 now also work with non heap buffers

commit d98fbf7a82c11c6b6530163bbba544752e885c37
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Feb 6 21:31:30 2013 +0100

    Upgrade to new barchart-udt-bundle

commit f09b85f4e71c4474b0b7a32efc39b7b38bcca93d
Author: ursa <Kuzma.Deretuke@gmail.com>
Date:   Wed Feb 6 18:42:19 2013 +0400

    Add test for HttpPostRequestDecoder: validate '\r' symbols in the end of binary stream are parsed correctly.

commit f24872c566419a71c92ec338706920d026e1179c
Author: Andrei Pozolotin <Andrei.Pozolotin@gmail.com>
Date:   Fri Feb 1 05:51:50 2013 -0600

    [#1010] Add verify module to check osgi bundles

commit 56b1a18de04895febc849b0b3d6dfa4ac53548f3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Feb 6 08:04:49 2013 +0100

    Upgrade barchart udt bundle

commit fd75615d7a93909461e7685f1f8206ef9261335c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Feb 6 07:57:11 2013 +0100

    [#870] Convert all modules into osgi bundles

commit 992d431a95787070f326cd8e68e044e510ce722e
Author: ursa <Kuzma.Deretuke@gmail.com>
Date:   Tue Feb 5 16:38:19 2013 +0400

    Fix line-end detection for binary streams upload.
    
    - Related: #1016

commit 46bedb81516bc21d2c01a05a64c2aa69bb2802ea
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Feb 5 20:29:38 2013 +0100

    Add javadocs to make contract more clear

commit 86b4cde82f3e774376fdc4e48af99f7c80e05753
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Feb 5 16:19:04 2013 +0100

    Make sure the inbound/outbound buffer of the ChannelHandlerContext is only modified within the EventLoop

commit fd40df9033d204bf992c64213730af6858868558
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 5 18:49:45 2013 +0900

    Rename the artifact 'netty' to 'netty-all' and make it non-OSGi
    
    - We are going to make individual modules OSGi

commit 598e70fd8fd01620e9324665d67f99fd97ae3338
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 5 18:48:19 2013 +0900

    Upgrade to netty-build-16

commit cb4b6734561e1d2aae52dd6168369d35899cc282
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 5 17:06:56 2013 +0900

    Disable AIO transport tests on Windows
    
    - Related: #726

commit 2e44a1ba91557d4d6231bd46c63697776208bc9e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 5 16:27:37 2013 +0900

    Fix test failures in SingleThreadEventLoopTest on Windows
    
    - It seems like Windows sometimes sleeps less than specified.
    - Related issue: #726

commit 5b81e1692dce59992c13c2ab8774ece1a8c48e52
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Feb 1 10:32:27 2013 +0100

    Move non socket specific stuff out of the socket package, part 2

commit ade3cc1329b8c44974ecb8808c20da73a507683c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Feb 1 09:02:26 2013 +0100

    Move non socket specific stuff out of the socket package

commit bfe44180f94e53a732e2fb77c01006fb97e4a54a
Author: Luke Wood <luke@lwood.me.uk>
Date:   Thu Jan 31 10:42:05 2013 +0000

    Fix SnappyFramedDecoder issues
    
    - Checksum header was being incorrectly read due to incorrect order of
      shift and masking operations.
    - Length field of 1-byte copy was being incorrectly interpreted due to a
      typo in the binary mask used to extract it.
    - Use ByteBuf.readUnsignedByte() instead of readByte() & 0xff
    - Use bitwise-OR wherever possible
    - Use EmbeddedByteChannel to test
    - Use ByteBuf comparison instead of array comparison
    - Work done by @lw346 and then revised by @trustin

commit 2ec932798f7e81a3c13182838b91babb096d238b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 31 23:39:57 2013 +0900

    Replace .readable() and .writable() to .isReadable() and .isWritable()

commit 42c65cca3a523a030cd8afc81f5642220f62f084
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 31 23:28:08 2013 +0900

    Make MessageBuf bounded
    
    - Move common methods from ByteBuf to Buf
    - Rename ensureWritableBytes() to ensureWritable()
    - Rename readable() to isReadable()
    - Rename writable() to isWritable()
    - Add isReadable(int) and isWritable(int)
    - Add AbstractMessageBuf
    - Rewrite DefaultMessageBuf and QueueBackedMessageBuf
      - based on Josh Bloch's public domain ArrayDeque impl

commit ec013bf2d346ab1c5468210886d2368f3544f88a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 31 15:50:27 2013 +0100

    [#983] Force the user to implement an actual ChannelInboundHandler or ChannelOutboundHandler
    
    For this ChannelInboundHandler* and ChannelOutboundHandler* was made package private

commit 1f2aca02da00d0492b20849383a12bde2d365ae9
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 31 21:02:56 2013 +0900

    Add more compiler plugin options to make compilerArguments works

commit db37652f2a472f105e73a97e46d68d2d63238284
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 31 20:57:58 2013 +0900

    Add compiler options to find unchecked/deprecated code

commit 2ad1451ce8211df9ce12db48908b531948977de4
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 31 11:49:52 2013 +0100

    Fix semantic of DefaultAttribute impl on setIfAbsent

commit 2d9cc9f63beb5d0c381320ba18ae7b573d2612ee
Author: Courtney Robinson <courtney@crlog.info>
Date:   Wed Jan 30 17:02:33 2013 +0000

    Allow to specify the mode the encoder uses for form params. This allows it to be used with OAUTH
    
    The OAuth 1 spec has small deviations from UrlEncoder.encode's output.
    
    + Percent encodes the parameters
    + Added tests to verify
    + See relevant OAuth section
    http://oauth.net/core/1.0/#encoding_parameters
    + Detailed explanation http://hueniverse.com/oauth/guide/authentication/

commit b46760f93fd1b50c7aa4562395a3173fc1e1239c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 31 14:11:54 2013 +0900

    Upgrade to netty-build-15 to fix build issues

commit 071b067b3f370c3eb6a0e5b4f8a730169c6d0445
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 31 12:28:27 2013 +0900

    Add missing file
    
    - Related issue: #1003

commit 073517dc63257020396f8ecb1f3bd8d1cfd1717f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 31 12:27:57 2013 +0900

    Rename localtime to worldtime so that a user thinks it's a local transport example
    
    - Fixes #1003

commit 39357f3835f971e6cc1a0e41a805fa1293e7005e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 31 12:17:09 2013 +0900

    Enable TCP_NODELAY and SCTP_NODELAY by default
    
    - Fixes #939
    - Add PlatformDependent.canEnableTcpNoDelayByDefault()
      - Currently returns false on Android. Will change if necessary later.

commit 152c969eab2d780993686e57798ae7467058ec17
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 31 11:34:28 2013 +0900

    Make Bootstrap and ServerBootstrap thread-safe
    
    - Additional fix for: #970
    - Use LinkedHashMap again to save memory consumption
    - ServerBootstrap now makes a copy of child parameters so that modifying ServerBootstrap after bind() does not affect the already-bound servers. This also makes child channel initialization potentially faster due to reduced garbage iterator.

commit 604b359d9e31857b775bae3864c79faecea19ff0
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 31 10:22:03 2013 +0900

    Use InetSocketAddress(0) if no localAddress is specified for connect() operation in UDT

commit eeab6767db852d251bb86a7f4363fb31c9f07d03
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jan 30 21:38:15 2013 +0100

    Tighten up generics on ServerBootstrap again as it was fixed in UDT

commit 82f876f7db96810e16648ca3afd3eaad4a0298ad
Author: Andrei Pozolotin <Andrei.Pozolotin@gmail.com>
Date:   Wed Jan 30 13:24:21 2013 -0600

    [#999] Refactor UDT transport to make use of the ServerChannel interface

commit 97ea338bceeb58139203b3394d3260bf8749bdd6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jan 30 20:58:07 2013 +0100

    [#971] Fix a bug where the HttpContentCompressor was try to start compressing on an empty response

commit 641db5cdfe558ad56ce9ff54dc203b63be34e85a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jan 30 20:40:06 2013 +0100

    Only write the header as it should be

commit cff2edf75d5cc9c397dff14f918755912f8d4dcb
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jan 30 19:02:29 2013 +0100

    Remove not used enum

commit 33c9f3f1e5a6dd0e1f685b0ea168e90dec6ef3ec
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 30 22:04:20 2013 +0900

    Relax ServerBootstrap type constraint to support UDT properly

commit 05d16cd361c37de21426e6af053d1bc8a10054af
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 30 21:55:10 2013 +0900

    Made Bootstrap and ServerBootstrap copy constructors private as suggested

commit b1b0319bbe07e171351df55ab1e2c676e91cf4bf
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 30 21:46:59 2013 +0900

    Fix build errors and warnings

commit 1bb003d9ae31ca0fa52cc115feb9116b5f78b401
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jan 30 13:41:41 2013 +0100

    [#995] Replace AtomicReference usage with AtomicReferenceFieldUpdater
    
    This will safe as an example 2gb mem when have 10 DefaultHandlerContext instances per connection and the connection count is 1000000.
    Also kind of related to [#920]

commit 03de5f479a56f96827229ec6af97f2fcf348d813
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 30 21:43:37 2013 +0900

    Fix build errors

commit 23438de66f82c72720b092c539bb430995722d2d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 30 21:40:49 2013 +0900

    Move AbstractBootstrap.ChannelFactory out of AbstractBootstrap and hide AbstractBootstrap from a user
    
    - Fixes #998
    - Also generified ChannelFactory

commit 86135a408049d53b973a357e14aa93455c9b5eec
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 30 21:14:23 2013 +0900

    Make ServerBootstrap final
    
    - Related: #997

commit 7c50c1e2e64a1b2400e2e823d5ffb1242a79b4de
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 30 21:12:02 2013 +0900

    Make Bootstrap and ServerBootstrap implement Cloneable and rename duplicate() to clone()
    
    - Fixes #997
    - Replace duplicate() with clone()
    - Add copy constructor for simplicity
    - Can now clone invalid/incomplete bootstrap
    - Upgrade to netty-build-14 to disable SuperClone checkstyle module
    - Finalize class hierarchy so no subclasses are introduced

commit bd0339ce1af5d6f27172eb7a722be2f4036196cb
Author: Luke Wood <luke@lwood.me.uk>
Date:   Wed Jan 30 10:52:31 2013 +0000

    Fix buffer over-run in Snappy codec when emitting a copy that leaves < 4 bytes remaining

commit 64e6c4021d4cdb71e1433da8c0080107b47a1bd0
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 30 20:14:59 2013 +0900

    Use the clearer parameter names that indicate the address is for Internet connections

commit 788d7e9b8bba11682c1013b6345e7831b36557ca
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 30 20:06:40 2013 +0900

    Remove Bootstrap operations that require a promise and add various ad-hoc bind() and connect() operations
    
    - Update examples to use the newly added bind() and connect()
      operations.

commit 291293a6dcc49bd61a004c11ce44d59a14675bf0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jan 27 09:03:29 2013 +0100

    [#980] Automatically trigger a read operation if isAutoRead() == false but we only had a partial decode

commit 3843cfd7024691e84f2468c20e84bdf605e7558f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 17 08:31:55 2013 +0100

    [SPDY] Factor out headers into extra class like we did in http and support method chaining where possible

commit 238e03f75bf7d73b22b475f6f070223857613cd2
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jan 30 07:42:18 2013 +0100

    Add setters and getters back to Http Objects
    
    * This is done because we noticed that the previous change limit the usage more then it gave us any benefit. Now it is possible
      again to rewrite the url on the fly or reuse the objects when writing a proxy and so limit the GC pressure.
    * Fixes also #979

commit c5ccaee5065a52110a4124505002d6afeb7c13ca
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 29 15:59:15 2013 +0900

    Fix a bug in HttpPostRequestDecoder where character encoding is ignored when reading a line
    
    - Fixed #992 (backported from 3)
      - 9650cda163e0266a0f42495dc9201617e2a1f410
      - b38bde2d2b7e4ab99844e3018ebfd9f61c7028de

commit a54217053f54e06a6f2f8f89709b1568e5d00827
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jan 28 11:26:53 2013 +0100

    [#988] Fix typo

commit d7bfd44e1093740c573f855972b73ea19eccd8bc
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 24 18:58:05 2013 +0100

    [#982] [#977] [#858] Allow to transfer the content a ChannelHandlers inbound/outbound buffer on removal/replacement
    
    This changes the behavior of the ChannelPipeline.remove(..) and ChannelPipeline.replace(..) methods in that way
    that after invocation it is not possible anymore to access any data in the inbound or outbound buffer. This is
    because it empty it now to prevent side-effects. If a user want to preserve the content and forward it to the
    next handler in the pipeline it is adviced to use one of the new methods which where introduced.
    
     - ChannelPipeline.removeAndForward(..)
     - ChannelPipeline.replaceAndForward(..)

commit a27d1cc36595588896fbbd2ddeb0e5ee68c9901d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Jan 26 16:47:00 2013 +0100

    [#986] DefaultChannelHandlerContext.fireUserEventTriggered(...) uses correct ChannelHandlerContext now

commit cc278d45c2f6a3d1eeb1c449e4a1b0a83c56c04d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Jan 26 16:17:12 2013 +0100

    Disable test as this let fail the build 80% times on osx and slow linux servers. Need to investigate

commit 9da01417b25bca25af70f27246ab961166cd85bb
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jan 23 17:34:27 2013 +0100

    [#973] Use static IdleStateEvents to reduce GC pressure

commit b9aaf9a1670cd247b4177a26e3cf55b3293b849d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jan 23 07:35:44 2013 +0100

    [#977] Stop processing messages/bytes in a loop when the handler was removed from the ChannelPipeline

commit 3f72add89a41b3d94309bccb0d253515c0543b65
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jan 23 07:27:00 2013 +0100

    [#976] Fix exception which will be raised by ChannelInboundHandler.discardInboundReadBytes() and ChannelOutboundHandler.discardOutboundReadBytes() if the handler remove it self from the pipeline

commit a25f7fa2e5207a83413c2c4b07cd960c03bfda2c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jan 23 06:45:44 2013 +0100

    Revert "[#972] Correctly mark the ChannelPipeline once a ChannelHandler was removed and because of this a buffer was freed"
    
    This reverts commit 4ac3bace0f0578f8b84b3d3a2334d36448447f37.

commit 4ac3bace0f0578f8b84b3d3a2334d36448447f37
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jan 22 21:18:13 2013 +0100

    [#972] Correctly mark the ChannelPipeline once a ChannelHandler was removed and because of this a buffer was freed

commit 54af70f0674f93d76d399701da1a0f03647d4bac
Author: Brian Roach <roach@basho.com>
Date:   Mon Jan 21 19:48:06 2013 -0700

    Bootstrap thread safety
    
    Changed options and attrs from LinkedHashMap to ConcurrentHashMap to
    avoid a possible ConcurrentModificationException if a thread was
    adding/removing options/attrs while another was calling Bootstrap.init()
    or Bootstrap.duplicate()

commit ee9f30a2b95f220071383b77556c85d2c0ffde9a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jan 21 21:02:25 2013 +0100

    *ChannelBuffer* -> *ByteBuf* and ChannelBuffersTest -> UnpooledTest

commit 7b6cbdbb1e60435c539cc45c9452c35436b03c93
Author: Courtney Robinson <courtney@crlog.info>
Date:   Mon Jan 21 10:20:14 2013 +0000

    [#964] ByteBuf.readLine() must return null when no more data is available in ByteBuf

commit a91887cda745ead701dc80a0ceb6b78d40885de8
Author: Andrei Pozolotin <Andrei.Pozolotin@gmail.com>
Date:   Mon Jan 21 06:35:24 2013 -0600

    transport-udt tests should run only when provider class can be loaded and initialized

commit 318328bb064eee893bc14c82772d7ddcc3d7589f
Author: Luke Wood <luke@lwood.me.uk>
Date:   Mon Jan 21 14:12:23 2013 +0000

    [#957] Netty/Transport/RXTX: Add an optional wait time after opening the serial port but before configuration to allow the serial microcontroller to reset itself after opening.

commit 4192222b384d0da733d42bce740bb2f00ff8bd7d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jan 21 12:10:07 2013 +0100

    Rname StreamOioByteChannel to OioByteStreamChannel

commit 7316a3c65c433ac89ba9844f4b34cf55761bdb51
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jan 21 11:47:59 2013 +0100

    [#965] Allow to adjust the SO_TIMEOUT on the fly

commit 29bed32a89d20024d171bc46973ea99b9c6dd965
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jan 21 10:41:23 2013 +0100

    [#963] Fix invalid free-up of messages if they are only passed-throught in HttpContentEncoder and HttpContentDecoder

commit 082b5f0dff8de1c1e5e830a7c2346f6794ca239a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jan 21 10:14:21 2013 +0100

    [#962] Read data as soon as it is present in OIO and not wait till it match Buffer.writableBytes()
    
    - Also add a new abstract class called StreamOioByteChannel which can be used by OIO channel implementation which are Stream based as a starting point.

commit b20e59721720d9d444b13dd2a438144c090c6c55
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jan 20 11:18:40 2013 +0100

    Add RxtxChannelConfig and tighten up visibility. Also support method chaining

commit c1e827fd721dfe2da997f4f68cb89b47b0a1f4a9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jan 20 10:40:54 2013 +0100

    [#942] Add an option to disable decoding of chunked transfer encoding in HttpObjectDecoder

commit 57e504a7e66d91b030148b3a63302116f042b5ae
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jan 20 08:10:15 2013 +0100

    Add javadocs to the *ChannelConfig interfaces to make clear which ChannelOptions implementations are expect to support

commit 8b72a4c1e21093b8d4f523e54f0ad6b78f0ead13
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Jan 20 07:49:42 2013 +0100

    Remove netty-metrics-yammer as it does not exist anymore

commit 76d7829d38803f607329a987b6c8d31a7a528338
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Jan 19 17:22:28 2013 +0100

    [#960] Fix calculation of writerIndex() which was incorrect and so result in truncated DatagramPackets when using NIO

commit 1295f6d3315c3d3d4152575ec9325b6d73ba0913
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Jan 19 16:52:12 2013 +0100

    Fix formatting

commit d8f0e3fdf7f96fed869288ba44f21ed56aa6adb6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Jan 19 16:50:13 2013 +0100

    Add missing udp option

commit b60e0b6a51d59fb9a98918c8783265b30531de57
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 18 16:11:04 2013 +0900

    Modernize InternalLogger API and enable logging framework autodetection
    
    - Borrow SLF4J API which is the best of the best
    - InternalLoggerFactory now automatically detects the logging framework
      using static class loading. It tries SLF4J, Log4J, and then falls back
      to java.util.logging.
    - Remove OsgiLogger because it is very likely that OSGi container
      already provides a bridge for existing logging frameworks
    - Remove JBossLogger because the latest JBossLogger implementation seems
      to implement SLF4J binding
    - Upgrade SLF4J to 1.7.2
    - Remove tests for the untestable logging frameworks
    - Remove TestAny

commit e8636050ca2a098232491bb9ea8a5913a4062e49
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jan 18 08:21:09 2013 +0100

    [#864] Switch to single decoding mode on the protocol upgrade to prevent races

commit f2d84f75d67cf2c1b89f5c6aebab999c29f26e73
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jan 18 08:20:27 2013 +0100

    [#952] Allow to switch to single message decoding mode on the fly

commit 4dd462d0b501d15ec5b1adba2438d9d2a3c106cb
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jan 18 07:03:55 2013 +0100

    [#907] Stop flush if one outboundbuffer was freed and do the same for inboundBufferUpdated if an inboundbuffer was freed

commit cfa300f4315ffac89fdc1bba0673ce77eb3f98ef
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 18 14:12:35 2013 +0900

    Fix APIviz panic

commit ba8c8171fa8b8ebdf3bc748cb7d41257f860330f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 18 13:49:17 2013 +0900

    Fix leaks in buffer tests

commit b5c87b0f9c467aa7bb29eac90518bcf2ab69dad7
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 18 13:34:00 2013 +0900

    Fix failing tests

commit d0afe6cad0eafb0f79d4b38c2e172be9bbb1f0c5
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 18 13:10:54 2013 +0900

    Consistent exception messages

commit f670a7c923fa9ccd6c9703b82af2230408415d25
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 18 12:01:33 2013 +0900

    Enable resource leak detection during test

commit 24acfe7008587990bd42ccbdd680d07bc233fe76
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 18 11:08:57 2013 +0900

    Remove io.netty.monitor as discussed in #922

commit 2c7be32393f8b16c6c39b4506590b56bdddd71b2
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 18 10:49:53 2013 +0900

    Tiny optimization

commit 16f729cd95a6be1c79d86f54984bbd6fab84966b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 17 20:41:08 2013 +0100

    [#907] Prevent IllegalBufferAccessException which could be triggered if inboundBufferUpdated() was called once the channel was closed

commit 677886f470f5ead42ce6b725efea9dfaca86194c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 17 15:10:11 2013 +0100

    [#907] Prevent IllegalBufferAccessException which could be triggered if inboundBufferUpdated(), flush(..), write(..) was triggered after the channel was closed

commit 8a9e602a663c77af2e7e521ca4a9a7f38fc54262
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 17 09:37:17 2013 +0100

    Prevent possible ClassCastException

commit 737a3508546a125e900be9d1bb123952c0a81f20
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 17 09:30:57 2013 +0100

    Fix checkstyle

commit 4472fe9795357d2f623df503c45a8005cb20a3d5
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 17 15:06:46 2013 +0900

    Remove 'get' prefix

commit eacc474cda79a3f739a3019b391767a59d28f9ba
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 17 14:48:03 2013 +0900

    Remove 'get' prefix

commit 5a82dccbc540e6a0155a9cf23091a5c9bc43a63a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 17 14:43:59 2013 +0900

    Tighten visibility

commit dfbecb796c0beda55c066c873771f507a93cc3bb
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jan 11 07:46:56 2013 +0100

    [#910] Make use of ByteBufHolder in SPDY, HTTP multipart and WebSockets to allow for buffer pooling

commit f568aa42f08fbd0f99e30607d5b0e05579bd50ef
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 17 14:14:41 2013 +0900

    Hide the constructors of ChannelOption to force using dedicated option type

commit ad15155f04e8d5eb136fcebb541457820573b8c1
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 17 13:55:48 2013 +0900

    Ensure cascaded derivation of a buffer does not result in an infinitely nested buffer.

commit d806e3bf81823b6c4ba51274545124a564f6631b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 17 12:05:43 2013 +0900

    SwappedByteBuf.unwrap() should return null
    
    Fixes #945.  For swapped wrapped buffers, it should not return null.

commit 5b17307b1f20061f2273bcef37aa072f9ca10f04
Merge: e95d3de a192cfd
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Wed Jan 16 10:48:40 2013 -0800

    Merge pull request #946 from jpinner/spdy_fix_compression_master
    
    SPDY: fix improper use of SYNC_FLUSH in SpdyHeaderBlockZlibCompressor

commit a192cfdbf0ca1a7959d87c51ef00d0f72be02450
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Tue Jan 15 09:40:21 2013 -0800

    SPDY: fix improper use of SYNC_FLUSH in SpdyHeaderBlockZlibCompressor

commit e95d3de1ffd09a7e4896482a396b7e7120f0476d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 17 00:50:43 2013 +0900

    Fix a bug where HttpContents are freed too early

commit 4ee11cd36fe579d23cf0a36507e8fe27e9ac2862
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 17 00:42:51 2013 +0900

    Fix bad test name

commit 3b79008eda1315e7515aadaeac7224b4cda073ad
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 17 00:33:40 2013 +0900

    Change the WebSocket API to use HttpHeaders instead of Map<String, String> for custom headers / Cleanup

commit 540bc995494eb9b9a68ad5347980df5b8a0475f1
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 16 23:56:51 2013 +0900

    Take advantage of invocation chaining in HttpHeaders

commit 34820511ff677667d46c0447f72527a7842dfa42
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 16 13:22:50 2013 +0900

    Second HTTP overhaul
    
    - Rename message types for clarity
      - HttpMessage -> FullHttpMessage
      - HttpHeader -> HttpMessage
      - HttpRequest -> FullHttpRequest
      - HttpResponse -> FulllHttpResponse
      - HttpRequestHeader -> HttpRequest
      - HttpResponseHeader -> HttpResponse
    - HttpContent now extends ByteBufHolder; no more content() method
    - Make HttpHeaders abstract, make its header access methods public, and
      add DefaultHttpHeaders
    - Header accessor methods in HttpMessage and LastHttpContent are
      replaced with HttpMessage.headers() and
      LastHttpContent.trailingHeaders(). Both methods return HttpHeaders.
    - Remove setters wherever possible and remove 'get' prefix
    - Instead of calling setContent(), a user can either specify the content
      when constructing a message or write content into the buffer.
      (e.g. m.content().writeBytes(...))
    - Overall cleanup & fixes

commit f136eafd5eff217aaf169f50d35bd7fbb33b9308
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jan 16 12:20:35 2013 +0100

    [#943] Fix CanceledKeyException which can happen on frequently deregister/register while using the NIO Transport

commit 895bce6cd53c35adb890699cb8e34da804447479
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Jan 16 08:04:09 2013 +0100

    [#917] Move transport depending ChannelOption to the specific transport to make it consistent

commit b7de868003691e9c72e8995273dfcd20245f680a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jan 14 16:52:30 2013 +0100

    [#677] Overhaul HTTP codec
    
    This commit tries to simplify the handling of Http easier and more consistent. This has a effect of many channges. Including:
     - HttpMessage was renamed to HttpHeader and the setContent and getContent methods were removed
     - HttpChunk was renamed to HttpContent
     - HttpChunkTrailer was renamed to LastHttpContent
     - HttpCodecUtil was merged into HttpHeaders
    
    Now a "complete" Http message (request or response) contains of the following parts:
     - HttpHeader (HttpRequestHeader or HttpResponseHeader)
     - 0 - n HttpContent objects which contains parts of the content of the message
     - 1 LastHttpContent which marks the end of the message and contains the remaining data of the content
    
    I also changed the sematic of HttpResponse and HttpRequest, these now represent a "complete" message which contains the HttpHeader and the HttpLastContent, and so can be used to eeasily send requests. The HttpMessageAggregator was renamed to HttpObjectAggregator and produce HttpResponse / HttpRequest message.

commit 506474f56951c2191070839cff24dd37a9c8dc13
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 15 16:23:09 2013 +0900

    Overhaul pipeline implementation for clarity and memory efficiency
    
    This pull request cleans up our pipeline implementation by moving most
    inter-context traversal code to DefaultChannelHandlerContext.
    Previously, outbound traversal was done in DefaultChannelPipeline while
    inbound traversal was done in DefaultChannelHandlerContext.
    
    Also, to address the memory inefficiency issue raised in #920, all
    runnables are lazily instantiated.

commit 337f5bbb8e12580e03274c15e90ccf702da6cc90
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 11 22:47:54 2013 +0900

    Automatic diagnosis of resource leaks
    
    Now that we are going to use buffer pooling by default, it is obvious
    that a user will forget to call .free() and report memory leak. In this
    case, we should have a tool to determine if it is a bug in our allocator
    implementation or in the user's code.
    
    This pull request adds a system property flag called
    'io.netty.resourceLeakDetection'. If set, when a user forgets to call
    .free(), the ResourceLeakDetector will detect it and log a message with
    detailed stack trace to tell where the leaked buffer has been allocated.
    
    Because obtaining stack trace is an expensive operation, I used sampling
    technique. Allocation is recorded only for every 113th allocation. I
    chose 113 because it's a prime number.
    
    In production, a user might not want to enable this option due to
    potential performance impact. If a user does not specify the
    '-Dio.netty.resourceLeakDetection' option leak detection is disabled.
    
    Even if the leak detection is enabled, the overhead should be less than
    5% because only ~1% of allocations are monitored.
    
    I also replaced SharedResourceMisuseDetector with ResourceLeakDetector.

commit 201df99ee0080f26184a2dcb742278ef84623226
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jan 14 21:34:58 2013 +0100

    Rename from io.netty.transport.* to io.netty.channel.*

commit 983a70805c831f1bfbad4dbccb29d68d406a085c
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sun Jan 13 22:11:15 2013 +0530

    Moved sctp transport classes from io.netty.channel.socket.sctp to it's own subpackage io.netty.channel.sctp

commit c20d8758179698fa5880a91d4044fc5984134f30
Merge: 1354b4a f75b6b1
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Mon Jan 14 10:59:54 2013 -0800

    Merge pull request #934 from jpinner/fix_spdy_regression_master
    
    SPDY: fix regression in SpdyFrameDecoder.decodeHeaderBlock()

commit f75b6b142c7cb95566ce102be206fa951dbeeb19
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Mon Jan 14 10:44:12 2013 -0800

    SPDY: fix regression in SpdyFrameDecoder.decodeHeaderBlock()

commit 1354b4a1ac0b18316e28c2f0bf2e8145b4ddfd2d
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 14 22:59:11 2013 +0900

    SPDY: allow empty header values in SPDY/3
    
    Ported from 3

commit 57153079a53b1738436e55a8b07f0e57b6e43615
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 14 22:37:05 2013 +0900

    Chrome requires the :version: header in SPDY_SESSION_PUSHED_SYN_STREAM frames otherwise it issues a HTTP_TRANSACTION_SPDY_SEND_REQUEST_HEADERS and a SPDY_STREAM_ERROR saying "HEADERS incomplete headers, but pending data frames."
    
    Ported from 3

commit 573a723dc23b7dc854d78f86d8fe4ca435bc5aa2
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 14 21:49:01 2013 +0900

    Fix a bug where ChannelPIpeline.remove/replace() fails when its channel is not registered yet

commit e263769a55f2f42963d3e1e5559f813c5118ac4f
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 14 21:43:25 2013 +0900

    Fix a bug where the buffers are freed too early when a handler is removed or replaced

commit a03bc6ea1dce0d2ce458e0f01c7611edadff3d70
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 14 20:48:58 2013 +0900

    Fix a bug where freeInbound/OutboundBuffer() is not called when a handler is removed from a pipeline.

commit 49bf02ce09cb0f672b965a2d53222e33636beda6
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sun Jan 13 23:56:24 2013 +0530

    [#929] Implemented multi-homing opertions in SctpServerChannels and SCTP Javadocs cleanup

commit eb91a6d4e6e67b234e784494cb70dfbecad90e6f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jan 11 19:42:21 2013 +0100

    [#924] [#914] Fix high CPU usage which was caused because the OP_CONNECT flag was not cleared after the connect was complete

commit 04bae9bceb10653556a251a4dfa31c28502eb811
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 10 18:27:16 2013 +0900

    Use sun.misc.Unsafe to access a direct ByteBuffer
    
    - Add PooledUnsafeDirectByteBuf, a variant of PooledDirectByteBuf, which
      accesses its underlying direct ByteBuffer using sun.misc.Unsafe.
    - To decouple Netty from sun.misc.*, sun.misc.Unsafe is accessed via
      PlatformDependent.
    - This change solely introduces about 8+% improvement in direct memory
      access according to the tests conducted as described in #918

commit e564157381e0d2a23aab97ea50cfe0eb79dd6cc1
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jan 11 07:45:22 2013 +0100

    Fix one checkstyle and one compile error caused by the last commit

commit 75b2dd592a5b4b55c0d243213003a2c57292c11e
Merge: 896bbb6 64ae8b6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jan 11 07:33:54 2013 +0100

    Merge branch 'master' of github.com:netty/netty

commit 64ae8b6a37249d099b5043ca39dc37c626e993ee
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 11 14:03:27 2013 +0900

    Replace and merge DetectionUtil and DirectByteBufUtil into PlatformDependent and PlatformDependent0
    
    PlatformDependent delegates the operations requires sun.misc.* to PlatformDependent0 to avoid runtime errors due to missing sun.misc.* classes.

commit 896bbb67b6a65c5a51f718cb6479fec033ff3ccb
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 10 18:27:16 2013 +0900

    Use sun.misc.Unsafe to access a direct buffer if possible

commit 5b5b39a60611be3d9268c7891e8c26eba7100af0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 10 07:32:51 2013 +0100

    [#916] Only access Cleaner if it is really present to prevent errors on android

commit bfa3445bb3f71963f09653ee2b1e696a29383361
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 11 00:38:36 2013 +0900

    Remove netty-metrics-yammer from example dependencies
    
    .. because it pulls SLF4J as a runtime dependency

commit f7a076e0eacf6e65e0d0169a16b893667515aa65
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 11 00:16:06 2013 +0900

    Clean up netty-metrics-yammer pom.xml

commit 366c6c86dcbddff4af8ae197284d19a8b40617ed
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 11 00:14:21 2013 +0900

    Remove redundant dependency version

commit 8975406b86ac470607e45401ed21437d47fb1f58
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 10 21:05:09 2013 +0900

    Ensure the outbound buffer is not freed on write completion
    
    - Fixes #919

commit ec5ad7b22c866fea7f15d97f59ff13f1825120bf
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 10 12:40:27 2013 +0100

    [#921] Fix NPE which can be thrown on bad-timing when using WebSocketClientHandshaker07

commit 5bd8b41a58be4c46bbbd5ad894df9ad9a8d1cd14
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 10 18:47:21 2013 +0900

    Use Number.reverseBytes() instead of custom impl

commit 340da3e97b403b9fb78e31881d1f2903f3257e4c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 10 18:43:20 2013 +0900

    Fix infinite recursion

commit 753d0bfbae7d3e21d5ac4ef1074e06bce4c8df24
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 10 16:25:41 2013 +0900

    Remove the memory option previously added to avoid OOME
    
    We don't see OOME anymore

commit 665d022e82df18490780fe6929e700e21b0b0fc0
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 10 16:23:40 2013 +0900

    Use a heap buffer from the allocator because it doesn't seem to cause OOME anymore

commit 3fe9a58f41be973b023a21c5d40cd5cd62f21ed0
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 10 15:35:36 2013 +0900

    Fix checkstyle

commit eb337ff5a789cf85be33e496175c40cd72ef85f4
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 10 15:23:58 2013 +0900

    Fix various inspection warnings

commit 3c9d912355e4b2c53b60fb82090cef3297960293
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 10 14:17:38 2013 +0900

    Use InetSocketAddress wherever possible / Tighten the return type of Channel.parent()

commit 793a5714650f0b6cefc6014207c16eed3aa20c3e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 10 14:01:17 2013 +0900

    Fix a runtime type cast exception when calling RxtxChannel.local/remoteAddress()

commit b5e6350bcb3615ca5eaf7dfb073903e5192fb4fa
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 10 13:55:15 2013 +0900

    Fix compiler warning

commit 8cba7654639abe554f10d6333473670a7ab51b0d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 10 13:28:09 2013 +0900

    Indentation

commit 4528c793ba78a8b2d134d14eec0370a823b4e899
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 10 13:24:36 2013 +0900

    Fix naming issues in RxtxChannelConfig / Format cleanup

commit 0c3732cad5a28ced358c7d5a60da028012ec83c8
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 10 13:14:36 2013 +0900

    Fix invalid module name format

commit c094abad7b14fb16827b13e5671665753be9ecad
Author: Luke Wood <luke@lwood.me.uk>
Date:   Wed Jan 9 10:40:38 2013 +0000

    [#561] [#912] Add Rxtx transport

commit d5a7057c3fcf613dc6269039a2c320c54267a72f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 9 23:36:46 2013 +0900

    Fix inconsistent module name

commit 7755a8267415ab9d8b432e87dab4397e14553880
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 9 21:29:41 2013 +0900

    Revert mistakenly committed test change

commit 137f29ba6571beb32ff47aa178509e5eb1704094
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 9 21:28:31 2013 +0900

    Do not read if a channel is inactive

commit 46e364e7b7e9ecf318b1e05e5702494b67ef207d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 9 20:36:16 2013 +0900

    Remove unnecessary parameters

commit b9352ded138c5318761f23dd3864f39978118fed
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 9 20:34:22 2013 +0900

    Fix a bug where prev/next context is not always set

commit 8586d43b230930ef9c46a9ec435f5633bb0ae43d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 9 19:16:09 2013 +0900

    Fix DefaultChannelPipeline.toString() / Remove unnecessary conditions

commit b6fcf3acc40b948aee5d96f71d40631a46ef110b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 9 19:13:43 2013 +0900

    Simplify DefaultChannelPipeline

commit b742dcc209376508a66495940363796b90bad25a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jan 8 08:18:46 2013 +0100

    [#902] Remove usage of generics for output of Encoder/Decoder to make them more flexible again

commit 5d2e0688ab7e55492ad5be9c6c0136fb481c8033
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 9 15:12:25 2013 +0900

    Fix checkstyle

commit 5c2be33cae7184254ffe0d12fd34faf6f3c83ee1
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 9 15:09:20 2013 +0900

    Delegate to the actual encoder/decoder if possible

commit 102563ec8f99a0ab64340b7e453a055305247a44
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 9 15:05:03 2013 +0900

    No need to override ByteToMessageCodec.decoder.discardInboundReadBytes()

commit ef692b0c38bd4de7f051e9b2b2a94488af818c63
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 9 14:58:44 2013 +0900

    Add missing decodeLast()

commit b58a8f0106e65e3cab6126ee401c686c8234af45
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 9 14:56:07 2013 +0900

    Add missing codec operations in ByteToMessageCodec

commit 4a3d73724f99933de673c0927529e6ed2034c828
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 9 14:44:19 2013 +0900

    Make all encoder/decoder methods overridable in MessageToMessageCodec

commit 8d0785da3634e4ae7190acfcb0fb08667ff393b3
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 9 14:35:50 2013 +0900

    Rename MessageToMessageEncoder.freeInboundMessage() to freeOutboundMessage()

commit 8d5fd0839fcad574a00462667f1fbcfb6eb62382
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 9 14:28:42 2013 +0900

    Make ByteToMessageCodec.isEncodable() public like other similar methods

commit aa69d628f1b17ae612bd65cbd95501f1171f987a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 9 14:26:15 2013 +0900

    Add ByteToMessageCodec.isEncodable()

commit dd6b7969b752724dcd16d1d4fbdd9f34ebaa2a55
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jan 5 15:04:25 2013 +0900

    Give a handler more control over how its buffers' read bytes are discarded.
    
    This pull request adds two new handler methods: discardInboundReadBytes(ctx) and discardOutboundReadBytes(ctx) to ChannelInboundByteHandler and ChannelOutboundByteHandler respectively. They are called between every inboundBufferUpdated() and flush() respectively. Their default implementation is to call discardSomeReadBytes() on their buffers and a user can override this behavior easily. For example, ReplayingDecoder.discardInboundReadBytes() looks like the following:
    
        @Override
        public void discardInboundReadBytes(ChannelHandlerContext ctx) throws Exception {
            ByteBuf in = ctx.inboundByteBuffer();
            final int oldReaderIndex = in.readerIndex();
            super.discardInboundReadBytes(ctx);
            final int newReaderIndex = in.readerIndex();
            checkpoint -= oldReaderIndex - newReaderIndex;
        }
    
    If a handler, which has its own buffer index variable, extends ReplayingDecoder or ByteToMessageDecoder, the handler can also override discardInboundReadBytes() and adjust its index variable accordingly.

commit 7277536ca6dbb82a4d48ecb9d7794569994ee1cc
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 9 13:30:25 2013 +0900

    Remove unnecessary finally block

commit 0d76e329a04cea5d00c60b0e855208a8ccd59358
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jan 8 10:39:45 2013 +0100

    Add example which start a server in a applet to show there is no issue anymore. Related to [#689]

commit 20aa2e1968501fbb4b0977b91d43fd865b42063e
Author: Andrei.Pozolotin <Andrei.Pozolotin@gmail.com>
Date:   Mon Jan 7 09:44:41 2013 -0600

    [#844] [#867] Add UDT transport

commit 26595471fb58524dde69b9ecc5d6a31060a5983d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Jan 7 08:44:16 2013 +0100

    Call Freeable.free() if a Freeable message reaches the end of the ChannelPipeline to guard against resource leakage

commit cf2fbf7883bdd61f2df7844eb058af0b12af779d
Author: kxbmap <kxbmap@gmail.com>
Date:   Sun Jan 6 00:29:56 2013 +0900

    Fix a link in ZlibWrapper

commit 5526153459104bff2812c952a947576114419dd8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jan 4 14:48:53 2013 +0100

    [#882] Add a PartialFlushException which will allow to notify the user that the flush/write was only partial succesful

commit 8f7fba2d393d32ceaae88312fb4c5a5d03e17b7e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 4 23:51:11 2013 +0900

    Optimize AbstractByteBuf.adjustMarkers()

commit 3a52cc410aac560dbc56b32034606879125d7f90
Author: Courtney Robinson <courtney@crlog.info>
Date:   Fri Nov 30 06:07:26 2012 +0000

    Add some of the metrics mentioned in #718
    
    use single static initialization of available metrics monitor registries
    
    * This changes the original implementation to work in a similar way to
    how slf4j selects and loads an implementation.
    * Uses a single static instance so intialization is done only once.
    * Doesn't throw IllegalStateException if multiple implementations are
    found on the classpath. It instead selects and uses the first
    implementation returned by iterator()
    * Class left as an iterable to keep the API the same
    
    add yammer metrics to examples to allow them to publish metrics
    
    publish the number of threads used in an EventLoopGroup see issue #718
    
    * seems like the better place to put this because it sets the default
    thread count if the MultithreadEventLoopGroup uses super(0,...)
    * It also happens to be the common parent class amongst all the
    MultiThreadedEventLoopGroup implementations
    * Count is reported for
    io.netty.channel.{*,.local,.socket.aio,.socket.nio}
    
    fix cosmetic issues pointed out in pull request and updated notice.txt
    
    see https://github.com/netty/netty/pull/780
    
    count # of channels registered in single threaded event loop
    
    measure how many times Selector.select return before SELECT_TIME

commit bd093c4ab0a87227474e80a1e0500b976ff25961
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Jan 4 07:05:53 2013 +0100

    Don't spin the CPU so much in tests

commit 712a6cfe8f95c13a2f10c7914702a0cc1d87ad3d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 3 22:50:11 2013 +0100

    Safe copy of buffer for test

commit 2f6e17f6817d2f122c9b5f3eb94b4cb28bd3179e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 3 22:49:54 2013 +0100

    Make sure we catch UnsupportedOperationException for derived buffers

commit 364b7d143088cee783c9274d887c621022d9650c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Jan 3 22:49:25 2013 +0100

    Make sure the Unpooled.EMTPY_BUFFER can not be freed and the capacity can not be changed

commit ccb5409f581dc423a1356cbfee7b662498d16d4f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jan 1 09:19:00 2013 +0100

    [#884] Split SCTP transport into extra module

commit 37a3f2e3b83637c250902fc2cd2aa29f2eec36ca
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Jan 1 16:03:18 2013 +0100

    [#887] [#866] [#883] Add unified interface for Message oriented protocols and also use direct buffers for them

commit 4a1aa377731d10d61fbcae8485eb373d7367a14e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 3 17:07:30 2013 +0900

    Re-ignore ServerSocketSuspendTest (unignored by mistake)

commit 0abfaf20e4633f221673becfa724ad14b62bf3b3
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 3 17:05:18 2013 +0900

    Revert 5161ca733c330e21fa0f1b89ba4d464791600d52

commit 923dde7a5f4d2a47785ba9e874eae8a31d130844
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 3 16:01:41 2013 +0900

    Do not auto-start read operation

commit 103edc446740baced069a1bd1e6b844f3ff59b95
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 1 16:49:21 2013 +0900

    Make ChannelConfig.setAutoRead() triggers Channel.read() if autoRead was previously false
    
    - also rename JDK socket and channel variables so that they are less ambiguous

commit 218afba1f25de7883a5e9edd3f48f081a7b36e30
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 1 15:13:35 2013 +0900

    Do not set 'Content-Encoding' if the target encoding is 'identity'
    
    - Fixes #769

commit 7d80182e512ab01d7348ef0ca71c85073d837a0a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 1 15:03:37 2013 +0900

    Fix a bug where SslHandler does not respect the startTls flag
    
    - Fixes #856
    - Add a dedicated test case: SocketStartTlsTest

commit 2960af851a4e9992a1d9671621bfb10ef2fe76c8
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 1 14:04:37 2013 +0900

    Extract the utility classes related with SSL to the util package

commit 5161ca733c330e21fa0f1b89ba4d464791600d52
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Dec 31 22:09:27 2012 +0100

    Move utility method to abstract base class and correctly handle expand of buffer also for OIO

commit 89a16fe01e0ca10d73de2e8c057dc58d331fb56a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 1 00:35:44 2013 +0900

    Fix a bug in NIO transport where inboundBufferSuspended() is triggered even if the channel is closed.
    
    - No non-static wildcard import

commit 93fd73fbbf2054a6785bf58bcf40bfdd7c91bbfb
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 1 00:26:52 2013 +0900

    Fix a bug in AioSocketChannel where inboundBufferSuspended() is triggered even if the channel is closed.

commit 8cf9f529198e3cbeedf2f07b9d0d4d5b9d619e0a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Dec 31 16:17:08 2012 +0100

    Add new ChanelFuureListener impl that mimic the old behavior of Netty 3 and so allow to also call fireException for outbound operations

commit 1e9652b47ae9e0afbbebff3eb60af743a9c059b6
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 1 00:08:58 2013 +0900

    Fix a bug in AioSocketChannel where recursive doBeginRead() is allowed unexpectedly

commit e0a6dc0ac3aa75c897e3961cc021ec7f13d6de6d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Dec 31 14:42:33 2012 +0100

    Remove ChannelFutureProgressListener

commit 4e77bacdf793dc647552a3c21b75da04a2eba20b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Dec 30 17:40:24 2012 +0100

    [#873] [#868] Split ChannelFuture into ChannelFuture and ChannelPromise

commit 0909878581d7dc7923c55e7f44ce6db5976efed4
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Dec 30 21:53:59 2012 +0900

    Read only when requested (read-on-demand)
    
    This pull request introduces a new operation called read() that replaces the existing inbound traffic control method. EventLoop now performs socket reads only when the read() operation has been issued. Once the requested read() operation is actually performed, EventLoop triggers an inboundBufferSuspended event that tells the handlers that the requested read() operation has been performed and the inbound traffic has been suspended again. A handler can decide to continue reading or not.
    
    Unlike other outbound operations, read() does not use ChannelFuture at all to avoid GC cost. If there's a good reason to create a new future per read at the GC cost, I'll change this.
    
    This pull request consequently removes the readable property in ChannelHandlerContext, which means how the traffic control works changed significantly.
    
    This pull request also adds a new configuration property ChannelOption.AUTO_READ whose default value is true. If true, Netty will call ctx.read() for you. If you need a close control over when read() is called, you can set it to false.
    
    Another interesting fact is that non-terminal handlers do not really need to call read() at all. Only the last inbound handler will have to call it, and that's just enough. Actually, you don't even need to call it at the last handler in most cases because of the ChannelOption.AUTO_READ mentioned above.
    
    There's no serious backward compatibility issue. If the compiler complains your handler does not implement the read() method, add the following:
    
    public void read(ChannelHandlerContext ctx) throws Exception {
        ctx.read();
    }
    
    Note that this pull request certainly makes bounded inbound buffer support very easy, but itself does not add the bounded inbound buffer support.

commit 926a20f105b9206efcc3a618b430f5fce01481ba
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Dec 31 11:43:05 2012 +0100

    [#880] correctly use methods which take a ChannelFuture as parameter

commit b49b3d9c567855a2bca71c8f069155104011b06b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Dec 31 11:35:25 2012 +0100

    [#879] Notify correct ChannelFuture for queued FileRegions

commit 5aa679fec74f749bd68278c1b42a51e2da2dd8f9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Dec 30 21:26:08 2012 +0100

    [#840] Generate the tarball with top level directory

commit c80b1bb66e91e3e0528c8372f8a11af43f73e7de
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Dec 30 12:48:32 2012 +0100

    [#872] AbstractNioByteChannel and AbstractNioMessageChannel should be public

commit 738d382fbc8902f0dfa53ff9d5e6d6df00d0e7ec
Author: alexey <alexey@debian-desktop.home.org>
Date:   Wed Nov 21 22:53:04 2012 +0400

    Added test cases for NetUtil methods, if we can`t convertAddress we return null

commit 0fb0037eab86b74e62935ab1d46e83bf8f81acb0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Nov 19 06:07:18 2012 +0100

    Rename IpAddresses to NetUtil

commit 5d13c7d27b96b4dafa3431c88fa246b21791ae84
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Nov 19 05:52:17 2012 +0100

    Merge IPUtil and NetworkConstants into IpAddresses and also make naming of methods consistent

commit 213c1e3d234135a5d33e333079f662af2f8f823b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Nov 18 21:07:23 2012 +0100

    Replace sun.net.util.IPAddressUtil usage with own implementation

commit e2b240799c2943b7e478948d03f4f4e0e62d6ca1
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Dec 29 18:07:02 2012 +0100

    [#857] Check if the SelectionKey is valid before access readyOps()

commit 64351ad7d603d1604a51cecbf446524f6e7ad158
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Dec 27 23:08:54 2012 +0100

    [#861] Let SctpMessageCompletionHandler fire inboundMessageBufferUpdated() only if needed

commit 88838413c75a319ad76c9ebcb9b0deea262266e0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Dec 27 23:02:13 2012 +0100

    Javadocs and cleanup intellij warnings

commit a20aba87ab37236f25f53957e4f75345697ededd
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Dec 27 22:53:42 2012 +0100

    Remove get prefix from Sctp methods to be more inline with the rest

commit 6db7250ed934accfba0e36f4fce90de2e81008c1
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Dec 27 22:46:46 2012 +0100

    Javadocs added for SCTP stuff

commit 5a4a52a81774925de66a60809191b63cba810528
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Dec 27 22:24:07 2012 +0100

    [#857] Correctly handle CancelledKeyException

commit 5adb37de3d0e3625941ef2b42cdd2cc3fb4bc1c1
Author: Luke Wood <luke@lwood.me.uk>
Date:   Sun Dec 23 19:29:45 2012 +0000

    Port traffic handler to netty 4

commit 85e16840841bf036c0ce1b094e5d33aa47731f90
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 26 13:50:01 2012 +0900

    Simpler method naming in Timeout

commit 6b9f7065a24324e094b7a067ecdb27861d774287
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 26 13:48:29 2012 +0900

    Simpler and more comprehensive method naming in monitor

commit 852f546b5b4b844e6191f3bf2f3716085f5f2cda
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Dec 25 18:54:55 2012 +0100

    [#846] Tighten up visibility

commit 5bd3648b3d84343c7c58e3400a82e4dd0ddf6445
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Dec 24 21:52:04 2012 +0100

    [#845] Enable PUT of files above 2GB

commit 2ea45950f100bfaf9324c53f38ce49de59f9b555
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Dec 23 23:03:54 2012 +0100

    Javadoc fixes

commit a9fdb682be84f79e5d314acf8894bd8cc799200d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Dec 23 20:58:49 2012 +0100

    Add javadocs and some small cleanups

commit 71b089cb3bf30706a9da17bd91f0a67146732059
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Dec 23 19:24:20 2012 +0100

    Add javadocs and cleanup

commit ae859c2de969f7a5b86c35ccc0b81b291defd71a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Dec 23 19:24:05 2012 +0100

    Fix checkstyle

commit e0d42df77b8b22657dba0605a960c4586bf6bfaa
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Dec 23 16:05:43 2012 +0100

    ServerBootstrap needs to have a localAddress defined

commit 6ef1729d0666bb19fb0865a5e78a06f45925ba1e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Dec 23 15:54:30 2012 +0100

    Fix javadocs for ChannelPipeline

commit 7d79587ade90054364b88cf141262af5e745766d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Dec 23 15:54:14 2012 +0100

    Make package private

commit e05b071b41ed2da28e27277ca0c50f0919738e50
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Dec 22 19:27:09 2012 +0100

    Javadocs update

commit fc4b205bc40af225d7f706bad2aac71f5676b877
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Dec 22 15:53:01 2012 +0100

    More javadocs

commit 9098d069b0cf1bfb0e85e1d9362fc931dbd8936a
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Dec 22 15:10:38 2012 +0900

    Make FailedChannelFuture and SucceededChannelFuture final

commit ff3dcffd49ebfed58376e43c79667a4e89e48e00
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Dec 21 22:41:18 2012 +0100

    Almost finish javadocs for codec module

commit b8140333236727188397497da1c6cc34ba377d31
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Dec 21 22:36:51 2012 +0100

    [#847] Let CompressionException extend CodecException

commit 5b44fe6e65152377bc93756abab5b1acd80dc077
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Dec 21 22:32:16 2012 +0100

    More javadoc fixes

commit 8a7bc2c6068d699df21fc1b1f6326e8ede69b930
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Dec 21 22:22:40 2012 +0100

    Add a lot of javadocs to make usage more clear

commit b004066f37bf9d4cc2d394f268e40f4b8dd403fe
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Dec 21 17:59:37 2012 +0100

    Javadoc fixes and remove some uncessary casts + checks

commit a819d26f5c68ab8cde9fe13b7b12ee0bd8060070
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Dec 21 17:10:36 2012 +0100

    Remove ChannelHandlerLifeCycleException and just use ChannelPipelineException as replacement

commit ef555d268c1805881ffa61ead995b7b7eb8ca134
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Dec 21 17:06:24 2012 +0100

    Add more javadocs and replace some abstract methods with noops as we often implemented them as noops

commit 3e31af68e44ef6439382fcd3270d46d203bc9af8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Dec 21 11:03:35 2012 +0100

    More javadocs cleanup

commit e4ed551490b1b814492927775458f962230894ed
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Dec 21 10:41:27 2012 +0100

    Move shared methods to the AbstractEmbeddedChannel class and add javadocs

commit 7db47dd0d049ff17cea52dfa3ca0d688f3dd2047
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Dec 21 08:16:00 2012 +0100

    Finish javadocs for common module

commit 42a77eda9b656a990bc9e6280050ac2b3279e09b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Dec 21 07:35:42 2012 +0100

    And again javadocs cleanup

commit 62bf98af8cc53d5f87ead0fd77937471eaa51b9e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Dec 21 07:13:31 2012 +0100

    More javadoc fixes

commit 7a9d9d6a88069d949647deffedd1a2f86f2903e8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Dec 20 19:11:17 2012 +0100

    Fix checkstyle

commit 5d6d849acd2120272d4fff962bd238a6777955bb
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Dec 20 16:13:26 2012 +0100

    Mark final, add javadocs, add checks

commit d2060ee3f194445aab0463ed0f4a08ca1af8169e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Dec 20 15:45:49 2012 +0100

    Add more javadocs

commit a1baeeb8c069153682bbb3597f3bc1be54afe4f7
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Dec 20 15:45:35 2012 +0100

    Mark IdleStateEvent as final and add javadocs

commit 43d13064d17df55a48a5b05c712c13b69de7da46
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Dec 20 12:25:13 2012 +0100

    [#837] CombinedChannelHandler must pass sendFile(...) to the wrapped ChannelOutboundHandler

commit 94dc09c33d41135c62ad524fd88ff580ff5b7639
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Dec 20 10:45:12 2012 +0100

    Tighten up visibility as the user should use Channel.new*Future

commit 1f9d165583172bcb764827e259421e3a1f098802
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Dec 19 21:16:41 2012 +0100

    [#836] Correctly reset timeout on sendFile(...)

commit 695665a4cfc1259971321a050ad38146126eafc1
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Dec 19 21:08:47 2012 +0100

    More javadocs fixes

commit db0459ea9ccda8a4b12069375d6c6bf8fd6a9a3d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Dec 19 16:25:31 2012 +0100

    Fix javadocs of IdleStateHandler

commit d9b26dab295ea6efbdde9eb2a2b0fbdf05970462
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Dec 19 15:38:17 2012 +0100

    Remove get*() from the methods to match the rest of our method signatures

commit a1368f0fa8b6275dc1e72b8bbe749b1c4fd0c6fd
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Dec 19 15:36:07 2012 +0100

    Some javadocs fixed to remove dead links

commit 77c01d252ee80effb6e28ca0919171254c80e385
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Dec 19 15:31:07 2012 +0100

    Fix visibily of ImmediateExecutor and add private constructor

commit 11047aaa69280581b581eff084da471525172490
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Dec 19 15:17:10 2012 +0100

    [#832] Add javadocs which explains how to workaround the problem

commit 92f1a81f479686419d631c5d84f142d4a9ade9ba
Author: Veebs <vibuli@gmail.com>
Date:   Fri Dec 14 14:59:18 2012 -0800

    #751 - Added support for legacy websocket v7 in order to pass SocksJS tests

commit 78ccfeedf90206bccfd8857b31a5573a055525a1
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 19 18:36:31 2012 +0900

    Save memory copy

commit 937c0481e0a1bc173dd5ddf1371d38ce13fa10d8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 19 18:28:55 2012 +0900

    Do not use slice() to get the content of HTTP msg
    
    - Fixes #794

commit b4fb6a49ee4b30f78a066fd3d5ff33fbffb9c9df
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 19 18:28:34 2012 +0900

    Remove codec-snappy from the module list

commit e353540d47ff5bbd03cc5eca4930f6440bcce4bc
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 19 18:12:18 2012 +0900

    Move snappy codec to netty-codec

commit 67da6e4bf945f771607454dff40334990396ce7b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 19 17:35:32 2012 +0900

    Remove the notion of ByteBufAllocator.bufferMaxCapacity()
    
    - Allocate the unpooled memory if the requested capacity is greater then the chunkSize
    - Fixes #834

commit 35c01660da784a5ae12829589ad86ea15b56cedb
Merge: fdeff38 0e017db
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Dec 19 09:27:18 2012 +0100

    Merge branch 'master' of github.com:netty/netty

commit fdeff3855da0f8872d6d9df0951f42da4040c1eb
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Dec 19 09:27:01 2012 +0100

    Move ChannelInputShutdownEvent to socket package as this is where it belongs to. Also added some javadocs

commit 0e017db89a3646bc39ea3ee8de67f0341b044a30
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 19 16:48:53 2012 +0900

    Return the new buffer's capacity is same with the requested capacity
    
    - Rename capacity variables to reqCapacity or normCapacity to distinguish if its the request capacity or the normalized capacity
    - Do not reallocate on ByteBuf.capacity(int) if reallocation is unnecessary; just update the index range.
    - Revert the workaround in DefaultChannelHandlerContext

commit b6e83dff4f70cf75462cd34b4243e6f901a1558e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Dec 19 08:24:32 2012 +0100

    Add javadocs and also some parameter checks in DefaultFileRegion

commit 44142efe55bb01c5bff3953a8b2d6aee9b76c6d0
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Fri Nov 23 01:17:13 2012 +0530

    Fixed OioSctpChannel event loop issue #632 by using 3 different selectors

commit 4229b23a510c19c662ceba5949391f701807e8ae
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat Dec 15 13:49:08 2012 +0530

    Fixed SCTP testcases #632

commit 3fc3401c0865510c906f41d78a4651fe36656b5a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 19 11:58:17 2012 +0900

    Remove bad Javadoc in SCTP classes.

commit 43e40d6af660615561d069a7f0e1894a8dbff282
Author: Luke Wood <luke@lwood.me.uk>
Date:   Tue Dec 18 15:09:30 2012 +0000

    Add Snappy compression codec

commit f6735f8cc98ce6d44d635ca3adf6cc66444b2ccf
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Dec 18 15:27:52 2012 +0100

    Add javadocs to AIO and also fix a few warnings

commit 7b0ec599d6cf3164c3eb4e36f4db024eb311521f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Dec 18 11:38:38 2012 +0100

    Fix config

commit 8d89e4817785d425a9fa653861181d838cd619f3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Dec 18 11:24:25 2012 +0100

    Add javadocs in the oio package and also fix some intellij warnings

commit 6d93c3fb252a3dbbca6589a4ab01479b030225c3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Dec 18 07:55:39 2012 +0100

    more javadocs

commit b7b17209ea96937848f9d76a23e9344ab6e30cb9
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Dec 18 07:23:42 2012 +0100

    Next round of javadocs cleanup and fixes. Also limit the visibility of FailedChannelFuture

commit 42d466c97f68ba5406de8a717b1ca3fcfe068cd2
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 18 15:21:26 2012 +0900

    Remove cruft

commit 310a87a51d1abfee9e1f2441adeae31748d61ed3
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 18 04:52:46 2012 +0900

    Fix #814 - Prevent IllegalBufferAccessException on write() and flush()
    
    - Also fixed a incorrect port of SpdySessionHandler
      - Previously, it closed the connection too early when sending a GOAWAY frame
      - After this fix, SpdySessionHandlerTest now passes again without the previous fix

commit 5a467b69bf58c4c92d0af9a5f12eed6ac68efddb
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Dec 17 20:37:10 2012 +0100

    DatagramPacket should be final

commit 949435d10542b8167d2ffb87e15c226ea5d99765
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 18 03:08:01 2012 +0900

    Fix checkstyle

commit e59ac8e79b14aaf5ac9899234d0aa8b82a4e00ce
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 18 02:58:36 2012 +0900

    Do not call inbound event methods directly
    
    - Fixes #831
    
    This commit ensures the following events are never triggered as a direct
    invocation if they are triggered via ChannelPipeline.fire*():
    
    - channelInactive
    - channelUnregistered
    - exceptionCaught
    
    This commit also fixes the following issues surfaced by this fix:
    
    - Embedded channel implementations run scheduled tasks too early
    - SpdySessionHandlerTest tries to generate inbound data even after the
      channel is closed.
    - AioSocketChannel enters into an infinite loop on I/O error.

commit 39250873ae7c3d8c1017db11b1f715838f2688f3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Dec 17 16:01:58 2012 +0100

    Add some javadocs

commit 3f9441f4c18ccf41482629327e5b0dd6470620fe
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 17 19:29:36 2012 +0900

    Add missing free() on SpdySessionHandler buffers

commit 8b82ff5ce09fe9748c18bbf3d55b3d4eb108ccb9
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 17 18:28:31 2012 +0900

    Fix checkstyle

commit a8f5efdb262bb9d55dcb71752f7cb41138ce6d7c
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 17 18:27:30 2012 +0900

    Add proper boundary / freeness check on ByteBuf impls
    
    - Fixes #827

commit ca93b624ff5b1ec6e245d58bcf1f28be96f564ac
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 17 18:03:31 2012 +0900

    Add IllegalBufferAccessException and checks on MessageBuf impls
    
    - Related: #827

commit def12a171cc59618e65f8a1878729c8149898294
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 17 17:43:45 2012 +0900

    Rename ChannelBuf to Buf and ChannelBufType to BufType
    
    - Fixes #825

commit 03e68482bba54aa0c0d35649ac9c090b0ab75473
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 17 17:41:21 2012 +0900

    Remove ChannelBuf/ByteBuf.Unsafe
    
    - Fixes #826
    Unsafe.isFreed(), free(), suspend/resumeIntermediaryAllocations() are not that dangerous. internalNioBuffer() and internalNioBuffers() are dangerous but it seems like nobody is using it even inside Netty. Removing those two methods also removes the necessity to keep Unsafe interface at all.

commit 33134b13438cbbb7cc6bd9a35982b5550fa0df92
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 17 16:02:21 2012 +0900

    Ensure PooledByteBuf.init() is not called with null memory

commit ba3c795fdfbc03d5422107051000f218047f3d5b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Dec 14 17:06:31 2012 +0100

    Adjust ChannelPipeline to support method-chaining in a consistent way

commit caa698f2351d3fc10eaa3fdaedc9bb73558152fe
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Dec 14 16:59:23 2012 +0100

    [#819] Allow for easy method-chaining in ChannelConfig and its sub-types
    
    This commit also introduce a new interface which is called AioSocketChannelConfig to expose AIO only config options with the right visibility.
    Also it change the ChannelConfig.setAllocator(..) to return the ChannelConfig to be more consistent with the other methods.

commit 6eb7de04e763eeb863704b53ca1a71d3b758533e
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Dec 14 15:19:03 2012 +0100

    Allow to access localAddress and remoteAddress even if the channel is not registered yet

commit 42f6a27235fd43494fab902d9054e22b60b1e64b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Dec 14 15:10:10 2012 +0100

    Allow modify the config even before the channel is registered to the eventLoop

commit d8c569a71b1785535e9f82a690e07588f2e266ed
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 14 20:09:40 2012 +0900

    Make ChannelFutureNotifier accept multiple ChannelFutures

commit eb23c9d27c84ab7cf2c33f28d2b761673a41b435
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 14 19:42:58 2012 +0900

    Add missing 'operation(args, future)' for 'operation(args)'
    
    - Fixes #818
    - Fix inspector warnings

commit 5ffb495746e55c440273ec7cc4741ab28e1f9017
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 14 18:38:28 2012 +0900

    Do not allow suspendIntermediaryDeallocations() after free()

commit 96dc3f983fd8be1fd4069fcf1f97d77023a1c516
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Dec 14 09:51:36 2012 +0100

    Refactor AIO Transport to allow to use Bootstrap without the ugly hack

commit 02a6e85febbd9e20adee72740f52bc35f1f257b7
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 14 12:45:43 2012 +0900

    Add methods that add/remove multiple ChannelFutureListeners to ChannelFuture
    
    - Fixes #811

commit 1f72e53af39d5ee0b9347ea3766281071291f971
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 14 12:23:24 2012 +0900

    Remove redundant copyright headers added by IntelliJ

commit 5a4a59406b759b042b514b73f23c06e4360f39e7
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 14 12:20:33 2012 +0900

    Merge ByteBuf.hasNioBuffer() and hasNioBuffers()
    
    - Fixes #797

commit 8e1a6c6cf5c01aab8670a13d9b6f99d7db9e10c9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 14 11:49:01 2012 +0900

    Add ByteBuf.maxWritableBytes()
    
    - Fixes #806

commit 9e973bbffc1cfe49317bf87951657aa8935bb2d9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 14 11:43:04 2012 +0900

    Port rebuildSelectors() from 3.6 to 4.0
    
    - Fix #813

commit be6cc9c3243cb0a70a986e22e6b249426d2ab939
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 14 11:23:30 2012 +0900

    Fix inspection warnings

commit d1d9f131da5698ac797a78f1b4e71f28afbba463
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 14 11:17:31 2012 +0900

    Tell NioTask the cause of unregistration
    
    - Add the 'cause' parameter to the channelUnregistered method

commit c4db51e85d9e4bf9f3c72d81ea8386fe9dfdeecf
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Dec 13 19:54:39 2012 +0100

    Refactor AIO Transport to allow to use Bootstrap without the ugly hack

commit 8945ce17ad5613d746b7c781e31610763263f44e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 14 00:38:05 2012 +0900

    Update license notices and dependencies

commit e37aeb38d612362820d4a66cb278ab9c0705aecc
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 14 00:10:28 2012 +0900

    Add the original copyright

commit 6339feaa8ff2b55249cae9909851d74a6554dc78
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 14 00:00:41 2012 +0900

    Apply advanced JVM options to benchmarks / Fix duplicate uploads
    
    - Add common optimization options when launching a new JVM to run a benchmark
    - Fix a bug where a benchmark report is uploaded twice
    - Simplify pom.xml and move the build instruction messages to DefaultBenchmark
    - Print an empty line to prettify the output

commit ad10518fcaed957a7f056988fb1ffa09b7a4b620
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 13 22:49:31 2012 +0900

    Fix the incorrect snapshot version number

commit b47fc775223b9cd1b839ec5a18c26b17c5050d60
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 6 06:11:48 2012 +0900

    Add PooledByteBufAllocator + microbenchmark module
    
    This pull request introduces the new default ByteBufAllocator implementation based on jemalloc, with a some differences:
    
    * Minimum possible buffer capacity is 16 (jemalloc: 2)
    * Uses binary heap with random branching (jemalloc: red-black tree)
    * No thread-local cache yet (jemalloc has thread-local cache)
    * Default page size is 8 KiB (jemalloc: 4 KiB)
    * Default chunk size is 16 MiB (jemalloc: 2 MiB)
    * Cannot allocate a buffer bigger than the chunk size (jemalloc: possible) because we don't have control over memory layout in Java. A user can work around this issue by creating a composite buffer, but it's not always a feasible option. Although 16 MiB is a pretty big default, a user's handler might need to deal with the bounded buffers when the user wants to deal with a large message.
    
    Also, to ensure the new allocator performs good enough, I wrote a microbenchmark for it and made it a dedicated Maven module. It uses Google's Caliper framework to run and publish the test result (example)
    
    Miscellaneous changes:
    
    * Made some ByteBuf implementations public so that those who implements a new allocator can make use of them.
    * Added ByteBufAllocator.compositeBuffer() and its variants.
    * ByteBufAllocator.ioBuffer() creates a buffer with 0 capacity.

commit 9d42acbc2af596da834d84b75a0a9aef73f2ff0d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Dec 13 10:38:44 2012 +0100

    [#803] Make sure the right EventExecutor is used after re-register a Channel to another EventLoop

commit 0c5fd38eb625482e99f57558987703d4a67260d7
Author: Veebs <vibuli@gmail.com>
Date:   Tue Dec 11 21:57:03 2012 -0800

    #722 - Make WebSocketClientHandshakerFactory a static utility class

commit 2704efc056bcb60ec96b65b8b66b25ecf9246ef3
Author: Veebs <vibuli@gmail.com>
Date:   Tue Dec 11 22:43:57 2012 -0800

    Added documentation to websocket classes.

commit 2903b91e66c6e6615b7ba67c8c6ff286e392ad95
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Dec 10 17:20:04 2012 +0100

    [#798] Not call fireExceptionCaught(..) for outbound operations as the future will get notified anyway and so it is redundant.
    
    Outbound operations are those which are part of the ChannelOutboundInvoker interface.

commit 3e783e1b5e9d067271bc8e398230e056379baa75
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Dec 10 16:47:24 2012 +0100

    Fix bug in DefaultChannelHandlerContext where ByteBridge does not handle bounded buffers well

commit 321b18d4d190cc14977bca4ff5246d4ed0cdccba
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 10 20:22:19 2012 +0900

    Fix test failures n LocalTransportThreadModelTest
    
    testConcurrentMessageBufferAccess() assumes the outbound/inbound byte buffers are unbounded.  Because PooledByteBuf is bounded, the test did not pass.
    
    The fix makes an assumption that ctx.flush() or fireInboundBufferUpdated() will make the next buffer consumed immediately, which is not the case in the real world.  Under network congestion, a user will see IndexOutOfBoundsException if the user's handler implementation writes boundlessly into inbound/outbound buffers.

commit bf8345999c43bd32cffb2e64673a1a1d588135af
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Dec 8 12:59:32 2012 +0100

    Fix release of buffers in ByteToMessageCodec and MessageToMessageCodec

commit 312810d415da381fc6cd53358a4e986e7bdc4f63
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Dec 7 20:14:11 2012 +0100

    [#795] Fix WebSocketClientHandshaker13 and WebSocketClientHandshaker08 finishHandshake() method.

commit e5a8958ed6b4e33ef554ce6627e3e1cb5aeba4bd
Author: Shawn Silverman <shawn@twitter.com>
Date:   Thu Dec 6 12:10:12 2012 -0800

    Fixed some 120-character line checkstyle problems.

commit 8be43903e1db0cb568fcaaa1727b16c5d636bfee
Author: Shawn Silverman <shawn@twitter.com>
Date:   Thu Dec 6 12:07:19 2012 -0800

    Added more Javadocs to the 'replace' methods, see Netty issue 756.

commit 038bcfc4ffda87735602d402b615869f5686114d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Dec 6 20:57:08 2012 +0100

    [#792] Implement freeInboundBuffer(...) and freeOutboundBuffer(...) methods in ByteToByteCodec

commit 16b05def59bf321ce5d6354e852ff198ccfcca27
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Dec 6 19:36:53 2012 +0100

    Fix possible NPE which accour if the inbound/outbound buffer was not lazy allocated yet

commit 51e6519b67cc947e5375038e26595d9bbbc4d4bb
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 5 19:28:56 2012 +0900

    Replace UnsafeByteBuf with ByteBuf.unsafe() again
    
    * UnsafeByteBuf is gone. I added ByteBuf.unsafe() back.
    * To avoid extra instantiation, all ByteBuf implementations implement the ByteBuf.Unsafe interface.
    * To hide this implementation detail, all ByteBuf implementations are package-private.
    * AbstractByteBuf and SwappedByteBuf are public and they do not implement ByteBuf.Unsafe because they don't need to.
    * unwrap() is not an unsafe operation anymore.
    * ChannelBuf also has unsafe() and Unsafe. ByteBuf.Unsafe extends ChannelBuf.unsafe(). ChannelBuf.unsafe() provides free() operation so that a user does not need to down-cast the buffer in freeInbound/OutboundBuffer().

commit a9af028077d2ede3c152622bfc401b3bbe13a4e8
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Dec 4 09:14:05 2012 +0100

    [#787] Move the socks package to the right place

commit 9c0b2ad75c8a2e071f0befe7158c0dcb646f9c12
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 4 16:46:46 2012 +0900

    Update netty-build to the latest version
    
    From this commit, checkstyle considers an unnecessary empty line as a
    violation.

commit 85c570505b4d551e71d6ac647ab740eb775f64fc
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Dec 3 20:34:05 2012 +0100

    [maven-release-plugin] prepare for next development iteration

commit 17d77ed160517d8b1b56f6e96a201bd634e76738
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Dec 3 20:33:49 2012 +0100

    [maven-release-plugin] prepare release netty-4.0.0.Alpha8

commit 760cc95115d5aad4d4d585bd0678a8436f635636
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Dec 3 19:58:03 2012 +0100

    Cleanup

commit f9225df0a971a5777f4270f23fd56b66208db13f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Oct 24 18:27:26 2012 +0200

    Add back support for FileRegion. See #668

commit 33c0c89fefbbf19807a8dd685d87565edf745f57
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 3 19:58:13 2012 +0900

    Remove unnecessary empty lines

commit 32f2122e642e38d29f3e8c0bf606c8164ad3986c
Author: alexey <alexey@debian-desktop.home.org>
Date:   Sat Dec 1 12:36:07 2012 +0400

    fix socks5-auth subnegotiation version handling
    
    Conflicts:
    
    	codec-socks/src/main/java/io/netty/codec/socks/SocksAuthRequestDecoder.java

commit 717bde05e279d214d699b6184cc46af201cafc10
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Dec 2 19:55:45 2012 +0100

    [786] Fix possible corruption of first WebSocketFrame caused by WebSocketServerHandshaker*

commit e45ab1d1820c52c22065cf651aae22f5489a8867
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Dec 2 22:03:11 2012 +0900

    Fix a checkstyle error

commit 5f9090a7f037e566c511c02eb6ae73ca2f6774cb
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Dec 2 21:50:33 2012 +0900

    Fix invalid memory access in AIO writes
    
    To perform writes in AioSocketChannel, we get a ByteBuffer view of the
    outbound buffer and specify it as a parameter when we call
    AsynchronousSocketChannel.write().
    
    In most cases, the write() operation is finished immediately.  However,
    sometimes, it is scheduled for later execution.  In such a case, there's
    a chance for a user's handler to append more data to the outbound
    buffer.
    
    When more data is appended to the outbound buffer, the outbound buffer
    can expand its capacity by itself.  Changing the capacity of a buffer is
    basically made of the following steps:
    
    1. Allocate a larger new internal memory region.
    2. Copy the current content of the buffer to the new memory region.
    3. Rewire the buffer so that it refers to the new region.
    4. Deallocate the old memory region.
    
    Because the old memory region is deallocated at the step 4, the write
    operation scheduled later will access the deallocated region, leading
    all sort of data corruption or even segfaults.
    
    To prevent this situation, I added suspendIntermediaryDeallocations()
    and resumeIntermediaryDeallocations() to UnsafeByteBuf.
    
    AioSocketChannel.doFlushByteBuf() now calls suspendIntermediaryDealloc()
    to defer the deallocation of the old memory regions until the completion
    handler is notified.

commit 72e0acbe848a8f1727e9ec586b245db36defc082
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Dec 2 20:38:59 2012 +0900

    Use correct timeout in AioSocketChannel.beginRead()

commit bfe2a96505b52fcc990d7e8e990c3a8676c42c5d
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Dec 2 20:17:53 2012 +0900

    Fix AssertionError from AsyncSocketChannel.beginRead()
    
    An AssertionError is triggered by a ByteBuf when beginRead() attempts to
    access the buffer which has been freed already.  This commit ensures the
    buffer is not freed before performing an I/O operation.
    
    To determine if the buffer has been freed, UnsafeByteBuf.isFreed() has
    been added.

commit 95e8ec1db97e2bbf3be65185c7ac3de5525ded5b
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Dec 2 20:03:35 2012 +0900

    Handle the case where JDK notifies aync I/O handler immediately
    
    After some debugging, I found that JDK AIO implementation often performs
    I/O immediately from the caller thread if the caller thread is the I/O
    thread, and notifies the completion handler also immediately.  This
    commit handles such a case correctly during reads and writes.
    
    Additionally, this commit also changes SingleThreadEventExecutor to let
    it handle unexpected exceptions such as AssertionError in a robus
    manner.

commit 00c4b944e45e3d3245f1bae8a781c8a99905d533
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Dec 1 00:10:42 2012 +0900

    Fix more inspector warnings introduced by recent mergences

commit 6208c628881b0211c7ac82f632d7b09c1f04eca5
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 30 23:01:57 2012 +0900

    Fix inspector warnings introduced by recent mergences

commit 818a7b42a3a688bfbf60b32c7c50528fbb480fc9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 30 22:49:51 2012 +0900

    Fix all Xlint:unchecked warnings

commit b33df8399eb15686450dba22957c15f768543ecd
Author: Matthias Wessendorf <matzew@apache.org>
Date:   Tue Nov 27 18:09:53 2012 +0100

    fixing type on event/send argument

commit c661c344eddb3d5987d20b7ee7f13d8dc59ad233
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 26 17:15:14 2012 +0900

    Add proper toString() implementation for internal ChannelFactory impls

commit 918666481ea8fcba757690cc13633267f1384722
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 26 16:58:29 2012 +0900

    Ensure lazily instantiated outbound buffers are instantiated from the event loop

commit 74749ec15d7f88e2fb364339d095f58702b8c6b4
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 26 16:14:24 2012 +0900

    Implement Bootstrap.toString() and use it in the testsuite
    
    By implementing Bootstrap.toString() and printing it for each test case helps us figure out which transport is causing a trouble.

commit 089d022e03f4caad2cf709907eba82c7464b920e
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 26 15:34:09 2012 +0900

    Remove redundant exception message

commit 9018f8e5ca0223b31b2c87e01b9dfe59c51d3843
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 26 15:01:13 2012 +0900

    Enable assertions only for Netty classes

commit d7f0351a8545e00d96d65a20301c3aaf243364d1
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 26 14:53:15 2012 +0900

    Add JVM options for faster test runs

commit 40373526ce096a7eafc409e3f39668afa11fb873
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 26 14:41:12 2012 +0900

    Remove unexpected bad text
    
    Doh!

commit 5b68f0038273461592fd65cde077254f3bdbeeab
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 26 14:38:20 2012 +0900

    Make CompatibleMarshallingDecoder discard the inbound buffer once TooLongFrameException is raised
    
    (See #768)
    
    Once too long object is received, CompatibleMarshallingDecoder has to
    discard all input from now on, just like MarshallingDecoder does.
    Otherwise, the decoder will raise more exceptions because the decoder
    has no idea anymore where the object starts.
    
    Before this fix, SerialThreadLocalCompatibleMarshallingDecoderTest
    logged many additional exceptions raised by the decoder after test is
    finished.

commit d7d8503f5c14b9d5db31de094a2b3d0de7834564
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Nov 25 13:36:55 2012 +0100

    Add a line-based frame decoder with good performance.
    
    Using DelimiterBasedFrameDecoder with Delimiters.lineDelimiter() has
    quadratic performance in the size of the input buffer.  Needless to
    say, the performance degrades pretty quickly as the size of the buffer
    increases.  Larger MTUs or loopback connections can make it so bad that
    it appears that the code is "busy waiting", when in fact it's spending
    almost 100% of the CPU time in DelimiterBasedFrameDecoder.indexOf().
    
    Add a new LineBasedFrameDecoder that decodes line-delimited frames
    in O(n) instead of DelimiterBasedFrameDecoder's O(n^2) implementation.
    In OpenTSDB's telnet-style protocol decoder this resulted in throughput
    increases of an order of magnitude.
    
    Change DelimiterBasedFrameDecoder to automatically detect when the
    frames are delimited by line endings, and automatically switch to
    using LineBasedFrameDecoder under the hood.  This means that all Netty
    applications out there that using the combo DelimiterBasedFrameDecoder
    with Delimiters.lineDelimiter() will automatically benefit from the
    better performance of LineBasedFrameDecoder, without requiring a code
    change.

commit b1cd953d02e3929c9b86a408765272a6e2732f85
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Sun Nov 25 10:22:44 2012 +0100

    Adding WebSocket Example using WebSocketServerProtocolHandler.

commit dbbc6ad73f0180cd9f68cc79bc3bccbacca4e0f1
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 22 20:45:49 2012 +0900

    Reduce the chance of RejectedExecutionException
    
    When a Netty application shuts down, a user often sees a REE
    (RejectedExecutionException).
    
    A REE is raised due to various reasons we don't have control over, such
    as:
    
    - A client connects to a server while the server is shutting down.
    
    - An event is triggered for a closed Channel while its event loop is
      also shutting down.  Some of them are:
      - channelDeregistered (triggered after a channel is closed)
      - freeIn/OutboundBuffer (triggered after channelDeregistered)
      - userEventTriggered (triggered anytime)
    
    To address this issue, a new method called confirmShutdown() has been
    added to SingleThreadEventExecutor.  After a user calls shutdown(),
    confirmShutdown() runs any remaining tasks in the task queue and ensures
    no events are triggered for last 2 seconds.  If any task are added to
    the task queue before 2 seconds passes, confirmShutdown() prevents the
    event loop from terminating by returning false.
    
    Now that SingleThreadEventExecutor needs to accept tasks even after
    shutdown(), its execute() method only rejects the task after the event
    loop is terminated (i.e. isTerminated() returns true.)  Except that,
    there's no change in semantics.
    
    SingleThreadEventExecutor also checks if its subclass called
    confirmShutdown() in its run() implementation, so that Netty developers
    can make sure they shut down their event loop impementation correctly.
    
    It also fixes a bug in AioSocketChannel, revealed by delayed shutdown,
    where an inboundBufferUpdated() event is triggered on a closed Channel
    with deallocated buffers.
    
    Caveats:
    
    Because SingleThreadEventExecutor.takeTask() does not have a notion of
    timeout, confirmShutdown() adds a dummy task (WAKEUP_TASK) to wake up
    takeTask() immediately and instead sleeps hard-coded 100ms.  I'll
    address this issue later by modifying takeTask() times out dynamically.
    
    Miscellaneous changes:
    
    SingleThreadEventExecutor.wakeup() now has the default implementation.
    Instead of interrupting the current thread, it simply adds a dummy task
    (WAKEUP_TASK) to the task queue, which is more elegant and efficient.
    NioEventLoop is the only implementation that overrides it. All other
    implementations' wakeup()s were removed thanks to this change.

commit 81e2db10faaf0389f4e1af8c7132210946203157
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 16 06:04:37 2012 +0900

    ByteBufAllocator API w/ ByteBuf perf improvements
    
    This commit introduces a new API for ByteBuf allocation which fixes
    issue #643 along with refactoring of ByteBuf for simplicity and better
    performance. (see #62)
    
    A user can configure the ByteBufAllocator of a Channel via
    ChannelOption.ALLOCATOR or ChannelConfig.get/setAllocator().  The
    default allocator is currently UnpooledByteBufAllocator.HEAP_BY_DEFAULT.
    
    To allocate a buffer, do not use Unpooled anymore. do the following:
    
      ctx.alloc().buffer(...); // allocator chooses the buffer type.
      ctx.alloc().heapBuffer(...);
      ctx.alloc().directBuffer(...);
    
    To deallocate a buffer, use the unsafe free() operation:
    
      ((UnsafeByteBuf) buf).free();
    
    The following is the list of the relevant changes:
    
    - Add ChannelInboundHandler.freeInboundBuffer() and
      ChannelOutboundHandler.freeOutboundBuffer() to let a user free the
      buffer he or she allocated. ChannelHandler adapter classes implement
      is already, so most users won't need to call free() by themselves.
      freeIn/OutboundBuffer() methods are invoked when a Channel is closed
      and deregistered.
    
    - All ByteBuf by contract must implement UnsafeByteBuf. To access an
      unsafe operation: ((UnsafeByteBuf) buf).internalNioBuffer()
    
    - Replace WrappedByteBuf and ByteBuf.Unsafe with UnsafeByteBuf to
      simplify overall class hierarchy and to avoid unnecesary instantiation
      of Unsafe instances on an unsafe operation.
    
    - Remove buffer reference counting which is confusing
    
    - Instantiate SwappedByteBuf lazily to avoid instantiation cost
    
    - Rename ChannelFutureFactory to ChannelPropertyAccess and move common
      methods between Channel and ChannelHandlerContext there. Also made it
      package-private to hide it from a user.
    
    - Remove unused unsafe operations such as newBuffer()
    
    - Add DetectionUtil.canFreeDirectBuffer() so that an allocator decides
      which buffer type to use safely

commit 2adebc4c54ae98565db8e2a3c02b2ffaa0c101fe
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Nov 20 20:09:59 2012 +0100

    [#755] SPDY: fix header block values truncation in decompression

commit ff14feeb54f8dccb310541707922ea78997f7af1
Author: Mike Heath <elcapo@gmail.com>
Date:   Mon Nov 19 23:11:23 2012 -0700

    The handshake handler should not handle the exception and simply close the socket. The exception should be propagated to the WebSocketServerProtocolHandler to send the appropriate response and then close the socket.

commit 40e53b9b6859ccfb622b14336a17f81462e584c8
Author: Mike Heath <elcapo@gmail.com>
Date:   Mon Nov 19 23:11:08 2012 -0700

    Fixed exception handling to call the exceptionCaught method in the current handler. By default the handler will call ctx.fireExceptionCaught which is what was happening before.

commit 4107b08f29be35fd2e63f03e49f7f49dbf94578c
Author: dantran <dantran@gmail.com>
Date:   Sun Nov 18 16:05:45 2012 -0800

    Only generate OSGi manifest only at all-in-on sub module to reduce the complexity to the build

commit 434c19da33ee1d7a2dcce9f6efcf8db9e71adfca
Author: dantran <dantran@gmail.com>
Date:   Mon Nov 12 08:11:45 2012 -0800

    Clean maven-bundle-plugin warnings

commit 524fac5184d42acf40d1f9ad3c05a292b6ed957d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Nov 18 12:23:44 2012 +0100

    [#748] Upgrade to yammer metrics 2.1.4

commit fea7475080b7408dcd7115c10f84edc98a6f94fa
Author: coltnz <colin.taylor@gmail.com>
Date:   Sun Nov 18 23:11:39 2012 +1300

    [#749] Report non @Shareable handler name that has been re-added.

commit 5d2b41c094198c5e6df9297183530b16d0879880
Author: alexey <alexey@debian-desktop.home.org>
Date:   Wed Nov 7 22:54:00 2012 +0400

    basic support for socks5 codec

commit ef26ffe9d83e625167a6025c7537fb674157bfab
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Fri Nov 16 16:24:52 2012 -0800

    SPDY: remove deprecated methods

commit 97d07253e2933dbca0d08cd19072503506bda863
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Fri Nov 16 16:19:56 2012 -0800

    SPDY: fixed session status (internal error misdocumented)

commit a0da613e86e2fc2fa2a8bf1179d4492bc9cad7d9
Author: Evans Yang <dduyoung@gmail.com>
Date:   Fri Nov 16 13:30:34 2012 +0800

    [#743] Make the "tail" point to the last channel handler context. And add several cases for DefaultChannelPipeline.

commit 37d04c26a82c35c33678ba9cc38a5554dccde726
Author: Evans Yang <dduyoung@gmail.com>
Date:   Thu Nov 15 16:42:21 2012 +0800

    [#739] Potential NullPointException without checking the initialCtx's status

commit d28eca7138217389631a406f7cb116f34a8f2814
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Nov 15 13:06:48 2012 +0100

    [#740] Fix WebSocketClientHandshaker00.finishHandshake() validations

commit 46d713970b624b01a4f4d4cfbbc8523e57e16c14
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Nov 14 10:08:44 2012 +0100

    [#737] WebSocketClientHandshaker00 should set Content-Length header do workaround problem with proxy

commit b5d83a24074e5dfefd7489dc0fb5309b04bb35f6
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 14 16:32:44 2012 +0900

    Upgrade netty-build to 12

commit 0bd73b8d80259504d20f3458e891fd42eedf00c4
Author: Shawn Silverman <shawn@twitter.com>
Date:   Mon Nov 12 14:55:05 2012 -0800

    [#732] [#672] Allow replacing an inbound or outbound buffer of a handler

commit 3b729848dc075dac0ed449422be96d2eaff51379
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Nov 13 20:05:54 2012 +0100

    [#735] Improve the notification of the handshake future

commit efaa5c2ff5a80ccf87d8e47a6dcf30761cf90e85
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Nov 13 09:26:32 2012 +0100

    [#735] Make sure the handshake ChannelFuture is notified after the right encoder is present in the ChannelPipeline

commit d177fd5a17ffc8001573bca1a18a411392e487ba
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Nov 13 09:25:19 2012 +0100

    [#735] Make sure the handshake ChannelFuture is notified after the right encoder is present in the ChannelPipeline

commit 2d5028bfd6872f551bf33b9fba9b0dd416c0dd8f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Nov 12 15:29:02 2012 +0100

    [#729] Correctly handle urls with empty abs_path in it when issue the websocket handshake

commit 105f952f5de0d276e5b7c69057fbe16f369e3dc7
Author: dantran <dantran@gmail.com>
Date:   Mon Nov 12 01:45:45 2012 -0800

    Clean up maven-bungle-plugin warnings

commit e236f5b77d10fa807bed797817a5c1471e37dca0
Author: dantran <dantran@gmail.com>
Date:   Sun Nov 11 13:35:56 2012 -0800

    [#154] [#727] Use maven-plugin-plugin to generate OSGi manifest

commit 45de76f58d6cf381cb7c33a3e3f6d1def34a856f
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 16:02:30 2012 +0900

    More helpful IllegalArgumentException message

commit b3be15204d0389c31227ee16e0d3a1422341dc99
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 15:59:25 2012 +0900

    Fix 'channelFactory already set' error

commit 9ac522382a2ef8bc2009f7eaf525a7b41ff410cc
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 14:03:43 2012 +0900

    Fix visibility warnings from the inspector.

commit ec7849ac0918fa7577cb8df453010962da80945b
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 13:39:24 2012 +0900

    Allow '_' in parameter names although discouraged

commit a05064d3ebd06a041258cd7b7a197da8818a0146
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 13:14:24 2012 +0900

    Fix more inspection warnings + compilation errors

commit 36c8eb02e82996e1c0c2e3826624fc3621741662
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 12:59:37 2012 +0900

    Fix parameter namings + some more

commit 6f2840193ab8faa7b2e8b597118b57cd533174ed
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 12:45:06 2012 +0900

    Fix inspection warnings related with JUnit usage

commit aedf8790c33c60097e7384e73c3333b032c60a80
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 12:26:19 2012 +0900

    Fix various Javadoc issues / Do not use argN parameter names

commit ea4a0e3535723387edc80321a02033588f8cccbf
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 11:51:23 2012 +0900

    Prefer {@code ...} to <code>...</code> / Fix deprecation warnings

commit b195190b2a630cd1b37f476a493aca54f1a0fe30
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 11:26:29 2012 +0900

    Remove an unused import

commit 15642f2cd8085536faf5364c8c6c1504ed3514b9
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 11:23:06 2012 +0900

    Do not call static methods via instances

commit f1e382c89dbbc36ae1b116052b1ed8f780c0178c
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 09:53:44 2012 +0900

    Fix compiler warnings related with SCTP detection

commit d78f5a4f766018def64ee01e9ebe610bddb1d12a
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 09:50:10 2012 +0900

    Optimize imports / Remove britspace

commit 9746bb20364c5fdfd182993a38fb6564012b2a3c
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 09:43:55 2012 +0900

    Make a member field final wherever possible

commit 4dce19b8140db80fa1061cf056d817c83cbd2b50
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 09:43:14 2012 +0900

    Replace a variable with a constant wherever possible

commit 1cb589a9502929c69955264ea1e3a27110a25f16
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 09:39:16 2012 +0900

    Replace a loop that runs only once with a single statement (Second take)
    
    Fix potential NoSuchElementException

commit 18f1b1f1d06c12008b32ddd87379f365f39052c3
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 09:35:50 2012 +0900

    Replace a loop that runs only once with a single statement

commit aa7cd691df36db0c452b8e0dbcf71f75926f4a3f
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 09:31:40 2012 +0900

    Remove redundant 'else' branches.

commit 361703b31960ba4bdfd1a9cd33535a418f950242
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 09:15:33 2012 +0900

    Remove unnecessary 'return's / Clean up QueryStringDecoder

commit 91a61d7f432deb6af7cd0df2a2632a3ed8c86e07
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 09:11:48 2012 +0900

    Remove unnecessary qualifiers

commit 61d872d6e2e4c8c9a271884335ba3498b593858a
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 09:05:16 2012 +0900

    Suppress false-positive inspection warnings /

commit a07fb94fe78b1e324836536f6aadb8127aa99907
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 12 08:59:54 2012 +0900

    Prefer "str".equals(var) to var.equals("str") / Add proper null checks

commit fa805c4c1308fd3a22d37e1ffcde96c0e898371b
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Nov 10 20:43:53 2012 +0100

    Allow easier use of AIO transport via bootstrap. Related to [#725]

commit 1cc104e1c02f5ee54979d8dfcba5aa4fb20d3503
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 08:51:59 2012 +0900

    Fix a compilation error

commit 5d45880b9ea338b56d62f395c6ddb1a89b27f510
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 08:50:21 2012 +0900

    Fix a failing test
    
    There's practically no way to test if the detected localhost is good if the user's environment is broken.

commit 250c2545e6483cc781ea03425b79e95d19b31348
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 08:48:00 2012 +0900

    Fix a compilation error (sorry!)

commit 0b30bf613d8568ef0c7d79e817d169e0fea9b2f2
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 08:45:07 2012 +0900

    More robust localhost resolution
    
    Ensure the resolved localhost can be bound and connected actually

commit b4f796c5e3a89e17408e416e11169e400dc2ef36
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 08:03:52 2012 +0900

    Use 'x' over "x" wherever possible / String.equals("") -> isEmpty()

commit 05c416b674d16270ebc02b923e3803d220e99e5b
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 07:54:33 2012 +0900

    Add 'static' modifier to the methods that don't need to be member methods

commit 5a4b2ec07e991c9c1b7ed61b302b4f486f81bfc3
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 07:36:42 2012 +0900

    Replace keySet() + unnecessary map lookup with entrySet()

commit f77f13faf01a647163c6d74ef5cbf932fab47b49
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 07:32:53 2012 +0900

    Make classes static wherever possible

commit c77bac44a23e75fe258c433296f97185eb59d71a
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 07:29:14 2012 +0900

    Fix unchecked warnings

commit 9f2c1c47746a354ed59b49245d8314df77571d17
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 07:24:54 2012 +0900

    Use foreach loop wherever possible / Prefer String.contains() to indexOf() >= 0 / Prefer StringUtil.split() to String.split()

commit 3f4b3314cc4622302f1ed106a6314d3b1bc3c465
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 07:11:31 2012 +0900

    DefaultHttpDataFactory.MINSIZE must be final

commit 4e0f455e69152a3b25acd8bfa6be660c98784142
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 07:10:30 2012 +0900

    Remove methods overridden but identical with the super implementation / Make constructors of abstract classes protected rather than non-sense public
    
    AbstractWrappedByteBuf.capacity(int) should raise a UnsupportedOperationException rather than ReadOnlyBufferException.

commit d6a0fe54fd866917d2fd7d13894cb7527563f467
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 07:07:37 2012 +0900

    Remove unnecessary throws clauses for unchecked exceptions

commit 0d0eb0abfb687033a8a829e415f354f2f88979fe
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 07:05:18 2012 +0900

    Remove unused imports

commit 23883d25ee0d660a3f17bbce584dcc0ebc690ecb
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 07:03:07 2012 +0900

    Remove various unnecessary qualifiers

commit 5c57dd9f0d2f6050abf010ae4f88ab95da29c0fb
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 06:56:39 2012 +0900

    Remove redundant field initialization

commit b9fbed49bdb8e758de39966b31ced423b7a580dd
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 06:53:34 2012 +0900

    Suppress false positives related with utility class inspections.
    
    IntelliJ IDEA inspection for private utility classes seems flawed.

commit 958d04a42b0b073a220c9fdf7d45d3bc228556de
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 06:47:59 2012 +0900

    Remove redundant throws clauses / Suppress inspections for some false positives

commit 211b4059b14d19693c7a44313cd0eb51a79fe23d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Nov 9 20:09:07 2012 +0100

    [#719] Handle http requests without an absolute path the right way when encoding them, which is adding / to it

commit a5a19efb4b360c8daec2489aadb214745641eeba
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 02:27:33 2012 +0900

    Remove unnecessary this, parenthesis, and semicolons

commit a9cfde97f018aed9c330025e9eb9721050f1590c
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 02:19:11 2012 +0900

    Add missing final modifiers

commit 8ad50a3e9c57d9f773240bc6f34e1ce5231d52be
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 02:13:15 2012 +0900

    Remove recundant type casting

commit 27dc582e2bb4888f082806756e2181bd463c8db4
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 01:55:33 2012 +0900

    Fix a regression in HttpMessageDecoder due to a mistake during yak shaving

commit b8f5ef0423c54511765549b728d3ee91ee76dfbc
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 01:34:39 2012 +0900

    Remove unnecessary null check before equals()

commit 58ba0de6591070a9461c70d4b5493a7a75b7919c
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 01:32:21 2012 +0900

    Remove unnecessarily qualified static access

commit bbcb035246423895b5ae73c323434784ac7b5245
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 01:24:04 2012 +0900

    Prefer isEmpty() over size() == 0 or length() == 0

commit 02a43804d4f0bc364ac611a722a7dd0030f54a30
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 01:13:38 2012 +0900

    Upgrade netty-build to 11

commit 957154c00579649d7d49aa6b66522988dfdeb8cb
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 01:08:18 2012 +0900

    Remove redundant no-arg constructors

commit 3d364c7f75291bca7df0afd6a7efc50d45bde6da
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 00:53:37 2012 +0900

    Enum should not have a non-final value

commit e21dc5925db23d560bd30afe49ee96e0608fd46c
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 10 00:41:22 2012 +0900

    Replace dynamic regular expressions with precompiled Patterns or new StringUtil.split()

commit 8c0e5626c234c92b2df9b2b59d2f4a26c53411e7
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 9 17:55:28 2012 +0900

    Remove concatenation with empty string

commit 96a769805bf93d5898da01b746b259998afd26a8
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 9 17:44:40 2012 +0900

    Fix utility classes - missing final modifiers etc

commit 8842f8ef9047a2f224f8bc2be4b2898aec6d4274
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 9 17:34:34 2012 +0900

    Add missing @Override annotation

commit 1ec7f55ac6f4763e0e6533a7a530970bfb83ebb8
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 9 17:32:43 2012 +0900

    Simplify SingletonHolder by using interface instead of static class

commit 2ab38d8685b31fad23d4903fccb07ee85bb55676
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 9 17:26:11 2012 +0900

    Remove pointless bitwise expressions

commit 57aa842b6354af3898cbc7d71ae70ea2dfc4d8f9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 9 17:17:25 2012 +0900

    Move private methods only used from inner classes to the inner classes

commit 994a8db8fc2e1f8014e490e1ec2dd08995a130a9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 9 17:14:59 2012 +0900

    Fix overly-strong type casts

commit 90c0481ecf6c69aa1d7368e4d3918e1616159059
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Nov 8 09:38:32 2012 +0100

    [#712] Fix parsing dates in the past bug in CookieDecoder

commit 1a7e7a1bff51e4f4a6c76d4cb17478900dd56cb0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Nov 7 19:06:20 2012 +0100

    [#654] Fix race which could lead to some concurrent side-effects like raise a ConcurrentModificationException when using the nio transport

commit 313f777491e25ceb76c7b5bafb8668dc4559c046
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Nov 5 23:08:39 2012 +0100

    [maven-release-plugin] prepare for next development iteration

commit 57da8222a4359816b5ac7dbf9bcb889c10300513
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Nov 5 23:08:28 2012 +0100

    [maven-release-plugin] prepare release netty-4.0.0.Alpha7

commit 86b777a919da0c71d26b1a1d53c94396e4db2032
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 5 16:37:40 2012 +0900

    [#710] flush() requests made before SSL handshake completion are not executed after completion
    
    - Ensure SslHandler flushes its outbound buffer on handshake completion
    - Enable SSL in HttpSnoopClient example

commit d293e6c3898f7254ad6a043f166fb076c8fe3647
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Nov 4 21:21:26 2012 +0100

    [#707] Hopefully now the correct fix for it which also takes the index into account when consolidate

commit 36ac52a4bdfc4116e03e798780cecc4f3a747b46
Author: Veebs <vibuli@gmail.com>
Date:   Sat Nov 3 04:17:49 2012 -0700

    Port http multipart package. See #709

commit 4e3258973f2546125ff9cdbc86664fe2fff38f13
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Nov 3 20:00:48 2012 +0100

    [#707] Fix IndexOutOfBoundsException which could accour when the buffer is consolitated in the middle of an operation

commit 0526e1cb060e2a21fb47b33c3ea8f8f83a50b793
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Nov 2 19:50:41 2012 +0100

    [#706] Fix SpdyHttpResponseStreamIdHandler which was ported incorrectly

commit 87ba8cb4b054c59bc699c21d48a7c2e8998f7e31
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Nov 2 17:58:19 2012 +0100

    [#705] Fix SpdyOrHttpChooser

commit 8c659331e38d1cc4a6dbcd30a9add7725f36ffcd
Merge: a9814fb be6ddb7
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Nov 2 00:30:40 2012 -0700

    Merge pull request #704 from jpinner/case_sensitive_method
    
    HTTP method should be case sensitive (RFC-2616 Sec. 5.1.1)

commit be6ddb74aa9cd3f67ce04bfbecb799b181602d54
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Thu Nov 1 22:52:23 2012 -0700

    HTTP method should be case sensitive (RFC-2616 Sec. 5.1.1)

commit a9814fbf9330d8f2e2dbdd570045876841e903d3
Merge: 92f7069 93d0226
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Oct 30 05:04:27 2012 -0700

    Merge pull request #697 from CruzBishop/more-checkstyle
    
    Small checkstyle fixes

commit 93d0226c039e05af0d82b824997ec6ee8997265e
Author: Cruz Julian Bishop <cruzjbishop@gmail.com>
Date:   Tue Oct 30 21:57:26 2012 +1000

    Small checkstyle fixes
    
    Netty can build again, now.
    
    Signed-off-by: Cruz Julian Bishop <cruzjbishop@gmail.com>

commit 92f70690763e4e90dae1e76eabbd7c7765e7b640
Merge: 4696fcd 017936f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Oct 30 08:48:30 2012 +0100

    Merge branch 'master' of https://github.com/netty/netty

commit 4696fcde1fa7a9123f4ba0fa88157e3836933345
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Oct 30 08:48:09 2012 +0100

    [#691] Correctly handle SpdyRstStreamFrame

commit 017936fccd8d21bcefb6b2526a6b60ea1b228115
Merge: e726ff6 24678e2
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Oct 29 23:21:51 2012 -0700

    Merge pull request #692 from veebs/ws
    
    update docs on running autobahn tests in master

commit e726ff63d9651658910a29851f8c411a255d3c76
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Mon Oct 29 20:21:38 2012 +0100

    Cleanup

commit 24678e2d00e8bd3a6a411da147eabfaf488769fe
Author: Veebs <vibuli@gmail.com>
Date:   Mon Oct 29 03:59:54 2012 -0700

    update docs on running autobahn tests

commit 122051ba44b2ab87b6481c00683aa79b33e1ab0f
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Oct 28 20:45:00 2012 +0100

    Only a few javadocs

commit 87cc67306fea8b3941380c1e1ba5ea54d1461c9a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Oct 28 18:41:25 2012 +0100

    [maven-release-plugin] prepare for next development iteration

commit 7315490fcaea567113cd8833f3a0a12f632af8db
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Oct 28 18:41:17 2012 +0100

    [maven-release-plugin] prepare release netty-4.0.0.Alpha6

commit afc687436aef134decc3ee79fbbb7c4310e97b3a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Oct 28 18:36:15 2012 +0100

    Revert "[maven-release-plugin] prepare release netty-4.0.0.Alpha6"
    
    This reverts commit 95de4db0f11bbcda368fe53e6e62f5d55a2e7526.

commit 16eb4ec713cf5938a71e75a140c3eef3005b870a
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Oct 28 18:35:47 2012 +0100

    Revert "[maven-release-plugin] prepare for next development iteration"
    
    This reverts commit e3e0776c2032b6f67d468cc598c391dee56babe3.

commit e3e0776c2032b6f67d468cc598c391dee56babe3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Oct 28 13:06:07 2012 +0100

    [maven-release-plugin] prepare for next development iteration

commit 95de4db0f11bbcda368fe53e6e62f5d55a2e7526
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Oct 28 13:05:59 2012 +0100

    [maven-release-plugin] prepare release netty-4.0.0.Alpha6

commit 939ce4707138743474f779b03a169ea884629ff4
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Oct 27 21:13:46 2012 +0200

    disable test for now

commit 97038ea396ae99ead724ce10586d5e27fc6f1071
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Oct 27 20:57:54 2012 +0200

    Disable test for now, as it behave different on different os. Will fix it after the alpha release

commit 9551af60455da3a061e2864461ad88381afc2da6
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Oct 27 20:51:21 2012 +0200

    Skip Multicast test for OIO as it seems to fail because of a JDK bug on OSX

commit 71254e4bb506eb540f408269ece512eee5a5102d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Oct 27 20:31:55 2012 +0200

    Fix typos

commit 5a8486e39c69b011130ce10db62caea34f2d3a74
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Oct 27 19:57:59 2012 +0200

    Correct test

commit 43dc0bd8a3f674339d899104327d2a0dd208eda4
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Oct 26 14:52:50 2012 -0700

    [#275 & #686] Ability to pass a custom parameter to Bootstrap.connect() / Replace Bootstrap.newBootstrap() with duplicate()
    
    - Add Bootstrap.attr() and ServerBootstrap.attr()/childAttr() so that a
      user can initialize the attribute map from the beginning.
    - Replace newBootstrap() with duplicate()

commit fb6ce4989a9c572c3423707153c42412c902810c
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Oct 26 22:38:06 2012 +0200

    Javadoc fixes

commit e5319b66003116acad1e068837f98dec9ac0593a
Merge: 3bc330d ddd0734
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Oct 25 23:25:27 2012 -0700

    Merge pull request #682 from obergner/issue_65
    
    Add SPI to monitor netty. Also add stats for HashedWheelTimer to show how it can be used. See #65

commit ddd0734f431bb33a3ec3e7cd1aa7d3d85578db96
Author: Olaf Bergner <olaf.bergner@gmx.de>
Date:   Sun Sep 30 22:23:14 2012 +0200

    Issue #65: Provide distribution stats for HashedWheelTimer
    First cut at implementing a generic abstraction layer for pluggable
    metrics providers. This first cut is closely modeled after Yammer
    Metrics. It remains to be seen if it is indeed flexibel enough to
    support other providers.
    Provide a default implementation of this new abstraction layer
    based on Yammer Metrics.
    Support pluggable Monitoring Providers using Java 6's ServiceLoader.
    Use this new abstraction layer to provide stats on (a) number of
    Timeouts executed per second and (b) distribution of absolute
    deviation between scheduled and actual Timeout execution time in
    HashedWheelTimer.
     * Interface ValueDistributionMonitor, a monitor for histograms.
     * Interface EventRateMonitor, a monitor for measuring the rate per time
       unit of specific events.
     * Interface ValueMonitor, a monitor for tracking an arbitrary datum's
       current value
     * Interface CounterMonitor, a monitor for incrementing/decrementing a
       long value
     * Interface MonitorRegistry, a registry for monitors that serves as the
       interface between Netty and concrete metrics providers as e.g. Yammer
       Metrics.
     * Interface MonitorRegistryFactory, to be implemented by metrics
       providers.
     * Document how to use Netty's new monitoring support in javadocs for
       package io.netty.monitor.

commit 3bc330d4773e7ec7cdf320bc7904932d54cb7dda
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 24 17:09:40 2012 -0700

    Remove unnecessarily split line

commit abd37dacd6af95eda478c7e6f6ecb6b8694b6a36
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 24 17:08:11 2012 -0700

    [#681] Allow a user to access the Selector of an EventLoop
    
    - Make NioEventLoop public so that a user can downcast it
    - Add NioEventLoop.register()
    - Add NioTask to let user specify what to do on select()

commit 63d3210cffed09ecefe2e9916a09c34026c7d7f3
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 24 11:37:41 2012 -0700

    NioUnsafe.ch() should return SelectableChannel

commit bd8c4fe05005ade9542c036d6c8e80273fd0606b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 24 10:38:23 2012 -0700

    [#679] Netty 3.5.8 breaks app on startup with NPE
    
    - Get system property when requested; do not cache it.
    
    Conflicts:
    	common/src/main/java/io/netty/util/internal/SystemPropertyUtil.java

commit 985fa97c9be85270a304d385774593f6ee20fa31
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Oct 24 07:03:02 2012 +0200

    Check if message is supported before cast. See #678

commit c43b9b4dd259412f3fa3c950f41658d74b1d84d7
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 23 16:09:59 2012 -0700

    [#662] Fix race in AioEventLoopGroup
    
    - Fix a bug where shutdown() blocks indefinitely sometimes

commit c38c1d0e6f0614ab9fa013347fbdb00a31ae7470
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 23 15:07:13 2012 -0700

    [#662] Fix race in AioEventLoopGroup
    
    - Ensure the event loop threads are never terminated before all tasks
      submitted by JDK are executed
    - Close all open connections before terminating an event loop

commit 5d51aed846a36e05028649c80fcd0f2d05d6ace0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Oct 23 20:43:58 2012 +0200

    Change ChannelInboundMessageHandlerAdapter.beginMessageReceived(..) to return a boolean that will be used to check if data should be processed. See #674

commit f6aeb5ef77c2d2f046ad72e65ac81f4d748c84ee
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Oct 23 20:35:49 2012 +0200

    Upgrade to apiviz 1.3.2.GA. See #676

commit 279712a6a060ce3b77d76772aa398eafbdc255e1
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Oct 22 12:42:07 2012 -0700

    [#670] Intermittent IllegalStateException with ByteToMessageDecoder impl with bounded inbound buffer
    
    * AioSocketChannel.expandReadBuffer() should not call discardReadBytes()
    becuase it messes up with NIO.2

commit ae839db383b7b21544e20b33c4dd35d39e1a6b31
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Oct 22 11:53:25 2012 -0700

    [#670] Intermittent IllegalStateException with ByteToMessageDecoder impl with bounded inbound buffer
    
    * Ensure to call discardReadBytes() before giving up expanding the buffer

commit d9d8acf3311590f31197893427c6a24c5fe485ba
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sun Oct 21 19:54:08 2012 +0200

    Fix NPE which accours when Netty was used in an Applet. See #669

commit d3c270b0b562fb575a9a15c742542cb797af6ca1
Merge: 951c49f cbcabaf
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Oct 19 16:03:21 2012 -0700

    Merge pull request #664 from netty/method_chaining
    
    Add support for method chaining to ByteBuf

commit cbcabaf29b24fb4c04334c851c33ce9a278a3389
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Oct 18 08:57:23 2012 +0200

    Add support for method chaining to ByteBuf

commit 951c49f449a1fcc80517e4a15990555a5dfebc6c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 16 15:19:34 2012 -0700

    [#644] SslHandler should not defer channelActive event
    
    - otherwise a user will have a misconception about the life cycle of the actual connection.

commit 8bab0aae9e443c6abce66ccb635ecae7d50f4fcb
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 16 15:00:32 2012 -0700

    Fix a bug in the SecureChat example where greeting is generated too soon

commit a6c4f651a7772afb0410206908169901ff0bdc81
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 16 14:40:39 2012 -0700

    [#661] WebSocketClientHandshaker is broken.
    
    - Remove HttpRequestEncoder after handshaking is complete
    - Fix a bug in the WebSocket client example where it sends a frame even before handshake is complete

commit b76c39318d8edf39759b25990edcc4ef26bb493a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 16 14:23:02 2012 -0700

    Make NoSuchBufferException message more useful

commit b291d857572b363239e63ac0cc3710af12e2033a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 16 13:36:36 2012 -0700

    Reduce synchronization overhead in HashedWheelTimer.start/stop()

commit e7c6c880633830b0543566528bcc652157cb6bf0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Oct 16 20:18:52 2012 +0200

    Fix releasing of resources in AioEventLoopGroup, as it missed to shutdown the AsynchronousChannelGroup before. See #659

commit 6e98a04813d19d3d1144b6835a316c9150b9f711
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Oct 16 14:03:40 2012 +0200

    Fix the detection of encrypted data. See #655

commit 9e6c616c353395b2cffdf2fae1947bd3a759d6ce
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Oct 16 13:44:30 2012 +0200

    Introduce helper method to detect if a buffer is encrypted. See #657

commit 303fb80d341b5d6c71aa3fa1085227ea2cbde2b0
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Oct 13 17:04:16 2012 +0200

    Make sure the TestUtils class will also compile on operation systems that not support SCTP by using reflection

commit d504d78cb1bf92be2ec3a7327a59525cc8c26cfa
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Oct 13 09:21:40 2012 +0200

    Fix checkstyle

commit e9d2ebea3d69903ecd00af94e8220de58b1aa81d
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Sat Oct 13 09:19:01 2012 +0200

    Disable SCTP tests on platforms that not support them, also not run tests for sctp OIO. See #633

commit 6143626427670b167b54501ead1a4ee50a3dcdc2
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Fri Oct 12 07:45:00 2012 +0200

    Cleanup of sctp code based on comments in #633

commit 592f1fcc6085fd216ff95dd81f2372f97ad66d52
Merge: 92a68f5 7afa237
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Thu Oct 11 22:38:07 2012 -0700

    Merge pull request #633 from jestan/master
    
    SCTP Transport Codecs and TestCases

commit 92a68f59be471e6dec4e214f0a7115b513596e5a
Merge: 3a3e96a ce88ae3
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Wed Oct 10 06:08:30 2012 -0700

    Merge pull request #648 from alex-berger/ssl_handler
    
    Fix race in SslHandler

commit ce88ae3889a2faf067a6abc58d027dfcacbc1d78
Author: ab <alexander.berger@finnova.ch>
Date:   Wed Oct 10 14:16:13 2012 +0200

    Ensure that either SslHandler's handshake timeout or the handshake
    itself (or its failure) take place but not both.

commit 129c19c33ed3606f81934e07ada4c3b2fd070803
Author: ab <alexander.berger@finnova.ch>
Date:   Wed Oct 10 14:05:28 2012 +0200

    remove newline from end of .gitingore

commit 826e56d9f4265c9460ed5beb4519dd761df03c11
Author: ab <alexander.berger@finnova.ch>
Date:   Wed Oct 10 14:02:16 2012 +0200

    removed bin from .gitignore

commit b8fb48e90e4f9fc2131a196347231860961ae6b9
Merge: 1f67ba8 7eefc82
Author: ab <alexander.berger@finnova.ch>
Date:   Wed Oct 10 13:44:37 2012 +0200

    Merge branch 'master' of https://github.com/alex-berger/netty.git

commit 7eefc8219a2dfa9953d4866186e7eb55fe59cb91
Author: ab <ab@ab-VirtualBox.(none)>
Date:   Wed Oct 10 13:39:33 2012 +0200

    removed eclipse project files

commit 1f67ba86730d086921cddd38dcc10616920fd7b6
Merge: faa1961 3a3e96a
Author: ab <alexander.berger@finnova.ch>
Date:   Wed Oct 10 13:15:34 2012 +0200

    Merge remote-tracking branch 'netty/master'

commit faa1961131b27a4d193c3da9096f764fe46bda8e
Author: ab <alexander.berger@finnova.ch>
Date:   Wed Oct 10 12:51:32 2012 +0200

    x

commit 7958a0cbf282c5ac0dfb0393d4a9881d7a58adab
Author: ab <alexander.berger@finnova.ch>
Date:   Wed Oct 10 12:32:40 2012 +0200

    - undo eclipse project stuff

commit 3a3e96acb8070459920ddfbe76ed02a08166c11b
Merge: 7eef615 9b35513
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Oct 9 12:25:59 2012 -0700

    Merge pull request #646 from AtKaaZ/patch1
    
    server handler wasn't working due to field being overwritten in subclass

commit 9b35513fa5afe5a11628103dc21c2bf0d140319a
Author: AtKaaZ <atkaaz@gmail.com>
Date:   Tue Oct 9 20:55:24 2012 +0200

    server handler wasn't working due to field being overwritten in subclass

commit 53074bd1288807dd3a0a481fe9103e2f86a0f9bc
Author: ab <alexander.berger@finnova.ch>
Date:   Wed Oct 3 17:18:33 2012 +0200

    - make master an eclipse project

commit 7eef61580e8e395964522200784564c667d71d25
Author: Norman Maurer <nmaurer@redhat.com>
Date:   Tue Oct 2 20:16:35 2012 +0200

    No need to use a concurrent Queue with out new thread-model. See #626

commit 09d9f46e58b4504977f1a4c8475b260455f42303
Merge: da7bcfa 7751daf
Author: Norman Maurer <norman@apache.org>
Date:   Mon Oct 1 21:49:38 2012 -0700

    Merge pull request #630 from ngocdaothanh/master
    
    Add CORS headers

commit da7bcfa8f69a07e93e2c403b67ac3e17136d0128
Author: Norman Maurer <norman@apache.org>
Date:   Mon Oct 1 06:46:55 2012 +0200

    Add tests for AioChannelFinder implementations

commit 59cd054fe3c0df5f8931aa15b5cf55eda0418939
Author: Norman Maurer <norman@apache.org>
Date:   Sun Sep 30 21:18:54 2012 +0200

    Merge SpdyOrHttpChooser and SpdyHttpResponseStreamIdHandler into master. See #626

commit 7afa237f3f74c2e508d08a2501efd66601431c27
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sun Sep 30 14:14:34 2012 +0800

    Forward ported SCTP Echo Testcases

commit 8a75442419d136a893eb200868bd443027e53df4
Merge: 6904b62 ce35386
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat Sep 29 17:21:58 2012 +0800

    Merge remote-tracking branch 'upstream/master'

commit ce35386805f2efd0b97d60a56fe166e92f064387
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 29 17:18:18 2012 +0900

    Prevent cross-site scripting

commit 6904b62c2f77cef039c2d10b6f05d717f71dcb66
Merge: 64ebece 820af50
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat Sep 29 02:01:00 2012 +0800

    Resolved conflicts in SctpData/SctpMessage refactoring

commit 64ebece730e06be174dbb9e7b4558bab7b5f32e1
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat Sep 29 01:42:21 2012 +0800

    Added SCTP Codec

commit 7751daf2a47fc08f75469a83057aafca8de84c40
Author: Ngoc Dao <ngocdaothanh@ngoc.local>
Date:   Fri Sep 28 19:18:21 2012 +0900

    Add ACCESS_CONTROL_EXPOSE_HEADERS

commit 820af50b636b2ae1176f24fc5a8dab38269b985e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 28 17:57:40 2012 +0900

    [maven-release-plugin] prepare for next development iteration

commit 595e1067c7caf059d889181a5ada11d750d7c0c7
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 28 17:57:04 2012 +0900

    [maven-release-plugin] prepare release netty-4.0.0.Alpha5

commit b3d568c4d2e3b89f00d63017edb71ab51cba988b
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 28 17:45:40 2012 +0900

    de-duplicate plugin versions

commit f5e94d27e0a326f1ddda306d1c3bd1ed860f043f
Author: Ngoc Dao <ngocdaothanh@ngoc.local>
Date:   Fri Sep 28 17:19:50 2012 +0900

    Add CORS headers
    
    http://en.wikipedia.org/wiki/Cross-origin_resource_sharing
    https://developer.mozilla.org/en-US/docs/HTTP_access_control

commit 9f6505192c4a243f4c4930d4b51f8b023bf81a2e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 28 16:59:51 2012 +0900

    Simplify if

commit eae7b2d6624782086d6911b02dff50eb1f24763a
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 28 16:58:26 2012 +0900

    [#532] HttpStaticFileServer should generate an index page
    
    * Add index page listing and directory redirection

commit 1bb5ac110f45d4992d3588f3b75ef4ddb52707bf
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 28 16:27:23 2012 +0900

    [#600] mvn clean package on OSX throws Exception
    
    * Choose port randomly
    * Ensure SO_REUSEADDR is not set at any case
    * Ensure the port works for both wildcard and localhost

commit 94838ee274cbf5c1fa0fa2b621a8535dc11ae504
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 28 15:46:17 2012 +0900

    [#441] Provide a better way to handle decoder failures
    
    * Rename isPartial() to isPartialFailure()
    * Add isCompleteFailure() and isFailure()

commit 045b621b3fd8b8968056224ccc7b03179b7e2762
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 28 15:42:38 2012 +0900

    [#441] Update HTTP examples so that they understand DecoderResult

commit 623956b838ad918fbd723c75de8ca9d71c742265
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 28 15:26:38 2012 +0900

    [#441] Provide a better way to handle decoder failures
    
    * Make HttpChunkAggregator handle DecoderResult properly

commit 9155f58c6418751d21dd6868851ef46cfe06e4df
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 28 15:20:02 2012 +0900

    Rename get/setDecodeResult() to get/setDecoderResult()

commit bf808b3486d6669e2c5f1cb8a0be68efa1cf4b22
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 28 15:19:08 2012 +0900

    Rename DecodeResult to DecoderResult

commit 41e0ef2e9ac5b19744e75392543632b21da498c6
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 28 15:16:29 2012 +0900

    [#441] Provide a better way to handle decoder failures
    
    * Update toString() of all HttpObject implementations
    * HttpMessageDecoder does not raise an exception but sets decoderResult property of the decoded message.
    * HttpMessageDecoder discards inbound traffic once decoding fails, by adding a new state called BAD_MESSAGE.
    * Add a test case that tests this behavior.

commit b923d0c51f586558eaf9df7cb8f35333367f9de0
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 28 14:00:07 2012 +0900

    Use supertype HttpObject instead of HttpMessage + HttpChunk where possible

commit 7514a82c3550690fb965e8c767519fec423b108d
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 28 13:52:05 2012 +0900

    Disable timeouts if they are set to 0

commit adebda156041d8edb88d322fd5d0557e64b99720
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 28 13:48:17 2012 +0900

    [#441] Provide a better way to handle decoder failures
    
    * Add DecodeResult that represents the result of decoding a message
    * Add HttpObject which HttpMessage and HttpChunk extend.
    ** HttpObject has a property 'decodeResult'

commit 817309c7c880ac4ffeaf9e30cf9b5de7005e3608
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 27 19:28:41 2012 +0900

    Remove magic numbers from SslHandler

commit 2ecf26c8ebcfcd78fdfa13c6c78ba7f6f96c75b5
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 27 19:16:02 2012 +0900

    Fix #525 Add CORS preflight headers to HttpHeaders.Names

commit bd8ee64366ca657e5282e87865efa7c753e10ae9
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 27 19:04:35 2012 +0900

    Pull #625 from @CruzBishop selectively

commit a6bd91dce5da6eb8ae3ae2d1dd124f00aad042dc
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Sep 23 17:28:52 2012 +0900

    Sync the default select timeout with 3.x

commit d49d02ffe490f956126db37a1abf6f82858aeff5
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Sep 23 17:25:24 2012 +0900

    [#610] alpha4: DefaultSctpServerChannelConfig options in current java 7
    
    Fix a wrong signature in com.sun.nio.sctp.SctpServerChannel.setOption()

commit a156f67804f5a55cc1673ed298cec4f8defd534c
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Sep 23 17:01:31 2012 +0900

    [#624] Add varargs constructor to MessageToByteEncoder, MessageToMessage(Encoder|Decoder|Codec) to implement default isEncodable/isDecodable()
    
    .. and modify all their subtypes to take advantage of this improvement.

commit 0f0479547df4d1da6ab5085fcee56600e4826847
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Sep 23 15:40:37 2012 +0900

    Upgrade to netty-build 10

commit 942f05d33673a9ca0bb5f3f0ca1552fa1b70b336
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sun Sep 23 14:16:26 2012 +0800

    Corrected cmd args in SCTP Sample clients

commit b268f0b3334a231b0f929ba4d5292b7b6c576f47
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sun Sep 23 14:12:32 2012 +0800

    Added SCTP Codec Handlers + minor refactoring

commit b0c6b701e407a3b1189b53a7514ccc88c40c4a22
Merge: b8ae8be cf7a551
Author: Norman Maurer <norman@apache.org>
Date:   Sat Sep 22 21:26:56 2012 +0200

    Merge branch 'master' of github.com:netty/netty

commit b8ae8be96a24dc5c40ae01b184638a9d6f9a3fb9
Author: Norman Maurer <norman@apache.org>
Date:   Sat Sep 22 21:23:58 2012 +0200

    Fix IndexOutOfBoundException when using CompositeChannelBuffer and the readerIndex is at the last position and an empty array is passed to read to. See #474

commit cf7a55106ca824fdc31ab6fc6f22a7909a93508f
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 22 12:09:45 2012 +0900

    Fix checkstyle violation

commit 7c75dfb456823e510fe49b32f1ca89d26f701ea1
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 22 12:08:58 2012 +0900

    Remove System.err.printlns

commit 0b71afb81c59036c9a345f67de4f902a4e7492c3
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 22 12:05:00 2012 +0900

    Improve the stability of ServerSocketSuspendTest

commit 256f55b2e9155caf2104e5dd3118e0d7277187a3
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 22 11:22:02 2012 +0900

    [#608] Channel MessageBridge concurrency issues
    
    Fixed ArrayIndexOutOfBoundsException caused by a race condition that the peer's inbound buffer is accessed concurrently.

commit 93b34e385624afb786e008bf34c969226ac5e8ee
Author: Norman Maurer <norman@apache.org>
Date:   Fri Sep 21 22:33:11 2012 +0200

    Some more cleanup

commit a15213d751bf386678570d66f00812919ffcaf07
Author: Norman Maurer <norman@apache.org>
Date:   Fri Sep 21 22:08:12 2012 +0200

    Cleanup imports and add javadocs

commit b2a3ba815401ec41171182f6eb589a11eca4c19c
Merge: fd8db4e bf22173
Author: Norman Maurer <norman@apache.org>
Date:   Fri Sep 21 08:16:16 2012 -0700

    Merge pull request #619 from jestan/master
    
    Oio SCTP Transport

commit bf22173ed13facae5492a8458c30157795d6508a
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Fri Sep 21 12:16:06 2012 +0800

    Added Multi-Homing in SctpOioChannel

commit db4a3a478920edad1df7b0d79f08b93766e611e4
Merge: 47eafa3 fd8db4e
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Fri Sep 21 11:56:47 2012 +0800

    Merge remote-tracking branch 'upstream/master'

commit 47eafa386c568a3332eaf7035d6ca8b799398296
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Fri Sep 21 11:56:13 2012 +0800

    Added SCTP OIO Transport
    - Sctp OioChannel/ServeChannel implementation.
    - Changed interrupt handling in OioEventLoop.
    - SctpOioEchoClient/Server Example.

commit fd8db4eba2ea4b7fac17a189328ea7ae66c76d2a
Author: Norman Maurer <norman@apache.org>
Date:   Tue Sep 18 21:25:29 2012 +0200

    Check if the remoteAddress is null before set it on DatagramPacket to prevent IllegalArgumentException. See #615

commit 0c157a94cbeece8b00de00994701724f83523f04
Author: Norman Maurer <norman@apache.org>
Date:   Sat Sep 15 20:12:39 2012 +0200

    Only call ByteToMessageDecoder.decode(..) if the inbound buffer is readable. See #607

commit 516351b82cd3d4f5c1313ffc99cc13194973c02b
Author: Norman Maurer <norman@apache.org>
Date:   Sat Sep 15 19:14:59 2012 +0200

    Add a basic unit test that I wrote while porting niosmtp to netty 4

commit cc1e4d3bc7f328545291f14707aad36cdebd62a6
Author: Norman Maurer <norman@Normans-MacBook-Pro-2.local>
Date:   Fri Sep 14 07:22:02 2012 +0200

    Fix BindException on OSX. See #600

commit 3295145e88de2d7bd6ca45c0966641e5d75123b1
Author: norman <norman@apache.org>
Date:   Thu Sep 13 10:40:52 2012 +0200

    [maven-release-plugin] prepare for next development iteration

commit 42685759dec119e6c992774b824dd653bdaa80ab
Author: norman <norman@apache.org>
Date:   Thu Sep 13 10:40:44 2012 +0200

    [maven-release-plugin] prepare release netty-4.0.0.Alpha4

commit 058dfd0a78214c794cfaad39f25a5c43f7587b78
Author: norman <norman@apache.org>
Date:   Thu Sep 13 10:25:59 2012 +0200

    Just add a comment to show that the code is related to #597

commit ded98ddaf9952770a366b90ccae1fdbacf59d514
Merge: 8ab1ef1 df72356
Author: Norman Maurer <norman@apache.org>
Date:   Thu Sep 13 01:20:09 2012 -0700

    Merge pull request #594 from netty/bootstrap_refactor
    
    Bootstrap refactor

commit df72356d7d03882a2272fb03406051b7426e3319
Author: norman <norman@apache.org>
Date:   Wed Sep 12 14:04:41 2012 +0200

    Rename classes as result of descussion on #594

commit d22480c0f4ae441f68252da15e50a5adb244633e
Author: norman <norman@apache.org>
Date:   Tue Sep 11 10:32:59 2012 +0200

    Add more javadocs and also two helper methods that make it easy to create new Clientbootstrap instances from an existing one

commit 281f73fe1ae3f1c054f19eb1df8312f7910a400c
Author: norman <norman@apache.org>
Date:   Tue Sep 11 10:04:05 2012 +0200

    Some javadocs love

commit ec1339d77557d68ff29eb0e93a3332ddca307134
Author: norman <norman@apache.org>
Date:   Tue Sep 11 09:34:51 2012 +0200

    Finish the refactoring of bootstrap

commit 4ce85827eda444b7703717c7948f7b247227e655
Author: Norman Maurer <norman@apache.org>
Date:   Tue Sep 11 08:31:20 2012 +0200

    Start to refactor bootstraps to share more code and allow for reuse

commit 8ab1ef143208c582b2f57e9dae66f49a737a03fc
Author: norman <norman@apache.org>
Date:   Mon Sep 10 12:10:24 2012 +0200

    Fix checkstyle

commit 0233a3dd631284cfbc10786c96c1cfa63316b5b3
Author: norman <norman@apache.org>
Date:   Mon Sep 10 07:22:35 2012 +0200

    Close the channel after the response was written to the client on a WebSocketHandshakeException. See #587

commit 6c2053bae57cd09684433ec640708a17b41ce42f
Author: norman <norman@apache.org>
Date:   Mon Sep 10 07:18:26 2012 +0200

    Check if WebSocketServerProtocolHandshakeHandler is already in the pipeline before adding it. See #587

commit 6e3919246226b2c05ee8e2b263e30482c51a28fb
Author: norman <norman@apache.org>
Date:   Mon Sep 10 07:15:59 2012 +0200

    Rename WebSocketServerHandshakeHandler to WebSocketServerProtocolHnadshakeHandler and also make it public. See #587

commit 4353aa679491f7e7e30f107176bb054ca23b499e
Author: Norman Maurer <norman@apache.org>
Date:   Sun Sep 9 19:48:53 2012 +0200

    Use Secure websockets if SslHandler is present in the ChannelPipeline. See #587

commit bd557a6330fc542f4344f01adb2fb12a6a1ceffc
Author: Norman Maurer <norman@apache.org>
Date:   Sun Sep 9 19:35:56 2012 +0200

    Remove not necessary try / catch block. See #587

commit 2a56ab59c7eef2f87f719fc3c153bef6148ec9d1
Merge: 722c63d 416c026
Author: Norman Maurer <norman@apache.org>
Date:   Sun Sep 9 09:28:40 2012 -0700

    Merge pull request #590 from sprsquish/upgrade-websocket-conn-client
    
    Upgrade client connection after completed response

commit 416c026efe5c6c584e7fa4bf2836208162bb151c
Author: Jeff Smick <sprsquish@gmail.com>
Date:   Sun Sep 9 08:54:46 2012 -0700

    Upgrade client connection after completed response

commit 722c63ddaa2f3a2ab859b66da27e55a84d4d7c55
Merge: c6436ad 150e8b4
Author: Norman Maurer <norman@apache.org>
Date:   Sun Sep 9 02:06:23 2012 -0700

    Merge pull request #587 from danbev/websocket-enhancement
    
    WebSocket enhancements

commit 150e8b4105888affcd9b9899d85d437dfd7ed40d
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Tue Jul 24 14:38:39 2012 +0200

    WebSocket enhancements
    
    - Refactoring and adding suggestions from Norman and Vibul.

commit c6436ad470bca66ed729886944d04f5152c1c51e
Author: Norman Maurer <norman@apache.org>
Date:   Sun Sep 9 08:21:32 2012 +0200

    Also move the replacement of the decoder to the ChannelFutureListener for the websocket upgrade. See #586

commit fb17af426372cb9c421f2f4593fe8032b5b3f267
Merge: 09ad4fa 90d15c4
Author: Norman Maurer <norman@apache.org>
Date:   Sat Sep 8 23:13:40 2012 -0700

    Merge pull request #586 from sprsquish/fix-websocket-teardown
    
    Upgrade websocket connection after completed response

commit 90d15c46272f4b83a35c2640ce1169a5fb8ff024
Author: Jeff Smick <sprsquish@gmail.com>
Date:   Sat Sep 8 20:43:06 2012 -0700

    Upgrade connection after completed response
    
    Channel handlers above the HttpEncoder may delay the repsonse being
    written to the socket. We need to wait for the response to complete
    before upgrading the pipeline.

commit 09ad4faba98e5f7276a658a04b314ce26aec348d
Author: Norman Maurer <norman@apache.org>
Date:   Sat Sep 8 20:20:45 2012 +0200

    Fix README

commit 1eea3cf5032b15347b4868b74afcc3fee46a32c3
Author: Norman Maurer <norman@apache.org>
Date:   Sat Sep 8 20:20:02 2012 +0200

    Support unbindAddress and bindAddress for SCTP. See #560

commit 36ff79951bc05c89922df5db0ae2f829dd624730
Merge: 37a80dd 22cbaa4
Author: Norman Maurer <norman@apache.org>
Date:   Sat Sep 8 10:50:37 2012 -0700

    Merge pull request #584 from jestan/master
    
    Netty SCTP transport 4.x

commit 22cbaa489a6ed418679bb2e8616bd1fdf03c5fee
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Tue Sep 4 17:47:48 2012 +0530

    Ported SCTP Transport
    - Ported SCTP Echo Server/Client Example
    - Added SctpMessage, SctpData and SctpNotification classes

commit 5395944499d7dc6239338b4c42f78cf59765ded5
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Mon Sep 3 17:42:09 2012 +0530

    SCTP channel classes ported to Netty 4.x

commit 359d09bd4d508c0fc923543487dd24d543aedb4d
Merge: e257eae 37a80dd
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Mon Sep 3 16:53:05 2012 +0800

    Merge remote-tracking branch 'upstream/master'

commit 37a80ddd086db97d3206d87909e2bd03c718d19d
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 3 16:15:58 2012 +0900

    Fix incorrect Java 7 detection

commit 21c9c26ff8b177508d55ef21fb4392405242e157
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 3 16:08:22 2012 +0900

    Add SystemPropertyUtil.refresh()

commit 5a9d6e59c19308d1f9f9e6c78651d399caaa1fee
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 1 17:03:37 2012 +0900

    Remove unnecessary annotation

commit 7a77903af03e196b6172ca1fc88e47a15d66ffe5
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 1 17:01:55 2012 +0900

    Remove unused local variable

commit f1c07dbf0b2c47b94bc0509e30087347fc2ebd12
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 1 17:00:24 2012 +0900

    Fix more compiler warnings

commit 85f8247cef07c5ed3bcc6f40fba8f54bd186db5b
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 1 16:58:33 2012 +0900

    Fix compiler warnings

commit 5c347c5683b2ed1e5b4a3143ecd1d67d5f379732
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 1 16:56:44 2012 +0900

    Remove unused import

commit e781bd0b1ee902bd404d4def91dac4c9c37a1bff
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 1 16:56:09 2012 +0900

    Disable epoll bug woakraround by default

commit 00f737c3a485861972801632cff7c881a0fa2b7b
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 1 16:52:47 2012 +0900

    Move system property access operations to SystemPropertyUtil

commit 85f47d639faf220ec33c676962db83a93d1d0957
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 1 13:08:44 2012 +0900

    Use class names instead of fields to detect Java version
    
    .. because some use patched JDK with backported fields.

commit f2538a996d0ff760f770a4576101b9a6506e8e80
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 30 16:47:52 2012 +0900

    [maven-release-plugin] prepare for next development iteration

commit 628c5598b326336f67feccb5e48a44838731763b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 30 16:46:58 2012 +0900

    [maven-release-plugin] prepare release netty-4.0.0.Alpha3

commit a1e8dad4ad5f5e15ff4d9a8c8890b1fecf8eaa64
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 30 16:38:08 2012 +0900

    Fix a bug in shutdownOutput() implementations where wrong ChannelFuture is notified

commit 68e86d8667f6488ae0b17fa0732a9e56126a3e3e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 30 15:50:55 2012 +0900

    [#576] UDP socket bind to specific IP does not receive broadcast on Linux
    
    - Log a warning message if a user attempts to bind to a non-wildcard
      address with SO_BROADCAST set on non-Windows

commit 59e511fdc6fbf55bb772f09a8598d8de5ae11a13
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 30 14:18:04 2012 +0900

    Better method names

commit 47045e12cd5a66dd489cd1a269e5214b0a47f1cb
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 30 14:06:56 2012 +0900

    Fix a checkstyle violation

commit c4e7ecbb5d7a938a34e5dfa9e6f4b71aa29b2831
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 30 14:04:13 2012 +0900

    [#575] Sending EMPTYBUFFER via NIO-UDP results in spaming the socket

commit b4643c42aa771a5a673db1851af179e5041433ce
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 30 13:35:34 2012 +0900

    Ensure ChannelInputShutdownEvent is triggered only once

commit 44bfc47a52bb3d1e68e9ef44dae1d4164a86abe6
Author: Norman Maurer <norman@apache.org>
Date:   Thu Aug 30 07:24:22 2012 +0300

    Correctly convert to nanos. See #565

commit 9580c417c688c1d824152d48abe844b7c66ec442
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 29 21:52:39 2012 +0900

    Javadoc

commit d03de0f3ca51e5ffc4043683bd91e2ba6438c4ca
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 29 21:49:39 2012 +0900

    [#107] Add support for closing either input or output part of a channel
    
    - Add ChannelOption.ALLOW_HALF_CLOSURE
      - If true, ChannelInputShutdownEvent is fired via userEventTriggered()
        when the remote peer shuts down its output, and the connection is
        not closed until a user calls close() explicitly.
      - If false, the connection is closed immediately as it did before.
    - Add SocketChannel.isInputShutdown()
    - Add & improve test cases related with half-closed sockets

commit bfdc28bd6739a4b10a544ce894d80d222a80922a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 29 20:49:48 2012 +0900

    Ensure SocketShutdownOutputTest tests if half-closed socket is writable

commit a1b668bb2f3f43ddcb37e1e7a448e5a02e4a78c5
Author: Norman Maurer <norman@apache.org>
Date:   Wed Aug 29 08:12:19 2012 +0200

    Fix checkstyle. See #535

commit 3d44aeca50682a33747d3c6e41fdfccf93c597f7
Author: Norman Maurer <norman@apache.org>
Date:   Wed Aug 29 08:03:32 2012 +0200

    Merge workaround for epoll(..) bug into master branch. See #365 , #535 and #327

commit 02f3df55a858fdd1531f759345e84fdcdefe9bd6
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 29 13:26:29 2012 +0900

    [#107] Add support for closing either input or output part of a channel
    
    - Add shutdownOutput() and isOutputShutdown() to SocketChannel

commit 47f26d219d184159be0596d5a66e82a3827e1f21
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 29 13:15:24 2012 +0900

    Simplify ServerSocketSuspendTest

commit dca860e0d554f3dabf42f314117f49809b43bc5e
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 29 12:58:00 2012 +0900

    Remove code duplication in OIO transport / Make concrete unsafe final

commit a3f25da228d61d6912cf643946ad7d7e125fdc52
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 29 12:28:01 2012 +0900

    Remove unused parameter

commit 37f8710f2b5fe4b0b82f418bd76e92b9efa41602
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 29 12:13:50 2012 +0900

    Rename DefaultAioChannelFinder to ReflectiveAioChannelFinder

commit 1b810c4be6f77ff0a271bc51f483e11cd6841a76
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 29 12:04:56 2012 +0900

    Rename to the correct method name

commit 9a177d99bffbded5082a6600e4a65d018d9f2966
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 28 17:02:03 2012 +0900

    Make AioChannelFinder implementations final

commit a643bdd33199dbb41bf577914b263ddb199ee639
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 28 17:00:54 2012 +0900

    Fix a checkstyle violation

commit cc2ada0b6cf8f484ce5b3c681fb7f6e146082d57
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 28 16:59:30 2012 +0900

    Add missing license headers

commit 709b3abd8384e6e7dcfed418efd75e49ee00655f
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 28 16:57:45 2012 +0900

    Improve AioChannelFinder implementations
    
    - Use copy-on-write map
    - Fix a potential bug where the old implementation assumed that one
      Runnable type always wraps the same Runnable
    - Cache offset value instead of Field in UnsafeAioChannelFinder

commit 17ecbdd8047602b0acf62716153db6782c46b599
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 28 16:26:57 2012 +0900

    Better error message

commit c565b59fe34531ee5fa84a213a5ca87624968569
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 28 16:25:01 2012 +0900

    Remove a unnecessary annotation

commit f78f4fc0ffadb388606d5551de78f578877a83a0
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 28 16:22:43 2012 +0900

    Remove a unused internal class

commit 518c44a8265db76f3638b688e35394491d1cc010
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 28 16:21:45 2012 +0900

    Remove a unused internal class

commit fe4a8d6dc9a89e6b6834a341b11558b80f521473
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 28 16:14:35 2012 +0900

    Extract ChannelFinder into separate top level classes

commit e55a1f11b54333697d0bf72047695bcb914c2333
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 28 15:55:51 2012 +0900

    [#559] Fix SocketSuspendTest.testSuspendAccept()
    
    - Reimplemented the test
    - Fixed various bugs related with read/accept suspension found while testing
      - defaultInterestOps of NioServerSocketChannel should be OP_ACCEPT
      - There's no need do deregister and re-register to suspend/resume accept()
      - Occational infinite loop with 100% CPU consumption in OioEventLoop, caused by OioSocketChannel
      - Even if read/accept is suspended, what's read or accepted should be notified to a user

commit f3c940d20810635cda3e6c0f19ec3a9f621fe1ed
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 28 13:03:41 2012 +0900

    Add ChannelPipeline.first/lastContext() / Cleanup

commit 2710af1b8a1a0a55e0109b42df4fd065be5d089e
Author: Norman Maurer <norman@apache.org>
Date:   Tue Aug 28 02:10:17 2012 +0200

    More javadocs

commit 100dd541bab0f4fdb1f2741abe6e926ba71f1b96
Author: Norman Maurer <norman@apache.org>
Date:   Tue Aug 28 01:19:45 2012 +0200

    Rename ChannelHandlerContext.type() to ChannelHandlerContext.types() as it return a Set

commit ea3d3042061e18bcb01980b45903f9631c6d0d3f
Author: Norman Maurer <norman@apache.org>
Date:   Tue Aug 28 01:14:05 2012 +0200

    Some javadocs love

commit 6a62c259ab983bfa7c53992b3c6c2214fc2c1858
Merge: 778599b 967b542
Author: Norman Maurer <norman@apache.org>
Date:   Mon Aug 27 01:49:35 2012 -0700

    Merge pull request #566 from netty/unsafe_channel_access
    
    Use Unsafe when possible to access AbstractAioChannel to prevent slow Re...

commit 778599baf87297619b362fa9d669f47d4d0c9c6e
Author: Norman Maurer <norman@apache.org>
Date:   Sun Aug 26 10:05:20 2012 +0200

    Allow to adjust timeout of Selector.select(timeout) via io.netty.selectTimeout property. See #568

commit 967b5424c579964512092426812a7c6b2001b9fd
Author: Norman Maurer <norman@apache.org>
Date:   Sat Aug 25 22:50:31 2012 +0200

    Use Unsafe when possible to access AbstractAioChannel to prevent slow Reflection usage. This is kind of related to #528

commit 65f8fbb82c29c3eefcd428f6eb341347a88828d5
Merge: cd9a36d ca952e1
Author: Norman Maurer <norman@apache.org>
Date:   Sat Aug 25 03:43:20 2012 -0700

    Merge pull request #548 from CruzBishop/pseudorandom-channel-IDs
    
    Generate channel IDs in a pseudorandom fashion

commit ca952e11c09ff4687e06c1d55b6776c8d33811ab
Author: Cruz Julian Bishop <cruzjbishop@gmail.com>
Date:   Sat Aug 25 20:01:57 2012 +1000

    AbstractChannel: Remove function getRandom()
    
    Requested by @trustin and @normanmaurer
    
    Signed-off-by: Cruz Julian Bishop <cruzjbishop@gmail.com>

commit 1e3fe3ffc3214fd1f0de1da7bcbfc6d6fc9ffd68
Author: Cruz Julian Bishop <cruzjbishop@gmail.com>
Date:   Sat Aug 25 13:36:34 2012 +1000

    AbstractChannel: hashCode() now returns the channel's ID
    
    Requested by @trustin
    
    Signed-off-by: Cruz Julian Bishop <cruzjbishop@gmail.com>

commit ad7f7a2f253032142daf55190b5859b6c07faa0d
Merge: d6023ef cd9a36d
Author: Cruz Julian Bishop <cruzjbishop@gmail.com>
Date:   Sat Aug 25 13:34:17 2012 +1000

    Merge branch 'master' into pseudorandom-channel-IDs

commit cd9a36d4e76057f94d50e03a0c53b9d30d00be8a
Merge: ba6c032 3cce40b
Author: Norman Maurer <norman@apache.org>
Date:   Fri Aug 24 09:25:01 2012 -0700

    Merge pull request #553 from jfallows/aio-unmodified-buffer
    
    Ensure unmodified buffer delivered via pipeline after AIO read completes

commit ba6c0321808b5b8da0b795c7a66ee303ef636c94
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 24 17:25:07 2012 +0900

    [#557] Provide pre/post handler methods to ChannelInboundMessageHandler.inboundBufferUpdated()
    
    - Add pre- and post- handler methods

commit c9174e0733b21dd028f4cf932b30f4ca1c13fea0
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 24 17:22:14 2012 +0900

    Prefer discardSomeReadBytes()

commit 5dbb799a92de7f5f7dc3814aafd4778bea8b1214
Merge: 3aaf7cf 83c21d7
Author: Norman Maurer <norman@apache.org>
Date:   Thu Aug 23 22:26:03 2012 -0700

    Merge pull request #554 from jfallows/composite-buffer
    
    Prevent Unpooled.EMPTY_BUFFER from being stored in the composite buffer ...

commit d6023ef1290e6f3eb2fd169ac95dc6841a83dcfc
Merge: 7e3bfaf 3aaf7cf
Author: Cruz Julian Bishop <cruzjbishop@gmail.com>
Date:   Thu Aug 23 09:59:02 2012 +1000

    Merge branch 'master' into pseudorandom-channel-IDs

commit 7e3bfaf24cefdb6ea5d36f9a21f9872e1fc49b27
Author: Cruz Julian Bishop <cruzjbishop@gmail.com>
Date:   Thu Aug 23 09:56:58 2012 +1000

    Generate channel IDs in a pseudorandom fashion
    
    Requested by @psweeny in #547
    
    Signed-off-by: Cruz Julian Bishop <cruzjbishop@gmail.com>

commit 3aaf7cf82bb9443e4a5a60f5cea8dc7da0f49762
Author: norman <norman@apache.org>
Date:   Wed Aug 22 07:56:39 2012 +0200

    [#160] Make sure the exception is fired before the channel gets closed

commit 00188a29232bf6782ad78a0686090c85314fc5f2
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 22 13:38:09 2012 +0900

    [#160] No response to write if server is using SslHandler and client is not
    
    - Make SslHandler close the connection on SSLException or NotSslRecordException

commit 73720c422da3fe201b351cbb1957caa7d07010b2
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 21 15:41:04 2012 +0900

    [maven-release-plugin] prepare for next development iteration

commit 68bef8cb99eb8c962838fe125a09f7600af65a77
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 21 15:40:45 2012 +0900

    [maven-release-plugin] prepare release netty-4.0.0.Alpha2

commit 4b1b0b8c18ffd4852e1257d72930d2d684303bf1
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 21 15:37:04 2012 +0900

    Fix a build problem where javadoc is not attached to the all-in-one JAR

commit 0a43350c66da7ba3041ac77881a7a7696d5cefd5
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 21 14:41:45 2012 +0900

    [maven-release-plugin] prepare for next development iteration

commit 56211fee596a82d1b9e94ee01188e9d456b30fec
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 21 14:39:59 2012 +0900

    [maven-release-plugin] prepare release netty-4.0.0.Alpha2

commit 9028b611cef008625bfbc8f3756de445cdc98c3f
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 21 14:35:48 2012 +0900

    Retry deployment if failed

commit 5c68333c0040e15ae05e817e8932e722766105be
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 21 14:34:14 2012 +0900

    Do not deploy testsuite

commit 0f0fffe488d5362899cb77755e456dae7f806c76
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 21 14:29:04 2012 +0900

    Fix release quirks

commit a0e34fd93a14c0b03bc6aef979bea792653ab128
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 21 14:13:38 2012 +0900

    [maven-release-plugin] prepare for next development iteration

commit 72ccf65093ec45bb1ebf9ce22a92ddc6fa251df1
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 21 14:13:17 2012 +0900

    [maven-release-plugin] prepare release netty-4.0.0.Alpha2

commit a43f686d6479815896e1bba11943a6b70cf40649
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 21 14:05:04 2012 +0900

    [#527] Add Javadoc for HttpTransferEncoding

commit e2cafa9ec18530db4c417754fa3d15f06569a1b6
Merge: 2a06d68 11d9334
Author: Norman Maurer <norman@apache.org>
Date:   Mon Aug 20 21:52:13 2012 -0700

    Merge pull request #544 from CruzBishop/testcases-1
    
    More test cases (Round one)

commit 2a06d68fae1d0997da3bef252c2f56c85f68fdbf
Merge: b25996d 67e6c4b
Author: Norman Maurer <norman@apache.org>
Date:   Mon Aug 20 21:50:28 2012 -0700

    Merge pull request #543 from CruzBishop/uniquename-opt
    
    Optimize UniqueName.compareTo(other) slightly

commit 11d9334deed061656aa66f27ad1de563a0200f3f
Author: Cruz Julian Bishop <cruzjbishop@gmail.com>
Date:   Tue Aug 21 10:20:21 2012 +1000

    Adds some more test cases
    
    This adds test cases to test against:
    
    	1: DefaultAttributeMap / DefaultAttribute (100%)
    	2: NetworkConstants (61.9%, functionally 100%)
    	3: StringUtil (50%, functionally 100%)
    
    Signed-off-by: Cruz Julian Bishop <cruzjbishop@gmail.com>

commit b3a9ee1d71f539cec37017290141f3f543a2c05a
Author: Cruz Julian Bishop <cruzjbishop@gmail.com>
Date:   Tue Aug 21 09:34:52 2012 +1000

    Removes an unneeded assertion in UniqueNameTest
    
    Signed-off-by: Cruz Julian Bishop <cruzjbishop@gmail.com>

commit 6e3b9ed634df77933ccc10e545a2b265bdee4cf2
Author: Cruz Julian Bishop <cruzjbishop@gmail.com>
Date:   Tue Aug 21 09:32:00 2012 +1000

    More test cases: Round one
    
    This tests the following classes more:
    
    1: InternalLoggerFactoryTest
    	Tests InternalLoggerFactory.getInstance(Class)
    
    2: UniqueName
    	Paired with #543, this achieves 100% code coverage with tests
    
    Signed-off-by: Cruz Julian Bishop <cruzjbishop@gmail.com>

commit 67e6c4bdcaa0a1e2357344c9a0850f7bc771bcc9
Author: Cruz Julian Bishop <cruzjbishop@gmail.com>
Date:   Tue Aug 21 09:27:14 2012 +1000

    Optimize UniqueName.compareTo(other) slightly
    
    Replaces a manual check of IDs with one built in to Java
    
    At least it makes the code smaller!
    
    Signed-off-by: Cruz Julian Bishop <cruzjbishop@gmail.com>

commit b25996d024aaf55a414fc82423536617fe97fc85
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 20 21:03:23 2012 +0900

    [#486] Make NoSuchBufferException give more useful message.
    
    - Remove confusing exception messages
    - Do not use default exception messages wherever possible

commit 83c21d70eef18dc6ab17971c5a4f7e028067e020
Author: John Fallows <john.fallows@kaazing.com>
Date:   Sun Aug 19 22:59:49 2012 -0700

    Prevent Unpooled.EMPTY_BUFFER from being stored in the composite buffer due to a zero length slice, which causes reference counting problems on subsequent discardReadBytes.

commit ec2b29f0b6ab3c57fe0e75b2951f1136c8db8ed0
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 20 13:38:14 2012 +0900

    [#539] Potential direct memory leak in HttpContentEn/Decoder

commit df0aee22cbb77591e2c8ce7f71ea4b3727b7b133
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 20 12:52:38 2012 +0900

    [#540] Add a variant of ByteBuf.ensureWritableBytes() which does not throw an exception

commit aa8a761fe294f9b8e1489c961c4718bf1c77d0b9
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 20 12:30:38 2012 +0900

    Better exception message
    
    .. as advised by @jpinner

commit 10f26f3205e74050caddb11f525a7f6cbe501cd8
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 20 12:18:39 2012 +0900

    [#539] Potential direct memory leak in HttpContentEn/Decoder

commit 7f3f792017da8728e65d2756225c779f9a1c5e45
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 20 12:05:47 2012 +0900

    Fix a bug where CookieDecoder sets the default maxAge to -1
    
    .. which should be Long.MIN_VALUE

commit 3cce40bd799077e63318ec2b979e605a6021438d
Author: John Fallows <john.fallows@kaazing.com>
Date:   Sun Aug 19 13:49:09 2012 -0700

    Suppress unchecked cast warnings for config options.

commit b7ac3edf02e5771fb06a5d6856afde627d8fb73a
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 19 19:12:32 2012 +0900

    Add static modifier where static member is just enough.

commit 602f976e4111d66b807f9b2c1cbf09a8f245cd01
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 19 19:06:47 2012 +0900

    [#527] Add a new property to HttpMessage to help clarify its transfer encoding
    
    - Add an enum: HttpTransferEncoding
      - consists of SINGLE, STREAMED, and CHUNKED
    - Add HttpMessage.transferEncoding
      - replaces is/setChunked()

commit c22b559dfab50e9a8fb5a4d1182695b76c23af47
Author: Norman Maurer <norman@apache.org>
Date:   Sun Aug 19 11:55:15 2012 +0300

    Set maxAge to Integer.MIN_VALUE by default. See #534

commit e80abf0b39e26ea85c978142d0ec1b9ee31e367c
Author: Norman Maurer <norman@apache.org>
Date:   Sun Aug 19 11:48:51 2012 +0300

    Update codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java
    
    Allow to set a negative value for maxAge of DefaultCookie. See #533

commit 2bb114bcb72f467cfa3ac730493ef2270193dffa
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 19 17:36:58 2012 +0900

    [#504] SslHandler.flush() notifies futures prematurely.
    
    - Make use of ChannelFlushFutureNotifier to notify flush futures
      correctly
    - Improve the test case to ensure this commit fixes the bug

commit 3f101ad3d1ea931609165a939df513a084e80f41
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 19 17:05:51 2012 +0900

    [#504] SslHandler.flush() notifies futures prematurely.
    
    - Add ChannelFlushFutureNotifier
      - Extracted the functionality that keeps track of flush futures in
        AbstractChannel.  Will be used in SslHandler.

commit ebf33c6e3b3ec94965c07defe2e79f7edec7f64d
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 19 15:18:51 2012 +0900

    No need to make the timeout of thread model test too long
    
    Using m1.large instance fixed the unstable build problem with CloudBees

commit 7b213d2c93eced9653915fe682685df0cf88457e
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 19 15:12:18 2012 +0900

    Double the timeout of LocalTransportThreadModelTest
    
    - because it seems to make the build unstable in CloudBees

commit 8bfbebc772d2afeee0be738cf157a8b313efcfd3
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 19 15:10:09 2012 +0900

    Rename TaskScheduler to ChannelTaskScheduler

commit f02ce0fdca7cccdf7511421e5a2ea853d079d976
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 19 14:51:56 2012 +0900

    [#530] Allow using a bounded ByteBuf as the first inbound buffer
    
    - Make the test run faster

commit 44daa99d3f9911e4cf016b4ac873833852cca53a
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 19 14:48:56 2012 +0900

    [#530] Allow using a bounded ByteBuf as the first inbound buffer
    
    - Clean up
    - Do not stop reading when reached at maxCapacity.
      - Just let handler drain the buffer and try again quickly.
    - No more magic number in OIO buffer expansion

commit 9e75a33d3d21a300481dbddb33dce6243bdbb8a7
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 19 13:55:12 2012 +0900

    [#530] Allow using a bounded ByteBuf as the first inbound buffer

commit cd8e2576b4404ab7491fd85ee3c82eb499b75b00
Author: John Fallows <john.fallows@kaazing.com>
Date:   Mon Aug 13 23:16:07 2012 -0700

    Ensure unmodified buffer delivered via pipeline after read completes but before next read begins.

commit 11c742f392d9168a095f2bee2068f249b2ea539e
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Aug 18 22:53:58 2012 +0900

    [#59] Make ChannelFuture implement Future<Void>

commit e257eae2873e3dbe6cd107e936d303822444ed9c
Merge: 7ab8ca4 0b11fb2
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat Aug 18 20:11:00 2012 +0800

    Merge remote-tracking branch 'upstream/master'

commit 0b11fb2eadb7a44cbef26d4972f9070015b3da38
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Aug 18 18:50:54 2012 +0900

    [#531] Move io.netty.util.Signal to io.netty.util.internal

commit f75ba72aeb4f21f5f39215c0900b261b9f22a9fa
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Aug 18 18:48:44 2012 +0900

    Allow using non-BlockingQueue
    
    - NioEventLoop never uses takeTask(), and ConcurrentLinkedList is faster
      than LinkedBlockingQueue

commit 421eabe666f5eb3c760c757e991e4f37213f7333
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Aug 18 18:40:21 2012 +0900

    [#473] Fix elevated context switching in SingleThreadEventExecutor
    
    - Remove polling in SingleThreadEventExecutor
    - Create a dedicated scheduled task scheduler called 'TaskScheduler'
    - TaskScheduler is created per EventLoopGroup / EventExecutorGroup
    - SingleThreadEventExecutor delegates all scheduled execution requests
      to TaskScheduler provided as a constructor parameter
    - TaskScheduler is a specialized form of single threaded
      ScheduledExecutorService which requires an EventExecutor as a
      parameter for all requests.

commit 505e767a09bc5d55cd0df35b8e0f8c59e9f7c507
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 17 22:08:36 2012 +0900

    [#529] ByteBuf.ensureWritableBytes() can trigger IllegalArgumentException
    
    - Remove redundant boundary check in ensureWritableBytes()
    - Ensure calculateNewCapacity() never returns the value that exceeds
      maxCapacity

commit aef7a14852f6a7b6aa266ffa0b1738a0dc9caedb
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 17 12:42:30 2012 +0900

    Merge the pull request #432 manually
    
    - Add UniqueNameTest
    - Add JavaDoc for UniqueName

commit 9c17304755a37283069621f780201e31917ecf5c
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 17 12:18:00 2012 +0900

    Use different EventLoopGroup for AIO transport tests
    
    - plus tiny cleanup

commit 0a99a335402b0185aa2671a8b91c6341cf4148be
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 17 11:43:59 2012 +0900

    Use String.getBytes(Charset) wherever possible

commit de37d7587175f2ea9c4af81c5c06b7078ecc6c89
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 17 11:39:36 2012 +0900

    [#521] Encode URI using UTF-8 charset
    
    - Forwardport @jpinner's pull request #522
    - Use Charset instead of charset name

commit 00d60109163c5f90dd4bd38ef15bfd11e30d1fa5
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 17 11:34:35 2012 +0900

    [#494] Automatically adding chunked encoding header breaks streaming
    
    Add a missing statement dropped while forwardporting

commit e530ccaeb8ad8049e39d3dc76df035b3b4095559
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 17 11:31:40 2012 +0900

    Fix typo

commit 0baf35920287e3461fcaccaad01879a6bc2d6408
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 17 11:30:08 2012 +0900

    [#494] Automatically adding chunked encoding header breaks streaming
    
    Forwardport @jamestyrrell's pull request

commit 5787e2eac9c151f63055b9dd9d5b03dbaa38c3d2
Merge: 8b66e65 d3d52ed
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Tue Aug 14 18:10:23 2012 -0700

    Merge pull request #518 from jpinner/spdy_cleanup
    
    SPDY: introduce SpdyControlFrame tag interface

commit d3d52edb31ad5f95710483e841c8c3b5ff8ac8ca
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Tue Aug 14 18:00:39 2012 -0700

    SPDY: introduce SpdyControlFrame tag interface

commit a0d9bed8f9d2e8233cf29a5b30104fe9b3b6cfeb
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Tue Aug 14 17:57:59 2012 -0700

    SPDY: remove deprecated data compressed flag

commit 8b66e652770edf0ffde9c757386465edf8150a8c
Merge: 1f14036 148e629
Author: Norman Maurer <norman@apache.org>
Date:   Tue Aug 14 09:58:47 2012 -0700

    Merge pull request #515 from jfallows/master
    
    Add support for AIO server channel accepting new channels onto a separate child event loop group. See #514.

commit 1f1403697bdcb70de4bd4717cfcbb343e72b5804
Merge: ad534ef af0a7ea
Author: Norman Maurer <norman@apache.org>
Date:   Tue Aug 14 02:58:33 2012 -0700

    Merge pull request #512 from CruzBishop/fix-510
    
    Fix a typo in ObjectEchoClientHandler

commit af0a7eaf13552d873f63d9a82cf62f404f45721c
Author: Cruz Julian Bishop <cruzjbishop@gmail.com>
Date:   Tue Aug 14 19:52:27 2012 +1000

    Fix a typo in ObjectEchoClientHandler
    
    This fixes #510 in master
    
    Signed-off-by: Cruz Julian Bishop <cruzjbishop@gmail.com>

commit 148e629104b14e4cf99fd383ce1efb436ed10c24
Author: John Fallows <john.fallows@kaazing.com>
Date:   Mon Aug 13 23:12:50 2012 -0700

    Use childGroup for accepted AioSocketChannels, children of previously bound AioServerSocketChannel.

commit ad534efc58d8be5eb7f5b1a211639ce451bf2009
Merge: 061252e 8d90f3a
Author: Norman Maurer <norman@apache.org>
Date:   Mon Aug 13 23:07:21 2012 -0700

    Merge pull request #508 from CruzBishop/fix-431
    
    Added a function to get a UniqueName's ID

commit 061252e4b4a86b638f5defdc7dcbf8a7a963387d
Author: norman <norman@apache.org>
Date:   Tue Aug 14 08:06:54 2012 +0200

    Allow to config read/write timeout for the AIO transport. See #509

commit 8d90f3adf6b396898d03adb0220ac9623d75fe61
Author: Cruz Julian Bishop <cruzjbishop@gmail.com>
Date:   Tue Aug 14 15:44:05 2012 +1000

    Added a function to get a UniqueName's ID
    
    This fixes #431
    
    Signed-off-by: Cruz Julian Bishop <cruzjbishop@gmail.com>

commit b5aa2108ec06382a45f79f1876e6014baf836ee3
Merge: 1162f26 06fd869
Author: Norman Maurer <norman@apache.org>
Date:   Mon Aug 13 22:10:40 2012 -0700

    Merge pull request #506 from jfallows/master
    
    Add support for AIO scattering reads and gathering writes (see #492)

commit 06fd86971163c61c9a0866d92c67c190cd47fb13
Author: John Fallows <john.fallows@kaazing.com>
Date:   Sun Aug 12 17:29:07 2012 -0700

    Add support for AIO scattering reads and gathering writes.
     o Add ByteBuf.hasNioBuffers() method
     o Promote CompositeByteBuf.nioBuffers() methods to ByteBuf
     o Use ByteBuf.nioBuffers() methods from AioSocketChannel

commit 7ab8ca4d1454b7f12449110884f3b6c78b31801c
Merge: 4550ad8 1162f26
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sun Aug 12 20:12:51 2012 +0800

    Merge remote-tracking branch 'upstream/master'

commit 4550ad88a6c519cec95b18a3802464edef66159a
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sun Aug 12 20:12:25 2012 +0800

    Initial port of SCTP basic classes and interfaces to Netty 4.0

commit 1162f26df53f774dc5e4bac7015b46ddd7fe9c95
Author: Norman Maurer <norman@apache.org>
Date:   Sun Aug 12 11:07:06 2012 +0200

    @Ignore bad test-case for now. See #503

commit d3a28355030f23758fccec7169318bd4d01b4355
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 10 20:26:04 2012 +0900

    Add ServerBootstrap.group() that takes a single group

commit d2987071982a9f54c03a67cab780320cbf72763a
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 10 20:17:18 2012 +0900

    [#502] Split EventLoop/EventExecutor into parent and children
    
    - Add EventExecutorGroup and EventLoopGroup
    - EventExecutor and EventLoop extends EventExecutorGroup and
      EventLoopGroup
      - They form their own group so that .next() returns itself.
    - Rename Bootstrap.eventLoop() to group()
    - Rename parameter names such as executor to group
    - Rename *EventLoop/Executor to *EventLoop/ExecutorGroup
    - Rename *ChildEventLoop/Executor to *EventLoop/Executor

commit f4fa5698c1ff391ea44a85f5136fa2c480e37f23
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 10 10:19:01 2012 +0900

    Add a TODO which should be done when buffer pool is implemented

commit 501746aeff12dfa288273ae0ce594506bddd1e9a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 8 17:42:58 2012 +0900

    Fix an infinite loop in DefaultCompositeByteBuf.setBytes()

commit a2aadef4da964a1bd72c85734b8f347ed6e4e120
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 8 17:34:00 2012 +0900

    Add ByteBuf.Unsafe.discardSomeReadBytes() to reduce discardReadBytes()

commit b8a60dddd326c344a8d6a5f2f2a4cff99a2888cf
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 8 16:30:04 2012 +0900

    Fix m2e errors in Eclipse

commit f7e0366baec96d508180cebeef5eeb293853fd59
Author: norman <norman@apache.org>
Date:   Tue Aug 7 15:39:39 2012 +0200

    Add nioBuffers() and nioBuffers(..) method which will be used to support gathering writes for the AIO transport. See #492

commit 0334333c82e4646bd16a5682f1d54ff362db5372
Author: norman <norman@apache.org>
Date:   Tue Aug 7 15:38:52 2012 +0200

    Fix checkstyle

commit 3ed38277605ef7f4f966f59866032653eed229da
Merge: 947f3bc b09e945
Author: norman <norman@apache.org>
Date:   Tue Aug 7 14:59:54 2012 +0200

    Merge branch 'master' of ssh://github.com/netty/netty

commit b09e945830b406c5f088fb548238df719565cf32
Merge: f2eeed7 ed7613e
Author: Norman Maurer <norman@apache.org>
Date:   Tue Aug 7 05:49:41 2012 -0700

    Merge pull request #490 from jfallows/master
    
    Eliminate potential ReadPendingException for AIO suspend-resume

commit 947f3bcd5f2a599d3df1af9a891e286478f3b7cd
Merge: 3992472 f2eeed7
Author: norman <norman@apache.org>
Date:   Tue Aug 7 14:46:01 2012 +0200

    Merge branch 'master' of ssh://github.com/netty/netty

commit ed7613e1830a69da5370916dc8e9086b3cc231e4
Author: John Fallows <john.fallows@kaazing.com>
Date:   Sun Aug 5 15:11:12 2012 -0700

    Resolve issue #489 with an atomic readInProgress guard to prevent ReadPendingException.

commit f2eeed77e0d1a850b9e77212191af457f05cbfbc
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 5 18:43:32 2012 +0900

    Remove a redundant method declaration

commit 728306b64f36fad457037bc9b0557821fffa5347
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 5 18:32:30 2012 +0900

    Add CompositeByteBuf.consolidate()
    
    - also added test cases that test automatic / full / ranged
      consolidation

commit 3992472b3017ad8890cf2dcc4fdc30628d6af2a3
Author: norman <norman@apache.org>
Date:   Wed Aug 1 14:06:54 2012 +0200

    cleanup

commit a442789f7a9a9e997cabe7c2ada776463321fd3b
Author: norman <norman@apache.org>
Date:   Wed Aug 1 11:37:36 2012 +0200

    Add a testcase for suspend accept. it currently fails not sure why yet. See #71

commit b4991facf84ebc1e816096ffcf71729c475b0b66
Author: norman <norman@apache.org>
Date:   Wed Aug 1 11:35:17 2012 +0200

    Remove unused import

commit a3a58ecbc017b0445d61c34131c044e96247fe35
Author: norman <norman@apache.org>
Date:   Wed Aug 1 11:35:03 2012 +0200

    Fix a bug in suspend read. See #71

commit 6a15f7f5ce190826fc949eda0256ba5aa1503cec
Merge: 16a4088 0daf37a
Author: norman <norman@apache.org>
Date:   Wed Aug 1 09:03:33 2012 +0200

    Merge branch 'master' into suspend_feature
    
    Conflicts:
    	transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java

commit 16a40883447f94ec6e56ef73cf374a9284b22ff7
Author: norman <norman@apache.org>
Date:   Tue Jul 31 11:42:29 2012 +0200

    Address @trustin 's comments and also make sure the accept of AIO is only triggered from the event loop. See #71

commit 8b473dce6cd8a6cba419e1c4473ecf79ca254952
Author: norman <norman@apache.org>
Date:   Mon Jul 30 15:07:12 2012 +0200

    Rename class

commit 0daf37aae36083d57b0a4afb406f96585003faf9
Author: norman <norman@apache.org>
Date:   Mon Jul 30 08:05:25 2012 +0200

    Remove unused classes. See #477

commit ba1c7c5c550fec36b37d2d8bac1674620ab30c99
Author: norman <norman@apache.org>
Date:   Mon Jul 30 08:01:46 2012 +0200

    Replace usage of QueueFactory with ConcurrentLinkedQueue and LinkedBlockingQueue. See #477

commit bdde5a20f607a7b65489ed6db5094852bc4f0b53
Author: norman <norman@apache.org>
Date:   Mon Jul 30 07:44:53 2012 +0200

    Allow to set Expires attribute
     to a date in theast. See #479

commit 9b37de32a0b77e65f32709c7dff25d12a42c42ae
Merge: 137525d 62ed610
Author: Norman Maurer <norman@apache.org>
Date:   Sat Jul 28 12:06:09 2012 -0700

    Merge pull request #465 from izstas/master
    
    Add TRACE level to Internal Logger

commit 57e7255566ce4248e0c9c416f8595e8bffa0a6a0
Author: Norman Maurer <norman@apache.org>
Date:   Fri Jul 27 20:02:47 2012 +0200

    Add support to suspend reads. See #71

commit 137525d4c5207b2ee8ab416dc4a2546de8c6c50a
Merge: d43d95c 927c4ee
Author: Norman Maurer <norman@apache.org>
Date:   Wed Jul 25 12:08:15 2012 -0700

    Merge pull request #475 from danbev/channel_handler_context_typo
    
    Minor typo in exception message of DefaultChannelHandlerContext

commit 927c4ee8cb834ee5244473e307c153a1ba95f97a
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Wed Jul 25 20:51:06 2012 +0200

    Minor typo in exception message

commit d43d95cc0d04b6f717111a94487180de69b5252c
Merge: 961fc40 19ddb7a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 24 04:12:46 2012 -0700

    Merge pull request #463 from veebs/AutoBahnFrameSize
    
    Increase websocket framesize for autobahn tests

commit 961fc40b294d3680eb81866a08d5a3ce81a5e702
Merge: 7b511d8 26e64eb
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jul 22 23:35:34 2012 -0700

    Merge pull request #464 from netty/buffer_always_dynamic
    
    Make buffers always dynamic

commit 26e64eb3051b7d159a9c31a985aced079709b60d
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jul 20 13:18:17 2012 +0900

    Fix IOOBE after buffer truncation / Add CompositeByteBuf.addComponents()
    
    - plus some bug fixes while running unit tests

commit 8d813b127c572fc83a08a1166fbdb273be050887
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jul 20 12:33:17 2012 +0900

    Replace free() with reference counting / Fix SlicedByteBuf.unsafe()
    
    - based on @normanmaurer's feed back
    - Added Unpooled.compositeBuffer(int)

commit 62ed610c1de29aee5a4f33f66524ca55bbe5cb40
Author: izstas <izstas@live.ru>
Date:   Thu Jul 19 16:15:36 2012 +0400

    Added TRACE level for LoggingHandler

commit f3f40b24254ab702cc4c18e5b4baf6bf7bf3f03b
Author: izstas <izstas@live.ru>
Date:   Thu Jul 19 16:09:48 2012 +0400

    Added TRACE level to Internal Logger

commit 5a613f379e24da75cf872fb1217af5a500d6fb05
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jul 19 20:23:55 2012 +0900

    Make ByteBuf dynamic / Introduce an interface for composite buffers
    
    - Replace ByteBufferBackedByteBuf with DirectByteBuf
    - Make DirectByteBuf and HeapByteBuf dynamic
    - Remove DynamicByteBuf
    - Replace Unpooled.dynamicBuffer() with Unpooled.buffer() and
      directBuffer()
    - Remove ByteBufFactory (will be replaced with ByteBufPool later)
    - Add ByteBuf.Unsafe (might change in the future)

commit 250b40ec3b81960733fd1f1a8d65bd8630a5e4fa
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jul 19 13:48:26 2012 +0900

    Fix typo in test samples

commit 19ddb7a8e16672450455573805055ca78a4d0dc0
Author: vibul <vibuli@gmail.com>
Date:   Thu Jul 19 12:40:54 2012 +1000

    Increase websocket framesize for autobahn tests

commit 7b511d8200aae05bef86085f9b101d37b9fce4ef
Merge: b5412c9 e36c4c7
Author: Norman Maurer <norman@apache.org>
Date:   Wed Jul 18 01:52:37 2012 -0700

    Merge pull request #461 from fredericBregier/master
    
    typo fix for issue #456

commit e36c4c77bfbbf18ce8e46fa8efe2a809df891345
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Wed Jul 18 11:50:28 2012 +0300

    fix header to out

commit b5412c956359200f66076c4f99da163fb1df6ed5
Merge: 3447e87 56a72c6
Author: Norman Maurer <norman@apache.org>
Date:   Wed Jul 18 01:50:23 2012 -0700

    Merge pull request #460 from fredericBregier/master
    
    Master fix for issue #456 related to payload in WebSocket08FrameEncoder

commit 56a72c645695d50b2fedd5788a1d8ff2d81f5ef2
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Wed Jul 18 11:46:56 2012 +0300

    writesBytes as in V3 instead of writeInt (RFC says 0 to 4 bytes)

commit 92334b919e4ac394ad7f2b99c423224cdb576f19
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Wed Jul 18 11:43:36 2012 +0300

    Fix for issue #456 related to payload using 2 differents RANDOM while only one should be used

commit 3447e8711227f83ff8d02a90078e376c3fbf5a0f
Author: norman <norman@apache.org>
Date:   Wed Jul 18 09:26:11 2012 +0200

    Pass the right ByteBuf to the decode(..) method. See #459

commit 00106b367ca01ec34fa2c8d731a279677193c1ba
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jul 13 15:18:57 2012 +0900

    Use lookupAny() instead of lookup()
    
    - Should be OK because Netty 4.0 requires Java 6

commit 7fbd1e5095af93d829e38f2b4ab842367dc1c3f7
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jul 13 13:17:35 2012 +0900

    [#454] Unnecessary thread interruption in DefaultEventExecutor

commit 6c2eba79d70a532822a0e38092faa9783d90906b
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jul 13 13:02:09 2012 +0900

    [#452] CompactObjectInputStream fails to resolve interfaces

commit 787f5b28b23651880a9385dbe4a3ffb648b3d47f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 11 00:41:37 2012 +0900

    Fix a build bug where javadoc is generated twice

commit 2ef8b23ecdc50d2b8222aa3bfda922395e4818a8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 11 00:33:53 2012 +0900

    Fix javadoc plugin errors

commit 11de993efb7e2093366e9d3abfeff2be7adc623f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 11 00:23:17 2012 +0900

    Upgrade maven-javadoc-plugin

commit 7c2e09f7b2c6d926c46606dab3c1b3f2b535bebf
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 11 00:11:10 2012 +0900

    Ensure tarball pom is updated during release:prepare

commit fbf54a602767a872c6ec94afabd7fe7eb4010bd1
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 11 00:00:36 2012 +0900

    Add sonatype-oss-release profile

commit c588a8a40bcdb2c8a05aece70b2262f8a57e6f09
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 10 23:54:33 2012 +0900

    Fix the build issues found in the previous release process

commit d801459cb83623e2955cfa0b2440bd3e04766297
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 10 23:11:33 2012 +0900

    [maven-release-plugin] prepare for next development iteration

commit 527f2f6c6e2d37274ad02a646f58a2718bc88021
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 10 23:10:48 2012 +0900

    [maven-release-plugin] prepare release netty-4.0.0.Alpha1

commit ac364e3bf31384f5fdcd2e353ab7b8ccb2cdb439
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 10 23:04:09 2012 +0900

    Use the release version rather than the snapshot version when tagging

commit a487da1fcb7d55b9a08bb91f6f588b1c7d4dcba9
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 10 23:02:44 2012 +0900

    Update release options

commit 353c6607ed6655fa0be48c183385138e20d801c9
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 10 22:26:52 2012 +0900

    Add more constructors to NotSslRecordException

commit 6b5e3c5def2eddb347e36b029e7343417c3384a4
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 10 22:13:42 2012 +0900

    Port #446 (Fix for #444 - HTTP compression error)

commit 1c4d0d0f574a6b3041b0626390ba7296f699e44a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 10 18:04:41 2012 +0900

    Optimize AioEventLoop.findChannel()

commit f5fa671459539a42df40d315c02e94a42fcd68ec
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 10 15:38:31 2012 +0900

    Fix regression (see comment)

commit d66a187b5d700905e0d380faa451f15a26b6f03b
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 10 14:25:46 2012 +0900

    Fixed a bug where discardReadBytes is called in a wrong place

commit 917ed5173e8f2f52df02dc6818ea329cf1951422
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 10 14:23:31 2012 +0900

    Fix a bug where discardReadBytes() doesn't adjust markers
    
    .. if buffer is empty

commit 170a04fc722e08c05ab92963a214a7bc189d5325
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 10 14:12:14 2012 +0900

    Revert the buggy commit in AioEventLoop
    
    Also decreased the max stack depth of AioCompletionHandler to 4
    (Integer.MAX_VALUE was for testing)

commit 701cda2819bd31f1f6e00e4545e3b9a2aa0c60f3
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 10 13:57:45 2012 +0900

    Require a user specify the same AioEventLoop
    
    .. both when create an AIO channel and registering it
    
    - Also fixed a bug in AbstractChannel where is does not handle
      registration failure correctly.

commit d233be704191e6dd72a93548efc4b42bb29c29c9
Author: Norman Maurer <norman@apache.org>
Date:   Mon Jul 9 17:27:20 2012 +0200

    AIO: Act on the right ByteBuf when a exception was caught during write

commit e157ea1a666142b5a603248dade7b767cc1af95e
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jul 9 01:09:21 2012 +0900

    Allow a user use any type as a ReplayingDecoder state / AIO cleanup
    
    - Removed VoidEnum because a user can now specify Void instead
    - AIO: Prefer discardReadBytes to clear
    - AIO: Fixed a potential bug where notifyFlushFutures() is not called
           if flush() was requested with no outbound data

commit 0289dadca430b81b7c011d584347b8a0a59eacfe
Author: Norman Maurer <norman@apache.org>
Date:   Sun Jul 8 17:41:12 2012 +0200

    Don't call Field.get(..) if we can avoid it

commit adb4b87fa8867e9511b47773c165f2b12fdc27ef
Author: Norman Maurer <norman@apache.org>
Date:   Sun Jul 8 17:29:42 2012 +0200

    Replace catch of Exception with Throwable as Field.get(..) can also throw an Error

commit a58533fdad00bcffb3e9db41bd6fcd252aff1f61
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jul 9 00:04:55 2012 +0900

    Due to the recent changes with AsynchronousChannelGroup use, there's no
    need to schedule read operation later.

commit ee019d344e56a99ea787e55738a19b2c3c615120
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jul 8 22:44:15 2012 +0900

    Fix potential NPE in AioEventLoop / Always notify flush futures

commit e7c6ca945fd2d85b1dd86483d699d7af2399d0fc
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jul 8 22:22:35 2012 +0900

    Fix potential NPE / Use discardReadBytes instead of clear()

commit c77f107f5f37c40fff3567722c5d656f81b74c72
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jul 8 21:28:56 2012 +0900

    Made the AIO transport faster / Fixed a bug in SingleThreadEventLoopTest
    
    - Used reflection hack to dispatch the tasks submitted by JDK
      efficiently.  Without hack, there's higher chance of additional
      context switches.
    - Server side performance improved to the expected level.
    - Client side performance issue still under investigation

commit 220e4e886f0e82f06140a225b5fe162998b9a44d
Author: Norman Maurer <norman@apache.org>
Date:   Sun Jul 8 13:47:17 2012 +0200

    Fix ArrayIndexOutOfBoundsException in ReplayDecoderBuffer which could happen when calling getByte(..) or getUnsignedByte(..). See #445

commit bf62add6c742737b493cf3913d04144f0cd4d710
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jul 8 15:12:15 2012 +0900

    Clean up
    
    - Removed unnecessary 'closed' flag and redundant close() calls, etc.

commit 3fff8ce1d63817cb92553c7ec33c90c73dd02119
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jul 8 15:11:46 2012 +0900

    Fixed a bug where SslHandler does not sometimes forward a flush request

commit b79e0b088217083b3d0a485a7f184a536fba9316
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jul 8 14:43:34 2012 +0900

    Fix another data race

commit b97b3c602bd4b518c61b44964fe5060ca9830682
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jul 8 02:26:37 2012 +0900

    Add missing license header

commit cef7dfc02f8949c25d60565c3a7689a1ee3aacc5
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jul 8 00:53:56 2012 +0900

    Made the AIO transport adhere to Netty thread model strictly
    
    - Fixed data races
    - Simplified channel creation using dummy AsyncChannelGroup

commit 613834f3263f6ffb53582b01098ebf66bbbf376e
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 21:29:03 2012 +0900

    Fix data corruption in the AIO transport

commit 2bc26fbc703aaf2021d09b6cb80b4153207688a7
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 18:49:21 2012 +0900

    Remove seemingly an ad-hoc test class

commit 3a84b9dc71e879a325ab926bc27a4992e497649c
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 15:34:14 2012 +0900

    Make test suite mostly pass by avoiding ClosedChannelException
    
    - SSL echo test still fails

commit aea3ed85bd67685dd7aaf77e58134b1dbdcd09f6
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 15:25:55 2012 +0900

    Allow AIO channel's config is accessible as early as possible

commit c0f4f75c6d32e05101a44f4378fffe51f22ab34c
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 15:05:10 2012 +0900

    Use SOMAXCONN as the default backlog if possible

commit ec88f6617c872ac62a3f6f9f0c4f9b9f04a38911
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 14:48:34 2012 +0900

    Fix compilation error and warning

commit fae3861c3a5282f5e74654a58e78141229620144
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 14:46:43 2012 +0900

    Fix a compiler warning

commit de40a8d09b624468e4f1cdb6f79edd764e292ec6
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 14:45:18 2012 +0900

    Fix another compilation error

commit c57e903c4d10ae27a3709d03e63335f5105f7aa0
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 14:44:06 2012 +0900

    Fix more compilation errors

commit 0941d617d92dcbe8c75c399ab05114db99f7f560
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 14:42:18 2012 +0900

    Fix a compilation error

commit 42380b54b32d9b59a8f3a4006fc76eb0a4122c74
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 14:39:35 2012 +0900

    Revert file mode

commit 9535401632c053253878981fd467181e480cc56e
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 14:37:44 2012 +0900

    Revert unnecessary change in Bootstrap

commit 4f9b6c5badfb4a878a283440479b385f7260067f
Merge: 4e43041 9a90b94
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 14:33:57 2012 +0900

    Merge branch 'nio2'

commit 9a90b947db97e30f4af319e6ec2326c597e08e1f
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 14:22:12 2012 +0900

    Fix a build problem with all-in-one module
    
    - mvn test was failing

commit e40c4ea6018fda2e95adfded6792fb8c136a949e
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 13:52:54 2012 +0900

    Remove unused classes / Make HashedWheelTimer not use ReusableIterator

commit 86d59a2e91fc29e24eae0054e5bddd020e15f787
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 13:42:36 2012 +0900

    No more mind-boggling ExternalResourceReleasable

commit b86e2730cc43be9cf957df2dd95ed8a43570d8e9
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 13:41:49 2012 +0900

    Remove unused classes in util.internal

commit e5972a74539d918dd1364bfb95dcb9d02c25a74d
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 13:30:28 2012 +0900

    Use String.CASE_INSENSITIVE_ORDER instead of custom Comparator

commit e1f39f1d85be02fe5e4c7c2801730eebb02e314f
Author: norman <norman@apache.org>
Date:   Thu Jul 5 09:37:26 2012 +0200

    Optimize SslHandler's detection of supressable exceptions, so it will not break on different OS's or jdk impls. See #79

commit 3f1478b653dfa0f815a4f5c9b77dd3bad81832fe
Author: norman <norman@apache.org>
Date:   Thu Jul 5 09:18:59 2012 +0200

    Optimize SslHandler's detection of supressable exceptions, so it will not break on different OS's or jdk impls. See #79

commit a23baa1b9b3f1a3f4314d7e48acfafcc9a8fd4c5
Author: norman <norman@apache.org>
Date:   Thu Jul 5 07:53:29 2012 +0200

    Throw a special SSLException if a non SSL/TLS record was detected. See #437

commit d6f1a82c310d8b10bdf7b3daa38132c0e2224c7a
Author: norman <norman@apache.org>
Date:   Wed Jul 4 15:27:10 2012 +0200

    Fix checkstyle

commit ae2906de1ed504a4170a2194a9a7ce51a8e2b0d7
Author: norman <norman@apache.org>
Date:   Wed Jul 4 15:20:47 2012 +0200

    Correctly format cookies. This fix some bug which lead to expiring of cookies to not work. See #426

commit 8595d85e4a450ac514d4d7e019b7793372fb66e8
Author: norman <norman@apache.org>
Date:   Wed Jul 4 15:14:05 2012 +0200

    Port fix for #433

commit 166d8d9436c5b399939cf1170eba73d0eaba26ba
Author: norman <norman@apache.org>
Date:   Tue Jul 3 10:37:05 2012 +0200

    Minimize byte copies by using a CompositeByteBuf to concat the chunks. See #413

commit 2a2394c132510dc5248e34e82301411613211dcf
Author: norman <norman@apache.org>
Date:   Tue Jul 3 10:18:57 2012 +0200

    Add getters for the specified timeout values. See #418

commit 4324c618833138c3a673c6366e62e0c36b4ad78f
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Sat Jun 30 20:30:56 2012 +1000

    Fixes javadoc from #414 / #415 (@trustin)

commit 02d5267a7066160cc9c540e5a36cf4697db63a4d
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 21:59:48 2012 +1000

    Change Timeout.cancel() to return a boolean value, true on a successful cancel
    
    As requested in the javadoc for HashedWheelTimer

commit 8224c95e059182292380d32f86e1c12961219111
Author: Norman Maurer <norman@apache.org>
Date:   Fri Jun 29 13:26:13 2012 +0200

    Port enhancement to reduce memory copy if possible. See #412

commit efce2624ddeb88a77ec81d85d279347dce2e8c2e
Author: Norman Maurer <norman@apache.org>
Date:   Fri Jun 29 12:49:58 2012 +0200

    Fix checkstyle

commit ce90550f64c58a60f6367983dd36c9e046ea9bf3
Author: Norman Maurer <norman@apache.org>
Date:   Fri Jun 29 12:28:08 2012 +0200

    Rename method and make it more clear thats an expert method. See #414 #415

commit 0ae4a64db2d79c56748482b6b56b751d8c4e22c8
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 19:27:41 2012 +1000

    Assuming that @trustin will want this changed :)

commit 20062de0d968dcee45f29e7b2bb94089fff85b3a
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 19:25:31 2012 +1000

    Changed "Gets the" to "Returns the" - Requested by @trustin

commit 4379a86c4c3ad53e460d40b78727d480601842b3
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 18:59:12 2012 +1000

    Documentation redone for Cookie

commit e08c4ea3e05e76a5a5815d04c171a5b4b7002502
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 17:03:47 2012 +1000

    Documentation and slight internal refactoring of HttpCodecUtil

commit c8d13e03e0bdf7706c4f5d3a9231094db9c93a74
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 16:39:39 2012 +1000

    Make HttpResponse's javadoc a bit easier to read

commit d975ab365c0e33d59e0ed052e6e196ba20e3b973
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 16:37:40 2012 +1000

    Make HttpRequest's documentation easier to read

commit 98c61e4128ce7dfe2f51b3ea33406a579fc1a9f1
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 16:33:14 2012 +1000

    Made the documentation in HttpMessage a bit easier to understand

commit eaa99efd3018a013b5f8044d6ab80ab8c9ebd6ef
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 15:12:59 2012 +1000

    Redid documentation for WebSocketUtil

commit 7e35cc1ebb4c89f2f5d1a0f1397ed0ddbd0b1625
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 15:03:41 2012 +1000

    Fixes a bit of javadoc that was broken by a failed merge

commit dc300f2c812b2231b527c761f4c73d5155137516
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 13:38:53 2012 +1000

    Fix a bug where a potential overflow occurs

commit 0f6c3137f6b44ca2ca8a1017b6e9ede93c1744a5
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 13:37:41 2012 +1000

    Two tentative last asserts in the test

commit 73a76bfe6394979ed2e96be30948eb980cedfdd8
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 13:35:14 2012 +1000

    Little bit more testing

commit 052f8be504344eee0b462fc3c3ecb0228a24d217
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 13:31:02 2012 +1000

    Provide a basic test for getBufferFor()

commit a280928731d4dd2c778f76ac50dcbdf50570c713
Author: Norman Maurer <norman@apache.org>
Date:   Thu Jun 28 13:36:21 2012 +0200

    Fix SpdyHttpHeaders.setScheme setting the wrong header. See #417

commit 0a413af35d7ad111bb7714da5e285a483806c80f
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Thu Jun 28 19:34:52 2012 +1000

    Comply with line width a bit more

commit d2f1c85f24c5114e9ee8a7914fb9dbe667ec1dea
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Thu Jun 28 19:33:54 2012 +1000

    Documentation and checkstyle fixes from @fredericBregier
    This is part of #414

commit a92ed57b182a0e19f0de13a59f3a572034f8759f
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Thu Jun 28 19:00:43 2012 +1000

    Add documentation and changes to ComposityByteBuf.getBufferFor(index)
    
    Thanks to @kimchy and @fredericBregier
    This is part of #414

commit f1c375109eaef4a99e786097a3beef6610a5ab0a
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Thu Jun 28 16:37:41 2012 +1000

    Add documentation to NonReentrantLock

commit 580c6069fa37c0ad5ee45f04e7be83b2ee70ccbf
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Thu Jun 28 10:31:49 2012 +1000

    Actually throw the correct Exception type. Whoops!
    
    This should be done, now.

commit 0d8ed47c3e66379f92025f9048bdcd2960c0ef96
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Thu Jun 28 10:29:11 2012 +1000

    Simplify the process of getting the component

commit 343d6748394bbc4729c253eeec41bd0ab1ff87ae
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Thu Jun 28 10:24:18 2012 +1000

    Adds a method to get the buffer for a specific index in CompositeByteBuf
    
    This fixes #414

commit 8b5ab52a5b003dfd2f0bdb9d68f7c88aefb423ce
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Thu Jun 28 08:55:29 2012 +1000

    Update dependencies to the latest stable versions

commit 2653facd3babfbf35173a04ce87db24bef172e71
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Wed Jun 27 17:41:49 2012 +1000

    Adds javadoc to NetworkConstants
    
    Also renames some internal variables to be more understandable
    No API changes! :)

commit 9cc9f4e1ec44fd737c73c0d3b9bc29274dce64cc
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 27 12:41:37 2012 +0900

    Add more cookie decoding test case

commit de20883517db78015d643b3621ddfcb5c94b8bc6
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 26 17:33:05 2012 +0900

    Add missing license headers

commit 88e83462b03aaa7ad05c502bb80fa7154a4a048b
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 26 05:30:07 2012 +0900

    Remove a method of no use

commit 0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 26 05:26:54 2012 +0900

    Make CookieEncoder and CookieDecoder stateless
    
    - Also: CookieEncoder is split into ServerCookieEncoder and
      ClientCookieEncoder

commit c77af321427537be8d7526782ec9232c1a17ea3a
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 24 22:14:17 2012 +0900

    Add CompositeByteBuf.numComponents()

commit 217f8ce1fd26d7c125612ad6aa4f53819b403d12
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 24 18:07:47 2012 +0900

    Fix #218: CookieDecoder.decode() throws StackOverflowError
    
    - Rewrote key-value decoder not using a regular expression

commit 7596ad8d584ea29456eeba01cd8e70870b298113
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 24 14:17:13 2012 +0900

    Fix #397: Allow all cookie names that conform to the RFC
    
    - Lenient flag is not needed anymore

commit 79425895e2a990fea23dd1fe104660c8c11a5e08
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 24 13:42:05 2012 +0900

    Fix test failures

commit 1ef371b6255d672575f595fabd435130bcede273
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 24 12:59:44 2012 +0900

    Fix #405: CookieEncoder should refuse to encode more than one cookie
    
    .. if on server mode

commit 1d0d4fcd78735371d3540f004fba9e97b5d5a66e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 19 11:35:43 2012 +0900

    Fix documentation errors

commit 81eaea77bda1dc9e677283f0bd3d30d2d41e242a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 19 10:43:38 2012 +0900

    Add DatagramChannel.isConnected()
    
    .. because there is no way for a user with isActive to know if
       DatagramChannel is connected or not

commit a5bb2c7f77f6882bcc6ded8e91515049ae579009
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 19 10:39:30 2012 +0900

    Add ChannelMetadata and remove unnecessary disconnect() impls
    
    - Add Channel.metadata() and remove Channel.bufferType()
    - DefaultPipeline automatically redirects disconnect() request to
      close() if the channel has no disconnect operation
    - Remove unnecessary disconnect() implementations

commit 32188f83acaaba30a13fd266f47c3e7c9a0c0855
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 19 09:54:25 2012 +0900

    Forward-port JDK ZlibEncoder patch (#404)
    
    - Rename ZlibEncoder/Decoder to JZlibEncoder/Decoder
    - Define a new ZlibEncoder/Decoder class
    - Add JdkZlibEncoder
    - All JZlib* and JdkZlib* extends ZlibEncoder/Decoder
    - Add ZlibCodecFactory and use it everywhere

commit 7a4e3742941b7fbe476403161d8a25f3f524430c
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 18 13:38:59 2012 +0900

    Fix a bug where timeout handlers sometimes generate events too early

commit faf529166fa4298aaaa5a42528aa74091a7dfc4a
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 17 11:17:16 2012 +0900

    Increase the timeout of LocalTransportThreadModelTest to 1 minute

commit c165a38e15c93a0b8345aa46c678cc6cbb5d4fa6
Author: Norman Maurer <norman@apache.org>
Date:   Wed Jun 13 22:24:32 2012 +0200

    Revert as it should be in nio2 branch "Commit first round of classes to support nio2/async channel api. Still work in progress.. See #396"
    
    This reverts commit 18aaae3c2e7462853298c991c7f95040e47dae96.

commit 41a9c66f669a08cc6af67f996719a9f53a482583
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 13 18:51:44 2012 +0900

    fullbuild -> full

commit 0ee0751fec20014f9606050120efc4f2361a5f8c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 13 18:47:57 2012 +0900

    Fix a problem where source jar is not attached

commit 4c2893e95297fdb1f5c4c3164fb696a381226846
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 13 18:30:31 2012 +0900

    Add the tarball module
    
    - Activated only when -Pfullbuild option is set or during release

commit 98fb86fbf2683a4d313b2d539a440b7ebcc2f122
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 13 17:12:51 2012 +0900

    Use build-helper-maven-plugin instead of messy hack

commit aa3be3e1e8746380a30dc49ee926f3087c137047
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 13 14:03:57 2012 +0900

    Build all-in-one JAR on non-fullbuild.

commit 4e43041c95b58eba8a61855939c01cba21ef4944
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 14:22:12 2012 +0900

    Fix a build problem with all-in-one module
    
    - mvn test was failing

commit 391fe71639a23158ad5d7fbfa844dc26367d4224
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 13:52:54 2012 +0900

    Remove unused classes / Make HashedWheelTimer not use ReusableIterator

commit cda2d6f5aa1ef905af856a36c912f5d5636774c3
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 13:42:36 2012 +0900

    No more mind-boggling ExternalResourceReleasable

commit 8dc1f321cb8729e953bcc144cd354edb86670aef
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 13:41:49 2012 +0900

    Remove unused classes in util.internal

commit 9af7512c359f93083c4894607e9a45e941bd2112
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 7 13:30:28 2012 +0900

    Use String.CASE_INSENSITIVE_ORDER instead of custom Comparator

commit b9781c968cc68552533b8241b5fcb717fcad6615
Author: norman <norman@apache.org>
Date:   Thu Jul 5 09:37:26 2012 +0200

    Optimize SslHandler's detection of supressable exceptions, so it will not break on different OS's or jdk impls. See #79

commit db09c421d93c9719c1cc7b784b3ba4e19f489174
Author: norman <norman@apache.org>
Date:   Thu Jul 5 09:18:59 2012 +0200

    Optimize SslHandler's detection of supressable exceptions, so it will not break on different OS's or jdk impls. See #79

commit e40c4309769a3c6fab33337d01105b9429241c95
Author: norman <norman@apache.org>
Date:   Thu Jul 5 07:53:29 2012 +0200

    Throw a special SSLException if a non SSL/TLS record was detected. See #437

commit a7a4081e70ac468d96d9a8799ae27347fb13c4c9
Author: norman <norman@apache.org>
Date:   Wed Jul 4 15:27:10 2012 +0200

    Fix checkstyle

commit 1784283d29ed73a5e6c8987badecd11f3533922d
Author: norman <norman@apache.org>
Date:   Wed Jul 4 15:20:47 2012 +0200

    Correctly format cookies. This fix some bug which lead to expiring of cookies to not work. See #426

commit 61a7c78a530af183dcf67e6d4507f4f240aee241
Author: norman <norman@apache.org>
Date:   Wed Jul 4 15:14:05 2012 +0200

    Port fix for #433

commit 31cebd7ce28764e0c519a8298c71b2bad3333ef0
Author: norman <norman@apache.org>
Date:   Tue Jul 3 15:30:15 2012 +0200

    No need for AtomicBoolean as we run in the eventloop. See #396

commit eccc28965e60029a9a4df93c1f5495baaa38d0ec
Author: norman <norman@apache.org>
Date:   Tue Jul 3 15:25:28 2012 +0200

    Make sure the ComplationHandler stuff is handled in the eventloop. See #396

commit a5b6f1d6150b4f1aa50fe9109f98a4fde7b96ff5
Author: norman <norman@apache.org>
Date:   Tue Jul 3 13:52:33 2012 +0200

    Ignore NetworkChannel class. See #396

commit 7d33846690dec9a3e39b8312ab4f6f74c4c8b2c4
Author: norman <norman@apache.org>
Date:   Tue Jul 3 13:10:29 2012 +0200

    Trigger the read() after the registration was complete. See #396

commit e58d657421a6ca9e6ebd7d34f9d6cce7345b7ab3
Author: norman <norman@apache.org>
Date:   Tue Jul 3 12:01:52 2012 +0200

    Supress exception logging if the exception was expected. See #396

commit c3770a0fba42173960662833514564aaf7705d32
Author: norman <norman@apache.org>
Date:   Tue Jul 3 11:50:50 2012 +0200

    Revert "Check that eventloop's were setup correctly. See #396"
    
    This reverts commit 82834c2f348d35f8d9a224c3b9a51e3aa085839d.

commit ac4dacd84f5412effa59635d9280839ef207b1c5
Author: norman <norman@apache.org>
Date:   Tue Jul 3 10:37:05 2012 +0200

    Minimize byte copies by using a CompositeByteBuf to concat the chunks. See #413

commit d0e83520cc228a6462c047a2c6655ee3b572a2cc
Author: norman <norman@apache.org>
Date:   Tue Jul 3 10:18:57 2012 +0200

    Add getters for the specified timeout values. See #418

commit 82834c2f348d35f8d9a224c3b9a51e3aa085839d
Author: Norman Maurer <norman@apache.org>
Date:   Sun Jul 1 22:39:33 2012 +0200

    Check that eventloop's were setup correctly. See #396

commit 12112ac8575170bbe62f59b968ddd323e5103cdc
Author: Norman Maurer <norman@apache.org>
Date:   Sun Jul 1 22:32:45 2012 +0200

    Use the correct outbound buffer for flush the writes. See #396

commit 0562aad91ffa816b7fdfc0c467c7a57a27dda7b4
Author: Norman Maurer <norman@apache.org>
Date:   Sun Jul 1 22:20:36 2012 +0200

    Make sure all pending writes are flushed. See #396

commit 8c0146fbd8f77cdbe365661a5750bdcf201acbcc
Author: Norman Maurer <norman@apache.org>
Date:   Sun Jul 1 21:50:44 2012 +0200

    Supress warnings

commit e1cbcd645686c8c0196ce94b3fdc1b0e3f781a46
Author: Norman Maurer <norman@apache.org>
Date:   Sun Jul 1 21:50:17 2012 +0200

    Remove left-overs. See #396

commit 87f50e135eec22791ff38f4e72161f7091b1a240
Merge: 53fb516 b9d1666
Author: Norman Maurer <norman@apache.org>
Date:   Sat Jun 30 08:16:15 2012 -0700

    Merge pull request #427 from Massive-Dynamics/nmaurer-fixes-415
    
    Fixes javadoc from one of my pull requests

commit b9d16663d9e78c52c762168146ee8eeff0942abc
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Sat Jun 30 20:30:56 2012 +1000

    Fixes javadoc from #414 / #415 (@trustin)

commit 53fb5165c9416e838db48b74595c5d6027cb6e72
Merge: c35f90f 04cf836
Author: Norman Maurer <norman@apache.org>
Date:   Fri Jun 29 05:08:46 2012 -0700

    Merge pull request #425 from Massive-Dynamics/timeout-unsuccessful-cancel
    
    Change Timeout.cancel() to return a boolean value

commit 04cf836cf0283b953485a2ebd18414c3a0dfb754
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 21:59:48 2012 +1000

    Change Timeout.cancel() to return a boolean value, true on a successful cancel
    
    As requested in the javadoc for HashedWheelTimer

commit c35f90f92066f347bd6fcb6bc8a9c75c1c9569c3
Author: Norman Maurer <norman@apache.org>
Date:   Fri Jun 29 13:26:13 2012 +0200

    Port enhancement to reduce memory copy if possible. See #412

commit 27b83a480b764a5dbbee41259fde5b79aeb63df3
Author: Norman Maurer <norman@apache.org>
Date:   Fri Jun 29 12:49:58 2012 +0200

    Fix checkstyle

commit 07095a41f481e50b57e4a39c3372c4c2865ca545
Author: Norman Maurer <norman@apache.org>
Date:   Fri Jun 29 12:28:08 2012 +0200

    Rename method and make it more clear thats an expert method. See #414 #415

commit f8093408e42f11424e78bca45f11ded801b9373c
Merge: cd95dc5 c52cb0e
Author: Norman Maurer <norman@apache.org>
Date:   Fri Jun 29 03:24:40 2012 -0700

    Merge pull request #415 from Massive-Dynamics/fix-414
    
    Adds a method to get the buffer for a specific index in CompositeByteBuf

commit cd95dc59245c5cc51731b487e45bb0b35bfee597
Merge: d0c8c10 3792693
Author: Norman Maurer <norman@apache.org>
Date:   Fri Jun 29 02:55:20 2012 -0700

    Merge pull request #422 from Massive-Dynamics/http-doc
    
    Even more documentation changes (mainly) - HTTP

commit c52cb0ea21ce78a3c2ef1928acea489732ed2a27
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 19:27:41 2012 +1000

    Assuming that @trustin will want this changed :)

commit 379269346879c7dff2d69ae14f6054f9fd386496
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 19:25:31 2012 +1000

    Changed "Gets the" to "Returns the" - Requested by @trustin

commit f3fff2d3e8ba840227395374fc03a76ad3052d6d
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 18:59:12 2012 +1000

    Documentation redone for Cookie

commit 26ed1a99721a8332108cf29a9fc7c18a1d344025
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 17:03:47 2012 +1000

    Documentation and slight internal refactoring of HttpCodecUtil

commit d0c8c10681fabe4f67b5f6043e7ed83e2c329a1e
Merge: fa2224c be57cf3
Author: Norman Maurer <norman@apache.org>
Date:   Thu Jun 28 23:51:05 2012 -0700

    Merge pull request #420 from Massive-Dynamics/fix-failed-javadoc
    
    Fixes a bit of javadoc that was broken by a failed merge

commit fa2224c3aa9d8f71099ed3c0ab78eea4a0a8a70f
Merge: 33c42be 9f9b36f
Author: Norman Maurer <norman@apache.org>
Date:   Thu Jun 28 23:48:28 2012 -0700

    Merge pull request #421 from Massive-Dynamics/websocket-util-doc
    
    Redid documentation for WebSocketUtil

commit 4d5e4c34334c8c9d7a7403213e1228d6226b1c73
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 16:39:39 2012 +1000

    Make HttpResponse's javadoc a bit easier to read

commit a818cad45ab9713a93bf2f813e1521be61adc500
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 16:37:40 2012 +1000

    Make HttpRequest's documentation easier to read

commit 59bb92171b8d3831fe80683ed7573e68abbbc3dd
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 16:33:14 2012 +1000

    Made the documentation in HttpMessage a bit easier to understand

commit 9f9b36f579d824bc1b6de8de138c4325cc83254d
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 15:12:59 2012 +1000

    Redid documentation for WebSocketUtil

commit be57cf3b51bc9f6e12ef992c2999cd406e1956ea
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 15:03:41 2012 +1000

    Fixes a bit of javadoc that was broken by a failed merge

commit c55e10c12aa851918dd727f12643d1a0d9ab839d
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 13:38:53 2012 +1000

    Fix a bug where a potential overflow occurs

commit b11d4fa37adc59b409f64242221ad917efe6a1f1
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 13:37:41 2012 +1000

    Two tentative last asserts in the test

commit 557f1c85df931a0914e88237236fcbad1c39c08c
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 13:35:14 2012 +1000

    Little bit more testing

commit 3d9be813774ac8c8b0ab325402b609d364930a6b
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 13:31:02 2012 +1000

    Provide a basic test for getBufferFor()

commit 00ae0e8ad9113a55bfcc9c8ea7533ec3fc7f591b
Merge: e298971 33c42be
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Fri Jun 29 13:02:32 2012 +1000

    Merge remote-tracking branch 'Netty/master' into fix-414

commit 33c42bee6d2cbc1fadecbb82440ddff9e13e1692
Merge: a12a99a 90e2264
Author: Norman Maurer <norman@apache.org>
Date:   Thu Jun 28 05:08:01 2012 -0700

    Merge pull request #409 from Massive-Dynamics/network-constants-doc
    
    Adds javadoc to NetworkConstants

commit a12a99a3dc67d950be16d78208c8974cfa3e7406
Merge: 2610a94 1d1d7b2
Author: Norman Maurer <norman@apache.org>
Date:   Thu Jun 28 05:07:17 2012 -0700

    Merge pull request #416 from Massive-Dynamics/non-reentrant-lock-doc
    
    Add documentation to NonReentrantLock

commit 2610a94de9f9ccbafd37b1e4ea605b8feb5c3bed
Author: Norman Maurer <norman@apache.org>
Date:   Thu Jun 28 13:36:21 2012 +0200

    Fix SpdyHttpHeaders.setScheme setting the wrong header. See #417

commit e2989719e1df2d6c6ebe1a34a1b8549c8e756d7c
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Thu Jun 28 19:34:52 2012 +1000

    Comply with line width a bit more

commit a504aa1159092a6ef4fbc285c49f3678c83bb45c
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Thu Jun 28 19:33:54 2012 +1000

    Documentation and checkstyle fixes from @fredericBregier
    This is part of #414

commit 42f3a6750a3085829a3992beaac6c3aeda6b1f61
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Thu Jun 28 19:00:43 2012 +1000

    Add documentation and changes to ComposityByteBuf.getBufferFor(index)
    
    Thanks to @kimchy and @fredericBregier
    This is part of #414

commit 8f4aa5b9e2bf54e41f0a8f3952e440bb7f49861d
Merge: 90d9feb 63f4b44
Author: Norman Maurer <norman@apache.org>
Date:   Thu Jun 28 00:21:59 2012 -0700

    Merge pull request #411 from Massive-Dynamics/update-dependencies
    
    Update dependencies to the latest stable versions

commit 1d1d7b2a951ea043c5533bd4200d70205e8e03fd
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Thu Jun 28 16:37:41 2012 +1000

    Add documentation to NonReentrantLock

commit 49f0e32428aa634c1653a4b358d1e3393097f360
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Thu Jun 28 10:31:49 2012 +1000

    Actually throw the correct Exception type. Whoops!
    
    This should be done, now.

commit 332a35f9ed00e1d5631085729f30c45c6ea42ea0
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Thu Jun 28 10:29:11 2012 +1000

    Simplify the process of getting the component

commit cb8c9767f6acad1ffc94d4a8895b042624412f76
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Thu Jun 28 10:24:18 2012 +1000

    Adds a method to get the buffer for a specific index in CompositeByteBuf
    
    This fixes #414

commit 63f4b44b50a839fe5c116b7b5d6e8a62c32029fa
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Thu Jun 28 08:55:29 2012 +1000

    Update dependencies to the latest stable versions

commit 90e22644c31b93f3dc1164d0545ed054366749a9
Author: Cruz Julian Bishop <cruz@massive-dynamics.biz>
Date:   Wed Jun 27 17:41:49 2012 +1000

    Adds javadoc to NetworkConstants
    
    Also renames some internal variables to be more understandable
    No API changes! :)

commit 90d9febbc00a779d5b53248f556b793182434034
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 27 12:41:37 2012 +0900

    Add more cookie decoding test case

commit a5d35f89d287cabdff2cab1c580ac055fc33c41b
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 26 17:33:05 2012 +0900

    Add missing license headers

commit 3b945bca78b3e44f8dc6e8dafdfa1502bda775cc
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 26 05:30:07 2012 +0900

    Remove a method of no use

commit 6d2f6d697d3bc4d8dee6acb77267206803d47646
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 26 05:26:54 2012 +0900

    Make CookieEncoder and CookieDecoder stateless
    
    - Also: CookieEncoder is split into ServerCookieEncoder and
      ClientCookieEncoder

commit 1be9bbf62c7242b6ac5510bc21a5dd1ed5b0ef82
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 24 22:14:17 2012 +0900

    Add CompositeByteBuf.numComponents()

commit 7b2992a95afc04262d2c9667972b8b3f7231c61d
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 24 18:07:47 2012 +0900

    Fix #218: CookieDecoder.decode() throws StackOverflowError
    
    - Rewrote key-value decoder not using a regular expression

commit ee8091f6fbc2912257388de039fbde2322b73247
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 24 14:17:13 2012 +0900

    Fix #397: Allow all cookie names that conform to the RFC
    
    - Lenient flag is not needed anymore

commit 0eb7a42c690bc5071b2ebe3be105b806a63e5730
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 24 13:42:05 2012 +0900

    Fix test failures

commit a6e3d7d0caa00b5075f64023f366a8eb15b94653
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 24 12:59:44 2012 +0900

    Fix #405: CookieEncoder should refuse to encode more than one cookie
    
    .. if on server mode

commit 4c072694be32bb40da04852dc02322cfc9ee1162
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 19 11:35:43 2012 +0900

    Fix documentation errors

commit f60a6e861cdf877e192297a07a3c1aaa758e7669
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 19 10:43:38 2012 +0900

    Add DatagramChannel.isConnected()
    
    .. because there is no way for a user with isActive to know if
       DatagramChannel is connected or not

commit 9ec51d01d61ec5725cfe2ca13fcb6f6fce0e5a72
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 19 10:39:30 2012 +0900

    Add ChannelMetadata and remove unnecessary disconnect() impls
    
    - Add Channel.metadata() and remove Channel.bufferType()
    - DefaultPipeline automatically redirects disconnect() request to
      close() if the channel has no disconnect operation
    - Remove unnecessary disconnect() implementations

commit 1f69e664fb94c12bc2d884d8b4503826d205e323
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 19 09:54:25 2012 +0900

    Forward-port JDK ZlibEncoder patch (#404)
    
    - Rename ZlibEncoder/Decoder to JZlibEncoder/Decoder
    - Define a new ZlibEncoder/Decoder class
    - Add JdkZlibEncoder
    - All JZlib* and JdkZlib* extends ZlibEncoder/Decoder
    - Add ZlibCodecFactory and use it everywhere

commit 5caf78acc07c323a7cac85a72adf231a2fabb987
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 18 17:22:06 2012 +0900

    Fix a bug where channelActive is not fired for an accepted channel

commit 3e2953cf92577a0ba2e12417457d91bfbfaeb767
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 18 16:21:05 2012 +0900

    Add AIO transport to the test suite

commit 7e75a9a1a9b2e23fcb2101e86d7151a1e3616873
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 18 13:38:59 2012 +0900

    Fix a bug where timeout handlers sometimes generate events too early

commit 127e9c1d1e8405257cdc6df8c5646dbd40a10c36
Author: Norman Maurer <norman@apache.org>
Date:   Sun Jun 17 20:28:47 2012 +0200

    Calling clear is wrong. See #396

commit 7412c371f2e4a74f64c400490afdbc3e930e83d9
Author: Norman Maurer <norman@apache.org>
Date:   Sun Jun 17 13:12:15 2012 +0200

    Fix writes. See #396

commit 22bc8fecca298781841197288010c0bfb97ec6d1
Author: Norman Maurer <norman@apache.org>
Date:   Sun Jun 17 11:07:21 2012 +0200

    Implement the right interfaces

commit dc058d9cd9f5768f8eccc5884b0e3568034c9bd5
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 17 11:17:16 2012 +0900

    Increase the timeout of LocalTransportThreadModelTest to 1 minute

commit 5d1e710adcc79ef86804ac065338d0900d544a76
Author: Norman Maurer <norman@apache.org>
Date:   Sat Jun 16 22:31:43 2012 +0200

    Package was renamed. See #396

commit 70c4f59c452fdc3de0fc8f10ef94f0f00139e1d4
Author: Norman Maurer <norman@apache.org>
Date:   Sat Jun 16 22:29:25 2012 +0200

    Some clean. See #396

commit 314ac377321e252644d9a3f9beb59d5f9941eff1
Author: Norman Maurer <norman@apache.org>
Date:   Sat Jun 16 21:20:57 2012 +0200

    Rename classes from Async* -> Aio*. See #396

commit 67be5aeda8a8415bf610f09a011ba61c3adb9f19
Author: Norman Maurer <norman@apache.org>
Date:   Sat Jun 16 21:18:25 2012 +0200

    Rename package from nio2 -> aio. See #396

commit ffc6551acc30eae445c746c5af32ddbe5aefcc13
Author: Norman Maurer <norman@apache.org>
Date:   Sat Jun 16 21:17:45 2012 +0200

    Adjust name. See #396

commit 2ff22ff4c3246befd19b073aa3ddca48733c47cf
Author: Norman Maurer <norman@apache.org>
Date:   Sat Jun 16 21:16:54 2012 +0200

    Add javadocs and also handle writes correctly. See #396

commit 70baea35dac0c2ac9bc4bdb4da6dff089e16207e
Author: Norman Maurer <norman@apache.org>
Date:   Sat Jun 16 20:51:45 2012 +0200

    Make reads work like expected with AOI. See #396

commit d7f5498e7e46ca2d460f4fefedd71bfbc69ac64a
Merge: 18d30d9 5d01062
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat Jun 16 03:18:48 2012 +0530

    merged conflicts

commit f8ef5d5d782383970e2bdf35c978e872242817b3
Author: Norman Maurer <norman@apache.org>
Date:   Thu Jun 14 21:02:47 2012 +0200

    Next round for async channel api support a.k.a nio2. See See #396

commit 5d01062da43a53d0f9634bdd73280626d0ba1c0b
Author: Norman Maurer <norman@apache.org>
Date:   Wed Jun 13 22:24:32 2012 +0200

    Revert as it should be in nio2 branch "Commit first round of classes to support nio2/async channel api. Still work in progress.. See #396"
    
    This reverts commit 18aaae3c2e7462853298c991c7f95040e47dae96.

commit 032912d9389087bf909b7236637d60e0e0be1740
Author: Norman Maurer <norman@apache.org>
Date:   Wed Jun 13 22:23:21 2012 +0200

    Commit first round of classes to support nio2/async channel api. Still work in progress.. See #396

commit 18aaae3c2e7462853298c991c7f95040e47dae96
Author: Norman Maurer <norman@apache.org>
Date:   Wed Jun 13 22:23:21 2012 +0200

    Commit first round of classes to support nio2/async channel api. Still work in progress.. See #396

commit fa63b89fc39e46b96affd16c558d7e62b6b77428
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 13 18:51:44 2012 +0900

    fullbuild -> full

commit b9c879375502bc50f92f136c11e7906736cfa078
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 13 18:47:57 2012 +0900

    Fix a problem where source jar is not attached

commit ccd5f7ff8c8cc7df86d88931fae23f0bd4839796
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 13 18:30:31 2012 +0900

    Add the tarball module
    
    - Activated only when -Pfullbuild option is set or during release

commit 8bca27a88eb85b8a0d5aa6bb7c8962a189c87bc9
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 13 17:12:51 2012 +0900

    Use build-helper-maven-plugin instead of messy hack

commit 64857050e3763fd7fbb213d45cedebfd80a86f44
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 13 14:03:57 2012 +0900

    Build all-in-one JAR on non-fullbuild.

commit ea5b294ce0e2a8741060ce5eb6091817fbd76e46
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 13 13:42:51 2012 +0900

    Build all-in-one JAR, xref, javadoc only on full build & release

commit b04e806bd9e4cf63336076020a9a2bc6881a688d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 13 13:28:18 2012 +0900

    Ensure 'mvn clean' removes the src directory

commit 686756fa54a60a0fee0f4e120091103f7cc7aa2b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 13 13:21:48 2012 +0900

    Clean src and target directory before making netty-all package

commit 21288f86e819184248c3fffa6b0708d12503604d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 13 12:49:54 2012 +0900

    Generate Xref

commit 8b7af2ca3b0f4fbd40111d5d9561709d7d09f27a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 13 12:11:11 2012 +0900

    Generate Javadoc with APIviz

commit 6b996722aa8f785df2b1bf48984314150f155942
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 13 11:05:42 2012 +0900

    Generate all-in-one javadoc

commit 234bd78efa45d10b71589a9e7b7fcbb89d7a694a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 13 10:43:16 2012 +0900

    Generate all-in-one source JAR

commit d66a0db6ca072d6d6d183d38551e962e32ee8841
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 13 10:01:21 2012 +0900

    Use maven-dependency-plugin instead of assemblies
    
    - Adopted from @jamestyrrell's contribution

commit 91fe9f4b38cbf781c2968e58de2e6058579db58e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 12 21:20:27 2012 +0900

    serverID -> serverId (#393 Ensure all fields follow naming convention)

commit 90b12ba5d278598f957b6b1ee6e03d5c06827220
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 12 21:09:33 2012 +0900

    Fix a ClassCastException in EmbeddedMessageChannel

commit a35aeb8cd97100b96c681ccee791860dc0ac2b43
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 12 21:06:45 2012 +0900

    StreamID -> StreamId (#393 Ensure all fields follow naming convention)

commit 9bf0ad832961d59848e0ffa366f3001dc4f17f0e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 12 20:29:06 2012 +0900

    ID -> Id (#393 Ensure all fields follow our naming convention)

commit 60de50d89e0ce51a7e3a07422fbac0c153fbf302
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 12 20:25:21 2012 +0900

    ID -> Id (#393 Ensure all fields follow our naming convention)

commit 154198a385e5dbdb2938057895d1a3f5e0c3f2fc
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 12 20:20:24 2012 +0900

    ID -> Id (#393 Ensure all fields follow our naming convention)

commit 676b81a4cdc17fcca6d020eba822676bc2a02eea
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 12 20:05:12 2012 +0900

    getPersist(ed) -> isPersist(ed) (#393)

commit dfce95dd5ad992394cc370d2aa6fe57173c87006
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 12 18:09:05 2012 +0900

    Remove unused type

commit fdb66b629403a5bfca1fc6c14f8e743cdbe08898
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 12 17:58:22 2012 +0900

    Add 'is' prefix to boolean getters if their meaning is ambiguous
    
    - plus minor code cleanup
    - ID -> Id or id

commit 61e357049e7f3cf4d159c6a35695fd5659455855
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 12 17:42:36 2012 +0900

    Remove BlockingReadHandler from master
    
    - As mentioned in the developer group:
      - https://groups.google.com/d/topic/netty/ZT0zaZ56eoU/discussion

commit 660e4548a6f2bd7a913f624e65611dfe6a123e4b
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 12 17:41:06 2012 +0900

    Fix an unexpected RejectedExecutionException
    
    - Ensure to run all remaining tasks before marking the executor as
      'shut down'.

commit 3393629eeda2fbc51d3991fa87724ef1ddbcdf01
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 12 17:25:27 2012 +0900

    Log the cause of exceptionCaught event when failed to notify

commit 3b562c917d0b278dc4c11f6298d47000d9cfc505
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 12 17:05:28 2012 +0900

    Move ChannelBufferType to netty-buffers and rename it to ChannelBufType
    
    - Also add ChannelBuf.type()

commit ecd0ae5406183c1b4f267be871acc290ed6675fb
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 12 17:02:00 2012 +0900

    Prefer MessageBuf over Queue where possible
    
    - Also replaced thread safe queues with non-thread-safe ones where
      possible
    - Unpooled.wrappedBuffer(Queue<T>) does not wrap MessageBuf anymore

commit e1faea035e4b0418f1d7bf5c0ac041dda91ac5ac
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 11 23:04:04 2012 +0900

    Automatic clean-up with Eclipse
    
    - Mostly import organization & whitespace removal

commit 6211e53e86139349a4430a4e0f524d5a625c8118
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 11 22:54:28 2012 +0900

    Code clean-up based on IntelliJ code analysis

commit 8e55bfbc9c99e205749a339328b943967f1da6ee
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 11 21:38:42 2012 +0900

    Update dependency versions to the latest versions

commit 40a7659784cba51a5e98c9521db871c05aa31749
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 11 20:41:19 2012 +0900

    Move utility methods in Unpooled to ByteBufUtil

commit 754392aaa92b5edd72d941873a1fadbd1029f279
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 11 20:24:44 2012 +0900

    Add ByteBuf.order(ByteOrder) method to simplify little endian access
    
    - Removed all methods that requires ByteOrder as a parameter
      from Unpooled (formerly ByteBufs/ChannelBuffers)
      - Instead, a user calls order(ByteOrder) to get a little endian
        version of the user's buffer
      - This gives less overwhelming number of methods in Unpooled.

commit 876847fd2060d455930c682d9e82e9fa871bf69f
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 11 17:02:00 2012 +0900

    Merge MessageBufs and ByteBufs into Unpooled
    
    - e.g. Unpooled.messageBuffer()
    - It will make much more sense once we introduce pooling:
      - i.e. Pooled.buffer()

commit 71ad0125d63f3fb849d5ce80247be86afa6947fd
Author: norman <norman@apache.org>
Date:   Mon Jun 11 09:58:53 2012 +0200

    No need for volatile

commit d27a27c980463612489664a15cc0efef293cfab5
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 11 11:59:00 2012 +0900

    Fix a bug where channelInactive() is not triggered for local transport

commit cf0259661e7d02d65f18a73a173aaccd9164d188
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 11 11:53:43 2012 +0900

    Fix a race condition where local channel's closeFuture is notified early
    
    - Added AbstractChannel.doPreClose() to allow a transport to perform
      a task before closeFuture is notified

commit 632542e0cd829ba8e42c2ceea015b45be02cfbdc
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 11 11:42:11 2012 +0900

    Make a CPU-intensive test pass on a slow machine

commit f3bbb7291e84c5951efcf9b96c65b695b47c7a7e
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 11 11:39:44 2012 +0900

    Remove a bad assertion

commit 7d36f936c846126a9c20253e655f4bc02447700e
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 11 11:35:07 2012 +0900

    Fix failing tests

commit 89444ef4ec64456434663a4140e8c611a9be19cb
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 11 11:23:09 2012 +0900

    Fix a bug where ChunkedWriteHandler stalls
    
    - Other encoders in the pipeline were swallowing the flush request.
    - Do not allocate a new buffer unnecessarily in ChunkedNioFile

commit 9dce123938dfd8d91b406379a37c72f39e4940f3
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 11 10:43:47 2012 +0900

    Use MessageBuf instead of Queue wherever possible in channel API

commit ed47feeed81819562bedb707fbd44e67e254d886
Author: Norman Maurer <norman@apache.org>
Date:   Sun Jun 10 20:45:38 2012 +0200

    Fix checkstyle

commit ad4f05f5d6338d6b47216abca16940595223f2e5
Author: Norman Maurer <norman@apache.org>
Date:   Sun Jun 10 20:31:31 2012 +0200

    Add missing license headers

commit 12898a2ef4ba0fafe0f5d288865da6d2ad4f6761
Author: Norman Maurer <norman@apache.org>
Date:   Sun Jun 10 20:31:14 2012 +0200

    Modify ChunkedInput to not return a chunk. It now read the chunk and directly transfer it. This helps to safe a copy on most cases

commit 574d84e98ed8b1c73cbe8566ebacc74016394db2
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 10 12:22:32 2012 +0900

    Remove ChannelBufferHolder / Add more handler interfaces for type safety
    
    - ChannelInboundHandler and ChannelOutboundHandler does not have a type
      parameter anymore.
    - User should implement ChannelInboundMessageHandler or
      ChannelOutboundMessageHandler.

commit a849d1187761b720253bb5ea99cac01cba7ed8ea
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 10 11:31:39 2012 +0900

    ChannelBuffers -> ByteBufs / Add MessageBuf & ChannelBuf
    
    - Add MessageBuf which replaces java.util.Queue
    - Add ChannelBuf which is common type of ByteBuf and ChannelBuf
    - ChannelBuffers was renamed to ByteBufs
    - Add MessageBufs
    - All these changes are going to replace ChannelBufferHolder.

commit 5164d91255a5cd68bcd1fade07e6ef4fdb3c7646
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 10 11:08:43 2012 +0900

    Rename ChannelBuffer to ByteBuf as discussed before
    
    - ChannelBuffer gives a perception that it's a buffer of a
      channel, but channel's buffer is now a byte buffer or a message
      buffer.  Therefore letting it be as is is going to be confusing.

commit 87f52aa60453bbe8356df130374ae4a0f4cca6b1
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 10 10:48:11 2012 +0900

    Ensure that a user implements flush() or inboundBufferUpdated()
    
    - Also prohibited a user from overriding
      ChannelInbound(Byte|Message)HandlerAdapter.  If a user wants to do
      that, he or she should extend ChannelInboundHandlerAdapter instead.

commit b6d5593e6aa5eea014569bdc800fb93635c53b3a
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 10 04:30:56 2012 +0900

    Do not wrap IOException with IOException

commit e376888d486bf9111ada3895ea5221cf4f2b8f2b
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jun 9 21:05:59 2012 +0900

    Replace 'Stream' with 'Byte'
    
    - In computing, 'stream' means both byte stream and message stream,
      which is confusing.
    - Also, we were already mixing stream and byte in some places and
      it's better use the terms consistently.
      (e.g. inboundByteBuffer & inbound stream)

commit 24e1f936a8984fb15a7fa6808a3802585f622578
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jun 9 09:44:30 2012 +0900

    ChannelType -> ChannelBufferType / Optimize DefaultChannelPipeline
    
    - Channel.type() -> bufferType()
    - Use simpler bit mask operation for pipeline traversal

commit 5661bff0624f643f25024eae3c4781b3e7bc1646
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jun 9 08:44:56 2012 +0900

    Rename SocketAddresses to NetworkConstants

commit 86cf144b8af27cd0fcc3479ae95db8fca383a87a
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jun 9 05:07:34 2012 +0900

    Update the checkstyle rules

commit a507ea97ef42938f62083996abc8f5477a4cac56
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 8 23:11:15 2012 +0900

    Move some logic from DefaultChannelPipeline to DefaultChannelHandlerContext
    
    - Using the fact that head is always non-null, we can remove some code
      in DefaultChannelPipeline and move some to
      DefaultChannelHandlerContext

commit 7c20426572a2a782acd43cd86a76c3af92112f40
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 8 19:30:06 2012 +0900

    Do not use unreleased checkstyle rules

commit 468a3228a429e77842a13f8c18f38758b51c9fbe
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 8 19:28:12 2012 +0900

    Fit every line into 120 columns

commit e1a006cac4880226d21c9046a547e229a33a42c1
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 8 16:59:08 2012 +0900

    Update to the latest checkstyle rules

commit 353357fbd5cb4d49a5cd36ce61b1459dbb647972
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 8 12:42:55 2012 +0900

    Moved AsyncPipelineModification to a new file

commit 493e77a5a7c5baac86790b718947580b262ca8fa
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 8 11:14:47 2012 +0900

    Remove trailing whitespace

commit 8970ee751cdff6c7dcdb116cc634431a0fe8bcb0
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 8 10:57:38 2012 +0900

    Fix a weird compilation error in DefaultChannelPipeline
    
    probably a compiler bug - working around

commit 748de5ea8394359a2cfc2f925a530411ea3c0f23
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 8 10:02:44 2012 +0900

    Fix a compilation error

commit 92cbe6f98041ce435d91d692510eb6b934a97ee0
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 8 09:25:39 2012 +0900

    Support long Expires dates and commas in cookie values (#96)
    
    - Contribution by @valodzka

commit 50fafdc3d32a67817050f011a39dd3e1bfbaac40
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 8 01:22:35 2012 +0900

    Rewrite SslHandler / Reduce the chance of OIO-OIO dead lock
    
    - SslHandler always begins handshake unless startTls is true
      - Removed issueHandshake property
      - If a user wants to start handshake later, he/she has to add
        SslHandler later.
    - Removed enableRenegotiation property
      - JDK upgrade fixes the security vulnerability - no need to complicate
        our code
    - Some property name changes
      - getSSLEngineInboundCloseFuture() -> sslCloseFuture()
    - Updated securechat example
    - Added timeout for handshake and close_notify for better security
      - However, it's currently hard-coded.  Will make it a property later.

commit 4a23c2a6eb5004d21dc5e3f09a32e66ade528c92
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 7 22:01:59 2012 +0900

    Fix checkstyle errors

commit 10f7a319088d62d6b883ea8faf149b842de7b0bf
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 7 21:33:31 2012 +0900

    Fixed SpdySessionHandlerTest / Fixed NPE in EmbeddedChannel
    
    - Some tests like SpdySessionHandlerTest accesses outbound buffer
      even before the outbound buffer is initialized by
      AbstractEmbeddedChannel's subclasses, leading to NPE at <init>.
      To fix this problem, subclasses now pass the outbound buffer as
      a constructor parameter to AbstractEmbeddedChannel.

commit 994038975adce859d6265babf2c5117f6fe14b31
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 7 21:06:56 2012 +0900

    Port HttpContentEncoder/Decoder to use EmbeddedStreamChannel / Cleanup
    
    - Removed unused constructor parameter in AbstractChannel
    - Re-enabled GZIP encoding in HTTP snoop example

commit 3442ff90e82bfa8140d8eb03ad6721ee2bf81142
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 7 20:17:26 2012 +0900

    Ported all tests in netty-codec to the new embedder

commit 7bc10f2eba4a53c03ee85ddbf41369b9ffbe4405
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 7 19:39:37 2012 +0900

    Replace codec embedder with EmbeddedChannel which can test any handlers
    
    - Added EventExecutor.inEventLoop(Thread) and replaced executor identity
      comparison in DefaultChannelPipeline with it - more elegant IMO
    - Removed the test classes that needs rewrite or is of no use

commit 8701e24b9a8e1e6a27dedab2df1e161982df9c24
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 7 17:49:45 2012 +0900

    Add back Channel(Inbound|Outbound)(Message|Stream)HandlerAdapter
    
    - they are useful when creating an anonymous class
    - Also added back CombinedChannelHandler with extra constraints

commit aab71ccd8adf2363a0c51765386d37dc34593d8b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 7 17:25:15 2012 +0900

    Remove Channel(Inbound|Outbound)HandlerAdapter which does nothing
    
    - Thanks to the recent refactoring, Channel(Inbound|Outbound)Handler-
      Adapter ended up having empty body.  No need to keep.

commit 09570db0915e83a92679e0648b48d86634b14ee4
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 7 17:06:13 2012 +0900

    Fixed a bug where ChannelInitializer can trigger the same event twice

commit 6b819fb993f382381ab11fb2768ce405332e08ce
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 7 17:00:21 2012 +0900

    Fix a NPE in DefaultChannelPipeline.write(...)
    
    - Also re-enabled logging handler in the echo example

commit ea0c9cfe79e07a5e11b30e8d5a8734ee98957b62
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 7 16:56:21 2012 +0900

    Post-overhaul fixes / Split LoggingHandler into three
    
    - LoggingHandler now only logs state and operations
    - StreamLoggingHandler and MessageLoggingHandler log the buffer content
    - Added ChannelOperationHandlerAdapter
      - Used by WriteTimeoutHandler

commit 5e93d206ffeb637f9b4885643860ff63a8412dc6
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 7 14:52:33 2012 +0900

    Overhaul - Split ChannelHandler & Merge ChannelHandlerContext
    
    - Extracted some handler methods from ChannelInboundHandler into
      ChannelStateHandler
    - Extracted some handler methods from ChannelOutboundHandler into
      ChannelOperationHandler
    - Moved exceptionCaught and userEventTriggered are now in
      ChannelHandler
    
    - Channel(Inbound|Outbound)HandlerContext is merged into
      ChannelHandlerContext
    - ChannelHandlerContext adds direct access methods for inboud and
      outbound buffers
      - The use of ChannelBufferHolder is minimal now.
        - Before: inbound().byteBuffer()
        - After: inboundByteBuffer()
        - Simpler and better performance
    
    - Bypass buffer types were removed because it just does not work at all
      with the thread model.
      - All handlers that uses a bypass buffer are broken.  Will fix soon.
    
    - CombinedHandlerAdapter does not make sense anymore either because
      there are four handler interfaces to consider and often the two
      handlers will implement the same handler interface such as
      ChannelStateHandler.  Thinking of better ways to provide this feature

commit 3def2e65989b33c50b2fa6fe2014289e3374341b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 7 09:19:14 2012 +0900

    Fix more checkstyle errors

commit b1a156d3f2c86c78f64da0def78727b0952018da
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 7 09:15:53 2012 +0900

    Fix a build failure due to a dependency problem / Fix checkstyle errors

commit 4831eb49da62df72335a337916eff789ac74c0ab
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 7 08:54:37 2012 +0900

    Fix a test failure in LocalChannelRegistryTest

commit a9cc75dd3e5a639a8ec5b05dbb03002017b0821d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 6 23:18:37 2012 +0900

    Port SSL echo test
    
    - Remove britspaces

commit 843a94b989818df5e465b82b2c73eed914d47f8b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 6 23:02:47 2012 +0900

    Fix compilation errors (#384)
    
    - ECJ worked fine with the old code, but the official compiler does not

commit a4b2d7026455d31a54a1b1bb249d4db18d0efe08
Author: norman <norman@apache.org>
Date:   Wed Jun 6 08:24:44 2012 +0200

    Remove some more synchronization stuff which is not needed anymore

commit a56ea06e58c4d152a3f578311ec98d14fbb3cabc
Author: norman <norman@apache.org>
Date:   Wed Jun 6 08:20:30 2012 +0200

    Only parse packet length once per packet. See #382

commit f759d3053852c8bd349896e71036f3c4d65836f3
Author: norman <norman@apache.org>
Date:   Wed Jun 6 08:06:12 2012 +0200

    Fix starttls support. Now SslHandler should be fully functional again

commit fd7767ccda80823c077cdc3701166b319d0bd078
Author: norman <norman@apache.org>
Date:   Wed Jun 6 07:52:46 2012 +0200

    Fix example

commit 2aea5291bd0b8df30442105bacf77f5ba41a3500
Author: norman <norman@apache.org>
Date:   Wed Jun 6 07:52:28 2012 +0200

    Port SslHandler to the new API. Everything except of starttls works

commit c2e3d305b4b9df36d1412d85a62dd08b17b5eaa1
Merge: 35ba150 06e754e
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Tue Jun 5 10:05:34 2012 -0700

    Merge pull request #381 from fredericBregier/master
    
    Improve HTTP message streaming in decoder same as #380

commit 06e754eb810c9d3b7815887980d99237a9e7d176
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Tue Jun 5 19:56:01 2012 +0300

    Improve HTTP message streaming in decoder, in Master same as #380 submitted fix

commit 35ba150db0c8486417f6cd4c757a03293a43677c
Author: norman <norman@apache.org>
Date:   Tue Jun 5 14:18:09 2012 +0200

    Fix BlockingReadHandler

commit 12069d3bf4512db9a87eb10c7bfe0349fbb1c240
Author: norman <norman@apache.org>
Date:   Tue Jun 5 14:13:56 2012 +0200

    Eliminate most of the synchonization stuff in ChunkedWriteHandler as its not needed anymore with the new thread-model

commit caa35c9772f0e20583c99a291611c2b67421dd92
Author: norman <norman@apache.org>
Date:   Tue Jun 5 11:34:47 2012 +0200

    Rethrow the Throwable which accoured while execution the modification in the EventExecutor

commit 4eb42125a7e007a1359e2b4de2076bc890d52dc0
Author: norman <norman@apache.org>
Date:   Tue Jun 5 11:21:44 2012 +0200

    Make sure we can't deadlock even if the ChannelPipeline modification is executed by the EventExecutor

commit c2e65016fdbd8f5bd8a1b7ed95fa4436b928a4f9
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 4 13:43:02 2012 -0700

    Fixed some checkstyle errors

commit 1eced1e9e3f92e31c85a60caae879fdcb68f8386
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 4 13:31:44 2012 -0700

    Update license headers

commit 36dbbc4867ef22d94455b047476db1957ae7e6a5
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 4 12:14:42 2012 -0700

    Fix a test failure

commit 4630905b92b1cfbf2ce414ba1c9e802cdf4b9e63
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 4 12:10:13 2012 -0700

    Do not wrap exceptions if possible

commit b9fc67c9b80a716e02d0a22f07cd15103ac96372
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 4 11:59:31 2012 -0700

    Get the executor of the context earlier if possible.

commit b322e98712611253beeb509e218eb6850d42a23a
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 4 11:56:00 2012 -0700

    Remove unnecessary parameters and fields / Clean-up

commit 6b637ab22ffc1bc7976a4582303af4d446e12310
Author: Norman Maurer <norman@apache.org>
Date:   Mon Jun 4 20:49:31 2012 +0200

    No need for a custom Runnable implementation, just use EventExecutor.submit(..).get(). Thanks @trusting for review

commit ecea558e0378c780c0e7a8a92ee0650ece6cddd0
Author: Norman Maurer <norman@apache.org>
Date:   Mon Jun 4 20:40:17 2012 +0200

    Add missing synchronized

commit 0e74b089c2f0cd3e7a72eb3fe3794e180e232ce7
Merge: c31fbc6 1a9c0fd
Author: Norman Maurer <norman@apache.org>
Date:   Mon Jun 4 20:34:16 2012 +0200

    Merge branch 'master' of github.com:netty/netty

commit c31fbc67c236858943d362a12328c8b23c5f92a8
Author: Norman Maurer <norman@apache.org>
Date:   Mon Jun 4 20:34:09 2012 +0200

    Let DefaultChannelPipeline call lifecycle methods of ChannelHandler with respect to the new ThreadModel

commit aac5586428ee9935ea790d2e77426e0bcade4c86
Author: Norman Maurer <norman@apache.org>
Date:   Mon Jun 4 20:32:12 2012 +0200

    Fix NPE in test

commit 1a9c0fd5697214421700a7c894eb787fb866e72d
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 4 11:18:48 2012 -0700

    Make use of the existance of bridge references to find a buffer

commit c8c577efc5c3bdd73a18f32f11434514411eccb0
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 4 09:25:39 2012 -0700

    Remove an unused field

commit 1ed87601b857370080739fc068bb039a3ab9b9be
Author: norman <norman@apache.org>
Date:   Mon Jun 4 15:14:44 2012 +0200

    Add a testcase to prove that we have no bug in ChunkedWriteHandler when notify futures

commit 0aa99606d912952bdc0c40ec8869470cccfec143
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 4 00:24:34 2012 -0700

    Fix a race where 2 handlers in different threads access the same buffer
    
    - DefaultChannelPipeline detects such cases and creates an object called
      'bridge' that works as a man-in-the-middle to deal with a race
      condition
    - Slight performance drop is observed but still faster than v3.
      Couldn't find much from a profiler yet.

commit c1afe3d8c39badbd51fda030a5c17aa9b62cac7d
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 19:39:35 2012 -0700

    Exchanging messages between two handlers is now thread safe
    
    - (not byte buffers yet)

commit bde9b6aa2a10d3d6d978f92e0084608ca58f3192
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 19:13:10 2012 -0700

    Remove the OIO-OIO test cases

commit 1e7c65c12eb02f3f6e4e45ee22e77ebc16b37df4
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 18:52:18 2012 -0700

    Fix a compilation error

commit f3734e1eb9c5fb1d05448ca135e5a8d7c9d3c445
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 18:51:42 2012 -0700

    Simplified DefaultChannelPipeline by making its list head final
    
    - Previously, head was a volatile field which is null at the beginning.
      While iterating over the pipeline, if the loop hits null, it called
      Channel.Unsafe explicitly.
    - Instead, I created an outbound handler that redirects all requests
      to the unsafe and made it a final field of the pipeline.
    - As a result, DefaultChannelPipeline code became much simpler.

commit f6e14b636f537b03f751bd7c6572b0130e45045a
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 13:21:57 2012 -0700

    Improve concurrent message buffer access test to reproduce known issue

commit 4d8e2198fa8f0e0036396ad8de8403f551b79a03
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 13:20:56 2012 -0700

    Fix a bug where LocalServerChannel's localAddress is unregistered

commit 1cd3156ebaa753644105ba895121389c064eae8c
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 13:12:29 2012 -0700

    Make test case more robust

commit 234c4c70db977684c8a1beeb34100a54f0d31c70
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 12:54:26 2012 -0700

    Ensure LocalChannel fire channelActive after peers's channelRegistered
    
    - Also:
      - Made the test case more robust
      - Added a simple concurrent buffer modification test (needs more work)

commit 361cb417e01d1242eb7b5717ae95dd99a72b5c49
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 04:47:05 2012 -0700

    Move SPDY echo tests to testsuite to use AbstractSocketTest
    
    - Moved MIN_VERSION and MAX_VERSION to SpdyConstants to allow public
      access
    - Removed the tests that are not necessary anymore.

commit d48973b0ff7f9b0b1ca70c115cb4c14d33636d84
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 04:35:38 2012 -0700

    Add ChannelHandlerContext.hasNext(In|Out)bound(Byte|Message)Buffer

commit bbed0602c1d9c245c6af59de68cc7838f4c97eb5
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 04:26:11 2012 -0700

    Use NoSuchBufferException instead of IllegalArgumentException

commit 13d7ee1b2f793d4364da23bc87fb7730fb6eb0a4
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 04:25:03 2012 -0700

    Optimized DefaultChannelPipeline.write(...)
    
    - Also replaced unnecessary function calls with field accesses

commit f991a8c7d4475690da97a8d796c24e883acbfa98
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 04:10:32 2012 -0700

    Fix a bug where DefaultChannelPipeline.write() doesn't find the buffer
    
    - Also fixed failures in SpdySessionHandlerTest

commit 3e0cbf0caa69df9960a013afc1e7776373aff9ea
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 03:32:30 2012 -0700

    Fix HttpClientCodecTest.testFailsOnMissingResponse()
    
    - AbstractCodecEmbedder does not throw an exception immediately anymore.
      It stores the caught exceptions in the product queue and throws them
      on pool() or peek().

commit a94916da666de2e214b15949792194e56e37d239
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 03:12:55 2012 -0700

    Remove unnecessary test cases

commit 9abc88583c392f890e5f14d7dfec2e96dc285c94
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 03:11:56 2012 -0700

    Fix DatagramMulticastTest failure
    
    - Also:
      - Unwrap InvocationTargetException

commit b47b54df37fcc73218639c66992376f49134eff1
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 03:07:42 2012 -0700

    Get loopback interface more accurately
    
    - Previous code returned wlan0 on my machine.

commit ada61d4985571f5406ea6158b02755d51392ebff
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 02:57:52 2012 -0700

    Ported multicast test / Fixed bugs in NioDatagramChannelConfig

commit e6ceb91a85011585118236b151f86460f3740edb
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 02:40:58 2012 -0700

    Add AbstractDatagramTest / Port unicast test / Ignore 'Socket closed'

commit c6600b3bfd22a07129b4c3f594011cd057b96750
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 02:25:16 2012 -0700

    codec module is only used by tests
    
    Thanks @normanmaurer

commit 49ef5672bec458c94e945c35644b93326c02a012
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 02:16:49 2012 -0700

    Better naming / Port socket object echo test

commit 7f96221fe9c1fec64b568b42bc4a05bb1434732b
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 02:02:44 2012 -0700

    Fix SocketStringEchoTest

commit 7b8024373d933bfcf3cafa31dccef020c1cb1f8e
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 01:56:34 2012 -0700

    Remove unnecessary test cases thanks to AbstractSocketTest

commit 955c89fcf1ed9b0a989df6fcecf947517b1dbeb3
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 01:52:39 2012 -0700

    Add SocketEchoTest that will simplify a lot of socket testing
    
    - SocketTestCombination generates all possible test combinations of
      socket transports.
    - SocketEchoTest iterates over the combinations and runs all tests
      using reflection.

commit 3b2c25e8ed8ed54f934faf872ca69aa6a5a1d6a9
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jun 3 01:00:16 2012 -0700

    Rename (Server)Bootstrap.(child)initializer to (child)handler
    
    - The handler you specify with initializer() is actually simply added
      to the pipeline and that's all.  It's ChannelInitializer which does
      additional work.  For example, a user can specify just a single
      handler with initializer() and it will still work.  This is especially
      common for Bootstrap, so I renamed initializer to handler, which makes
      more sense.

commit e241b3d6a246bc3dcc38b8fe5b4681cb19b12251
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jun 2 23:28:17 2012 -0700

    Move tests to the appropriate packages / Remove unnecessary tests

commit cc4c98d7baad8d72df1d8f534e85cfd249ffb67b
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jun 2 23:05:20 2012 -0700

    Fix #378 again
    
    - @jroper's fix did not work, so I just fixed it again.

commit 609674bda2cd6083179b70c1fe5cb25545396890
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jun 2 22:54:13 2012 -0700

    Fix codec embedder
    
    - AbstractCodecEmbedded analyzes the list of the specified headers
      and inserts proper conversion handlers

commit 26307cbc3e1ce776eb2f3ccd40ca216f7edcdbc6
Merge: f34fc73 e8a74c8
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jun 2 19:49:18 2012 -0700

    Merge pull request #379 from jroper/patch-1
    
    Fixing #378, bug in DefaultCookie equals and compareTo

commit e8a74c8ad07bbf497026a6b8bde532cd61f79f17
Author: James Roper <jroper2@gmail.com>
Date:   Sun Jun 3 01:04:23 2012 +0300

    Fixing #378, when path or domain are null in both this and that, equals and compareTo return false even when the cookies are equal.

commit f34fc73e89e88da32c36786c8634afa9dc090207
Author: Norman Maurer <norman@apache.org>
Date:   Sat Jun 2 20:13:58 2012 +0200

    Some changes to the examples to show the usage of @Sharable

commit 19dcb8172704f2756631b558c530dabc78c7dcb9
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jun 2 02:43:26 2012 -0700

    Add comments for easier understanding

commit 01a5bd41f0209289e4117c538248bda7c0bc9aae
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jun 2 01:58:15 2012 -0700

    Add Channel.type() which tells if stream-oriented or message-oriented
    
    - DefaultChannelPipeline uses this information to reject invalid buffer
      access in inbound(Message|Byte)Buffer.  Otherwise, a user can access
      a message buffer when the channel is stream-oriented.
    - Because ChannelType cannot be both STREAM and MESSAGE, catch-all
      buffer has been removed to avoid confusion and unexpected behavior
      (it's already causing headache.)
    - As a result, codec embedder needs rework.

commit 45f19d02ff9a9e2c72e4d95e38c5d7f73960fe57
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jun 2 01:38:10 2012 -0700

    Remove the codecs and handlers that can't make it on time for 4.0.0.A1
    
    - Removed ones are: IP filer and HTTP multipart codec
      - Needs closer code review and polishing
      - Sorry. I'll add them back in the next alpha releases
      - SSL handler and ChunkedWriteHandler also need more work, but
        I really want to make them part of the first alpha because they
        are used pretty often by users.

commit cc4f705029d1ec319d089c35288fe36cbbea5080
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jun 2 01:30:55 2012 -0700

    Replace ChannelBuffer.toByteBuffer() with hasNioBuffer() and nioBuffer()
    
    ... just like we do with byte arrays.  toByteBuffer() and
    toByteBuffers() had an indeterministic behavior and thus it could not
    tell when the returned NIO buffer is shared or not.  nioBuffer() always
    returns a view buffer of the Netty buffer.  The only case where
    hasNioBuffer() returns false and nioBuffer() fails is the
    CompositeChannelBuffer, which is not very commonly used and *slow*.

commit 14e68aca57d39a8185e79378c400aefa65a44306
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 1 23:18:46 2012 -0700

    Fix a Javadoc error

commit 14cf227c46afcd8015abcfc4e2b37617a7028e3d
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 1 23:11:01 2012 -0700

    Fix a test failure

commit 720f62d9830d3dbf296cc94d4c1b8bfceedb4025
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 1 22:58:26 2012 -0700

    Fix a compilation error

commit 04cf1c8199827edfee08c450b8c0ccbefab9e995
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 1 22:57:54 2012 -0700

    Use custom thread factory by default to better recognize the threads
    
    ... from their names

commit 61e169e53ad7cd11ef1e041d9f9c2d7b9a1129da
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 1 22:33:53 2012 -0700

    Remove EventExecutor.parent(), which is of no use

commit 444038649401aa4200bc988cbd5d8da38a11aa41
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 1 18:34:19 2012 -0700

    Little bit of optimization

commit e2a617b07bf5c8f932554cf4e9597532fac66a39
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 1 18:25:56 2012 -0700

    Fix a bug where DetectionUtil.hasUnsafe() returns a wrong value

commit 141a05c8316f68bff6aa7e2b0bbf71443acf7408
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 1 17:51:19 2012 -0700

    Strict thread model / Allow assign an executor to a handler
    
    - Add EventExecutor and make EventLoop extend it
    - Add SingleThreadEventExecutor and MultithreadEventExecutor
    - Add EventExecutor's default implementation
    - Fixed an API design problem where there is no way to get non-bypass
      buffer of desired type

commit 754cd9984335fd2691ef7351b8833d1eac1b7918
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 1 00:36:12 2012 -0700

    Port ChunkedWriteHandler

commit ab5043b3c7f04b3ef9744d59e80fcb04b34173d9
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 21:22:03 2012 -0700

    Fixed LocalAddressTest

commit 5243d3d0f0e09977397478fc6e9551661e05e4cb
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 17:05:34 2012 -0700

    Add @Sharable annotation to ChannelInitializer

commit f2eddda5a49fe8fa28ebf65c9121a95c292147d3
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 16:59:54 2012 -0700

    Call discardReadBytes() on outbound byte buffers when possible
    
    - Also fixed a test failure in codec-http

commit d626561b594e6abc1348deb5e5b5e6655624ec43
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 16:47:00 2012 -0700

    Define a dedicated exception for performing blocking ops in event loop

commit 7be188f8c0ec666b10f04c325a292dcf064fc3e8
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 16:44:51 2012 -0700

    Ported BlockingReadHandler

commit 468918227a9602e70e2d3b66c2b53f212652b272
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 16:03:57 2012 -0700

    Remove unnecessary parameter in AttributeKey and ChannelOption
    
    - Removed UniqueKey which does nothing
    - The valueType parameter was not needed at all because we do not need
      type information in runtime at all.

commit 9bb5b34887c015ea8e8f4e4a4f92a838a22e41d6
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 15:55:11 2012 -0700

    Remove BufferedWriteHandler
    
    - All writes in Netty 4 are buffered by default and a user can call
      flush() to flush it.

commit 2aa466640e88b2b8b680f5d941e7569441331d65
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 15:53:38 2012 -0700

    Ported Read/WriteTimeoutHandler with simplification
    
    - The default behavior is now to close the channel on timeout.  A user
      can override this behavior, but I would just use IdleStateHandler or
      use eventLoop's timer facility directly for finer control.

commit 5f24f176bb4a6c2ef2ecb1ac1b7f0584b9d406fc
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 15:04:25 2012 -0700

    Port ReadTimeoutHandler

commit 7ddc93bed87f6b1efb062df480566ff590a8b34e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 14:54:48 2012 -0700

    Ported IdleStateHandler / Forward-ported the UptimeClient example
    
    - Add ChannelHandlerContext.eventLoop() for convenience
    - Bootstrap and ServerBootstrap handles channel initialization failure
      better
    - More strict checks for missing @Sharable annotation
      - A handler without @Sharable annotation cannot be added more than
        once now.

commit 77274ae743d427d61545ea1d71d0c53afb240891
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 12:03:01 2012 -0700

    Automated code clean-up

commit 734d452be2ab8cc057c73f565e4641dbbb04653d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 11:50:08 2012 -0700

    Apply missing changes in the branch '3'

commit 0cd766df3087ed95b11230314a0e8a5162b26d9b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 11:32:42 2012 -0700

    Move HTTP multipart classes to its own package / Clean-up
    
    - Move CaseIgnoringComparable to netty-common
    - Add HttpConstants

commit c8fa42beaf29fe0b65a8fbb8a031f9db46e14c10
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 11:13:01 2012 -0700

    Rename wrapPrimitive() to copyPrimitive() / Add tests / Tidy up (#167)
    
    - Add ChannelBuffers.copyShort(short...)

commit 429535e6c80c5fa8af954935db6bff0d56914644
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 10:51:27 2012 -0700

    More primitive wrapper methods (#167)
    
    - ChannelBuffers.wrap(Float|Double)(...)
    - Handle the case where there is only one value.

commit 49bda34a5d513797a66ae1cd94d38fba2249f080
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 09:14:39 2012 -0700

    Fix a bug where ChannelBufferHolder.isEmpty() returns a wrong value
    
    .. when it has a byte buffer

commit 0fd824c3bb2382df4ab9495810bab20150db3960
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 09:11:07 2012 -0700

    Fix UnsupportedOperationException

commit 633fada6ec37f8e8062c23ad8a632e018208687b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 09:07:10 2012 -0700

    Take advantage of the new method in ChannelInboundStreamHandlerAdapter

commit 3584da2dad941257d0608cf12e80e285fb0b8a99
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 09:04:19 2012 -0700

    Use ChannelInboundStreamHandlerAdapter in EchoClientHandler

commit 2a63acef4de7f3b832356f2ee7a3d3f74d460e0d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 09:03:31 2012 -0700

    More convenient inbound stream handler / Smarter inbound buffer cleanup
    
    - Added a new convenience method to ChannelInboundstreamHandlerAdapter
    - EchoServerHandler uses the new method
    - DefaultChannelPipeline calls inboundByteBuffer.discardReadBytes()
      when it is sure there's no memory copy involved

commit 665777e6f990545dbf6cbcc807bbe1f09cb98c53
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 02:49:39 2012 -0700

    Add InternetProtocolFamily and use it with NioDatagramChannel

commit 197f31c90e82d6ebb0afef5e1dbf0aa984b20098
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 02:06:53 2012 -0700

    Test all supported SPDY session management

commit a494f201fcc790262192316f9f9d2305e4fa9052
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 02:02:02 2012 -0700

    Call setHandshakeComplete() before the handler replacement (#332)
    
    - Contributed by @normanmaurer

commit c32df371abcbee7ebbb77e6bf6a429d3f3f4134b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 01:55:30 2012 -0700

    Fix compilation errors

commit 7ac89ace4f51754906cbe37c29b1a871918e80bf
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 01:53:58 2012 -0700

    Finished forward-porting SPDY codec

commit 32c982b478229b888df03175ae6a48fb640a4511
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 01:19:54 2012 -0700

    Fix NPE in OioChildEventLoop

commit 131eef2c5126be68030701cd9416ccbc14a9a2e6
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 31 00:37:27 2012 -0700

    Forward-porting SPDY codec

commit 53f16ce003df832177eed6e06f399e4f7e1760c7
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 23:47:15 2012 -0700

    Add more convenience methods to Bootstrap and ServerBootstrap

commit 34f697a06c206d9c55109af56a9fd9b04f4412e6
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 23:36:03 2012 -0700

    Forward-port the JBoss Marshalling codec

commit d7a198a60f256620c395b3bd23726d387335b5b5
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 23:14:18 2012 -0700

    Zap marshalling and spdy codec to forwardport again

commit 7fb64e2046543895cbec1d3b67ddfb2b1f6517a3
Author: norman <norman@apache.org>
Date:   Thu May 24 08:47:35 2012 +0200

    A small optimization for the fix of #360

commit f2df20ddff2264d660520bd8e852d0e12520177e
Author: Sun Ning <nsun@avos.com>
Date:   Thu May 24 14:33:19 2012 +0800

    fix #360, add check for empty buffer; also add unit test for this scenario

commit 59b5c3a328581135fd17b574cec62012ad30c098
Author: Norman Maurer <norman@apache.org>
Date:   Wed May 23 15:12:04 2012 +0200

    Add workaround to let the sleep work correctly in windows too. See #356
    
    Conflicts:
    
    	common/src/main/java/io/netty/util/HashedWheelTimer.java
    	common/src/main/java/io/netty/util/internal/DetectionUtil.java

commit f6f246cac0eb5e8163dc0f9b6b8676b25704b4dc
Author: Cruz Julian Bishop <cruzjbishop@gmail.com>
Date:   Wed May 23 21:22:56 2012 +1000

    Added messages to all IndexOutOfBoundsExceptions
    
    I need to implement this to help myself finish more future pull requests which, so far, are plagued by these exceptions with no information available.

commit 5852d82ad6d756da9ef53ea570b4afe4e153df63
Author: Norman Maurer <norman@apache.org>
Date:   Tue May 22 22:57:36 2012 +0200

    Only send event upstream once the Ssl handshake was completed successfull. See #358
    
    Conflicts:
    
    	handler/src/main/java/io/netty/handler/ssl/SslHandler.java

commit e2bdc2234d3c38574416003cc35c001104d0cf33
Author: Norman Maurer <norman@apache.org>
Date:   Sat May 19 17:10:52 2012 +0200

    Cleanup

commit 743596aaeac455f009d4b0c6805ea8322c785b0d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 19:18:08 2012 -0700

    Fix a bug where first websocket frame is discarded (#332)

commit e2a7462d703ed73f47d2b01b0956f949d47294fd
Author: Norman Maurer <norman@apache.org>
Date:   Sat May 19 13:19:24 2012 +0200

    Fix syntax. See #342

commit 2f71c001b4e26b38c4637f9fabbf3ae9bb8020ff
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Fri May 18 13:44:23 2012 -0700

    Make SslBufferPool an interface

commit 7007e2fbaf97d90cd4d70bf61967e357a243e4be
Author: norman <norman@apache.org>
Date:   Fri May 18 08:12:42 2012 +0200

    Make all methods of SslBufferPool public so a subclass can be placed in another package. See #336

commit 1226cdacfb076b38d5fdf206b483d8864c1a461a
Author: norman <norman@apache.org>
Date:   Fri May 18 08:11:45 2012 +0200

    Use the correct ChannelBufferFactory when creating new ChannelBuffers. See #335
    
    Conflicts:
    
    	handler/src/main/java/io/netty/handler/ssl/SslHandler.java

commit ed357181c01716181b1825901f9fe8b9d95d72f4
Author: norman <norman@apache.org>
Date:   Fri May 18 08:10:34 2012 +0200

    Make sure SslHandler also works if SslBufferPool use non heap ByteBuffers. See #329
    
    Conflicts:
    
    	handler/src/main/java/io/netty/handler/ssl/SslHandler.java

commit 14b2a0db99b02c42ff747367fd2b515bfcfbd593
Author: norman <norman@apache.org>
Date:   Wed May 16 13:00:49 2012 +0200

    Add JBoss Marshalling Encoder/Decoder. See #324

commit a8d63a4ad752582535a835ea10eb4e587f55cff7
Author: norman <norman@apache.org>
Date:   Tue May 15 13:59:33 2012 +0200

    Make sure CompositeChanneBuffer does not throw a UnsupportedOperationException if discardReadBytes() discard the whole content of the buffer. See #325

commit a5a76131e60cf8ecc04d8af6b85d628fded6ef6c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 19:09:23 2012 -0700

    Fix checkstyle errors

commit 4fc089829dd0a7ae80617928c8fec506e8e52505
Author: vibul <vibuli@gmail.com>
Date:   Sat May 12 21:05:15 2012 +1000

    Fixed bug where subprotocol not sent by client
    
    Conflicts:
    
    	codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java
    	codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java
    	codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13.java
    	codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker.java

commit 67ec4429ccc34c3933f2b3d5881e9ddda2c531de
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 19:03:45 2012 -0700

    Implement NIO.2 multicast options

commit 117626e03490ee68e79435e04de9a41ee67eb0f2
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 18:50:33 2012 -0700

    Add ChunkedWriteHandlerTest from branch 3

commit 57d3d0cbb5c7c8ebb2d0a384a0f8a78d4b4ecee7
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 18:47:55 2012 -0700

    Update ChunkedWriteHandler to the latest revision at branch 3

commit 7b434e225f1baae5b6f7b36a2b2b276bf19c6d5d
Author: norman <norman@apache.org>
Date:   Fri May 4 13:49:22 2012 +0200

    Make sure we fire the event from the io-thread. See #306

commit 31e643b32d486f5ccd3019f04c40cb5f989f7f74
Author: norman <norman@apache.org>
Date:   Fri May 4 10:31:06 2012 +0200

    Refactor ChunkedWriteHandler to remove synchronization which can have bad side effects like deadlocks. See #297 and #301
    
    Conflicts:
    
    	handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java

commit 280c65a28e0b3d322fe8b9dc59763eca2e50c1df
Author: norman <norman@apache.org>
Date:   Fri May 4 10:31:06 2012 +0200

    Refactor ChunkedWriteHandler to remove synchronization which can have bad side effects like deadlocks. See #297 and #301
    
    Conflicts:
    
    	handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java

commit f8f703e67948919a61157bbdb94d2a9842893abb
Author: norman <norman@apache.org>
Date:   Fri May 4 10:28:57 2012 +0200

    Add @Override annotations

commit c705379adb0a0facef32fb8f95cde892207cadbb
Author: norman <norman@apache.org>
Date:   Fri May 4 10:27:58 2012 +0200

    Notify ChannelFuture's of queued writes if the SslHandler gets remove d from the ChannelPipeline. See #306

commit c0bb070876834643d0ff9b0089fba65aa25c474e
Author: norman <norman@apache.org>
Date:   Fri May 4 10:26:25 2012 +0200

    Fail all queued writes if the ChunkedWriteHandler is removed from the ChannelPipeline. See #304

commit d308fa8fe17d69c3bdb88bea8bf2a65b54a0758a
Author: norman <norman@apache.org>
Date:   Fri May 4 10:24:28 2012 +0200

    Fail all pending writes on channelClosed(..). See #305

commit d1e63281021033714e742ba0bbce3d563ee1264c
Author: Norman Maurer <norman@apache.org>
Date:   Thu May 3 17:15:03 2012 +0200

    Allow to register ChannelFutureListener's that get notified once the inbound of the SSLEngine is closed. See #137

commit a73e6ea5815fc3d6d4c76ec8598b8698940d4247
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Wed May 2 12:33:40 2012 +0300

    typo fix ! Sorry

commit a91e72403c08be6fb3524ace01cba1ef5087ecac
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Wed May 2 11:40:28 2012 +0300

    Very small fix (readUnsigned while in optimized version it was signed but should be unsigned)

commit d6cedb008ba8d55ce7d132f03d3dac587db39c54
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 17:37:12 2012 -0700

    Reduce the cost of throwing a SeekAheadNoBackArrayException

commit f799c9f21554130b750dc8c277ab061b69d732dd
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Tue May 1 00:18:42 2012 +0300

    Add Exception to the exception class name

commit b8ab8828c03a285da17bbd051e668fc1b1334ff9
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Tue May 1 00:14:42 2012 +0300

    Add Exception to name of the Exception ;-)

commit ac39f39f3654f96bbeef617350ce11bbdb3e6695
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Mon Apr 30 13:06:53 2012 +0300

    Update codec-http/src/main/java/io/netty/handler/codec/http/HttpPostRequestDecoder.java

commit 5d2bf43b59e274dd984613d33ccef3c722104239
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Mon Apr 30 13:02:46 2012 +0300

    Optimize Buffer access while decoding by going through backend array when possible (divide by almost 2 the time spent in decoding)

commit 759d0633a4c6ea2262833e43d37adf0a62ab8a84
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Mon Apr 30 12:38:07 2012 +0300

    Add the SeekAheadOptimize class to enable faster seek of bytes values in HttpPostRequestDecoder

commit e8bc276ddd9b5e6367f8c866095c8caa003fa56f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 17:28:51 2012 -0700

    Fix in addContent when switching from MemoryAttribute if it is done when
    last buffer added, in order to not close immediately the underlying
    file before adding the last buffer.
    
    - Contribution by @fredericBregier

commit dba9a6d40826668f0a009ad9dd2ad8493a401f6f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 17:26:41 2012 -0700

    Close channel when needed / Call force() only when necessary
    
    - Contribution by @fredericBregier

commit 92f010d6884d6c695c151e995b5f7708e04972f2
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 17:21:51 2012 -0700

    Use int instead of long for maxFramePayloadLength

commit 67ee22e23af76e141869b713ef705a88500a02c8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 17:13:00 2012 -0700

    Add max frame length for web socket to limit chance of DOS attack (#283)
    
    - Contributed by @veebs

commit ec43aa121f1642c709310411a410460ba0f6fc78
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 16:43:04 2012 -0700

    Case-insensitive matching for Upgrade and Connection header (#278)

commit 1d7067719b5bc0318b58bdfed885057aface9d83
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 16:38:23 2012 -0700

    Allow to disable the use of sun.misc.Unsafe (#272)
    
    - Contributed by @normanmaurer
    - Added io.netty.noUnsafe property

commit 42abb6df3ae4f7763b61c4d749995d4d582f13b2
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 16:19:22 2012 -0700

    QueueFactory cleanup
    
    - Really attempt to create a queue to determine LTQ can be initialized
      in runtime, and cache the result
    - Remove unnecessary Class<T> parameter in createQueue()
    - Remove unused createQueue(Collection)

commit c7004ed1427466e9f3e23f74697f4b8556e43555
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 16:04:34 2012 -0700

    Use Sec-WebSocket-Origin instead of Origin (#264)
    
    - Contributed by @normanmaurer

commit 367895f660fd2267977b4a57e472064647f4379f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 16:00:40 2012 -0700

    Add port to Origin if the port is non default (80/443). (#262)

commit 4ff98c359cc377bb3640baeae96b7123291e34fa
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 15:57:57 2012 -0700

    Add PrematureChannelClosureException

commit 7e94632d412142606d7c62a47995e65b9e049bcd
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 15:57:39 2012 -0700

    Add port to 'Origin' if the port is non default (80/443) (#262)
    
    - Contributed by @normanmaurer

commit 5e896cf0b35c8ff92c71b65210dea7f0b2221cfc
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 15:53:20 2012 -0700

    Add a note that explain the behavior of CookieEncoder (#94)
    
    - Contributed by @normanmaurer

commit b5d715343a24be61be13a1546908ff9dbd3a743c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 15:51:24 2012 -0700

    Fail if DynamicChannelBuffer attempts to exceed the max capacity (#258)
    
    - Contributed by @normanmaurer

commit 8eda2280b3555bf6ef81c0c7090bbd5270e51094
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 15:48:57 2012 -0700

    Add test for HttpClientCodec missing response handling (#256, #259)
    
    - Contributed by @normanmaurer

commit e3431db547e144e1f786f232ce2784dc3f4ad4a5
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 15:46:38 2012 -0700

    Use logger instead of System.err

commit 6288e02a9a04c62a46f15bb4e202a66979c8d2f2
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 15:44:21 2012 -0700

    System.out.println -> InternalLogger
    
    - Remove unnecessary output, too

commit f428853b3541d0bb7391ae5d2efa528a110e7d4d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 15:41:39 2012 -0700

    Remove IpV4Subnet.main()
    
    - Should run as a test case

commit 54047c69cfea531384fff8ca75f390b321ccda0b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 15:40:51 2012 -0700

    Remove IpSubnet.main()
    
    - Should be run as a test case

commit 65c526c1c8d3791bbec5bba4430644bc26e80a8c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 15:39:40 2012 -0700

    Use a logger in ZStream
    
    - Contributed by @CruzBishop

commit 6dee9f7b0c10ef1e48abe5751091479f2018ddf3
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 15:37:53 2012 -0700

    Use a logger in SocketAddresses
    
    - Contributed by @CruzBishop

commit 922cec1f9b1ce300e5e8ebc089f6e8f89bb25d26
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 15:35:14 2012 -0700

    Add an option to tell a user if there was a missing response (#256)
    
    - Contributed by @normanmaurer

commit 24eb85cdf5e56d8b55f68ecec1c553f38adee61f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 14:16:39 2012 -0700

    Fix indentation

commit b87ce6a3cf558e5dc8fec5bea1a52a7509a8d20f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 13:31:17 2012 -0700

    Update README

commit e10d113678b25fe2b69182e512a31076773e99a2
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 13:20:32 2012 -0700

    Do not report Android as Java 7

commit e5bcc74cd52ed3f277a4733d1e3e1a17cf4b7e84
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 11:48:04 2012 -0700

    Warn if the last inbound handler forwarded an exceptionCaught() event

commit cca35454d214611792067c89b78f7477aae3a323
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 11:32:39 2012 -0700

    Ensure channelInboundBufferUpdated is fired after channelActive

commit 47fa2ef2e8c3ed78f1722241b971ab1f5aa1b2e7
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 10:17:45 2012 -0700

    Use LinkedHashSet instead of HashSet to preserve order of execution

commit 9f9045c3b448144715b17508fec357c0710e5891
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 04:33:43 2012 -0700

    Add EventLoop implementation for the local transport

commit c17e5b458a3e0ce1891c7b1b256d2ea875e7edce
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 04:28:01 2012 -0700

    Typo

commit 4154f4252094d7d5428e22d7b1987c883003f4cc
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 04:27:19 2012 -0700

    Less restriction in shutdown hook modification

commit 078a502c5fcc907c1fdcfaa9f09660dd68477654
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 04:23:15 2012 -0700

    Add shutdown hooks to SingleThreadEventLoop
    
    - LocalChannel and LocalServerChannel uses it to close themselves on
      shutdown
    - LocalEcho example does not call close() anymore because the channels
      are closed automatically on shutdown

commit 243f6581c6c238e26c413e0e22fe3264ffa330b8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 04:06:15 2012 -0700

    Safer shutdown

commit 65e224f149207d382698680d35b844e3746cde9a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 04:05:10 2012 -0700

    Safer shutdown

commit a53ecbf5f1e699c495c1610aaaeb1f037f9de940
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 03:58:14 2012 -0700

    Implement the local transport
    
    - Replace the old local example with localecho example
    - Channel's outbound buffer is guaranteed to be created on construction
      time.

commit 392623749eaadbbb4169103480971fac0b635784
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 02:01:48 2012 -0700

    Fix compilation errors

commit 78974e85c5dd7a4ca5964033db7c928631605544
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 00:38:23 2012 -0700

    AbstractUnsafe.out() -> directOutbound()
    
    - to avoid confusion between Channel.outbound()

commit f4c6bcafaf84c42ee1af45c84314c5b60cd299d5
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 30 00:35:53 2012 -0700

    Keep channel's outbound buffer in AbstractChannel
    
    - Replace firstOut() with newOutboundBuffer()

commit 05770b138da1fe88dc4ae0cac624f9a30e44bf6f
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 29 17:25:38 2012 -0700

    CodecUtil should be final

commit a9948d681ee667dfa2e2b9252bd10fc899c08dae
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 29 17:25:09 2012 -0700

    Throw NoSuchBufferException instead of returning null
    
    - Exception in this case makes a user less confusing
    - To reduce the overhead of filling the stack trace,
      NoSuchBufferException has a public pre-constructed instance.
      - This is necessary because codec framework sometimes need to support
        both type of outbound buffers.
    - Fixed a bug where SpdyFrameEncoder did not handle ping messages
    - Reduced memory copy in codec embedder (EmbeddedChannel)

commit 8237afff64509520865c08bf4f5fd130e06aed92
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 29 16:41:26 2012 -0700

    Ported most examples
    
    - Renamed ChannelBootstrap to Bootstrap
    - Renamed ServerChannelBootstrap to ServerBootstrap
    - Moved bootstrap classes to io.netty.bootstrap as before
    - Moved unfoldAndAdd() to a separate utility class
    - Fixed a bug in unfoldAndAdd() where it did not handle ChannelBuffer
      correctly

commit b10cf29393d9ab4af8da3ee5d90ebe3eaaafc11c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 29 13:34:01 2012 -0700

    Add isDecodable/isEncodable() to codecs to support stacked codecs

commit 026715e8189f2bad22c3143eec220594bf18479d
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 29 12:09:29 2012 -0700

    Refactor the pipeline API to support stacked codecs
    
    - Previous API did not support the pipeline which contains multiple
      MessageToStreamEncoders because there was no way to find the closest
      outbound byte buffer.  Now you always get the correct buffer even if
      the handler that provides the buffer is placed distantly.
      For example:
    
        Channel -> MsgAEncoder -> MsgBEncoder -> MsgCEncoder
    
      Msg(A|B|C)Encoder will all have access to the channel's outbound
      byte buffer.  Previously, it was simply impossible.
    
    - Improved ChannelBufferHolder.toString()

commit 81e8c4993119eb3c225ab7c4b55b1e2cace5cb08
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 29 00:06:00 2012 -0700

    Fix bugs in ZlibDecoder / Port the factorial example
    
    - Fixed IndexOutOfBoundsException in ZlibDecoder
    - Fixed a bug where ZlibDecoder raises an exception when a connection
      is closed

commit e00f303e4ff3e5201ee665ff0ec3e6034651b5d0
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon May 28 05:32:48 2012 -0700

    Fix compilation error caused by recent changes in AbstractChannel

commit ef4ee498006384016717c30bce43116d7f65e9de
Merge: 6d39c34 326b88c
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon May 28 05:30:13 2012 -0700

    Merge branch 'master' into next-api

commit 6d39c342b636362a2068e6644cc9451182cc03a9
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon May 28 05:20:32 2012 -0700

    Add FIXME

commit e48281471bcefc9fda036bf98cfdb5b3b8c223c7
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon May 28 05:05:49 2012 -0700

    Limit future notification stack depth / Robost writeCounter management
    
    - Also ported the discard example while testing this commit

commit a2698e65fb4bbe2ab0228848cdb3bd1ff232a2e4
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon May 28 01:23:58 2012 -0700

    Added more convenience methods to bootstraps

commit 626c5ef9c9475c57231ee61354a3c3fc82aff87f
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun May 27 19:39:10 2012 -0700

    Remove the classes that are not part of Netty 4.0.0.Alpha1
    
    - Will add them back before Beta1

commit 528b5c43280d3514748f3f53e55a088805e68e7b
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun May 27 19:28:28 2012 -0700

    Removed the modules that are not part of 4.0.0.Alpha1
    
    - Will add them back before Beta1 is out

commit f4a19886d366607dd5080751aa678e3948abed0d
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun May 27 05:31:18 2012 -0700

    Reorder methods / Move buffer expansion logic in OIO

commit 7b05f3417162caffee26aef59e005710bb8bac1c
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun May 27 05:19:45 2012 -0700

    Split AbstractOioChannel into its subtypes
    
    - AbstractOioMessageChannel and AbstractOioStreamChannel
    - Replaced 'if' with polymorphism
    - Better performance

commit 064b3dc9e560f599143410dc3e9c7419ebf3a388
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun May 27 05:07:23 2012 -0700

    Split AbstractNioChannel into two subtypes
    
    - AbstractNioMessageChannel and AbstractNioStreamChannel
    - Better performance
    - Replaced 'if' checks with polymorphism

commit 7327bb35222baf0a8c3b10644f2c144587988476
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun May 27 04:43:48 2012 -0700

    Add SingleThreadEventLoop.runAllTasks()
    
    - Removed duplicated processTaskQueue() in child event loops
    - Simplified the cleanup of cancelled keys in NIO transport

commit 3b8de9f133c1163699cdb55b5b90ebc4da04bf56
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun May 27 04:17:33 2012 -0700

    Add LoggingHandler to ServerSocketChannel's pipeline

commit f29b6ae29ab208f0f138350dac90424c9d4b4eb2
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat May 26 23:29:23 2012 -0700

    Fix performance issue in OioSocketChannel since previous refactoring

commit 6206d82b2c670aa58537c686ce9144ba94201cf6
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat May 26 22:48:48 2012 -0700

    Split AbstractChannel into AbstractOioChannel and AbstractNioChannel
    
    - Simpler OIO transport
    - Suits better for other transports such as AIO, RXTX, IOStream
    - Add ChannelBufferHolders.discardBuffer()

commit 18d30d9db347b82c3bfe479a92b10058347a5a1e
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat May 26 18:31:39 2012 +0530

    Improved documentation of SCTP Channel/ServerChannel Interfaces

commit 0592dba302cb4a5f208a0a17503a7c16339701ae
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat May 26 18:10:40 2012 +0530

    Updated readme.

commit e7902e5c9984b635e8d79d84116d11351253b224
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat May 26 17:34:18 2012 +0530

    Improved documentation in SCTP Transport classes

commit ff8f80a008e473d3626712a24e62de0ff6932511
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat May 26 17:09:26 2012 +0530

    Minor Java Doc parameter fix

commit d0d577a0c84099750880e73b22259376ddf0343e
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat May 26 17:08:19 2012 +0530

    deleted unneccessary sctp handlers

commit b95f264ba3894d1a1991fec8d8986f350bf7c61a
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat May 26 15:48:52 2012 +0530

    Removed unneccessary todos in IpFilterRukeTest and reformatted the file

commit 5538de9a4220760d5d1b9ee58b897ef5b904d27d
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat May 26 15:46:48 2012 +0530

    Fixed a minor checkstyle warning

commit a1bdf671f16978ac1fbb9ed6e3a6ea98b4e520bd
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 25 15:51:22 2012 -0700

    Simplified EventLoop implementation names
    
    - Also
      - Fixed a test failure
      - Fixed compiler warnings related with ChannelInitializer type
        parameters

commit 61314ef51bd8313ad3371e15135b4aff42413f59
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 25 15:32:28 2012 -0700

    Split AbstractChannel.doFlush() into two variants for simpler user impl
    
    - Also renamed doRead() to doReadMessages() and doReadBytes()

commit f60f918763473dc4ec4d01e56c0c0115e32c62d3
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 25 14:24:25 2012 -0700

    Fixed all SPDY echo tests / Handle closed old I/O channels correctly

commit 01aa1647bb259f42d0e9e411318d331651e5e0ec
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 25 14:12:43 2012 -0700

    Reduce GC in OioDatagramChannel.doRead/doFlush

commit 2395bcd8055abfe10049f71104f5705f9834bfdc
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 25 14:06:33 2012 -0700

    Process task queue before start to read
    
    - Otherwise some tasks scheduled right after activation will be executed
      with 1 second delay.

commit 3d490810b8adbadc371714a83b03052589e1f397
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 25 14:01:19 2012 -0700

    Hide internal class from users

commit 778fbc36a9dd2b3512484b8d069ae6228227beab
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 25 13:59:31 2012 -0700

    Remove selector spinning optimization

commit e2d69120bbb277371215e6b5e0f2fa014993ffbc
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 25 13:58:56 2012 -0700

    Ported OIO socket/datagram transport to the new API

commit b06a4bea6b723b2829d23191d3cd57cb445b3cad
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 25 09:43:28 2012 -0700

    Fix a compilation error

commit bc5e8b6be1c4aa2ffd74cc9b605acdf169c7f7d6
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 25 06:30:30 2012 -0700

    Do not create an iterator unnecessarily

commit 59f11ed64f641c22506bf4c328640d450dac728d
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 25 06:16:25 2012 -0700

    Optimize AbstractChannel and related classes
    
    - AbstractChannel.doRead() is split into two versions so that the
      implementation doesn't have to validate the buffer type.
    - Optimized ChannelBufferHolder a little bit
    - Reduced GC related with flush future notification
      - Added FlushCheckpoint and DefaultChannelFuture implements it
        opportunistically
    -

commit 02cb7adf0355220dfb687e1d3c3f575ae8cfbc1e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 25 06:10:10 2012 -0700

    Reduce GC in ChannelBuffer bulk operations
    
    - Pre-create an NIO ByteBuffer for reuse instead of creating a new one
      every time

commit 25599018f29377bf21db589209490e5efc4d9fec
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 24 21:04:12 2012 -0700

    Tiny bit of optimization in event loop

commit 02144f70e108f6371376969780e8089901c945ca
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 24 15:12:14 2012 -0700

    Genericize ChannelInitializer

commit 4a3c54b0fa8c3122b1005452b2593b71360ed6f2
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 24 10:37:51 2012 -0700

    Add UDP_RECEIVE_PACKET_SIZE option for datagram transport

commit c7c923cab30455eca7693a11e86eb05034903a83
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 24 09:32:14 2012 -0700

    Ported the QOTM example to the new API
    
    - Fixed bugs in the NIO datagram transports
      - DefaultNioDatagramChannelConfig did not initialize on Java 6

commit c6f3b5762e0dc40ab75c27a8f10c5d1412ed3d39
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 24 08:57:10 2012 -0700

    Implement NIO datagram transport with the new API
    
    - AbstractChannel now handles flushing a message buffer
    - Cleaned up DatagramChannel interface
    - Removed ProtocolFamily because a user can create an NIO
      DatagramChannel and specify it as a constructor parameter
    - UniqueName and UniqueKey constructors became public so that
      I don't need to create a subclass every time.

commit cd11786994a6863f1f6a52d29c059b49bfad7750
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 24 08:51:46 2012 -0700

    Fix typo in the comment

commit 326b88c43005f9b295f305b59d8ae43fc7f09410
Author: norman <norman@apache.org>
Date:   Thu May 24 08:47:35 2012 +0200

    A small optimization for the fix of #360

commit 609caeba949003495cf051fc2095cb0b5e7b9d81
Merge: c374963 a6d7105
Author: Norman Maurer <norman@apache.org>
Date:   Wed May 23 23:40:55 2012 -0700

    Merge pull request #363 from sunng87/master
    
    Fix #360, add check for empty string buffer

commit a6d7105761a083230bb4d2aac7e58ca5fb07a196
Author: Sun Ning <nsun@avos.com>
Date:   Thu May 24 14:33:19 2012 +0800

    fix #360, add check for empty buffer; also add unit test for this scenario

commit 21a3d3fe02d6d5de55a3c33aff7d8e0f2e0cef0e
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 23 23:28:15 2012 -0700

    Add more constructor to NioSocketChannel

commit a2d57144b4d2bc25e089af73576b0fc466c9d67b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 23 11:47:37 2012 -0700

    Fix compilation errors

commit debaa6a72a44cbb02a091cc40c1802391197fc5c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 23 11:45:30 2012 -0700

    Fix resource management

commit c883b61503c8c256abb74857716fba1dd70a128b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 23 11:42:10 2012 -0700

    Ported codec-http to the new API
    
    - Added ChannelBufferHolders.catchAllBuffer()
    - Relaxed UnsupportedMessageTypeException constructor signature
    - EmbeddedChannel now uses the catchAllBuffer
    - ChanelInboundMessageHandlerAdapter.messageReceive() throws Exception
    - Added ChannelInboundStreamHandlerAdapter

commit 50b4894c36f92c431d0baea6aacd7ca335395421
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 23 09:49:03 2012 -0700

    Use ChannelInboundMessageHandlerAdapter

commit 7ecad7a8ac0badd515166b50029876332be735ff
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 23 09:47:38 2012 -0700

    Add ChannelInboundMessageHandlerAdapter

commit c37496311cd2fe2bd2bfcf7d70c4d697fa2455b4
Merge: 3a7ed4b 1a28d61
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Wed May 23 08:55:39 2012 -0700

    Merge pull request #361 from jpinner/spdy_3_master
    
    SPDY/3 Support

commit 1a28d6119fb5d2e77caae8674540f62a6b9043e1
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Wed May 23 08:54:11 2012 -0700

    SPDY: add SPDY/3 support

commit f60997686db58ab7623ddb15839d16169c59a702
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Wed May 23 08:53:29 2012 -0700

    SPDY: fix for mozilla firefox bug 754766

commit 69d5be4225085512aea5f9676d2f6ae105226c5c
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Wed May 23 08:52:50 2012 -0700

    SPDY: remove frame size limit in frame decoder

commit 3a7ed4b75cda8c3a7deefe2b8737a52370baa931
Author: Norman Maurer <norman@apache.org>
Date:   Wed May 23 15:12:04 2012 +0200

    Add workaround to let the sleep work correctly in windows too. See #356

commit a6685df3e2b60c6757fabf811a5dafe4f8f8aed3
Merge: 03f890a 71c1a25
Author: Norman Maurer <norman@apache.org>
Date:   Wed May 23 06:06:32 2012 -0700

    Merge pull request #359 from Massive-Dynamics/out-of-bounds-details
    
    Added messages to all IndexOutOfBoundsExceptions

commit 71c1a2575de2abd8ae106df2705e5901da93f271
Author: Cruz Julian Bishop <cruzjbishop@gmail.com>
Date:   Wed May 23 21:22:56 2012 +1000

    Added messages to all IndexOutOfBoundsExceptions
    
    I need to implement this to help myself finish more future pull requests which, so far, are plagued by these exceptions with no information available.

commit 03f890a882c3cc7eb11e08b0b5004827945fbe0b
Author: Norman Maurer <norman@apache.org>
Date:   Tue May 22 22:57:36 2012 +0200

    Only send event upstream once the Ssl handshake was completed successfull. See #358

commit ee4c1a55ebcc3ab4dd5a92dd809499f01aba05ca
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 22 10:57:59 2012 -0700

    Fix a compilation error

commit bd4358b3add80a2d3e9085006c65c6f298b522e7
Author: norman <norman@apache.org>
Date:   Tue May 22 09:51:45 2012 +0200

    Make sure the test also work on ipv6 interfaces

commit 128309367cd0c295947eb27b830c43639b9eb705
Author: norman <norman@apache.org>
Date:   Tue May 22 09:36:14 2012 +0200

    Also handle the case of missing shared lib for sctp

commit 0a95ce81045d96c0936604bfe3141bc4cf79e532
Author: norman <norman@apache.org>
Date:   Mon May 21 11:57:55 2012 +0200

    Fix checkstyle

commit 10cd871df7993ab4a3e247cb248115e998aa2459
Author: norman <norman@apache.org>
Date:   Mon May 21 11:48:52 2012 +0200

    Release the resources of the BossWorkerPool. See #328

commit ba4736f33b9c553d161b1e4e78d44a9eccd4e24d
Merge: 7018b84 327e434
Author: Norman Maurer <norman@apache.org>
Date:   Sun May 20 08:36:28 2012 -0700

    Merge pull request #350 from fredericBregier/master
    
    Change Executor to Timer from Netty, in reference to Issue #345 in master branch

commit 327e4349259d5b14d3b5265e7c536bb22ac8a762
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sun May 20 18:25:10 2012 +0300

    Fix checkstyle

commit 41c6aefdab40b5ee58c9974e432a8d3fbc780957
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sun May 20 18:21:14 2012 +0300

    Fix checkstyle

commit c634539faa81f9f551ca5beaf15243b6c34c3e0c
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sun May 20 18:20:21 2012 +0300

    Fix checkstyle

commit 8846947081b37a53f884961c33b6f126a2cbaaa3
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sun May 20 16:40:06 2012 +0300

    Same fix than in version 3.5 for Master branch (refer to issue #345)
    Will be proposed once the one in 3.5 will be validated

commit 792035cd3816536140463a6e683d084cafe3fcb8
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sun May 20 16:39:14 2012 +0300

    Same fix than in version 3.5 for Master branch (refer to issue #345)
    Will be proposed once the one in 3.5 will be validated

commit 3bd77e93f17439c00cd59f41eb7d310b0121b8a0
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sun May 20 16:38:21 2012 +0300

    Same fix than in version 3.5 for Master branch (refer to issue #345)
    Will be proposed once the one in 3.5 will be validated

commit 714e3d682eadfa2ad8ca2edc70e0076000ef038c
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sun May 20 16:37:34 2012 +0300

    Same fix than in version 3.5 for Master branch (refer to issue #345)
    Will be proposed once the one in 3.5 will be validated

commit 54c97d07202d98eac734beacf885579973b515b8
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sun May 20 16:36:45 2012 +0300

    Same fix than in version 3.5 for Master branch (refer to issue #345)
    Will be proposed once the one in 3.5 will be validated

commit baa33888593a131351798dd4de0f4f813adcdf1d
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun May 20 20:57:00 2012 +0900

    Make the default constructor of CombinedChannelHandler protected

commit 83f1b5fa35aa80852902e3bc623fb68fa97f6d3a
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun May 20 16:29:31 2012 +0900

    Implement spinning in SelectorUtil.select()
    
    - this seems to improve performance when the number of connections is
      very small

commit cab983244d85f91ed196a19c250fc63672086c0d
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun May 20 15:03:28 2012 +0900

    Tidy up AbstractChannel.read()

commit 3a8c10cc5ab530e41e93a0ad0df13d6b21752239
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun May 20 14:30:26 2012 +0900

    Do not call expandReadBuffer too often

commit af37ec4f23a54233d913f730761b779acf9ebff1
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun May 20 14:19:11 2012 +0900

    Ported the HTTP snoop example to the new API
    
    - Replaced pipeline factories with initializers
    - Ported essential parts related with HTTP to the new API
    - Replaced ChannelHandlerAdapter.combine() with CombinedChannelHandler
    - Fixed a bug where ReplayingDecoder does not notify the next handler
    - Fixed a bug where ReplayingDecoder calls wrong callDecode() method
    - Added a destination buffer as an argument to AbstractChannel.doRead()
      for easier implementation
    - Fixed a bug where NioSocketChannel did not try to increase the inbound
      buffer size (moved the logic to AbstractChannel)

commit e846505ceb4bac5bc9472ed141ffe950418c29c2
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun May 20 12:53:22 2012 +0900

    Add combined codec classes and related utility method

commit 7018b8453f0a910438dde28b327aa57b26e819fd
Author: Norman Maurer <norman@apache.org>
Date:   Sat May 19 17:10:52 2012 +0200

    Cleanup

commit 3d715a4967c992d30b3261eafcb6597cf19c6966
Merge: b6abefb 5e48c50
Author: Norman Maurer <norman@apache.org>
Date:   Sat May 19 17:08:59 2012 +0200

    Merge branch 'master' of github.com:netty/netty

commit b6abefb5b803c82c0fd85409f614fc45d10eaba9
Author: Norman Maurer <norman@apache.org>
Date:   Sat May 19 17:08:45 2012 +0200

    Add a replace(..) method to FrameDecoder and also to ReplayDecoder as it now extend FrameDecoder. This also fix #332

commit 5e48c50589bb63f354f393ffea76de498d1bbf15
Merge: 3ca2a53 bc540d5
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sat May 19 07:56:38 2012 -0700

    Merge pull request #346 from fredericBregier/master
    
    Proposal to fix 1rst issue presented in #345

commit 3ca2a53e91b4a56f632f592ee266bc8119b1ebbd
Author: Norman Maurer <norman@apache.org>
Date:   Sat May 19 16:35:22 2012 +0200

    Add a replace(..) method to FrameDecoder and also to ReplayDecoder as it now extend FrameDecoder. This also fix #332

commit bc540d5ee1b1c865bc442d08d3991a800180ca5c
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sat May 19 14:59:52 2012 +0300

    Proposal for fix related to 1rst issue of #345
    
    => in configure (newcheckInterval/10)*10
    (see http://www.javamex.com/tutorials/threads/sleep_issues.shtml)

commit 2320a5919f49c9e5705215b4273db291ea40d1ff
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sat May 19 14:54:59 2012 +0300

    Proposal for fix related to 1rst issue of #345
    => (getTimeToWait /10)*10
    (see http://www.javamex.com/tutorials/threads/sleep_issues.shtml)

commit ed538209e588e8ba7e94371a801067d73eb2ab74
Author: Norman Maurer <norman@apache.org>
Date:   Sat May 19 13:19:24 2012 +0200

    Fix syntax. See #342

commit 7691d79de61e7b96a325bb1706544b186f97be31
Merge: 3d49975 ddb7d75
Author: Norman Maurer <norman@apache.org>
Date:   Sat May 19 03:43:35 2012 -0700

    Merge pull request #342 from jpinner/ssl_buffer_pool_interface
    
    Make SslBufferPool an interface

commit ddb7d75c96806b0bac1fea3d8a17b8a9c982a18d
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Fri May 18 13:44:23 2012 -0700

    Make SslBufferPool an interface

commit 3d49975a3cc87cd263d479b0e0b6281dcd51ae50
Merge: bca791a e54662f
Author: Norman Maurer <norman@apache.org>
Date:   Fri May 18 12:41:57 2012 -0700

    Merge pull request #339 from fredericBregier/master
    
    Fix compile errors which were introduced by #338

commit e54662f7d0c31c4679ea0e06cc00464ca7978bfc
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Fri May 18 16:38:13 2012 +0300

    Same fix than other for correct import

commit a5fc2d82a5f1eddf6efd20219bd9bc9905fcb9c4
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Fri May 18 16:37:46 2012 +0300

    Same fix than other for correct import

commit bca791af4c5b55c1e0daf7847704039b12ff7e0a
Author: norman <norman@apache.org>
Date:   Fri May 18 15:13:13 2012 +0200

    Fix compile errors which were introduced by #338

commit e5da7b53ddea65d96683be7ea8b7e8590647ce92
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 18 21:59:02 2012 +0900

    Add UnsupportedMessageTypeException
    
    - Replaced some IllegalArgumentExceptions with
      UnsupportedMessageTypeException
    - MessageToMessage(Encoder|Decoder) should continue polling the
      inbound buffer if encode() or decode() returns null
      - aggregating codec can do that

commit ba8cfa5d3399f6a164d67ee62281768c8c6df477
Merge: 88d60c1 1afb209
Author: Norman Maurer <norman@apache.org>
Date:   Fri May 18 05:45:20 2012 -0700

    Merge pull request #338 from fredericBregier/master
    
    Improvement: Allow ObjectSizeEstimator in traffic shaping

commit 1afb209010d7db97f2bc76fdad44ff8ca569c755
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Fri May 18 15:33:23 2012 +0300

    import fix

commit 9c2262716fdcb6fdfee1893c496d76159441621d
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Fri May 18 15:32:59 2012 +0300

    Import fix

commit 51debe12873fd2f08c8e7443d882219e2ef162b7
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Fri May 18 15:32:36 2012 +0300

    import fix

commit 7d4a276ab096d6bd892844a66f02c06218fd480d
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Fri May 18 15:26:21 2012 +0300

    Fix private class to static private class (dynamicity is not necessary there)

commit a1a60ec5b6d585e1503061f8435be27fd269d5db
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Fri May 18 15:23:11 2012 +0300

    Add support for ObjectSizeEstimator

commit 0996bac7fffc2a4d0e68d05149b8af6ae2ed42f1
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Fri May 18 15:20:46 2012 +0300

    Add support for ObjectSizeEstimator: in order to allow special optimization if possible from user code

commit 923498de92804a7e41caf13db97475f5e8cbc5a1
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Fri May 18 15:17:02 2012 +0300

    Add support for ObjectSizeEstimator

commit 9d3eeb971988d7b93d186e6596803914cfac0f35
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 18 17:50:38 2012 +0900

    Fix compilation errors

commit ddb839eaf99b45619bf95fe115f63c4d196e0129
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 18 17:38:44 2012 +0900

    Make ReplayingDecoder extend StreamToMessageDecoder

commit d4a26c3c52f11b92f2f321f909777b0ae21b8054
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 18 17:37:41 2012 +0900

    Add StreamToMessageDecoder.replace() (#332)

commit ca12e41406db5e200d442b3187ac2c2afa320d8f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 18 16:58:40 2012 +0900

    Fix a compiler warning

commit 5c3b432f600765a143bdb82aa35243c8d6e8d96f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 18 15:45:12 2012 +0900

    Fix test failures due to recent changes with codec exceptions

commit 2802b231e532ccfb2b799a59da67baab7198d3ac
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 18 15:42:36 2012 +0900

    Make all codecs throw a CodecException
    
    - Added CodecException which is either EncoderException or
      DecoderException
    - Made all decoder exceptions a subtype of DecoderException
    - Replaced CodecEmbedderException with CodecException
    - All abstract handlers wraps an exception with a CodecException

commit 88d60c15c7f44c924dc0afd88c6654086b4ad14c
Author: norman <norman@apache.org>
Date:   Fri May 18 08:12:42 2012 +0200

    Make all methods of SslBufferPool public so a subclass can be placed in another package. See #336

commit d2ec45e57315a3146f1499d20bdfc724c4215422
Author: norman <norman@apache.org>
Date:   Fri May 18 08:11:45 2012 +0200

    Use the correct ChannelBufferFactory when creating new ChannelBuffers. See #335

commit a99f2589842ef2c010df2d304a084dd40c9c36d3
Author: norman <norman@apache.org>
Date:   Fri May 18 08:10:34 2012 +0200

    Make sure SslHandler also works if SslBufferPool use non heap ByteBuffers. See #329

commit 251a18160c2d473a1009f78b42aaf159d8d011ea
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 18 14:34:42 2012 +0900

    Move VoidEnum to util

commit dbd973d825c3f0c781fbffb82bb1ebe1ab5380be
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 18 14:30:42 2012 +0900

    Introduce UniqueName, UniqueKey, and Signal
    
    - UniqueKey removes the duplication between ChannelOption and
      AttributeKey
    - UniqueName provides common name collision check for AttributeKey,
      ChannelOption, and Signal.
    - Replaced ReplayError with Signal

commit 5344dc242c8dfbfc93d71f8b39d2c2eb218f6ecb
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 17 16:38:25 2012 +0900

    Finish porting the codec package to the new API
    
    - Removed deprecated classes
    - Changed type parameter of StreamToMessageDecoder and
      MessageToMessageDecoder for more flexibility
    - Made all tests in the codec package pass

commit 1bf0dfe64a592f21eee7714fda6d091e7b8c5dbc
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 17 12:37:37 2012 +0900

    Retrofit ReplayingDecoder with the new API
    
    - Moved up to 'codec' from 'codec.replay'
    - Test passes with Redis client codec

commit 2c99fda7b57123a4df03c6fa6e1e1f7a76337285
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 16 23:07:19 2012 +0900

    Remove unnecessary field

commit d3a3b329f3207b3523ebc82af2fc406f167100a5
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 16 23:05:58 2012 +0900

    Fix a compilation error

commit 3669e31e14210462a9202175284b0513daf59eb8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 16 23:03:11 2012 +0900

    Fix a compilation error in DefaultChannelPipeline

commit 92a688e5b2938b7251441335a657df36bb5e9eea
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 16 23:02:06 2012 +0900

    Retrofit the codec framework with the new API (in progress)
    
    - Replaced FrameDecoder and OneToOne(Encoder|Decoder) with:
      - (Stream|Message)To(String|Message)(Encoder|Decoder)
    - Moved the classes in 'codec.frame' up to 'codec'
    - Fixed some bugs found while running unit tests

commit ef384a7b2181a79fcc1e44401aab55f13cd69099
Author: norman <norman@apache.org>
Date:   Wed May 16 13:00:49 2012 +0200

    Add JBoss Marshalling Encoder/Decoder. See #324

commit 52a7d28cb59e3806fda322aecf7a85a6adaeb305
Author: norman <norman@apache.org>
Date:   Tue May 15 13:59:33 2012 +0200

    Make sure CompositeChanneBuffer does not throw a UnsupportedOperationException if discardReadBytes() discard the whole content of the buffer. See #325

commit 894ececbb76a31327fed33bf2d8eda5aa43ba333
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 15 17:14:02 2012 +0900

    Convert DOS line ending to UNIX line ending

commit dd2e36e5d9daee75680a52ecab1d39e38bde6b07
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 15 17:10:54 2012 +0900

    Remove unused or unmaintainable internal classes

commit 957c04e597ba47ce301a5aab98ed57be4a967f95
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 15 14:49:23 2012 +0900

    Fix boundary check in DefaultChannelPipeline.addFirst(..)
    
    - Thanks @normanmaurer

commit e16c835780193bde31ca62fd491a4870a03f8d23
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 15 14:16:27 2012 +0900

    Simplify the echo client example

commit 6eb540ca402496a022b8c169068904a9e2a6c19d
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 15 14:08:42 2012 +0900

    Add more convenient methods to ChannelPipeline
    
    .. to simplify pipeline construction as shown in the echo example

commit d01d1d08434ce0a8e421243f67582a8928e12d67
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 15 13:45:25 2012 +0900

    Rename (Server)ChannelBuilder to (Server)ChannelBootstrap
    
    - It does not build a new Channel but just helps bootstrapping it.
    - Added shutdown() method for simpler deinitialization
    - ServerChannelBootstrap has shorter method names for the parent channel

commit 128851dd091ed62bfa864b0b91cd0826cfcff3b3
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 15 13:18:46 2012 +0900

    Bump up the backlog value

commit f00fadb9fde1b081dfe4336f9ee47ecc5fc0e4de
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 15 13:11:47 2012 +0900

    Simplify the construction of multi-threaded selector event loop
    
    - Hide InternalLogger from users

commit 311f17f6ef7df7130120f090a4a2cc1856416c33
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon May 14 23:57:23 2012 +0900

    Replace Bootstrap with ChannelBuilder and ServerChannelBuilder
    
    - Added ChannelInitializer which is supposed to be used with the
      builders
    - Echo examples use ChannelBuilder and ServerChannelBuilder now
    - Replace ChannelFuture.rethrowIfFailed() with sync*()
    - Bug fixes

commit 18d1861243fe43d60843fd2e87ea16bc3c0fae32
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon May 14 23:09:13 2012 +0900

    Remove duplicate groupId

commit 9f6cc0a0d28cd3ebd456c5cf3cff39a974979ccc
Author: norman <norman@apache.org>
Date:   Mon May 14 07:32:52 2012 +0200

    Fix checkstyle errors

commit 05f955ee10015234d1103a1bf96abc9fd6fa930a
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon May 14 14:17:40 2012 +0900

    Clean up echo example / Fix a bug where closeFuture is not notified

commit 6a0040a14ecd316a50832d1848c03d3b476eae59
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun May 13 18:45:57 2012 +0900

    Fix compilation errors

commit 3642879d9804126a4230175991df734a386e0788
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun May 13 05:09:05 2012 +0900

    Move up write spinning from SelectorEventLoop to AbstractChannel

commit ddd2f22fcc76ddb7ae13b9d64a6d57f61528da80
Merge: d56aa76 b09962f
Author: Norman Maurer <norman@apache.org>
Date:   Sat May 12 12:56:13 2012 -0700

    Merge pull request #321 from veebs/WsSubprotocol
    
    Fixed websocket bug where subprotocol not sent by client (master)

commit 6d14fac99c99c991e3ef17d2ea00724610682795
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun May 13 01:37:16 2012 +0900

    Revive Channel.closeFuture
    
    - ChannelPipeline now rejects an unsafe ChannelFuture, so there's no
      need to hide/remove closeFuture.

commit 175acb7899cbdb88be7b33a3b0be56934f9b24c9
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun May 13 01:35:43 2012 +0900

    Prevent unsafe ChannelFutures from being passed to a pipeline

commit 91c02c282389555f5775624909cdcedace8ab0bc
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun May 13 00:40:52 2012 +0900

    Improve AttributeKey.toString()

commit 08137e2c49a030a8dedb511af14f779e12b5f6a0
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun May 13 00:40:28 2012 +0900

    Implement flush-future properly / Make channel options type-safe
    
    - AbstractChannel keeps the expected number of written bytes so that
      the ChannelFuture of a flush() operation is notified on right timing.
      - Added ChannelBufferHolder.size() to make this possible
    - Added AbstractChannel.isCompatible() so that only compatible EventLoop
      is accepted by a channel on registration
    - Added ChannelOption to make channel options type-safe
    - Moved writeSpinCount property to ChannelConfig and removed Nio*Config
    - Miscellaneous cleanup
    
    introducing
    ChannelOption

commit b09962f4c26c5231523584f82fc6cf86fb687970
Author: vibul <vibuli@gmail.com>
Date:   Sat May 12 21:22:33 2012 +1000

    forgot 1 more change

commit abd10d9089bb40dc75b067bdfe90a9befbfbe694
Author: vibul <vibuli@gmail.com>
Date:   Sat May 12 21:05:15 2012 +1000

    Fixed bug where subprotocol not sent by client

commit 95f05ae2158f09af7da7ec17445e720071a521d8
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat May 12 08:32:43 2012 +0900

    Uncomment logging in EchoClient

commit efe7fd953987fba670c6e7c7c2d213512e5ed5a5
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat May 12 08:31:55 2012 +0900

    Uncomment logging in EchoServer

commit 7a5f4721b9f6e5c9e9194167955d767c4e8655f4
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat May 12 08:31:13 2012 +0900

    Optimize LoggingHandler using lookup tables

commit c57d7dd0987fc440a0f5a589b86db5d0ad82f910
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 11 21:47:07 2012 +0900

    Add EventLoopFactory and make MultithreadEventLoop use it
    
    - based on the feed back from @normanmaurer

commit 97c07708a288ced04e2476914169005054654ea8
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 11 21:36:47 2012 +0900

    Remove unused class

commit 1db0cd60c40aba95cc7c9a0e564ea121410ccb15
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 11 21:26:54 2012 +0900

    Do not attempt to flush when waiting for OP_WRITE

commit 4b673c4ebb759ac070bca4741cef45d737398af1
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 11 21:19:19 2012 +0900

    Fix infinite loop while handling a client socket / Retrofit EchoClient

commit b4610acda15f86b5027d44be5f72aad674f6ab71
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 11 20:44:00 2012 +0900

    Implement connect timeout
    
    - Merged ClientChannelConfig back to ChannelConfig
    - AbstractChannel handles connect timeout making use of
      EventLoop.schedule()

commit 83026f29a41f6f1feb4047ea51d390738674e1a8
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 11 20:19:57 2012 +0900

    Make EventLoop a ScheduledExecutorService
    
    - SingleThreadEventLoop now implements ScheduledExecutorService
      - Scheduled tasks are automatically fetched into taskQueue by
        pollTask() and takeTask()
    - Removed MapBackedSet because Java 6 provides it

commit a4678a603090d25302dcf09b77d4cc6d044302d3
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 11 11:01:44 2012 +0900

    Close all channels when SelectorEventLoop shuts down
    
    - Also removed a FIXME which was fixed already

commit f6d6d1282cc466676d21c49eda6a6ddb5b254296
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 11 10:47:45 2012 +0900

    Simplify AbstractChannel.toString()

commit 21348481111a34b80fc2b6b19f2c39181aa65fa1
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 11 09:00:35 2012 +0900

    Ensure the specified future has the correct channel / Cleanup

commit cb718a07c82c6a50821ae0eb805983bb8ec8b3e5
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 11 00:57:42 2012 +0900

    Move ChannelFutureFactory.newVoidFuture() to Channel.Unsafe() / Cleanup

commit d02bc1c0d35ad0024a1d9e0fc7fee2465d378814
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 11 00:46:51 2012 +0900

    Log outbound buffer
    
    - Use uppercase names for outbound events

commit d5b52077feddc118b2d4313ff41b8f57fc8626d8
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 11 00:39:44 2012 +0900

    Remove hexdump option in LoggingHandler and dump always
    
    - Allow a user override the log message instead
    - Prettier hex dump

commit da9ecadfc081b86a08bc3dd65db91065209676fd
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 10 23:19:59 2012 +0900

    Introduce bypass buffer and use it in LoggingHandler
    
    - Added ChannelBufferHolders.(inbound|outbound)BypassBuffer()
      - The holder returned by these methods returns the next handler's
        buffer.  When a handler's new(Inbound|Outbound)Buffer returns
        a bypass holder, your inboundBufferUpdated() and flush()
        implementation should check if the buffer is a bypass and should not
        modify the content of the buffer.
    - Channel(Inbound|Outbound)?HandlerAdapter is now abstract.
      - A user has to specify the exact inbound/outbound buffer type
      - It's because there's no way to determine the best buffer type
    - Implemented LoggingHandler using the new API.
      - It doesn't dump received or sent messages yet.
    - Fixed a bug where DefaultUnsafe.close() does not trigger deregister()
    - Fixed a bug where NioSocketChannel.isActive() does not return false
      when closed

commit 532672deaef79b12f8172f67e071db275a9a5a0c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 10 21:56:10 2012 +0900

    Fix unnecessary application of Math.abs()

commit d56aa76911fcc5f10f62263a3ccc6023b1d69ca4
Author: norman <norman@apache.org>
Date:   Thu May 10 10:06:38 2012 +0200

    Revert "Set source java version to 1.7 where needed. See #312" as it breaks the build
    
    This reverts commit d62977b061d3ccadc89a336533605f984771d09e.

commit d62977b061d3ccadc89a336533605f984771d09e
Author: norman <norman@apache.org>
Date:   Thu May 10 08:09:31 2012 +0200

    Set source java version to 1.7 where needed. See #312

commit b4764f61646ad56383eb884a6ca6e562b458aa65
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 9 23:42:01 2012 +0900

    Fix infinity loop and timing issues
    
    - Made sure unnecessary interestOps are not OR'd
    - Fixed a bug where DefaultChannelFuture.rethrowIfFailed() returns
      silently if the future is not done yet - there's no ways to tell
      the differences between failure and incompleteness.

commit 129a2af86adda8631eee2a5fe3c2b442a223a724
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 9 22:09:06 2012 +0900

    Initial working version of the echo server example
    
    - Optimized AbstractChannelBuffer.discardReadBytes()
    - Split ChannelHandlerInvoker into ChannelInboundInvoker and
      ChannelOutboundInvoker
      - Channel implements ChannelOutboundInvoker
      - ChannelOutboundInvoker.nextOut() is now out()
      - ChannelOutboundHandlerContext.out() is now prevOut()
      - Added the outbound operations without future
        parameter to ChannelOutboundInvoker for user convenience
    - All async operations which requires a ChannelFuture as a parameter
      now returns ChannelFuture for user convenience
    - Added ChannelFutureFactory.newVoidFuture() to allow a user specify
      a dummy future that is of no use
      - I'm unsure if it is actually a good idea to introduce it. It might
        go away later.
    - Made the contract of AbstractChannel.doXXX() much simpler and moved
      all common code up to AbstractChannel.DefaultUnsafe
    - Added Channel.isOpen()
    - Fixed a bug where MultithreadEventLoop always shut down its child
      event loops on construction
    - Maybe more changes I don't remember :-)

commit 27358352ac7722cc907f3d86ec0c5bd8e7d8a04d
Author: norman <norman@apache.org>
Date:   Wed May 9 07:49:18 2012 +0200

    Make sure all MultiCast configuration settings are possible with NIO. See #313

commit 2cd6386a373d1441f12fd00418f104d43d41186f
Author: norman <norman@apache.org>
Date:   Wed May 9 07:45:40 2012 +0200

    Make sure all MultiCast configuration settings are possible with NIO. See #313

commit 4b1721af17ec1a4e52d96e83d1fbfaa851b1de0b
Author: Norman Maurer <norman@apache.org>
Date:   Sun May 6 21:50:15 2012 +0200

    Fix regression in ChunkedWriteHandler. See #310

commit c24eafed480a78ccbf65ad3751529cfd7f89bd45
Author: norman <norman@apache.org>
Date:   Fri May 4 14:36:30 2012 +0200

    MemoryAwareThreadPoolExecutor needs to notify ChannelFuture's of the queued ChannelEventRunnable on shutdownNow(). See #309

commit 21a61ce632047e30daf3f5efcc6900b42cd5651b
Author: norman <norman@apache.org>
Date:   Fri May 4 13:56:34 2012 +0200

    Make sure the ChannelFuture's of the MessageEvent's are notified on channelClosed(..) event and on removal of the handler from the ChannelPipeline. See #308

commit d509425b9013af0aefcd2392547d445406b600d9
Author: norman <norman@apache.org>
Date:   Fri May 4 13:49:22 2012 +0200

    Make sure we fire the event from the io-thread. See #306

commit 781e628dd8eae7ec97d030c72d645ea7ebcd227d
Author: norman <norman@apache.org>
Date:   Fri May 4 13:23:32 2012 +0200

    Let ChannelLocal implement Iterable. See #307

commit ec28cc8ba15d2890e11c93651b68618fc5fa7081
Author: norman <norman@apache.org>
Date:   Fri May 4 10:31:06 2012 +0200

    Refactor ChunkedWriteHandler to remove synchronization which can have bad side effects like deadlocks. See #297 and #301

commit 7016b83629ac8ad734b896e4ee34c44cd4dc3788
Author: norman <norman@apache.org>
Date:   Fri May 4 10:28:57 2012 +0200

    Add @Override annotations

commit d3c137923f246130d2f34a474c8117c7734245c6
Author: norman <norman@apache.org>
Date:   Fri May 4 10:27:58 2012 +0200

    Notify ChannelFuture's of queued writes if the SslHandler gets remove d from the ChannelPipeline. See #306

commit bc6948c3979503404adec190f46ae2bd55006379
Author: norman <norman@apache.org>
Date:   Fri May 4 10:26:25 2012 +0200

    Fail all queued writes if the ChunkedWriteHandler is removed from the ChannelPipeline. See #304

commit 2174ce36280e2369e7efca3eae49ef623170084f
Author: norman <norman@apache.org>
Date:   Fri May 4 10:24:28 2012 +0200

    Fail all pending writes on channelClosed(..). See #305

commit f023120a62ce756280c6a9d1e6525ca3070b583d
Author: Norman Maurer <norman@apache.org>
Date:   Thu May 3 17:15:03 2012 +0200

    Allow to register ChannelFutureListener's that get notified once the inbound of the SSLEngine is closed. See #137

commit fb52b8a3b2e3940a0bcf6e9167b157d59a811691
Author: norman <norman@apache.org>
Date:   Thu May 3 09:24:36 2012 +0200

    Make sure ChunkedInput.close() is not called before the write is complete. See #303

commit 607d784e5eb6dd73abccb3a4f42e8cc7cd7dd4bc
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 2 21:05:53 2012 +0900

    Retrofit/overhaul the NIO transport with the new API
    
    - Remove large portion of code thanks to the new API
    - SocketChannel implementations are instantiated without factories
    - Retrofit the existing code with the new API

commit 4e528c10fae3abaa932e751c831aa48a23645744
Author: Norman Maurer <norman@apache.org>
Date:   Wed May 2 13:15:28 2012 +0300

    Fix small race which can lead to resumeTransfer() to not kick in. See #300

commit cc0d7d8be50bd59c369529305228c328b561993f
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Wed May 2 12:35:36 2012 +0300

    typo fix! sorry

commit 62f5623d2af2a5bbbfcfc51cbde19929c35de81f
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Wed May 2 12:33:40 2012 +0300

    typo fix ! Sorry

commit 51415ca3ee88d8b9bfeb837e98eb106fb765764f
Merge: 202df06 d475a8c
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Wed May 2 01:41:54 2012 -0700

    Merge pull request #296 from fredericBregier/master
    
    Very small fix on skipControlCharacters

commit d475a8cc64613c54c9e3318710a94f38334ac34c
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Wed May 2 11:40:28 2012 +0300

    Very small fix (readUnsigned while in optimized version it was signed but should be unsigned)

commit 9e6f8b46df8cd067306e2f563e2d35e3180f8821
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 2 15:01:58 2012 +0900

    Retrofit the NIO transport with the new API / improve the new API
    
    - Remove the classes and properties that are not necessary anymore
    - Remove SingleThreadEventLoop.newRegistrationTask() and let
      Channel.Unsafe handle registration by itself
    - Channel.Unsafe.localAddress() and remoteAddress()
      - JdkChannel is replaced by Channel.Unsafe.

commit 202df0618c5ba7c58a0e4ef8e4f9ac76c8a32a46
Author: norman <norman@apache.org>
Date:   Wed May 2 07:39:02 2012 +0200

    Remove workaround for ipv6 link-localaddresses as it not work on most os / jdk versions. See #267 and #295

commit 5dda9d1840a1ab9416cd7420a962680d9ac50294
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 2 14:07:50 2012 +0900

    Retrofit the socket channel API with the new API

commit 3edef63fa851317bd1920bfe7c733320f8365b43
Merge: b2e77be 502e469
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Tue May 1 10:13:42 2012 -0700

    Merge pull request #294 from fredericBregier/master
    
    For Improvement Issues #290 and #290, plus the defect issue #291

commit e65e496fc09157d51be573a19cbb1eecd678e49c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 1 23:19:31 2012 +0900

    Clear Channel.eventLoop on deregistration

commit 1356a0b61e883fff783f2f413f9282314110da98
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 1 23:18:29 2012 +0900

    Replace Channel.Unsafe.setEventLoop() with register()
    
    - Added AbstractChannel.doRegister()

commit b2e77beb4603d9df613f23ff02f74944edc94f1f
Author: Norman Maurer <norman@apache.org>
Date:   Tue May 1 12:00:36 2012 +0200

    We need to set the exception on each MessageEvent. See #293

commit a83b9704faa4a75805c3b6912b58b2aff5c5fc97
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 1 18:31:17 2012 +0900

    Make sure ChannelFutureListeners are invoked from an event loop thread

commit 0682421ce1e48c5009570e857385e1e280aa0dd3
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 1 18:23:59 2012 +0900

    Remove unused classes
    
    - ChannelPipelineFactory will be replaced with sometime else when I
      refactory the bootstrap package
    - FileRegion is going away.  A user can deregister a channel and perform
      such operations by him/herself.  If this turns out to be too
      difficult, I'll introduce a new 'sendfile' operation to the outbound
      handler.

commit 1b5960a1a8581a3e8a6fdc19d120ef6c05b93702
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 1 18:17:12 2012 +0900

    Add ClientChannelConfig and move connectTimeoutMillis there

commit f4423ac555907cc5352a7aa07ba6657753302eee
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 1 17:53:38 2012 +0900

    Remove unused configuration properties and their related classes

commit c34d63d159e11f493ee2e1a751eb6146fb209727
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 1 17:49:41 2012 +0900

    Fix compilation errors in ChannelGroup and its related types
    
    - Also removed the operations not valid anymore

commit 825d7964c9d1afcc07668311aafa582e337edcab
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 1 17:48:06 2012 +0900

    Add ChannelFutureFactory & removeClosureListener()
    
    - Channel and ChannelHandlerContext extends ChannelFutureFactory.
    - Added Channel.removeClosureListener()

commit 368156f5d0f3fd59146fe37f874cf77abe307ee7
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 1 17:19:41 2012 +0900

    Another round of the new API design
    
    - Channel now creates a ChannelPipeline by itself
    
      I find no reason to allow a user to use one's own pipeline
      implementation since I saw nobody does except for the cases where a
      user wants to add a user attribute to a channel, which is now covered
      by AttributeMap.
    
    - Removed ChannelEvent and its subtypes because they are replaced by
      direct method invocation.
    - Replaced ChannelSink with Channel.unsafe()
    - Various getter renaming (e.g. Channel.getId() -> Channel.id())
    - Added ChannelHandlerInvoker interface
    - Implemented AbstractChannel and AbstractServerChannel
    - Some other changes I don't remember

commit 502e469c45fc7dff596c3f0441db712a771f5a11
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Tue May 1 00:18:42 2012 +0300

    Add Exception to the exception class name

commit 1bf17c7c87769c803e0af21d37bc6b93f6d96ecd
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Tue May 1 00:14:42 2012 +0300

    Add Exception to name of the Exception ;-)

commit 2a70df1c1c62f66336c4a497a2fb5c5829782e3f
Author: Norman Maurer <norman@apache.org>
Date:   Mon Apr 30 20:26:44 2012 +0200

    Optimize AbstractNioWorker.cleanUpWriteBuffer(..). See #293

commit 675bccc9eabbf10f665ae9f078ba6e15f711af87
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Mon Apr 30 13:06:53 2012 +0300

    Update codec-http/src/main/java/io/netty/handler/codec/http/HttpPostRequestDecoder.java

commit a52439647562f842ec2dd8a70427bd8af6e30e87
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Mon Apr 30 13:02:46 2012 +0300

    Optimize Buffer access while decoding by going through backend array when possible (divide by almost 2 the time spent in decoding)

commit c83323f7484b094e8bee993154325d73dd19e11f
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Mon Apr 30 12:38:07 2012 +0300

    Add the SeekAheadOptimize class to enable faster seek of bytes values in HttpPostRequestDecoder

commit d9085e9e37669624f1e716023cd91e6aeadd3c64
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Mon Apr 30 12:33:10 2012 +0300

    Fix in addContent when switching from MemoryAttribute if it is done when last buffer added, in order to not close immediately the underlying file before adding the last buffer.

commit a410cb243b875890d96f64db5976a90e9e8295fc
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Mon Apr 30 12:32:24 2012 +0300

    Fix in addContent when switching from MemoryAttribute if it is done when last buffer added, in order to not close immediately the underlying file before adding the last buffer.

commit 877383de3a518dd0dac56eba7337932dd55f59ec
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Mon Apr 30 12:30:08 2012 +0300

    Move force() after multiple writes, not at every steps

commit 65876fa7fbe2f63a73a590b5f2583daecf63984f
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Mon Apr 30 12:29:05 2012 +0300

    Close channel when needed and optimize force() position after multiple writes not at each step

commit 0f42719e9b05f2286964e1b5340fc2ac17c278dc
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Apr 29 23:08:59 2012 +0900

    Add DefaultAttributeMap

commit f57ef3d4148d2114aa983bc9baa6f71c06129987
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Apr 29 21:51:12 2012 +0900

    Add ChannelBufferHolder.toString()

commit 3804f3cbbbeee86bf6d0b32da3dd32a816e00e32
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Apr 29 20:40:58 2012 +0900

    Remove ChannelLocal (deprecated)

commit 447545bb191969ffb7a15d950ef698b2f81604a0
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Apr 29 18:49:44 2012 +0900

    Remove the methods related with half-close

commit 470e7da5d7963745e4b4f86c09ff2485bb782d70
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Apr 29 18:40:55 2012 +0900

    Add MultithreadEventLoop
    
    - Add EventLoopException to wrap the exceptions while an event loop does
    something
    - Make EventLoop.register() return EventLoop so that the caller knows
    the actual EventLoop that will handle the Channel even if the caller
    called register() from MultithreadEventLoop

commit e76e2aeac80d883383ec672e628fac10c85947cc
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Apr 29 17:59:42 2012 +0900

    Add missing @Override annotation

commit cdd1ba93f052e770beabe3d56c00480a49fc6f35
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Apr 29 17:53:50 2012 +0900

    Second round of new channel handler API design
    
    - Rename ChannelReader to ChannelInboundHandler
    - Rename ChannelWriter to ChannelOutboundHandler
    - Introduce ChannelBufferHolder instead of adding the common super type
      of message buffers and byte buffers
      - This is more type-safe and natural.
    - Remove the notification methods for buffer closure (might add back
      later when revisiting half-closed connection support)

commit 94b10d2d02d4a4fa0bd781caa5dcc40b1a4f72b7
Author: norman <norman@apache.org>
Date:   Fri Apr 27 07:47:37 2012 +0200

    Remove volatile on two fields that don't need it

commit dcd2a10f95d0f3f30e1167330c0689da46629839
Author: norman <norman@apache.org>
Date:   Fri Apr 27 07:39:26 2012 +0200

    Remove @deprecated constructor. See #283

commit 9f2c454ab713c6685329f548f38f230ac6eaa6f4
Merge: e61a9ce 40e9b96
Author: Norman Maurer <norman@apache.org>
Date:   Thu Apr 26 22:38:06 2012 -0700

    Merge pull request #284 from veebs/WsMaxFrameLength
    
    Issue #283 - (master) Support max frame length for web socket to limit chance of DOS attack

commit 40e9b96764d47465835ef3b23f28c5fe38cdd604
Author: vibul <vibuli@gmail.com>
Date:   Fri Apr 27 10:43:34 2012 +1000

    We need to keep the old constructor to not break the API.

commit e61a9ce7c17011a9b2b052a31207191eba543266
Author: Norman Maurer <norman@apache.org>
Date:   Thu Apr 26 16:30:46 2012 +0300

    Make sure netty detects the right java version when running on android. See #282

commit 9d555b0b97618c8bdee03a7fa20b3c0f1e8321dc
Author: norman <norman@apache.org>
Date:   Thu Apr 26 14:53:31 2012 +0200

    OioWorker failed to fire channelConnected event for OioAcceptedSocketChannel which is fixed now. This also fix a race which can could lead to missing events. See #287

commit 6009a413b910940c551c209cda057f50823f4e76
Author: vibul <vibuli@gmail.com>
Date:   Thu Apr 26 10:09:12 2012 +1000

    Issue #283 - Support max frame length for web socket to limit chance of DOS attack

commit a8b9e27c92682dd59135622df15005d6ab0b8c09
Author: norman <norman@apache.org>
Date:   Wed Apr 25 09:24:51 2012 +0200

    NioDatagramWorker.ChannelRegistionTask should handle ClosedChannelException gracefully. See #281 and #277

commit 476cf97b9789e587e46d87b4798927ee8df2a2bc
Author: Norman Maurer <norman@apache.org>
Date:   Tue Apr 24 20:41:10 2012 +0200

    Make the cumulation usage more memory efficient. See #280

commit 6e2e9fb3c5e2d79c37cc618549aa4b7fe51499b4
Author: Norman Maurer <norman@apache.org>
Date:   Tue Apr 24 20:32:06 2012 +0200

    Use gathering writes if java version is >= 7 . See #269 and #271

commit 77d2f9c4ef5ae5070123cee4bca9870ff5f4c5fa
Author: Norman Maurer <norman@apache.org>
Date:   Sun Apr 22 12:56:37 2012 +0200

    Upgrade and Connection header must be matched in a case-insensitive manner in WebSocket 08 and 13. See #278

commit 980d96cf581493124028bb60cc4dc213c3f2737e
Author: Norman Maurer <norman@apache.org>
Date:   Sat Apr 21 16:12:08 2012 +0200

    Fix possible NPE. See #274

commit 5f6b419bb92ec2c98d4b149f2a8a3f2a056ef0c9
Author: Norman Maurer <norman@apache.org>
Date:   Sat Apr 21 16:00:23 2012 +0200

    Allow to specify the local address when connect. See #276

commit ccf01d133a031f69346d1479e5eb29547d09afeb
Author: Norman Maurer <norman@apache.org>
Date:   Fri Apr 20 20:17:30 2012 +0200

    Make sure we always cleanup once ReplayingDecoder handles a message. See #259

commit ec409751e109256bd872c0d80c4ab1cbafc1a6de
Author: Norman Maurer <norman@apache.org>
Date:   Thu Apr 19 16:42:55 2012 +0200

    Correctly handle the stripping of the zoneId / scopeId in all cases. See #267

commit 2ecef07c4a5b1a2d302e7ad5adae9b828370234d
Author: Norman Maurer <norman@apache.org>
Date:   Thu Apr 19 12:07:17 2012 +0200

    Allow to disable the use of sun.misc.Unsafe via a System property. See #272

commit e719f23f7d3b2fca265ddb7fedef2e35e64d4594
Author: Norman Maurer <norman@apache.org>
Date:   Thu Apr 19 12:03:09 2012 +0200

    Only log if logging level is enabled

commit 54559a95956ba26bd75790fad04f7057fe0f6674
Author: Norman Maurer <norman@apache.org>
Date:   Tue Apr 17 20:54:58 2012 +0200

    Make it configurable if the HttpClientCodec should throw an exception on close when the response and request count does not match. Default is false. See #266

commit d808cd04757136c3ea2180e2c5e13dc509f5a2d0
Author: Norman Maurer <norman@apache.org>
Date:   Tue Apr 17 20:54:38 2012 +0200

    Fix compile error

commit b3b5fb1de66fd1290015998d7d4d836bce3e8594
Author: Norman Maurer <norman@apache.org>
Date:   Tue Apr 17 14:17:56 2012 +0200

    Fallback to LegacyLinkedTransferQueue if using LinkedTransferQueue fails. See #268

commit 02dc9ea8c16fbed57aa5e03799a5120f36e78723
Author: Norman Maurer <norman@apache.org>
Date:   Tue Apr 17 14:16:37 2012 +0200

    Add workaround for connection problems with IPv6 link-local addresses and jdk < 7. See #267

commit 2db3e59a6c5e40fb72cee46bc66b30ccd4dbbe79
Author: Norman Maurer <norman@apache.org>
Date:   Tue Apr 17 09:56:15 2012 +0200

    Add workaround for connection problems with IPv6 link-local addresses and jdk < 7. See #267

commit aa6c16b13620c53a485247dae5da3ad0e7fe8ba6
Author: Norman Maurer <norman@apache.org>
Date:   Tue Apr 17 09:25:53 2012 +0200

    Make sure PrematureChannelClosureException is not thrown incorrectly sometimes. See #266

commit cd92478bfc9f3a8ab15514d56aaa6d4a43b5b9a1
Author: Norman Maurer <norman@apache.org>
Date:   Mon Apr 16 15:30:43 2012 +0200

    Use Sec-WebSocket-Origin in WebSocketClientHandshaker08 as replacement for Origin. See #264

commit 00e59da7ba9792fdcda082b52c948e80821ecef1
Author: norman <norman@apache.org>
Date:   Mon Apr 16 13:26:35 2012 +0200

    Add port to Origin HTTP Header if the port is non default (80/443). See
    #262

commit 0a84ce6f0075b6b1b60e685d048a8ed09fb0b964
Merge: 987e152 978168e
Author: norman <norman@apache.org>
Date:   Mon Apr 16 13:12:36 2012 +0200

    Merge branch 'master' of ssh://github.com/netty/netty

commit 987e152f083740738f05fab1d80165c9d6381f0b
Author: norman <norman@apache.org>
Date:   Mon Apr 16 13:12:12 2012 +0200

    Add port to Origin HTTP Header if the port is non default (80/443). See
    #262

commit 978168e8c6c8d51e1c1d611a9900d2414e2ec3bc
Author: Norman Maurer <norman@apache.org>
Date:   Mon Apr 16 11:45:59 2012 +0300

    Fix typo

commit c44f365ee7784dd3af2ecec73ed18b8f6239f674
Author: norman <norman@apache.org>
Date:   Mon Apr 16 10:43:21 2012 +0200

    Add some javadocs notes that explain the behavior of CookieEncoder.encode(). See #94

commit 05615c4779e4c8bd98ac9b15097ab5fef4916c78
Author: norman <norman@apache.org>
Date:   Mon Apr 16 09:55:03 2012 +0200

    Throw IllegalStateException if DynamicChannelBuffer exceed the maximum
    ChannelBuffer size of 2gb. See #258

commit f25453cd364a9d403ce63b05bd75a499d5255dc0
Merge: e02225a 11e974a
Author: Norman Maurer <norman@apache.org>
Date:   Sun Apr 15 23:06:14 2012 -0700

    Merge pull request #261 from CruzBishop/logger-usage
    
    Replace System.out logging with InternalLogger

commit e02225a80f4621172f72978bdac6a148e471fed5
Author: Norman Maurer <norman@apache.org>
Date:   Sun Apr 15 20:58:40 2012 +0200

    Add also tests for HttpClientCodec that tests handling chunked responses. See #256 amd #259

commit bc141f695b614a7b9034b18e5bced3e218ed47b8
Author: Norman Maurer <norman@apache.org>
Date:   Sun Apr 15 15:47:05 2012 +0200

    Add test for HttpClientCodec that tests handling of missing responses. See #256 amd #259

commit 11e974ace35cb79e2b1f730e57619f9220b3b890
Author: Cruz Bishop <cruzjbishop@gmail.com>
Date:   Sun Apr 15 19:22:02 2012 +1000

    Fix up the last logging mishits

commit a682b018b29b79aebcc935f9f6213725bd5904a5
Author: Cruz Bishop <cruzjbishop@gmail.com>
Date:   Sun Apr 15 19:18:35 2012 +1000

    More logging

commit fa3c9c8eee060ba64fe1ff07a4f4b1704f3febfc
Merge: d363f73 a20ab91
Author: Norman Maurer <norman@apache.org>
Date:   Sun Apr 15 01:22:26 2012 -0700

    Merge pull request #260 from CruzBishop/logger-usage
    
    Replace System.*.println calls with logging

commit a20ab9184e7f13fcd8d73b00fc2d97ce983f09a4
Author: Cruz Bishop <cruzjbishop@gmail.com>
Date:   Sun Apr 15 17:49:04 2012 +1000

    Use loggers in some more classes

commit efabc3c28549209ab060bed785ca6541b2e35474
Author: Cruz Bishop <cruzjbishop@gmail.com>
Date:   Sun Apr 15 17:34:51 2012 +1000

    Use a logger in ZStream

commit db97e4eb35699538023fda58114149f11cf669a4
Author: Cruz Bishop <cruzjbishop@gmail.com>
Date:   Sun Apr 15 17:29:15 2012 +1000

    Use a logger in SocketAddresses

commit d363f73fd831be950a2ba2e39b7f51df1cee0fea
Author: norman <norman@apache.org>
Date:   Thu Apr 12 10:55:18 2012 +0200

    Only increment the counter if the encode did not fail. See #256

commit c7bd0b41e69add2512564966c9f550781f61413a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 12 17:54:56 2012 +0900

    Remove unnecessary parameter

commit 22a815eaf8802183102fa188283ee9c2a4d7bb53
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 12 17:39:01 2012 +0900

    Revamp channel handler API
    
    - Merged LifeCycleAwareChannelHandler into ChannelHandler
    - Replaced ChannelUpstreamHandler and ChannelDownstreamHandler with
      ChannelReader and ChannelWriter
      - These two new interfaces are much more type-safe than its ancestor.
    - Simplified channel state model as described in #68
    - Handler creates send/receive buffer.
      - Previously, Netty created them, but it led to more memory copies and
        inflexibility.  I'm going to allow a handler to create a bounded
        queue for example.
      - It currently uses Queue<T> but I'll define a new interface and make
        ChannelBuffer implement it (e.g. Queue<Byte>)
    - Introduced AttributeMap which replaces attachments in Channel and
      ChannelHandlerContext and ChannelLocal

commit 5ed04c3ada397d90f8d750175ed1d63ddc5bb86d
Author: norman <norman@apache.org>
Date:   Thu Apr 12 10:34:16 2012 +0200

    Correctly handle chunked requests/responses. See #256

commit b9c60bd5187a15171b255e43f57b2798b98ebf56
Author: norman <norman@apache.org>
Date:   Thu Apr 12 10:22:10 2012 +0200

    Throw a PrematureChannelClosureException if the channel was closed before all responses were received for the sent requests. See #256

commit 941e71de36e478b795c4ea0e8fd15dede05d1b7d
Author: norman <norman@apache.org>
Date:   Thu Apr 12 09:29:59 2012 +0200

    cleanup comments

commit 05204025cce2c55293ab55a9e5e380d73b7e90f0
Author: norman <norman@apache.org>
Date:   Wed Apr 11 10:26:29 2012 +0200

    Fix regression in Zlib which was introduced while refactoring the code. See #255

commit 97561315fd353ce37626eafc394ad88094a87d3a
Author: norman <norman@apache.org>
Date:   Wed Apr 11 09:16:27 2012 +0200

    Add final keyword

commit 16c625cfd0f1f094db837c3f98809ee899fcc248
Author: norman <norman@apache.org>
Date:   Wed Apr 11 09:15:02 2012 +0200

    Allow to share a WorkerPool for boss and worker threads but also allow to have them separate. See #240

commit f88cd3120d8cac8dca8d6a122a4fbed374b4d065
Author: norman <norman@apache.org>
Date:   Wed Apr 11 08:45:51 2012 +0200

    Fix a bug which lead to only use two threads for all tasks all the time, even if the WorkerPool contained more. See #240

commit 4c0a5886ca10f60b0efff843dd10d4b12d4c6de9
Author: norman <norman@apache.org>
Date:   Wed Apr 11 08:09:03 2012 +0200

    Make sure multicast tests pass on all os'es

commit 3f8c13f138959ffc437e67c86ea33afe74d6c23f
Author: norman <norman@apache.org>
Date:   Wed Apr 11 10:26:29 2012 +0200

    Fix regression in Zlib which was introduced while refactoring the code. See #255

commit 962a67dc03c453f9c37a4f1cf7a2d8a08af516b4
Author: norman <norman@apache.org>
Date:   Wed Apr 11 09:16:27 2012 +0200

    Add final keyword

commit 5b53b66fbf456de0bb2aff1092e6baa53221514f
Author: norman <norman@apache.org>
Date:   Wed Apr 11 09:15:02 2012 +0200

    Allow to share a WorkerPool for boss and worker threads but also allow to have them separate. See #240

commit 470c1a898a6cdb5d20993e63d9e5b83c298290a9
Author: norman <norman@apache.org>
Date:   Wed Apr 11 08:45:51 2012 +0200

    Fix a bug which lead to only use two threads for all tasks all the time, even if the WorkerPool contained more. See #240

commit a37d7bb5f3f1463d08295a1d465ed9cf9475eee8
Author: norman <norman@apache.org>
Date:   Wed Apr 11 08:09:03 2012 +0200

    Make sure multicast tests pass on all os'es

commit 4436f60e2f92cdcd86b42a95a3eb5e0955cb7064
Author: Norman Maurer <norman@apache.org>
Date:   Tue Apr 10 21:00:44 2012 +0200

    Workaround to have multicast tests work on osx, linux and windows

commit d0f432b4d4baa8e4e5c13b6287cbb1c192f91b35
Author: norman <norman@apache.org>
Date:   Tue Apr 10 11:18:34 2012 +0200

    Accept all ready sockets for the SelectionKey. See #240

commit f17e56b33bfb725474015e19cdddc5d1254ea989
Author: norman <norman@apache.org>
Date:   Tue Apr 10 11:18:34 2012 +0200

    Accept all ready sockets for the SelectionKey. See #240

commit 5434bd9645a06a30054323f7de2df2e11b38eafd
Author: norman <norman@apache.org>
Date:   Tue Apr 10 10:04:40 2012 +0200

    Add missing license header

commit beedd26e1c81467e41730c743374abb0b33f7c67
Author: norman <norman@apache.org>
Date:   Tue Apr 10 10:04:40 2012 +0200

    Add missing license header

commit f3456ce098d3357d09a0adf8d289e847101a507c
Author: norman <norman@apache.org>
Date:   Tue Apr 10 08:20:58 2012 +0200

    Make sure multicast tests pass on all os'es

commit 32f61ed01ac7540ec5bd16898ca590fed36d59e8
Author: norman <norman@apache.org>
Date:   Tue Apr 10 08:12:10 2012 +0200

    Fix a NPE in a testcase when running via ubuntu

commit 07ff3d76cd197452d9448e8bedc97fa1baa28620
Author: Norman Maurer <norman@apache.org>
Date:   Mon Apr 9 20:07:45 2012 +0200

    Await for close of the channels. See #235

commit 019d942a2819df0f36ddf6aa34e76333e061ebbe
Author: Norman Maurer <norman@apache.org>
Date:   Mon Apr 9 20:02:33 2012 +0200

    Correct javadoc. See #235

commit 7eaf6350597cdf2ce505a5935dca35aeec737e66
Author: Norman Maurer <norman@apache.org>
Date:   Mon Apr 9 20:00:20 2012 +0200

    Take care of releasing the local channel when releaseExternalResources() is called. See #235

commit a847ec1d88aef51fd9e60a877750dd25a4cda415
Author: Norman Maurer <norman@apache.org>
Date:   Mon Apr 9 16:35:56 2012 +0200

    Add test case to show that issue #235 is due some incorrect usage

commit 91dc8efd4b9687821c6510f16a9dd16a2b4c8771
Author: vibul <vibuli@gmail.com>
Date:   Mon Apr 9 14:33:45 2012 +1000

    Issue #250. Implement web socket close frame status code and reason text.

commit 1314db9c0ad4b36863eb9ffac0fac64875ccd197
Author: norman <norman@apache.org>
Date:   Tue Apr 10 08:12:10 2012 +0200

    Fix a NPE in a testcase when running via ubuntu

commit 16bbd313300799acf516df4abe145cacf5cbae28
Author: Norman Maurer <norman@apache.org>
Date:   Mon Apr 9 20:07:45 2012 +0200

    Await for close of the channels. See #235

commit 70458316873ac9f1185553cc7cdcab6be80a70b5
Author: Norman Maurer <norman@apache.org>
Date:   Mon Apr 9 20:02:33 2012 +0200

    Correct javadoc. See #235

commit 32d327ede2e521b00cd65eba3153637494b80d8a
Author: Norman Maurer <norman@apache.org>
Date:   Mon Apr 9 20:00:20 2012 +0200

    Take care of releasing the local channel when releaseExternalResources() is called. See #235

commit 968b9103b3d9dcdb96c177aea21720c8883ee161
Author: Norman Maurer <norman@apache.org>
Date:   Mon Apr 9 16:35:56 2012 +0200

    Add test case to show that issue #235 is due some incorrect usage

commit e7e780fddd97dca003ef546fbb35fc4855091d7c
Merge: 778f4a3 dd14b8d
Author: Vibul Imtarnasan <vibuli@gmail.com>
Date:   Sun Apr 8 21:46:50 2012 -0700

    Merge pull request #253 from veebs/ws-close
    
    Issue #250. Implement web socket close frame status code and reason text

commit dd14b8d9e84785e144c481929cbea7bc60714786
Author: vibul <vibuli@gmail.com>
Date:   Mon Apr 9 14:33:45 2012 +1000

    Issue #250. Implement web socket close frame status code and reason text.

commit 33c085b9b9a27f442e762a0234a27bd6afe5169e
Author: Norman Maurer <norman@apache.org>
Date:   Sat Apr 7 21:56:58 2012 +0200

    Make sure Future get notified before event is fired. See #254

commit 778f4a3cbcb203a47fb5400c268481809e20770d
Author: Norman Maurer <norman@apache.org>
Date:   Sat Apr 7 21:56:58 2012 +0200

    Make sure Future get notified before event is fired. See #254

commit d2d859d22c5a7199654df2dd04f8656a265de047
Author: Norman Maurer <norman@apache.org>
Date:   Fri Apr 6 21:00:49 2012 +0200

    Make sure multicast tests pass on all os'es

commit c8679fe52c95336adc90421dce47a2187d86170b
Author: Norman Maurer <norman@apache.org>
Date:   Fri Apr 6 11:09:51 2012 +0200

    Catch Throwable

commit db87c6ea3755a25c6fedff6f3f5bc5802ec5ffa6
Author: norman <norman@apache.org>
Date:   Wed Apr 4 07:40:50 2012 +0200

    Make sure Channel connected event is not fired on connect failure. See #249

commit 389845b4c94b6ee0dbca10c6716d9e1cc5c98d23
Author: norman <norman@apache.org>
Date:   Wed Apr 4 07:40:50 2012 +0200

    Make sure Channel connected event is not fired on connect failure. See #249

commit 049fb35bc1f58848a97e1c91288498cbc979388a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 3 22:29:26 2012 +0900

    Add Channel.deregister()

commit 5a63cc4e1a94855ff9534d3e7cd3825e8dd0a64e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 3 22:25:01 2012 +0900

    Allow specifying a non-default SelectorProvider

commit a8647d6dc87e9ec0e2d72105f71d3a26d78d994e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 3 22:21:11 2012 +0900

    AbstractNioWorker -> SelectorEventLoop

commit 0d8afa7a4c5ea2d1409d3668b959c4b5d1e8eb4c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 3 22:19:35 2012 +0900

    attach -> register

commit 116054a364f74d10f9b3161dd60b2d72ab05f9c6
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 3 22:03:04 2012 +0900

    Initial incomplete checkin of the event loop API

commit d66cf2cbfa604048543594a7ab96bb78d1607186
Author: norman <norman@apache.org>
Date:   Tue Apr 3 12:06:09 2012 +0200

    Add missing license header

commit 805270c5d95cacb15725231cfe849f11968d081f
Author: norman <norman@apache.org>
Date:   Tue Apr 3 12:04:33 2012 +0200

    Finish support for UDP Multicast in UDP. See #216

commit 31e3530252ccfa5389064a22e70015f8081c27bc
Author: norman <norman@apache.org>
Date:   Tue Apr 3 07:50:15 2012 +0200

    Fix typo

commit 9c1f3c6fe89d289b61124de199497ff8c0cab20a
Author: Norman Maurer <norman@apache.org>
Date:   Mon Apr 2 21:02:41 2012 +0200

    Fix UDP nio impl and add simple tests

commit dd6069c6810b94ffc33b1cb694f8fbda73737cf0
Author: Norman Maurer <norman@apache.org>
Date:   Mon Apr 2 19:37:28 2012 +0200

    Fix broken UDP support. This got broken in 3.4.0.Alpha1

commit 023227917f8e0f4ea841c64e8f271dda1cdd61d2
Author: norman <norman@apache.org>
Date:   Mon Apr 2 15:27:40 2012 +0200

    cleanup

commit 221a77409ac213601f8fe989aecb41228493b26a
Author: norman <norman@apache.org>
Date:   Mon Apr 2 15:25:40 2012 +0200

    Only use the source address to join a multicast group if it was specified. See #216

commit 7f8408065b6d1fb142a51368bef2784cdcbe374e
Author: norman <norman@apache.org>
Date:   Mon Apr 2 14:22:13 2012 +0200

    Fix UDP Multicast writes. See #237

commit b350e8d289fb1ec53b63c3393066bac610b20410
Author: norman <norman@apache.org>
Date:   Mon Apr 2 14:20:40 2012 +0200

    Fix UDP Multicast writes. See #237

commit 9b90e3191a1b220e634b5b1ce383cfba36511cad
Author: norman <norman@apache.org>
Date:   Mon Apr 2 11:57:32 2012 +0200

    Finish support of NIO UDP multicast. This also change the methods to
    return a ChannelFuture. See #216

commit 72f9f502bbb0ab5445c280aabb7e759e74eaff16
Author: norman <norman@apache.org>
Date:   Mon Apr 2 11:07:11 2012 +0200

    Add support for UDP multicast in NIO. See #216
    
    Add some javadocs. See #216
    
    Use the correct key to lookup MembershipKey. See #216

commit 373c3560674bc8d2a84d4d4f727e276836752b55
Merge: 4eac8f6 76c841b
Author: norman <norman@apache.org>
Date:   Mon Apr 2 11:02:54 2012 +0200

    Merge branch 'sctp_refactoring'
    
    Conflicts:
    	transport/src/main/java/io/netty/channel/socket/nio/NioWorker.java

commit 76c841bd4e97529ebd2a8c6087facb5fd3f4d861
Author: norman <norman@apache.org>
Date:   Mon Apr 2 07:44:07 2012 +0200

    Remove non-used class

commit 27836b6436adc575760a89a7b5b01639abe5b4aa
Author: norman <norman@apache.org>
Date:   Mon Apr 2 07:43:50 2012 +0200

    Add some package-info.java

commit 73bdaa113af80b81ce902fec4a939e11285feb0b
Author: norman <norman@apache.org>
Date:   Mon Apr 2 07:34:15 2012 +0200

    Use jUnit Assume to "ignore" SCTP tests on non-unix operation systems

commit 4eac8f6b7050b2df73277dd193168234e805efb3
Author: norman <norman@apache.org>
Date:   Mon Apr 2 07:34:15 2012 +0200

    Use jUnit Assume to "ignore" SCTP tests on non-unix operation systems

commit 7dc2d8eb7770cb49db151f858ab422ccbcee2691
Author: Norman Maurer <norman@apache.org>
Date:   Sun Apr 1 20:56:13 2012 +0200

    Make sure all resources are disposed before try to shutdown executor

commit f135804b9bdd1ee81be50dc8f44872f95e2cfe64
Author: Norman Maurer <norman@apache.org>
Date:   Fri Mar 30 22:16:18 2012 +0200

    Correct set blocking mode on server channel

commit 8eb3a30bd4f95346adbbe75f8ad46af49007af41
Author: Norman Maurer <norman@apache.org>
Date:   Fri Mar 30 22:07:27 2012 +0200

    Fix NPE

commit c83fb3a3f009ff3efdee7b86f3e64d8f7ae5f76b
Author: Norman Maurer <norman@apache.org>
Date:   Fri Mar 30 21:59:48 2012 +0200

    Correct handle interestedOps changes in Sctp

commit a2701a9ae448188da380353d01113dcca6929321
Author: Norman Maurer <norman@apache.org>
Date:   Fri Mar 30 21:54:25 2012 +0200

    Exclude com.sun.nio.* from the generated jar

commit 8e9058e9212c690f9cb38395223a87d5d7f20faa
Author: Norman Maurer <norman@apache.org>
Date:   Fri Mar 30 21:35:58 2012 +0200

    Enable/Disable sctp tests based on the detected OS

commit c02d38a728be777c2c40b9db074da8aec2620540
Author: Norman Maurer <norman@apache.org>
Date:   Fri Mar 30 21:15:43 2012 +0200

    :Correctly handle interestedOps changes

commit 3decdeb0b03cf6b1162becdeb677122b4d711c11
Author: Norman Maurer <norman@apache.org>
Date:   Fri Mar 30 21:54:25 2012 +0200

    Exclude com.sun.nio.* from the generated jar

commit 43db6d70502ddc54ee975615592364f2edf7a09f
Author: Norman Maurer <norman@apache.org>
Date:   Fri Mar 30 21:35:58 2012 +0200

    Enable/Disable sctp tests based on the detected OS

commit f154c480e0ae328404ab73b2fff9e0424bc89069
Author: Norman Maurer <norman@apache.org>
Date:   Fri Mar 30 21:15:43 2012 +0200

    :Correctly handle interestedOps changes

commit e3fa9810f8d83a679d0c8f82ecfe2ba49e5c31e8
Author: Norman Maurer <norman@apache.org>
Date:   Fri Mar 30 16:24:08 2012 +0300

    Fix race

commit 732b11e7d525f0cd0ec77f49765255949f714f41
Author: Norman Maurer <norman@apache.org>
Date:   Fri Mar 30 16:23:10 2012 +0300

    Fix race

commit 4afd038fc07242febea70484143be66c0f812f48
Author: norman <norman@apache.org>
Date:   Fri Mar 30 15:21:26 2012 +0200

    Fix race

commit c3e51af849750a14be593f63dc284aa0628af79b
Author: norman <norman@apache.org>
Date:   Fri Mar 30 14:29:26 2012 +0200

    Check before casting

commit a85f22e1734d505a122b45381f70a427f42336ef
Author: norman <norman@apache.org>
Date:   Fri Mar 30 11:21:26 2012 +0200

    Code cleanup

commit a60eecaa0c11e27a8c5f95adf3e2e6e13eebfbdd
Author: norman <norman@apache.org>
Date:   Fri Mar 30 11:07:43 2012 +0200

    Refactor sctp to share code with nio

commit 070c92906d0a3b2669ad4b1e9d48852811c8aa4c
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 30 17:05:18 2012 +0900

    Add missing Redis client example

commit a065b1cee2c882458fdf7a6a5709d8516c583833
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 30 17:03:02 2012 +0900

    Issue #242: Add the ability to send many commands with a single call
    
    Also:
    * Code cleanup
    * Hide internal constants from a user

commit fd0b0a4e2be5ccaeff5ea0a6c1c995c114f09a10
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 30 12:48:28 2012 +0900

    Code cleanup

commit 6184456689df0d1ece0b6c8be7216ca85c0de7d6
Author: Norman Maurer <norman@apache.org>
Date:   Thu Mar 29 18:22:50 2012 +0200

    Fix usage of SctpNotificationHandler. See #245

commit b98516536e36540bac0e56c07bd169bcbbb39160
Author: Norman Maurer <norman@apache.org>
Date:   Thu Mar 29 17:07:19 2012 +0200

    Introduce the JdkChannel interface and implementation. This will allow
    us to also share all our nio code in the SCTP implementation.

commit 73f3a45e97553dcdc2208d81b2cf7addf07d3746
Merge: 30fabea b145a8a
Author: Norman Maurer <norman@apache.org>
Date:   Thu Mar 29 05:05:22 2012 -0700

    Merge pull request #244 from netty/thread_model_refactor
    
    Thread model refactoring, which remove the usage of a boss thread. See #240

commit b145a8a0d4dcdb980c7ee75b564814a3ec4298dc
Author: norman <norman@apache.org>
Date:   Thu Mar 29 13:51:40 2012 +0200

    add some todo and comment a failing test on windows. This test also
    fails in master branch. See #240

commit 77e1ef72cdbb4de37dae65988f2dfee68718d80c
Author: norman <norman@apache.org>
Date:   Thu Mar 29 12:06:00 2012 +0200

    Re-enable ssl tests. See #240

commit dded63b22c9521508cca7141322810929d8743f4
Author: norman <norman@apache.org>
Date:   Thu Mar 29 12:02:29 2012 +0200

    Make sure we use the same Worker in the client during its lifetime. See
    #240

commit 30fabea5cd308b20eaef5348e079f7101118d574
Merge: 0c3a33f 64f5299
Author: Vibul Imtarnasan <vibuli@gmail.com>
Date:   Wed Mar 28 22:57:18 2012 -0700

    Merge pull request #241 from veebs/KeepAlive
    
    Return "Connection: keep-alive" header in the HTTP response

commit 60d93646049a19ee157a4f4414ef09634d2b36bf
Author: Norman Maurer <norman@apache.org>
Date:   Wed Mar 28 20:19:39 2012 +0200

    First round of remove the boss-thread. See #240

commit 64f529945282e41eb475952fde382f234da8eec7
Author: vibul <vibuli@gmail.com>
Date:   Wed Mar 28 15:50:17 2012 +1100

    Unless the Connection: keep-alive header is present in the HTTP response, apache benchmark (ab) hangs on keep alive connections.
    
    This is as per HTTP 1.1 spec:  http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01.html#Connection

commit 0c3a33f83b5697ceb7a4ba73767cf490fd53efc5
Author: norman <norman@apache.org>
Date:   Tue Mar 27 09:29:43 2012 +0200

    Add no-args constructor for simple use-cases

commit 0082a15899f2669e3407ae6d3ad279a43aeb7226
Author: Norman Maurer <norman@apache.org>
Date:   Mon Mar 26 19:50:39 2012 +0300

    Fix javadocs warnings

commit 2766133a4dfe542c0d4f8240f69a82050bd6d569
Author: Norman Maurer <norman@apache.org>
Date:   Mon Mar 26 19:50:01 2012 +0300

    Fix javadocs warnings

commit c28137b0b21bd3ba2c335b3534d0ce2895f7c05f
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 26 18:10:16 2012 +0900

    Improve ChannelBufferInputStream documentation

commit a81fa75c59918d471cdbfda58d1d746ce125025e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 22 16:03:58 2012 +0900

    Fix #239: IdleStateHandler starts two timers
    
    1) ReadTimeoutHandler is also affected by this bug - fixed
    2) Reverted IdleStateHandler.beforeAdd() and channelConnected() -
    without isAttached() check, timeout can be inaccurate if beforeAdd() is
    called long before channelConnected().

commit f8253e031d079e4cd9fd425c85e608434dd88453
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 22 15:48:08 2012 +0900

    Fix #239: IdleStateHandler starts two timers
    
    1) Do not rely on ChannelPipeline.isAttached() to ensure initialize() is
    called once.
    2) Fix a race condition where initialize() can schedule timeouts after
    destroy() is called.

commit 32ff810b64f4ebd89d1145e08771fdaffff6180e
Author: Norman Maurer <norman@apache.org>
Date:   Wed Mar 21 19:00:32 2012 +0100

    Correctly handle Hixie 76 websocket handshake response. See #222

commit e8ddc3cf007e997a299169dfc525ed70a3cad99e
Author: norman <norman@apache.org>
Date:   Tue Mar 20 15:44:59 2012 +0100

    remove unnecessary check. See #222

commit 8d9f78c84db0a1cc57563fb4751402dae498897c
Author: norman <norman@apache.org>
Date:   Tue Mar 20 15:40:34 2012 +0100

    Correctly handle responses with return code of 1xx. See #222

commit d68b104969470dfd5f95594be4f83bab126246d8
Author: norman <norman@apache.org>
Date:   Tue Mar 20 15:18:33 2012 +0100

    Make sure AbstractNioWorker.setInterestOps(..) will notify the future
    and the handlers in all cases. See #238

commit 6e68577d5406119ef57163373ace105b84a6553d
Merge: fd3d98c 59ff76b
Author: Norman Maurer <norman@apache.org>
Date:   Tue Mar 20 01:44:28 2012 -0700

    Merge pull request #225 from netty/workerpool
    
    Support of sharing a WorkerPool between Factories

commit fd3d98cf629be62de475ff1d5b76a31b74113c82
Author: norman <norman@apache.org>
Date:   Tue Mar 20 09:43:00 2012 +0100

    Fix UDP Multicast writes. See #237

commit b28ef57705b56e2160b2b9e405acfec7ba7a77e3
Merge: b09bf5b f938765
Author: Norman Maurer <norman@apache.org>
Date:   Thu Mar 15 14:33:02 2012 +0100

    Merge branch 'master' of ssh://github.com/netty/netty

commit b09bf5b1fb0c1dec843d6f5738ecc3da727604af
Author: Norman Maurer <norman@apache.org>
Date:   Thu Mar 15 14:31:01 2012 +0100

    Tasks added to OrderedMemoryAwareThreadPoolExecutor may be lost in some
    cases. See #234

commit f938765d6eb75d09b65862605743d742342b6e22
Author: Norman Maurer <norman@apache.org>
Date:   Wed Mar 14 14:33:12 2012 +0100

    Update README.md

commit 18c037d88b9a69f4109748ead77f35d8ab830dab
Merge: 0fb4dc5 91463ca
Author: Norman Maurer <norman@apache.org>
Date:   Wed Mar 14 06:31:46 2012 -0700

    Merge pull request #230 from veebs/Issue222Part2
    
    Added README

commit 0fb4dc5431e4f52a0eb57d4cc2e3df1d6b2f825e
Author: norman <norman@apache.org>
Date:   Mon Mar 12 13:25:19 2012 +0100

    Use java6+ methods

commit 5830e5a7fb0cda7e7e600572ed92abbf46723182
Merge: 0a6f739 cb931bf
Author: norman <norman@apache.org>
Date:   Mon Mar 12 12:28:27 2012 +0100

    Merge branch 'master' of git@github.com:netty/netty.git

commit 0a6f7395f33d8288394fb4076d6d6b198392fd7e
Author: norman <norman@apache.org>
Date:   Mon Mar 12 12:28:07 2012 +0100

    Merge redis codec to master branch. See #201

commit 91463cad47f792a594f221e6e782b6fe0ff2504a
Author: vibul <vibuli@gmail.com>
Date:   Mon Mar 12 15:13:41 2012 +1100

    Added README

commit cb931bfb924f3b9b16d90e5ff119bb9e5ee61cfc
Author: Norman Maurer <norman@apache.org>
Date:   Sun Mar 11 11:54:54 2012 +0100

    Correctly handle HTTP Patch. See #227

commit c061ddbf14185416585b19e94e1478f02d9841f7
Merge: 279d859 b56c177
Author: Norman Maurer <norman@apache.org>
Date:   Sat Mar 10 23:38:08 2012 -0800

    Merge pull request #226 from veebs/Issue222Part2
    
    Issue #222 part 2 - Removed unnecessary websocket code and retested with Autobahn v0.4.10.

commit b56c17769cb4f122e99df33363d85696228a2655
Author: vibul <vibuli@gmail.com>
Date:   Sun Mar 11 11:35:33 2012 +1100

    Retested Websockets with Autobahn v0.4.10.

commit afcd03312320b8a5f2abf91e604b481baff908f7
Author: vibul <vibuli@gmail.com>
Date:   Sun Mar 11 11:35:12 2012 +1100

    Issue #222. Remove WebSocketHttpResponseDecoder hack.

commit 279d859c7ef09f69a64f2a7627660cdfe008fe9c
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 9 11:07:26 2012 +0900

    Issue #220 - Treat content as non-empty on 101 Web Socket upgrade response

commit 92a907c4d7839d7ca1c7067fb4f0fb7258873c87
Merge: 09b41b2 30ef214
Author: norman <norman@apache.org>
Date:   Thu Mar 8 08:09:17 2012 +0100

    Merge branch 'master' of github.com:netty/netty

commit 09b41b28ea856fd27a85c203b5dc6015ae91c86e
Author: norman <norman@apache.org>
Date:   Thu Mar 8 08:08:36 2012 +0100

    Correctly handle earlier versions of websockets. See #222

commit 30ef2146771893a7f0591cf010ceb4912ca8f479
Author: Norman Maurer <norman@apache.org>
Date:   Wed Mar 7 21:14:48 2012 +0100

    Make sure ...Decompressor.end() is called even on Exception. See #224

commit 59ff76bd6696432650bc81f4d904854fcbc139cd
Author: Norman Maurer <norman@apache.org>
Date:   Wed Mar 7 17:55:37 2012 +0100

    add javadocs

commit 875d5ce5138a6c1d9e5e20c8d893d07d30cd0124
Author: Norman Maurer <norman@apache.org>
Date:   Wed Mar 7 17:52:49 2012 +0100

    Allow to force the execution of the Runnable in a async fashion even if
    the IO-Thread is the current Thread

commit e207af30a357e1d5c4e87767f053920820b64d49
Author: norman <norman@apache.org>
Date:   Wed Mar 7 15:37:33 2012 +0100

    Make sure AbstractNioWorker gets started if needed

commit 62028f0042868af9211e188d0f2fc7cc06edc08f
Author: norman <norman@apache.org>
Date:   Wed Mar 7 14:15:42 2012 +0100

    execute the wrapped Runnable

commit 6375b84c9db0e5f736e22a5d085f84c0dc4d8c11
Author: norman <norman@apache.org>
Date:   Wed Mar 7 14:13:48 2012 +0100

    Change Worker.executeInIoThread() to not need a Channel as paramater

commit e8c64ea593b4b69a55e8d5486b3109dc071118bc
Author: norman <norman@apache.org>
Date:   Wed Mar 7 13:30:45 2012 +0100

    Make classes public

commit 0b0edea6bcc2d6978b035071acd50e2f7e91bdad
Author: norman <norman@apache.org>
Date:   Wed Mar 7 13:29:55 2012 +0100

    Make classes public

commit 70e0eba894bfe088868a4647cb71c8bdb2930162
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 7 20:00:50 2012 +0900

    Replace SpdyHeaderBlockJZlibDecompressor with java.util.zip.Inflater-based one
    
    It should be fine because the Inflater-based one uses only JDK 1.5 API

commit 2109fdedb6856f1dd2edf566f21f1a200745725f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 7 20:07:12 2012 +0900

    Fix cherry-pick where git was not very smart

commit 304eee1db44b562e0f3c960afb58804e4167bfd7
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Tue Mar 6 15:41:59 2012 -0800

    SPDY: use java.util.zip for header block decompressor

commit cf02ad2a1eb9035f96db22c8dce769baa63acdc6
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 7 19:45:56 2012 +0900

    Add DetectionUtil which replaces UnsafeDetectUtil / Improve SpdyHeaderBlockJZlibDecompressor

commit fd7e165fb6e10914f57915de18bec75a5f1d69ff
Author: Norman Maurer <norman@apache.org>
Date:   Tue Mar 6 20:06:29 2012 +0100

    Commit missing file

commit caff7c941b1db5ef1d143fce78b71da603dbf6a1
Author: Norman Maurer <norman@apache.org>
Date:   Tue Mar 6 19:31:47 2012 +0100

    Checkstyle fixes

commit bc47850bbe36ec6a75ff2a08ae75b6d321cb1b82
Author: Norman Maurer <norman@apache.org>
Date:   Tue Mar 6 19:26:32 2012 +0100

    Allow to obtain the Worker that was used to serve the IO of a Channel

commit e0e87ce2bc267a0bf8c512e5a1a5e9f2affc87bc
Author: Norman Maurer <norman@apache.org>
Date:   Tue Mar 6 19:26:10 2012 +0100

    Allow to share Workers by using a WorkerPool.

commit 34e328f60608c86f4181650bae4527581137508e
Merge: 3317dd7 c40de99
Author: Norman Maurer <norman@apache.org>
Date:   Mon Mar 5 09:11:42 2012 -0800

    Merge pull request #220 from jestan/master
    
    SCTP Transport Bug Fixes

commit c40de99083a05db703c7e136e712c1165157f4f6
Merge: 5bbabb6 3317dd7
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Mon Mar 5 20:56:45 2012 +0530

    Merge remote branch 'upstream/master'

commit 3317dd7bffc9f4c50606420313ccb9675d89f423
Author: Norman Maurer <norman@apache.org>
Date:   Sun Mar 4 18:49:01 2012 +0100

    Make sure we don't try to use Channel.setReadable(true) if it was not
    set by the threadpool itself. See #215

commit 69e047ad2eb3bfd04c43a0a69f18d44293c708b0
Author: Norman Maurer <norman@apache.org>
Date:   Sat Mar 3 19:36:12 2012 +0100

    Remove unused imports

commit 480343e16e037436f5a64fc58c6640e9cb80954c
Author: Norman Maurer <norman@apache.org>
Date:   Sat Mar 3 19:34:15 2012 +0100

    Remove unused imports

commit 520bf78f18ada312fdc5e7e0f65bb24c2de6b182
Author: Norman Maurer <norman@apache.org>
Date:   Sat Mar 3 19:33:02 2012 +0100

    Surpress some warnings

commit 66f8de91b11e7644c1f5db72498fab92f7e2890f
Author: Norman Maurer <norman@apache.org>
Date:   Sat Mar 3 19:14:36 2012 +0100

    Make it more clear in the javadocs that you should use *Later methods to
    send upstream events from a ChannelDownstreamHandler

commit 5bbabb6ddafde152dbadb01f3c89b2b98f56b3bd
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat Mar 3 11:45:50 2012 +0530

    fixed written bytes count in sctp send buffer pool

commit b3606eb57a62317ef5147bb89e45e2c83d29d72a
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 2 12:04:23 2012 -0800

    Remove unused library at the moment

commit efe27dbce548f4def09e9829bfc57e99676c50d2
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 2 10:43:04 2012 -0800

    Rename SPDY header block (de)compressor classes

commit 53112574908c6e244c9c1030d5d69408907e863e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 2 10:35:23 2012 -0800

    Upgrade to the latest netty-build version

commit be46c6b95419b99ed41f325bfda5c525e92e5120
Merge: 5d99d57 a071759
Author: norman <norman@apache.org>
Date:   Fri Mar 2 13:32:22 2012 +0100

    Merge branch 'master' of git@github.com:netty/netty.git

commit 5d99d57cab6d90d2c91594d8755164261b8283b4
Author: norman <norman@apache.org>
Date:   Fri Mar 2 13:28:54 2012 +0100

    Fix checkstyle problems

commit a071759575289fb85cdc2a07b116c2a3deea286b
Author: Norman Maurer <norman@apache.org>
Date:   Fri Mar 2 09:35:16 2012 +0100

    Fix formatting

commit 0c46db317a0310923e5112577b759db9bdd844fb
Author: norman <norman@apache.org>
Date:   Fri Mar 2 09:28:43 2012 +0100

    Allow to handle only downstream events via the ExecutionHandler. See
    #173

commit 529156028326efe51338990bce57666895f31a1b
Author: norman <norman@apache.org>
Date:   Fri Mar 2 08:03:20 2012 +0100

    Remove left-over of refactoring. See #211

commit 8eec6938834c38c9dd51a43df3adc2b029872d3f
Author: norman <norman@apache.org>
Date:   Fri Mar 2 07:46:56 2012 +0100

    Remove twitter license headers. See #202

commit 985fc448dc52b0878acdce45edbc8043a95707d4
Author: norman <norman@apache.org>
Date:   Fri Mar 2 07:38:05 2012 +0100

    Remove unused imports

commit 469cb8b80be6a44ea66b723b7ded0cca327aef81
Author: norman <norman@apache.org>
Date:   Fri Mar 2 07:37:43 2012 +0100

    Remove Twitter license. See #202

commit b22ebbe4309f37a80cbed53b58e9982c9273f65c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 1 15:33:39 2012 -0800

    Make #211 work with Java 5
    
    * Use java.util.zip.Deflater only when running under Java 7

commit 5aae8279b9c7c54e30b019235b9a5ccdea64252b
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Wed Feb 29 12:38:52 2012 -0800

    SPDY: use jdk 1.7 java.util.zip instead of jzlib

commit 9e8f8ac08cf6200fc07ef7934bf75b38f62b7c3e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 1 14:27:32 2012 -0800

    Fix NPE in AbstractNioWorker / Uncomment setUseClientMode()

commit 4c67a24860dcdfe336e0ba4b4b5bbddb5e4daae4
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 1 14:02:30 2012 -0800

    Fix #202 - Remove Twitter license
    
    Twitter signed CCLA today.

commit d8021fc6a8f0c3a52d0d3e9fa36f5f8a22dcbe82
Author: Norman Maurer <norman@apache.org>
Date:   Thu Mar 1 21:36:34 2012 +0100

    Release ChildExecutor after the channel was closed. See #173

commit 68f9c7a5f3817df0e7a6e22515663d0107ab3f28
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 1 11:42:01 2012 -0800

    Fix #160 - Even more strict majorVersion check in SslHandler

commit 4b583325b09d5b1bf0228407705c613a5dbe2293
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 1 11:32:51 2012 -0800

    Fix #160 - No response to write if server is using SslHandler and client is not

commit 81ad99bc396e37e3dce857b5841953a9abc58064
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 29 14:05:44 2012 -0800

    Remove logging which was added accidently

commit 4158152b24c1e20cc9d024486a6bc6a0ee336a92
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 29 14:02:12 2012 -0800

    Trigger exceptionCaught event from the middle of the pipline (#210)
    
    .. because the previous handlers have no interest in the exceptions
    raised by the next handlers.

commit 40e7a5d94874547b2ae5bcf55ddc07db6b714633
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 29 13:53:26 2012 -0800

    Clean up and Add missing JavaDoc

commit c62b47228eae8619e1a3481cf8f6af785c38020a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 29 13:26:35 2012 -0800

    Fix build failure

commit 1589dadccef348293fa02bc9c47b64ba0daf4393
Author: Norman Maurer <norman@apache.org>
Date:   Wed Feb 29 21:37:26 2012 +0100

    Better handling of canceling. See #210 and #209

commit a545157f4bb36178c871bea3a9215e83d1d4e907
Author: Norman Maurer <norman@apache.org>
Date:   Wed Feb 29 21:23:31 2012 +0100

    Respect canceled tasks. See #209 and #210

commit 8579f09c594f69870115c019655c98cba5ad47ee
Merge: 689c479 5f465da
Author: Norman Maurer <norman@apache.org>
Date:   Wed Feb 29 12:11:46 2012 -0800

    Merge pull request #210 from netty/threading_fix
    
    Merge in fix for threading (related to #140 and #187). This also includes the new feature that allow to submit a Runnable that gets executed later in the io thread.

commit 5f465da38ded7ef73cb30bb20fd600e8af3266fe
Author: Norman Maurer <norman@apache.org>
Date:   Wed Feb 29 21:08:18 2012 +0100

    Add final keyword

commit 4df3c612339bf717cfe902cb213abe3f59eda558
Author: Norman Maurer <norman@apache.org>
Date:   Wed Feb 29 21:07:02 2012 +0100

    Allow to submit a Runnable that get execute in the io-thread. This is
    also used to workout flaws in the thread-model. See #209 #140 #187

commit 689c47980b5bfa5db654d7de33d4a38cd0acb8d1
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 29 10:04:05 2012 -0800

    Make ReplayingDecoder.newCumulationBuffer() overridable / Make Replaying|FrameDecoder allocate at least 256 bytes by default

commit c46593266d30748b3abc0059a4617c147c719d86
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 29 09:40:34 2012 -0800

    Optimize ReplayingDecoder even further
    
    * If checkpoint is non-zero, do not copy the whole input into cumulation but copy only the part after the checkpoint

commit 8ab94510865619767645a109104afc54149093e9
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 29 09:19:18 2012 -0800

    Fix #208 - SslHandler does not use ChannelBufferFactory to create a new buffer
    
    * Also fixed build failure caused by wrong fork mode

commit fb4ee5207c55b0e0244db494c04c79e9bff03749
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 28 16:47:12 2012 -0800

    Remove shameful System.out.println

commit c2d2f0b254e92d11b15db48d8ae4a6c695a9ddb1
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 28 16:30:00 2012 -0800

    Optimize FrameDecoder and ReplayingDecoder
    
    * Overall code cleanup on FrameDecoder and ReplayingDecoder
    * FrameDecoder discards readableBytes only when it has to
    * Replaced createCumulationDynamicBuffer with newCumulationBuffer with
      an additional hint
    * ReplayingDecoder does not perform memory copy if possible

commit 2f6d02da6039039c3d49ff98d50f67f524dd8d7b
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 28 10:38:45 2012 -0800

    Run tests in random order

commit 0d66a36a1480746af742ff2b87025a5abc3c7609
Merge: 40771f6 2984f26
Author: Norman Maurer <norman@apache.org>
Date:   Tue Feb 28 16:53:28 2012 +0100

    Merge branch 'master' of ssh://github.com/netty/netty

commit 40771f6faf30ddb7e6c6776338b7bb6d3fae3d62
Author: Norman Maurer <norman@apache.org>
Date:   Tue Feb 28 14:21:47 2012 +0100

    add empty line

commit 19358ee2469a815d6e93aea2bd6ce6fc1d7a8b76
Author: Norman Maurer <norman@apache.org>
Date:   Tue Feb 28 14:19:29 2012 +0100

    Workaround for JDK NIO bug. See #203

commit 2984f26f978bc6fd74bb3c31a7e66b034798017a
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 27 13:02:42 2012 -0800

    Decreased all selector timeout from 500 ms to 10 ms
    
    See #204

commit 46125686874f5b69bcdb6f4c9bef3f900a7057c6
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 27 12:56:18 2012 -0800

    Fix #204 - Increate the granularity of connect timeout in NIO
    
    * Changed the Selector timeout from 500 to 10 so that the timeout is checked every 10 milliseconds

commit b6700fbe58894c59f1caae1fe97cf962ac066016
Author: Norman Maurer <norman@apache.org>
Date:   Mon Feb 27 20:46:40 2012 +0100

    Fix naming of class. Thanks Trustin for review

commit 0beaa107b4be5e68928349c4131d01a655003641
Author: Norman Maurer <norman@apache.org>
Date:   Mon Feb 27 20:45:46 2012 +0100

    Fix assert usage. Thanks Trustin for review

commit 2b9df060dd916abb7774b65ce43e2d60fde0052e
Author: Norman Maurer <norman@apache.org>
Date:   Sun Feb 26 20:51:53 2012 +0100

    Add support to wrap primitives via ChannelBuffers.wrap*(..) easily. See
    #167

commit 03cb43140c70287e6b454d0d6561e0699eddfefb
Author: Norman Maurer <norman@apache.org>
Date:   Sun Feb 26 18:15:42 2012 +0100

    Only log if loglevel is enabled.

commit d0a962422ea0a620c41bb2d3971fc9ecccdc26b3
Author: Norman Maurer <norman@apache.org>
Date:   Sun Feb 26 18:14:05 2012 +0100

    Add back missing HttpTunnelingServlet. See #148

commit 16fada5c233fa7f5e6d534f960d55eb19a244e0c
Author: Norman Maurer <norman@apache.org>
Date:   Sun Feb 26 11:06:14 2012 +0100

    Remove bogus constructor. See #173

commit 5e43e879f276d2f2e75d16c936063d932bdcf420
Author: Norman Maurer <norman@apache.org>
Date:   Sun Feb 26 11:00:30 2012 +0100

    Add OrderedDownstreamThreadPoolExecutor which can be used when using the
    new feature of ExecutionHandler to also handle downstream events. This
    is mainly useful for SEDA like stuff. See #173

commit cfe7b4959475f8690a5a0b3357230a6a539a916d
Author: Norman Maurer <norman@apache.org>
Date:   Sat Feb 25 17:11:14 2012 +0100

    Cleaner impl of AbstractNioChannelSink and AbstractOioChannelSink. See
    #140 and #187

commit 68066c5e4b53df40a35d439a3f0b49d51a449738
Author: Norman Maurer <norman@apache.org>
Date:   Sat Feb 25 16:05:41 2012 +0100

    Make sure that ChannelDownstreamHandler impl fire exception caughts
    later via the io-worker. See #140 and #187

commit f2d1f1e8ad00ad2c6f81b8c63ec1d37a0d9bdbb2
Author: Norman Maurer <norman@apache.org>
Date:   Sat Feb 25 15:54:33 2012 +0100

    Also fix the exception handling if a ChannelHandler throws an Exception
    based of if its a io thread or not. See #187 and #140

commit ef64e8c332717257642583d48ccca6be82aa575e
Author: Norman Maurer <norman@apache.org>
Date:   Sat Feb 25 15:12:58 2012 +0100

    oio and nio transport now make sure that a upstream event get only
    executed from an io thread. See #140 and #187

commit c4a437e16b42e88eb9947c65d3dd2413bd9ef5ac
Author: Norman Maurer <norman@apache.org>
Date:   Sat Feb 25 14:30:10 2012 +0100

    Fix later sending of exceptionCaught events. See #187 and #140

commit 04a6ff92afe2c590a465065135798c438d3f5511
Author: Norman Maurer <norman@apache.org>
Date:   Sat Feb 25 14:28:43 2012 +0100

    Add static helper methods to fire upstream events later. See #187 and
    #140

commit 301a17c029dd9f0a6539342ac8494781c4efd028
Author: Norman Maurer <norman@apache.org>
Date:   Sat Feb 25 14:19:11 2012 +0100

    Rename method to better reflect its usage and update some javadocs. See
    #187 and #140

commit c2bc463d611ee2f15ce6205cf7fecd0c4c69cb2b
Author: Norman Maurer <norman@apache.org>
Date:   Fri Feb 24 22:03:32 2012 +0100

    Optimize the handling of fireEventLater if the current thread is the
    worker thread. See #187 and #140

commit 5fdd2dea12e4eb4f3254886335509449796e087b
Author: Norman Maurer <norman@apache.org>
Date:   Fri Feb 24 20:26:50 2012 +0100

    Make it possible to schedule upstream events to get fired later in the
    io-thread. This is the first part of #140 and #187

commit 2304913341ef3f239e5509a46921a5c65bbbe360
Merge: 2e36932 aa3b3d4
Author: norman <norman@apache.org>
Date:   Tue Feb 21 08:28:01 2012 +0100

    Merge branch 'master' of github.com:netty/netty

commit 2e369320970a7531ec1ff94688d3d43045f0a814
Merge: eafd834 a715220
Author: norman <norman@apache.org>
Date:   Tue Feb 21 08:25:59 2012 +0100

    Merge branch 'master' into remove_duplication
    
    Conflicts:
    	transport/src/main/java/io/netty/channel/socket/nio/NioDatagramWorker.java
    	transport/src/main/java/io/netty/channel/socket/nio/NioWorker.java

commit aa3b3d4a5b84c7bd0ccaee00ce1d71cfa224fc9d
Merge: a715220 b3cc305
Author: Norman Maurer <norman@apache.org>
Date:   Mon Feb 20 23:05:34 2012 -0800

    Merge pull request #198 from boldt/code-cleaning
    
    Organized imports.

commit b3cc3055784c783f706a6277c18db299bc316415
Author: Dennis Boldt <github@dennis-boldt.de>
Date:   Tue Feb 21 03:06:26 2012 +0100

    Organized imports.

commit a715220556128b0bfee09ffcbf06ea19222a4ee9
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 20 16:04:46 2012 -0800

    Fix a compilation error with the SCTP module in Mac

commit 97b4876c08207ba8f7c16bcb7c1bae7864c88898
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 20 16:01:28 2012 -0800

    Fix build errors with m2e

commit 7bf049b1d41d5b96053f0ba41c68e29537043ab8
Merge: c5582a1 bb6d140
Author: Norman Maurer <norman@apache.org>
Date:   Mon Feb 20 02:56:00 2012 -0800

    Merge pull request #197 from echarles/master
    
    Fix compilation issue due to jdk bug in older jdk versions

commit bb6d1402200506db2145c52719fbc0bf769a21e2
Author: Eric Charles <eric.charles@u-mangate.com>
Date:   Mon Feb 20 10:28:40 2012 +0100

    Fix compilation issue due to jdk bug Inference fails for type variable return constraint, see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6302954

commit 6eabd343c4251880f4e0c3a17ff6dc98d3309658
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Mon Feb 20 01:39:42 2012 +0530

    SCTP association shutdown cleanup

commit eafd8343ebc66c4d71b678d456b080449b5a42d9
Author: Norman Maurer <norman@apache.org>
Date:   Sun Feb 19 13:59:09 2012 +0100

    Remove some casting. See #186

commit c5582a14b8b3d9700cf156baa277f008179ef24d
Merge: ebc7ae8 f3c1e14
Author: Norman Maurer <norman@apache.org>
Date:   Sun Feb 19 00:24:37 2012 -0800

    Merge pull request #194 from jabley/patch-2
    
    Fix checkstyle warning

commit ebc7ae809000d0edef4cecc825e5d306041ec983
Merge: fe1d51f 6d8daab
Author: Norman Maurer <norman@apache.org>
Date:   Sun Feb 19 00:23:29 2012 -0800

    Merge pull request #193 from jabley/patch-1
    
    Fix checkstyle warning

commit fe1d51f1d50c61c502fe28b7795d3f6b20da97a3
Merge: 479def2 0bb1fe2
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sun Feb 19 00:03:41 2012 -0800

    Merge pull request #185 from jestan/master
    
    Merge SCTP Transport Testsuite with netty/master.

commit 0bb1fe26565b5edc53a1bf34f418a35c9c81fbe7
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sun Feb 19 13:30:24 2012 +0530

    Skipped SCTP Transport tests in the build (Java SCTP is only available for Linux and Solaris)

commit 0148658bccfb2af89b140f5d520298c2071a0432
Merge: 7dbb8d2 6d7ab72
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sun Feb 19 12:40:30 2012 +0530

    Merge branch 'master' of github.com:jestan/netty

commit 7dbb8d2b8f5dfc232875bb37774e63eadfaf1021
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sun Feb 19 12:38:39 2012 +0530

    fixed checkstyle build failures

commit 20d7379c535326cd6ea94699be687853de04c82e
Merge: 4b99c4f 479def2
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sun Feb 19 12:37:50 2012 +0530

    merge upstream master

commit f3c1e143c1d1303392e613a3a89a264e53fd8da9
Author: James Abley <james.abley@gmail.com>
Date:   Sat Feb 18 23:22:52 2012 +0000

    Fix checkstyle warning

commit 6d8daabefe0b3ac874e3e50c546e9ac5deadef2a
Author: James Abley <james.abley@gmail.com>
Date:   Sat Feb 18 23:19:45 2012 +0000

    Fix checkstyle warning

commit 5557137dc033ea16e7b833d7d074e38c7fb400d8
Author: Norman Maurer <norman@apache.org>
Date:   Sat Feb 18 23:03:13 2012 +0100

    Fix checkstyle

commit 812a9026b88244ffb6f8c24ea827cc4454973f55
Author: Norman Maurer <norman@apache.org>
Date:   Sat Feb 18 23:02:56 2012 +0100

    Start to refactor nio transport to share more code. See #186

commit 65be9ebd44bb60b4921e11493f208407f64982e3
Author: Norman Maurer <norman@apache.org>
Date:   Fri Feb 17 20:33:18 2012 +0100

     Start to refactor oio transport to share more code. See #186

commit 479def20bdbba61f8ae0d2fb6c46e935761932da
Author: norman <norman@apache.org>
Date:   Fri Feb 17 10:37:41 2012 +0100

    Check if logging level is enabled before log. See #192

commit 6d7ab72479ba2144a806988caa79c08c402923d0
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Fri Feb 17 02:00:38 2012 +0530

    Corrected protocol identifier in SCTP test cases

commit 4b99c4f4f74f236bad80fdbcc48ccac122c8c063
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Fri Feb 17 01:52:24 2012 +0530

    1)set the selector select timout values equals to tcp nio transport
    2)removed unsupported sctp socket options from SctpChannelConfig classes
    3)added testcases for sctp multi homing and multi streaming

commit 97a38872f591a40c18c8e532aeb9772e01c749fd
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Fri Feb 17 01:47:24 2012 +0530

    added separate bind method in client bootstrap, to support multi homing in sctp

commit 1b099acde0231c6e2ae163f9c119e1b2f143283a
Author: norman <norman@apache.org>
Date:   Thu Feb 16 15:40:32 2012 +0100

    Introduce a new interface that specify methods for ChannelConfig that
    are used in the scope of NIO. This allows to share some code and make it
    easier later to cast. See #186

commit c46b083c1f0eb0f5e42baeb98f2cfc308c1bfb2a
Author: norman <norman@apache.org>
Date:   Wed Feb 15 08:30:22 2012 +0100

    Correctly decode URI in QueryStringDecoder. See #189

commit 46363095970e1bd8f6046414fcf15b41a9c25452
Author: Norman Maurer <norman@apache.org>
Date:   Sun Feb 12 12:36:04 2012 +0100

    Fix HttpSnoopClient. See #183

commit 22a37e548e63b9f1996093971ffcded631942cbe
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sun Feb 12 11:42:14 2012 +0530

    1)implemented defragmenting sctp frame decoder 2)implemented sctp netty testsuite

commit a29839863064e3facec0aac323f9cd908f54e572
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat Feb 11 23:04:25 2012 +0530

    added test timeout for SPDY echo test

commit fe3a480fb9ebfbb6698a9ddc4636943e7f4533d9
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat Feb 11 18:48:06 2012 +0530

    1)renamed sctp payload to sctp frame 2)added sctp codec, handler classes

commit a29d887c34537a49043d468f2eca64646c8dfecc
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat Feb 11 17:27:17 2012 +0530

    corrected sctp channel exception messages

commit 9b563c8a2829a43de19734b92a7eedd764a750d2
Author: Norman Maurer <norman@apache.org>
Date:   Sat Feb 11 12:52:56 2012 +0100

    SPDY Protocol HTTP Layer. See #184

commit 71fd0231da45dde42636f6647ba2d6ec18e4da0e
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Fri Feb 10 23:45:04 2012 +0530

    cleanedup the sctp notification handler

commit af943b7502f91aaa61a08f4df1c09fbe5f747702
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Fri Feb 10 23:33:59 2012 +0530

    fixed sctp write buffer watermark count

commit a07a7e6e7283cee7b54bf93ff81e5dafff8003b3
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Wed Feb 8 00:15:02 2012 +0530

    1)merge with upstream master multi module build 2)deleted outdated src dir

commit fd610f2f28eb7f53131cb71b981ed1b841d3feae
Merge: 3415285 dd27cd5
Author: Jestan Nirojan <nirojan@hsenidmobile.com>
Date:   Wed Feb 8 00:04:03 2012 +0530

    Merge remote branch 'upstream/master'

commit dd27cd510aa6999d691956326d3bc5c54f61b75b
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 7 18:13:13 2012 +0900

    Use getHeader() instead of getHeaders()

commit 29cafcf842f79d2dee7eee9359bd7f7c23e93d3b
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 7 17:41:12 2012 +0900

    Upgrade to netty-build v6

commit 3b31daf8a357b2e8b39e680538d2636f4282c528
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 7 17:26:55 2012 +0900

    Fix missing copyright headers

commit ae3e3e5abe40bcd24001c1937bdb0d5f55dbd1e9
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 7 15:30:41 2012 +0900

    Fix a problem with M2E plugin

commit bad9e83121c14b32e8fa2776239da0c68de9dd7c
Merge: 58e6bec f7a4a64
Author: Norman Maurer <norman@apache.org>
Date:   Sat Feb 4 08:37:29 2012 -0800

    Merge pull request #177 from cgbystrom/websocketx-chunkaggregator-fix
    
    Don't require HttpChunkAggregator to be present in pipeline for WS. See #177

commit 58e6bec3b1a85fb745012e0310cb366e72203c08
Author: Norman Maurer <norman@apache.org>
Date:   Sat Feb 4 17:31:53 2012 +0100

    Merge SPDY support from 3.2 branch. See #176

commit f7a4a646f878e69532cbce5a21a3236c67014232
Author: Carl Byström <cgbystrom@gmail.com>
Date:   Sat Feb 4 16:59:04 2012 +0100

    Don't require HttpChunkAggregator to be present in pipeline for Web Sockets.

commit 549546f944a6cdb0cfe03b1d7fa8aad0dafd7e15
Author: Norman Maurer <norman@apache.org>
Date:   Fri Feb 3 15:50:36 2012 +0100

    Remove the child Executor with the right method so it will also work
    when the channel is not the key.See #175

commit 6689063eef49e013e47d63ff0d81d8b13def9491
Author: Norman Maurer <norman@apache.org>
Date:   Thu Feb 2 15:24:30 2012 +0100

    HttpMessageEncoder should add Header "Transfer-Encoding: chunked"
    if HttpMessage.isChunked(). See #171

commit 1f6e96ed150c42be5484691675bf19c44ea67814
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 2 16:10:28 2012 +0900

    Forward-port the pull request #172 to fix #164

commit cd69bd4e2cc2be18b4aaa91cf7fe024c3a6a3135
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 2 15:52:06 2012 +0900

    Backport the pull request #174 to fix #163

commit 9c0aa0cf13f6591b5ac96cc1cd9517e0dbf8c73f
Author: Norman Maurer <norman@apache.org>
Date:   Tue Jan 31 20:53:46 2012 +0100

    FixedLengthFrameDecoder should used a optimizated initialSize when
    creating the cumulative ChannelBuffer. See #170

commit 02f49af3a1046ed1ab5d5d19e88962fcfc71da0b
Author: Norman Maurer <norman@apache.org>
Date:   Tue Jan 31 20:17:09 2012 +0100

    Allow to @override the cumulative ChannelBuffer creation. See #169

commit 5a91bd36c41e57a21d24d6024035283c2388a1ec
Author: Norman Maurer <norman@apache.org>
Date:   Tue Jan 31 19:19:10 2012 +0100

    Fix small typo

commit 28a8bb8b2ea49fed4f18a0aa9d1de9957bc83899
Author: Norman Maurer <norman@apache.org>
Date:   Tue Jan 31 15:50:35 2012 +0100

    Remove StaticChannelPipeline. See #168

commit fda1524953b1299030b328964b08c3b04597ab27
Author: Norman Maurer <norman@apache.org>
Date:   Tue Jan 31 15:45:42 2012 +0100

    Remove unused import

commit 8c6820be6403aff807932063682b602b0807eb29
Author: Norman Maurer <norman@apache.org>
Date:   Tue Jan 31 11:10:32 2012 +0100

    Fix possible NPE which will be thrown if the Buffer was set to null and after that Exception was thrown. See #166

commit dbc37c1e198c94e05a887a48d11a15e23c27bb58
Merge: 6c68773 4396b42
Author: Norman Maurer <norman@apache.org>
Date:   Thu Jan 26 06:20:49 2012 -0800

    Merge pull request #162 from ngocdaothanh/master
    
    Fix style check error for UnsafeDetectUtil.java

commit 4396b421f1ae3f6b25fc62e84672d6c0cc72d5ed
Author: Ngoc Dao <ngocdaothanh@gmail.com>
Date:   Thu Jan 26 23:01:51 2012 +0900

    Fix style check error for UnsafeDetectUtil.java

commit 6c68773ad40c822eb5b6388dc94a3fc84aebe36d
Author: Norman Maurer <norman@apache.org>
Date:   Tue Jan 24 20:47:30 2012 +0100

    Remove not-needed call of ByteBuffer.clear(). See #161

commit 245342d202524624dfe78e526addfcb9b5397cc7
Merge: b96768c 3822e8b
Author: Norman Maurer <norman@apache.org>
Date:   Tue Jan 24 08:03:57 2012 -0800

    Merge pull request #159 from jpinner/zlib_decoder_preset_dict
    
    ZlibDecoder preset dictionary

commit 3822e8b49ec69b4ab969572b6491144b56c603c5
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Sat Jan 21 16:11:34 2012 -0800

    Fix #157: ZlibDecoder does not support preset dictionary

commit b96768c9a6e305c0000242d67b9ced3e24b8e067
Merge: 40ef4d2 fbb1432
Author: Norman Maurer <norman@apache.org>
Date:   Thu Jan 19 12:22:48 2012 -0800

    Merge pull request #155 from jrask/android_unsafe_fix
    
    UnsafeDetectUtil checks that the Unsafe class has the field theUnsafe

commit fbb1432e8e545e4e739352a26e2886870146a7d7
Author: Johan Rask <johan.rask@jayway.com>
Date:   Thu Jan 19 16:14:00 2012 +0100

    UnsafeDetectUtil also checks that the Unsafe class has the field theUnsafe to make it work on Android platform.

commit 40ef4d2ccf6c05adeab111bc869eb59f36582213
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 19 13:33:37 2012 +0900

    Fix #153: Add ChannelFuture.rethrowIfFailed()

commit c1aa8b4c7bc3e4286e666b20f0ba3a6e939421fa
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 19 13:12:45 2012 +0900

    Clean up the new WebSocket package

commit 59e5f2f2623a0bb4af8012bc18aef3a47bb9704c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 17 18:37:15 2012 +0900

    Upgrade to netty-build-4

commit 3ca0705c59ebe25c212d963258fca71a8fdffc74
Merge: e9490dc 8533edc
Author: Norman Maurer <norman@apache.org>
Date:   Mon Jan 16 00:50:21 2012 -0800

    Merge pull request #152 from zhen9ao/gitignore
    
    ignore .idea folder

commit 8533edc30d04d82f2264fde59f6183110bc26c75
Author: zhen9ao <zhen9ao@gmail.com>
Date:   Mon Jan 16 16:01:00 2012 +0800

    ignore .idea/ folder

commit e9490dcaa4b97bdd899db7f337f587f4a37f644d
Merge: 783a7e5 2fff088
Author: Norman Maurer <norman@apache.org>
Date:   Sun Jan 15 22:51:13 2012 -0800

    Merge pull request #151 from zhen9ao/zhen9ao_fix
    
    Fix for issue #149

commit 2fff088480d05b8432fa9813478cd61bce8cf626
Author: zhen9ao <zhen9ao@gmail.com>
Date:   Mon Jan 16 12:52:08 2012 +0800

    fix for issue #149

commit 783a7e5f9a58a5d7583e70389fe32673940041ce
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jan 15 02:08:31 2012 +0900

    Fix all remaining checkstyle violations

commit 0007e919233ff86a3fbf8080029f5fe2d8e4a02e
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jan 15 01:09:17 2012 +0900

    RXTX -> Rxtx for consistent naming convention

commit b9b23663618bbf7eb27393a4f278f1ee0a0f6406
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jan 15 01:08:00 2012 +0900

    Fix checkstyle violations / Renaming RXTX -> Rxtx

commit a3efcaf04388b30a2d0b907b306f4c190b3abfcc
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jan 15 00:44:16 2012 +0900

    Add missing package-info.java

commit d40bd5e7f21a2d424a73f69d56e4dce77060b9dc
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jan 15 00:43:28 2012 +0900

    Rename IOStream example / Code cleanup

commit 4cff6b56ffc09390c104d572bb7b4590b574f5a4
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jan 15 00:31:02 2012 +0900

    Rename HTTP upload example classes for disambiguation

commit b7cfc6b7f0a7f1c360961d1c22aee28fc2066a7a
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jan 15 00:28:25 2012 +0900

    Rename HTTP snoop example classes for disambiguation

commit 1b02743367a045916f0d644a1fd50c1d2b7d38e7
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Jan 15 00:17:10 2012 +0900

    Overall code cleanup
    
    * Fixes based on checkstyle feed back
    * Simplify WebSocket client example (needs more work)
    * Rename Autobahn test server classes

commit 36bba6b29d1b8633d6ba951e33c54e035826377f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 13 20:49:18 2012 +0900

    Reverting the previous commit which makes no sense

commit b9386e7be83bc568e8283087c792e20eb248b82f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 13 20:48:18 2012 +0900

    Do not count a ChannelDownstreamEventRunnable
    
    * MATPE is only for upstream events.

commit fde6789f411b8f15c2e840103c4f18f898312c2e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 13 20:35:46 2012 +0900

    Cleanup / Modify MATPE to reject a downstream event

commit 958ffa50e363580b3e33b02fe100170674f3aef2
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 13 18:04:06 2012 +0900

    Make ChannelUp/DownstreamEventRunnable non-final / Move the classes in execution.filter to execution

commit 303c1b5f79c5cd335a4f90535d42c56b107c0261
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 13 17:41:18 2012 +0900

    Overall cleanup / Add lost old jzlib headers

commit e714ec12b882e1e112b1f175818a316152d73ca5
Author: norman <norman@apache.org>
Date:   Wed Jan 11 16:56:31 2012 +0100

    Remove close(..) call which gave us troubles with
    ClosedChannelException. See #142 and #138

commit 26bb9576da2e23f74f27dcf83843199051a14aab
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 11 21:02:46 2012 +0900

    Use a separate netty-build release

commit ca4b2ed800075639d13752efda062a73f2c42e66
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 11 20:30:13 2012 +0900

    Make netty-build independent from netty-parent
    
    * Also remove a unused file

commit 099e689338f3dea97fee51ef7b411b0250b78a88
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 11 20:22:54 2012 +0900

    Make build success with checkstyle violations temporarilly

commit 32dda06da35e3df0e1667133cf9b2b3a12ea74bc
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 11 20:19:01 2012 +0900

    Fix a compilation error

commit ebfc4513e0ba619592af3ba946bd1974d1becb55
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 11 20:16:14 2012 +0900

    Apply checkstyle to the build
    
    Please note that the build will fail at the moment due to various checkstyle
    violations which should be fixed soon

commit c38e6c77c2bfc652e02032dec6ffc87d80d0af04
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 10 12:48:24 2012 +0900

    Generate all-in-one JAR

commit 999343e8cf9f01c1f9ce926907b49534b1e6dff5
Author: Norman Maurer <norman@apache.org>
Date:   Sun Jan 8 21:54:31 2012 +0100

    Fix possible JavaDoc error in QueryStringEncoder. Type mismatch. See
    #139

commit 7c412848eff742c42c7aeccb69a172b3d716f7ca
Author: Norman Maurer <norman@apache.org>
Date:   Sat Jan 7 19:42:00 2012 +0100

    Fix NPE which is triggered if the destory method is called
    before channelOpen(..). See #143

commit 521bf83d0f39896f3c87c54bebd1e8c06e86b60b
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 30 17:58:51 2011 +0900

    Issue #141: hashdos security vulnerability in QueryStringDecoder and possibly other components
    
    * Limited maximum number of parameters to 1024 by default and made the
    limitation configurable
    * QueryStringDecoder is now able to handle an HTTP POST content

commit 8663716d38040537f6660cf2b81ee74549e0ab6d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 28 19:44:04 2011 +0900

    Issue #60: Make the project multi-module
    
    Split the project into the following modules:
    * common
    * buffer
    * codec
    * codec-http
    * transport
    * transport-*
    * handler
    * example
    * testsuite (integration tests that involve 2+ modules)
    * all (does nothing yet, but will make it generate netty.jar)
    
    This commit also fixes the compilation errors with transport-sctp on
    non-Linux systems.  It will at least compile without complaints.

commit 8ad4cd0528ff0dffd91ff2777ddcbb79869a5928
Merge: 7be8d05 0e449ed
Author: Vibul Imtarnasan <vibuli@gmail.com>
Date:   Sun Dec 18 13:56:10 2011 -0800

    Merge pull request #136 from veebs/WsTests
    
    More Web Socket tests from palmerabollo

commit 0e449ed70401c66701bf4f9d021486d0e99fc140
Author: vibul <vibuli@gmail.com>
Date:   Mon Dec 19 08:49:51 2011 +1100

    Change test names to web socket wire version

commit 132367539243b26b4cf86a01e6b9a164420dd6df
Merge: 7be8d05 8791376
Author: vibul <vibuli@gmail.com>
Date:   Mon Dec 19 08:33:42 2011 +1100

    Merge branch 'master' of https://github.com/palmerabollo/netty into WsTests
    
    Conflicts:
    	src/test/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker13Test.java

commit 8791376d8888e47c23ad90f4e540dfa73930b4a8
Author: Guido García <palmerabollo@gmail.com>
Date:   Sat Dec 17 00:39:11 2011 +0100

    Tests for web sockets hybi-00 and hybi-10
    
    Add tests for websockets specifications
    draft-ietf-hybi-thewebsocketprotocol-00 and
    draft-ietf-hybi-thewebsocketprotocol-10.
    
    Minor changes in javadoc.

commit 7be8d054612b224e56ea1b2c300a8296cd8bdf88
Author: norman <norman@apache.org>
Date:   Fri Dec 16 15:04:15 2011 +0100

    Remove comment

commit f7be7ba735a205b57b4b59c5220451b7290310a1
Author: norman <norman@apache.org>
Date:   Fri Dec 16 15:03:09 2011 +0100

    HttpPostRequestDecoder should handle "a&b=c" in
    application/x-www-form-urlencoded content. See #134

commit f05b7b0b7efe17d8eaeb6386f482c4b302588d8c
Merge: f977f47 c5d21f4
Author: Vibul Imtarnasan <vibuli@gmail.com>
Date:   Thu Dec 15 03:52:30 2011 -0800

    Merge pull request #132 from veebs/WebSocketVersion
    
    Changed tabs to spaces and added some docs for websocket packages.

commit c5d21f4cefa756932562a0c129bf4d74c7c2d9b3
Author: vibul <vibuli@gmail.com>
Date:   Thu Dec 15 22:42:13 2011 +1100

    Some more conversion of tab to spaces and doc update.

commit 073521d37d1bf1eb0ae81b53ba66954f9cb1bb20
Author: vibul <vibuli@gmail.com>
Date:   Thu Dec 15 22:25:40 2011 +1100

    Change tabs to spaces. Damn you auto code format!

commit f977f476cfdacaef624997b360ed8ff4a08f4a5c
Author: norman <norman@apache.org>
Date:   Thu Dec 15 09:41:08 2011 +0100

    Use ChannelEventRunnable where possible. #111

commit b0898646501aebb34608ad0cd372fab858b2a5d1
Author: norman <norman@apache.org>
Date:   Thu Dec 15 09:36:02 2011 +0100

    Add missing classes. See #111

commit af730c11f97d0baa321ea8fa782adfab577e5a59
Author: norman <norman@apache.org>
Date:   Thu Dec 15 09:34:30 2011 +0100

    Merge seda implementation with "generic" Executor. See #111

commit a6f5985aceba5942fdd547d592cb991521c97f6a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 15 17:01:37 2011 +0900

    Do not call setPipelineFactory() unnecessarilly

commit 62446827df079c8fc57d5c5dea915bca476eeb61
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 15 16:38:45 2011 +0900

    Fix #129: Memory leak when setOptions() fails while accepting a new connection

commit f779a4415cedcfa445777b186c8fe1d6341278df
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 15 16:37:21 2011 +0900

    Do not use ObjectStreamClass.lookupAny() to resolve interfaces
    
    Fixes #130

commit f38bf74f3ecd3c2ba29c39240dce573fa5083429
Merge: 9978d99 16bf84d
Author: Vibul Imtarnasan <vibuli@gmail.com>
Date:   Wed Dec 14 21:57:41 2011 -0800

    Merge pull request #128 from veebs/WebSocketVersion
    
    Use WebSocketVersion enum rather than string literal

commit 16bf84dac1ecaf5c5a893e056f1626e274ca165b
Author: vibul <vibuli@gmail.com>
Date:   Thu Dec 15 16:42:25 2011 +1100

    Use WebSocketVersion enum rather than string literal

commit 9978d999e794d45765f2de0f4c8e2a52b1895a21
Merge: f01d8a4 812a79f
Author: Vibul Imtarnasan <vibuli@gmail.com>
Date:   Wed Dec 14 21:18:11 2011 -0800

    Merge pull request #126 from veebs/WebSocketVersion
    
    Use websocket wire protocol version rather than specification version

commit 812a79fd526e6d7319371af46a9006520015f1b2
Author: vibul <vibuli@gmail.com>
Date:   Thu Dec 15 16:09:09 2011 +1100

    Use websocket wire protocol version rather than specification version

commit f01d8a484113681230bbe95d13484812ce9a5c42
Merge: 5398a52 7037d99
Author: Vibul Imtarnasan <vibuli@gmail.com>
Date:   Wed Dec 14 20:14:05 2011 -0800

    Merge pull request #123 from rshelley/master
    
    Added support for custom headers on websocket client connections

commit 7037d995c9f2ed447eb3f1286b3784fa1f858262
Author: Ryan Shelley <ryan.shelley@disney.com>
Date:   Wed Dec 14 19:00:36 2011 -0800

    Added support for custom headers to be added to websocket client connections

commit 5398a5274afbeec894080cea147c785fbd417ece
Merge: 8e78bd9 d9b14a0
Author: Vibul Imtarnasan <vibuli@gmail.com>
Date:   Wed Dec 14 18:27:52 2011 -0800

    Merge pull request #121 from veebs/MasterEasyMockTidyUp
    
    Removed compile warnings as displayed in Eclipse

commit d9b14a0b3735ef7bb60ea3048bcfbbf3318a3804
Author: vibul <vibuli@gmail.com>
Date:   Tue Dec 13 12:20:51 2011 +1100

    Removed compile warnings.

commit 8e78bd9db62cbebde8c884617841da992e677686
Merge: 86d3927 4092fd0
Author: Vibul Imtarnasan <vibuli@gmail.com>
Date:   Mon Dec 12 17:08:00 2011 -0800

    Merge pull request #119 from palmerabollo/master
    
    Test WebSocketServerHandshaker17

commit 86d39274c6c8fee6b1a9bb46ed552be4c659a3ae
Author: norman <norman@apache.org>
Date:   Mon Dec 12 14:59:34 2011 +0100

    Exclude scpt from the build for now until it is moved to an extra
    sub-module. See #120

commit a4bfc4011db5d1a2d4488db0355dffec9b9d2c13
Author: norman <norman@apache.org>
Date:   Mon Dec 12 13:18:27 2011 +0100

    Some cleanup and javadocs for the SEDA implementation. Also fixes a bug
    in the ExecutionHandler which I introduces while working on SEDA. See
    #111

commit 4092fd0efc9c0ecbec538c4a9a72047600b30876
Author: Guido García <palmerabollo@gmail.com>
Date:   Mon Dec 12 12:59:52 2011 +0100

    Test WebSocketServerHandshaker17
    
    Tests that the HTTP headers (SEC_WEBSOCKET_ACCEPT,
    SEC_WEBSOCKET_PROTOCOL) are ok in this version of the websocket
    protocol.

commit 75a641463922a15e54471bb760b2ed8c190f155f
Author: norman <norman@apache.org>
Date:   Mon Dec 12 08:41:50 2011 +0100

    Add FineGrainedSedaExecutor which makes it easy to use different
    Executors for different events. The idea is the same is in
    SimpleChannelHandler. See #111

commit b9e869545cffbe2f2ff259085205fbcb5f25aa2d
Author: norman <norman@apache.org>
Date:   Mon Dec 12 08:21:53 2011 +0100

    Add special subclasses of MemoryAwareThreadPoolExecutor and
    OrderedMemoryAwareThreadPoolExecutor which should be used for SEDA
    processing. See #111

commit 34152857ce1ffc6232ddcbc9e79939112e49ddb1
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sun Dec 11 23:08:47 2011 +0530

    merged with upstream master

commit 7397bba454f6879e7423edaa6a7cce29586a4c77
Merge: e4642f5 5be24a0
Author: Vibul Imtarnasan <vibuli@gmail.com>
Date:   Sun Dec 11 03:07:47 2011 -0800

    Merge pull request #117 from veebs/WSTidyUp
    
    WebSocket tidy up

commit 5be24a0943200098c011d2d5a39319131a6a8341
Author: vibul <vibuli@gmail.com>
Date:   Sun Dec 11 21:55:36 2011 +1100

    Improve encoder/decoder "replace" in Web Socket Client handshake.

commit dc1655890edb1573ac65630d6cfb8b930f5defae
Author: vibul <vibuli@gmail.com>
Date:   Sun Dec 11 21:13:26 2011 +1100

    Removed io.netty.example.http.websocket because
    io.netty.codec.http.websocket has been removed.

commit 7438a9ac87ee6a8a1007931ccb65bc166af2c53b
Merge: 5b9aa76 e4642f5
Author: vibul <vibuli@gmail.com>
Date:   Sun Dec 11 21:09:15 2011 +1100

    Merge remote-tracking branch 'upstream/master'

commit e4642f557f92301032a195c677b03a6ecf9e0ebb
Merge: 427b784 0f0f7b7
Author: Vibul Imtarnasan <vibuli@gmail.com>
Date:   Sun Dec 11 02:07:22 2011 -0800

    Merge pull request #115 from ngocdaothanh/master
    
    Use channel instead of context and cleanup unused method argument

commit 5b9aa76efd2530c4ea1ac417966ec9374fbae516
Author: Ngoc Dao <ngocdaothanh@gmail.com>
Date:   Sun Dec 11 12:13:20 2011 +0900

    Fix #116

commit 209ad9278f4403f9b35d07e8923e8951537a676a
Author: Ngoc Dao <ngocdaothanh@gmail.com>
Date:   Sun Dec 11 08:47:07 2011 +0900

    Use channel instead of context and cleanup unused method argument

commit 427b784c6e9acd658024dc86b7906482b0dd2d71
Author: Norman Maurer <norman@apache.org>
Date:   Sun Dec 11 09:21:29 2011 +0100

    DefaultChannelPipeline.replace() does not correctly replace a
    ChannelHandler if name is preserved. See #113

commit 0f0f7b7fa92a7c194effb1e2c800838ea507d3da
Author: Ngoc Dao <ngocdaothanh@gmail.com>
Date:   Sun Dec 11 12:13:20 2011 +0900

    Fix #116

commit a225fdeea5a087b30628ca4916b41ad460da150c
Author: Ngoc Dao <ngocdaothanh@gmail.com>
Date:   Sun Dec 11 08:47:07 2011 +0900

    Use channel instead of context and cleanup unused method argument

commit 5c4702245c5c5eb4aca27595fb077627324e7e66
Author: Norman Maurer <norman@apache.org>
Date:   Sat Dec 10 21:28:18 2011 +0100

    Start to add handler for simple SEDA support. This handler supports to
    offload upstream and downstream events. The SedaExecutor is responsible
    for offload the events to different Executors. See #111

commit c5917075921b393f9af86e9ca81354149b1e0338
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 19:05:14 2011 +0900

    Attach Javadoc (it really works this time)

commit 37f9d16b89ce3cbfcb4efcf1ee18040f9928fae0
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 18:38:49 2011 +0900

    Attach Javadoc

commit 85d94a0c4fa57881c89b3db70ab87ea1497a8447
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 18:24:31 2011 +0900

    Attach Javadoc to sync with the central repo

commit c07a9846711e26899ae84028a9c161f5c59eb893
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 15:47:19 2011 +0900

    Add maven-gpg-plugin to sync with the central repo

commit 5351bdcdff6cbb0b8c548e50709a453f72585cf8
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 15:22:00 2011 +0900

    Add developers section to pom.xml

commit 2efed0d6b1555040595fb0e51da5164d13dadcf2
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 15:11:53 2011 +0900

    No need to specify a default value

commit 07f2c2e7da1e96504c541d3785dc3d3913e57027
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 14:58:36 2011 +0900

    Better handshaker naming / Remove deprecated example / Hide UTF8 classes from users

commit 82aa0969e2e4a3b3ab916004e1050a1c1921cc5d
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 14:49:10 2011 +0900

    Add organization info

commit 91681b5150abece6d7c252a0f97a607d366fe1eb
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 14:43:52 2011 +0900

    Do not expose @author and @version

commit 54b8b501ee600bb3b7f91e5e04dcd8df3af183e6
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 14:39:58 2011 +0900

    Remove old websocket package

commit 679f33a986a7a0563da624c245b244fcc8daaf1b
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 14:28:48 2011 +0900

    More copyright updates

commit be64e2531fc16cebfb707318a02786ca874bdc2f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 14:24:33 2011 +0900

    Regenerate LocalTimeProtocol

commit 69346bff47d65549b05603305aa1dd84c4c9e088
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 14:20:43 2011 +0900

    Build tarball only

commit 9f41a5a1f8d62c3810eb7266948b0273c838ef84
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 14:18:34 2011 +0900

    Update license header / Remove JBoss style

commit 31cff01b712dfd9ba2c02aa46e6feb3dde64cb64
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 14:05:23 2011 +0900

    Moving to SLF4J

commit a254bf41e747649f311844ce2475889fd349e215
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 13:59:41 2011 +0900

    Fewer JBoss reference

commit 7f25d9d81a9fb3462f5254c169cfee768799cb23
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 13:52:46 2011 +0900

    Remove outdated UML / Fix image URL / etc
    
    * Instead of UML diagrams, we will focus on netty-book project
    * We are moving to SLF4J so we don't need jboss-beans.xml

commit 59f39cae756aac25c711b293f2f0b987fce09245
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 13:43:34 2011 +0900

    Remove @author and @version / Remove COPYRIGHT.txt
    
    * The new copyright header replaces @author
    * COPYRIGHT.txt is irrelevant to us now.

commit 015daec3fa565bf28471fcf8f382e4471e651155
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 12:46:59 2011 +0900

    http://jboss.org/netty/ to http://netty.io/

commit 7518e9852501ed5cda45f88ce0d3671eeb866631
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 12:40:29 2011 +0900

    org.jboss.netty -> io.netty

commit 6fdb7d91165f7e82c5608c07ee911bc9b6fcdf5a
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 12:38:59 2011 +0900

    org.jboss.netty -> io.netty

commit 84902a6e7a15356f37e0d66f4ec7d254d7c206fd
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 12:26:45 2011 +0900

    Update compiler options

commit 6d307734f1d93a646d92ec50c055d0b3109ef7ac
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 12:24:14 2011 +0900

    Update enforcer rules and project URL

commit 57b5c204333bcc9bdab7b6b10029b0ef261c8673
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 11:51:34 2011 +0900

    Change groupId to io.netty / inherit Sonatype OSS

commit 2a764d9d9fce2bb29ca8f2d494ad480e1a0b513c
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 9 11:37:00 2011 +0900

    Make build independent from JBoss.org M2 repository

commit 7d9879d5cc2a380ac1ac9ac81e52e2d5d97065aa
Author: norman <norman@apache.org>
Date:   Thu Dec 8 14:34:30 2011 +0100

    Only create UnsafeDynamicChannelBuffer if really needed. See #108

commit 229c8734ed7ac4517dc49b41c7957c1f40f661bc
Author: norman <norman@apache.org>
Date:   Thu Dec 8 14:27:43 2011 +0100

    Fields in ReplayingDecoder does not need atomic nature. See #108

commit 27f9a0cee22a79324b04af98c6c32d85174f9a63
Merge: 2f6c438 49c797f
Author: Norman Maurer <norman@apache.org>
Date:   Wed Dec 7 11:37:42 2011 -0800

    Merge pull request #105 from mariusaeriksen/master
    
    Always cleanup() in ReplayingDecoder if we have received any messages at all.

commit 49c797fb3eaec7a4557aab0d17b54f2c1d2d38f1
Author: marius a. eriksen <marius@twitter.com>
Date:   Wed Dec 7 09:15:44 2011 -0800

    ReplayingDecoder: keep explicit track of cleanup state.
    
    This fixes a bug introduced by 1f3d35bd whereby cleanup() won't get
    run if the cumulation buffer was emptied.  This is important for
    codecs like HTTP: In particular, empty 200 OK responses without a
    Content-Length header would fail to decode.

commit 2f6c4383d67b59fc28ae863a41632a0d2a872d2b
Merge: 5cb865c 0a99e8b
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Wed Dec 7 11:05:37 2011 -0800

    Merge pull request #31 from jestan/master
    
    merged the sctp transport implementation with upstream master

commit 0a99e8bb57fcf7f6cf09548a06c32d050b63c409
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Thu Dec 8 00:27:23 2011 +0530

    prepared merge with upstream

commit f62bb850ec83df1c9b3e7c799c2f7869619ee420
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Thu Dec 8 00:14:04 2011 +0530

    fixed a typo in a getter method

commit 2f5f149b5295df9a0c77d5be5c238b947e9820bd
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Thu Dec 8 00:07:55 2011 +0530

    1)added some documentaion comments 2)minor refactoring

commit 84f6f7d6178b0ecee9160aa6fbabf1ece87ab7a9
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Wed Dec 7 23:32:48 2011 +0530

    updated license in sctp classes

commit 68379140c49a7fcb94fe6e85014e6816ac75d50f
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Wed Dec 7 23:24:08 2011 +0530

    removed svn rev headers from sctp classes

commit 724ca7a913d0206fa109ed0382588bbf6d13740c
Merge: 40e6a73 5cb865c
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Wed Dec 7 23:17:11 2011 +0530

    merged with master

commit 40e6a73e94d26b83f1b4d4209d206fa7f60c1791
Merge: 78c949f 3379a4c
Author: Jestan Nirojan <nirojan@hsenidmobile.com>
Date:   Wed Dec 7 22:53:33 2011 +0530

    Merge branch 'master' of github.com:jestan/netty

commit 5cb865c4ce265b0a573965315a2b0c37ff024145
Author: norman <norman@apache.org>
Date:   Wed Dec 7 13:14:42 2011 +0100

    Use AtomicInteger.class ClassLoader for Unsafe dection. See #102

commit 766525431dc34cc5634ad76412b0780f5051addf
Author: norman <norman@apache.org>
Date:   Wed Dec 7 12:08:39 2011 +0100

    Rename the old LinkedTransferQueue to LegacyLinkedTransferQueue and fork
    the "current" implementation of LinkedTransferQueue (from Doug Lea).
    Introduce a QueueFactory which will load the right implementation
    depending on the JVM version. This will make sure that the one with the
    best performance is choosen and the code also works with java 5. See
    #102

commit 51f69877a6728deb39cc3b6d2592fc5b79a5e834
Author: norman <norman@apache.org>
Date:   Wed Dec 7 07:57:56 2011 +0100

    Fix compile errors

commit cc761ae786a2050380e3f88a7ba045fff2490114
Author: norman <norman@apache.org>
Date:   Wed Dec 7 07:54:15 2011 +0100

    Allow to set/get an attachment on a Channel without the need of
    ChannelLocal. See #101

commit 3379a4c25dd0c0ee757c2d9ece1ca7f8c824e55e
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Tue Dec 6 19:40:22 2011 +0530

    1)replaced all netty link transfer queue by java 7 link transfer queue to avoid high cpu usage 2)optimized selector loop

commit a9a713ddcf85b728dcf24f814d7f37fb133c563f
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Dec 3 20:02:25 2011 +0900

    Remove DocBook from build

commit 4a4e46b83babb7426d9e8bce482c1edc682e92d2
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Dec 3 19:54:11 2011 +0900

    Separate the user guide out of the project.

commit e3fdab81ed00f2391dccc18c8a441b6e32ca3497
Merge: 0d5c7d3 55940f5
Author: Vibul Imtarnasan <vibuli@gmail.com>
Date:   Fri Dec 2 12:08:27 2011 -0800

    Merge pull request #98 from veebs/MasterPOM
    
    Added fix for m2eclipse error "Plugin execution not covered by lifecycle configuration"  in pom.xml.

commit 55940f500e1f8c7cb160429dada416c2c776dfe2
Author: vibul <vibul@ubuntu.(none)>
Date:   Fri Dec 2 15:29:14 2011 +1100

    Added fix for m2eclipse error "Plugin execution not covered by lifecycle configuration"  in pom.xml.  See issue #87.

commit 78c949f282f0eedff079a41f222834ac42457548
Merge: 460237d 0d5c7d3
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Fri Dec 2 03:39:09 2011 +0530

    Merge remote branch 'upstream/master'

commit 460237d3f3bae4290817b96466047a15906c4ea9
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Fri Dec 2 00:15:09 2011 +0530

    changed the visibility of ctx, event in channel event runnable, so execution handler implementers can have a down stream execution handler for SEDA

commit 0d5c7d3d2e8a0de5aa48ecfc3bb761e90c633026
Author: norman <norman@apache.org>
Date:   Thu Dec 1 14:12:24 2011 +0100

    Make sure the cumulation Buffer is only created if really needed. See
    #88

commit 55e7a85160e3702f9f3a46f31268797f896bb8dc
Merge: 2a0a63e 18344fb
Author: Norman Maurer <norman@apache.org>
Date:   Thu Dec 1 04:15:38 2011 -0800

    Merge pull request #95 from CruzBishop/task-61
    
    .gitignore update, some task documentation, removal of @version tags

commit 18344fbc9060c35ad0ae2c60006d8893316711b1
Merge: ec9bcbd 2a0a63e
Author: Cruz Bishop <cruz@massive-dynamics.biz>
Date:   Thu Dec 1 21:36:44 2011 +1000

    Merge branch 'master' of https://github.com/netty/netty into task-61

commit ec9bcbd5531775a74e114c56d4cd341195edf2c9
Author: Cruz Bishop <cruz@massive-dynamics.biz>
Date:   Thu Dec 1 21:34:25 2011 +1000

    Removed @version tags and did some documentation
    
    Some test classes are now documented

commit 2a0a63e1bb4627c2f503c43cf524c68565c0b205
Author: norman <norman@apache.org>
Date:   Thu Dec 1 09:39:48 2011 +0100

    Remove the usage of AtomicLong as this only confuse users. The Handler
    is not suited for re-use anyway. See #93

commit 47af6bc9e8962c638d4aa37c41f928841731222c
Author: norman <norman@apache.org>
Date:   Thu Dec 1 08:43:44 2011 +0100

    Encode FileRegion to ChannelBuffer's everytime the handler is called.
    The user should add/remove it on the fly for better performance. See #89

commit 73b89a2b1f06d51b6fde74add3f256fd36592457
Merge: 040b74f 9d3828b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 30 23:26:51 2011 -0800

    Merge pull request #80 from netty/OMATPE-refactoring
    
    Replace synchronization with an lock free approach

commit 62f28766945e5bffae9e86e89127d2baeaab5873
Author: Cruz Bishop <cruz@massive-dynamics.biz>
Date:   Thu Dec 1 17:17:19 2011 +1000

    Ignore "geany" files
    
    These files are generated by the IDE that I use now

commit 040b74f7641c91dc6e299e932234fb787167e0b1
Merge: 7b71d43 461837e
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 30 22:50:20 2011 -0800

    Merge pull request #92 from motlin/master
    
    Fixes from static-analysis tools

commit 7b71d43688bcfea3a951134c7903f0211b75016f
Merge: d2278a7 6fbc168
Author: Vibul Imtarnasan <vibuli@gmail.com>
Date:   Wed Nov 30 20:57:30 2011 -0800

    Merge pull request #85 from veebs/WebSocketV17
    
    Support for WebSocket Hybi V17 and Autobahn test V.0.4.3

commit 461837e14b59092c6cb1b746275fa5c4ace8dafa
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Mon Nov 14 19:14:06 2011 -0500

    Remove unnecessary concatenation with empty strings.

commit 7ddf1b1ae132fe2581ca948d2f122ee5e8096c66
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Mon Nov 14 19:12:19 2011 -0500

    Remove unnecessary 'return' statement.

commit 9d3828bbe91d7bc7aad6e34c719c4591593be84d
Author: Norman Maurer <norman@apache.org>
Date:   Wed Nov 30 20:14:57 2011 +0100

    Use LinkedTransferQueue for OMATPE

commit d2278a7d53b14680f56fbe37921c613ffeedabe1
Author: norman <norman@apache.org>
Date:   Wed Nov 30 13:45:51 2011 +0100

    Make sure ChannelFutureAggregator is thread-safe and only hold the lock
    as short as possible. This also change it to lazy init the HashSet that
    holds the ChannelFuture's. See #90

commit da3a52778b2b19138431914f1fc53aaf0dd959dd
Author: norman <norman@apache.org>
Date:   Wed Nov 30 13:38:07 2011 +0100

    Add FileRegionEncoder which will take care of encode the FileRegion to
    ChannelBuffer if necessary. See #89

commit 2ab42e5bde64d9695cf5602989bcf44fe9122f0b
Author: norman <norman@apache.org>
Date:   Wed Nov 30 10:47:41 2011 +0100

    Replace tab by spaces

commit ce1e48dc746fbb16e6d5b34c18ef55f09fb89824
Author: norman <norman@apache.org>
Date:   Wed Nov 30 10:46:32 2011 +0100

    Remove reflection code which is not needed anymore because the next
    major version of netty will require java6

commit f6baf157dfd49d655ba7285b788648d77d8f481b
Author: norman <norman@apache.org>
Date:   Wed Nov 30 10:27:09 2011 +0100

    Remove "isEmpty()" check as this may be really expensive (need to
    traverse all elements in the queue)

commit 6fbc168cbf0f682c722b728ef9d1d091506c909f
Author: Veebs <vibuli@gmail.com>
Date:   Tue Nov 29 10:19:47 2011 +1100

    Update example websocket client to use V17

commit 181355665be56f8c52e871ff0561de770abaa9e8
Author: Veebs <vibuli@gmail.com>
Date:   Tue Nov 29 10:12:42 2011 +1100

    Fixed formatting.

commit 48addae927fa38fe6fb13392be95545b8488a0f2
Author: Veebs <vibuli@gmail.com>
Date:   Tue Nov 29 09:45:13 2011 +1100

    Added support for Hybi V17 and run against Autobahn V0.4.3

commit 8efe131eb0881e8c39eca1e537006224be1ef6da
Author: Veebs <vibuli@gmail.com>
Date:   Mon Nov 28 22:27:58 2011 +1100

    Fix closing handshake and run against Autobahn V0.4.3

commit ccbe3dd2f86fb312be5bb6216f04517378303183
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat Nov 26 02:52:01 2011 +0530

    1)tested sctp with IBM JDK 7 2)fixed NPE on sctp notification event constructor 3)added maven exec plugin

commit 1bb3322268b26a2efb0a965e5982b12ce5510cb1
Author: norman <norman@apache.org>
Date:   Fri Nov 25 14:03:17 2011 +0100

    Catch InterruptedException and interrupt the current Thread so we
    at least give someone the chance todo something about it.

commit e68aa06dfa374c52270555ec62d695b565dd927d
Author: norman <norman@apache.org>
Date:   Fri Nov 25 14:00:56 2011 +0100

    Revert committed change which I added by mistake

commit 6b7b822f721e7f8f72cef71bf2aa01d5d1002ee3
Author: norman <norman@apache.org>
Date:   Fri Nov 25 14:00:17 2011 +0100

    Revert "Make OrderedMemoryAwareThreadPoolExecutor lock free"
    
    This reverts commit caa925198e8eca352d5b679e38311d6c3ba33aef.

commit 24f5379ee4963df8d94df9526602a4bdcdc19a6e
Merge: 263f2fe a382149
Author: norman <norman@apache.org>
Date:   Fri Nov 25 09:37:58 2011 +0100

    Merge branch 'master' of ssh://git@github.com/netty/netty.git

commit 263f2fe98ba9dd72dc618ddba57b7d141920fc22
Author: norman <norman@apache.org>
Date:   Fri Nov 25 09:13:37 2011 +0100

    Make it easier to issue the handshake when SslHandler is used in a
    client. See #84

commit a382149bba690626e8f64c67d87f4f293525b8bc
Author: Norman Maurer <norman@apache.org>
Date:   Thu Nov 24 11:32:05 2011 +0100

    Catch InterruptedException and interrupt the current Thread so we at least give someone the chance todo something about it.

commit 2686dc99b42046eb6f5fbe08ff628bef7da612a2
Author: norman <norman@apache.org>
Date:   Thu Nov 24 11:13:54 2011 +0100

    Add some TODO

commit 9f712e3291565fa357a959b26dbe77da59691aa8
Author: norman <norman@apache.org>
Date:   Thu Nov 24 11:07:16 2011 +0100

    Replace synchronization with an lock free approach

commit caa925198e8eca352d5b679e38311d6c3ba33aef
Author: norman <norman@apache.org>
Date:   Thu Nov 24 09:51:49 2011 +0100

    Make OrderedMemoryAwareThreadPoolExecutor lock free

commit bbd251baed34001bdf8590811dba70f231e6c732
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 24 12:16:31 2011 +0900

    Fix build errors

commit 5abd23d3baf1f3c5be2b92c267df926c4bc46877
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 24 10:54:01 2011 +0900

    Upgrade depepdencies to the latest versions
    
    * Regenerate LocalTimeProtocol.java with the latest protoc
    * Add an instruction on how to generate LocalTimeProtocol.java
    * Not upgrading maven-bundle-plugin, which has a regression in 2.3.5:
      * https://issues.apache.org/jira/browse/FELIX-3058
    
    Conflicts:
    
    	src/main/java/org/jboss/netty/example/localtime/LocalTimeProtocol.java

commit e015456ae103d4add48c3297c25432f8cd3d26dd
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 24 10:22:21 2011 +0900

    Add missing license headers

commit 8debdb59e42f46b09616686173b57f0c2afc8012
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 24 10:18:31 2011 +0900

    Fix weird repo mess

commit b6f8b5871c6092a42edce07a543da6f6d352e38b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 24 10:15:51 2011 +0900

    Rename ClassloaderClassResolver to ClassLoaderClassResolver

commit 946d4be69ebe607ae4488087cd515759b3c724a1
Author: norman <norman@apache.org>
Date:   Wed Nov 23 13:47:59 2011 +0100

    Add constructors to make it possible to backport it to 3.2 without
    breaking the api

commit 971a7364f6ed0de95865e42bd42342d3e7504916
Merge: b5f8ff3 cee5ee5
Author: Norman Maurer <norman@apache.org>
Date:   Wed Nov 23 03:55:35 2011 -0800

    Merge pull request #75 from alepar/master
    
    ObjectDecoder performance optimization

commit cee5ee5679de2a8900afe9bbf05f973ace08ce71
Author: alepar <alepar@gmail.com>
Date:   Wed Nov 23 15:18:43 2011 +0400

    now able to resolve array types to classes

commit 800a9fc20d7258275f687b29ef8eddea3f944192
Author: alepar <alepar@gmail.com>
Date:   Wed Nov 23 14:48:42 2011 +0400

    making interface public, so that others can implement it jic

commit b5f8ff300398a959feca80ffc99910ad27fa02cc
Merge: 2dafb3d c9a2472
Author: Norman Maurer <norman@apache.org>
Date:   Tue Nov 22 22:08:31 2011 -0800

    Merge pull request #73 from ngocdaothanh/master
    
    QueryStringDecoder should also support ; Fix for #72

commit 2dafb3d91bb8c113c38997c9b61812240afc197e
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 23 14:07:26 2011 +0900

    Add a missing colon

commit 1daf3c80c667d4779bd6e5b47d92fd13deb86289
Merge: 01c4565 3ecb93e
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 23 14:02:57 2011 +0900

    Merge branch 'master' of github.com:netty/netty

commit 01c45650aa834b19f362367a3fd558e6df1b0679
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 23 14:01:30 2011 +0900

    Add a missing close(SelectionKey) call
    
    * Without calling close(SelectionKey), the client boss loop can fall
    into an infinite loop.

commit cdbaeb86b07580858f6006207c5313dc573591fe
Author: alepar <alepar@gmail.com>
Date:   Wed Nov 23 02:57:32 2011 +0400

    adding class resolver with disabled cache, fixing unit tests

commit c9a24729bdde00e2bbd0bed5e307af16db71e1c3
Author: Ngoc Dao <ngocdaothanh@gmail.com>
Date:   Wed Nov 23 04:14:10 2011 +0900

    Fix #72

commit 3ecb93eadeaaf4df065862709dc4b456bd5a7f66
Author: Norman Maurer <norman@apache.org>
Date:   Tue Nov 22 17:29:54 2011 +0100

    Include the name which was the cause of the IllegalArgumentException while try to add a handler to the pipeline

commit 7e6d07afaf057df683a48901f23aff55a117588e
Author: alepar <alepar@gmail.com>
Date:   Tue Nov 22 18:16:30 2011 +0400

    use weak cache as default cache - it doesn't break class unloading
    providing multiple implementations for caching, each good for its own specific use-case

commit 99e9da1e75188bf78f71d5b89e627c8372212cde
Author: alepar <alepar@gmail.com>
Date:   Tue Nov 22 18:09:37 2011 +0400

    sharing classResolver cache across all CompactObjectInputStream's in the same way, as we did in ObjectDecoder

commit deb61aa0219af6693c18b702d93a0ed57d4cd4ed
Author: alepar <alepar@gmail.com>
Date:   Tue Nov 22 17:33:54 2011 +0400

    extracting class resolving role to separate interface

commit c7cea76d2fb550507f87fd350bd731cbb6929f08
Author: alepar <alepar@gmail.com>
Date:   Tue Nov 22 15:54:59 2011 +0400

    moving classLoader selection to constructor

commit dd567e059f6d45361c4cf2734bbf670daf6f6d32
Author: alepar <alepar@gmail.com>
Date:   Tue Nov 22 15:51:14 2011 +0400

    there's a more general exception in the throws list already

commit b858fab8d7cd58971dc22f9b4b1d86c260054339
Author: alepar <alepar@gmail.com>
Date:   Tue Nov 22 15:50:52 2011 +0400

    loadClass() already queries the cache, so no point in redoing it in resolveClass()

commit 0850449b096218c1bf1c5de5e9603ff490f8efcb
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 22 18:37:36 2011 +0900

    Consistent fail-fast property
    
    * DelimiterBasedFrameDecoder and LengthFieldBasedFrameDecoder must
    expose the fail-fast option consistently
    * Renamed failImmediatelyOnTooLongFrame to failFast

commit 1ac6c75d39114a89dcc13cd712eb907b9938c2d8
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 22 16:32:01 2011 +0900

    Clean up
    
    * Static variables should come before member fields
    * Removed unused members

commit 5c2c8d9d1d0e3df6e01ad776ede9692ab294e913
Merge: 1e0dee3 e8766c4
Author: Norman Maurer <norman@apache.org>
Date:   Mon Nov 21 21:28:25 2011 -0800

    Merge pull request #70 from jeffgriffith/master
    
    Modification to allow multiple boss threads in client

commit e8766c4ba6f40dec8f5b03392ac4881dad757d24
Author: Jeff Griffith <jeffery.griffith@synchronica.com>
Date:   Mon Nov 21 16:08:11 2011 -0500

    Added default num bosses const.

commit 0d0764d082b35b1b9bf3aac555abd1e18bf31957
Author: Jeff Griffith <jeffery.griffith@synchronica.com>
Date:   Mon Nov 21 15:03:18 2011 -0500

    Allow for multiple client boss threads.

commit cb41cf293fd8af88dac71e6c2855917d9e957f4a
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sun Nov 20 14:07:25 2011 +0530

    minor refactoring

commit 319ca93330ddce10e8512f601c333c0151e4457a
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sun Nov 13 16:08:02 2011 +0530

    1)refactored sctp server channel config classes 2)added sctp server channel buffer size setter/getters 3)updated sctp examples

commit 1e0dee3e9b52a1861ead11c3dfaada8cbedd16fd
Merge: 6adeda2 9461b31
Author: Vibul Imtarnasan <vibuli@gmail.com>
Date:   Sat Nov 12 19:57:42 2011 -0800

    Merge pull request #54 from veebs/WebSocketSSL
    
    Added checks to make sure expected system properties are present for WebSocket SSL example

commit 9461b31edd6d60207a7cf2a050f6f7028430e803
Author: Veebs <vibuli@gmail.com>
Date:   Sun Nov 13 14:42:59 2011 +1100

    Added checks to make sure expected system properties are present.

commit 6adeda249357c4ea6f20e541274ff3595f0e0cc0
Merge: 2e39719 3b0eb64
Author: Vibul Imtarnasan <vibuli@gmail.com>
Date:   Sat Nov 12 17:53:32 2011 -0800

    Merge pull request #53 from veebs/WebSocketSSL
    
    Added WebSocket Server with SSL example app

commit 3b0eb64f1c3160c2029c4cb3defa5953241bbf28
Author: Veebs <vibuli@gmail.com>
Date:   Sun Nov 13 12:38:18 2011 +1100

    WebSocket Server with SSL example app

commit 2e3971953bf34cd42a59370cb784330b71382324
Merge: 0b3a685 b6dc30b
Author: Norman Maurer <norman@apache.org>
Date:   Sat Nov 12 11:20:49 2011 -0800

    Merge pull request #52 from motlin/master
    
    Fixes from static-analysis tools.

commit b6dc30b37ba27490be767da972a666274ec7e1c9
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Sat Nov 12 13:25:27 2011 -0500

    Inline redundant local variables.

commit ab6109057252055aa7800ca9cfe15274f55aea5f
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Sat Nov 12 13:23:40 2011 -0500

    Simplify redundant 'if' statements.

commit f0520dad20e82ddd0d8a80e24e34d7d2a35f0151
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Sat Nov 12 13:19:37 2011 -0500

    Remove unnecessary calls to 'super()'.

commit 9b9ee79f27f1019d7e3f1a29cc311e312c933cc1
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Sat Nov 12 13:15:33 2011 -0500

    Remove unnecessary 'return' statements.

commit d073e1d14dd9f89b61d502ce372c565c23487e8d
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Sat Nov 12 13:14:39 2011 -0500

    Replace constant array creation expression with array initializer.

commit e84571a5f2f3f3f410a8ff510490b52a29c8c40a
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Sat Nov 12 13:14:16 2011 -0500

    Remove unnecessary semicolons.

commit f9a19517d5333a07faa05d21d3385bbd3e830738
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Sat Nov 12 13:09:12 2011 -0500

    Remove redundant type arguments.

commit 41d488419472d7bdc96150c7c75a503272148f62
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Sat Nov 12 13:08:00 2011 -0500

    Remove redundant array creations.

commit 0b3a685f9540bd691f8fe3b8a3085608e19412fb
Merge: 1a6f836 f641e25
Author: Norman Maurer <norman@apache.org>
Date:   Sat Nov 12 01:03:02 2011 -0800

    Merge pull request #51 from motlin/master
    
    Fixes from static-analysis tools.

commit f641e25735a2c6c939d2b4be94ede83b6ea993fd
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Wed Nov 9 22:09:25 2011 -0500

    Remove redundant 'final' from static methods.

commit f78a60df7d6409aa42875a25caa78aacf48f6ac9
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Wed Nov 9 21:51:50 2011 -0500

    Remove redundant 'final' method in 'final' class.

commit 1213dc5acea07ac2de3b3994a13476cda95a237e
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Wed Nov 9 21:49:44 2011 -0500

    Remove unnecessary enum modifier.

commit 1c698494bba63a9365751e5f1c1be99fa74ade20
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Wed Nov 9 21:45:42 2011 -0500

    Make inner classes static where possible.

commit 6f857d271c4afd8388da9c3231b718be849e639e
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Wed Nov 9 21:42:17 2011 -0500

    Make fields static where possible.

commit f84a9e1c52d72df240975ab0a9832c14d69eb458
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Wed Nov 9 20:41:11 2011 -0500

    Add missing @Override annotations.

commit 1a6f8369ea63beb44ed27f56dece954ddba1e4b5
Author: norman <norman@apache.org>
Date:   Fri Nov 11 08:51:00 2011 +0100

    Revert changes of pull request #45

commit d760b4cffe7ec818cc94009ecf2788ab01b0e7c2
Author: norman <norman@apache.org>
Date:   Thu Nov 10 09:16:34 2011 +0100

    Remove empty method which I forgot to remove before

commit 3856f99c03fe75e3e574d70058e4f427d007f428
Author: norman <norman@apache.org>
Date:   Thu Nov 10 09:15:16 2011 +0100

    Make failImmediatelyOnTooLongFrame configurable via a constructor

commit 193acdb36cd3da9bfc62dd69c4208dff3f0a2b1b
Merge: b3b0968 c2417c2
Author: Norman Maurer <norman@apache.org>
Date:   Wed Nov 9 23:30:39 2011 -0800

    Merge pull request #25 from aaronriekenberg/master
    
    Add failImmediatelyOnTooLongFrame option to DelimiterBasedFrameDecoder and LengthFieldBasedFrameDecoder

commit b3b096834cafc7f348583786d71567e9fa001b55
Merge: 85119dd 9aa81cd
Author: Norman Maurer <norman@apache.org>
Date:   Wed Nov 9 11:38:46 2011 -0800

    Merge pull request #45 from sunng87/master
    
    Fix NETTY-452, add an option for whether to count length field into packet length or not

commit 85119dd2fb5e1beded86d31ea302b6c1eaf08e9f
Merge: 5e92567 1fdab7b
Author: Norman Maurer <norman@apache.org>
Date:   Wed Nov 9 05:45:56 2011 -0800

    Merge pull request #49 from motlin/master
    
    Fixes from static-analysis tools.

commit 1fdab7bb956dab560dcc07a1f6ac3ffa4f41c13c
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Wed Nov 9 08:33:45 2011 -0500

    Make fields final where possible.

commit 8d6d2f038ec6d936b935357a7d65a6e2697d4095
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Mon Nov 7 22:18:48 2011 -0500

    Remove redundant no-arg constructors.

commit 13eb416b0645211e1ad3727f599db56cd5208afc
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Sun Nov 6 21:13:55 2011 -0500

    Remove redundant 'final' modifier from private methods.

commit b38cb5c081d2c2c28c5ba23bc8c27d5507b1d39f
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Sun Nov 6 20:59:28 2011 -0500

    Fix problems in Javadoc references.

commit 5e925677c469507f1c94be32d659dc0d823b571e
Author: Norman Maurer <norman@apache.org>
Date:   Wed Nov 9 14:03:44 2011 +0100

    Declare field final

commit 7820731a16c19e7ed4c24ab9a9cf3053813569a7
Merge: cc472c5 152ea47
Author: Norman Maurer <norman@apache.org>
Date:   Wed Nov 9 04:53:48 2011 -0800

    Merge pull request #47 from jpinner/ignore_httponly_cookies
    
    ignore HttpOnly as a cookie name instead of throwing exception

commit 152ea47d48a77beeb9bdc6a8595509af6707bf96
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Tue Nov 8 12:03:23 2011 -0800

    make cookie decoder behavior configurable via a constructor argument

commit fae46dabf19c13fc784776dd4f1f95cee5d2c87b
Author: Jeff Pinner <jpinner@twitter.com>
Date:   Mon Nov 7 12:03:34 2011 -0800

    ignore HttpOnly as a cookie name instead of throwing exception

commit cc472c55ebf81119c54a99f8a43b8c7a58f65024
Merge: 53b055f dab76e2
Author: Norman Maurer <norman@apache.org>
Date:   Mon Nov 7 03:20:50 2011 -0800

    Merge pull request #46 from CruzBishop/channelbuffer-boolean
    
    Boolean operations in channel buffers (fix for NETTY-344)

commit dab76e266c935635b8ac22e017edd87b55b8ed59
Author: Cruz Bishop <cruzjbishop@gmail.com>
Date:   Mon Nov 7 21:13:45 2011 +1000

    Added tests

commit 507b9d0b701b6e3c4b6ff7a27c51e0f20a8670cf
Author: Cruz Bishop <cruzjbishop@gmail.com>
Date:   Mon Nov 7 21:07:54 2011 +1000

    Boolean operations in channel buffers
    Adds getBoolean(index), readBoolean(), writeBoolean(value), setBoolean(index, value)
    Fixes https://issues.jboss.org/browse/NETTY-344

commit 53b055fc1006b35320a5cba626980d101e78da6e
Merge: 1f3d35b c27af72
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 6 21:53:50 2011 -0800

    Merge pull request #44 from motlin/master
    
    Remove unnecessary interface modifiers.

commit 9aa81cd08385702fd684e7bb1cc447617ff51247
Author: Sunng <classicning@gmail.com>
Date:   Mon Nov 7 13:35:37 2011 +0800

    fix typo

commit 1f3d35bd348511ddf0d7014f883afa38312eae65
Author: Norman Maurer <norman@apache.org>
Date:   Sun Nov 6 20:35:23 2011 +0100

    release replaying decoder cumulation buffer after firing upstream

commit c27af721b0c6d4416feed191526c5f14a966bc49
Author: Craig P. Motlin <cmotlin@gmail.com>
Date:   Sun Nov 6 11:54:21 2011 -0500

    Remove unnecessary interface modifiers.

commit 47a3783d6cb0c09ee6c78c2e461bcb58fe879387
Merge: cc758aa 8df2524
Author: Norman Maurer <norman@apache.org>
Date:   Sat Nov 5 23:51:33 2011 -0700

    Merge pull request #42 from CruzBishop/LocalAddressCompareFix
    
    Small fix for LocalAddress.compareTo

commit 8df2524bb0661d3f99a5552af297e5e47ce5d715
Author: Cruz Bishop <cruzjbishop@gmail.com>
Date:   Sun Nov 6 08:08:18 2011 +1000

    Small fix for LocalAddress.compareTo when both this and o are ephermal

commit 942b746d730566001301f8edc774d571bcbbf175
Author: Sun Ning <classicning@gmail.com>
Date:   Sat Nov 5 22:09:27 2011 +0800

    add an option in LengthFieldBasedFrameDecoder for whether to count the length field into frame length.

commit cc758aa3b638459272dc64031389bd02d60a2001
Author: Norman Maurer <norman@apache.org>
Date:   Sat Nov 5 08:45:33 2011 +0100

    Fix event firing in OioAcceptedSocketChanel which I broke before

commit d176f4ae83fd4fd50bffaec50e28c46314a1009c
Author: Norman Maurer <norman@apache.org>
Date:   Fri Nov 4 19:28:15 2011 +0100

    Replace tabs with spaces

commit 5094bdc0cc302e2702525c40dfe1f735549f5a52
Author: Norman Maurer <norman@apache.org>
Date:   Fri Nov 4 19:18:28 2011 +0100

    Replace tabs with spaces

commit b82ee7341c200ef430f04efe8260419b45279519
Author: Norman Maurer <norman@apache.org>
Date:   Thu Nov 3 20:33:32 2011 +0100

    IOStreamAddress is Serializable so add SerialVersionUID field

commit 2449f0354077bcf18a0f7f4c012d51093c579cef
Author: Norman Maurer <norman@apache.org>
Date:   Thu Nov 3 20:32:23 2011 +0100

    Remove not used SerialVersionUID fields

commit 57a6d390144e3653a3c7f11da40603a6d251432d
Author: Norman Maurer <norman@apache.org>
Date:   Thu Nov 3 19:19:00 2011 +0100

    Replace tabs by spaces

commit 220d95fe0d396821f08329fffd96edc1b47c37c1
Merge: 31b319a 84ed71d
Author: Norman Maurer <norman@apache.org>
Date:   Thu Nov 3 07:36:20 2011 -0700

    Merge pull request #37 from normanmaurer/master
    
    Safe construction via factory method

commit 31b319a5dc531d8c02c400d312ab9e85e90e614b
Author: Norman Maurer <norman@apache.org>
Date:   Thu Nov 3 11:25:24 2011 +0100

    Release the cumulation buffer after firing upstream so we don't end up
    with a "leak" because of a very big ChannelBuffer. This patch is
    extracted of the pull request 39. Thanks to arya for the patch

commit 84ed71d42dd951d7be5b14d37bcf56f383ecb965
Author: Norman Maurer <norman@apache.org>
Date:   Wed Nov 2 19:17:10 2011 +0100

    Use safe-construction when calling fireChannelOpen() etc. This code is
    based on the code of the following pull request:
    https://github.com/netty/netty/pull/18
    
    It just make it apply again to current master

commit 56462ef91a6481c2926dbebadebc114c08a81a8b
Author: Norman Maurer <norman@apache.org>
Date:   Tue Nov 1 20:09:38 2011 +0100

    Encoder and Decoder that wrap and unwraps the array of bytes. See
    NETTY-357

commit 72427716882ee4166d9186a0570922184e92d827
Merge: bb5bbdc 69d16c0
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Oct 31 15:22:47 2011 -0700

    Merge branch 'master' of github.com:netty/netty

commit bb5bbdc99e6f68e59aec6215f12a5f7774f10012
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Oct 31 15:19:50 2011 -0700

    Upgrade to JUnit 4.10

commit 08b509b2094f565ce03c5ef92760ff5646d101a0
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sun Oct 30 19:44:11 2011 +0530

    1)refactored sctp socket option implementation
    2)tested sample sctp program under 20,000 msg per sec

commit 6766513157ed267ba262fbe09968320b756e8b2b
Merge: b22c7e4 69d16c0
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sun Oct 30 13:50:02 2011 +0530

    Merge remote branch 'upstream/master'

commit 69d16c0382026074fc3449f2ba403454fc84abc1
Merge: bdc31e1 418df7e
Author: Vibul Imtarnasan <vibuli@gmail.com>
Date:   Sat Oct 29 22:47:13 2011 -0700

    Merge pull request #36 from veebs/master
    
    Added webbit to NOTICE file

commit 418df7e9bf7a61f6d950ed46265d127174de1b32
Author: Veebs <vibuli@gmail.com>
Date:   Sun Oct 30 16:41:32 2011 +1100

    Added webbit in NOTICE

commit bdc31e160354fa219c4d6019fe16d9a59f4f912d
Merge: aa5510e a017961
Author: Norman Maurer <norman@apache.org>
Date:   Sat Oct 29 20:29:28 2011 +0200

    Merge branch 'master' of ssh://git@github.com/netty/netty.git

commit aa5510e3b289a8044593bfd173a0f762bf1842ef
Author: Norman Maurer <norman@apache.org>
Date:   Sat Oct 29 20:27:58 2011 +0200

    Remove in favor of IOStreamChannelFactory

commit a01796116818af22c21a95e26813b4df3f3dcec9
Merge: c7886a5 07803b3
Author: Norman Maurer <norman@apache.org>
Date:   Sat Oct 29 11:06:02 2011 -0700

    Merge pull request #22 from pfisterer/master
    
    UPDATED: Channel(Sink) implementation for connecting to InputStream and OutputStream objects

commit c7886a59522ad88eaba6ade07706e3f224187752
Merge: a67e550 e79d572
Author: Vibul Imtarnasan <vibuli@gmail.com>
Date:   Wed Oct 26 17:23:13 2011 -0700

    Merge pull request #26 from veebs/master
    
    Web Socket HyBi 10 support

commit e79d5720d394bc2a0f0669367bbe36568ee54a0b
Author: Veebs <vibuli@gmail.com>
Date:   Thu Oct 27 10:34:37 2011 +1100

    Added webbit license and credits

commit a67e5502078f7dc03b0faa53d2965d5c257e0399
Author: Norman Maurer <norman@apache.org>
Date:   Tue Oct 25 19:58:21 2011 +0200

    Merge changes back from 3.2 branch which fixes a deadlock in the
    SslHandler. See NETTY-443

commit 2ae095f92cf856193debdf355a98144bf2c36059
Author: Norman Maurer <norman@apache.org>
Date:   Mon Oct 24 20:04:16 2011 +0200

    Fix some unused imports and warnings

commit e9f97d66624d8bd07ff6e51069cc5582166e79bb
Author: norman <norman@apache.org>
Date:   Mon Oct 24 12:53:53 2011 +0200

    Fix formatting

commit 6dce4098d71247a226a8a763ddc06e6ac0af08e8
Author: norman <norman@apache.org>
Date:   Mon Oct 24 08:25:59 2011 +0200

    ChannelLocal nows removes Channel instances from itself once the Channel
    was closed. This is configurable via a constructor parameter to allow
    the
    user to choose the old behavior. The default is the new one. See
    NETTY-447

commit a2f440454521c6e58396fa99a8edc4531616a9b6
Author: Norman Maurer <norman@apache.org>
Date:   Sun Oct 23 19:33:30 2011 +0200

    Fix authors

commit 0fbe65b0763ff2f835a38825fff98d995a8946fb
Author: Norman Maurer <norman@apache.org>
Date:   Sun Oct 23 19:32:00 2011 +0200

    Add the StreamHandler which can be used to adapt old blocking io network
    code to netty. See NETTY-307

commit 579ddf72fc7c02373584e8729e8fc77474ae25ad
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Oct 22 22:34:03 2011 -0700

    Fix NETTY-432 HttpContentEncoder should not encode if Content-Encoding is set already and it is not 'identity'
    
    * Replace getTargetContentEncoding() and newEncoder() with beginEncode() to avoid duplicate content detection and to provide a more flexible way to reject an encoding request

commit b944531b5e2ff68cbd26a73455b20e4e4a61ee9d
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Oct 22 21:51:38 2011 -0700

    Simpler constructor form should appear first

commit 114ddd9a62acd30577af5283316edc1280641b5f
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Oct 22 21:47:08 2011 -0700

    Clean up FileRegion and its implementation changes
    
    * Fix broken javadoc tags
    * Remove unnecessary public modifier
    * Reorder method
    * Make releaseAfterTransfer immutable

commit 3b7f55dc355d1c77134e813382e348d7bbea2d81
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Oct 22 20:53:19 2011 -0700

    Testing e-mail notification (2)

commit ce3240d3a4dc6830f88f673c14108175c2136918
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Oct 22 20:51:43 2011 -0700

    Testing e-mail notification

commit c8271a2e1d0f8f746150df55e0d1d71ee1fd7a4b
Merge: 0d78c05 c641f24
Author: Norman Maurer <norman@apache.org>
Date:   Sat Oct 22 11:31:46 2011 -0700

    Merge pull request #33 from normanmaurer/master
    
    Only release FileRegion if configured to do so. See NETTY-440

commit c641f24e8f947f4b17854f984693bdf0462bce74
Author: Norman Maurer <norman@apache.org>
Date:   Sat Oct 22 20:27:48 2011 +0200

    Only release FileRegion after transfer was done if its configured to do
    so. The default is true in the master branch. See NETTY-440

commit 0d78c0508da9babeb6825a9d6335535e15cf716d
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Oct 21 15:36:06 2011 -0700

    NETTY-439 Call channelBound/Connected from worker
    
    * Move channelBound() to RegisterTask
    * Simplify the if block in RegisterTask

commit 68c9b0feeb64c1f45b38c18fd8e48cab1f27aed1
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Oct 21 13:54:07 2011 -0700

    Fix NETTY-445 Memory leak in SslHandler
    
    * Ensure SSLEngine.closeInbound() and closeOutbound() is called on
    handshake failure.
    * Ensure connection is closed when a closure request is issued and
    handshake failed.

commit 8fb34a4717a477675d86778a94474a9f624a865f
Merge: 9dac941 6dd7733
Author: Norman Maurer <norman@apache.org>
Date:   Fri Oct 21 09:18:42 2011 -0700

    Merge pull request #32 from normanmaurer/master
    
    Push fixes from 3.2 branch to master

commit 6dd77331ed3364aedcb6da627e6919f2ede232a7
Author: norman <norman@apache.org>
Date:   Fri Oct 21 18:11:06 2011 +0200

    Add support for FileRegion in OIOWorker. See NETTY-441

commit c6e0162887e7652f7ff4bffebfa288d7d78333b0
Author: norman <norman@apache.org>
Date:   Fri Oct 21 18:06:00 2011 +0200

    Make sure FileRegion.releaseExternalResources() is called after the
    write was done. See NETTY-440

commit 783e7562c7621e673a11f4bc39fea0a3e0482919
Author: norman <norman@apache.org>
Date:   Fri Oct 21 18:04:18 2011 +0200

    Fire ChannelConnected events in a Worker Thread. See NETTY-439

commit 7328cfe58f1f08b89eadda84ac6ce59d6501f1c9
Author: norman <norman@apache.org>
Date:   Fri Oct 21 17:56:43 2011 +0200

    Commit javadocs update which was previous committed to the 3.2 branch

commit b4b3d98f3787eb212b45f0e6f4e089e38fc67e54
Author: Veebs <vibuli@gmail.com>
Date:   Mon Oct 17 16:49:35 2011 +1100

     Added more example package documentation.

commit 12d93cca292cb97d4b5e8ee7a7ada0b6ba840961
Author: Veebs <vibuli@gmail.com>
Date:   Mon Oct 17 16:49:19 2011 +1100

    Fixed web service client. Added more package documentation.

commit c60b1e28cbd8ff65ef2c4b611ca43f7892e23ec2
Author: Veebs <vibuli@gmail.com>
Date:   Mon Oct 17 15:12:37 2011 +1100

    Forgot to checkin AutoBahn echo server for testing.

commit 10b88ceaa0035502453a53fad6c0b3a4958490bd
Author: Veebs <vibuli@gmail.com>
Date:   Mon Oct 17 13:58:44 2011 +1100

    AutoBahn tests 9 working. All done :-)

commit beb56878e415daa73132726662ec17381e1759ed
Author: Veebs <vibuli@gmail.com>
Date:   Mon Oct 17 13:48:42 2011 +1100

    WIP. AutoBahn tests 6 working. Needed to check if final string is UTF-8 compliant.

commit 234952a516636af734a40180423cce352df903ec
Author: Veebs <vibuli@gmail.com>
Date:   Sun Oct 16 23:39:27 2011 +1100

    WIP. AutoBahn tests 1-5 working. Some tests in 6 and 9 still failing.

commit 91796814ebb043958c9d100de166ecefea7a7556
Author: Veebs <vibuli@gmail.com>
Date:   Sun Oct 16 21:02:14 2011 +1100

    Used codec implementation of Base64 encoding. Thanks to Steven Osborn (steve918)

commit 6f9a886a36854af8f9e0761b81001a2fad0e7ad3
Author: Veebs <vibuli@gmail.com>
Date:   Sun Oct 16 17:01:24 2011 +1100

    Test against AutoBahn WebSocket testsuite. Work in progress

commit b22c7e4a08ea3d2a0f50a1b6f1bba26af8afdc52
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Fri Oct 14 00:35:14 2011 +0530

    1)refactored sctp server channel config 2)removed unsupported sctp socket options

commit 7057c59f3d56210dfb9267c8c0a7275e8c647463
Author: Veebs <vibuli@gmail.com>
Date:   Thu Oct 13 16:54:08 2011 +1100

    Fixed bug in static file server timestamp comparision before sending back a 304 Not Modified. Only compare upto seconds.

commit f8b96fe6b818048e233eccc571736430dfe967ea
Author: Veebs <vibuli@gmail.com>
Date:   Thu Oct 13 10:17:49 2011 +1100

    Support for FireFox websockets. They use window.MozWebSocket rather than window.WebSocket.

commit a20a2c1e171b1fe5d1135a9b08e1eb86475a658e
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Thu Oct 13 01:55:51 2011 +0530

    1)implemented sctp socket options 2)refactored SctpChannel,SctpServerChannel & sctp factory impls

commit 9dac941544268fee707294b7a3018dc4167f20c0
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Oct 10 20:47:32 2011 +0900

    NETTY-438 Re-enable SSL re-negotiation by default
    
    * Re-enabled renegotiation
    * Updated Javadoc

commit 509edd86f405fc749bdafad8ea86d9866bf7a102
Author: Norman Maurer <norman@apache.org>
Date:   Fri Sep 30 22:14:36 2011 +0200

    Add patch of NETTY-434 to the mix to fix Deadlock in
    ChunkedWriteHandler. This patch was not written by me...

commit 6ee328678444db0da52c9b29e03f8875dd608de6
Author: Evan Meagher <evan.meagher@gmail.com>
Date:   Mon Oct 3 20:54:10 2011 -0700

    Fix wording in "Summary" section.

commit 79d660ca91592cf758203986aabf44a206617b36
Author: Evan Meagher <evan.meagher@gmail.com>
Date:   Mon Oct 3 20:53:45 2011 -0700

    Fix wording in "Advanced Components for More Rapid Development" section.

commit 490fc249f8fe659b79514f96158f87702eed837f
Author: Evan Meagher <evan.meagher@gmail.com>
Date:   Mon Oct 3 20:39:18 2011 -0700

    Fix wording in "Interceptor Chain Pattern" section.

commit 4ea375362f0783608be99e573e9a8e59d07499ce
Author: Evan Meagher <evan.meagher@gmail.com>
Date:   Mon Oct 3 20:32:59 2011 -0700

    Fix wording in "Universal Asynchronous I/O API" section.

commit 0d6a5e004dec4cca2d3fee2c521c64f6a608ad0f
Author: Evan Meagher <evan.meagher@gmail.com>
Date:   Mon Oct 3 20:30:40 2011 -0700

    Fix wording in "Rich Buffer Data Structure" section.

commit 8f25312be8adc7aac81104b2699a5cc67aef7285
Merge: 2fe247b 9f1c394
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Mon Oct 10 03:34:46 2011 +0530

    Merge remote branch 'upstream/master'

commit 2fe247b4aca07cd17d55e7e49e14ab72711f7131
Merge: 60f5b42 7b09f85
Author: Jestan Nirojan <nirojan@hsenidmobile.com>
Date:   Mon Oct 10 03:23:04 2011 +0530

    Merge branch 'master' of github.com:jestan/netty

commit 60f5b426930d60d815acc0308f22e437ecd759ef
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Mon Oct 10 03:14:54 2011 +0530

    Merge branch 'master' of github.com:jestan/netty

commit 7b09f85d84a54010cac0e7e850d4e750f2c4da0a
Merge: a6d16da 094834d
Author: Jestan Nirojan <nirojan@hsenidmobile.com>
Date:   Mon Oct 10 03:14:54 2011 +0530

    Merge branch 'master' of github.com:jestan/netty

commit a6d16daa0837d1cc8c324c7edebf2a8640eaa86f
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Mon Oct 10 02:58:20 2011 +0530

    1)added sctp echo example 2)refactored sctp channel impl classes

commit 094834d9bfe128945612f3e84a0aa8e2e9a56f07
Author: Jestan Nirojan <nirojan@hsenidmobile.com>
Date:   Mon Oct 10 02:58:20 2011 +0530

    1)added sctp echo example 2)refactored sctp channel impl classes

commit 33f548a8ae2b988c8d316de8b4d3e6957c32b446
Author: Veebs <vibuli@gmail.com>
Date:   Mon Sep 26 23:07:22 2011 +1000

    Added example ping/pong and closing frame.

commit aa72c987e73827687b9c5921c20afabccc9c03e8
Author: Veebs <vibuli@gmail.com>
Date:   Mon Sep 26 22:51:15 2011 +1000

    WebSocket hybi 10 support

commit 9f1c39469787d53a4071b661622a72902156e313
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 26 13:24:17 2011 +0900

    Fixed a compilation error in the example

commit c2417c253c48bac942decfe923743d2b09d63a5f
Author: Aaron Riekenberg <aaron.riekenberg@gmail.com>
Date:   Sat Aug 20 20:11:28 2011 -0500

    Cleanup failIfNecessary, fix comment.

commit f474fc609af1d401b601d2370ba0756b64654b1d
Author: Aaron Riekenberg <aaron.riekenberg@gmail.com>
Date:   Sat Aug 20 19:58:23 2011 -0500

    Add failImmediatelyOnTooLongFrameOption.

commit 2fc18a00f6ac61a365b73dd498dd2e38f1efa823
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 19 11:11:16 2011 +0900

    Added a TooLongFrameException recovery test for DelimiterBasedFrameDecoder

commit f4ebcf7aed4ffff825beec67b47d3a8d99712936
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 19 11:05:24 2011 +0900

    NETTY-435 LengthFieldBasedFrameDecoder fails to recover from TooLongFrameException
    
    * Fixed a bug where TooLongFrameException is not raised immediately when the large frame was fully decoded at the first attempt
    * Fixed a bug where LengthFieldBasedFrameDecoder does not reset its state completely after raising TooLongFrameException

commit 83ad5fb07ebb19ae1e47a3e157a5eb146cfeba22
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 12 15:20:43 2011 +0900

    Fixed a compilation error

commit d6ea072ccc75c42030a1b8a380d7bbf32b6e1e52
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sat Jul 16 11:58:40 2011 -0700

    Fix NPE when non chunked message with a large variable

commit 6b3b3b74265c97c33186440d10b97822adc662c7
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sat Jul 16 11:54:38 2011 -0700

    Fix of NPE when non chunked large variable is created

commit dbb239203460253f84b0f848b8f05e3b6e11a2fd
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 12 14:03:48 2011 +0900

    NETTY-431 HashedWheelTimer's TimerTask may execute after call to Timeout.cancel()
    
    * Replaced a volatile boolean flag and system date access with an atomic integer flag.

commit 35258a5393cc7840bc9af0d1dcd3c47ea58e2fa0
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 12 13:39:18 2011 +0900

    NETTY-430 ChunkedWriteHandler NPE

commit 6156922ad6d8d2c4965dbdd10f4f2b65b13b9e76
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 3 21:25:20 2011 +0900

    NETTY-429 IllegalArgumentException when an HTTP server sends a '100 Continue' response to HttpContentDecoder.
    
    * Fixed a silly coding mistake where I sent the event in the opposite direction

commit 88d84c537c15c7e3e6154ac7ed18b792d0b4d3c8
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 2 15:38:58 2011 +0900

    NETTY-428 SslHandler does not trigger an exceptionCaught event for some handshake failure cases.
    
    * Made sure SslHandler.handshake() and SslHandler.close() trigger an exceptionCaught event when failed

commit 21269fa073a0587a75de83c0705985f98dac6128
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 2 15:09:12 2011 +0900

    SSLEngine.beginHandshake() can throw a RuntimeException.

commit dc0498d82bf059fb503936a7b4e8a163d75ea851
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 2 09:47:11 2011 +0900

    NETTY-408 ChunkedStream generates 1-byte chunks for wrapped input streams that does have sane implementation of available() method
    
    * Updated JavaDoc so that users don't specify an InputStream with poor available() implementation.

commit 73d1f3fe02982fa243f8afe55ab0ea92057690c4
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 2 09:33:27 2011 +0900

    NETTY-384 Another deadlock in ChunkedWriteHandler
    
    ChunkedWriteHandler.discard() do not issue write requests to trigger exceptionCaught events and to notify write futures anymore.  Instead, it triggers exceptionCaught events and notifies write futures by itself.  Therefore, no write lock is involved during discard(), avoiding the reported dead lock.
    
    However, this is a temporary solution, and eventually Netty must introduce more robust event thread model.

commit d72b89db218d64e0115ab9491009f0d2dc7e7535
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 2 08:47:56 2011 +0900

    NETTY-422 Add getPipeline() to CodecEmbedder so that a user can modify the pipeline dynamically.

commit 59a349031afdad36edc1e8635435bdb97a21a7b5
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 2 08:43:10 2011 +0900

    NETTY-423 Add ChannelPipeline.getNames()

commit 5c62d54c677a94e0e8a1e48ab4aab04eaa775d09
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 2 08:34:56 2011 +0900

    NETTY-420 HttpClientCodec doesn't handle HEAD requests with Transfer-Encoding: chunked responses
    
    * Reverted back the workaround for servers that sends unnecessary zero-byte chunk in a HEAD response because it actually breaks the codec when the server that conforms to the RFC.

commit bdeed00bbb52b9f733d289cfe0ef2ed45ff2d99e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 2 08:22:02 2011 +0900

    NETTY-419 ObjectEncoder/ObjectDecoder fails with NPE when deserializing the java.lang.Class instance of an interface type
    
    * Fixed a bug where deserializing an interface class fails due to wrong lookup.
    * Implemented class lookup caching

commit 6f7d2f4e236a082c32a4610f99892d8b04e0ef10
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 2 07:47:36 2011 +0900

    NETTY-417 client channel still open after close and wait
    
    * Fixed a bug in SslHandler where a write attempt made after SSLEngine is closed result in unnotified future.  Fixed by respecting the case where SslEngineResult.Status == CLOSED

commit c6fa82729c0d956a3df8971f37bf6a369b355aee
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 2 07:38:16 2011 +0900

    NETTY-417 client channel still open after close and wait
    
    * Fixed a race condition where NioSocketChannel's state variable is updated *after* its close future is notified
    * Removed unnecessary use of ChannelFutureListeners in NioSocketChannel and AbstractChannel

commit e85996ea466f635391c7d4e72f829bd1644ef093
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 2 07:19:57 2011 +0900

    Fixed a bug where the future associated with the close request is not notified when the channel was closed already when SslHandler attempts to send a closure_notify.
    
    This shouldn't be a problem to most applications because they usually do not specify their own future object for the close request.

commit 46c9a5f094725b49e36dc1a39d5a756ece106722
Author: Felix Trepanier <felix-etienne.trepanier@nokia.com>
Date:   Mon Aug 1 17:00:00 2011 -0400

    do not encode if empty content

commit 5579a91e1d83d6a9f43b11978e6af6fad26395d3
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 2 06:35:38 2011 +0900

    NETTY-415 ChannelFuture.setFailure() not called when exception thrown handling Channel.close()
    
    * Made sure the ChannelFuture associated with a downstream event is marked as failure when an exception is raised before it reaches at ChannelSink.

commit 07803b3e2c463b9ad5c1b82c747cb04e7bffb4c0
Author: pfisterer <github@farberg.de>
Date:   Mon Aug 1 10:07:34 2011 +0200

    Updated version of netty-iostream channels

commit 95f3af0a02c664f4a73c7ba4f1a32c11aecd28f0
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 1 06:11:14 2011 +0900

    NETTY-418 isCompleteFailure() and isCompleteSuccess() are both true at the same time
    
    * Fixed incorrect isPartialSuccess(), isPartialFailure(), isCompleteFailure() implementation

commit acb1ac84e6e737ac934dcc148f247dc02ffcc796
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 1 04:28:08 2011 +0900

    NETTY-425 ChannelBuffers.compare does not handle unsigned bytes correctly
    
    * Fixed a bug where signed comparison is made where unsigned comparison is expected

commit dfd7b0d6c3ecfcf7a44463899383d7390b905d0e
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 1 04:16:02 2011 +0900

    NETTY-426 Prevent a user from reusing an upstream MessageEvent to write
    something
    
    Modified the pipeline implementations so that it rejects the attempt to
    send an UpstreamMessageEvent to downstream

commit 4bf26c31e97790d89d312edfdd9022bf07c952be
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 1 04:00:01 2011 +0900

    NETTY-410 NioWorker write deadlock
    
    Applied the patch provided by Greg Dhuse.

commit b9ef785b5be33306028aa34be07c4847031f2ce1
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 1 03:46:22 2011 +0900

    NETTY-406 ProtobufEncoder should also support Message.Builder
    
    * Added support for Message.Builder

commit e2655f3c3834af8c68fc470987a5cabc6eb03ae0
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 1 03:39:06 2011 +0900

    NETTY-389 java.lang.ClassCastException: org.jboss.netty.channel.FileRegion cannot be cast to org.jboss.netty.buffer.ChannelBuffer
    
    * Updated JavaDoc to let users know that not all transports support FileRegion
    * Added FIXME for future improvement

commit 2acd74db83df1bf54832b749ed92b13866caa7a3
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 1 01:32:55 2011 +0900

    NETTY-410 NioWorker write deadlock
    
    Applied the patch provided by Greg Dhuse.

commit 8982838ab2a1341f9a8c5b0e7a39d3ee15b6dfd3
Author: Jamie Furness <jamie@onedrum.com>
Date:   Fri Jul 1 16:55:41 2011 +0100

    Small fix to the http tunnel to prevent null pointer is attempt is made to close channel twice

commit ccc155e96fe498a62e302609d0bd65aa3abecb04
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jul 29 13:10:38 2011 +0900

    Fixed code format

commit 65fc361eeceb195e126559e1eee6bc58dea67e0e
Author: nibin <nibin012@gmail.com>
Date:   Tue Jul 26 00:13:16 2011 +0530

    * Fixed the bug in CookieEncoder if there are no cookie's set while
    calling encode(). Without the fix, it ended up in calling the
    exception "java.lang.StringIndexOutOfBoundsException".
    * Also added test case to verify the patch
    
    Change-Id: Ib96425e07ab50be027ade7be0748cceb6438a586

commit 0062cb743c75e1733d0ade692bfafcfd5f66b1a8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 29 12:30:47 2011 +0900

    Added FIXME

commit 45a7692f0749eb623796b90241fa0133fc54287a
Author: fredericBregier <fredbregier@free.fr>
Date:   Sat Jun 4 16:03:48 2011 +0200

    Fixed NETTY-397, NETTY-398, NETTY-399, NETTY-403

commit dd1ff8d9cc7a4a2644fc63d1809d93f13f93a5bf
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 26 12:11:02 2011 +0900

    Handle chunked encoding properly for non-200 responses

commit 15792da16754b0cec64497065aec349b46a8cb4b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 11 18:11:36 2011 +0900

    Tabs to spaces

commit 9db6bba9132c0f69eeb2caf272c6061d8877a4e4
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 11 18:09:49 2011 +0900

    NETTY-295 HTTP header getters/setters for date headers
    
    * Added get/setDateHeader() methods that works with custom date
    headers
    * Removed get/setDateInMilliseconds() methods because they can be
    simply represented with a chained getTime() call
    * Fixed the inconsistent behavior & contract of
    HttpHeaders.getContentLength() which does not throw an exception when
    the header is missing or ill-formatted unless a default value is
    specified
    * Added clearHeaders() and removeHeader() to HttpHeaders
    * Tabs to spaces

commit 94cff9d041dc5abe3892d29900e72ce2eded7cb7
Author: Rogiel Sulzbach <rogiel@rogiel.com>
Date:   Wed May 11 17:02:11 2011 +0900

    NETTY-295 - HTTP header getters and setters for date headers
    
    * Merged CookieDateFormat into HttpHeaderDateFormat, which can parse all
    known date format variants related with HTTP
    * Added HttpHeaders.get/setDate()

commit fd7b5769f71293cbf80009375c8636dc1fb761f1
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 4 17:30:09 2011 +0900

    Made IdleStateHandler @Sharable and removed unnecessary lazy
    initialization in ReadTimeoutHandler

commit f22a55d6e24c4a3c12d35aeb07f03f6cacadb3e1
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 4 17:10:32 2011 +0900

    NETTY-401 - NullPointerException when ReadTimeoutHandler is
    concurrently initialized and destroyed
    
    * Made ReadTimeoutHandler @Sharable
    * Updated the UptimeClient again
    ** no static fields for global state - just reuse the handlers.

commit 45a4b5b7c451e9829c410ca7589fc3cc00e6de49
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 4 16:53:31 2011 +0900

    Fixed a bug in the uptime example where uptime is reset even when it
    shouldn't be.

commit aca290096be10a85bc9dbcd68b2d6a63469ad010
Author: Bruce Mitchener <bruce.mitchener@gmail.com>
Date:   Mon May 2 23:52:43 2011 +0700

    Close bold tag.

commit e1869db9130ec7b28074ae7ac70c2f256ca8ad03
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 3 11:05:06 2011 +0900

    Fixed various compiler warnings
    
    * Missing @Override annotations
    * Indirect access to a private member from inner classes
    * Incorrect @see javadoc tags (should not use the @link tag)
    * ..

commit dad06d539c746caf314c251d2c44830559d5389c
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat Apr 23 18:38:32 2011 +0530

    added initial version of sctp transport

commit 92ccd2fbfa480006153a7d272323f68a90b608b5
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat Apr 23 14:03:52 2011 +0530

    fixed sctp package compilation errors

commit 1b6dff997556310c0dcb9ce59eb0fb5e010134af
Author: Jestan Nirojan <jestannirojan@gmail.com>
Date:   Sat Apr 23 13:58:15 2011 +0530

    added sctp package dir with initial classes copied from nio tcp

commit a722f649912384a2379e9c4f298cb42b83a37053
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Apr 18 17:50:29 2011 +0900

    Fixed indentation

commit 39a6baf380dc4c5b29e18764874a811c9e293c0b
Author: iainmcgin <iainmcgin@gmail.com>
Date:   Fri Apr 8 14:31:51 2011 +0100

    fixing formatting for NioSocketChannelConfig, which I had incorrectly merged earlier.

commit a617bd32902aa04036e3a58934598cf63b28bea0
Author: iainmcgin <iainmcgin@gmail.com>
Date:   Fri Apr 8 14:22:12 2011 +0100

    Fixed formatting to conform to project standards

commit f7729bc8bb4cf6e0ee914bf2893b80cd02af9f28
Author: iainmcgin <iainmcgin@gmail.com>
Date:   Fri Apr 8 12:37:39 2011 +0100

    Moved http tunnel implementation into org.jboss.netty.channel.socket.http package, replacing the original implementation.
    Existing usage example has been deleted and should be replaced by an updated example using the new API.

commit 12d2c8ad2e0ac301e8bd12b00aa6c21c5d8ab2a7
Author: iainmcgin <iainmcgin@gmail.com>
Date:   Fri Dec 10 17:43:48 2010 +0000

    NETTY-246: adding implementation to netty trunk for the 4.0.0 release. In order to get the tests to pass,
    I had to change the surefire fork policy from "never" to "once", as it seems the classloader settings used
    by the maven process were preventing jmock from mocking package private interfaces.

commit 4aef19e947cdb7fb31be2af222e6940889887904
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Apr 18 17:35:04 2011 +0900

    Updated the initial Javadoc written by Veebs w/ a little formatting

commit eb6ec29b14bc39f6a9ca59a2c977b0d9bf42bd6d
Author: Veebs <vibuli@gmail.com>
Date:   Mon Mar 7 16:51:03 2011 +1100

    Fixed SimpleDateFormat bug. Should use new SimpleDateFormat(HTTP_DATE_FORMAT, Locale.US), otherwise when running on for example Japanese OS, the resulting date would contains Japanese characters, and the browser would not be able to parse!

commit a85249ced80fc3b556e5e54ed0f84d639786c1f2
Author: Veebs <vibuli@gmail.com>
Date:   Sat Mar 5 15:40:34 2011 +1100

    Added handing of HTTP headers with respect to browser caching and cache validation.

commit e00e9bb8fa6bd0cb4b4f4e8de515deb9dba4bad5
Author: Will <will@glozer.net>
Date:   Thu Mar 3 21:59:57 2011 +0900

    fix typo in exception message

commit 98db0d390814b0738b876d1f62e9145c9bcba819
Author: Daniel Bevenius <daniel.bevenius@redpill-linpro.com>
Date:   Thu Feb 10 13:29:53 2011 +0100

    Added a timeout for the UdpClient so that the test cannot hang.
    I noticed the build "hanging/halting" on the test when running the cobertura code coverage Eclipse plugin.

commit b26f13d3b9dd255817d669a4bc37699cbb37eea5
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Apr 4 18:21:47 2011 +0900

    Fixed compilation and removed unused fields

commit 16750ffc2802e6098e624df56ea6fbbe5c1055c3
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Apr 2 03:27:00 2011 +0900

    NETTY-394 SslHandler does not work with a little endian buffer
    
    Added SslHandler.getShort() which replaces ChannelBuffer.getShort() calls

commit 6f7e2606a1b68fbf1875928d8accf3ef82e54ace
Merge: 94ac810 10e2fc4
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Apr 2 03:13:42 2011 +0900

    Merge branch 'master' of github.com:trustin/netty

commit 94ac810f2eb49afce4ae03d964f731fb24bac88f
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Apr 2 03:08:24 2011 +0900

    NETTY-393: SslHandler infinite loop on Apache Harmony with large payload
    
    Increased the SSL buffer size by 1024 as advised

commit 10e2fc44e5e8be36ad1583b7adf95257c1f38c34
Author: Trustin Lee <trustin@challenger.local>
Date:   Tue Mar 29 16:15:11 2011 +0900

    Fixed NETTY-336 Fine-grained control over thread renaming
    
    Fixed exception message

commit 89de2e4b95ed28d72d7fba17752e2ab8fe872c4f
Author: Trustin Lee <trustin@challenger.local>
Date:   Tue Mar 29 16:12:55 2011 +0900

    Fixed NETTY-336 Fine-grained control over thread renaming
    
    NamedThreadFactory now can set the daemon flag and the thread priority

commit 83bc3e794a4a2be0c788adc7ea47713fc6b6da0e
Author: Trustin Lee <trustin@challenger.local>
Date:   Tue Mar 29 16:00:53 2011 +0900

    Fixed NETTY-336 Fine-grained control over thread renaming
    
    Added NamedThreadFactory so that a user can customize I/O thread names easily

commit d1919d0e142208f7251815bdf06b188697fa4efd
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 29 15:29:52 2011 +0900

    Fixed NETTY-336 Fine-grained control over thread renaming
    
    Removed ThreadNameDeterminer and ThreadRenamingRunnable completely and let user specify the Executor with one's own ThreadFactory

commit f3899e8d5801d34c8c1aae1b8d20e2dda48d7787
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 25 02:27:20 2011 +0900

    Fixed an infinite loop on a certain NIO impl

commit 6707aa751c7f120f9d2ed78fa60ccf2997810990
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 9 00:20:47 2011 +0900

    Fixed a typo

commit ec6b34a307d97c75670c8ec0e4e6b8dca138da26
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 3 02:02:01 2011 +0900

    Updated Javadoc

commit 0382538548eaddf53b2556600e53c88fed7b19a9
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 3 01:56:08 2011 +0900

    Removed unused ChunkedInput.hasNextChunk()

commit 98b2b6d8dc0642155c588325c27c0730d395d2f4
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 3 01:32:27 2011 +0900

    Do not write an empty buffer unnecessarily when nextChunk() returned
    null

commit a5e9f633ef259e26744fdb8217035e2477dd301b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 2 19:58:28 2011 +0900

    Better variable naming / Fixed potential stall

commit 4144b437355bbbc99f4021f734e9fd48553662fc
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 24 17:26:18 2011 +0900

    NETTY-386 Support for serial connections using RXTX
    
    Contributed by Daniel Bimschas and Dennis Pfisterer
    Initial import after fixing compiler warnings and removing log
    messages and shut-down hooks

commit 7ab5ec5f74b97635de235b99c490a8854edecd33
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 22 18:05:16 2011 +0900

    NETTY-383 deflate-raw support for HttpContentDecompressor
    
    * Added ZlibWrapperType.ZLIB_OR_NONE for auto-detection and updated
    the relevant Zlib implementation

commit 429d3987dc98fc37c3fbd1a44baf4a29eba1b975
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 22 16:54:25 2011 +0900

    Fixed issue: NETTY-382 ChannelLocal.remove() should return the return
    value of initialValue() instead of null when no value was set.

commit 93d9461ff53cdaa1049b5f235350db847d0edda2
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 7 21:31:08 2011 +0900

    Fixed broken SCM URL in pom.xml

commit 1dd30c8abed7e4271b751cc0c69073d34b4be6f4
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 7 21:16:36 2011 +0900

    Upgraded the enforcer plugin and updated the rule

commit 098eacc1350f6568da46c90d76fdfdc7851352cf
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 7 21:05:49 2011 +0900

    Updated the dependency and plugin versions

commit 195df8bec454f92e92f19a836c6c05750c58d3d9
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 7 20:05:37 2011 +0900

    Fixed wrong comment

commit 420431cabb7fc4cb80c8c44bd65e490b19afcae7
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 7 20:03:40 2011 +0900

    Added missing @Overrides annotations

commit 4d6581fe3d6161bb55197040b3363273249b610e
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 7 19:58:48 2011 +0900

    * Fixed a documentation error in ChannelBuffer javadoc
    * Clearly specified that FrameDecoder is an implementation of ChannelHandler

commit b53742e36601cd7a3d80b23b29d841d3272d01f7
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 2 13:16:09 2011 +0900

    Added Main-Class property to the manifest for easier version check

commit eb02c57619fa66d40f5c0e79ee1564088ec3bc72
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 1 12:28:40 2011 +0900

    Fixed Javadoc error

commit d786a38139d075623ea46bb12e51e97f35081396
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 1 13:39:20 2011 +0900

    Fixed NETTY-381 channelDisconnected event is sometimes not triggered when Channel.close() is called by multiple threads.
    
    * Internal state variable should never be set to ST_CLOSED until the close channel future is set

commit 4c9b4329f2e63b456af57cabcc5c2daa660c149c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 1 12:20:43 2011 +0900

    Fixed issue: NETTY-372 NullPointerException in ChunkedWriteHandler

commit a5aef71218e24908ed1994ba5cd9663c57119e32
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 1 11:43:16 2011 +0900

    Fixed issue: NETTY-373 Deadlock in ChunkedWriteHandler on channel
    close.
    
    * channelInterestChanged event is not fired anymore when a socket is
    closing because it is unnecessary

commit d8ff1806103d1e6e50fe9eaeefcb16039f41f654
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 1 11:35:26 2011 +0900

    NioDatagramWorker should reject the write attempt on an unbound
    socket, raising NotYetBoundException.

commit dfe960855fec0fc053194f6da5a9cd912565c292
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 1 10:56:59 2011 +0900

    Fixed issue: NETTY-380 releaseExternalResources() hang indefinitely
    when called from a handler
    
    * Replaced IoWorkerRunnable with DeadLockProofWorker
    * ExecutorUtil now checks dead lock

commit 8eb2d8eb43777acde58423e6341ca6a9edd2c649
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 31 15:25:22 2011 +0900

    ChannelGroup.write() should not write to a server channel

commit ad320f6cae80df35d016907bb4bcd016abf046ee
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 31 14:48:01 2011 +0900

    Fixed NETTY-365 HashedWheelTimer.stop() enters an infinite loop when
    called from TimerTask
    Fixed NETTY-379 Intermittent slippery task timeout in HashedWheelTimer
    * Throw an IllegalStateException if HashedWheelTimer.stop() is called
    from TimerTask
    * Reschedule the slipped task accurately instead of delaying it by one
    round

commit 23f33629cab8c7773365ec19f4a8133071007cff
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 13 14:56:38 2011 +0900

    Fixed a race condition in MemoryAwareThreadPoolExecutor
    
    Replaced a semaphore with a custom concurrency construct to fix a
    known race condition in MemoryAwareThreadPoolExecutor

commit 9f558348234ce929658226b98eba84c48a5405aa
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 12 19:23:50 2011 +0900

    Fixed incorrect usage of ByteBuffer.arrayOffset()
    
    * NETTY-368 Wrappedbuffer does not honour posiiton()
    * and similar mistakes found during a review

commit d7c27d1b71887767d905d81dbff2038dbd2c5ea7
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 12 19:11:32 2011 +0900

    Fixed Javadoc warnings

commit 23c100190c480438cd9bb8cd7fbcac6b42ffe1fc
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 12 18:59:09 2011 +0900

    Set buildNumber to 'unknown' when built out of git repository

commit a719e88856014c766f0784f30fbcec575ef07b1b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 12 18:32:33 2011 +0900

    Fixed issue: NETTY-371 OSGi Manifest requires Bundle-BuddyPolicy for
    object deserialization
    
    Added proper BuddyPolicy properties to the manifest

commit 6bfd2d6cec36aa887f507574c3ab20bcc7305b5f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 12 18:27:17 2011 +0900

    Fixed issue: NETTY-374 ChunkedWriteHandler and handling messages after
    channel close
    
    Fixed a bug where a write requests made after closure are not
    discarded

commit 8ad04dc6cac8739a9662aebe83218d9d05fc91c3
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 12 17:58:49 2011 +0900

    Fixed issue: NETTY-377 messageReceived could happen before
    channelConnected when using local channels
    
    More precise LocalChannel state management to avoid incorrect event
    order

commit a28702c9e9d41b70a4743618d372b5d680c9cca6
Merge: 1c067a5 941c437
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 11 18:59:51 2011 +0900

    Merge branch 'master' of git://github.com/netty/netty

commit 941c437b9c3da1c7bb2a5c7820c29e2386084a13
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 11 18:41:14 2011 +0900

    Changed SCM URLs

commit 23de6d53612125317623a35ae82045a72f8c1a18
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 11 18:17:45 2011 +0900

    Fixed build issues
    
    * Replaced the buildnumber plugin with antrun exec tag to generate the build number correctly.
    * Fixed a problem where MANIFEST.MF is lost

commit 1c067a5c2184f5f4a2e04f0c7f58b4e39603b20d
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 11 18:41:14 2011 +0900

    Changed SCM URLs

commit c5a29f00a49346e67ea5f1a70eaa2d92da15af62
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 11 18:17:45 2011 +0900

    Fixed build issues
    
    * Replaced the buildnumber plugin with antrun exec tag to generate the build number correctly.
    * Fixed a problem where MANIFEST.MF is lost

commit 7866282d5246964446f8416c6eebf51957435f15
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 4 14:53:01 2011 +0900

    Fixed indentation

commit 4f9e6dcb130afd4528f5937436c7a55dc59be8d9
Author: iainmcgin <iainmcgin@10.0.1.11>
Date:   Fri Dec 10 11:23:40 2010 +0000

    Fix for NETTY-370 - documentation updated to reflect the correct behaviour of
    high / low water marks on the interest ops of nio channels.

commit 1f1b8d83259398f236bc4bb99676243192f6dedd
Author: Benoit Sigoure <tsunanet@gmail.com>
Date:   Fri Dec 3 23:12:03 2010 -0800

    Add a new faster, memory efficient URL decoder.
    
    Query string parameters need to be decoded as per RFC 3986, Section 2.
    The implementation of the URLDecoder in the JDK is slow because it takes
    long and inefficient code paths, and it generates a lot more garbage
    than necessary.  This decoder is about 2x faster and doesn't allocate
    any memory in the easy case where the decoded string is unchanged.
    When the string needs to be changed, only one buffer is allocated for
    the decoded string.

commit 3d85d56631cba678c0779efc5685fb7635102dc4
Author: Bruce Mitchener <bruce.mitchener@gmail.com>
Date:   Tue Nov 23 22:13:51 2010 +0700

    Correct variable name in code samples.

commit e83b5503daef3b9bef98202a97e12cf62b900813
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 4 14:22:35 2011 +0900

    Fixed NETTY-376 Manifest not present in the first entry of the zip

commit cd133919d3d0ed628d04be008d40b3c9e0709fcb
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 23 20:09:22 2010 +0900

    Added IntelliJ specific files to .gitignore

commit 1ffb1aea75c36def56b709bd0892b19df78d9249
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 12 10:20:03 2010 +0900

    NETTY-364 Application level IP filter
    * Merged Frederic's ipfilter patch (needs some review and documentation)

commit 34b181236a86421e44843ff9339afe7f4bb0a0c1
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 12 10:16:51 2010 +0900

    NETTY-363 Traffic shaper
    * Merged Frederic's traffic shaper patch (needs some review and documentation)

commit 96ba5819cc504815a34b5ee970bdf11614db65f4
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 12 09:51:52 2010 +0900

    Added Version.java to .gitignore because it's generated during the build

commit c0c9f689f6bd39b02471e2411a699a2d2b0bff4e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 12 09:49:43 2010 +0900

    NETTY-333 Support File Uploading in Netty HTTP Server
    * Merged the Frederic's HttpPost patch (still needs some design and naming review + documentation)

commit 0dbdbcdb968dadb5f009f93de945b0aeb539b6d9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 12 09:45:39 2010 +0900

    Added @Override annotations which were disallowed in Java 5 but not anymore in Java 6.

commit d3fb52e11da269896731138fb0f453ba15e2ebdc
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 12 09:42:43 2010 +0900

    4.0 requires Java 6 or above

commit f700f9b14fead7ca6c3bed67005a7d5ea16ce1b8
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 9 05:35:24 2010 +0000

    Fixed misleading Javadoc in ReplayingDecoder

commit 1f2285f57e98ec286b4fc1505fdf46f0a6847376
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Oct 24 18:24:20 2010 +0000

    Fixed issue: NETTY-360 Changing Channel.interestOps sometimes does not work under heavy write traffic in NIO transport
    * Made sure all setRawInterestOps() calls are protected by interestOpsLock
    Fixed a race condition in the HexDumpProxy example

commit d9dba0d75425091f55f6f12a424798bfd535b16f
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Oct 24 18:17:54 2010 +0000

    Fixed wrong license file name

commit f13e7053feb95f0b53de8749f5000bd34948fbc9
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Oct 23 11:38:34 2010 +0000

    Fixed an OOME in the HexDumpProxy example

commit b85731e59f13d9d907188f925eeec16ba406a8da
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 20 11:33:23 2010 +0000

    Sync with upstream

commit 35a2326e82a832f95277b0e9dc930a4225bbda40
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 19 06:11:34 2010 +0000

    Fixed compilation errors in some compilers

commit 4399c1e90b6372cddb4b8af829cb240059d416e7
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 19 06:00:42 2010 +0000

    Removed nagging compiler warnings introduced by Eclipse Helios

commit 57dc0b3bc8ba21a262d3549f17da796106aa1036
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 19 05:40:44 2010 +0000

    Fixed issue: NETTY-359 Missing support for HTTP 'Expect: 100-continue' header.
    * Improved HttpHeaders.is100ContinueExpected() to conform to the RFC
    * HttpChunkAggregator now sends "HTTP/1.1 100 Continue" response automatically.
    * Added some TODO items which should be done in 4.0.

commit d093ed4a546da835da40ae385cd2dd664ce62c51
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 19 04:05:28 2010 +0000

    Fixed a potential thread safety issue in SslHandler.handleRenegotiation() - it seems to cause the first handshake attempt to fail rarely on some platform (Solaris SPARC?)

commit 4fd034ab5d28ac96d2ab59f33753d6b4d4c025b1
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Oct 18 08:19:03 2010 +0000

    Fixed issue: NETTY-359 Missing support for HTTP 'Expect: 100-continue' header.
    * Improved the snoop example to support the 100-continue header
    * Fixed a problem in HttpClientCodec, HTtpContentDecoder and HttpContentEncoder where 100-continue response causes incorrect behavior

commit 04430cd6d3acea80a43e64ee3988548854476713
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Oct 17 18:34:03 2010 +0000

    Fixed issue: NETTY-359 Missing support for HTTP 'Expect: 100-continue' header.
    * Added HttpHeaders.is/set100ContinueExpected()
    * HttpMessageDecoder converts unchunked messages into chunked ones if Expect: 100-continue header exists.

commit 13a1b73cd18f566dfb30ac7e778c5349dede1d03
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 9 10:59:22 2010 +0000

    Fixed issue: NETTY-356 WebSocket encoder regression
    * Fixed a bug where WebSocketFrameEncoder does not set MSB of the length field

commit 0cc728a9f0b60ef1133304e6f0063081209292d4
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 30 06:02:08 2010 +0000

    Resolved issue: NETTY-346 ReplayingDecoderBuffer doesn't support array()
    * Added ReplayingDecoder.internalBuffer() so that a brave user accesses the internal buffer directly at one's own risk

commit d4438170c9cbfd5183ab9ad84584f5cb4125b8e0
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 26 06:15:06 2010 +0000

    Fixed a buffer rewrite trap which occurs when DirectChannelBufferFactory is used

commit 2eb2901c1ce15d0562367d82c313272be377953a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 26 05:38:34 2010 +0000

    Fixed a bug where the CodecEmbedder implementations do not generate the close request - this issue prevented some encoders like ZlibEncoder from generating the footer

commit d223c2905dea8177dcc7e3d25b0fd4b0ffb5861e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 26 05:06:40 2010 +0000

    Fixed issue: NETTY-345 HttpChunkAggregator doesn't support retrieving trailing headers
    * Merge the trailing headers into the aggregated message

commit ffccf71fa53541f657bc48ff471a194a6d9300cb
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 26 04:18:53 2010 +0000

    Fixed issue: NETTY-350 Copy/paste error in org.jboss.netty.handler.codec.http.HttpMessageDecoder constructor

commit e8fcbd4e75ce594042f393a5cf18db01ee512628
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 26 03:13:14 2010 +0000

    Fixed a bug where some ChannelPipelineSinks do not always release its shutdownLock on an Error

commit 30d5136973ebfc1d650b659b5f5833613b2b8ded
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 26 02:55:10 2010 +0000

    Fixed a dead lock where MemoryAwareThreadPoolExecutor does not release its semaphore completely

commit 1c13d8c9f3567276540f49673097197a2e37b27e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 26 02:07:11 2010 +0000

    Fixed a bug where HttpMessage.chunked flag is not cleared by HttpChunkAggregator

commit d68c5160edb4a54a533c0560f5875f7b7dc9f686
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 25 02:31:00 2010 +0000

    Added parentId to ThreadNamingRunnable

commit 36598478593d17d1be07edfbe1ba58530855d18f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 25 02:12:57 2010 +0000

    More strict thread naming rule

commit 4680cd0bb3e0bd1029e2c3d434bdd651dd9ed9ce
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 16 05:57:34 2010 +0000

    Improved performance of ProtobufDecoder using array directly when possible (Thanks Ian - iswett@yahoo.com)

commit 21db320f0eec1e081127ab55c0df55565816a474
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 16 05:24:50 2010 +0000

    Fixed issue: NETTY-342 Small typo in the user guide

commit e36d2dc3de7316d4196ac263400e29ed82ef220d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 7 07:55:37 2010 +0000

    Fixed issue: NETTY-331 (Regression NETTY-262: Server bootstrap bound channel pipeline has become immutable)
    * ServerBootstrap now always uses the default pipeline instead of the static one

commit 1c6813a06d85178c56bae1894a76199b49b3e8a3
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 7 06:43:34 2010 +0000

    Fixed issue: NETTY-337 Multi-line headers truncated

commit 3156ed5dd51f69a0732546e67aaea74710164495
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 7 05:07:39 2010 +0000

    * Added WebSocketFrame.CLOSING_HANDSHAKE
    * WebSocketFrameDecoder discards data if closing handshake was received before

commit 35351701ffaa6724779ae22e858ca9a9d324d485
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 7 04:29:41 2010 +0000

    More compact binary frame length encoding in WebSockets

commit d32e7ff865306eac8e20400d8bef1ac36757afea
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 30 09:43:18 2010 +0000

    Fixed wrong comment

commit 8216a3fa5e651a31fbd2d5a1b7955f5b3d29950b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 30 09:42:48 2010 +0000

    Commented out System.out.println

commit 6bebbdad559eb9b2af9a68c3a24e85588a6b6adb
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 30 09:35:47 2010 +0000

    Javadoc

commit 9d89ad08371a7ef905c6e24589ef8d4456211a40
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 30 09:17:08 2010 +0000

    * Resolved issue: NETTY-336 Fine-grained control over thread renaming
    ** Redefined ThreadNameDeterminer
    * Improved caching in AbstractChannel.toString()
    * Improved overall OIO thread naming (thread ID number is a large number which doesn't look good though.  will fix it later)

commit cd6e7f0c3e84c8a872c6f0c2c49372e951bd4b5c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 30 05:58:51 2010 +0000

    Missing dots

commit 5c790b5e8a2fd1ddcd288a1104b0eaa6b3d0e51c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 30 05:54:47 2010 +0000

    Fixed a documentation error

commit 5518344bc38e66862085e0288d3205301f1c9a82
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 30 05:48:23 2010 +0000

    NETTY-335 Remove deprecated elements

commit f4e83e04213420f7cb5b1d5ac4a825b6c09589a5
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 30 05:31:48 2010 +0000

    Begin 4.0

commit e3a5a8eea2f027e1d407cc95b18db911ee05322e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 25 02:52:30 2010 +0000

    Do not change the readerIndex

commit 56c0e6da07854449d0a7e050e16c62cf50c86013
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 24 02:13:12 2010 +0000

    larger -> wider

commit 674af6ae12f51d24c6b0d5d033758ce37821c27a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 24 02:12:48 2010 +0000

    Fixed infinite loop in ProtobufVarint32FrameDecoder when too large varint length is received

commit ab0facdee593d611445c9cbafbba27b0374c41c0
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 24 01:53:51 2010 +0000

    * Discard too long frame in a more robust manner (i.e. should continue decoding after raising TooLongFrameException)

commit bae46eca4917466cda8ae6eec68d7bfc4da48f75
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 24 01:45:32 2010 +0000

    Discard too long frame in a more robust manner

commit 14a82cb6df0a94ca3fc9321f70e4a3294bd6e30c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 23 05:28:05 2010 +0000

    [maven-release-plugin] prepare for next development iteration

commit ce2736b4efdc7660df6bc6b1881bd694a04a2a42
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 23 05:27:36 2010 +0000

    [maven-release-plugin] prepare release netty-3.2.1.Final

commit c9555d01bf34a8405908e92235658e2839be3b90
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 23 05:22:57 2010 +0000

    Added a TODO to ProtobufVariant32FrameDecoder

commit b2ebe26a25d1dbd2c20b6979c81c16c7cb2492c6
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 23 05:16:47 2010 +0000

    * Improved protocol buffers integration javadoc
    * Changed the localtime example to use the base128 variant length header which is popular among protobuf users

commit 685153663e5ff2599e6d70172039d44ea0b7a1f0
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 22 07:02:27 2010 +0000

    Fixed wrong content length for websocket handshake messages

commit 7df28adfe32361be1a4d69a3282f8c8f197ac278
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 22 07:01:47 2010 +0000

    Fixed wrong content length for websocket handshake messages

commit e0545ba58359599a5beb7b69726530369412dda5
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 21 09:39:49 2010 +0000

    Fixed issue: NETTY-330 HttpMessageDecoder cannot decode new handshake messages
    * HttpHeaders.getContentLength() returns 10 and 18 for WebSocket handshake messages
    * Updated the WebSocket server example to support the new handshake method

commit c35c9eb1c315d73f3f57564ee6bff52365cd592f
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 21 08:16:31 2010 +0000

    Mention WebSocket

commit 5f3fe473926e72bece19f927251560f9bf0f23ec
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 21 08:12:08 2010 +0000

    Excluded examples from the JAR

commit f88108e8767eee810276ff8935d48197b3de9b4b
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 21 07:00:03 2010 +0000

    Fixed a bug: NETTY-329 ChannelBuffer.slice(index, length) returns a slice with wrong reader/writerIndex
    * HeapChannelBuffer.slice(index, length) and ByteBufferBackedChannelBuffer.slice(index, length) should update indexes when they created a slice using duplicate()
    * Added relevant test cases

commit 575b7fb073a2f5b8d30ea8b07cc56c19c2abefa2
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 17 14:23:59 2010 +0000

    More Javadoc based on community feed back

commit de90cd6a3c6517bac0564c8552fdd09bd37fc7fc
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 16 03:33:29 2010 +0000

    System call needs to be made at least once so that it can fail when a user attempts to write on a closed channel

commit 752e60a7237790c6ab6dbafcc521ccaf8b801b46
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 16 03:28:30 2010 +0000

    Suppress system calls when a user attempts to write an empty buffer

commit f753dc2b834886302c58c7cee19e65874378bcaf
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 16 03:12:00 2010 +0000

    Replaced SslHandler.pendingEncryptedWrites with the thread-safe one

commit f2d490ef9f7bdaf19466ba28e0495488b99458fd
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 16 03:10:19 2010 +0000

    Suppress system calls when a user attempts to write an empty buffer

commit 4b0219ee9bdb5c1a1e5c1809ce40b8d0031a773b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 16 00:21:31 2010 +0000

    Potential fix for rare failure:
    javax.net.ssl.SSLException: renegotiation attempted by peer; closing the connection
    	at org.jboss.netty.handler.ssl.SslHandler.handleRenegotiation(SslHandler.java:967)
    	at org.jboss.netty.handler.ssl.SslHandler.wrapNonAppData(SslHandler.java:810)
    	at org.jboss.netty.handler.ssl.SslHandler.handshake(SslHandler.java:347)

commit cbe26db0e46c8f6df28abb8319f777f0a02af1a1
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 14 11:07:44 2010 +0000

    Replaced email with homepage url

commit 2571564eb2307f27620a2682df71776b5d630d07
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 14 11:06:45 2010 +0000

    * Updated the author tag
    * Added svn:keywords property

commit 800fcd0ca2794c29ceb8de489539fbd6358bfe49
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 14 11:03:14 2010 +0000

    More tests

commit 6d0fb256c611ab7e3c05d143c21e0fcad3498017
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 14 10:57:48 2010 +0000

    Fixed issue: NETTY-325 (QueryStringDecoder doesn't properly handle missing query string values and other corner cases)
    * Rewrote QueryStringDecoder based on Benoit's work
    * Added a test case for QueryStringDecoder

commit 5097009f8c35e11a77294c3a8b3abb309ad39427
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 7 02:11:04 2010 +0000

    * Fixed an infiniloop in NioDatagramWorker which is triggered when a user writes an empty buffer.
    * Reduced system calls on empty buffer

commit c032708ed75306a56394d85a0b384a4cfdd7f1e0
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 7 01:50:02 2010 +0000

    Updated Javadoc

commit 659eedb970b42e01222709b2de374773e4df60b1
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 3 09:04:56 2010 +0000

    Better package description

commit 4a390a1983cce591fb0f6e7b8b4ebc75813d5958
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 3 09:01:46 2010 +0000

    More Javadoc

commit 3a92fb8a9e5f332a17ee6089e67583f7a5214a3a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 1 09:19:19 2010 +0000

    Fixed NETTY-320 ReplayingDecoderBuffer.toByteBuffer(int, int) throws java.lang.IndexOutOfBoundsException
    * Added missing checkIndex() call

commit a55a1c6e7293e3ae0d64aefa54667ee57a9e7cf7
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 1 08:38:51 2010 +0000

    Removed unnecessary lock

commit 62746e3e5e2fe8d9c0c8b9385bacf96817b022c5
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 28 05:15:50 2010 +0000

    [maven-release-plugin] prepare for next development iteration

commit e2ac42975c620acd0f4985b2319c5a3b29e3d052
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 28 05:13:51 2010 +0000

    [maven-release-plugin] prepare release netty-3.2.0.Final

commit a2ef43cf3dea5c555a4c709932bee5b8766a5fbb
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 28 02:59:17 2010 +0000

    Streamline LinkedTransferQueue.isEmpty()

commit 11705c991554cc81683654de216f5cfe0771b110
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 27 12:40:50 2010 +0000

    Removed System.out

commit 0d0b0c56c33bd801f3f82f5c450be77f5012ccfa
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 27 12:38:54 2010 +0000

    Fixed NETTY-319 HttpMessageDecoder incorrect parsing status line
    * Specified an empty reason phrase if no reason phrase was specified

commit 7d11a5369fe4a7d02531f3ad115057cb9e069705
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 27 12:34:44 2010 +0000

    Proper validation for HttpResponseStatus

commit d65cd371e7456f8acbf8af5dcb2166cce0e87b50
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 27 12:02:49 2010 +0000

    Fixed a bug where HttpTunnelingClientSocketChannel's closeFuture is not notified if the connection is closed by the client

commit be544fa8993ab6df0bda91583e81487c847adff2
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 19 12:23:44 2010 +0000

    Added a TODO for 4.0 (or 3.3?)

commit c64e6866f62490fdbfd3037abd1053b71aa0c09d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 19 11:31:25 2010 +0000

    Added a FIXME for later releases

commit d51ccd221119bb81e40c83ea403cc5129465e6c5
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 19 07:51:38 2010 +0000

    The fix for RtspResponseDecoder should be applied to all RTSP decoders

commit 0c9202ab75bc4ca9c8129f7e6bc98afc4da6ba44
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 19 07:42:21 2010 +0000

    Fixed a bug where RtspResponseDecoder does not decode a response with no 'Content-Length' header properly

commit 3847fb00e52cf3a6b297d748e66c21e28ef3f476
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 19 06:29:43 2010 +0000

    Fixed issue: NETTY-310 Memory leak in netty-3.2.0.BETA1.jar
    * Added a special internal use only constructor to AbstractChannel, which bypasses ID allocation
    * EmbeddedChannel calls the special purpose constructor to avoid leak

commit 93f9c4a2d69592e96d3b640dee66b4223cf92a2f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 13 14:13:07 2010 +0000

    * Added LengthFieldBasedFrameDecoder.extractFrame()
    * ObjectDecoder overrides extractFrame() to avoid memory copy

commit d19aa4924e2018772474752c1244d9965ce2a514
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 13 13:40:36 2010 +0000

    Simplified and hardened ObjectDecoder by extending LengthFieldBasedFrameDecoder

commit 688ec9d927594b12dae384c91cbeeec3d05a6b1e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 7 11:22:19 2010 +0000

    removed google analytics

commit 23dfc0306072afccabcea49661fc407dfd5fa600
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 7 11:21:10 2010 +0000

    migrating to docs.jboss.org

commit 65ee3d5579409795eaf5d6ac6e4be29dcc2c798c
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 7 11:14:53 2010 +0000

    Inserted Google Analytics code

commit 4fc22e1a264bcbc7eeb938758ed307ee88954b84
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 7 01:22:44 2010 +0000

    [maven-release-plugin] prepare for next development iteration

commit 7620360e1f2dcd8a125e719363c494c825a779e3
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 7 01:21:57 2010 +0000

    [maven-release-plugin] prepare release netty-3.2.0.CR1

commit 14d27eb7c90f3dd13b5e66e200cd36080b9981f9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 7 01:02:29 2010 +0000

    Removed the unused dependencies from NOTICE.txt

commit bdd213ec85f467f3dd39b2fd1074667a4340ac65
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 6 07:50:19 2010 +0000

    * Added missing Javadoc
    * Proper getIntHeader() behavior

commit 2c887daabe0f212b9f3e88c4b0ebd63a409b2f4c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 6 07:37:27 2010 +0000

    Added missing Javadoc

commit 8bb9ad26ade6967d435c1224a9114ba772030d3b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 6 07:33:26 2010 +0000

    Updated Javadoc

commit 5edc4e16aae9196bd02a645b12c236060491cc5c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 6 07:00:52 2010 +0000

    * StaticChannelPipeline's constructor should stop when a null is encountered
    * Added a test case for StaticChannelPipeline

commit 56cdf73cb98c3b080e354eacec5c527cd3f1b265
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 6 04:11:11 2010 +0000

    Fixed issue: NETTY-314  ProtobufEncoder and ProtobufDecoder should accept MessageLite as well as Message.

commit 1793c659caf2e6a02b9577adb06726bef6c4af3f
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 4 12:29:17 2010 +0000

    Fixed indentation

commit 13d83171fbb39217d6e293cb3d61f4c608697a5b
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 4 12:09:50 2010 +0000

    Updated 'before getting started'

commit 66cbce8f239b1306b94a5da1c30452347141666d
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 4 11:58:21 2010 +0000

    Removed the first paragraph

commit 58f8dd89421aa1fb721ec6656c95578b8a0454f4
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 4 11:49:16 2010 +0000

    Updated the broken first statement in the preface.

commit 6269d21712213d741e58c56aac78c38ff198d7ec
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 4 11:22:11 2010 +0000

    Fixed the oversized architecture diagram in the PDF

commit b134bfb97449190279650d0ef8ddc92f85b78aa0
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 4 01:48:52 2010 +0000

    Comment

commit 8c490ed6e57ded52f8976892d7076bdff3c24e20
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 4 01:47:43 2010 +0000

    Wrong inception year

commit d4049710bb22987767c7dcc1121f5f73760106a0
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 4 01:46:15 2010 +0000

    * Fixed dangling HTTP header entries in the linked list
    * Added a test case

commit b2f550cb3b1aa213798e391057d36f13158d13c5
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon May 3 02:21:01 2010 +0000

    Fixed a bug where RtspResponseDecoder generates a request object instead of a response object

commit 34b2ed1a8d9d3249c5ae60263137556931c8946e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 30 12:27:41 2010 +0000

    Fixed a build problem where the resulting artifact does not contain the legal stuff.

commit 0d4bba0a0930067a3c88789762d9f4624d9c1ab7
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 30 11:55:38 2010 +0000

    reverting back to the older jdocbook plugin due to weird build problem

commit 37fca96a059f41ce35d91f58206ec737fd150367
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 30 11:21:10 2010 +0000

    Wrong outputDirectory

commit 3dd2224da58c78090ccd4ed5801ddadf536f4e00
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 30 11:11:59 2010 +0000

    copy license info to target/classes

commit e5ccdee14e46f3f22a8ebc5ec1023d9dc87b8569
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 30 11:09:37 2010 +0000

    Removed the license files for unused dependencies

commit b4e183a9fe026dfacb6f3f2e47376e58e2d70d72
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 30 11:09:09 2010 +0000

    Removed the license files for unused dependencies

commit 2cef582f07a84bc495b57842db81b6dde3fa9357
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 30 11:07:17 2010 +0000

    Inherited jboss-parent / Used maven-resources-plugin instead of maven-antrun-plugin

commit 5741721f71f185872aa3d4860644d31df22ace1b
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 16 13:32:55 2010 +0000

    Fixed a bug where HEAD response is not read completely if it's transfer encoding is 'chunked'.

commit 2ac79dcb74eb8afd772a7d7e7000ae777b56f066
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 16 06:53:12 2010 +0000

    A little optimization

commit f1bba73b22478eef7b42340fa1cc58d793e4a8e3
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 16 06:44:48 2010 +0000

    Typo in the comment

commit d38219a85cf50d65656efa499e2933d94670f2dd
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 16 06:40:29 2010 +0000

    Fixed a bug where non-successful HEAD response is assumed to have a message body

commit 640fae79636135fa417eeede2563feb7c60fcb91
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 16 06:31:49 2010 +0000

    Updated architecture diagram

commit 3aa3b07a95e48ebc48b30084941e48ad540ed99f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 16 05:07:37 2010 +0000

    Hint on downcasting and multicasting

commit 66882ae70887ca45ef408d76d30918940c31f224
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 16 05:01:55 2010 +0000

    * Updated APIviz tags
    * More help on file transfer

commit ba08d11356d6057d9e3c5842a3e971c46b3fe09f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 16 04:22:00 2010 +0000

    * Code clean-up
    * More strict sanity check

commit 48696d909f82558eb9f43f06ee7b1e8c5741f21c
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 16 04:12:43 2010 +0000

    Updated APIviz tags

commit 4e69cfe2819a6588f6930f14c4b78e80c3ed4143
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Apr 12 11:57:46 2010 +0000

    Exception should be raised even if count is 0

commit 318a4d901fb6c952d65ba8c09be7bf2d9d791838
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Apr 12 11:56:52 2010 +0000

    Fixed a silly bug in file transfer - There's no way to specify the start offset in FileRegion.transferTo()

commit 17a222e3972bfb52d567e61c444575f8bcdf49be
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Apr 12 10:53:49 2010 +0000

    * Changed the sort order of LocalAddress.compareTo()
    * Added a FIXME to LocalAddress.compareTo()
    * Modified LocalAddress.compareTo() to throw an Error when impacted by the known bug in compareTo() - will fix this bug in the next major feature release since it will break the backward compatibility

commit 2fc539a9bc7ce04b1f106e6339ea68851dff1b2c
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Apr 12 10:36:04 2010 +0000

    Proper LocalAddress.compareTo() implementation

commit d0d25198716e23bb206e278f35ee4eeb6d00ba2c
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Apr 12 10:22:51 2010 +0000

    Fixed issue: NETTY-308 ChunkedInput implementations send only the first chunk

commit cac77a47b265e4fd2e39fc469d0abb6d32704b72
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 6 09:40:35 2010 +0000

    Fixed a wrong usage of ExecutionHandler in the example

commit 8474026c922093d6b2bdc92d21366176c18dcbb9
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 6 09:23:25 2010 +0000

    * Misuse warnings are logged at WARN level now (with higher threshold)
    * Extracted duplicate code into SharedResourceMisuseDetector

commit 11e5e2ba568ecc74f14b2135384e4ea79551850c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 6 08:43:49 2010 +0000

    Fixed issue: NETTY-306 bug in passing large nonchunked data through ChunketWriteHandler

commit 88f1332179ae6a5f6b03b44d48e1c45aa3c97cec
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 31 03:22:11 2010 +0000

    Excluded container integration classes from Javadoc

commit 1ae76562b7cb8cc6d2093b8373723a4c79fea277
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 31 03:20:47 2010 +0000

    Simplified container integration by removing unused features

commit 3f7fff3fa5cee1b02bb2109004dd1f0561a956b6
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 31 03:02:58 2010 +0000

    HttpChunk is mutable so no need to create a new chunk

commit 8eb353eb5d3d9b5d6070ebce45877e467a23bc6d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 31 03:02:20 2010 +0000

    HttpChunk is mutable so no need to create a new chunk

commit b210c36ef941daf658e80ca1f9fd76c21544c719
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 31 02:50:19 2010 +0000

    Do not remove 'Content-Length' header even for a message with empty content - HEAD requires that

commit 745b8300f0f67ab359bc9a0caef8bdaa92f7c45c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 31 02:48:57 2010 +0000

    Do not decode when the content is empty

commit c1a70b3579b02ed2e75f7db64915b97cf6d7f6fe
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 31 02:26:51 2010 +0000

    HTTPS support

commit 7c139cf1b78cbd9f103965d256046df8e8448082
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 31 02:19:45 2010 +0000

    * Added HttpClientCodec and HttpServerCodec
    * Additional Javadoc about handling HEAD and CONNECT requests and their responses

commit c1b1db276d3eec817263ea305f9e864ce52697d1
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 30 08:02:32 2010 +0000

    More useful Javadoc

commit 1f20d1b98140b9302f6a3d13c4f7275cfb2d000f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 24 05:20:47 2010 +0000

    Resolved issue: NETTY-300 Conform to JBoss project version convention
    * Red Hat -> Red Hat, Inc.

commit 4a4f129381dbf1e303c07dbad9cf0817d5d5f0ad
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 24 05:07:27 2010 +0000

    Better documentation

commit bd1c366afc2926422ee974a07ed7ee316b72fc91
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 24 04:47:40 2010 +0000

    * NETTY-240 Upgrade the dependencies to the latest versions
    * Release plugin should use dav:svn instead of dav.

commit 1612dd848f87caf80dd813c6e0183d0007b28079
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 24 04:06:41 2010 +0000

    Removed unnecessary dependencies

commit 807291a2dbb813fb34196908e544efd45b83e749
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 24 04:00:49 2010 +0000

    Removed outdated XNIO transport - it needs to be rewritten in the next major feature release.

commit 0d3389ee5203e4beab769cbb67e6e5399ab78a83
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 17 05:53:34 2010 +0000

    Updated Javadoc / xref css

commit 5d361094646faecaf7343142623054a4b834b1d8
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 16 09:39:56 2010 +0000

    Fixed Javadoc errors

commit fa6f7a4e6d2cb00394f7089977f2fce6a3116490
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 8 04:17:28 2010 +0000

    Fixed a bug where the pooled send buffer is not released on a failed write

commit 08090968c581486720eb1ac3fd1709f8545b42bd
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 4 10:01:06 2010 +0000

    [maven-release-plugin] prepare for next development iteration

commit 74018249422c9b12668ae19e8fb243894e7ffd6f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 4 10:00:32 2010 +0000

    [maven-release-plugin] prepare release netty-3.2.0.BETA1

commit 45a0372179a2b6a8fccdee559c067eeeb123a6ad
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 4 09:42:27 2010 +0000

    Upgraded to APIviz 1.3.1

commit 605d2969d2b803f2a94b9a31dadbaaac4cf49980
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 4 06:34:00 2010 +0000

    Added @Deprecated annotation to the implementations of deprecated methods in ChannelBuffer (basically to silence nagging compiler)

commit 1695e32b0fdbd8eafc42b0a1199e832daea84200
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 3 23:11:39 2010 +0000

    Removed unnecessary methods

commit 8c81a1c8d8d7fde61ba459e532c4d7c57e222e65
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 3 09:17:30 2010 +0000

    Oops, wrong validation

commit 6aa66948229ec062d7527d27c4b7562ceec0e931
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 3 09:15:06 2010 +0000

    Related issue: NETTY-297 Non-ssl clients connecting to ssl server should be able to fail fast
    * More strict SSL packet validation in SslHandler

commit 3bbad77075afa7195e57c4ec0c09cb9fe1091199
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 3 09:01:38 2010 +0000

    Resolved issue: NETTY-297 Non-ssl clients connecting to ssl server should be able to fail fast
    * More strict SSL packet validation in SslHandler

commit 5558f020033a911b14a2fb5c2cce08ab1d3160d3
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 3 05:35:01 2010 +0000

    Resolved issue: NETTY-298 Make ChannelBuffer setter/writer methods to accept int for narrower types

commit a3bae359bd6da059199f1bbe7ca9ce87b4469832
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 24 00:24:41 2010 +0000

    Javadoc clean up

commit 52ef2a5330304ed42d4aa31e5cf6c34519105128
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 24 00:23:33 2010 +0000

    Upgrade your JDK to use FileRegion

commit 049e97f03b786ffd9dac9d2617c39620c320cfcb
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 23 07:29:10 2010 +0000

    Modified HTTP file server to utilize FileRegion support properly

commit aa4b8a2a6cee441712cdf0f9710179d5d03bbf14
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 23 07:18:58 2010 +0000

    * Changed the type of WriteCompletionEvent.amount from int to long
    * Added back FileRegion since mapped buffer does not outperform transferTo()
    * Refactored SocketSendBufferPool to support FileRegion

commit 1989bd037bf8489ba4970dd0cb07d22536418998
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 23 05:45:53 2010 +0000

    Collection -> List

commit 69450ee6ec61ed312bc8b60ea81e7990feae2e83
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 23 05:42:39 2010 +0000

    Doubled the default number of I/O threads which seems to be more sensible better performing default

commit b010cd15a569f08000675efd36b7deee0d2fa06e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 23 01:12:36 2010 +0000

    Imlemented progress notification for NIO writes

commit 43a603cfde0cc45ca71fe64655b1fb3c2db1822a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 23 00:56:04 2010 +0000

    * Removed unnecessary conditional
    * Optimized the use of memory bandwidth in NioWorker.read

commit 03268034c71a8d928585708bf11f874fa6a60bc8
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 23 00:43:15 2010 +0000

    Removed unnecessary conditional

commit cc3b07c655c7ef0163e79d52676c5fe02e4475e7
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 22 06:18:39 2010 +0000

    Removed FileRegion since a FileChannel can be mapped into a ChannelBuffer.  What a lovely abstraction.

commit 9ecd5739379970d618989eaf7a06334ff0e9407f
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 22 06:09:54 2010 +0000

    Fixed Eclipse compiler warnings

commit 59052be709741a3f3b594818be3774d63598061c
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 09:58:38 2010 +0000

    Related issue: NETTY-293 sendfile() support for NIO TCP transport
    Support for progress notification of time-consuming I/O operations
    * Added FileRegion
    * Added ChannelFutureProgressListener
    * Added ChannelFuture.setProgress()
    * Performance seems to stay same as before fortunately

commit b97648f95e8894b59b2701718dbfbfa98727f0e1
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 09:18:10 2010 +0000

    Comment fix

commit 28bac1978fd2e0f8ec659481747a8c1b70f50c1e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 09:08:01 2010 +0000

    This should be volatile anyhow

commit 0066f9c3ff3018b952d582cf556e1a2e7703c055
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 09:02:57 2010 +0000

    Removed unnecessary volatiles from the examples

commit a462d0e85e9f0712fc750856bf3946900505d0eb
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 09:00:00 2010 +0000

    Removed volatile from some internal state member variables in decoders because they are always either:
    1) modified from the same threads or
    2) protected by happens-before condition that is met by Executor's internal synchronization constructs

commit aa8e48df9ff26ff5b81bdbdb53b29f80494b288b
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 08:43:13 2010 +0000

    Removed 'volatile' from the member variables that are protected by ThreadPoolExecutor's BlockingQueue operations

commit e8c320c6c31237d0c930ea1c6d77d4bd5f691e4f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 08:23:48 2010 +0000

    * Removed 'volatile' from the member variables that are protected by synchronized (this) block
    * Updated comments regarding thread safety

commit de8671df9307c5ef1c6a95cb2559a7a41f022ee2
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 05:13:48 2010 +0000

    Documentation fix

commit baf09787098e0270b3311ecc371fd3ccc62d6591
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 04:49:52 2010 +0000

    Fixed documentation

commit 9980a25f7b60a0a499d624e8ac3b7e9e2fd85c7f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 04:37:36 2010 +0000

    Reverted back for backward compatibility

commit 81d019e76a26bf8dd7ca3bc8c4a75d8f1dc27929
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 04:36:30 2010 +0000

    Reverted back for backward compatibility

commit d1c6ed6531828e171240480db485c0e5af2a6204
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 04:18:35 2010 +0000

    Added ChunkedFile interface

commit c7179aa28a6cb6c683e36e6177ace1dc84567eac
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 04:11:59 2010 +0000

    Renamed ChunkedFile to ChunkedOioFile.  ChunkedFile will be added again as an interface

commit d9de1675d0eaa243b507c2f841d590ca2bb94e1a
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 03:28:11 2010 +0000

    Applied send buffer pool to nio datagram transport

commit 32ef9e3e52e0266171fcdd1d584962169917b4b2
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 03:10:30 2010 +0000

    * Implemented send buffer pooling
    * Renamed ReadBufferPool to SocketReceiveBufferPool

commit 1a04586b54717cd7ea06562721838dc2245b586e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 02:40:55 2010 +0000

    Tiny optimization

commit 2f601dcbaf0075ace8c0916d99cfce5a30523561
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 01:41:32 2010 +0000

    WriteBuffer -> WriteRequestQueue

commit 4be652ad0443cec7f835deac5dcfc13eca8f2134
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 01:13:38 2010 +0000

    Removed an unused method in ReadBufferPool

commit 558c02b0df17285d8abba415758a6bc1e52379db
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 00:57:23 2010 +0000

    Tiny optimization

commit f4d7f573a1298c99d52beb3c6530280c274d72bf
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 00:14:25 2010 +0000

    Upgraded to Google Protobuf 2.3.0

commit cee5f945dc4a29872591c7762dae9bfe4d100f7f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 19 00:03:33 2010 +0000

    Tiny code clean up

commit 545acfdf42d1098ed2fdce0795ade2ab93949ba9
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 18 15:51:06 2010 +0000

    Resurrected the good old direct buffer pool as a read buffer pool instead of using it both for reads and writes.  (write buffer pool needs different treatment.)

commit a9c90d0e4af85f8ef131fe089456a5416233a630
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 18 13:00:31 2010 +0000

    Reverted back the changes about direct buffer pool - it doesn't seem to improve the performance as much as additional memory consumption and the latest one often led to OOME during testing

commit 263e1ed6015f02bf86e5e8593f039212bebce12f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 18 11:34:34 2010 +0000

    It seems like using buffer pool during read doesn't seem to help performance at all.

commit e7c329cc4edb6f09923dd86e828d7b3c84702d3f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 18 11:33:54 2010 +0000

    Documentation

commit 3412003bc25c253fbad0085cdbcf55e595f6d94e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 18 04:29:58 2010 +0000

    Fixed an infinite loop

commit 4ef4a92281d02be58e2e6785e1e0b25eba02b9b1
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 18 04:24:41 2010 +0000

    * Added ChunkedInput.isEndOfInput() and changed the contract of ChunkedInput.nextChunk() and hasNextChunk() to support slow streams

commit 23b543c4baf2a303b05e41ef96a8348ac967162f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 18 04:08:56 2010 +0000

    Added more header getters and setters to HttpHeaders

commit 3b0d843e599db95854e12d2d211405350f0c0399
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 18 02:47:09 2010 +0000

    Increased the default preallocation size for higher out of the box throughput

commit 3e21c7a7555a3173b2bdcd6b0de8ad07d007c72a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 18 02:32:56 2010 +0000

    Catch CancelledKeyException from Selector.select()

commit 3ae533815c5665add1737fac40e183307d0eb1a7
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 18 02:23:51 2010 +0000

    Renamed the system property for NIO constraintLevel
    Simpler log message

commit a58c7c4364e06efa41a5f6f56baea880a7944f13
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 18 02:12:15 2010 +0000

    * Made the preallocated buffer capacity configurable
    * Added an integer getter for SystemPropertyUtil

commit f650a8bcee075e20dc9573b6310eb83fcbb6fe2d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 18 01:52:48 2010 +0000

    Rewrote DirectBufferPool using preallocation strategy (like DirectChannelBufferFactory does)

commit e50192c312387c4c2dc5eeb51108cc1c0b8bf7fb
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 17 09:45:45 2010 +0000

    Added developers section

commit c64f83fb470daadeeb74116649e10b902a760408
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 17 09:34:25 2010 +0000

    added scm.url

commit 2b6b49920ce7fc4f83f226e4e9246f7c970196fe
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 17 08:37:38 2010 +0000

    Refine the documentation a little bit more

commit ab1a598534f7bb9fd552af6e853d9f2342427527
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 17 08:34:28 2010 +0000

    Better example that does not use attachment

commit 696b5a1f45876fb2bfc0f8e2f0e699a3bfce6b80
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 17 08:28:45 2010 +0000

    Reorder sections in Javadoc

commit fe36292c943e182a4a3128b80d6172fe1fd5bfe6
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 17 08:28:00 2010 +0000

    Refine the documentation a little bit more

commit 49f548bc5df84a37b9f78334dca38c1815267ce2
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 17 08:24:25 2010 +0000

    Updated documentation

commit 8841f6897f6209d40b3d0379adf32f348ac1100e
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 17 08:22:45 2010 +0000

    Updated documentation

commit 39e91028ebfd8a6c03b80828db0e034da7514a59
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 17 05:52:44 2010 +0000

    Typo

commit 08597e6f86dfc8a43e66be7ca5cf1535adec8b21
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 16 11:55:44 2010 +0000

    Javadoc

commit 28fe7c67cbe701645d34f1e976b5a16b0e64f9f6
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 16 08:41:02 2010 +0000

    Implemented consolidate-on-flush in BufferedWriteHandler

commit dd7f588916c3598bb3a1227b0b89526bd1869f9f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 10 08:17:58 2010 +0000

    * Removed a solved question from the comment
    * Applied the same optimization applied to the TCP transport to the UDP transport

commit bf721614aca5ac07643ba5a7a2d702834967ff2e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 9 05:41:34 2010 +0000

    * Removed tabs from css
    * Unified indentation to 2 spaces per tab
    * Re-added the Apache License header
    * Show HR line

commit e1d9627113dda57e4902002112d6d65dc271b521
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 9 04:09:46 2010 +0000

    More code font defaults

commit 739e656963d6aac48057d64efd6a20d044da4546
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 9 03:56:29 2010 +0000

    More explanation on how ChannelPipelineFactory works

commit 0857f398e001ad856c0c089f04f761adfbb8f8ba
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 9 03:41:12 2010 +0000

    Improved write performance by reducing the lame write attempts on the channel whose send buffer is full already

commit 194fd79c6b69c16312e2f760e97d7cee459897f6
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 9 03:19:11 2010 +0000

    Better code font

commit e247a282b1cd5d8ebb9c3ec779766acc3867effa
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 9 03:07:22 2010 +0000

    Fixed wrong plugin order

commit a3f33851de823ac648671f0cdd95587b56ce0643
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 9 03:06:05 2010 +0000

    Copy the Javadoc resources

commit 0496368055d14aadad09d7806b2b9c939f788dcc
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 9 02:54:32 2010 +0000

    New Javadoc/xref stylesheet

commit ee2ba2629e6f221283d4e180ec17aa5b8dc404d5
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 8 06:11:25 2010 +0000

    Javadoc

commit 926fdcc7aa685c720bdad0f6d6046027aafe6d84
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 5 03:01:05 2010 +0000

    Resolved issue: NETTY-289 Disable SSL renegotiation by default
    * Added SslHandler.enableRenegotiation
    * Disabled renegotiation by default

commit 9e72a7f3b1856fab65b1dbec700c28dfb43f9339
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 5 00:49:25 2010 +0000

    Replaced the call to deprecated method

commit ffeb1bfb9c44fb87212127b4f7bb0e3136cecc22
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 4 10:51:42 2010 +0000

    Typo

commit 8e82a1621addb9f4bec6602ec5d83308e24fb089
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 3 10:06:46 2010 +0000

    Reverted back the opportunistic write optimization due to unstability

commit 77f1b2b4a097e413ce36e3ca4f7ff64d05e7a1d5
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 2 11:03:45 2010 +0000

    Potential fix for performance degradation introduced during NIO write optimization

commit dd5354858e325bd3f6fa9cc0443d0e5470076c51
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 2 10:54:52 2010 +0000

    Reduced unnecessary Thread.currentThread() calls

commit 5269e645981091315a731db51479b5d82702eb56
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 2 06:42:57 2010 +0000

    [maven-release-plugin] prepare for next development iteration

commit 51f9ca047a017675734a46123379b59a28c54bc7
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 2 06:42:16 2010 +0000

    [maven-release-plugin] prepare release netty-3.2.0.ALPHA4

commit df82ff6a2cbe9f62139567499a8fbb1e638da167
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 2 04:31:12 2010 +0000

    Comments

commit 3f6c564090f931519ce79ecf9f066baf1d89867a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 2 04:30:44 2010 +0000

    Discard the buffer if the protocol is unknown

commit 6f2897a37b6d32524a894f51a127fe0f683c0667
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 2 04:28:33 2010 +0000

    Javadoc

commit deb1c1b03860a868821705f295d1462885130e4d
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 2 04:27:33 2010 +0000

    Resolved issue: NETTY-261 Write a port unification example

commit 0b16006fd74bbef93d984db3cf8f653fa455d1d1
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 2 03:13:15 2010 +0000

    Added a magic number to the factorial protocol

commit ce0d9838255df2a42844212a6088796207a5c8dc
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 2 02:13:06 2010 +0000

    * APIviz tag tweak

commit a6761fb4c94ad5fa1b3d2ce779c9199b4a16e3e9
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 2 02:01:43 2010 +0000

    Fixed broken Javadoc link

commit a61d5b2e6bb53e27cdf644864a912780e81b0b2d
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 2 02:00:04 2010 +0000

commit 4a3495b1c829b8bd0af9a1c7f07048512fc2a473
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 2 00:38:07 2010 +0000

    * Added @Sharable annotation which replaces @ChannelPipelineCoverage
    * Removed annotations from the examples because it's not essential part of learning the framework - User guide will explain about it later

commit 2f7c758fe6c4890390b88a0ab3fab33aea8e3887
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 1 23:56:37 2010 +0000

    Removed the reference to ChannelPipelineCoverage in the getting started guide.  Beginners should simply start from creating a new instance for every new connection, as shown in the guide and all examples which were revised to avoid confusion.
    Shared instances are more advanced topic, which will be addressed in another chapter.

commit 901b1f099a6d167744beadb5992f209278325fc1
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 1 11:46:09 2010 +0000

    * Deprecated ChannelPipelineCoverage (Will be replaced with something I will introduce later)
    * Revised JavaDoc so that a user can learn how to manage handler states
    * Revised JavaDoc about using ExecutionHandler

commit 7e3358f0f339a5b861596634c640928dc14d0bff
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 1 08:32:18 2010 +0000

    CRLF -> CR + LF

commit bb0c1e139f7feb8a8f5b583047956ef01074fa04
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 1 08:28:17 2010 +0000

    * Disabled chunked encoding for RTSP
    * Added RTSP encoders

commit 829114c37fe41386fcbd44abc28c34302456a5b8
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 1 06:25:23 2010 +0000

    Organized imports

commit 686ef795f904da5ec4a8be063852ceaf9b099b86
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 1 06:21:49 2010 +0000

    * Added NonReentrantLock
    * Replaced ReentrantLock or monitor object with NonReentrantLock

commit 2e363ee91895b3a97e55389c52e16cc1cc24a97e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 29 03:09:24 2010 +0000

    Inlined too trivial write() method

commit e0c14e096a3f80d81e5267ade52d1da3da029bd3
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 29 03:04:19 2010 +0000

    Removed unnecessary attachment() calls

commit c4b5248f68d9dbaccd9f82e6b6ee453d21b85262
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 29 03:02:03 2010 +0000

    Reduced unnecessary duplicate calls on NioDatagramChannel

commit 9b1d9b0c61ef82284ef84c0c6e0e3994e12a83ba
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 29 02:59:40 2010 +0000

    Reduced unnecessary duplicate calls on NioSocketChannel

commit eed6e6cc3a30ff498b0bcc20872fa9c2e4ee1e28
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 28 17:12:00 2010 +0000

    Fixed a bug where DiscardClientHandler.transferredBytes are always zero

commit 102b69d14f93e1eb0fc4a1e232389d2abc2ad290
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 28 16:01:49 2010 +0000

    * Fixed a bug where write requests are allowed to be reentrant
    * Fixed a bug where writeLock is not used properly - what a dumb mistake

commit 84cf41890c16903fcd4fc3089b380c99ba6fdfcf
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 28 13:16:46 2010 +0000

    DirectBufferPool should be static because it uses thread local now

commit 4bf4d5f814a4eee0ff16aa108ce513be71c72834
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 28 07:50:28 2010 +0000

    Overhaul on NIO datagram writes
    * Write operation is made in the caller thread opportunistically
    * QOTM example uses NIO datagram transport now
    * This modification still requires more performance analysis and testing

commit b74cd608153301e42c237c914966e162df095955
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 28 07:34:02 2010 +0000

    Overhaul on NIO socket writes
    * Write operation is made in the caller thread opportunistically
    * DirectBufferPool became thread safe due to this change
    * This modification still requires more performance analysis and testing

commit c59da2dfe6a88cb6cf6bbbc06f5940a5cbe5c4f5
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 28 03:31:57 2010 +0000

    Tiny optimization

commit 73c81acdfa893fa6e3045197b5087c95804ebb43
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 28 03:30:40 2010 +0000

    comment

commit 832fe2906337d774db83922e78e6b5cdc27c8e94
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 28 03:28:59 2010 +0000

    Even if no copy was made, writerIndex should be advanced

commit 2b786116b5613b57375973d8b6984b9e53f28a4b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 28 03:27:28 2010 +0000

    No need to copy if bufferFactory created a direct buffer

commit c8d5f1ab4a67923fb55429200507e2ac9d6645ac
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 28 03:24:09 2010 +0000

    For an unknown reason a different exception is raised in NioWorker.read()

commit e9b8f6b2d7cf3abf5a4a04f09bf3980890259c05
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 28 02:54:12 2010 +0000

    Allowed access to DirectBufferPool.acquire(int)

commit bddfdba415b3730a7043b7a619db5e909936719f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 28 02:50:31 2010 +0000

    Use DirectBufferPool for NIO socket reads

commit aa80596b33bc55ef38004d11e5fb26f17d94865a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 27 08:13:38 2010 +0000

    Fixed documentation errors in HttpMessageDecoder's subclasses

commit 966004332b0d1074631e52fe9cc2a2c89f59450f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 27 06:55:10 2010 +0000

    Small optimizations on DirectBufferPool

commit c4a230a5825cc62a3e16f4621d58753ecc0141fb
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 27 05:13:31 2010 +0000

    Removed unused method

commit 36e804bbec47711aaa7e7387e207b3fce2641ea4
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 27 05:07:32 2010 +0000

    Resolved issue: NETTY-282 Reduce memory copy between heap buffers and direct buffers in NIO transport
    * Replaced JDK's internal direct buffer pool with a custom pool optimized for Netty
    * Added ChannelBuffer.isDirect()
    * Cleaned up NioWorker.writeNow() and NioDatagramWorker.writeNow()

commit 030ece5bf9b9fede389a0ecc39253d97bef4347d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 27 02:43:49 2010 +0000

    Removed redundant conditional

commit cb9f90d6d50d0c1ec1d888614db0e9b676a7b08a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 27 02:39:28 2010 +0000

    parameter description

commit a85635f74c9574efd5d98e6cb717c1635bcc6831
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 27 02:38:17 2010 +0000

    * Added HttpVersion.isKeepAliveDefault() to handle the 'Connection' header in a more robust manner
    * Added HttpVersion constructors with the default keep alive flag - old constructors were deprecated due to ambiguity
    * Moved HttpMessage.is/setKeepAlive() to HttpHeaders and deprecated the original method

commit aff9af5af25776f258b6bbc099dc35a98d4cf03f
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 15:41:16 2010 +0000

    Fixed a bug where DefaultNioSocketChannelConfig does not recognize 'receiveBufferSizePredictorFactory' option

commit 9d2fcd6ff38018dbe4615dde2a579cce1d1febba
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 13:15:21 2010 +0000

    Fixed compilation error resulted by the recent dependency upgrade

commit 514586b917ef06cb5d0484eba2793de425ed346f
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 11:13:09 2010 +0000

    Reverting back to Guice 1.0 due to compilation issue with JDK 1.5

commit a8205a9545ac2e7d57afdf7ef75a997a8d40c089
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 10:49:01 2010 +0000

    Related issue: NETTY-240 Upgrade the dependencies to the latest versions
    * Applied David Dabbs's patch with some minor modification (version bump)

commit 2df22f8f36e38dd72f4ad8b6a412b27e0df97e50
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 09:55:58 2010 +0000

    Removed an empty line

commit 4ac906d41700768cce166b2f5baf3d1d8fff8968
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 09:55:22 2010 +0000

    enum -> static enum

commit edfc15424ebd5b03710805fb63b08e68f729c9a8
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 09:43:20 2010 +0000

    Fixed Javadoc error

commit 3362114248215c7d88c8d21d3c7adf5da5d6879d
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 09:04:19 2010 +0000

    * Replaced e-mail addresses into homepage/blog URL anywhere possible
    * Added Amit to COPYRIGHT.txt

commit c2465826fd7cc424c1349e8ee4f55fafc8eaaf97
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 08:25:29 2010 +0000

    RtspHeaders and its inner classes do not extend HttpHeaders anymore because RTSP user should not see non-RTSP header constants when he or she static-imported RtspHeaders.

commit 9de5df705a5899642b74398d34a711c44f41e558
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 08:16:58 2010 +0000

    Added HttpHeaders.Names.CONTENT_BASE

commit 573f8207a30e9f89cad6494e93a24c3bf3933d91
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 08:10:34 2010 +0000

    Removed wrong header value - max-fresh does not exist

commit 39023c2c7e65b8a7017f87994ec4f0e1393dbca7
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 08:04:57 2010 +0000

    Fixed JAvadoc

commit 0e57f6d004b53812f1ded34310fe98b02bbcb09f
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 07:45:23 2010 +0000

    Made RtspMethods and RtspResponseStatuses final

commit 07b6e791b518fadb08085c4e0c8e5036f5331f0a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 07:44:08 2010 +0000

    RtspVersion does not need to extend HttpVersion at all - it does not add anything to HttpVersion

commit d389be442fe8762c9d518b566184150238fd6698
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 07:42:32 2010 +0000

    RstpResponseStatus does not need to extend HttpResponseStatus at all - it does not add anything to HttpResposneStatus

commit f632925e63d967556d4795e91154b5400187dd46
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 07:35:29 2010 +0000

    Typo (what a shame)

commit ea4692e967a9da6a49dc65b7d975e3f13e1a9983
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 07:25:44 2010 +0000

    RtspMethod does not need to extend HttpMethod at all - it does not add anything to HttpMethod

commit 1ad9579e6e61918f8a78a4cc8070fe9524e590af
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 06:31:25 2010 +0000

    Javadoc for the RTSP package

commit 19cb90d73c38c72b4009be00657f17cb529b35c7
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 06:30:40 2010 +0000

    Added TODO

commit 2ad21ec84d459d50189259279ccdaea3484c5ee1
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 06:30:12 2010 +0000

    Updated Javadoc of HttpHeaders

commit fddfd4e7cf539a4bc4f88196fe697b389bf63633
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 05:49:39 2010 +0000

    Cleaned HTTP example using static imports

commit 98ccc7a7848464daad19ae715f2b6cef3be7c5b5
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 05:39:00 2010 +0000

    Simplified HTTP snoop example

commit 140aabef68c76aa98041966fa4eebd0717b0a7b2
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 05:33:10 2010 +0000

    Fixed a bug where HttpMessage.removeHeader() leads to a dangling pointer in the internal data structure

commit e50e46425a09598b0c11fba05b24e23d4f129dc4
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 05:17:52 2010 +0000

    Improved DefaultHttpMessage.toString() for easier debugging

commit d0e886c344cb4c5b6f4e05bf0b85d911b371b2e6
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 04:31:54 2010 +0000

    Resolved issues: NETTY-280 Add convenient getters and setters for HTTP headers
    Resolved issues: NETTY-281 Allow non-string values for HTTP header values

commit d87d81e3988151e7f721142bc8b7b94c7af22ef3
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 03:02:34 2010 +0000

    Removed TestUtil.timingTestEnabled because it's not used in the CI servers

commit eeb4e8f7b1dc2f9ee15774d4fa957ec650c4be05
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 26 02:57:41 2010 +0000

    Potential fix for failing timing tests

commit 7b6fb53fc17437d18878924d131e7cb793cb2857
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 25 13:09:31 2010 +0000

    Use yield instead of sleep

commit 6849ea2f4b01f4abb4f98fde3f33486935c1491a
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 25 12:27:51 2010 +0000

    the the -> the

commit 125ae30d04f8f5bb0ae8dd8471159c13a085a54f
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 25 12:22:53 2010 +0000

    Documentation TODO

commit f0431bb98d78c2de4f0c4262514c1b37d75a0648
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 25 11:51:12 2010 +0000

    Added a reference to SecureChatSslContextFactory for those who wants client cert auth

commit e8f3c3534c5ef009c8863cee7674df0aa604a913
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 25 11:50:08 2010 +0000

    Some warning message to confirm that certificate authentication really took place

commit a8eda60857b8ad118327db0687b4b95a38f8f9f5
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 25 11:40:47 2010 +0000

    Explanation on implementing client cert auth

commit d5ad5a47ac55adb5a93334c40166e5aec85ec74f
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 25 11:26:55 2010 +0000

    Use default parameters wherever possible to initialize SSLContexts

commit 2e477b87c27067ee8de55586d9fcd9028802f3e6
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 25 11:24:35 2010 +0000

    Added an instruction to generate a certificate when it expires (maybe in 98 years?)

commit a6f3a4f10fc6e1dd277bca5a3d7cd952f1f917ef
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 25 04:28:58 2010 +0000

    RtspHeaders.Names should be non-final just in case someone extends it to add more constants, like we did with HttpHeaders.Names

commit 129a54446c47e8abb0134a123965a4d64a94b5bc
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 25 04:26:05 2010 +0000

    Initial RTSP implementation which extended HTTP

commit 1c2796983e689e65cdc0e7647846e9fe6112052d
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 25 04:22:45 2010 +0000

    * Added Values.MIN_FRESH
    * Made Names and Values extensible

commit 2dde1e9bacd4ed280e65299297f3177cb263eb38
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 25 04:07:47 2010 +0000

    HttpResponseStatus.valueOf shoud not be final so that derived protocols can have the factory method with the same name

commit d216e321c8c89f23c8c7853a04af599edd139085
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 25 03:52:20 2010 +0000

    Relax throws clause restriction

commit 5a897af28dd3d00d44d9febf0dd0e5aa6eea2dd9
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 20 05:55:16 2010 +0000

    Resolved issue: NETTY-278 ChannelBuffer.bytesBefore() as an alternative to indexOf()
    * Added various bytesBefore() methods to ChannelBuffer
    * Deprecated the methods that could be replaced by bytesBefore()

commit fe73de34973d607e5700c628d5e3ae5f4f22acc1
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 15 07:12:07 2010 +0000

    Fixed a failing test

commit ebc2459bc7c720679a1171e3955555d6fcd290d2
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 15 05:39:30 2010 +0000

    Removed code duplication

commit 8a8d1d1da669bfb5251f622f6ad6b3b32e22fbc3
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 15 05:33:06 2010 +0000

    Fixed failing test

commit 57bdb3a4a597fe7dc85e4b5160fb949bba149c31
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 15 05:28:17 2010 +0000

    Related issue: NETTY-257 Add the getters and setters for a String and a char[] to ChannelBuffer
    * Reverted the previous addition of get/readString(...)

commit 7d40d47270eff29c06c2c086b51a4335c0286b70
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 15 00:47:29 2010 +0000

    Explicitly stated that a user can create many bootstraps with the same ChannelFactory

commit 238bdc90b82efa2349b26847cc54df1bbc47b172
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 14 12:24:59 2010 +0000

    Fixed failing test

commit 3ee7604591049208b0e3bc40a983e3001b36f065
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 14 12:21:00 2010 +0000

    CaseIgnoringComparator.INSTANCE should not be public

commit 4ba7ae374963a0292b5369e1700378e0c705b6e1
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 14 12:19:49 2010 +0000

    Merged MapUtil to Bootstrap

commit a36ea0f3a4d9deacb0a49683f046db11559b5c6b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 14 12:15:04 2010 +0000

    Moved SwitchableInputStream and its test class to org.jboss.netty.handler.codec.serialization because it's used only there.

commit 4d9b3346c58bc79354900d3290f5022280163a42
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 14 12:04:11 2010 +0000

    Moved ImmediateExecutor and its test class to org.jboss.netty.handler.ssl because it's used only there.  Actually there was another unrelated reference, so I simply forked.

commit 23943ac256c795f6764e9d68850a49b4f05f968b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 14 11:58:50 2010 +0000

    Moved MapUtil and its test class to org.jboss.netty.bootstrap because it's used only there

commit 0dbea6f162f17157c4f534d55ecc43c51ba8c231
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 14 11:56:38 2010 +0000

    * SecureChatServerHandler should use ChannelGroup where possible
    * Moved MapBackedSet and its test class to org.jboss.netty.util becuase it's used only there

commit be2991c586e8eb988d77ae766e13db3907bf890d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 14 11:52:11 2010 +0000

    Moved CombinedIterator to org.jboss.netty.channel.group because it's only used there

commit f8de47e2dafadc48e91da78e2fc8a4ef65f94877
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 14 11:49:53 2010 +0000

    Moved CaseIgnoringComparator to org.jboss.nety.handler.codec.http because it is used only by the classes there

commit 397107adc0ee34c07df76003033244e5168c7e52
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 14 11:47:43 2010 +0000

    * Removed unused methods in ThreadLocalRandom
    * Hide ThreadLocalRandom because it's used by LinkedTransferQueue only

commit 55b0bc2c2c4a7e406db87d34921e6376f83bd433
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 14 11:44:11 2010 +0000

    Related issue: NETTY-257 Add the getters and setters for a String and a char[] to ChannelBuffer
    * Added getString() and readString()
    * Renamed toString(int, int, Charset) to getString(...)
    * Removed some toString() methods which were added in the previous alpha releases - I will add an alternative method later

commit 8a574a7eb6444b9b1691c59d3ff8b2c69d3b373a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 14 09:49:02 2010 +0000

    Removed the two unnecessary methods - CharBuffer implements CharSequence already

commit e1c2c453c5efeaaa68d15992c7417710620561de
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 14 03:38:43 2010 +0000

    Removed unnecessary empty lines in the program listing

commit 1313ca5b17f2a33edef8ec78395a5352625f6af9
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 14 03:31:35 2010 +0000

    Updated the getting started guide to avoid user confusion on pipeline configuration

commit 3b5dd3676e2d4614f9c5e5a8bae36ad5269d410c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 14 02:59:40 2010 +0000

    More red tapes in the documentations

commit 48f74e7cd6acfc93552c494de617affbd1862952
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 14 02:57:42 2010 +0000

    Updated all examples to use ChannelPipelineFactory instead of the default pipeline

commit f67b06a931c773ed246e56129ec4fa8ea13eca3d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 14 01:53:26 2010 +0000

    Updated Javadoc about Bootstrap.pipeline / pipelineFactory properties so that users don't make mistake

commit 149a6cef7177860c0bda9770a16efdc830ed104c
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 11 10:15:11 2010 +0000

    [maven-release-plugin] prepare for next development iteration

commit a0e3cc6510eb1925634a15e563f075f2245e7768
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 11 10:14:29 2010 +0000

    [maven-release-plugin] prepare release netty-3.2.0.ALPHA3

commit 4ab3e248e7f1287f498d3ad2886a2c8f4b8f5899
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jan 9 12:12:50 2010 +0000

    A little bit of documentation

commit f67de2321481ba9caeb59ce647692a2d0bb4ce20
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jan 9 12:00:24 2010 +0000

    Javadoc

commit 95257174756718fcebe7ac3e8895bed13ad9bec8
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jan 9 11:37:05 2010 +0000

    Package description

commit 1142a1aa062ec85ca3d2f3465afdaee56fff586b
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jan 9 08:54:21 2010 +0000

    Fixed a cosmetic problem in NioDatagramWorker.read() - In some platform, ClosedChannelException is raised on DatagramChannel.receive() depending on timing, and it's safe to ignore.

commit 9f123980731de93b45edcbfce6a67ec616db8fad
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jan 9 08:44:32 2010 +0000

    Fixed NotYetConnectedException

commit 052a109bc94355744f563b01e2fa63d863251570
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jan 9 08:38:12 2010 +0000

    Fixed an assertion error where NioSocketChannel.setConnected() is called on a closed channel

commit 41af2d111ef093ed419d70d666736ddb3f4981ba
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jan 9 08:34:22 2010 +0000

    Added assertion message

commit 4ef936bea1346b10d9fd77943287dac2a70458b5
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jan 9 08:21:28 2010 +0000

    Reverted back previous check-in related with state update, which seems unnecessary

commit 0acffadd2918731e0982d432737ed840692948a0
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jan 9 07:57:18 2010 +0000

    Replaced flag update methods with simple assignment

commit 4668cb792e739e692daef709c7ca741c93b01610
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jan 9 07:53:23 2010 +0000

    Update the state flag if read or write fails

commit 60d3502ba143d26d0dd69f1599bb4eb9fe938f1a
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jan 9 06:38:14 2010 +0000

    Removed the lock aquisition against SocketChannel when isConnected() and isBound() is called, because it causes unnecessary contention

commit c8fc3a113597b3982f745b8128c1dc6322cc95de
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jan 9 05:40:40 2010 +0000

    * Fixed a bug where a user can break Netty when he or she calls setSuccess() on AbstractChannel.closeFuture
    * UnfailingChannelFuture is not used anymore - deleting

commit e2086cb754b4cb13095bc4873921ea27fd89d3b4
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jan 9 05:39:23 2010 +0000

    Fixed a potential bug where close future might not be notified

commit d9244393309eecff89d13d8dd2bc14a2a9425556
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jan 9 05:38:34 2010 +0000

    Sorted cases in switch statements just in case compiler makes a mistake

commit 9c0e9e17804ac7b6ab3a9c6ed934b13b4e81f598
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jan 9 05:30:39 2010 +0000

    Workaround for a compiler bug (unsorted switch cases)

commit a1d7a75ff4a8f731758522bd705807d7613e838c
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jan 9 00:52:20 2010 +0000

    Line wrap at 80

commit 6e228216b4eae1806021853895c4b46108bb1794
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 8 23:12:00 2010 +0000

    better documentation

commit a8d9e044d27e379fee6f9736385f4c60c505516e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 8 14:11:18 2010 +0000

    17 -> BUCKET_SIZE

commit 4999fabbcc6b3c210b352e27a998cadebc7366ed
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 8 13:29:39 2010 +0000

    NPE check

commit d7be7be5525a7ad2fd55eed290e46f6f3aacad74
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 8 08:45:56 2010 +0000

    Initial check-in of the WebSocket implementation and its example

commit 9f8fa65a14f4162990530b4a77f5ccf25adbee2e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 8 08:33:48 2010 +0000

    * Use HttpRequest.isKeepAlive() instead of long conditionals
    * Use HttpChunkAggregator because we don't want to complicate the example

commit f926c0adc08556aa614bce87990da5b51bf2f3f6
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 8 08:31:52 2010 +0000

    Use HttpRequest.isKeepAlive() instead of long conditionals

commit 4ede085edcd6ef4113945954ef2e54a8be8b0c59
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 8 08:29:37 2010 +0000

    * Replaced TreeMap with custom linked hash map for storing HTTP headers
    * Added HttpMessage.getHeaders() and HttpChunkTrailer.getHeaders()

commit 58086a865f1b5592578392006c3efb6aafd2c884
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 7 09:19:19 2010 +0000

    Code clean up

commit 46e9fe364a56628787856a8ad9777f94997523b1
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 7 09:08:15 2010 +0000

    Fixed issue: NETTY-272 HttpMessageEncoder should not prepend/append extra data around HttpChunk content if Transfer-Encoding is not chunked.
    * OneToOneEncoder should ignore null because HttpMessageEncoder returns null when HttpChunk.isLast() is true.

commit 661acd24c8281bb338ed8b66839b3b7e2d93bcc6
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 7 09:05:38 2010 +0000

    Fixed issue: NETTY-272 HttpMessageEncoder should not prepend/append extra data around HttpChunk content if Transfer-Encoding is not chunked.
    * HttpMessageEncoder now does not add any extra data around HttpChunk content if Transfer-Encoding is not 'chunked'
    * Moved the utility code that checks the existance of 'Transfer-Encoding: chunked' to HttpCodecUtil so that both HttpMessageEncoder and DefaultHttpMessage can use it

commit 491baa0c7bd323eb4be226469a0f4fc420dd4b5c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 7 07:57:14 2010 +0000

    Added the header constants related with WebSocket

commit bda588723862416e1f8e45563e9c25e5ba3d5292
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 7 06:41:15 2010 +0000

    Added Channels.pipeline(ChannelHandler...)

commit d26dc2791f5e27b5e63472097ed1f94c591aeba0
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 7 05:44:44 2010 +0000

    Added a FIXME marker for StaticChannelPipeline

commit 0596aaac48bb11a44157353042e017e9f5bdf8b2
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 7 05:33:50 2010 +0000

    Extracted int-to-string conversion to ConversionUtil

commit bfc3b3999db88586cb8b69f8e5a00e67830bff7e
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 6 12:13:40 2010 +0000

    Educational information about UDP packet length limitation

commit 96da66960a679366f16030c6940403edb4d2f223
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 6 12:03:18 2010 +0000

    Fixed a bug: NETTY-270 DatagramChannelConfig.setOption("receiveBufferSizePredictorFactory",..) does not work.
    * Added a missing if statement

commit 6dcc714704265e9d719d03f3a06e51a5bdfee6a2
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 30 03:20:22 2009 +0000

    Indentation

commit aae6dce04667f2d369cb9ea5204667e518286b8d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 30 03:14:50 2009 +0000

    Indentation

commit 7036654647969571d35b650bd379f4e3133e87a6
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 29 07:24:24 2009 +0000

    * Resolved issue: NETTY-269 (Add ChannelBuffers.copiedBuffer() that accepts char[], CharBuffer, and CharSequence)
    * Rewrote toString() and copiedBuffer() implementation
    * Removed unnecessary methods in CharsetUtil

commit 33766a1f4ff767dfd580ba3397c1f49d1ebabadd
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 29 05:54:38 2009 +0000

    Removed the deprecated tests

commit 24b59bbfa901f738dfb6e9c3640b5ebead19d069
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 29 05:52:00 2009 +0000

    Resolved issue: NETTY-268 (Use Charset instead of String to represent a character set.)
    * Replaced String charsetName with Charset
    * Added o.j.n.util.CharsetUtil

commit 55078d87bd7cc7f560c99f04f6e08dce977a0087
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 29 03:07:20 2009 +0000

    Documentation

commit a07d24ec3ecb9d5d43e7f329bdd772a381f90fa3
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 29 02:29:41 2009 +0000

    Fixed issue: NETTY-267 ChannelGroupFuture.iterator() should iterate in the order where the I/O actually occurred.
    * Replaced HashMap with LinkedHashMap in DefaultChannelGroup and DefaultChannelGroupFuture

commit 0314234a41b5dcf08f853bf11bf9a69fff221a9c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 29 01:34:00 2009 +0000

    Spacing

commit 437cc0211cd1e1fdda575e3a2190053a2bfcb541
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 24 03:18:00 2009 +0000

    '\n' -> "\r\n"

commit 3ff8cd46c99f92beca4573111293a22e32ef65bf
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 24 03:10:34 2009 +0000

    * Backported LinkedTransferQueue from the latest upstream revision (1.71)
    ** Replaced the use of sun.misc.Unsafe with Atomic*FieldUpdater
    ** Added ThreadLocalRandom

commit c7e2562f1c0d80356c561bac895a022c4f6d5de7
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 22 04:38:34 2009 +0000

    Fixed issue: NETTY-265 NIO datagram transport should not close the channel on write failure

commit 974a18568ab5f5680da376c5ea109a5a39054739
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 21 08:51:11 2009 +0000

    Backported the changes (~ 1.44) in LinkedTransferQueue from the upstream

commit ad4d99c764c4d217b1610c9baad682717d55f2f2
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 21 04:20:41 2009 +0000

    Fixed NETTY-263 (Build fails with unzipped distribution)
    * Configured buildnumber-maven-plugin not to fail even if svn up fails

commit 807e80145386439312be8a0c30627be733d6ddd1
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 18 08:30:08 2009 +0000

    [maven-release-plugin] prepare for next development iteration

commit 3c0119c8fb3368a70e403ed4fefabfab736495a3
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 18 08:29:22 2009 +0000

    [maven-release-plugin] prepare release netty-3.2.0.ALPHA2

commit eb575430c2ac3b2c997c7878870ae5b1bb50ea40
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 18 06:22:08 2009 +0000

    If parentHandler is specified, ServerBootstrap should not use StaticChannelPipeline because the parentHandler might want to manipulate the pipeline

commit 64f0a931a4a9813d5009d64400bf7d2f4f36a949
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 18 06:17:59 2009 +0000

    Reverting back the previous change - some codecs might manipulate the pipeline dynamically

commit 553f8cf1e956576dc19d484f31d8e53a92ae4892
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 18 06:03:37 2009 +0000

    Resolved issue: NETTY-262 Static ChannelPipeline implementation
    * Added StaticChannelPipeline
    * Changed all Bootstrap implementations to work with StaticChannelPipeline
    * Changed ServerBootstrap and AbstractCodecEmbedder to leverage StaticChannelPipeline
    * StackTraceSimplifier should recognize StaticChannelPipeline

commit 9951e195731881b4bb710decab7bc350b339c78f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 17 10:57:57 2009 +0000

    Null check

commit 15aded0df78cb63317d622c302214ed76905e7b0
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 17 10:21:34 2009 +0000

    * More documentation for developers

commit 65634bda11cf81e2287700dd4cdd6fd947060034
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 17 10:19:09 2009 +0000

    * Better documentation for developers
    * Fixed a bug where a channelOpen event is swallowed

commit 3fcfc910e1bda3db14db56612edb5581b60e94cf
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 17 10:14:22 2009 +0000

    IdleStateHandler.initialize() and ReadTimeoutHandler.initialize() must not be called if their pipeline is not attached yet.  Otherwise the timeout might occur even before the connection is established.

commit 2bf4dfcfb9652e03f2a660152194543f567842af
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 17 09:43:45 2009 +0000

    More Javadoc for LifeCycleAwareChannelHandler

commit d06a6285ea1c481b52746fd94265895767ae24ae
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 17 09:23:02 2009 +0000

    Fixed a broken Javadoc link

commit fd3bcedbbf6ee0483a10acfec58d1db55faf39e0
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 17 09:16:52 2009 +0000

    At least timestamps must be updated on channelOpen

commit ba17621c0104c31548e87d33a059fea789b7e337
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 17 09:13:30 2009 +0000

    IdleStateHandler and ReadTimeoutHandler don't need to override channelOpen anymore because the contract of LifeCycleAwareChannelHandler has been changed.

commit 7048c5189815e4c20a1182e86c12909d7daacd55
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 17 09:11:07 2009 +0000

    Fixed Javadoc of LifeCycleAwareChannelHandler
    * Some handlers (e.g. SslHandler, ZlibEncoder) need to store its context somewhere, and they needed to implement both beforeAdd() and channelOpen() because beforeAdd() is not called if pipeline is not attached.  This led to code duplication.  To address this issue, ChannelPipeline now always calls the life cycle listeners whether it is attached or not

commit f7606ffc315eca1af8576aa28dfa1587ad275e07
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 17 09:05:46 2009 +0000

    Fixed a bug where the first handler's life cycle listener is not called

commit d6facc0b9efa348838532e2767f13ed979f7065f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 17 08:46:18 2009 +0000

    Removed the Javadoc links to the deprecated methods

commit 578def7a9b6c8949dbce5dec305e43429ffe1813
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 17 08:44:38 2009 +0000

    Fixed issue: NETTY-260 ZlibEncoder.close() and SslHandler.handshake/close() methods do not require a parameter
    * SslHandler implements LifeCycleAwareChannelHandler to retrieve its context
    * SslHandler.handshake() and close() do not need an argument anymore
    * Deprecated the old methods

commit 3275f74ef9738a4312dea10b9c7f185db79ab2a9
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 17 08:37:11 2009 +0000

    Fixed issue: NETTY-260 ZlibEncoder.close() and SslHandler.handshake/close() methods do not require a parameter
    * ZlibEncoder implements LifeCycleAwareChannelHandler to retrieve its context
    * ZlibEncoder.close() does not need an argument anymore

commit 29580239506446a0ba02710126a2a2b2e2ded73b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 16 08:35:30 2009 +0000

    Documented the possibility of thread safety issues in BufferedWriteHandler due to wrong queue implementation

commit c35231ae95d107e4c69023113d63802b9f01d1c6
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 16 08:29:33 2009 +0000

    Resolved issue: NETTY-209 (Batch Write Handler)
    * Added BufferedWriteHandler

commit feac8bb5fad18e1a778642b7fe75def3d0898139
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 16 07:23:35 2009 +0000

    Related issue: NETTY-259 (Add constants and enums for HTTP PATCH method)
    * Added HttpMethod.PATCH
    * Added HttpHeaders.Names.ACCEPT_PATCH
    * Added all known HTTP response code to HttpResponseStatus

commit d87408936f15e7d61e8b813326f23edb2ff87e25
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 16 06:39:53 2009 +0000

    BlockingReadHandler does not need to implement LifeCycleAwareChannelHandler

commit bab9af2b52b8f4880e4c3dc316751865cf77c2bb
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 16 06:24:45 2009 +0000

    * Fixed a problem where BlockingReadHandler does not handle exceptions properly
    * Added BlockingReadHandler.readEvent()

commit 38c60ef8072456dbfcfff28722211b6c6b03febd
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 16 05:05:56 2009 +0000

    More straightforward description

commit 47498eb15904ebdf16d5931ed7bf8dec09f5707d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 16 05:02:23 2009 +0000

    Resolved issue: NETTY-258 (Make DynamicChannelBuffer.ensureWritableBytes() public)
    * Added ChannelBuffer.ensureWritableBytes(int)

commit 45d36f96b9dfad015256f45a2d12babb5795c96a
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 7 06:26:56 2009 +0000

    Shorted package description

commit 7894784ea9c27cc2a862315996181dbf216844fe
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 7 06:23:22 2009 +0000

    BlockingReadTimeoutException should extend InterruptedIOException just like SocketTimeoutException does

commit 2685d03d8f6c9f95ad9ecab214c587ff95e69437
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 7 06:22:06 2009 +0000

    Resolved issue: NETTY-208 (Blocking read handler)
    * Added BlockingReadHandler and its exception

commit f7a0a4db110a36c84e4c65031b447903d1994fa9
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 30 21:19:50 2009 +0000

    Related issue: NETTY-256 (A race condition during the recommended server shutdown procedure)
    * Fixed a failing test (NioServerSocketShutdownTimeTest) by waking up the selector explicitly

commit 42d2f79239e8b15ed77ea95b760633df87ad1828
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 30 11:59:00 2009 +0000

    Resolved issue: NETTY-256 (A race condition during the recommended server shutdown procedure)
    * Fixed a bug in the socket transport implementations where a new connection can be accepted after the ChannelFuture of ServerSocketChannel.close() is complete.
    * Introduced a lock to ensure that the boss thread is terminated before notifying the future

commit 1688569758f1ac2e298c89aa4bc17f036a064477
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 25 07:08:52 2009 +0000

    Related issue: NETTY-253 (Add several useful getters and setters to ChannelBuffer class)
    * Added ChannelBuffer.hasArray/array/arrayOffset()

commit 2c3ab480a2e67a9ceec363b4a6a349ad8df46372
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 25 06:51:43 2009 +0000

    Related issue: NETTY-253 (Add several useful getters and setters to ChannelBuffer class)
    * Added getters and setters for char, float, and double

commit 2b425a78c7cd383d00431c1418b816e95ed67825
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 23 05:38:50 2009 +0000

    Set svn properties

commit f534c2ac534bccda21ee75edd2bf2fb2f6728d78
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 23 05:37:56 2009 +0000

    Set svn properties

commit 885ef30dfc86430697abf7ec48769654abadfab1
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 23 05:37:35 2009 +0000

    Set svn properties

commit a6184725ba5db1e29e4049f64544eb84886baee9
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 23 05:37:07 2009 +0000

    Removed a tab

commit 015724a527a0f237726f46f28a5dbb3e0d1087ab
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 23 05:35:43 2009 +0000

    Set svn properties

commit f17d05311f7e4ae046afae42961f7e3210ce8005
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 23 05:34:22 2009 +0000

    Removed a tab

commit 44ab3dd94a62f8b3eb8c4ebd16c747328589d0da
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 21 15:51:21 2009 +0000

    HttpMessageDecoder.message doesn't need to be 'protected'

commit cf5ef8cf5e9db0663483f97df81ac83b4fb21cd2
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 20 04:12:16 2009 +0000

    Resolved issue: NETTY-247 Make HttpMessage, HttpChunk and their default implementation completely mutable

commit 4649d57097ed672d1758c62a5b39f89f0b8979d7
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 19 10:09:40 2009 +0000

    More strict testing

commit abe2a88d60bf1d11151dc646dd86e1bb113e61a6
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 19 09:46:30 2009 +0000

    Resolved issue: NETTY-255 (Make CookieDecoder more robust)
    * Modified CookieDecoder not to recognize commas and semicolons as attribute separators if it's impossible to decode the next entry.
    * Added a test case for decoding Google Analytics cookie which raised this issue initially

commit 9e44dbada5fdc2d338e10855589a187181e9ac1a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 19 08:38:46 2009 +0000

    Resolved issue: NETTY-254 Do not do lazy-initialization in dynamic buffer
    * No lazy initialization anymore for DynamicChannelBuffer - it just causes confusion to users!

commit 6795fc0627619ade92b5121c686edf486838f4cc
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 18 12:28:39 2009 +0000

    updated version string in docbook

commit 2dde687e85d638f144feb3246a1b783dc3ed8280
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 18 10:18:15 2009 +0000

    ''

commit 8eeb72cbbf79496d317462a8bdf63e461ba42717
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 17 15:46:34 2009 +0000

    Reverted the previous optimization because it might perform very bad as the number of components in the composite buffer increases

commit 902ab48820e78efc61b77fa1292b0d25c5355160
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 17 15:11:31 2009 +0000

    * Rewrote FrameDecoder by utilizing the latest improvement in CompositeChannelBuffer
    ** A user doesn't need to make a copy of the cumulative buffer anymore.
    *** Modified all FrameDecoder subtypes to use slice() instead of readBytes()
    * Reduced the maximum length of the random writes in AbstractSocketFixedLengthEchoTest to increase the probability of composite buffer occurances

commit 96bbbbb7f103d4f7a696317df7051d269531ff6e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 17 07:43:43 2009 +0000

    More Javadoc

commit 8c39e2823ecdc3c423132971269315e5a73158dd
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 17 07:39:02 2009 +0000

    * HttpMessage.isChunked() checks the 'Transfer-Encoding' header

commit 2dab4843728ed25c9803ebb1fcc0a8a168bacd8e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 17 07:31:35 2009 +0000

    Fixed a bug where trailing headers are not written

commit cfd34212343d58e02a4cec5ce25470f2592ffe76
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 17 07:22:06 2009 +0000

    Fixed a bug where trailing headers are not written

commit 40597002e9d4a3e53f8e19df712a9e5652281ddb
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 17 07:19:28 2009 +0000

    resolved issue: NETTY-250 HttpMessageDecoder violates HTTP/1.0 by converting a message into chunked encoding
    * HttpMessageDecoder does not add the 'Transfer-Encoding' header anymore
    * Added HttpMessage.setChunked()
    * The semantic of the HttpMessage.chunked has been changed

commit ce48ab00582bdc2cd1e0f61684e19dc2b3f54585
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 17 06:02:42 2009 +0000

    * Changed the semantic of HttpMessage.isChunked()
    * updated the Javadoc of HttpMessageDecoder

commit 4ce65f36212e7a97b902958ad6c56611091c83f5
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 17 05:39:01 2009 +0000

    Resolved issue: NETTY-251 Add support for HTTP trailing headers
    * Modified HttpMessageDecoder to generate HttpChunkTrailer with trailing headers
    * Trailing headers are not merged into HttpMessage anymore for correctness

commit e81d0e54149b473bc9c14d01450601a03cb0d483
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 17 05:27:20 2009 +0000

    Related issue: NETTY-251 Add support for HTTP trailing headers
    * Added DefaultHttpChunkTrailer
    * Moved header validation logic to HttpCodecUtil

commit e0ea707e92b7409e3075920eb74d6b7b7ab66250
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 17 05:12:55 2009 +0000

    Related issue: NETTY-251 Add support for HTTP trailing headers
    * Added HttpChunkTrailer interface - need to write the default implementation
    * HttpChunk.LAST_CHUNK implements HttpChunkTrailer

commit 960bbe3879e9d1435021d0e743ab6cb36cdf1d0c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 17 04:59:33 2009 +0000

    Typo

commit e12d04da7454e79557ba29938441a60eba23127c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 17 04:58:49 2009 +0000

    Optimized HttpChunk.LAST_CHUNK

commit ebb10d3267363958951e854718d963871b71a634
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 17 04:55:56 2009 +0000

    Related issue: NETTY-251 Add support for HTTP trailing headers
    * Added the preliminary support - the trailing headers are simply merged to the HttpMessage.  The last chunk type should be added, too.

commit 2e47058fc77dedee0e123a3021dc2679917a1848
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 17 04:16:24 2009 +0000

    typo

commit 6075c50cf77ac0fdc9ba8f1f5b9af2dc7a35854c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 17 03:30:46 2009 +0000

    Resolved issue: NETTY-252 Remove the deprecated types and methods

commit 74bbc819b92c426c63419ecc792d6b05ef184bb3
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 16 14:55:52 2009 +0000

    Updated the dependencies and build plugins to the latest version except for XNIO, which needs additional work

commit eaa5da5aebf2baa57db317e09652388040517991
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 16 11:51:07 2009 +0000

    [maven-release-plugin] prepare for next development iteration

commit 32a0bed729e32801098c9f16a27759432917f07d
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 16 11:50:17 2009 +0000

    [maven-release-plugin] prepare release netty-3.2.0.ALPHA1

commit 9c5a14b0c262becf69fa1165d5f7bdbc1825bd38
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 16 05:21:51 2009 +0000

    Should close the channel explicitly on connection attempt failure

commit f8aea1547e4b59d8f34f78e67b48b44fbf51cf02
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 16 05:14:36 2009 +0000

    * Removed the calls to SelectionKey.cancel() which takes places before calling Channel.close(), according to SelectableChannel Javadoc
    * Fixed a bug where connect future is not notified if the channel is closed during the connection attempt

commit 1f2d65ce54b52b5da78bae70768732592cf994d3
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 11 04:22:28 2009 +0000

    Added missing annotation

commit 464ea90492f2fc7aa4892cb6e1c65d998caa11a2
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 3 07:44:06 2009 +0000

    Fixed some non-sense code as advised by FindBugs

commit ed3500373f5c1fc76267420540c8789dc76df2c4
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 3 07:11:52 2009 +0000

    Improved Javadoc

commit b3e938924cca90763ec6955c4b6b5806c0358b64
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 3 06:49:47 2009 +0000

    tlee@redhat.com -> trustin@gmail.com

commit e0132d58858a9244185a33caec6fc8f39ee41af9
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 3 06:48:39 2009 +0000

    Updated the HTTP snoop example to fully utilize the compression handlers

commit b31f1429b62c5cd116758e276b18d04c38e4ca59
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 3 06:47:30 2009 +0000

    * Better method naming
    * Added HttpContentEncoder and HttpContentCompressor (needs javadoc update)

commit 6e510842168aa171a4454265f37b67a0ca15ce2c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 3 06:46:30 2009 +0000

    Changed constructor parameter order

commit 26cdadda9ea46c8fe4e87770360976480fd751ed
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 3 02:59:18 2009 +0000

    Simplified HttpContentDecoder using the new methods in CodecEmbedder

commit 5eb56831e80991ff8e13de4950b9b215ac05136c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 3 02:34:54 2009 +0000

    Optimized CompositeChannelBuffer creation

commit ec80daae014cb8c11997f611403f3f285afd2ea4
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 2 12:03:14 2009 +0000

    Better pollAll implementation

commit 6cb1a504fb0ffe05ab5732574f875d461f4dc21b
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 2 12:01:19 2009 +0000

    Resolved issue: NETTY-245 More convenience methods in CodecEmbedder
    * Added CodecEmbedder.size()
    * Added CodecEmbedder.pollAll()

commit bc6b84e58bf3887fcb0fcfd2e3c950b1aa422f47
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 2 09:58:30 2009 +0000

    Added HttpContentDecoder.getTargetEncoding

commit d450f0a228e3c7af10b10bf5d3aeb1c0801108f1
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 2 09:35:33 2009 +0000

    Renamed beginDecode() to newDecoder()

commit cdf1474059a2ad45c565c9ffc5c8b781dcfea9d9
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 2 09:21:41 2009 +0000

    * Slight code clean up
    * Raised the default cancelled key clean up interval from 128 to 256

commit b105461383f761dd48a2aaf8b111c629c24d8ef4
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 2 09:21:13 2009 +0000

    Split HttpDecompressionHandler into HttpContentDecoder and HttpContentDecompressor

commit f0e766dcb3515d87d63313e1ad58192c5e65ca2b
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 2 06:38:53 2009 +0000

    Updated the QOTM example so that people do not ask questions about truncated packets

commit e92e10d6b0bc964fbe18f864882f7fbdcf9e492b
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 2 06:34:16 2009 +0000

    Updated the QOTM example so that people do not ask questions about truncated packets

commit 42c9242286ba3de513d5eb773f8bf3c2b94c092d
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 2 06:30:10 2009 +0000

    Resolved issue: NETTY-244 ReceiveBufferSizePredictorFactory
    * Added ReceiveBufferSizePredictorFactory
    * Added AdaptiveReceiveBufferSizePredictorFactory
    * Added FixedReceiveBufferSizePredictorFactory
    * Added get/setReceiveBufferSizePredictorFactory() to all related ChannelConfig interfaces and implementations
    * More accurate documentation on the default predictors
    * the default predictors are null internally and created lazily on demand to reduce footprint

commit f7bf2932d997ab8928dd2784edee3b35ab3bb244
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Oct 30 08:02:53 2009 +0000

    Wrong pointer - those tables were moved to ChannelEvent

commit a3c2efaff15ad00a37ab1cee16fa56aaf7c0629e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Oct 30 08:00:44 2009 +0000

    Wrong pointer - those tables were moved to ChannelEvent

commit 075229ab10e6f6dc880c435d68e7e603cf7de90c
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Oct 30 07:51:33 2009 +0000

    Better Javadoc for beginners

commit 0f8ae7923df9aa6a64cb3671ae26cd6c1b1f4d32
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Oct 30 06:38:55 2009 +0000

    Typo

commit d0f67f97fc3d5c4b093049113059a4763e1f9dd0
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Oct 30 00:04:48 2009 +0000

    Fixed unmatching quote in the hyperlink tag

commit db823d904193b2a4e2ab3de43925bf57aa3846d0
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 28 00:42:29 2009 +0000

    Set 'Content-Encoding' to 'identity' if necessary

commit bf1fc6bc237de7cc9c4a967434f91c11af47fee1
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 27 12:03:47 2009 +0000

    Added a FIXME as a reminder for API redesign

commit 988089ed104b7b135d4be463de331a57bec335ea
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 27 09:54:00 2009 +0000

    tab -> spaces

commit e06ab750cb5cf59fda9ee0d8ca64eab63d96609b
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 27 09:27:54 2009 +0000

    Secondary fix for the file descriptor starvation problem

commit 692c278cf99ad1c73d5ee46b6aa0c10467119392
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 27 09:04:42 2009 +0000

    Comments

commit 4ec06f7c78680558232786c8d574c10b6cf5dc55
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 27 09:03:53 2009 +0000

    Fixed ConcurrentModificationException

commit 2663f85936c4fc5af0daeba22c85a384a884e2bd
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 27 08:49:13 2009 +0000

    Removed unnecessary conditional statement

commit 698f8d54eb909f820bed6166ce8db0863b6d68f9
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 27 07:22:33 2009 +0000

    Applied the same fix for 'too many open files' to NioDatagramWorker

commit 7f052753051904f7a425a5d24460f02d79e3f1a0
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 27 06:20:45 2009 +0000

    The thread that calls NioWorker.close() might not be in the selector loop

commit ff6cf1787e877d2e3ffad13081a27eb434848ab0
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 27 06:11:47 2009 +0000

    * Fixed failing shutdown time test

commit 5edf0242e830f9ef35317f1985e79e232415be6f
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 27 06:02:39 2009 +0000

    Removed unncessary parenthesis

commit f4a71f92ce873d30e1422f0435e836dc39216ce0
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 27 06:01:13 2009 +0000

    Preliminary fix for the file descriptor starvation problem

commit 20798ee42956244479bd35f4e0f8a819f01dc6bb
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 27 04:11:43 2009 +0000

    This test case cannot reproduce the problem - removing

commit 72a35e3e24650fcea4009a958cdec075ee2fdb29
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 27 03:27:32 2009 +0000

    A workaround for 100% CPU consumption issue in NIO selectors, suggested by David M. Lloyd

commit d0890c1af0ef07c27d8014e925c11c7a8e31ac8f
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 27 01:18:45 2009 +0000

    Wrong author

commit c079291012043b029fcbc1e3ce949e125a3820bb
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 27 01:18:17 2009 +0000

    Added a test case that makes sure the workaround for the 'spinning selector' bug works.

commit 52221931d50c00b06bd43114856bbd0fafc68403
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Oct 26 16:41:56 2009 +0000

    A workaround for 100% CPU consumption issue in NIO selectors, suggested by David M. Lloyd

commit dabea9dfff9011a7edd69a9f95b0cef8bac5a9c3
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Oct 22 11:28:38 2009 +0000

    Update the example to utilize the new HttpDecompressionHandler

commit 11a1e9ae3954bd39d7ace787d6009cc1e79c81ad
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Oct 22 11:26:08 2009 +0000

    A preliminary implementation of HttpDecompressionHandler

commit b4d2056f28235e86b4edf6444f3bfe07738f6740
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Oct 22 10:29:39 2009 +0000

    Set the 'handshaking' flag before calling beginHandshake() so that any failed handshake attempt can make SslHandler.handshake(Channel) return a failed future immediately.

commit bf3da2d0e36054a0487da6733a7d57a93288d182
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Oct 22 10:22:24 2009 +0000

    Fixed compilation error

commit 2ac4719faebcad82bf310db1af37493b930cb45c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Oct 22 10:21:20 2009 +0000

    The asynchronous operations should not throw an exception directly

commit 2fea789309243083410152b3628fada1d1249c70
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 11:50:16 2009 +0000

    Rephrased the comments on compression handlers

commit 6505a4e2855b4d7187a13e9236c254d90ba9530f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 11:48:43 2009 +0000

    Fail when unsupported flags are set

commit df216c2b676d51348604fa0fbd557b0d937a93a8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 11:30:55 2009 +0000

    Fixed wrong byte order in the gzip xlen field

commit 1dc34f0bfd81d111b930dd28bd83d0e9c89aeb33
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 11:27:12 2009 +0000

    Use GZIP in the Factorial example

commit 8b7efa5db4f9ab69cd6fcf8768822040afc4aefd
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 11:23:52 2009 +0000

    Fixed wrong byte order in gzip crc32 and isize field

commit 05525065b2098f17217c31298a156d6ee44494fb
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 11:04:32 2009 +0000

    Fixed a bug where FNAME and FCOMMENT fields are not decoded correctly

commit e10cc133f582eaa131b0319989094c9e48c3d024
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 10:31:56 2009 +0000

    Fix for compilation error

commit 96cb5759869be3e02f011e3d81294576c6e265ad
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 10:26:41 2009 +0000

    Complete support for DEFLATE based wrappers - zlib, gzip, no wrapper

commit 8e6e996392cd639551b75e9f2cab9c57f276c6a7
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 10:06:33 2009 +0000

    Added complete GZIP wrapper support to JZlib

commit a5ae29df26b50b127164c1387d09431e3fb795f3
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 09:10:55 2009 +0000

    Constant reordering

commit 9cab17effe8bdf4a3db65f8bec310ae98cff3973
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 09:08:38 2009 +0000

    Preliminary GZIP implementation (no CRC32 and ISIZE checksum yet)

commit 1b178477d662248d27b6cdf707239d7d587cba9d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 07:54:47 2009 +0000

    Refactored jzlib to support more wrapper types.  zlib is the only wrapper at the moment though

commit 96d3726a389929c037ef515ad77d39914896f458
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 07:35:31 2009 +0000

    Removed unnecessary memory bandwidth consumption

commit d8119d65fe521f5d1b1eb525d6ba70d71411cc24
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 07:31:42 2009 +0000

    Updated the copyright header

commit a7e7d124439c56d10c9883b46d1cd055feefd797
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 07:27:59 2009 +0000

    JZlib code cleanup

commit eeb98c5f97090fd16116d7830994706a4495e649
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 06:07:26 2009 +0000

    * Forked JZlib to support GZIP format
    * Added CompressionException to hide ZStreamException
    * Better javadoc on compression level
    * Better compression level validation

commit 57c0600b90c7adb8c9ae499dfb11021c6a7796b6
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 05:07:37 2009 +0000

    OneToOneDecoder now understands null - improve ZlibDecoder

commit b78d357bad5953ee7f6d5c74b0947f05a87a7370
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 05:06:49 2009 +0000

    More Javadoc in OneToOne(Encoder|Decoder)

commit 25fefa16e83ff64014a16686f2daab23542020c6
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 05:02:06 2009 +0000

    Improved Javadoc of OneToOneDecoder

commit 3f8cf952d2ec44d97966e92a64a18d2b6831d6fd
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 04:58:55 2009 +0000

    * Added ZlibWrapper (not being used yet though)
    * Removed completed todo item in ZlibEncoder

commit e3b37958c4cf4c15ba38c36b6ffa3aa128c920e5
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 04:18:12 2009 +0000

    * Added LZMA compression handler to the TODO list
    * Removed a link to unimplemented compression algorithms

commit 6022f207ab283cc4747d4dff333ff8103ff9ff3c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 04:15:56 2009 +0000

    * Thread safety
    * Proper destruction of deflater and inflater

commit c3a88d0c48e6fc6377d7ada879b1ad69bfdafb58
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 03:58:38 2009 +0000

    * Fixed incorrect SslHandler.context() implementation
    * Added some FIXMEs

commit 5cfaf7333c17b6f7d8bb740969ede2c23e4da401
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 03:53:19 2009 +0000

    * Proper handling of Z_STREAM_END result code in ZlibDecoder
    * Added ZlibDecoder.isClosed()

commit b646071570d1f5af9d5df0acab696b4e1cf4eab2
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 03:44:05 2009 +0000

    Extracted the utility methods in ZlibEncoder to a new utility class 'ZlibUtil'

commit f355d74eb03e65e8aa53020feeedd61eff73ebaf
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 03:41:03 2009 +0000

    * Added preset dictionary support to ZlibDecoder (likewise I did in the previous revision of ZlibEncoder)
    * ZlibEncoder.fail() and exception() package-private so that ZlibDecoder can use it

commit ab6a869825aea35af87593ac0de970f785e28090
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 21 03:34:23 2009 +0000

    * Fixed a bug where ZlibDecoder fails to recognize Z_STREAM_END result code
    * Fixed a bug where ZlibEncoder does not finish the compressed stream with the ADLER32 checksum

commit a7132ee08e5a37e94903c85e920dfd8604120d00
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Oct 16 06:10:25 2009 +0000

    Relates issue: NETTY-80 Compression codec
    * Initial implementation of jzlib based zlib compression handler

commit 2b2d53ff62436c20604ec4e900889cd5bbbae0dc
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Oct 16 04:50:50 2009 +0000

    * Correct byte order
    * All encoders should ignore the message whose type is unknown to the encoder

commit b859f120d8c43494a1503767a7920ed7a7488b90
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Oct 16 04:41:33 2009 +0000

    Use proper buffer factory in OioWorker
    Removed unnecessary local variables in OioDatagramWorker

commit c7c2c71935a684a7148c3736417d5b5861b91f38
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Oct 16 04:39:20 2009 +0000

    Use proper buffer factory in OioDatagramWorker

commit 7a06c352388478009a7af79fc7221a385e7dc46b
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Oct 16 04:36:30 2009 +0000

    Use proper buffer factory in NioDatagramWroekr

commit abfae49a7c6d353bcf7938c2ee4f04a45a1a0866
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Oct 16 04:33:04 2009 +0000

    DirectChannelBufferFactory.getBuffer(ByteBuffer) must not return a read only buffer

commit 127851df31d861e24794ae14711d69c44b72f9a6
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Oct 16 04:32:07 2009 +0000

    Typo

commit 972620d4311715488104a98b191f1ac8ace8afaa
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Oct 16 04:31:33 2009 +0000

    Resolved issue: NETTY-241 Add more ChannelBufferFactory.getBuffer() methods for less memory bandwidth consumption

commit 8eba49c0cd8393855cefe5264834ae687990833c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 14 06:27:53 2009 +0000

    Resolved issue: NETTY-203 Encoding frames as Google Protocol Buffer base 128 varints (32-bit)
    * Applied Tomasz's patch
    * Renamed ProtobufVariant32FieldPrepender to ProtobufVariant32LengthFieldPrepender
    * Code cleanup

commit eca6033456b4f3cf5002a793801818928f8a1840
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 14 05:46:40 2009 +0000

    Updated author information. I want to get messages about Netty in my gmail account.

commit c3b06d4a67d7e2ef4a168ef59c106cb08457c8bd
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 14 05:35:03 2009 +0000

    Updated author

commit 42df101341cb82354796b7286ca6bda1b3b383b3
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 14 05:34:18 2009 +0000

    Added missing header

commit 01120b6a2b91c0bbfa76d3b1ccf9eb3d39ce450e
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 14 05:24:38 2009 +0000

    Fixed issue: NETTY-237 java.lang.IllegalArgumentException when passing HTTP 1.1 spec compliant LWS separated HTTP header values
    * Relaxed HTTP header value validation

commit d3488a1852227cc1f01790b5c77c0766e04eae35
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 13 08:51:25 2009 +0000

    Fixed a bug where the newly added padding has wrong writeIndex

commit ed27ca19ea6f65562f4f13a3030c4714fd88b718
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 13 08:46:41 2009 +0000

    Renamed setFromList to setComponents

commit 85712a72b89b33f3512d174cefe1b5f4a2fdd2fd
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 13 08:35:22 2009 +0000

    Code cleanup

commit 3b9d1a9dab2c914687a9a19c0632134549243327
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 13 08:03:05 2009 +0000

    Code cleanup

commit ca4c32df680406de79bb42df4f51af541ea86ed5
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 13 07:54:18 2009 +0000

    * Merged Frederic's 'aggregate' branch
    * Refactored Frederic's test cases
    * Code clean up

commit 1ed1d63dd6c77cffce99efbb23e5f2eb3b33efc9
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 13 03:41:35 2009 +0000

    Better Javadoc based on Frederic's modification at the 'aggregate' branch

commit e88dd98cf14e461d3b3a0520c1896dcf67bce14f
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Oct 12 10:49:35 2009 +0000

    [maven-release-plugin] prepare for next development iteration

commit 68fdf17d342770721c3f2919405f527f5ede7dae
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Oct 12 10:49:08 2009 +0000

    [maven-release-plugin] prepare release netty-3.1.5.GA

commit 3537dfe47c46c84bf03d60dc473c87e770b6f524
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Oct 12 09:42:02 2009 +0000

    A temporary workaround for MPJDOCBOOK-36 (https://jira.jboss.org/jira/browse/MPJDOCBOOK-36)

commit 6b53303bd73db942ac1f5503752523f2a5f1df57
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Oct 12 07:40:18 2009 +0000

    * Fixed incorrect Javadoc of ChannelBuffers.wrappedBuffer(ByteBuffer)

commit ccecb0af2cc8d2dcb1608b9d7ebc9e8bc2e177e5
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 7 12:38:17 2009 +0000

    Appended some distinguishable text to the generic reason phrase returned by HttpResponseStatus.valueOf(int)

commit a4172500d5c439043c9d133f7295539fe54b4193
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 7 12:25:24 2009 +0000

    Fixed issue: NETTY-233 Missing translation method 'HttpResponseStatus org.jboss.netty.handler.codec.http.HttpResponseStatus.valueOf(int)'
    * Added HttpResponseStatus.valueOf(int)

commit 852a89220a8999157987ee747a372a8550529d52
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 7 12:00:24 2009 +0000

    Fixed issue: NETTY-232 NoSuchMethodError when decoding Google Protocol Buffers 2.2.0 messages
    * Upgraded to protobuf-java 2.2.0

commit 37574965fd238dce507a026eb529e104300d948e
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 7 11:43:11 2009 +0000

    Made ChunkedNioStream final

commit 6886a8b765ab7d98a07824228a24a767d7071eef
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 7 11:41:13 2009 +0000

    Fixed issue: NETTY-234 ChunkedStream usage fails with NegativeArraySize error
    * Worked around an interesting JDK issue where InputStream.available() returns a negative value

commit ab2283ee9862c8f516db814a6b329670e001c8b6
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 30 07:00:07 2009 +0000

    Removed unnecessary indirect call in NioSocketChannel.isConnected()

commit c6c9bc471c54820a77dc88f4f84d7682647a6135
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 30 06:59:42 2009 +0000

    Removed unnecessary indirect call in NioSocketChannel.isConnected()

commit c600c8f9f163164c61dba82e0c1f392b26daf75c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 30 06:57:47 2009 +0000

    * Reverted back the optimization applied between 3.1.4 and 3.1.3
    * Removed unnecessary break statement in NioWorker.writeNow()

commit 346d7022cdc69fe5c8c21af45a05c473add28499
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 30 06:49:00 2009 +0000

    Removed incorrect boolean assignment

commit 5e4ca0d94a2e8b6caccbd24f2380751a9f458232
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 29 10:02:28 2009 +0000

    Removed unnecessary assignment

commit 596e62398fe3a08a41858eaf08fdc43ff6cee659
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 29 10:02:08 2009 +0000

    Fixed a bug where the future of the write request is sometimes not notified

commit 9791a0327febb355f4ddc9257d94ed2412fe23f5
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 29 10:01:51 2009 +0000

    Fixed a bug where the future of the write request is sometimes not notified

commit 6e68d6ba4f7bfc671155cb8802a75ce94c3516be
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 29 09:48:24 2009 +0000

    Reduced the exception creation overhead on ClosedChannelException

commit 4132804793fe587c4a6bcc29506410e565f234f2
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 29 09:37:44 2009 +0000

    Break the loop on connection closure

commit 31185897afc709a83e3e6cf320b89c2a26b7f7cb
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 29 09:36:22 2009 +0000

    Fix for recent regression on infinite ClosedChannelException

commit 21f1779e5092bd4d15e5fdda3a73f3a81e623459
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 28 05:05:32 2009 +0000

    [maven-release-plugin] prepare for next development iteration

commit 59eb656112f87655432af02a223a176e1fa0268e
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 28 05:05:03 2009 +0000

    [maven-release-plugin] prepare release netty-3.1.4.GA

commit 3352eb4cf7a9dab7fb92636319da1f9836b4aac1
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 25 02:26:28 2009 +0000

    Javadoc

commit 0180db1c2c0978b0651f5068aaf98f810d319851
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 25 01:55:19 2009 +0000

    Improved javadoc

commit e069c7c958d6761c1ca2f9ea5926db2a578794b3
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 25 01:50:49 2009 +0000

    Wrong number

commit 50012fd8e64a3311be24f64e5d096da779a17dbc
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 25 01:39:43 2009 +0000

    Improved Javadoc of LengthFieldBasedFrameDecoder

commit c729e34603b7160a990b3eb1bdffa541e6a0f27d
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 22 09:57:26 2009 +0000

    Explanation of the latest fix on SslHandler's 'bad handshake MAC' exception

commit 5795ab9d86a74a7c24005cf2bbb63661bb3ed12e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 22 09:28:50 2009 +0000

    Simplified code

commit 3011d52e457c9244cc7c055a16c4e061c0c752f3
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 22 09:25:05 2009 +0000

    A fix for 'bad handshake MAC' error

commit e31dd0ebcada3953927399ecadafa0b809e5a544
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 22 09:11:29 2009 +0000

    Reverted back wrong fix

commit dcdb1c5c187d7af6fd14ca82a19ef51e3d4f85f9
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 22 09:04:42 2009 +0000

    A potential fix for 'bad handshake MAC' error

commit 80b6a5b7ae7e2c0b135ccc7e21ea759d838e59e0
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 21 02:08:19 2009 +0000

    Reduced unnecessary system calls triggered by Channel.isConnected()

commit 588cfa851896440f9d1208654e33ed480a33e7da
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 21 01:24:19 2009 +0000

    Fixed issue: NETTY-228 Method "ChannelBuffers.wrappedBuffer(ByteBuffer buffer)" does not always honor ByteOrder

commit e67e99a8475aadaeecafbdf2a7a6508423102415
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 21 01:20:00 2009 +0000

    Fixed issue: NETTY-229 CookieDecoder throws IllegalArgumentException if the day of week string in 'expires' attribute is not abbreviated.

commit 3179d8094ed773167efafeb955d9fb73a8b3d5d8
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 10 10:34:49 2009 +0000

    Fixed issue: NETTY-226  IndexOutOfBoundsException on empty HTTP header value.
    * Skipped substring operation for an HTTP header value if there's nothing after a colon (:).

commit 794f805a30ce02edd5c4701a36cd0d41f972928e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 10 05:43:14 2009 +0000

    better explanation of what uptime example does

commit 1b5a02a949ba5e1be607a8bec8540b1a0ac0eac0
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 10 05:42:13 2009 +0000

    Added the uptime client example

commit c36812d55dfe2bac227f9c0257c15cda1828308b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 10 04:27:03 2009 +0000

    More documentation on state management

commit 3d2579b8cbf0e7117fcca1e52cdf89aa87f9c74a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 10 04:25:05 2009 +0000

    More documentation on state management

commit 15b3317df554ef10dcd07c732f444da480df0db2
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 8 13:30:05 2009 +0000

    your full thread dump -> the full thread dump

commit 26e9b4e7a812cd668788171f1f0a512f332cb94f
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 8 13:29:25 2009 +0000

    More javadoc based on user feed back

commit 64a1b4189106a7459a10c857bf4449a69c38afdc
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 8 13:18:49 2009 +0000

    Too many 'new's

commit 3b2720e7bb4684b4b9374ee3fc8f6364d56d0ef0
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 8 13:17:05 2009 +0000

    More Javadoc for ThreadRenamingRunnable

commit 85fcfc7f19d15d1f2896fd180f0cc736d7e039cb
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 8 02:48:18 2009 +0000

    [maven-release-plugin] prepare for next development iteration

commit d99b9834809e2ba93c340186f6eb88610440e0a0
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 8 02:47:50 2009 +0000

    [maven-release-plugin] prepare release netty-3.1.3.GA

commit b67688fd0f7e2281af16c8d613c2708e7a992b99
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 7 03:27:26 2009 +0000

    Fixed documentation error

commit a43604669294d4f1825c2d1cc28a0874055f4780
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 4 07:19:32 2009 +0000

    Backward compatibility

commit 8cf237f7f0f15248ec02522a87602dd9d6edfc88
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 4 06:57:45 2009 +0000

    Fixed issue: NETTY-225 ReadTimeoutHandler, WriteTimeoutHandler, and IdleStateHandler handles sub-millisecond time unit incorrectly
    * Unless the specified timeout is 0, the converted millisecond timeout should never be 0.

commit 16124dc14cf7a9680725d2a5f647f10e176771dd
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 4 04:21:56 2009 +0000

    Fixed issue: NETTY-217 If catching InterruptedException, set back interrupt status of the thread
    * Handle interruption state properly as advised

commit 219647385ab87ee13107a9f4e571964f5527ebf5
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 4 03:24:03 2009 +0000

    * Added examples for timeout handlers
    * Fixed a problem where the handler methods in IdleStateAwareChannel*Handler was not declared with 'throws Exeception' unlike other handlers.

commit 65e7a351bd87e14415c4135c399c5645df17f6b1
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 4 03:03:47 2009 +0000

    More explanation

commit f79fd584d1906e3a0697c51a887bd543ec184ecd
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 4 03:01:58 2009 +0000

    Made the echo example easier to understand by splitting EchoHandler into EchoClientHandler and EchoServerHandler

commit 5345c7f5099506bd9a8269f2e725a9f4a37405b2
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 4 02:22:28 2009 +0000

    Added ThreadNameDeterminer.CURRENT and PROPOSED

commit 8a0f8e9d784cf2d65dfdeced671f78c3478f6afb
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 4 02:14:06 2009 +0000

    Fixed issue: NETTY-224 CancelledKeyException on Channel.setReadable() in NIO transport
    * Handled CancelledKeyException properly

commit edd056d3deb35b7f5b35ec3504ff0ce1e7863203
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 3 04:34:22 2009 +0000

    Fixed a bug where an invalid upstream channel state event goes downstream

commit b9c8675cf1c5818985b7bec834bd8995de551527
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 3 04:33:15 2009 +0000

    Revised the documentation about event flow

commit 5814ec65a4ac7bf92140cff0487dd708deea68ba
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 3 03:15:12 2009 +0000

    Fixed incorrect thread name

commit 072ee8a5c5584b0242a03e47a3e2f7a063bdcac7
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 2 04:01:50 2009 +0000

    More explanation on how event flows in a pipeline

commit e0bef12e2cb2aa8df9f43e37da26e6b6eb5702a2
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 1 08:41:36 2009 +0000

    Fixed a bug where AsynchronousCloseException causes IndexOutOfBoundsException during write

commit 94a1633ec9572c19f8a35c6072795330a2b7bfd7
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 1 05:16:42 2009 +0000

    Fixed a documentation error in Channel.isWritable()

commit 676ad42cea5f503dfca84dcc27dafcaae7876074
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 1 03:57:45 2009 +0000

    Wrong class name

commit 404abfd198a775f09c78a5f4b32465fec62694c9
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 1 03:57:02 2009 +0000

    Added the comment as suggested by Thomas Bocek

commit 2fa19ff8451e00ed4feec183ce5333be23a31ac6
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 28 07:45:45 2009 +0000

    * Updated NOTICE.txt (file -> product)
    * Relicensing the benchmark program under ALv2

commit 829afeb993cb0343f81aebf03c6462edbed226fe
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 28 07:40:28 2009 +0000

    file -> product

commit 48a0140c0de380fa082f51c816335811e014f902
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 28 07:39:09 2009 +0000

    Updated the license information in the POM.xml

commit b11ef6ca9b9476f70aaf10bf1ba28ec28efc5587
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 28 07:15:49 2009 +0000

    Relicensed to Apache License v2

commit 7851e84a2c1e919f30cba12c9770a0883e7d1662
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 28 05:56:47 2009 +0000

    More explanation on ChannelBuffer.discardReadBytes()

commit 1509f64db122d9967651e7edf58b27ecc074aa10
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 28 05:53:16 2009 +0000

    Relaxed assertion in discardReadBytes test

commit b29d55aa383a3ddce24cef9f300c87645e9eb411
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 27 06:48:27 2009 +0000

    Fixed issue: NETTY-216 HTTP Cookie missing HTTPOnly property
    * Added Cookie.httpOnly property
    * Added support for HTTPOnly to CookieEncoder and CookieDecoder

commit 7388b961a6425c0cd0c98abd976c5c0c9027d9be
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 27 06:44:12 2009 +0000

    Fixed indentation

commit b083f9eb2efebdd69da53196aea9066a288677e1
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 27 06:24:14 2009 +0000

    Removed unnecessary printStackTrace

commit df72c4b7eeb3e1c88b49e75098de3460a69e5a41
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 27 06:23:11 2009 +0000

    Better comment

commit 32d9d026a1528c4c15091cdfb4f4befa2b5e440a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 27 06:22:03 2009 +0000

    Release ChunkedInput immediately on partial failure

commit 925a99a572b984b26d18cc1f4ad6e2c46be583b1
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 27 06:14:28 2009 +0000

    Simplified Chunked resource management

commit 347131e0fa4cdf9340a27d1e5500d985e30657a7
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 27 05:56:40 2009 +0000

    Fixed issue: NETTY-215 ChunkedWriteHandler stops handling write queue when ChunkedInput.nextChunk() fails.
    * Fixed a bad file descriptor error

commit 6dc0b1202064d7d065916cb54b0f600166e7b916
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 27 05:49:04 2009 +0000

    Fixed issue: NETTY-215 ChunkedWriteHandler stops handling write queue when ChunkedInput.nextChunk() fails.
    * Fixed related infinite event loop

commit a09b750c2f3084140aa84d592155309bd99b377d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 27 04:53:26 2009 +0000

    Fixed issue: NETTY-215 ChunkedWriteHandler stops handling write queue when ChunkedInput.nextChunk() fails.

commit 1574fc3188bf4c0fc0cc1cdbd494e9826c14467d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 27 04:23:44 2009 +0000

    Fixed issue: NETTY-214 NIO socket / datagram transport sometimes does not shut down
    * Fixed a race condition in NioWorker.close() and NioDatagramWorker.close()

commit be32586d501417ce47423ec7d6e639ba55e8723f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 27 04:07:09 2009 +0000

    Build property cleanup

commit 29cf4f83a3663d22280d18628f9c47ae50881c8b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 27 04:05:49 2009 +0000

    Fixed build error that version.txt is not generated

commit 4c42b49ebd31a1f39682f7a37e9da5983ad1ef15
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 27 04:03:26 2009 +0000

    Workaround for Maven build problem in some M2 versions

commit cc386efd62e9631f6a26286e6d4dc4fe476c9d09
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 27 03:50:19 2009 +0000

    Added Version.main() for easier version identification

commit aee966287d4fb3055437dfd974e207ad77079149
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 27 03:44:57 2009 +0000

    Added org.jboss.netty.util.Version for easier runtime version identification

commit b4f0b7360d1b967c76415032d1618207bd9e61bd
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 25 09:13:58 2009 +0000

    better term

commit 9b20a1453c5b3a16fc83907c18919452ff574811
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 25 09:10:22 2009 +0000

    Better description of interestOps

commit 5d81dfc495f143705cb6e257956b832d384a4231
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 24 01:02:50 2009 +0000

    [maven-release-plugin] prepare for next development iteration

commit f4591f1559914b6f5df86c0801e2d67c1398aa54
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 24 01:02:24 2009 +0000

    [maven-release-plugin] prepare release netty-3.1.2.GA

commit 38dc4e0a966533423a9d792d75d083be78792d88
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 24 00:58:42 2009 +0000

    Will release 3.1.2.GA as a critical issue has been found

commit 0628bde12fb64c98871324ddf5df6687bd25b638
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 23 08:09:42 2009 +0000

    Fixed intermittent connection attempt failure due to a bug in connect timeout handler code

commit d8425331356effb4806e94b47a92cd09a85c2df8
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 21 04:29:48 2009 +0000

    Fixed a failing test

commit c861adf6e02b14d90716364a91a3b67c731fdf80
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 19 09:26:01 2009 +0000

    Fixed a test failure where OioSocketServerBootstrapTest blocks indefinitely

commit b0bdef67bedc1e06f1e952b14ee8c1232418e0ee
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 17 05:29:58 2009 +0000

    [maven-release-plugin] prepare for next development iteration

commit 7a0ff7d1ea83ae9a12f1bc3de4417a11e9ee53a2
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 17 05:29:32 2009 +0000

    [maven-release-plugin] prepare release netty-3.1.1.GA

commit adc1969d6c9eb006e1cbf31ea9d0b0e237e11760
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 14 20:36:32 2009 +0000

    Fixed issue: NETTY-204 Connection timeout does not work with the NIO socket transport.
    * DefaultChannelConfig.setOption() does not handle connectTimeoutMillis

commit 7ffd228cbf2c2fca408ecb125dabce68e77edf2a
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 14 20:22:50 2009 +0000

    Fixed issue: NETTY-204 Connection timeout does not work with the NIO socket transport.
    * implemented connection timeout for NioClientSocketChannel

commit 05ddfdab4694aca428580967d3bb73e347f1f0f2
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 14 19:05:58 2009 +0000

    Remove unused method in NioProviderMetadata

commit ad4ba5f0f4cfd74bd4f557a6e5a2da549b12263d
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 14 19:02:22 2009 +0000

    Updated Javadoc of SslHandler

commit 0879d2bbbea772ee5c3bcc1bbdecf58c31e8f308
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 12 02:28:30 2009 +0000

    Fixed issue: NETTY-207 The default datagram broadcast flag is different between transports
    * Set the default broadcast flag of OioDatagramChannel to 'false'

commit 2ab6e4b5b072fb2b6f954db375f4d5692e1282ab
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 7 11:21:39 2009 +0000

    Another fix for NETTY-206 Unnecessary exception log on early disconnection

commit 7c828fc87d925acf1b15d66fb24aa7992dfc1382
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 7 04:33:34 2009 +0000

    Javadoc not to receive a question about messy data transfer anymore

commit 57ed3c1ee884e1fd3b9dffd68c53b6602955ac85
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 7 03:42:21 2009 +0000

    Removed unnecessary String.valueOf() call in StringEncoder

commit 8a35a9aad3d5a985ee1becb723f960ae1c7ba079
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 6 11:09:54 2009 +0000

    Fixed issue: NETTY-205 Unnecessary exception log on early disconnection
    * Do not log ClosedChannelException in RegisterTask.run()

commit 68b54c9dde565669c6661429a9cb8fedb1366ae3
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jul 24 04:10:14 2009 +0000

    [maven-release-plugin] prepare for next development iteration

commit 7ea7d5bfcdff5739a48cdc3d2e16100d8ab8544b
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jul 24 04:09:49 2009 +0000

    [maven-release-plugin] prepare release netty-3.1.0.GA

commit 3185a49a502ddd94d2e5bdd7cfeb65f33541bd6e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jul 24 04:06:04 2009 +0000

    Will release GA

commit 3cf2d83f3f94625cbdb65c0bf9c873e315a60d13
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jul 24 02:38:19 2009 +0000

    Removed a unused exception class in the factorial example

commit 0d5fc90dc5e004a7f60c70a67b60abd676267837
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jul 24 01:30:48 2009 +0000

    Log the warning only once

commit 3920158bc0c50fdce81d4db7012338b89af514bd
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jul 23 09:05:53 2009 +0000

    Polished all examples

commit 6321bb406fda0a44bb7e372b8921e31a4c521183
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jul 23 08:26:54 2009 +0000

    More Javadoc

commit 31bf9fd7064c58da92b1834331e305f6892b321c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jul 23 08:07:34 2009 +0000

    Added SCM revision to MANIFEST.MF, user guide, Javadoc, and Xref

commit 338a5cba4a6cf364bbaecb2d7a163c9b199a1283
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jul 23 07:10:30 2009 +0000

    Added documentation on how to implement protocol multiplexer

commit c4449a170dbb133dbe12bd719e366966373231a2
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jul 23 06:58:17 2009 +0000

    More Javadoc in ChannelPipeline

commit 5de3114ccb5bcfc1ef739652fa6b7a98318a52e0
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 21 10:51:34 2009 +0000

    Improved OMATPE javadoc

commit 865705e79bb45635aa12f0b07de792efe842463c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 21 10:41:45 2009 +0000

    More correct explanation on OMATPE extension

commit a92142e493017527e1f72a7406a85a63e13f1e9c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 21 10:33:58 2009 +0000

    More advice on extending OMATPE

commit 1a54f32a770a480049dc75fa687ab010739a3177
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 21 10:27:39 2009 +0000

    Less indentation

commit dc06648005b5fdd2e8e852590834a81cef2c088f
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 21 10:27:17 2009 +0000

    Better example

commit 82a84d822deb4f9f802743193d098a6306869587
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 21 10:26:24 2009 +0000

    * Added guide on extension
    * Added OMATPE.getChildExecutorKeySet()

commit 23bece222ac3e0f23804ef42a4f68dc5bacb01a4
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 21 09:56:27 2009 +0000

    Made OrderedMemoryAwareThreadPoolExecutor extensible so that a user can use a different key to maintain the event order

commit ca19f4cdde81e0ad08cd6561a74c138f7b5465b3
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 21 09:12:28 2009 +0000

    More documentation on Channel.write() and connectionless channels

commit 8ed89dbd8f13cb78c7b2ed0ed2f2fe257d0dbee8
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 21 07:36:11 2009 +0000

    Fixed a race condition in HttpTunnelingServlet which caused data corruption and duplicate write

commit a28d08936ddcca975a04d10a6b4c5c0b95b4f5a9
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jul 20 05:43:02 2009 +0000

    Send a response even when I wrote something in SecureChat

commit 96aee007cc72e51df12c61855dd2c90574d25bc8
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jul 20 05:35:53 2009 +0000

    Fixed unnecessary duplicate handshake exception

commit 2d4dfeffaa6c87a3de7b278188112d38182246ea
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jul 20 05:08:04 2009 +0000

    Stylesheet that is easier on eyes

commit f671fd38adb25017d56e3f805a360439543afc24
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jul 20 05:05:18 2009 +0000

    Updated APIviz tags

commit 0277a68c4920413d0a89f8d2adedbda4d70091e0
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jul 20 04:50:03 2009 +0000

    Updated APIviz tags

commit f15db3a65e7ed57c4401afe33607f0113019362c
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jul 20 03:37:35 2009 +0000

    Updated APIviz tags and improved Javadoc of the HTTP codec

commit 5c49cae981cd82e8146177d6d5aad41e3311abbd
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 18 07:49:31 2009 +0000

    Reverted back to the previous MessageEvent.toString() implementation that is more correct

commit 2cf78169031c35ce3589ce879ee87368e7b32a1e
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 18 07:46:49 2009 +0000

    Reverted back to the previous MessageEvent implementation that should perform better in most cases

commit 3610fa9608c25914cb46081d48a082a5d6ed5cb4
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 18 07:43:13 2009 +0000

    * Updated the Javadoc of MessageEvent
    * Improved how getRemoteAddress() works in DownstreamMessageEvent and UpstreamMessageEvent

commit 7be842be05f5ec32f96b3fafd2515a05ba29fa65
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 18 07:38:39 2009 +0000

    * MessageEvent.getRemoteAddress() does not return null anymore
    * Improved the String representation of MessageEvent implementations

commit 17bbe5d3eef71b52579efdec9903d3190968dc85
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 18 07:20:03 2009 +0000

    Improved Javadoc of Channel.getRemoteAddress()

commit 90329ef978589a61428fd3afe80c727ae348e2f7
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jul 17 12:49:32 2009 +0000

    Updated APIviz tags (work in progress)

commit 89a4bd9d4e5726f20f366ae0b306c447fd16d1b3
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jul 17 10:32:17 2009 +0000

    Added a global flag that disables the dead lock checker (use at your own risk)

commit 8ec352de7adc57c4b21c1b288f0437506ebe94d1
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jul 17 09:58:43 2009 +0000

    Added ArgoUML project (work in progress)

commit 37cf2553fb3b24ac8045f9e2a3d76723a16113f8
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jul 17 04:42:46 2009 +0000

    Fixed a broken link

commit c74fe22de3e18dbb8770361fa0aa7ebc60f1e6f8
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jul 16 11:20:01 2009 +0000

    Javadoc & null check

commit 3d0ed106fc22c338457f714b78a2d2544f0a1390
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jul 16 08:11:51 2009 +0000

    * LocalServerChannel is not a LocalChannel
    * LocalChannel.getConfig() is not necessary

commit 4021ef46929a62148b148a0ab97292713f18c77f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jul 16 07:17:37 2009 +0000

    Improved SslHandler Javadoc

commit 827effe4e28a687c99b3676f4c7486e9b6bf4893
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 15 14:39:54 2009 +0000

    Fixed another dead lock in SslHandler

commit ea81870a28503b8d09e2cdfa8b4a045f65675f71
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 15 12:04:07 2009 +0000

    Font embedding
    Bigger program listing text

commit 01dffb1ad862c78072d1b70c3e5231656cdbbc0f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 15 11:04:51 2009 +0000

    Updated maven-jdocbook-plugin

commit f4cdf3c3f81a5b5fbce4c8d9345bbfedb24a2cd8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 15 09:33:11 2009 +0000

    * Upgraded dependencies
    * Re-generated Protobuf classes

commit 7b61bdc08fb3f30b56a1a80e9a1acb6a2cb88403
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 15 03:13:49 2009 +0000

    Fixed a bug where WriteCompletionEvent is not fired for HttpTunnelingClientSocketChannel

commit cf57e4c42bf694828f1efbbbd102a78b9bd159e5
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 15 03:13:09 2009 +0000

    Simplified HTTP tunneling example

commit 43d2fb47bdc7c24081254a1e415810d415d56e7b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 15 03:10:33 2009 +0000

    Fixed a bug where Channel.write(emptyBuffer) does not complete when SslHandler is in the pipeline

commit bfaa647bba22ef82196580be614aaa02f8ebc3d0
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 15 02:41:04 2009 +0000

    * Fixed a bug in HttpTunnelingClientSocketChannel where the HTTP request is not sent if the scheme is HTTPS
    * Fixed a bug where HttpTunnelingServlet does not catch EOFException
    * Added HTTPS support to the HttpTunnelingClientExample

commit 5b8f9b73ec7650faac063ff99f0f9806f53feb76
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 15 02:06:09 2009 +0000

    Regenerated serialVersionUID

commit 046aae6ff8a0d3b37645d7df89d72d6d8121acd3
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 15 02:05:12 2009 +0000

    Do not expose the server-side exception message to the client

commit 99261232a0a1fcba8ef52cdee69648b91e65a35a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 15 01:59:43 2009 +0000

    * Optimized HttpTunnelingServlet.read()
    * Do not strip \r\n in HttpTunnelingServlet.read()

commit 44110a281e4f541b6544c06a5744bbbaca701262
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 15 01:40:16 2009 +0000

    More convenience constructors in LoggingHandler

commit a53388b85967f69e77a6226cb83d8981faa7b0fc
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 14 10:54:30 2009 +0000

    Removed the test code which was added temporarily

commit 8351d6d4d0892034ea2982ba564786719cbe682a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 14 10:53:41 2009 +0000

    Make sure HttpServlet returns from service() when the channel has been closed.

commit 28c64f147717ce09c8adccf3086545e7a4741b93
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 14 10:38:59 2009 +0000

    Documentation cleanup

commit 5fa73d2af5e9ff641649f41af631cf73036f39da
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 14 10:37:36 2009 +0000

    Example sync between package-info.java

commit cb1c079380ba574ca29f0609e11a1a5ad76407d2
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 14 10:36:36 2009 +0000

    Typo

commit f90f701a8dd0a38ee52f420472648cb60bc6d622
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 14 10:35:04 2009 +0000

    Added a link to the package summary for HttpTunnelingServlet and HttpTunnelingClientSocketChannelFactory

commit 25d50232672521a1ef0826241f279d46f3280b8b
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 14 10:31:22 2009 +0000

    * Revamped the HTTP tunneling transport
    ** One HTTP request/response corresponds to one socket connection now
    ** No more reconnection
    ** HTTP server should not disconnect the connection or close the request or response prematurely
    ** Added related documentation and updated the example

commit f9c2f66f19af207c157b51b3b41578399f885919
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 14 09:42:54 2009 +0000

    exceptionCaught event should be triggered on connection attempt failure

commit f59f480fb7ae2e13023a05fa9e234063a757da23
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jul 14 05:28:07 2009 +0000

    Code clean up

commit 2ff93e8705d268557cf87a4b9cd522aaeb2e9543
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jul 11 19:04:27 2009 +0000

    Removed unnecessary member variables in IdleStateHandler

commit fecfadb853cc1c4dabc58a1a680c224873f97445
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jul 9 06:29:03 2009 +0000

    Fixed issue: NETTY-191 Raise ChannelClosedException only once when many queued write requests failed.

commit 7c78539cd54e687b0d6ca585e3b1d95e70f3ff08
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jul 9 06:12:25 2009 +0000

    Commented out debugging purpose printlns

commit 0fa25a96a0cc86b63b6f5368bec34c7227649504
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jul 9 06:11:32 2009 +0000

    Accurate NIO constraint level determination for IBM JDK 6

commit 75688a719dd2ff1c7cfd5b5c352da311aade6d62
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 8 20:48:00 2009 +0000

    Allow 0 (use default) for backlog value

commit cae3010d6e9a3588b6aebb38adfe3382aa5913b8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 8 19:55:34 2009 +0000

    Fixed performance regression which occurs when a user tries to write something in channelConnected()

commit d7d0877ede2f59ced2e5639d212883e0b6690b15
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 8 18:30:47 2009 +0000

    Forgot to revert the experimental change

commit 050c2c793fa81043244a020dd176387ce7b9e71b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 8 18:30:14 2009 +0000

    Calling accept() many times doesn't seem to help at all

commit 14e8f0a75e939730f0409587d1b6ca016190174d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 8 18:13:56 2009 +0000

    Some system calls can be called later to improve accept() performance

commit f414e425e7185761def750e78f0c5499944ca8ea
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 8 13:36:54 2009 +0000

    Set daemon thread flag for NIO constraint level autodetector thread

commit 4497d9362a4347a82acc9d611df544eb64e2ca18
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 8 13:24:29 2009 +0000

    Fixed issue: NETTY-189 ConnectException: connection refused in Local transport
    * Made sure local address is unregistered only when necessary

commit 580a6e491a91fe4d53b43630440f952e376f7156
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 8 11:44:36 2009 +0000

    Fixed indefinite blocking

commit 31ec36f3bbe83a8360725a1ae6ded44564d0ee68
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 8 11:43:00 2009 +0000

    Optimized accept throughput by removing the usage of a temporary selector

commit 53beb9c7e68ef114fee3efd1405ad9fbf045a827
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jul 8 06:03:15 2009 +0000

    Fixed issue: NETTY-188 ClosedChannelException in the proxy example
    * Made sure all write requests are flushed before closing a channel

commit 142bce45600b6bbd24b88d65710c99aac2b5f084
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jul 6 11:32:01 2009 +0000

    Fixed issue: NETTY-187 Subsitute ReplayingDecoder with FrameDecoder without losing stored buffer
    * Added ReplayingDecoder.actualReadableBytes()

commit 81cb42f37e69b2b82548e72743382bc8090e2895
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 30 11:36:01 2009 +0000

    Indentation

commit 6805ea719be0930f867c2c4736e7dabd1ddfe490
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 30 11:22:26 2009 +0000

    Fixed a problem where HttpTunnelingClientSocketChannel.setInterestOps() returns a wrong future

commit f0233fc1b87400e71f262662fcac4f2e042f3814
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 30 11:19:27 2009 +0000

    Removed a resolved issue marker

commit 0d263b85e5275490014b1da27b5e9434a7ac6a83
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 30 11:16:45 2009 +0000

    No more awaitUninterruptible

commit 78dbbe76619662b9bd8b824f81f2c4011116b384
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 30 11:16:01 2009 +0000

    Fixed bugs caused by today's refactoring

commit d35a8d29b1bbdc555660b26a8238c9fe4968bfe7
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 30 10:30:48 2009 +0000

    Eliminated unnecessary use of thread pool in the HTTP tunneling transport

commit 012066cfa92896c794d1182c843c413e8f223407
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 30 10:03:41 2009 +0000

    Used org.jboss.netty.handler.codec.http instead of custom decoder for maximum compatibility

commit 307c00e0739bf56bf3779b85440fae45fb3b1f15
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 30 09:52:47 2009 +0000

    Traceable exception message

commit cc13dba4981959d810d0c41ffe7e2e507a745205
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 30 09:52:00 2009 +0000

    Traceable exception message

commit 9ef9b3753eddf3a7877aa5270bb3ca80dcb12750
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 30 09:42:34 2009 +0000

    Added Set-Cookie2 to HttpHeaders.Names

commit 281b4507df17a7355ace0133e5c364e112390655
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 30 09:39:07 2009 +0000

    HttpMessage.getHeaders() never returns null for convenience

commit 6158f7772fd321783ea0fffaf3df052f05c2e2bf
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 30 09:29:35 2009 +0000

    Added more HTTP header constants useful for MIME representation

commit c8a9142ec7c325d821edac29aab903c5b76b0ceb
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 30 09:19:34 2009 +0000

    Put some notes about the current issues with HTTP tunneling transport implementation

commit c0267a9e4f29d51edb3579f145076df1c6166306
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 30 09:17:50 2009 +0000

    Store datagram channel's remoteAddress as much as possible within the extent that does not cause a race condition

commit 959e72a6b04aef3818fbb37e629a3c51a40c9277
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 30 01:16:54 2009 +0000

    Removed unnecessary SuppressWarnings annotations

commit e9d2c503f3bedad1affa49e9533bab610a806ef9
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jun 27 12:02:25 2009 +0000

    Removed unnecessary if statement in setOption

commit c2fe9778af631c6ca54e88c94af4c145c485682e
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Jun 27 12:00:38 2009 +0000

    Fixed a bug where datagram channel configurations are not reflected correctly when set via Bootstrap

commit 6765d097e53c68c85c867466e1bcd4c01bbec160
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 25 17:14:54 2009 +0000

    Fixed a timing issue with SSL handshake

commit 1c954d2902bf65282cc4fad3b345e5bf55dd5673
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 25 10:49:26 2009 +0000

    Javadoc

commit 2997b5b40a4f03e851b873e310badc4ea1fb7e38
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 25 10:31:00 2009 +0000

    Fixed incorrect option handling

commit de717916beb07b973042e98fd90071da19e4af7d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 25 10:26:04 2009 +0000

    Added more configuration parameters for SSLEngine

commit 147173e56d873ee8e5e2036be105ea775b36caa4
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 25 10:10:55 2009 +0000

    * Fixed potential concurrency issues
    * message queue should be final

commit 1cff6738bed5f9bfb7c2443088e8b00f7d4d7491
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 25 09:55:00 2009 +0000

    Made HttpTunnelingSocketChannelConfig public to allow an access to the SslContext property

commit dde115525b497f9ecc019563b1737e703b142bb4
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 25 09:47:45 2009 +0000

    Added SSL support to the HTTP tunneling client socket channel

commit fb8cc156f33447c29bd32ba6e022d9af42703be7
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 25 09:18:14 2009 +0000

    Fixed NPE in OioWorker.write when the socket is closed already

commit cfa4e5e4ee75662b98ba069c1af5934a204bd6c6
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 25 07:45:15 2009 +0000

    Fixed NETTY-184 Provide NIO equivalent for ChunkedFile and ChunkedStream
    * Added ChunkedNioFile and ChunkedNioStream
    * Added another convenience constructor to ChunkedFile

commit 3a2350158deb828626653713882cb9bd1cdd15f0
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 24 18:12:00 2009 +0000

    Fix for NETTY-183 Client-side HTTP tunneling transport logs and swallows an exceptionCaught event.
    * HttpTunnelingClientSocketChannel.ServletChannelHandler does not log the caught exception anymore. The exception is propagated to the HttpTunnelingClientSocketChannel's pipeline.
    * More comprehensive log message on the server side

commit 8dd55b0368b432853992ca3bfe5e6fad4c0eb0f5
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 24 02:58:10 2009 +0000

    NETTY-182 NIO server socket sometimes does not shut down
    * Should not break the loop after swallowing exceptions in Boss.

commit fa51403eb28df51e78f25518579e450d562a587b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 24 02:49:26 2009 +0000

    NETTY-182 NIO server socket sometimes does not shut down
    * Swallow ClosedSelectorException
    * channel.isBound() check for each loop

commit d963f4c0467d6a5f059365e1d7735c05de499c14
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 23 16:08:15 2009 +0000

    Backported upstream updates for LinkedTransferQueue (NETTY-181)

commit 590ebcc39485c912cf829571e6acee303fcc5a06
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 23 07:52:12 2009 +0000

    Fixed issue: NETTY-180 Channel.getRemoteAddress() can return null for a received MessageEvent when ExecutionHandler is in the pipeline.
    * DatagramChannel implementations cache localAddresses now
    * DatagramChannel implementations don't cache remoteAddress because a user can disconnect and then connect again.  However, MessageEvent.getRemoteAddress() will always have correct remoteAddress value, so it shouldn't be a problem at all.

commit 5698904374b1815c537e77e2b6255b66ba0b156e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 23 07:46:59 2009 +0000

    Fixed issue: NETTY-180 Channel.getRemoteAddress() can return null for a received MessageEvent when ExecutionHandler is in the pipeline.
    * All Channel implementations but DatagramChannel now cache localAddress and remoteAddress so that they do not return null even after the connection has been closed.

commit 8448188706b3d8ee9bef3d05e8cfe76cf81b58c0
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 23 07:20:57 2009 +0000

    Related issue: NETTY-180 Channel.getRemoteAddress() can return null for a received MessageEvent when ExecutionHandler is in the pipeline.
    * AbstractChannel.toString() does not use isConnected() or isBound() because it can lead to inconsistent string representation when ExecutionHandler is in the pipeline.

commit 27ef64f54932e2bb616e0f7e680770dc87eef6c6
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 22 09:33:18 2009 +0000

    Removed an empty directory

commit 1ba36a6cd1d803c849114e9a3247cfa000f077d9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 18:11:32 2009 +0000

    [maven-release-plugin] prepare for next development iteration

commit d6d8cd3ff2038a59f3307df7fa7260b03ac5d738
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 18:11:18 2009 +0000

    [maven-release-plugin] prepare release netty-3.1.0.CR1

commit 9939012684f9cbc837c97139e3114aee00c6e26d
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 17:57:46 2009 +0000

    Preparing to release Netty 3.1.0.CR1

commit 6fbd3871a335d2c04425ca28c5638ecb301351e5
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 17:54:42 2009 +0000

    Fixed license headers

commit caf0a97ba3c13d9585e10177cdda614fbac4c51d
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 17:48:17 2009 +0000

    Fixed license headers

commit 82e826440c424e4d174e9194f9cfcd8af2e48c5a
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 17:33:40 2009 +0000

    Added missing license headers

commit 1b56a56c2f12b5c7258291558c9e9a9e451b6ec1
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 17:31:31 2009 +0000

    Beautified JXR report

commit a7c2914163a2a52d40b0652dcd4422525b62d8b6
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 17:02:39 2009 +0000

    Javadoc

commit f65b53917d291a5899877e6d25f596f71c5400e3
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 17:01:09 2009 +0000

    Javadoc

commit 54dd31c449f465cd4db8f2e800e5618962750088
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 16:45:30 2009 +0000

    Javadoc

commit 85f1db74597cdda059e3a31c920d2d3b132ad41b
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 15:39:34 2009 +0000

    Javadoc

commit 4e2be133067d4b7c8be5d0569305d60b011476b8
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 15:36:42 2009 +0000

    Javadoc

commit 6058cf3981dc4cf8bfb4df9422a4624b6b23e8df
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 15:35:19 2009 +0000

    Javadoc

commit 44c7818ae864dade3cb10fe388953f37001738cb
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 15:05:47 2009 +0000

    Javadoc

commit 0047563eb584445a2dbeaaa6a8dee0e9812b158d
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 15:01:47 2009 +0000

    Javadoc

commit 7accf4d29d3d9de51b0c5566918290a97a2b9564
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 14:57:36 2009 +0000

    Javadoc

commit 2aa6f3e48db90b5a2f2723c5725c8982794027ba
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 14:52:29 2009 +0000

    Javadoc

commit 997dc9081a5657b28038314eec4e3c363925b90e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 14:49:26 2009 +0000

    Javadoc

commit 673312b22e96ab358da092f6f903a25930c0935e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 14:17:02 2009 +0000

    Javadoc

commit aa0a8f17c83104f99cbc2033e4445f5ed0655bdc
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 14:15:20 2009 +0000

    * Added HttpMessage.isKeepAlive()
    * Javadoc

commit 120eeabc79aa14377b64a71d6c06ddf78723661b
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 11:40:28 2009 +0000

    Javadoc

commit eaf931ac92becf7f8ad697253b84e237c11d031a
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 11:36:31 2009 +0000

    Javadoc

commit 629ae769d7d21740ac723d08088e25bcb04c889f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 11:33:38 2009 +0000

    Javadoc

commit dba344bd8e54ab101d613750079c5032a1f46ceb
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 11:27:53 2009 +0000

    Prettier Javadoc stylesheet

commit c630a6ea65b2552689dbe016d748f8856a02bb94
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 11:17:38 2009 +0000

    Javadoc

commit f19cfb45e9abec3415b8bfcb7b2fbde097fec313
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 10:53:29 2009 +0000

    Javadoc

commit 592e62573f4d3f861c07dd0722bec5cf69cb082e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 10:46:47 2009 +0000

    Javadoc

commit 81bd15f8e9ebfe4080918284c8fb263ca181c5ef
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 09:45:01 2009 +0000

    Javadoc

commit 369a363855bb62f338695744eec411a7e4560945
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 09:39:31 2009 +0000

    Added LoggingHandler.getLevel()

commit a902cbf970c21fd94c43ff69dc454927d653fc91
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 09:38:34 2009 +0000

    Allowed LoggingHandler to log in a different level

commit 40ce9194885103488f5da3961bcfcae466039b4a
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 09:31:38 2009 +0000

    * Added InternalLogLevel
    * Added InternalLogger.log() and isEnabled()

commit f7b2b3b1c3628ed72f8641c3d6dba420221d4d37
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 09:15:48 2009 +0000

    Javadoc

commit 82c55287a2ab159c08ee6032754208c67d198e8a
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 09:10:35 2009 +0000

    Javadoc

commit 9207f35b14fa7a1133729062b3ce79fe1046fa69
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 09:09:32 2009 +0000

    * Hid AbstractCodecEmbedder from user
    * Added @see tags to the CodecEmbedder implementations

commit cc0e6020d1db41e9edb875da50f64edbeeb8f0b9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 09:04:36 2009 +0000

    Renamed ChunkedInput.available to hasNextChunk
    Renamed ChunkedInput.readChunk to nextChunk

commit cd23da084afcdc291eaeae9958fca052f1dd8887
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 09:02:43 2009 +0000

    Javadoc

commit 8f2096a040c0011cb7532346e151f4b9a4c25b71
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 08:59:24 2009 +0000

    Javadoc

commit d5c4cd3df7d4af2b05f18efb07a76e9bc25c8c83
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 08:16:56 2009 +0000

    Javadoc

commit 91c497f1e0d787b39a81363ec2180c3356e5e835
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 08:08:08 2009 +0000

    Javadoc

commit bf767a8f6c8a110576fc7211b777488053c09235
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 08:01:28 2009 +0000

    Javadoc

commit d14de97a72078b369c4022c6245318a83f628f32
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 19 07:58:55 2009 +0000

    Javadoc

commit 46a7f6ff5fc7acf61a791e576a9c423819274ba3
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 14:26:39 2009 +0000

    Fixed issue: NETTY-178 ObjectEncoder encodes array fields incorrectly.
    * Made sure CompactObjectOutputStream encodes the class descriptor of an array type correctly.

commit 2b0ec506ecd2fbd536d1d5ec7051d1d3184aec0f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 12:32:22 2009 +0000

    Javadoc

commit 10009a05fbd218a8912a21a67beae7323fcf800a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 12:30:38 2009 +0000

    Javadoc

commit a26ebc2bc1a2a85ed748296c12e997ef017f78e5
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 12:21:46 2009 +0000

    Javadoc

commit f38fb2b7426f6f094f5b895d14d19c06a9133220
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 12:19:59 2009 +0000

    Typo

commit d4a8631e6256ef63d308edaff70a15baf28ca7b7
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 12:18:43 2009 +0000

    Javadoc

commit 4d0facee9f0f2fba990500afec368639ebe1f055
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 12:16:25 2009 +0000

    Javadoc

commit 230113c0c64c0ef868067cd4872753c7f362f123
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 11:31:31 2009 +0000

    Javadoc

commit cad86962efb9940d8e79e4d38798f0eed3738956
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 11:29:29 2009 +0000

    Javadoc

commit 72f1162729a6bc7bfc256e3e27c1fa3d8878ad4c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 11:16:06 2009 +0000

    Javadoc

commit d784a684789b69b244938c1abb619c4e56b78432
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 10:44:17 2009 +0000

    New organization name

commit 192af44253d808ff0e56f73a7c5dd3377eaa643f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 10:31:13 2009 +0000

    Better monospace font precedence

commit eabc83fb920fe9e7aa957593532676cc37c06add
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 10:29:30 2009 +0000

    Improved the custom Javadoc stylesheet

commit 2729f88bdf81b62b9e58b28f4cfb32a647b9ae4d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 10:22:59 2009 +0000

    Improved the custom Javadoc stylesheet

commit cb5b1a7612a0d8d66bfdbaf979f3ab329510cbc1
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 10:09:41 2009 +0000

    Improved the custom Javadoc stylesheet

commit 8657220bf4ae74f1139b2736d181a582f7ef54ab
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 09:54:59 2009 +0000

    Custom stylesheet for prettier Javadoc

commit c898a55dad735ade16e627a0d28e6f062b76f127
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 09:48:59 2009 +0000

    Added Javadoc linkage to XNIO

commit 4c9ae49bf817cd4fab5e814974e773432fb00d0c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 09:42:12 2009 +0000

    Fixed bad tags

commit ff5ebb0a157753c0e4b3f5bd9fb8357d81d53d27
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 09:40:50 2009 +0000

    Fixed bad tags

commit a56d3306c1f909eefc120dd36d8961294b3975bc
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 09:32:33 2009 +0000

    * Javadoc
    * Made AbstractXnioChannelHandler package-private because it's not necessary to expose it to the user

commit e79d45727de270c62eedbae53004d0ce52c7d0cf
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 09:24:32 2009 +0000

    Javadoc

commit bf6bc95c6315afb0991b58bcf4a06e447b705a7f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 09:13:08 2009 +0000

    Javadoc

commit fe025091a76b1723bb5a24160c273966fe7ac4bd
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 09:10:32 2009 +0000

    Javadoc

commit fc294510c1c079e38ac75981d90158eef661f9d4
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 09:09:09 2009 +0000

    Javadoc

commit 8c1335dac1ce6cb9f00e01858cced69c1575aec0
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 09:01:07 2009 +0000

    Added missing bindings in Guice integration

commit ce3bf8fbab9de05771bdcfe39b501b0ec68da154
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 08:59:22 2009 +0000

    Added NioDatagramChannelFactory support to Spring integration

commit 1146c7072d83c04bafecfc64ac1cae61eb4e8b86
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 08:58:39 2009 +0000

    Added NioDatagramChannelFactory support to JBossMC integration

commit bcc697110fa128ec763bed787a12ae86271a7fb9
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 08:57:01 2009 +0000

    Added NioDatagramChannelFactory support to OSGi integration

commit 418557248a1cc0fa6da84a72cfc4bdd98fbc21ed
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 08:56:10 2009 +0000

    Added NioDatagramChannelFactory support to Guice integration

commit f8bba65b28c9222cd3e820495d5e1ecf63f79c29
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 08:53:05 2009 +0000

    Javadoc

commit d2e91d2a459121fb29ddc1d40635252e042ca58c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 08:48:36 2009 +0000

    Javadoc

commit a0adcf8dc806f3e1c7c55a4fde0859ae2e72746b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 08:41:06 2009 +0000

    Javadoc

commit fae990021116e13e2a2f4e4c6a22d22241e0d229
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 08:38:44 2009 +0000

    Javadoc

commit e1abd56c1d07ee7af134d27fe03878c1868aa191
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 08:20:57 2009 +0000

    * Javadoc
    * Backported fixes applied to OioWorker

commit 2b33c26e7204c06807ac7c70bb27a225a54862c1
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 07:33:37 2009 +0000

    Javadoc

commit 48634e3d3000205914d155cba2202babccd964ba
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 18 07:30:26 2009 +0000

    Fixed typo and a compiler warning

commit 0f8c1be14245f1d7457e367c846471794274b9d9
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 17 10:14:14 2009 +0000

    Better explanation on what the local transport is

commit f40bb1d522c5c567672ba9a5af44aff23a0bf2fc
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 17 10:07:41 2009 +0000

    Javadoc

commit d16639d3ea81d3822c0a4cd6204cac5ab963cdd9
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 17 09:49:05 2009 +0000

    Javadoc

commit 29da4301834f9df46504c0962fef7f2a805dcde7
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 17 09:33:20 2009 +0000

    Javadoc

commit 843b530c64ed27ed72e5af7cae6102ac99d4d723
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 17 09:13:10 2009 +0000

    Javadoc

commit 35eac01e40b4c391113c4b7ac2407ec4348e5bc1
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 17 08:36:59 2009 +0000

    Javadoc

commit 9092d51b046644566109817aaac91b06f2a872ae
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 17 08:33:54 2009 +0000

    Javadoc

commit 48a5d95dac5faaa7873b0b43556130be835c4d48
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 17 08:28:03 2009 +0000

    Javadoc

commit ca11f9027056c91a25358532ed3d8ef308ab6820
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 17 08:24:52 2009 +0000

    * Added ChannelBufferOutputStream.writtenBytes()
    * Javadoc

commit c838c2aea3400072a5a49b034718c2b1cba280de
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 17 08:10:45 2009 +0000

    Javadoc

commit 70e90fc85eadb235f7eb7c44d388d6ccf718832f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 17 08:08:11 2009 +0000

    Fixed issue: NETTY-176 toByteBuffer() and slice() sometimes do not respect byte order
    * Added tests to make sure all ChannelBuffer implementations are fixed
    * Fixed the byte order problem in HeapChannelBuffer

commit b9cd9de5ed58df8a6b5fea6cec6a5839e26fec9d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 17 07:57:14 2009 +0000

    Fixed issue: NETTY-176 ByteBufferBackedBuffer.toByteBuffer() and slice() do not respect byte order

commit e04d8e9de128be87bd9ff80cf3c8d3fdb923e922
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 17 06:37:36 2009 +0000

    Javadoc

commit 8b5a652883b55006a859b1f26df329bc56b1b823
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 17 05:39:19 2009 +0000

    Javadoc

commit 28511fcb9e430fd88c9305eafe4808dba401c7de
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 17 05:28:53 2009 +0000

    * Javadoc
    * Added EstimatableObjectWrapper and make ChannelEventRunnable implement it to avoid an evil circular dependency

commit 73853f1b04186557c7170cfc08ad3906e7b4e91a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 17 05:12:18 2009 +0000

    Javadoc

commit 1826b88622e71dc89b5a92e3928f3a9a16a7f145
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 17 05:09:45 2009 +0000

    Javadoc

commit 262fd48e28ab8001cc0bbdc316dcc460e0b562bd
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 17 05:01:09 2009 +0000

    Typo

commit 10a110c564aab4e383e18f8e65916389988e2d47
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 17 05:00:48 2009 +0000

    Javadoc

commit 89439266251ea8180b848a27776f4f97a33d0cf1
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 17 04:58:25 2009 +0000

    Javadoc

commit 373cd520127ff033c57e8d54635fc63885246e88
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 16 10:44:03 2009 +0000

    Fixed a problem in ChunkedWriteHandler where channelInterestOpsChanged event is not propagated properly

commit 4f4cf07760f52d2b7e285b87fcc741a9717c6c48
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 16 10:16:36 2009 +0000

    Removed duplicate file separator replacement

commit 51b6e05b0d09064b34009d4b12580c1b8f83d3a0
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 16 10:14:43 2009 +0000

    Added missing return in the example

commit 575973863f3b32b9de114d4c18c27cd89d4c24a3
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 16 10:07:46 2009 +0000

    Added missing exit condition

commit 887e0b6de7b02204f1002675c5f8a5e10d2f4056
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 16 10:06:33 2009 +0000

    Oops wrong variable

commit aec7fe1704f08615c5d4ac37dd5d8aa31b45cb9c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 16 10:06:14 2009 +0000

    Update offset sooner (Before getting any exceptions)

commit 6e4331d9f7fa254ae6b10356ebf3767b510c3e9d
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 16 09:27:46 2009 +0000

    Added a static file web server example

commit 6fbd8a080ba5f64dea60a434b40a5c73dd05448c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 16 09:15:46 2009 +0000

    Updated the copyright information

commit e8d42cbc4644fb0e460ee7528c54ea3163b5eb63
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 16 08:39:50 2009 +0000

    Updated author tags and version tags

commit f9c38bb76b57141196d4d5dc5cc40995320c75f0
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 16 08:35:43 2009 +0000

    * Reorganized HTTP examples (will add file server example later)
    * Fixed configuration errors in the HTTP tunneling transport example

commit b19d488312f1c9a46a73bdfb534f39f0f90239c5
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 16 08:21:50 2009 +0000

    Related issue: NETTY-175 Large Data Transfer
    * Added ChunkedStream
    * Moved ChunkedFile.DEFAULT_CHUNK_SIZE to ChunkedStream

commit bba5b7bd429c6bf9d21cc9c04a4bbc9c794e2f10
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 16 08:09:12 2009 +0000

    More validation

commit c2169f2b73b7dad4ca18956c7af423242d4eb17d
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 16 08:06:00 2009 +0000

    Renamed ChunkStream to ChunkedInput
    Renamed ChunkStreamWriteHandler to ChunkedWriteHandler
    Renamed FileChunkStream to ChunkedFile

commit c08e7dd397fd65402ba0df17b67035e38b9eca5e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 16 07:04:20 2009 +0000

    Issue NETTY-175 - Large data transfer
    * Added ChunkStream and FileChunkStream
    * Added ChunkStreamWriteHandler

commit ee8ffec2657e0fc365fab5b8fc9a9272df1fc0a7
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 15 09:06:56 2009 +0000

    Optimized HttpMessageDecoder.readHeader()

commit bda2f0a852f01a25211fc3837dcfbd28d4639224
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 15 08:45:39 2009 +0000

    Fixed incorrect state management for HTTP header size

commit aeb7903be8f287e8096d5221092a126019748855
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 15 08:35:24 2009 +0000

    Fixed a mistake during optimization

commit 12acb2cf093c7fde7afcf3297735084628f3574c
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 15 08:13:52 2009 +0000

    Fixed a NPE in HttpMessageDecoder.readHeaders() on a particular malformed header

commit f059f91ff4b6f4f5e556a09dbb41426969da82fb
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 15 08:05:27 2009 +0000

    Code simplification / optimization

commit d76bfe72b5831f7681c807dc498c0aa79fcb363b
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 15 07:50:53 2009 +0000

    Fixed issue: NETTY-174  Always use 'ASCII' charset when encoding HTTP messages.

commit e39d8720d286bdd62d7aa977afc0c0925c9e045f
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 15 07:32:51 2009 +0000

    Applied composite buffer consolidation to NioDatagramWorker too

commit 160866e1a009a52ec37a8023f9e5aa1c68b04a3a
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 15 07:30:07 2009 +0000

    HttpMessageDecoder does not use regular expressions to decode the initial line and headers anymore so that it performs better

commit e410abed0296fb084ee6e612ef52e215748501c7
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 15 07:29:12 2009 +0000

    Fixed issue: NETTY-173 Do not use Class.isArray() in ReplayingDecoder and FrameDecoder
    * Modified FrameDecoder and ReplayingDecoder not to use Class.isArray() anymore.

commit 5ae0adbfaa56d49f62fba97c9ff88ed7b27f13e1
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 15 07:26:05 2009 +0000

    Made sure composite buffer consolidation happens only once by converting CompositeChannelBuffer to an ordinary buffer

commit 5fb8e8069b54fb214a8132c9e990662733209de3
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 15 07:06:53 2009 +0000

    Tiny optimization that makes header addition faster in most cases

commit 8debedf6b6092161b5f14fdad33c39d5a700ca29
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 15 06:33:30 2009 +0000

    Removed the slow Class.isArray() call by returning Object[] instead of HttpChunk[]

commit a979433f918f569a13890bd9f2485385c29690e2
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 15 06:29:45 2009 +0000

    Tiny optimization in HttpMessageDecoder.readHeaders()

commit f22f0b2035ec4fe3bfc3a261e1613bd4f45bf6ef
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 15 06:13:50 2009 +0000

    CompositeChannelBuffer.toByteBuffer() should return the ByteBuffer with the same order

commit 40bf0a63f169188251ea2651ecb899413238bf34
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Sat Jun 13 11:30:02 2009 +0000

    Unittest and javadoc.

commit 666f57a35e04790d33e72978105d4c7488e4db18
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 12 08:42:44 2009 +0000

    Fixed a bug where a wrong channel is closed on connection failure

commit ad8bb7eaf63a952daaf7a21cdae26a687b329d80
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 12 08:41:00 2009 +0000

    Removed an unnecessary empty line

commit ef40ba79417c5e33da6cc626855f50d46713c37f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 12 08:39:04 2009 +0000

    Added a proxy example which is asked pretty often

commit 0067371e247cf93cfe671ebe5626530377404b19
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 12 02:53:26 2009 +0000

    Organized imports

commit 7a4f00201aa4efed3cd27bafc432db6f02bd8b88
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 12 02:47:57 2009 +0000

    Renamed NioUdpWorker to NioDatagramWork

commit 08107683b3e2625bde9ac2e8892f62a48193ee45
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 12 02:08:58 2009 +0000

    Less memory copy for OIO datagram transport

commit ee3ae043dce864e37b44f4e69813f89c1e6f7071
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 12 01:52:02 2009 +0000

    Fixed NPE in OioDatagramWorker.writeNow()

commit 01d8de26cf6cd55cbcb698922a8eb29dd87947ea
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 12 01:48:00 2009 +0000

    Fixed NPE in NioUdpWorker.writeNow()

commit d42ea03799b3df4fb87cd9476673e9132fe61106
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 12 01:43:26 2009 +0000

    Fixed incorrect or missing event order in Bootstraps and NIO UDP transport

commit 0a5019385c1bec0ea41350b508798433c6ab5743
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 11 16:47:55 2009 +0000

    * Added detailed explanation on NETTY-114 (not to forget why I woke up selector again)

commit e9d07c3c2eaad9ddb73673795c3ded6ff2c8b414
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 11 07:16:10 2009 +0000

    OioDatagramWorker now honors buffer factory's default byte order

commit 8f4e0b524cb105aa36fc452884ab390367ad98a4
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 11 07:14:40 2009 +0000

    NioUdpWorker.read() now honors buffer factory's default byte order

commit fa3eb52f4e0f5265750fb49e6302d4363092aef2
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 11 07:01:14 2009 +0000

    Fixed NotYetConnectedException on setInterestOps by backporting the fix applied to NioWorker

commit 899b16678f4a86354736c444b9c214b8ae055a4b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 11 06:10:46 2009 +0000

    * Merged recent changes in the trunk to the NIO UDP transport
    * Other miscellaneous modifications like typo fix

commit e4871f84601ed766743d2266e1fd8cfbaa57678b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 11 05:09:11 2009 +0000

    Removed predictor from DefaultNioDatagramChannelConfig because it's already implemented in its superclass

commit 1a309bff3492a121d11c89ac0276377f395cc619
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 11 05:06:14 2009 +0000

    Updated @author tags

commit 3473135c7b862b6d5a7515067df207dc261213d7
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 11 05:03:53 2009 +0000

    Updated @author tags

commit 4b263dfb0ed282b2715611e9db969b2ada34bc98
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 11 05:02:39 2009 +0000

    Updated license headers

commit d202db83f0fdcb5440ac4146ab1b6550643234ae
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 11 05:00:48 2009 +0000

    Updated license headers

commit c01e997a4597446ea3c9a112d4b7d23378abca70
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Date:   Thu Jun 11 04:33:07 2009 +0000

    Added some javadocs and removed unsed code and excessive comments.

commit effbe32fdb21ce7b0faa4a7f491c77b612c01488
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 11 00:48:49 2009 +0000

    Merged Daniel's NIO UDP transport into trunk - needs more review and cleanup but looks OK in general

commit 734a5a46d481040ebda476feec3680de9d2593b8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 10 08:56:37 2009 +0000

    Fixed issue: NETTY-172 Let user choose the I/O thread names
    * Added ThreadNameDeterminer
    * Moved ThreadRenamingRunnable from org.jboss.netty.util.internal to org.jboss.netty.util because it should be accessible by user

commit c0deea647ed2ef03146a128eb77adb9a8757465a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 9 10:26:47 2009 +0000

    Ignore IntelliJ project files

commit 583ddfe992ff5a885bc9d71c182af6df7457fe98
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 9 10:19:29 2009 +0000

    Fixed compiler warnings

commit be12a1bdf1e5e85e7c08ca58b6598fd04385712b
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 9 05:17:36 2009 +0000

    Disabled NIO constraint level autodetection for IBM JDK 1.6

commit 645ba6d3b9ed4bb8e522f706191b7c01e2b2650e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jun 9 04:32:02 2009 +0000

    Potential fix for AIX close freeze issue

commit afb7e511ada4c1c95ce7e84a66cc096a9cc7359c
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 5 17:05:42 2009 +0000

    Fixed a case where HashedWheelTimer notifies a timeout one round later

commit bb6f5a6104d663f66fa52e1e93da431b94e797f2
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 5 07:30:55 2009 +0000

    Fixed issue: NETTY-167 resumeRead() sometimes does not work in OIO transport.

commit 7339e172e090321e6251fda158e4b63da8854f3b
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 5 07:05:20 2009 +0000

    Fixed issue: NETTY-166  Dead lock triggered by OIO transport and MemoryAwareThreadPoolExecutor when WriteCompletionEvent reaches memory limit
    * MemoryAwareThreadPoolExecutor does not count WriteCompletionEvent anymore to avoid dead lock

commit 663fe81af2a3ec9d226aa673bd527b2d8a41b284
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 5 07:01:13 2009 +0000

    Made sure interestOps is updated before OIO thread is interrupted

commit 5273e274de8e8e4beda5ee8185532c2b446f4561
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jun 5 07:00:55 2009 +0000

    Made sure interestOps is updated before OIO thread is interrupted

commit 76777b74b49a379cf780316a5155722a429d1a7c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 4 08:50:19 2009 +0000

    Fixed a problem in the examples where the client process does not shut itself down when a user typed the 'bye' command.

commit 345a5512ab257ea3e5ad70f5b150d6324e3660cc
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 4 08:49:33 2009 +0000

    Made sure to clean up the cumulative buffer on channelDisconnected or channelClosed

commit d4071e87ef3a6bc826fc01331e3c23e2b1f1a6bc
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 4 08:48:51 2009 +0000

    Added more exception message pattern to detect the exception related with the closed connection in SslHandler

commit 7739f0242383137c1b95a4ed76faa325d08e9d26
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 4 06:15:44 2009 +0000

    Removed System.println

commit df06536818d05f65055929108da09dd8b18159d3
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 4 06:15:19 2009 +0000

    Fixed test failure

commit 02ba3b553a835a052afce2a9dcb82523ea352b7f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 4 06:01:08 2009 +0000

    Removed an unnecessary empty line

commit c4bfb451833e04442197e442b65288b2d802691e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 4 06:00:26 2009 +0000

    Fixed issue: NETTY-165 FrameDecoder and ReplayingDecoder must call decodeLast even if there's no data in the buffer.
    * Made sure decodeLast() is called even if the cumulative buffer is empty so that a decoder implementation always get notified when the connection is closed
    * Updated Javadoc to explain that the buffer can be empty

commit 553c4d2df877ea33777b69b98870a65d0a3ce73c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 4 03:18:44 2009 +0000

    * There's no need to send content-length header if HttpRequestHandler is going to close the connection right after a response.
    * HttpClient sets 'Connection' to 'close' so that the HTTP server closes the connection

commit ee3440567c4241a0653648783e031c163e10db30
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 4 03:15:26 2009 +0000

    Prettier output

commit 3aa91b0904e53c086b2aa54c67b09a61faccd1ba
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 4 03:13:44 2009 +0000

    Modified HttpResponseHandler to print the 'end of chunk' marker

commit 1609e1c3478fbdab7140060e8c6267eeec3e0ecb
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jun 4 03:10:53 2009 +0000

    Fixed issue: NETTY-164 - ReplayingDecoderBuffer.readableBytes() and capacity() should not return Integer.MAX_VALUE if the connection is closed.
    * Fixed a problem where ReplayingDecoderBuffer.readable() does not respect 'terminated' flag.

commit 3acda248c1ebdea704ba9aba0ee113389222d3fa
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 3 08:58:06 2009 +0000

    Fixed issue: NETTY-164 ReplayingDecoderBuffer.readableBytes() and capacity() should not return Integer.MAX_VALUE if the connection is closed.
    * Added ReplayingDecoderBuffer.terminate(), which makes readableBytes() and capacity() to return an ordinary value instead of Integer.MAX_VALUE

commit 21004622351a83647c80b0dc74839307e70639e8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 3 07:48:23 2009 +0000

    Fixed compilation errors in VirtualExecutorService

commit 5f27babff4d3e11f9b38aa85b71800891fda0a9d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jun 3 03:30:01 2009 +0000

    Resolved issue: NETTY-161 Provide a way to get notified when all I/O workers of a ChannelFactory are terminated.
    * Added VirtualExecutorService

commit 3c29ccfdb56635bce9d45ee15bef7da5e57346ff
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 1 04:52:35 2009 +0000

    HttpClient should use HTTP 1.1

commit 151bf08095137c7e19b174ae7e0a1f330f62cf65
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jun 1 04:17:10 2009 +0000

    Fixed issue: NETTY-163 OioDatagramChannel.connect() hangs if called on a bound channel
    * Set SO_TIMEOUT of DatagramSocket to 100ms

commit ffe2831502c36fbf17b6e5a2b96c0633833bd838
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat May 30 06:50:09 2009 +0000

    Fixed issue: NETTY-162  directBuffer cannot create buffer with LITTLE_ENDIAN endianness
    * Added test case for little endian direct buffer
    * Fixed a problem where the sliced buffer's endianness is not set

commit d4c2b7d70d0bbd0114014fa6f0ccbb4a60d2a63c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 28 23:42:39 2009 +0000

    ChannelLocal shouldn't be abstract

commit 382099fae2ad7f7502f129ef7aa079061d7d2f1f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 28 23:41:26 2009 +0000

    Fixed issue: NETTY-160 Make ChannelLocal non-abstract

commit af3cd875f09ff382d4a77547f9356ca7889b2939
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 22 08:49:20 2009 +0000

    [maven-release-plugin] prepare for next development iteration

commit 4bdf2ad00ec12a0a25e08548c488d2fb66f57a1d
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 22 08:49:06 2009 +0000

    [maven-release-plugin] prepare release netty-3.1.0.BETA3

commit 63c94a4edcc250a1003acbb6c4208af50a6d9871
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 22 07:35:26 2009 +0000

    Fixed build failure in Windows

commit c5c3fbcb20eeeefd3e44edc93f3d8696cbb07f84
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 22 06:39:48 2009 +0000

    Updated Javadoc

commit 1116ae4733d10ffd791851841b02fdd970087503
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 22 06:37:09 2009 +0000

    Previous improvement on LoggingHandler was not logically correct - stepping back a little bit

commit 96a751d9b0879a62fdfb9ca3d7851eae2ec5a7a9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 22 06:26:27 2009 +0000

    Javadoc for LoggingHandler

commit 7452e139c1d1450a0bf5b8401f315d863590c44e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 22 06:14:09 2009 +0000

    Method ordering

commit 903fde7704c582365309a6065d27af25ec80dbe9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 22 06:13:47 2009 +0000

    Method ordering

commit 7b87b1b23c4d7673ea50f45d734009daea4ee049
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 22 06:13:19 2009 +0000

    Made LoggingHandler more extensible

commit 6da3fb5a90dace40e4403672164f71e78a0f1779
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 22 06:04:47 2009 +0000

    Fixed FindBugs warnings

commit 1f6591feb2bbbae660e03b4e0a5973e9e26ef08e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 22 05:41:47 2009 +0000

    Suppressed error log which occurs only in Windows on connection attempt failure, because it can mislead the developer to think there's a bug in the test / impl

commit 55cf5d67af2d9d9f12d211b664486c448f8669c9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 22 04:51:13 2009 +0000

    Fixed issue: NETTY-157 Channel.close() does not trigger a channelUnbound event in some transports
    * Made sure the specified future is not marked as done before setClosed() is called.  The specified future can be the closeFuture of the channel, consequently making setClosed() always fail.

commit f0a96e7417002b0c786ce837a8711bee5e1e0895
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 21 12:04:28 2009 +0000

    Tiny optimization - no need to create a string when there's nothing to log

commit 031c26482ca049b2fdfa2d9f9decc8ea30e2a2da
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 21 11:58:40 2009 +0000

    Fixed issue: NETTY-158 Can't set the default byte order to little endian on the client side if FrameDecoder or ReplayingDecoder is used.
    * FrameDecoder and ReplayingDecoder now create their internal buffers only on demand so that a user has a chance to decide what ChannelBufferFactory FrameDecoder and ReplayingDecoder will use.

commit 25eee122cbf083eee1ffeb226418bd40afb0d9ca
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 21 11:52:17 2009 +0000

    More comprehensive exception message

commit ad6888a635f0490ac5f4b63208f4fb911eaabeb5
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 21 11:03:58 2009 +0000

    Fixed issue: NETTY-157 NioServerSocketChannel.close() does not trigger a channelUnbound event.
    * Fixed a case where channelUnbound event is not fired if the specified future is the close future actually

commit 77742f5cf9f2580682b27536ed911621e7bc082d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 21 10:28:05 2009 +0000

    Resolved issue: NETTY-156 Improve NIO worker performance by removing unnecessary SelectionKey access
    * Applied patch by Wade Poziombka
    * Reduced the call to SelectionKey.readyOps() even more

commit 4d81a66e26c510b1b231f64e86b8dd1082948e5a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu May 21 09:55:44 2009 +0000

    * Upgraded Maven plugins
    * Specified the resource encoding explicitly

commit f92a0fe53795310d3cce770192c7fa167a416fce
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 20 09:03:17 2009 +0000

    Fixed some warnings revealed by Eclipse 3.5 RC1 - previous Eclipse versions might complain this annotation is unnecessary.

commit 678be7866cea72cfac01051855d2bb4d772050d9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 15 08:01:54 2009 +0000

    NETTY-154 channelOpen / channelBound / channelConnected needs to be called from the boss thread in NIO Socket transport.
    * Boss thread now calls channelOpen channelBound and channelConnected
    * to avoid a race condition when channel.setInterestOps() in the three handler methods above, interestOpsLock is acquired properly

commit 92b336814f169ee03fcba7c4f14eec83df4826eb
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 15 03:43:19 2009 +0000

    Made CompactObjectInputStream.loadClass() protected just in case a user wants to override it

commit b2eea97036686a9875ebd24b38b694e8a5c1602e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 15 03:42:48 2009 +0000

    Fix for NETTY-150 CompactObjectInputStream web start (applet) Class.forName issue
    * Refactored to reduce code duplication in CompactObjectInputStream
    * Made sure that class loading doesn't incur security check unnecessarily

commit 64bfa6cfdaf949a267ef91a5df34424fd63da01a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 13 13:12:19 2009 +0000

    Better handling of InterruptedIOException in OIO Datagram

commit 06586a6bfc3cf08e23cdafd9bbe6a400954aacc7
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 13 01:11:06 2009 +0000

    More explanation on how dead lock can be produced

commit 7e3ecf6b469de1a840dd928541339e59e5325766
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed May 13 01:08:40 2009 +0000

    Better fix for the SslHandler dead lock

commit 4eee24dc2cb838f5ddeba4789add49b8e60ad0d7
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 12 14:46:54 2009 +0000

    Fixed a dead lock in SslHandler

commit 23d922fab26dd2c2030521049d1a8773c2b73cd2
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue May 12 14:09:55 2009 +0000

    Fix for NETTY-150 CompactObjectInputStream web start (applet) Class.forName issue

commit 3c79744064a14a8f2bebbbe07b85b4cfec00d3df
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 8 12:45:10 2009 +0000

    Fixed issue: NETTY-151 HTTP Content-Length
    * HttpMessage.getLength() now returns a long integer

commit 4877a2e73e4eb693e59c91971d56f167dd90be24
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 8 08:22:01 2009 +0000

    Changed the pipeline coverage of HttpMessageEncoder to "all"

commit 24ec8eeff6ea3652d2df84cbabd0a8897b853de9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri May 8 08:21:13 2009 +0000

    Fixed the documentation error reported by Stefan

commit 6a570765d4a987d489484e487e3f9a26c273b6fb
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 29 13:22:42 2009 +0000

    Workaround for NPE in Tomcat on undeploy

commit 3ee287bf4981d8c0b337f49458410670bc0c56c9
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 29 02:10:52 2009 +0000

    Updated Javadoc of OrderedMemoryAwareThreadPoolExecutor

commit da6f2ac96820ab57a233f9c8112d94b7c98963eb
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 29 02:09:05 2009 +0000

    Updated Javadoc of OrderedMemoryAwareThreadPoolExecutor

commit 429e9a22883c14202bb2bc5839035ab2124e4304
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 29 01:15:10 2009 +0000

    Made sure to disconnect on reconnection

commit d185a4b8d0f1b823377949ec501ec9d1e56a38ba
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 29 01:14:39 2009 +0000

    Fixed wrong thread name

commit d809046987a3bc5d3e7899d966b7263dfcbac099
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 29 01:08:05 2009 +0000

    Fixed ClosedChannelException caused by previous 'chunk end mark' fix

commit fee1515818448d4210459df10e031a3d5ff7d993
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 29 00:48:26 2009 +0000

    Fixed a bug where HttpTunnelingClientSocketChannel does not send the end mark

commit 7661bcec2d8e8165f17385b8c2faaaf84fd74f8a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 29 00:41:16 2009 +0000

    Adjusted the access modifiers of HttpTunnleingClientSocketChannel methods

commit d3eae2a5117627bdad7bfef09dbd55b70504b050
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 28 14:43:20 2009 +0000

    Javadoc

commit 4c564066eb7f923a058ef3761797d8636d39d74d
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 28 14:41:48 2009 +0000

    Typo

commit 48912c03ac74410489024d6f00a87311e86ea955
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 28 14:35:23 2009 +0000

    Fixed ChannelHandlerContext example and added more explanation

commit e8aba5ae5a68be8dd64ebedd1c9c207b20db475a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 28 13:39:06 2009 +0000

    Javadoc

commit 14f735438cf56693ce6a3de1293694c88bb6b380
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 28 13:35:55 2009 +0000

    Javadoc

commit d56c90fef56d24551b460de61213bac4085042e2
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 28 12:38:02 2009 +0000

    Wrong tag

commit 7ad38e8c8c69bb0dea3b27d06b0f6a8ffa32e77a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 28 12:36:06 2009 +0000

    Javadoc

commit 3cd84789126d62e817661821bba6cc040c5e4909
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 28 12:11:01 2009 +0000

    APIviz diagram cleanup

commit b01f484b7911ccaff3b9ccbe6881e25e27949897
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 28 12:01:34 2009 +0000

    Javadoc

commit 553796fd751900127e532b2e9e2c590dc6ecd74b
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 28 11:57:51 2009 +0000

    Fixed an incorrect relationship in a class diagram

commit 942298c537166b81da3503533db86f878bbd8b3b
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 28 11:54:29 2009 +0000

    Cleaned up the class diagram in the buffer package

commit e8b186eb4a584ba0a2f5dd5a3f581dcb37c03a57
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 28 11:28:04 2009 +0000

    Moved the chapter 3 to the package description of org.jboss.netty.buffer.  User guide will focus on bigger pictures

commit 91c0f5ed56b41a788e385b592d0575f0e06ccd84
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 28 10:38:00 2009 +0000

    Javadoc

commit f3e910bd466217bfcd747c967e489944fd5c6ce0
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 28 05:45:05 2009 +0000

    Member reordering

commit ef5fc808a2647c25760d6925d65c3cfb28f3180a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 28 05:44:40 2009 +0000

    Added ConnectionlessBootstrap.connect()

commit f69cb45ff9098b6226451ff2701e2e0d2c416422
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 28 05:28:36 2009 +0000

    Added ConnectionlessBootstrap for UDP transports

commit f8f1f2ca632d2df7c93643e18b4ee88b294e6fab
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 28 05:10:46 2009 +0000

    ServerBootstrap cannot be used with UDP/IP

commit cd35c1d1300d78c08f2e45f80533f624157544bb
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Apr 26 04:04:05 2009 +0000

    * Fixed a potential issue where ClosedChannelException is thrown unnecessarilly
    * Fixed a potential performance issue where an unused exception is created when a channel is closed

commit 120db66aca6e1f597645fa4601837937e405d877
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 24 13:56:35 2009 +0000

    More documentation on ChannelBuffer

commit e489f2e0edcf6d0cfae4e2ab8fa833b4ecfef7b6
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 23 11:57:16 2009 +0000

    REphrasing

commit 7bdc627b8e318789c2bdb7105a9218acbf3b294e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 23 11:51:27 2009 +0000

    Improved Javadoc as suggested by Frederic

commit abf5c76737b758813d5067d2345fc45870382c43
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 23 11:45:23 2009 +0000

    Improved Javadoc as suggested by Frederic

commit 22a9d0473c90df45af6b5d04b9f705ae08048365
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 23 09:49:21 2009 +0000

    typo

commit f958d1958cfb0a4746d80570864eb11bd2866e63
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 23 09:36:25 2009 +0000

    DefaultChannelGroup should be seen in the package diagram

commit 20aecc928fab5116bb1283a1d75189feb283cf14
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 23 09:22:59 2009 +0000

    Updated JavaDoc of the org.jboss.netty.channel.group package

commit 4ee657cd0b8b29c2444244f9d6cdbdbe51131173
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 23 07:14:27 2009 +0000

    More friendly dead lock error message

commit bb8f4da30c76cf4f3d8455215c150f4a16020910
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 23 06:56:41 2009 +0000

    More friendly dead lock error message

commit c4ba12e8d44a23c9456a3abcefa396a44b80553a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 23 06:55:45 2009 +0000

    Ported the dead lock detector in DefaultChannelFuture to DefaultChannelGroupFuture.

commit 563fd2c2864151785388565675dd292d21e7e715
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 23 06:33:19 2009 +0000

    Made HttpTunnelingServlet conform to the good Servlet guide line :)

commit 3d568d449b586bf7938b1e3d7d2eb256b96f813b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 23 05:26:19 2009 +0000

    Fixed OSGi descriptor

commit 67818b4a53d4651370b477bb1ca313c6470653ed
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 23 01:06:00 2009 +0000

    Reduce memory footprint by resurrecting the removal of ChildChannelExecutor

commit a9e3951adbbab5429eeb56250900f3e125ccdc63
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 23 01:01:10 2009 +0000

    Fixed a NotYetConnectedException in closeOutboundAndChannel

commit 5cd9b6722a8d748a5db873f6435df1393a22026f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 23 00:46:41 2009 +0000

    Fixed memory leak in OrderedMemoryAwareThreadPoolExecutor

commit 967bd4d06d4125842bf946401ae3790778331fdb
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 22 21:32:12 2009 +0000

    Made sure OioDatagramChannel.joinGroup() is allowed only when the channel is bound.

commit 59956be36981cd906efa1788665e27134d85cd98
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 22 09:19:31 2009 +0000

    Bootstrap now implements ExternalResourceReleasable

commit c3f3e005d915de39874b7631c0bcd2c8e0901df7
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 22 00:01:02 2009 +0000

    More null check in ChannelLocal

commit a24959b9ea4251b3b029a333a7de1510bb2be2bb
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 21 23:59:59 2009 +0000

    Fixed issue NETTY-148: ChannelLocal.initialValue() must return non-null
    * Made ChannelLocal.initialValue() abstract
    * Null check in ChannelLocal

commit 726ab5236b5404848d823ec47079a62353ba4fab
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 21 11:19:35 2009 +0000

    Fixed NotYetConnectedException

commit 75cf84c5dae405719ab63e2530badcf6990269dc
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 21 11:14:59 2009 +0000

    Exception logging

commit 212be9327dd572fdadb6bfd610531470b9469b53
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 21 10:48:46 2009 +0000

    Fixed incorrect exception handling

commit d2b6078eaa6846dc64936d8b2f35d94552f5977b
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 21 09:49:20 2009 +0000

    Fixed broken chunked encoding in HttpTunnelingClientSocketChannel

commit 5a18c9143544829c0ddf7d8563d8c42b1b2671e8
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 21 09:21:13 2009 +0000

    Fixed a problem where HttpTunnelingChannelHandler does not log caught exceptions

commit 55ed37d82c78c29024f44f5893ac4b34378619f6
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 21 03:35:07 2009 +0000

    Fixed documentation errors (thanks Stefan)

commit 58ef4d1cc247563d24b369a9405ee8501703348f
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Apr 21 03:32:11 2009 +0000

    More timing tolerance to CookieDecoderTest

commit 4511a10d5807f6f434c2b6a6414fd08e0a7a3d33
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sun Apr 19 09:25:58 2009 +0000

    bad commit

commit 106c7e8978329e88efb0480bd9f7c061f97da680
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sun Apr 19 09:21:32 2009 +0000

    Update license and pom (still Netty out of sync since branch TrafficShaping is not yet part of the official release)

commit c5af24045f5e275700b00822449452f5c656caf4
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Apr 18 14:11:52 2009 +0000

    [maven-release-plugin] prepare for next development iteration

commit 249b88dc1f32278d86f0aef5cb5c73a2e2cf3b8a
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Apr 18 14:11:38 2009 +0000

    [maven-release-plugin] prepare release netty-3.1.0.BETA2

commit 10fc8fb398583996857623e8ed66512d2d6b76f9
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Apr 18 12:54:59 2009 +0000

    Will release a couple more BETA before CR

commit 2440a1aabf7cfea8fe7dd810ea462eb12d5e04e7
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Apr 18 12:42:40 2009 +0000

    More constructors to LoggingHandlers

commit 19cff0c04e8c06a3df52c124e030c14aff36db7f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 17 14:58:21 2009 +0000

    Tiny Javadoc improvement in ReplayingDecoder

commit f670bb238d6cf398637b82a701303ac792f81691
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 17 10:03:18 2009 +0000

    More documentation on ReplayingDecoder

commit 14c7e67a0b1c313fc8df7e44f5736d15fc22e290
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 17 08:18:28 2009 +0000

    Better explanation when ChannelPipelineCoverage is missing

commit 69ac7d174c85cbd57ef725c77545d420ee5997d6
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 17 07:33:32 2009 +0000

    Replaced the usage of SimpleChannelHandler with SimpleChannelUpstreamHandler whereever possible

commit 2c8055c9ca57cbbd3d3ac01208530d7225aacc9a
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 17 07:29:08 2009 +0000

    Suppressed unnecessary event object creation in OneToOneDecoder

commit 71ad5126b67ae327016c01a586895fca503f1dce
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 17 07:27:37 2009 +0000

    Suppressed unnecessary event object creation in OneToOneEncoder

commit c8480941ced3915eec69fa697117ce12db6c5453
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 17 06:47:47 2009 +0000

    Clearer error message for Bootstrap.getPipeline()

commit c0f82cb3854a25c0a693d2170b6fd6d73985eb52
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 16 05:19:12 2009 +0000

    Typo

commit 5a67c13279187d3da168d3491a301a9345ee704b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 16 05:09:51 2009 +0000

    A newline between methods

commit f61412c8289ceb16ac9203aeb743514c1561fcc0
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 16 05:09:03 2009 +0000

    More tolerance in CookieEncoderTest

commit f2f09e66aacd7d4513f644c5041db75ca1565801
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 15 23:49:26 2009 +0000

    Converted an inner class to a nested class

commit 5127313e9781a2652a45b0e0d1c8968fb920b7e1
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 15 23:46:33 2009 +0000

    Updated FindBugs filter

commit 4bab7516d56c0a19e0ac98b5b8802e4cee2b1590
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 15 23:02:08 2009 +0000

    More tolerance in error message matching

commit fb8e337293a6d3da781c13fbd031f191cebd78a4
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 15 22:59:37 2009 +0000

    Converted 'SocketException: Socket closed' to ClosedChannelException (OIO sucks)

commit a6fb8708cad3ecbf825b7f4167984bd1f52afe2e
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 15 22:52:48 2009 +0000

    A little bit more accuracy in swallowing ClosedChannelException

commit 7d3fde9b145f315bf28b173adff6e9b668a76ba3
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 15 22:50:54 2009 +0000

    SslHandler now swallows ClosedChannelException for all written non-app data

commit 7d8d924f6b31c84b3fb9a00244c84d0351fc2451
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 15 22:09:57 2009 +0000

    Renamed CONNECTION_RESET to IGNORABLE_ERROR_MESSAGE

commit 86a2c0c0ceae7408968e36829a3fe96702ed4d27
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 15 22:06:57 2009 +0000

    Used non-capturing group

commit d8bc5f07f2c46a50e0c10b0bb3ff021a2697f09f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 15 22:06:01 2009 +0000

    Broken pipe error is reported instead of Connection reset in HPUX

commit d425ec761e03f01c79bfc23732e93b36b34923ad
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 15 15:48:05 2009 +0000

    Simplistic HTTPS example in the comment

commit 1e568be9cb77d424258f111021871b03e478df15
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 15 15:41:49 2009 +0000

    * Exception handling in HttpRequestHandler
    * HttpRequestHandler prints the protocol version now

commit 1262c45ab3f3c68955b4b24654be6bb17e9a9983
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 15 15:28:30 2009 +0000

    Fixed a problem where ClosedChannelException is raised when SslHandler sends a closure_notify

commit e323b221d7fc88edb1cf824ab92c61be15416fe0
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 15 14:45:24 2009 +0000

    Fixed a problem where SslHandler does not notify close futures when partial SSL frame is received.

commit 9252f449bdb947e079253ec2ce9b406dc7fe7abf
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 15 13:50:06 2009 +0000

    Better diagnosis message for AbstractSocketSslEchoTest

commit 8c172a5a1d71701e731635def01cbcfd72b8a8f1
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 15 13:45:05 2009 +0000

    More diagnosis message for AbstractSocketSslEchoTest

commit b67523ab1c4a5b0780e18750e83086d3615182d8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 15 12:33:54 2009 +0000

    Typo

commit 09b2a101bdf6ea4d34897e8b435eef3cc08a5380
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 15 12:33:39 2009 +0000

    Made sure the close futures which are hold by SslHandler are notified when the connection is closed.

commit 5966c93cfeb9c2c5641d418fdb83ac6aaf13d3d3
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 15 08:06:42 2009 +0000

    Removed the traffic shaper from 3.1 - rescheduled to 3.2.

commit bb6db4baf886df82f3d7b711a993ea60c1c6e3b7
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 15 07:41:45 2009 +0000

    Removed printStackTrace

commit 40c4d8447799bfd7bfd1e6d6a3b5621692422958
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 15 07:41:25 2009 +0000

    Fixed NPE on interruption

commit bd1d184d69e1c1d125f5259286aa48e8693fdd4d
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sun Apr 12 10:06:20 2009 +0000

    Change according to ML discussion

commit e9793ee244466ab71146a9a2bb9ba8f567ad37cc
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Apr 12 07:52:43 2009 +0000

    Added toString() to DefaultHttpRequest/Response

commit 3065a00d81204ec0134fb5af38d2699e27075f1d
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Apr 12 07:21:14 2009 +0000

    Grammar

commit 48e258c8107bfd9baacf77f9815ebb781431a45e
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Apr 12 07:16:01 2009 +0000

    * Renamed following the general naming convention used in Netty
    * Renamed 'delay' to 'checkInterval'
    * Added some design ideas, TODOs, and FIXMEs

commit 7376367973540ec4a2117234259bb7f3daf983f3
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Apr 12 06:55:52 2009 +0000

    Renamed LimitRead/Write to Read/WriteLimit

commit 4d88c5348a0df3f4637e9c5c1c0c09fc6ed98c2a
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Apr 12 06:36:36 2009 +0000

    Added container support for DefaultLocal(Client|Server)ChannelFactory

commit b6ff3a4cad6fdce371cb2e35dea2fe3a1cc9bb27
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Apr 12 06:26:28 2009 +0000

    Added container support for OioDatagramChannelFactory

commit d01c7e05f93c2fb9c045a63a248cbde6cc0e0ab8
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 10 18:15:55 2009 +0000

    Another experimental fix for SslHandler closure issue on handshake failure

commit 29d56ff9753a77f658d4f6680da373b1aac83f95
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 10 13:09:30 2009 +0000

    Updated the overview section of the Javadoc

commit 90a0796d8d7f92c2a25f0398ed35e4abdea30ec5
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 10 12:55:27 2009 +0000

    * Added the new shiny architecture diagram

commit 2fe0891f4ffe38de21ce5bce065481892006ebf7
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 10 07:55:54 2009 +0000

    Updated Docbook DTD

commit a579dabe25c41fa4f4641687a45210a2d01834e0
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 10 07:51:40 2009 +0000

    Finished writing the chapter 2

commit 5e00e14e17107a74ec1519d9f5c220c212ce4316
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 10 05:52:30 2009 +0000

    Removed unnecessary sanity check

commit 638ef60b336c5cd6752738f31a31c8dc0e17c9ee
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 10 03:29:21 2009 +0000

    fundamental - basic

commit 5d008304cfa0b34442aa7decc5eeaeb67f74b7cf
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 10 03:20:32 2009 +0000

commit 2e88f7a1088b68cc9320ccfe9733f78704935286
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 10 03:16:37 2009 +0000

    More stuff in the user guide

commit 87fd349c66df328a9542cc864a80cf65e32828d8
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 10 02:22:19 2009 +0000

    * Split the buffer section to a separate chapter
    * More stuff in the second chapter

commit bcd3fd5fe55d7f38c3428828e1562ede33379d8a
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 10 01:46:54 2009 +0000

    Removed unnecessary dots in the example

commit 7de2d0c0dff52f0c30d2d394b017836b15456706
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 10 00:57:09 2009 +0000

    Potential fix for infinite loop in SslHandler.unwrap()

commit f1b6534aafca95dccf91eeeaf673ebbde499842f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 10 00:38:36 2009 +0000

    Reverted back the experimental workaround for SslHandler that did not work

commit a18a070b60c35ca59ff0776a38db9f3924fac080
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 9 07:27:41 2009 +0000

    ReadTimeoutException and WriteTimeoutException must extend TimeoutException

commit 6170cf8cc6f6f1c5ebd195541f38d57008893f23
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 9 07:21:34 2009 +0000

    Upgraded to APIviz 1.3.0

commit bd7f8a561aa9570ec5dc5d4a26b93195116e4c06
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 9 07:03:53 2009 +0000

    More example and explanation on ChannelPipelineCoverage("one")

commit 25a2ade13058f862c99ae80de4655104bcd4fa33
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 8 22:12:29 2009 +0000

    An experimental workaround for infinite blocking SSLEngine

commit 763d0cf809d2623dee7a294a56686c9dd29fe4bb
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 8 22:09:13 2009 +0000

    An experimental workaround for infinite blocking SSLEngine

commit ce30409da8bc703315e4c28a90a0db7c0e21d441
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 8 09:37:47 2009 +0000

    Improved ChannelFuture documentation

commit b5917ce5763535070499ae7471f1e3d208f5f3f6
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Wed Apr 8 09:35:25 2009 +0000

    Remove abstract from TrafficShapingHandler
    Add method resetCumulativeTime and its attribute to reset cumulative counters if needed

commit 91d26f5abc635f713e90857cd3a859b99e728bf9
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 8 08:48:53 2009 +0000

    Fixed Javadoc of OioDatagramChannelFactory

commit 248125505de8b59c76755200032022e97f9a4c95
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 8 08:41:22 2009 +0000

    Improved documentation of ChannelPipeline

commit 415702217b191d5fe7967f8278eec70b27d6a9c3
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 8 08:38:06 2009 +0000

    Improved documentation on how an event is processed in ChannelPipeline

commit 945d2ea3cd30e4744fa2b0db9e6abf04f8114031
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 8 08:19:42 2009 +0000

    Improved documentation of LifeCycleAwareChannelHandler

commit 70c41e53cce69da19123809643d11ad50406ef34
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 8 08:17:42 2009 +0000

    Improved documentation of LifeCycleAwareChannelHandler

commit df1fc4556c83dd5c3ff885b475c2b3ffd4089645
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 8 07:32:57 2009 +0000

    Made more methods in TrafficCounter package-private

commit 079252700b28f56b208d7fa5ac5806e1c6ce3c52
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 8 07:32:22 2009 +0000

    Made another method in TrafficCounter package-private

commit 5442ca360040b8883651ccd8c847a098b82cd548
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 8 07:31:46 2009 +0000

    Made another method in TrafficCounter package-private

commit cc181204c0e7ddf44cb6af4f2180111a85df7fd9
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 8 07:30:40 2009 +0000

    Various renames on TrafficCounter methods

commit e3fc229b0306db01f94f15108de0c82c957f247a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 8 07:24:14 2009 +0000

    A test case for NETTY-142  ReplayingDecoder calls decodeLast with unreplayable buffer

commit d0ee16781a214f8470462334346519b762c5b72b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 8 07:23:24 2009 +0000

    Fixed issue: NETTY-142 ReplayingDecoder calls decodeLast with unreplayable buffer
    * decodeLast is now provided with replayable instead of cumulative
    * Renamed fireMessageReceived to unfoldAndFireMessageReceived to avoid confusion

commit c55c25291a0ea045f6e6ddb63a03997b499e2ab4
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 8 07:04:12 2009 +0000

    Removed unused member variable

commit 8ed510e94a419bff59e8f630cd030abc0d85cfbb
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Apr 8 07:03:53 2009 +0000

    Fixed NETTY-141 Codec embedder does not rethrow the exceptions raised by codec
    * Made DefaultChannelPipeline.notifyHandlerException() protected so that AbstractCodecEmbedder can intercept all exceptions.

commit 5c95161bf5a061ee3d6b1fbd0ae089b47ad4e0e1
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Apr 6 12:08:42 2009 +0000

    Documentation fix

commit 3970d5c9a9fcc5871e7d074df20e49c398a12c81
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Apr 6 12:06:13 2009 +0000

    Documentation fix

commit 67edb9d69d6e585f22a120c497127a66d7b360d2
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Apr 6 12:02:38 2009 +0000

    Update on the previous documentation effort

commit 1e00b56a70e1cba1c97d9643bf6ac9a06d6edde3
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Apr 6 11:35:40 2009 +0000

    Fixed overflow in the example

commit b22363b728a609cc711b3aef17cd3e8c00cac39e
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Apr 6 10:32:40 2009 +0000

    Wrote another section of the second chapter

commit 138e521b2274e474c4fd1307957354b690a3f6fb
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Apr 6 09:16:02 2009 +0000

    typo

commit 5c97c7fd1c3784bcf1ad2e0b9fb5d5fc66d82f1a
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Apr 6 07:09:11 2009 +0000

    Resolved issue: NETTY-140 ChannelFuture.await*() should throw an IllegalStateException if dead lock is expected
    * Added IoWorkerRunnable which maintains a thread local boolean variable
    * Improved DefaultChannelFuture to check IoWorkerRunnable.IN_IO_THREAD to detect possible dead lock
    * All I/O worker runnables are wrapped by IoWorkerRunnable.

commit c86bf34b307baa288938aafa6f31b335a7d8236f
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sat Apr 4 08:12:08 2009 +0000

    Update from comments on ML

commit 5a96ed21950ca8df60603a3f79dd6e33d33846ee
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 3 17:37:49 2009 +0000

    Moved timer utility classes to org.jboss.netty.util

commit c91b98e2545e9fa9f0ce45ab5ad1bfbeb2e12204
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 3 16:54:50 2009 +0000

    Fixed build failure

commit 7e65f8a9bacd61a7763141bc2f549a34ff58a193
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 3 08:27:26 2009 +0000

    Removed utility package from the dependency diagram

commit a96de7590bdf8e1dba970e29934d12e52eb306ea
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 3 08:14:57 2009 +0000

    Updated the package description

commit db6725dcbd32e45e7945c9eb73de2cc0c5a5b3b9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 3 08:11:24 2009 +0000

    Added FIXME (will be fixed in 3.2 or later)

commit ec0b3fe3f20871eaff2932a6edf0cf4a41fa7564
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 3 07:41:54 2009 +0000

    * Moved internal utility classes to org.jboss.netty.util.internal
    * Made org.jboss.netty.util public
    * Moved ObjectSizeEstimator and its implementation to org.jboss.netty.util

commit f5e42348c71c82a16c9817ee2720013e8f9c5f0b
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Apr 3 05:47:12 2009 +0000

    Updated the eclipse plugin

commit 4d6255d4eac9c8ed81cf6e21cde3f7061f72b046
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 2 09:10:57 2009 +0000

    * Simplified DefaultObjectSizeEstimator as suggested by Stefan
    * Made sure HttpMessage.getContent() does not return null at any case
    * Improved TelnetServerHandler to send DOS style line delimiter so that it does not look bad in Windows

commit 2bd880e94901ce7c27e289ddc2b0b14f3f919f53
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 2 09:04:21 2009 +0000

    Fixed documentation errors

commit 5b9963f44ec874cf374ac4057f62dcfdb5b8d1d7
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 2 09:00:27 2009 +0000

    Fixed documentation error

commit 27095ce2b430921a01a3d5737de0e7dce5e39bea
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Apr 2 05:27:38 2009 +0000

    Fixed documentation error in Client / Server Bootstrap

commit e80c7dbe0eb920d9a0944cbdfa392ff5e51f815d
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 31 09:49:46 2009 +0000

    Excluded container integration packages from apiviz view

commit c24077cab5c319f6ed1385d069f5c917dd0cb628
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 31 09:45:52 2009 +0000

commit f0b5bbacf9651ce385aa72c3774193c63ce7c741
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 30 18:55:32 2009 +0000

    Fixed race condition in the HTTP example

commit 4794030eab27bbae8f749541406eb025e62bf024
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 30 06:13:38 2009 +0000

    Fixed NETTY-148 OioDatagramChannel does not fire an channelOpen event.

commit 4a27c83c04191796113c29ecff151da41646e142
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 30 02:19:11 2009 +0000

    Removed code duplication

commit c6b707c442b9116b26a99fac16cd067c27628ae2
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 30 02:14:11 2009 +0000

    Fixed issue: NETTY-137 HttpChunkAggregator should not wait for content when the response status code implies empty content.
    * Applied the same fix to HttpMessageDecoder

commit c511ff9872f23d7674d0e8bfc8dc58be76623015
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 30 02:03:01 2009 +0000

    Fixed issue: NETTY-134 HttpChunkAggregator should not wait for content when the response status code implies empty content.
    * Added HttpChunkAggregator.isContentAlwaysEmpty() and implemented it with default behavior (i.e. return true when status code is < 200, 204, 205, or 304)

commit a52ce24f68a12d111888b49bcebbcfebf17d9633
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 27 16:28:55 2009 +0000

    Added the second chapter to the master

commit 5960fa30a9ea20874260791dd2855c605922c790
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 27 16:00:57 2009 +0000

    Wrote the first section of the architecture chapter

commit 9e25ac599a0ee4887655093109aa5ce5233a6c30
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 27 10:49:28 2009 +0000

    started to write the second chapter finally

commit f736fff68769138236136752410e6b9bd1e3c15f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 27 09:24:28 2009 +0000

    Better null check

commit 0aa58036320e4b0072b8ba1465a43ed9daed4285
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Mar 22 15:10:13 2009 +0000

    0.9 sec -> 1.0 sec

commit acf7a9d46f7b4b45c7ffc9440ea5e67e0966a43c
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Mar 22 15:09:40 2009 +0000

    Made sure the sleeping Runnable in ImmediateExecutorTest sleeps more than 1 sec

commit cceab617b007aad3c6d2dc88b61c0b8fe9f7f20d
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sat Mar 21 19:09:41 2009 +0000

commit eb80f86204b4c4723c78fe1fb9455de98fb6ca54
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Sat Mar 21 19:07:55 2009 +0000

commit b3f9f91f6a2026df2c937b0815b2abb24656f409
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Fri Mar 20 18:04:42 2009 +0000

    Fix doc

commit 66f645cd55ef17587c47490434dada8b4d7dab36
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Fri Mar 20 17:52:43 2009 +0000

    Fix doc

commit eb4e6bd5567385cfb1c63386a1ac460b6a9b6031
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Thu Mar 19 22:59:02 2009 +0000

    Last but not least coding conventions

commit 8db746d3fd7dd483e28757c08b127563ba4fc9b9
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Thu Mar 19 22:17:51 2009 +0000

    small optimization on channelPC creation

commit cb6269ca4c6867dae667ba6649c6d67ee4c8d00f
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Thu Mar 19 14:33:27 2009 +0000

    Fix according to standard in Netty Coding

commit 4d61f6bda633eabf24accab08bfb5636dbed2c9e
Author: Frédéric Brégier <fredbregier@free.fr>
Date:   Wed Mar 18 18:48:37 2009 +0000

    TrafficShaping v1

commit f777482a9768388698452851fe2f347cbef69aec
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 18 06:53:04 2009 +0000

    Fixed a problem where DefaultChannelGroup.write() doesn't recognize ChannelBuffers

commit ac198791e9222188b96cfefe0248085fbefd5778
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 17 22:17:30 2009 +0000

    Forgot to check in the dtd

commit 4cad3dc940de52e9ad5459d3ba943221b3566cd0
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 17 11:32:11 2009 +0000

    * Added a section about shutting down a netty application
    * Revised a section about fragmentation

commit ff9d27ddf8a813e70f3a61374a3679e1659cb33b
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 17 09:04:00 2009 +0000

    Updating user guide

commit 7565be76e749489595bf9a448b4ca09bc38536ae
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 16 09:18:14 2009 +0000

    Now supports UDP :)

commit 1afcc06ba091e4a41aa8b67e77169a7ec4c25996
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 16 08:09:42 2009 +0000

    [maven-release-plugin] prepare for next development iteration

commit 7115cf29352dcebfd3bec6e9d8cf2f73107b36c9
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 16 08:07:47 2009 +0000

    [maven-release-plugin] prepare release netty-3.1.0.BETA1

commit a5ab271dc7eece7cf9e9eaa00003a54fbfc46177
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 16 07:52:19 2009 +0000

    Deprecated CompatibleObjectDecoder

commit 279bd7f0b99a6241373e23cff439c8c66900e64e
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 16 05:38:13 2009 +0000

    Implemented ReplayingDecoderBuffer.toString() properly

commit 7a1963249df455fb075c80b824e1a0120155660b
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 16 05:00:29 2009 +0000

    Ported high-low watermark to xnio

commit 4fa8e3adfc1e2f7a8260be0d7966de44c5234a5e
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 16 04:48:36 2009 +0000

    Reduced code duplication of AbstractXnioChannelHandler

commit 880241366bd48a0032c31c9a2dd1286e2f7f4421
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 16 04:38:43 2009 +0000

    Removed unnecessary System.out.println

commit 9b0bf6814816897512e8de39af0fb6089dcae390
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 16 04:37:13 2009 +0000

    Made sure DefaultCookie doesn't accept reserved names

commit 566f72abe65d56f80e408a303793896d7db3765d
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 16 04:29:47 2009 +0000

    A little bit more explanation on the usage of HttpChunkAggregator

commit 6d4adea536502eb1c7db83680e84597f79356fa2
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 16 04:17:53 2009 +0000

    Fixed incorrect parameter name

commit c4269c1697262d6cf769cee0216543891a2db783
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 16 03:59:31 2009 +0000

    Changed ImmediateExecutorTest to use nanoTime

commit d020ffe44c86c4ca9ecd5630ee7d1ef15659f9e7
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Mar 15 15:39:41 2009 +0000

    CookieDateFormat doesn't always use en_US locale

commit 5f676a83afde69be89d9ec5b4774e3c736052ad3
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Mar 14 16:45:20 2009 +0000

    Added a build option 'attach-distribution'

commit a074c0a95da608355a83fd015327fdd3320fb799
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Mar 14 13:48:01 2009 +0000

    * Optimized QueryStringDecoder
    * Moved DEFAULT_CHARSET to HttpCodecUtil

commit 701d8a8aaa08a20e1619e5766b4e3d78ee0c74d8
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Mar 14 13:35:10 2009 +0000

    Made sure the encoded cookie conforms to the RFC

commit eaca45eb8af135b6cfb823a1ec3092c4e02965e1
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Mar 14 13:13:28 2009 +0000

    * Reimplemented CookieDecoder to understand quoted-strings

commit 3e2bf2e1635523ada4de0412564e952238740cf4
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 17:09:31 2009 +0000

    A little bit more tolerance

commit f78ac1f29aa738b14ed547ec168ba8c097bf7c24
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 17:08:25 2009 +0000

    A little bit more tolerance

commit e4c283fb89e31ba944cfcaa79b252fff1fb69b95
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 16:43:39 2009 +0000

    Avoid timing errors

commit 9e0e310ffe7b3aff8e8e154de47afe090ad0ee9c
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 16:33:49 2009 +0000

    * Improved CookieDecoder to be more tolerant
    * Added a test case for comma delimited cookies

commit 611364e47c8b05145fa4a1697b36d0530adb4e9f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 16:28:20 2009 +0000

    Suppressed unnecessary autoboxing

commit dc61906620068c5b49f417b5beba5ce35c2386a9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 15:53:52 2009 +0000

    Fixed test failures

commit bbf32cae515ec8845f4fa24f467e11194f638d08
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 15:49:35 2009 +0000

    * Prettier cookie attribute names
    * Removed an unused method

commit 3e6f6384491e7513ded63064424b83724e27ddef
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 15:48:23 2009 +0000

    Removed the unnecessary last semicolon

commit efd5af9313b9638af3aa4e1d8cc0bc56d3afae32
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 15:46:41 2009 +0000

    Brought back the encode() method of CookieEncoder

commit b6cfc2412766c634941b6f1166f0929efdf703eb
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 15:29:54 2009 +0000

    Handles client-side cookie much better now

commit 510a270cb4b7366b0835aaf669c096e2f88f95f9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 15:17:11 2009 +0000

    CookieEncoder should not use a Map but use a Set because cookie name might be duplicate

commit e3f3e8ce5a9f482e425e9cea56e60744d4922385
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 15:15:24 2009 +0000

    Cookies can have the same name but different paths or domains - updated DefaultCookie.equals and compareTo

commit 7677aafc1e00a4718a84a983ba576ea1a4baa187
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 15:06:13 2009 +0000

    * CookieDecoder is more tolerant to quoted values
    * CookieDecoder now understands the first $Version attribute

commit d1bafbc65fb5fc725288317ca8b030fe9a4fbe99
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 14:45:43 2009 +0000

    * Fixed a problem where 'Expires' cookie attribute is misinterpreted
    * CookieEncoder now uses Cookie.getVersion() to determine the cookie version instead of constructor parameter

commit 32ddc4541d95740661f0a6b4e96d94d1fa1c5cb4
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 13:57:24 2009 +0000

    Updated author tags

commit 22eac299d55dac2dfb38c21d97fe04eb79c6e2de
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 13:55:43 2009 +0000

    Added missing svn properties

commit f04003abbe60d863a7a02212d722283078104801
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 13:53:53 2009 +0000

    CookieEncoder / CookieDecoder should not urlencode/urldecode attributes except for the value

commit 0da3fcbe51a07c9aba516f0e69fe733cfaabdff6
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 12:59:29 2009 +0000

    Fixed a bug where CookieEncoder generates a cookie with 'version=2'

commit 199088a7c5e88105fb9016d713921ac74e9cbdea
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 12:55:38 2009 +0000

    Two FIXMEs

commit a26d1e4392777f38d1fe7e84c514469b97e4b70a
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 12:48:23 2009 +0000

    Fixed a problem where CookieDecoder doesn't strip surrounding quotes for certain values

commit 1912bfc81dfee9e274f03b7a966811c212ad9d5a
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 12:42:03 2009 +0000

    Fixed test failures

commit ede831664207868e4a47907e2a65a1ba0ad7c60a
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 12:39:22 2009 +0000

    Fixed a problem where the value of commentURL and port is not double-quoted

commit 9c8106948e9c48b28f64bc50e22e405d09f574c1
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 12:35:30 2009 +0000

    Made CookieHeaderNames package private

commit b796a1d97bdb7483dfc62143e7fca080c39cee3b
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 12:32:47 2009 +0000

    * Renamed Cookie.portList to Cookie.ports and its type from int[] to Set<Integer>
    * Renamed CookieHeaderNames.PORTLIST to CookieHeaderNames.PORT

commit b8f03d60e4bbb73ae5e4e9d33863e3d69f25cd7b
Author: Andy Taylor <ataylor@redhat.com>
Date:   Fri Mar 13 11:58:29 2009 +0000

    added cookie v1 and v2 decoding support

commit df3ac447ff3b8b4ad67fb79e332185e5ac5a5358
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 13 11:51:19 2009 +0000

    * Replaced Cookie.setPortList(int[]) with Cookie.setPortList(int...)
    * Improved DefaultCooke.setPortList() integrity check
    * DefaultCookie.getPortList() returns a copy

commit 395d57b6ebf560f869f0037723ca95037511d64b
Author: Andy Taylor <ataylor@redhat.com>
Date:   Fri Mar 13 10:12:51 2009 +0000

    added cookie v1 and v2 encoding support

commit 83301cd183be06e77af813f1ef132530a15646cc
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 12 14:53:04 2009 +0000

    Added a link to the Java tutorial which inspired the QOTM example

commit 8eb3e57add8f6070ba4a0d0b66fb3ae7af216a18
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 12 14:51:29 2009 +0000

    A little bit more Javadoc

commit dbbd7ed3f500dee85e6abd650f8030bdebe3f8be
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 12 14:48:48 2009 +0000

    * Implemented old blocking I/O based UDP transport - supports multicast, too
    * Added Quote of the Moment example to show how to use the UDP transport

commit 5754d9d87fd4379b5b75855df058dbaabe10dbae
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 12 13:17:30 2009 +0000

    * Added receiveBufferSizePredictor property to DatagramChannelConfig
    * The default predictor for DatagramChannel is FixedReceiveSizePredictor(768) which should work for most cases

commit d33e38e6265e3a657879c09dc2768287b6e145d2
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 12 12:56:41 2009 +0000

    Added DefaultDatagramChannelConfig

commit 1931ba6cebe369bb35f94d8461683802f53076f1
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 12 12:32:16 2009 +0000

    Switched from tar.gz to tar.bz2

commit 469258a8629d9e846a95d1e50017f1f6e55b830a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 12 12:22:01 2009 +0000

    Added datagram channel interfaces

commit 7023c0599c5a550c5591d5a440beb1964f221d52
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 12 09:21:45 2009 +0000

    A small rant

commit 731c0d94f36e96d5b3d3e03c0a3eb197ecdb4457
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 12 08:30:23 2009 +0000

    Local transport doesn't need to support setInterestOps

commit 6c5796934891a9a6de96d6adf835ed61e278ad90
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 12 07:27:51 2009 +0000

    Updated find bugs filter to ignore more false positives

commit c58568e0948615d9b137ea92c5cb84b33745c38b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 12 07:27:19 2009 +0000

    cleanup

commit a91f3e4acf3e18c4f10d989d47398b3baedc6dbc
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 12 07:17:25 2009 +0000

    Tiny code cleanup

commit 5f1dd20d74cd33765b6e9cd69e73314fb348a097
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 12 07:01:20 2009 +0000

    * Made sure ChannelFutures are notified when no lock is acquired in HttpTunnelingChannelHandler
    * Reduced the visibility of some methods in HttpTunnelingChannelHandler

commit 937ee06d9d87880367d5e532b4af5ceb99561d35
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 12 06:42:39 2009 +0000

    Simplified stream I/O in HttpTunnelingServlet using dynamic channel buffer

commit 35b08df70a0b7106e44a568716a141697468240d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 12 06:40:36 2009 +0000

    * ChannelBuffer.writeBytes(InputStream, ...) must return an integer
    * Fixed a problem where DynamicChannelBuffer doesn't expand itself for some writeBytes() calls

commit 1895864d387894802699c4b0ba2c29977941b125
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 12 06:24:42 2009 +0000

    Code style

commit 2627751a444bb2948fd141e832696ed5b84420b5
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 12 06:24:26 2009 +0000

    Anonymous class to nested class

commit 3a65234df5fb20ba0007cbf040078a5333bfa099
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 12 06:20:02 2009 +0000

    Simplified HttpTunnelAddress.compareTo

commit bd184cc665b32b06005d7a917155247c90d1ed5a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 12 00:42:41 2009 +0000

    Renamed TestOptions to TestUtil

commit ebdfec8ec0863071e3d9b347b520a3e471380183
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 12 00:14:17 2009 +0000

    Reduced the number of InetAddress.getLocalHost() calls in test cases

commit 0edc9abb0fa59f20312fae8ea4af246237fa97a9
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 11 11:22:06 2009 +0000

    Made sure MemoryAwareThreadPoolExecutor and ExecutionHandler get along well with other traffic controlling handlers

commit d2c4a1143efd6d61785d648b40c43f5a8963fd39
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 11 10:53:52 2009 +0000

    Added ChannelHandlerContext.get/setAttachment() - NETTY-134

commit f4dd29c70f3ae7945d88c3e8c189214ce9f96038
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 11 10:45:55 2009 +0000

    Fixed code style in DefaultChannelPipeline

commit 368c34ace942e498be0b3dd371cdf82b1e04ff26
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 11 09:27:14 2009 +0000

    Renamed DefaultReceiveBufferSizePredictor to AdaptiveReceiveBufferSizePredictor
    Added FixedReceiveBufferSizePredictor

commit 521f220aaaa285d4e7802482b406cad52b73bde4
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 10 21:34:05 2009 +0000

    * Excluded non-unit test
    * Changed the forkMode to never

commit e523b8ec0f2f07d8dcd9874b915fdeb0f914ff91
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 10 08:57:02 2009 +0000

    Added default constructors with sensible default values

commit 4e989e20d4c12ce08b00aca4610e72ac3cf84cbe
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 10 08:42:19 2009 +0000

    Added HttpChunkAggregator

commit 23a73f20d697a435448cdec375d5724fa589ad5a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 10 08:37:45 2009 +0000

    Fixed a bug where HttpMessage's content becomes an EMPTY_BUFFER after messageReceive event is already fired to process chunked encoding

commit 445be963ae861e5e2474422ff54db4272fb39a3e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 10 07:57:36 2009 +0000

    Oops.  Silly mistake when creating a new string builder

commit 3235c154a31ad7e682a48ad575f6c14c8aa38689
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 10 07:56:53 2009 +0000

    Implemented hashCode, compareTo, equals, and toString for HttpResponseStatus

commit 94544193bd8f426e3d970689409d1ea921cd6d51
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 10 07:54:02 2009 +0000

    Better formatting

commit a5ebbfb1114d648e4ce9a199f795618fe9d9bf99
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 10 07:53:15 2009 +0000

    * all limit parameters are mandatory to create HTTP decoders now for better security
    * chunks are not merged anymore for better security
    * modified HTTP client example to handle HTTP chunks

commit 4a72aafd567489304824b89d8ab3e0765b76a4d8
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 10 07:20:27 2009 +0000

    Resolved issue: NETTY-133 Limit the length of HTTP header lines.
    * Added maxHeaderSize option
    * Added maxInitialLineLength option
    * Overall HTTP code cleanup

commit c9b3122b6ca1e7f487c0f79df24f4bac0b9f6817
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 9 21:05:49 2009 +0000

    More strict validation on HTTP headers to defend against HTTP response splitting atack

commit ebe5ad3ef24d7ac355f4826930e68647d34f889e
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 9 19:16:59 2009 +0000

    JUnit should ignore TestOptions

commit ddd756b276c257f7e74028b19b30a7b1b8ad95fd
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 9 19:07:11 2009 +0000

    Better option handling

commit e6cc8fb5eb2479b4b79ed2fa8d8bddae5faaa95f
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 9 19:05:59 2009 +0000

    Printed a warning message when timing tests are disabled

commit a5a7181615207c20b546977a24eeb4819af1b689
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 9 19:04:35 2009 +0000

    Renamed TimingTestUtil to TestOptions

commit 0a72ffeacd74906bc9e8070399af62db8f419d87
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 9 19:03:48 2009 +0000

    Added an option to exclude timing tests

commit 832ed0c19839472364f84761055b1351d340ac64
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 9 08:50:24 2009 +0000

    Fixed NETTY-130 (Chunked encoding emulation for a large non-chunked HTTP request)
    * Replaced mergeChunks option with maxChunkSize
    * if maxChunkSize is greater than 0 and any content or chunk larger than maxChunkSize is received, it's split into multiple chunks as if a chunked request is received.
    * Added unfold option to FrameDecoder and ReplayingDecoder

commit 7985fa94a959311783824aa746f739e177352255
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Mar 9 08:18:52 2009 +0000

    Fixed NPE in the HTTP example

commit f3149fafc1de2680c013fa48b5a064f8e0b51dfd
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Mar 6 06:52:26 2009 +0000

    More explanation on event ordering of OrderedMemoryAwareThreadPool

commit 019f5f029218c09e39d5d5916683daa8a952389f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Mar 5 15:33:14 2009 +0000

    Fixed a problem where *SocketServerBootstrapTest fails when an O/S doesn't allow modifying the buffer size.

commit 666c943b66ce8d9723ef0a37c50a79efc41f75c1
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 14:30:47 2009 +0000

    * Added ChannelFutureListener.CLOSE_ON_FAILURE
    * Reduced code duplication
    * Fixed warnings by FindBugs

commit 07c720ad2c4dbe4a3d0e744cb437feaccc516cc0
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 14:27:20 2009 +0000

    Typo

commit dfd9669797d859cc8a2e5791a89d1c1533fefc69
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 14:17:35 2009 +0000

    Code cleanup

commit 1781e0e1dd271e7935a621e6a037551a51d083c5
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 14:15:59 2009 +0000

    Fixed find bugs warnings

commit 6ce3eebc55cb36b87dd584b42956470f8daeefcf
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 14:14:06 2009 +0000

    Fixed find bugs warnings

commit 7044f9a586f67c28810d69f130a8056f0a4c0052
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 14:13:39 2009 +0000

    Fixed find bugs warnings

commit f93c240a7c30da4e5cca76832c0571d654076db0
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 14:13:02 2009 +0000

    Fixed find bugs warnings

commit 392900e4b6fa8898b9f05a11b19a7e578f4f3c17
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 14:11:54 2009 +0000

    More cleanup

commit b9f604ca1d9ee8afb25126a31f4855074710e96b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 14:11:08 2009 +0000

    Code cleanup

commit fbfebb1fd999e7a8499cc47b1a9b22a706e33de1
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 14:08:31 2009 +0000

    Code cleanup

commit 4979cb6a219abc529850c1b451c0b0e221574b1d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 13:50:19 2009 +0000

    A little bit of code clean up

commit b6761758824bb618b6354dba89e068b6c821bf5f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 13:45:40 2009 +0000

    Actually it was being taken care of.. reverted back

commit 0847720e41011bc4b351366c8d0c313dd30ca391
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 13:44:58 2009 +0000

    Took care of the case where a message implements both HttpMessage and HttpChunk

commit 35ac9ef38e0ebf8c9abb718e66d0206a1c943260
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 13:43:56 2009 +0000

    Fixed a bug: NETTY-129 CompositeChannelBuffer.getBytes(offset, GatheringByteChannel, length) doesn't respect offset and length parameter

commit cd3859b002aa743d0094e1d7b7fa682ee3084c73
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 13:04:28 2009 +0000

    proper handling of cancelled keys

commit 4d95e233bc3b48b70fdd8e473200791e1f10b2b8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 10:54:55 2009 +0000

    * Removed an unnecessary override in MemoryAwareThreadPoolExecutor
    * Updated Find Bugs filter

commit f04ca5b970ebb9dba411a033a168bb59d0f912ae
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 10:54:00 2009 +0000

    Shut eclipse compiler up

commit 39ec19078c74974ea3775f9a041da64337d58f33
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 10:35:55 2009 +0000

    Code clean up

commit bca4c3abb2df407aed1392a639a076f055965d80
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 10:33:09 2009 +0000

    Updated Find Bugs configuration

commit 3a8b92929ef558929b19581f81f4f4ec15545532
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 10:26:34 2009 +0000

    Reduced too broad catch block

commit 9e623c9cb121353e3624042afde411b321e10999
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 10:24:27 2009 +0000

    Fixed inconsistent synchronization

commit 7d00231a60e91b988ecea2a1d53a1d04c60f19c1
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 10:24:13 2009 +0000

    Fixed inconsistent synchronization

commit 39cc4bc3fb0b8ea78067028d377dad641e9adb38
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Mar 4 10:15:14 2009 +0000

    Better exception handling

commit 2dc5463e93600b4123d4707a7e4674cc98748216
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Mar 3 09:54:34 2009 +0000

    Fixed issue: NETTY-128 Unable to run netty client with a Security Manager

commit 9bbce4a223fd0496e65abee46471b6dfbbf19ada
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 11:28:21 2009 +0000

    Fixed a bug where a dynamic buffer's readerIndex goes out of sync on expansion

commit fabe3a36c9e6c364849a08b4e5f95f6d289d452c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 11:12:10 2009 +0000

    [maven-release-plugin] prepare for next development iteration

commit 2665c5cea54ad33e49be869c3e6b410f7e89b943
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 11:11:54 2009 +0000

    [maven-release-plugin] prepare release netty-3.1.0.ALPHA4

commit 8d75e7e323ac555badcc55c1d64f768620a06e11
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 11:08:54 2009 +0000

    Added FindBugs preferences

commit 720b6cdf8fc4ce45503bbc3dcbda2dec62733cba
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 11:07:04 2009 +0000

    Added dav: prefix to the distribution url

commit 86bc09159d344d138ff28b5374e7e40a4c0d7dc5
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 11:02:43 2009 +0000

    Fixed APIviz errors

commit 2321499c8cc2aa28a31b065717bd61122ce11629
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 10:51:03 2009 +0000

    There was no need to introduce a thread local to avoid event recursion

commit 903c530ae074cfb8d261c6fb01c2c568c8b7c8f2
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 10:32:33 2009 +0000

    Fixed a problem where NioWorker.writeNow() doesn't work when it's called recursively
    * Added a boolean thread local variable to check if writeNow() has been called by itself

commit 1ff58978a287bf28c5eef96cac1d21a638056c16
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 09:28:37 2009 +0000

    Fixed a bug where DefaultChannelFuture.isSuccess() returns true even if the future is not done yet

commit ae7fb55d62c42b7d9ec9d987d1414ba2aed19385
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 09:14:33 2009 +0000

    Removed printlns

commit 284fc4db44240c8a63f35bafcfcb2cd8e1b869aa
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 09:13:26 2009 +0000

    Removed println

commit 5fdce1990295b3420b5d70f655cefbb62df4a1d1
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 09:10:59 2009 +0000

    Reverted the unnecessary changes related with shutting FindBug up

commit 6200d39bdd0023922204d9da70caf728510fc67d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 09:08:34 2009 +0000

    Reverted the unnecessary changes related with shutting FindBug up

commit 0132b000912fba6865b0489b0d7ad1ccdd707a2d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 09:05:01 2009 +0000

    Fixed a couple findbugs warnings

commit a8d51cfad8c8428521a9822248606114a9e63d4d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 09:02:47 2009 +0000

    * Forgot to check in the http example code which was affected by the recent refactoring on Cookies
    * Removed a FIXME in LocalTransportRegister - it's just an example.

commit 5e64bb66e88c4e6ce28444f38da1c9ce254bd6b5
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 08:44:58 2009 +0000

    * Fixed a problem where CookieEncoder trims the value (it should not)
    * Made sure the cookie values follow the URI encoding

commit 9550c0759d8efae55ff9aa73a1bef4500b5ee3aa
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 08:35:38 2009 +0000

    Strict cookie name validation

commit b71d2d3d7f90712046c0aad95137a1b7f4a3955e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 08:06:07 2009 +0000

    Updated fixmes for ataylor regarding cookie encoding/decoding

commit b8bc78a7d089a27d30af68aef4efd4d2eb2a2308
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 07:59:37 2009 +0000

    * Renamed HttpCookie to Cookie
    * Split Cookie into an interface and its implementation (DefaultCookie)
    * Renamed HttpCookieEncoder/Decoder to CookieEncoderDecoder
    * Added all optional fields to Cookie
    * Made Cookie.value mutable
    * Revised DefaultCookie.toString

commit 29b0af4f07e8a266262a135a8979fcffdb248412
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 06:34:07 2009 +0000

    * Fixed a problem where query parameter components are not correctly encoded / decoded
    * Changed the default charset of the query parameters to UTF-8
    * Allowed a user to specify the charset of QueryStringEncoder/Decoder

commit 63cb4a023f0613d30425af7b428eb3a07facdc59
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 01:38:29 2009 +0000

    Implemented AbstractXnioChannels.handleWritable() properly (needs cleanup and optimization though)

commit 49c0f334611ab2c72f7f10e897ba3d1794076c1e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 26 01:29:11 2009 +0000

    Improved AbstractXnioChannelHandler to use ReceiveBufferSizePredictor

commit 23b13eeafec0f3c74e83bdff6e7570f3f1283460
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 25 15:19:54 2009 +0000

    More interfaces for the XNIO transport

commit d2274f75daa9c45acb359a831f08b64147bec55d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 25 15:11:26 2009 +0000

    Introduced more interfaces to the XNIO transport

commit 13c68c76432de168e892bcf18a3c2713ebbc4e0b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 25 14:53:31 2009 +0000

    * Made ChannelConfig.setOption() public

commit 988fff225f6f925bbbcedc42f4254d2468dcae57
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 25 14:47:27 2009 +0000

    Better exception handling on a connection attempt

commit 94e8f31bfad682c96b873862515995efada4f51d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 25 10:43:03 2009 +0000

    Added more todo for the xnio transport

commit fe220d42ec33605cd57812801e066ca5337d412f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 25 10:40:26 2009 +0000

commit 214a26b529e99fdd87193248156e097250aa0321
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 25 10:34:17 2009 +0000

    Fixed a problem where XNIO transport doesn't work for the serverside

commit c3bd292f73f009b7f9a07e34fe1a7a137ffec941
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 25 10:21:35 2009 +0000

    Fixed a problem where XnioChannelRegistry fails to find a server channel if IPv6 local address is specified

commit 9043fdb62293cbaf07522d2f7edda7d1e44a9a38
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 25 10:10:03 2009 +0000

    Related issue: NETTY-75 XNIO transport
    * The preliminary initial implementation of the XNIO transport

commit 0c27f015bf3455ffdbc3cfa252a5e3f8192a5c5d
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 24 04:58:19 2009 +0000

    * Better exception handling on bind failure in ServerBootstrap
    * Fixed a problem where UnfailingChannelFuture doesn't tell what exception cause the IllegalStateException

commit ae22b0aaa104ca6de6ac4ebac479ad9249dc1f42
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 21 19:34:22 2009 +0000

    Fixed failing tests

commit 547af08bc65b24315867fcd8176bbe14dd313176
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 21 19:32:32 2009 +0000

    * Made sure ServerBootstrap accepts only ServerChannelFactory
    * Validation first, state check later

commit f6ee08090aa81ffb05b057b44cbee8c6bdfc71d5
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 21 19:29:38 2009 +0000

    * Added ServerChannelFactory
    * All ChannelFactories that creates a ServerChannel now implements ServerChannelFactory

commit cd341609fa398392a48d3adbbb7247a822e2ccc9
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 21 19:24:49 2009 +0000

    * Renamed Local*ChannelFactory to DefaultLocal*ChannelFactory
    * Local*ChannelFactories are now interfaces

commit b56bdd89ddea1c31feca933df3105dffb9e094b7
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 21 19:21:12 2009 +0000

    Marked some classes as final in the http tunneling socket transport

commit 3d7214ba613f0755d57b5577bcda326a6356a692
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 21 19:15:30 2009 +0000

    * Renamed LocalServerChannel to DefaultLocalServerChannel
    * Added LocalServerChannel interface
    * Covariant return types for Local*ChannelFactory

commit 0e443c3a02ee7fbf2d733392cd93a23c3faa78a0
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 21 19:12:03 2009 +0000

    Added ThreadLocalBoolean and replaced unnecessary anonymous classes

commit cd6fce50bce396501cbd3de452ac6bd3855e5b07
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 21 19:08:08 2009 +0000

    * Extracted common code from various ChannelConfig implementations to DefaultChannelConfig and DefaultServerChannelConfig

commit fdd74f252b0cd09bd98c4f31bae3a30c1aaeb11b
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 21 18:41:21 2009 +0000

    * Renamed AbstractLocalChannel to DefaultLocalChannel
    * Removed unnecessary subclasses of DefaultLocalChannel
    * Added LocalChannel interface

commit e1b58065601f8960878a0e904feb11615930eb95
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 21 18:34:27 2009 +0000

    * Removed AbstractServerChannel.getLocalAddress() to enforce the use of covariant return types in its subclasses
    * Renamed LocalChannel to AbstractLocalChannel

commit 2ab02caa6758dbcf3d797b464ae1528a6f627dc7
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 21 09:32:29 2009 +0000

    Implemented two more methods in AbstractServerChannel

commit 874b04329720fbc259d5403a100f48d477f7992f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 20 13:07:03 2009 +0000

    Added more TODOs

commit 8872294728225a253a73b9a7f3ff468688148246
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 20 12:57:51 2009 +0000

    FIXME

commit 95b6558068e987f9415af682f7c8e0ec73229cda
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 20 12:56:44 2009 +0000

    Fixed author tags

commit 10cf64acd5b3bf3e5991c577d5a047d406420ebc
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 20 12:52:46 2009 +0000

    Added missing SVN properties

commit d550109796b6d6ab0ed1880a4a314f045c1712bb
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 20 12:49:54 2009 +0000

    Implemented Comparable, hashCode, equals, and toString for HttpCookie

commit df05ba3733faca5bb08e3facbbb82b9733b71c93
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 20 12:41:59 2009 +0000

    * Made CaseIgnoringComparator a singleton
    * Changed HttpCookieDecoder to return a Map instead of a Set
    * Optimized imports

commit fea082e68914a686b6f33322b66af3bfb16a1100
Author: Andy Taylor <ataylor@redhat.com>
Date:   Tue Feb 17 17:13:13 2009 +0000

    fixed cookie support

commit e424c5f87d0d082ad47e13f22d0375d038f8a658
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 17 10:22:53 2009 +0000

    * Added XNIO dependency (optional)
    * Updated license files for XNIO

commit aa36f446f5b254e0a52fd0c74e04fa67218ff530
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 17 10:07:25 2009 +0000

    Forgot to commit

commit 1f9c8256d8f78fb02981c548179de8f9b4abb0b0
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 17 09:50:10 2009 +0000

    HttpMessageEncoder.getCookieHeaderName() must be protected

commit 6671cd34fa22c17af8204dfdb32eaa79c341b5f7
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 17 09:47:28 2009 +0000

    Indentation
    Made HttpTunnelingSocketChannelConfig invisible to a user

commit 3922fb8a442f5d530d1ca31c6d140f0b58b890c4
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 17 09:45:32 2009 +0000

    HttpTunnelClientSocket -> HttpTunnelingClientSocket
    HttpTunnelSocket -> HttpTunnelingSocket

commit 5699f2e18e5a08273998e7b9bc82c3fd39959083
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 17 07:18:35 2009 +0000

    Removed an empty package

commit 4bd06dfdb12c20351930e2f8ee8b348f66639143
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 17 07:17:03 2009 +0000

    Fixed indentation

commit 5281ef6aa77c30c3e1e5a507fe347776230e2150
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 17 07:14:23 2009 +0000

    Added HttpTunnelAddress.toString()

commit a77664bf8f760b7c550dac14fdfe72b8f597520e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 17 07:13:47 2009 +0000

    * Fixed compiler warnings
    * HttpTunnelAddress should have proper hashCode, equals, and compareTo

commit 5eb3a748c2c6000102f80629cf9267600c2d8599
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 17 07:09:18 2009 +0000

    Fixed compiler warnings
    Renamed reConnect to reconnect

commit b174d2f2e03b7ab5d744e08d42d967a70e96ce08
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 16 14:32:40 2009 +0000

    Padding for ID string

commit c05f70bdcfb5324c96257deb58ecece049f77509
Author: Andy Taylor <ataylor@redhat.com>
Date:   Mon Feb 16 13:27:27 2009 +0000

    renamed servlets

commit e977bbf9feca737e6ce3c9d8a7c48762767d63c0
Author: Andy Taylor <ataylor@redhat.com>
Date:   Mon Feb 16 13:27:06 2009 +0000

    renamed servlets

commit 121c88d7e21f6b33187515fc52ff4042688ba29f
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 16 12:02:06 2009 +0000

    * Removed TimeBasedUuidGenerator
    * Fixed a bug where DefaultChannelGroup doesn't recognize the new Integer ID

commit 149d97d0137f55ea9c14e3822e01f8796a34ffa6
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 16 11:59:33 2009 +0000

    * Fixed issue: NETTY-125 (Backward incompatible) Use an integer as a Channel ID instead of UUID
    * More concise Channel.toString() and ChannelEvent.toString() implementations

commit 9e60db4078aba484860ffaee1ba00e59ea36211f
Author: Andy Taylor <ataylor@redhat.com>
Date:   Mon Feb 16 11:40:37 2009 +0000

    added TunnelAddress

commit 2b7427de4fc5435e2cd62cf0baae9b02e6d23f94
Author: Andy Taylor <ataylor@redhat.com>
Date:   Mon Feb 16 10:33:43 2009 +0000

    renamed to HttpTunnel.....

commit 1a96b48026488696ec35055532efb5f658615689
Author: Andy Taylor <ataylor@redhat.com>
Date:   Mon Feb 16 10:21:44 2009 +0000

    added ClientSocketChannelFactory to ServletClientSocketChannelFactory constructor

commit 4f391f5bbc6a80ee48cec046aae0b1ec86e5ed0a
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Feb 15 12:47:12 2009 +0000

    ReplayingDecoder should not throw an IllegalStateException even if a decoder implementation returns null when state transition occurred at least.

commit 7860e999a752529eec0f154b3ba44b5abd89b992
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 13:58:37 2009 +0000

    Updated license information (NETTY-106 Add missing license files to the distribution)

commit 6370d06fb36bd244fa3790714522084c5be9f8c9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 13:28:35 2009 +0000

    Lowered the shared resource explosion detection threshold and changed the log level from warn to debug just in case it's false positive

commit 3d355eb48a93399404c23c7378b1c86cfb15a1ac
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 12:41:46 2009 +0000

    Added misuse detection to MemoryAwareThreadPoolExecutor and HashedWheelTimer, where a user can create too many instances

commit 065218fd10b3b69882f5ac02c6d7216459b00d62
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 11:53:05 2009 +0000

    Forgot to mark one more volatile member transient

commit 06d5f5264ee315e573148cf92daf158fcf13aba7
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 11:51:53 2009 +0000

    LocalChannelREgistry should use ConcurrentHashMap

commit 5f2f072d694275f750d1ee139386cc64a0670f4f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 11:33:22 2009 +0000

    Fixed a couple bugs in IdleStateHandler, caused by blind copy and paste

commit c153fd5bd099ed2490a9914b7379661fb24078b3
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 10:37:10 2009 +0000

    Fixed an infinite recursion in Base64

commit db18337762c54b0753fe6b8585011bef7504be4a
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 10:21:28 2009 +0000

    * Fixed most Find Bugs warnings
    * Added UnreplayableOperationException

commit fb64aa94b519ccc925d397dc23efa2c21054f425
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 09:14:41 2009 +0000

    Fixed a bug found by Find Bugs

commit ae004b5331c5c847c0b102c28587bf14d0af05c0
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 09:11:42 2009 +0000

    Fixed some problems reported by Find Bugs (mostly to shut it up)

commit 7e8a1cd9c221de5f759c594b3bbd67dd7755af6d
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 08:55:06 2009 +0000

    Code cleanup

commit d9c0befe2422eb77c476a2c4b53a99c42ac13844
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 08:17:35 2009 +0000

    Fixed equality comparison methods of DefaultChannelGroup

commit b22a578538598d7dba332295b7a44eae9322f7a3
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 07:52:38 2009 +0000

    Prettier DefaultChannelGroup.toString()

commit 1896c902073388fd3f4e779e308e191d7a070101
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 07:51:46 2009 +0000

    * Removed ChannelGroupFactory that causes memory leak
    * Added the default constructor for DefaultChannelGroup

commit e8665ea867faaa1bac224f32c2965c22e5996f13
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 06:53:22 2009 +0000

    Added a convenience constructor to LocalAddress

commit 395fcbbd290145023ac9e6dc62f73c9fc3f99002
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 06:52:04 2009 +0000

    Simplified LocalAddress implementation - no more global reference map that causes memory leak

commit 1b28c126c5870bac052b9bed31c9b1b9d43625b7
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 06:36:30 2009 +0000

    Fixed a problem where DefaultNioSocketChannelConfig allowed incorrect configuration of write buffer watermark values

commit 65048c930f458705bc32d659f05182d4e646d467
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 06:25:29 2009 +0000

    Made DirectChannelBufferFactory's preallocatedBufferCapacity configurable

commit 91d7a329d4362fc65bc78123fb9f1b9b6b4cd7e4
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 06:19:10 2009 +0000

    * Renamed Concurrent*Weak*HashMap to Concurrent*WeakKey*HashMap to avoid confusion
    * Added some FIXMEs related with potential memory leak

commit 8aff5914d9b012ddb7051011a7af1964cada30c1
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 06:05:21 2009 +0000

    Added IdleState-aware ChannelHandler implementations

commit 7b721ef1d45f57ec56f0dcf41d4585d4ed32453f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 04:51:36 2009 +0000

    Prettier LocalAddress.toString()

commit fa8890580eb017f90924f82a2f61a3dacff9de69
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 04:41:01 2009 +0000

    Indentation

commit bf6a7db90ac51762c5c4aa52127b368b02c63f39
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 04:29:56 2009 +0000

    Added more convenience constructors to HashedWheelTimer

commit 789bfd32213c07fd3d1044d0075a614e604794d5
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 04:24:29 2009 +0000

    Changed the type of second unit timeout from long to int

commit 11478edb5b653b136705f5005d52e9277fb95ba7
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Feb 13 04:17:36 2009 +0000

    Fixed NPE

commit b49f8d8353d283afc706dd7ac83053d486b2eb7d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 15:41:58 2009 +0000

    * Renamed the callback methods for Read/WriteTimeoutHandler
    * More convenient exception handling

commit b06e33f5ee73d5d480c52c9f548a83cb8288223b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 15:33:28 2009 +0000

    Changed the default time unit to SECONDS

commit 7f16fa352a516e1a79cf34a261bf355c69af87c2
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 15:31:39 2009 +0000

    Removed unnecessary variable in IdleStateHandler

commit 2c8f6690305b4479e39ebb0411ee40f9c0591588
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 15:29:35 2009 +0000

    Added IdleState.ALL_IDLE - was able to simplify even more

commit cbd2dec0fde996a3991af317d12a372e63d60474
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 15:21:25 2009 +0000

    * Reverted back recent changes
    * Renamed IdlenessHandler to IdleStateHandler
    * Renamed IdlenessEvent to IdleStateEvent
    * Added IdleState enum

commit 2c3e7565fa5f86c42032f2e88e5b28de113f4bb6
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 11:03:10 2009 +0000

    Implemented both idleness event roughly (needs some fix)

commit ed69d8bc1510b987c2901ce028b5122cd7a17914
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 10:51:38 2009 +0000

    Added another missing class

commit eab8623f4aab0d0a22aadf4c9171e350a80f0fb7
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 10:51:06 2009 +0000

    Added the missing class

commit 0e5f798889a5c09df4160612bca8b0b3de76f765
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 10:50:43 2009 +0000

    * Removed the getter methods in IdlenedssEvent and replaced them with subtypes
    ** Added ReaderIdlenessEvent and WriterIdlenessEvent
    * Added protected methods which enables a user to override what to do on idleness / timeout

commit 59b67420bf09d32e321e96b191d902bf82977649
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 07:44:51 2009 +0000

    Prettier output

commit 2ebce4c98715113f942aea77db50d2170845815f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 07:39:20 2009 +0000

    Better keep-alive behavior

commit 431151b8e59458fbc0fef506f682e9c0b0d89b39
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 07:32:53 2009 +0000

    Fixed issue: NETTY-107 - HttpMessageDecoder can not handle the content with no 'Content-Length' header.

commit 2d682dc2a3ecd32a179d4455c1b7a0e675768945
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 07:17:29 2009 +0000

    Fixed NETTY-107 HttpMessageDecoder can not handle the content with no 'Content-Length' header.
    * Added HttpMessage.getContentLength(int defaultValue)
    * Renamed state enum values

commit 5faa7e9ea89e7261f00bcea0fb088f6084c65fca
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 07:09:51 2009 +0000

    Removed unnecessary boxing / unboxing

commit e787378024963afbf7a7021ed9fa9d0d382ff461
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 07:03:35 2009 +0000

    US-ASCII -> ASCII

commit 912c66b9310bc44c900aadbe907e1813524f9cf9
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 07:01:26 2009 +0000

    Forgot to encode the last chunk correctly

commit cf1b915340ca8a5687492ea93276d812cd7d1683
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 06:44:52 2009 +0000

    Improved the HttpServer example to demonstrate chunked encoding support

commit 2a555082bb7c9dd002a8a15fb21698062508234e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 06:37:22 2009 +0000

    Implemented chunked encoding support for the HTTP encoder

commit 602c99c53200a10b76e8a5a93b1e4dbd86f03c09
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 06:27:17 2009 +0000

    Fixed a problem where the last chunk is decoded too early

commit ebe77cef211a76fa8653437bd7a40f3fdb5b0ee4
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 06:26:05 2009 +0000

    Fixed a 'shouldn't reach here' error

commit 5ee6da38927b22df9f058ea990e27bbec596a52e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 06:25:13 2009 +0000

    Fixed a bug where HttpRequest message is decoded twice

commit 2ac8d11a343bbfeade6ff19c4b11800e6c37ab62
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 06:22:06 2009 +0000

    Fixed a problem where DefaultHttpChunk.isLast returns a wrong value

commit 44d56d2c1a002f98939ba73249bc4ae4e5bf4a35
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 06:09:29 2009 +0000

    Added HttpChunk message for users who want to receive the content chunk by chunk

commit b6c992de8b7e9bd77a7c5bc9590ebe382c7c0e54
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 05:49:19 2009 +0000

    More optimistic initial line buffer size

commit a4fe52559b70c111968b70081ac4c93c0ad0e00e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 05:48:25 2009 +0000

    More robust CR/LF handling in chunked encoding

commit 9125ff5616d5bb5c42996f0e4b58b0058d9f303a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 05:41:22 2009 +0000

    Fixed more issues related with chunked encoding

commit fb74832dc8cb350fbd3f375c8a71d48434ae7187
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 05:28:55 2009 +0000

    * Removed the usage of unnecessary state variable
    * Renamed READ_CRLF to READ_END_OF_CHUNK

commit 66423e0c1db1542bb3aab0fa7465d28add7d03e1
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 05:23:39 2009 +0000

    More robust chunk size parser

commit 44498e067ff021e144c87d58417c5803f19f9171
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 05:16:38 2009 +0000

    * Improved the detection of chunked encoding
    * Fixed broken chunk length parser

commit 01b0beab50de912296b70a9090d46527b2cbad31
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 05:14:16 2009 +0000

    Typo

commit 1243baa05b420762870aadfb84d2da623847c53e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 05:10:25 2009 +0000

    More robust HTTP message decoding

commit 9cdc4a959e913b823d59a65368ab1238e5386549
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 05:02:22 2009 +0000

    Better white space handling in HTTP

commit 0198da7b6c394f7377c75e802d1ecd37f45c04c0
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 04:39:17 2009 +0000

    Related issue: NETTY-116 HTTP issues including chunked request / response patch
    * Applied Dave's patch for QueryStringDecoder

commit 32738273e07e56d755334adaf91795f83474a2d1
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 12 04:37:48 2009 +0000

    Related issue: NETTY-116 HTTP issues including chunked request / response patch
    * Applied Dave's patch for HttpMessageDecoder

commit 334ea6f6e63e2694275fa61bbe039f6ae714380b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 09:56:28 2009 +0000

    Now that there are two MessageEvent implementation, there's no point of having Channels.messageEvent() - a user could just create a new instance by calling the respective implementation's constructor

commit 2b5a00e8b8a470c95f92d94d2b5af800ca09ed3f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 09:53:14 2009 +0000

    Removed unused code block

commit 73cb4463104318b0645f039e9279c1343d4ddef1
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 09:52:36 2009 +0000

    Removed the usage of Channels.messageEvent() which is obsolete

commit 2030411759ae3b400efda53e9d3c222d9542262c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 09:47:53 2009 +0000

    Reverted r825 which doesn't make much sense

commit 84aa72a70fd21cf5f5ce45511c691c7ce06d7525
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 09:38:24 2009 +0000

    Made sure all timeout and idle time can be disabled with the non-positive constructor parameters

commit 665db389945f0bdd8816c2360c6644cf7f0af8f1
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 09:32:41 2009 +0000

    Removed unused field

commit a09303785e08ee86fe4f2d256cf9c1a2ab7db4bc
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 09:32:17 2009 +0000

    Removed unnecessary exception triggering

commit 3acbe08eac83453aef5c4fce387cd6709fa22200
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 09:24:28 2009 +0000

    Code clean up

commit 3f009da45380573101f881be03f5733cf07a4833
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 08:48:39 2009 +0000

    Resolved issue: NETTY-124 Clean the constants in HttpHeaders
    * Reorganized HttpHeaders and added a bunch of constants

commit f44d9eced8c26a96c12cb4614e23c14450322c7e
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 06:14:07 2009 +0000

    Added a TODO item

commit 859f9a37a2027ddaffb0e300b1a5571d79662c1f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 06:03:00 2009 +0000

    ChannelEvent implementations don't need to be public - package private is just enough because all events can be fired and created using Channels.

commit 587c0ac27f69b7b4b63a21a04d61bd41683deb71
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 05:59:35 2009 +0000

    Added IdlenessHandler, IdlenessEvent, and DefaultIdlenessEvent

commit 51b33c367809fbdf94ee1a8f6f6df9cb71d6607b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 05:49:39 2009 +0000

    Reverting back the latest change in ChannelState - not a good idea

commit 2ee72abaafaed53b35624f5759638c6ceaec29f5
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 05:45:53 2009 +0000

    Added ChannelState.EXTENDED to support custom channel state like channel idleness

commit 6e4f6b164c2da43a51ab53198c6112413fcd5346
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 05:41:44 2009 +0000

    * Renamed ChannelTimeoutException to TimeoutException
    * Renamed ChannelReadTimeoutException to ReadTimeoutException
    * Renamed ChannelWriteTimeoutException to WriteTimeoutException

commit d966ae57fc0d24494c7a296ad618f322270ba490
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 05:36:37 2009 +0000

    Typo in comments

commit 10a07b054e54bc54c0d0f31154e9e5ca002eb831
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 05:27:36 2009 +0000

    Made inner classes final

commit 8431db04079fec7f91514b4a555fa36019c1d82c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 05:23:40 2009 +0000

    Added a convenience constructor

commit bd0c55caede48dd8e618ed01dd6dfec51d8072dc
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 05:23:05 2009 +0000

    Added a convenience constructor

commit 25bef2d0d27485be1064b8551729256ec9160d59
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 05:22:24 2009 +0000

    Changed the time unit of WriteTimeoutHandler to milliseconds

commit cb46aec1eba765dff6c7bc855c66edcfe21a5c12
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 05:05:20 2009 +0000

    * Proper synchronization and state management for HashedWheelTimer
    * Removed an unnecessary synchronization on a timer instance

commit 4ea1d640c2973a8940956fc1e855afddca831f5c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 11 04:59:45 2009 +0000

    Fixed a bug where ChannelReadTimeoutException and ChannelWriteTimeoutException can be raised after a channel is closed.

commit bb898265b9fc3b0883dd9d4eec90d5c1769a3d90
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 11:29:17 2009 +0000

    Fixed incorrent time unit conversion

commit 6d917ca7ebd0329f0ac8e2f38d18884d4c128079
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 11:04:28 2009 +0000

    Fixed errors in comments

commit bdc37294d92f89553efee9ff3db8dc60f6437754
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 10:58:30 2009 +0000

    System.nanoTime() doesn't seem to work very well with HashedWheelTimer and multi-core system

commit 2b222b4994bfab0eeeb0a08cfac633f2383f5178
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 09:28:12 2009 +0000

    Made sure MessageEvents are fired after both channels are fully connected

commit 03de679b1789d7f3d3b3acde5f23bb5f77133cc5
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 09:13:45 2009 +0000

    Removed unnecessary 'if' condition

commit e7571355834f68275bbf0b5dcc3f5eab6dde1642
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 09:11:09 2009 +0000

    Fixed a problem where a channel is closed when a user tries to write a message when a connection attempt is in progress

commit f7cc2c971dc0a7530c9319d6df24da4d8550a7d9
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 09:06:39 2009 +0000

    Fixed NPE in LocalChannel.closeNow()

commit f513e0d6ae64141fa70c3c97acbf98b3f6bcf6b9
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 08:40:38 2009 +0000

    Added a link to the Servlet API Documentation

commit ab306bb7502eead344cef00c368f8f8cbf7efc62
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 08:34:59 2009 +0000

    Updated Javadoc tags

commit 78cdc91acd5ec3da7c47f1d1f5e4b6ce9be80254
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 08:32:13 2009 +0000

    * Added missing svn properties
    * Updated @author tags

commit ddf8cad09c1f8ab79081d92ef44e83ef6f20cb1d
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 08:19:30 2009 +0000

    * Added LocalAcceptedChannel and LocalClientChannel to distinguish two channel types easily
    * Less visibility

commit 198fbe3e7e163a828e7d11de0f725bc4428cf761
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 08:15:19 2009 +0000

    DefaultWriteCompletionEvent.toString() should not specify the unit of the amount explicitly

commit 7e1dae813fed7d6043787aadd7685484c1f91a44
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 08:11:12 2009 +0000

    Fixed a problem where the local transport does not fire a writeComplete event

commit 78963bef7d1f477b2a2e13e002ce217bc23a1d96
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 08:10:37 2009 +0000

    Typo

commit a698db26c9cffed01ab7024c715813845e99b814
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 08:01:10 2009 +0000

    Reduced the number of isConnected() calls in AbstractChannel.toString()

commit d50322f27fd99d594d58c4025b27a0edb4d6eb44
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 08:00:26 2009 +0000

    Fixed a problem where AbstractChannel.toString() returns dirty cache value

commit 3569e869a95c1157a34d4fd5b68e510cad6ed4c9
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 07:52:13 2009 +0000

    Fixed a bug where LocalChannel.isConnected() returns a wrong value

commit ce7ca53bdf10434767f65fb52733402fe381195d
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 07:46:45 2009 +0000

    Fixed a problem where LocalChannel.getParent() always returns null

commit a0e57b44281e57b9ece0c33112884a80e4b4796d
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 07:43:34 2009 +0000

    Access control

commit 9410fd155e4612149f3e8b50bd77ca73f8325503
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 07:34:49 2009 +0000

    * Improved the local transport to behave more closely to real transports
    * Changed how ChannelFactory is instantiated

commit 5af89d19857f3eb88dd84663ebf06cf3b72959a1
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 05:28:15 2009 +0000

    Removed unused line

commit 233e85f63c087124f0c495b1ccdc56632d2db86c
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 05:26:26 2009 +0000

    Made LocalChannelConfig invisible to users

commit 35730de7cb11f68e5a45cc556d0fda5ea07f0a8e
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 05:26:10 2009 +0000

    Made LocalChannelConfig invisible to users

commit 202b53c13298a0fbd5f407806ef338eb7a39a13e
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 05:23:35 2009 +0000

    * nextEphemeralPort is an integer now (still 4G ports)
    * Used hexadecimal representation
    * Made sure newEphemeralInstance() doesn't fall into an infinite loop (extreme case)

commit 0fc8977bf23d736d4a5c993a902cf79bba2428c0
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 05:07:53 2009 +0000

    Fixed ephemeral port duplication which might be caused by deserialization

commit 73e8954239647aae59bbfc33cfc5729e539d9997
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 05:04:49 2009 +0000

    Proper Java serialization support for LocalAddress

commit a4c491498b96adc7b26507850628a099010b2338
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 05:02:40 2009 +0000

    Made LocalAddress final

commit 632fb01beeeb73cded3a735f03d52f1026040eed
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 05:01:15 2009 +0000

    * Made sure there's only one LocalAddress instance with same id
    * Added ephemeral port to LocalAddress

commit 5e37b18f235ceb7d5986fb676f6502b7de3f7d66
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 04:51:11 2009 +0000

    Fixed Javadoc

commit 16583e398651ae8ab15a2660ee351a60da56f5c3
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 04:50:42 2009 +0000

    * Added ConcurrentWeakHashMap
    * Updated serialVersionUID

commit 8622b885b6eeabbcc560b9c15d2521d6b2eefdc7
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 01:39:42 2009 +0000

    Code cleanup

commit e7aeffe14dd1b743cd59568e79fa1d18e2e7f9a0
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 01:31:50 2009 +0000

    * Merged Andy's Local transport
    * Merged Andy's HTTP tunnel
    * Both needs some tidying up, but seems to work OK

commit 9445fd1b6fc6fb02536adfeb9a76d39833cc4158
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 00:50:41 2009 +0000

    Fixed issue: NETTY-123 couple of errors in ReplayingDecoderBuffer.java
    * Fixed a problem where ReplayingDecoderBuffer.indexOf ignores the specified parameters

commit 0f5d16def8d92852f19be04dbdf28957d0ccf3e3
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 9 00:45:51 2009 +0000

    Improved LoggingHandler to log the hex dump of a ChannelBuffer if necessary

commit 8cab65d1e8fd34606cd89b8ecbec0eaa742f595e
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Feb 8 16:40:05 2009 +0000

    Fixed a warning message when LoggingHAndler is used

commit dd971b5f793ee7c1fe77037da187d5f4ef91a8e9
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Feb 8 16:37:49 2009 +0000

    Prettier string representation of ChannelEvent implementations

commit 52e42889640c417128beca975359d1ce4b9643bf
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Feb 8 16:12:18 2009 +0000

    Prettier string representation of ChannelEvent implementations

commit fff170b71e7054f9457a68745c425f6e84a1b433
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Feb 8 07:04:26 2009 +0000

    Removed unused code from HashedWheelTimer

commit c46be1c7f9facaacbb7916cce4af26b9ccdb1ded
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Feb 8 06:57:40 2009 +0000

    Made sure HashedWheelTimer.newTimeout does not throw an IllegalArgumentException for small delay

commit 188c7f94aa6aca2c8c7cd857b7ee72faa9762516
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Feb 7 12:48:14 2009 +0000

    Fixed a bug where channelClosed event is not propagated in ReadTimeoutHandler

commit 63e586586b250e029c3edcde7584d1eef5a107f8
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 5 10:32:52 2009 +0000

    WriteTimeoutHandler's pipeline coverage is actually "all"

commit 206e3a90815bdc9eada2c4e10dace2618440a1a0
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 5 08:22:21 2009 +0000

    Resolved issue: NETTY-112 LoggingHandler request
    * Added LoggingHandler

commit b36872ae2f2c2f68a52bce9c3bbbfb3789c3ccf1
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 5 07:38:04 2009 +0000

    Added getTimeoutNanos() so that a user can extend the behavior of WriteTimeoutHandler

commit 874fc7db77a4597d391acd7f14142f9bdb03f3ce
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 5 07:07:02 2009 +0000

    Deprecated ChannelConfig.writeTimeoutMillis in favor of WriteTimeoutHandler

commit dde0232e1919bcbe2c1eee1aa3539290875900bc
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 5 06:55:14 2009 +0000

    * Added WriteTimeoutHandler
    * Improved HashWheelTimeout.cancel()

commit c79bbd063f11f99504756a6e391fbffa832a3125
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 5 06:34:17 2009 +0000

    Reduced the amount of the heap allocated for hexdump generation (512KiB -> 2KiB)

commit 8f92cfb80ad0b7eb21f3d034ef54a050d35ce5cf
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 5 05:56:47 2009 +0000

    Optimized event implementation to reduce memory footprint and improve performance somewhat

commit ebcf1b84e04aa1c91a32fd420d5cddce19cf53ca
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 5 05:29:25 2009 +0000

    Documentation on writeComplete event type

commit 0ea4c19c5cca57449ce141d06ce459d9dd33755e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 5 05:20:37 2009 +0000

    * Added WriteCompletionEvent
    * Added SimpleChannelHandler.writeComplete
    * Added SimpleUpstreamChannelHandler.writeComplete

commit eb522dcd56ed72bed95556fba497d4238a782e1c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 5 05:03:34 2009 +0000

    Reverted back recent changes related with TrafficMonitor

commit d93d74677e1fdee4a8b008bd5e40ddba534aa10e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 5 04:57:56 2009 +0000

    Reverting back recent changes related with TrafficMonitor

commit 44ccfa44b08464e4f1b2189ccb1578822517533e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 5 04:47:25 2009 +0000

    * Added more handler methods to TrafficMonitor for more precise monitoring

commit acfa2b1ce0f40c04f105677c7d6b55a9b99d1dac
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 5 04:23:41 2009 +0000

    Fixed compilation errors

commit e365f483bb6bf3eb742484467ca3472294213b42
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 5 03:47:27 2009 +0000

    Added ChannelWriteTimeoutException

commit 29d227e69e6b9c48faadcf18971f11142fc3d84f
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 5 03:46:13 2009 +0000

    Put simplistic channel lifecycle handler method to TrafficMonitor

commit 2625d10e580831777a3443c9f866b57a830b974e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 5 03:16:14 2009 +0000

    Moved org.jboss.netty.handler.timeout to org.jboss.netty.channel.timeout because timeout detection will be implemented as a TrafficMonitor

commit b6ecccb4931df1e5e27bfbc90ff4ce09cc476d16
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Feb 5 03:05:20 2009 +0000

    * Added TrafficMonitor
    * Added AbstractChannelFactory that provides support methods for managing and notifying TrafficMonitors
    * Added Channels.notifyInflow/Outflow()
    * Modified all transports to notify TrafficMonitors

commit 4d84b0e4c6fcbb6b236d72af3fd355067b18bb71
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 4 11:52:35 2009 +0000

    Updated JavaDoc for ChildChannelStateEvent to prevent misinterpretation

commit b4b7a8c48f0abdb42e6c74c39c0af13f942fdb74
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 4 06:19:20 2009 +0000

    Suppressed the usage of the Temporary Selector in Sun JDK to work around a weird race condition in Windows

commit 95584f5c34d9821577c5797c86bf1b4ade9c3406
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 4 04:05:29 2009 +0000

    Forgot to close the channel

commit 2d8b3b0a4e7fe1c831b51fab6bb90feba22df217
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Feb 4 04:00:52 2009 +0000

    Made sure channel registration doesn't fail in Windows unexpectedly

commit 42afa85e53a00ba46d30bea01f086ed2ba52a8a5
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 3 11:57:53 2009 +0000

    Refactoring that is likely to help JVM optimize QNode more aggressively

commit 67d90615e142c6b9af487cf47b6f0f375c66c836
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Feb 3 11:15:25 2009 +0000

    Wishful fix for NETTY-115 AccessControlException when running Netty from an Applet
    * AtomicReferenceFieldUpdater is used only when it's permitted to be used.

commit a0e2c470b76107ea9f6bf51d7d5b54674574cc02
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 2 05:52:39 2009 +0000

    * Added ReadTimeoutHandler and its related exceptions

commit 90c4999c744f7ed794062288e076078f651bd089
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 2 05:47:20 2009 +0000

    Removed unnecessary parameters of the convenient methods in org.jboss.netty.channel.Channels and deprecated old ones.

commit 9da8f78bb1adbcef73273bd658f287e796afaf78
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 2 04:04:15 2009 +0000

    Added SimpleChannelUpstreamHandler and SimpleChannelDownstreamHandler

commit 60befc196f2270c343c37bcae193e5217913f04b
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Feb 2 03:42:05 2009 +0000

    Removed Timeout.extend() operation - a user can just create a new timeout

commit baea5f7a00bd9b9ba40a746007bb40ccb12ae065
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Feb 1 15:33:33 2009 +0000

    Second fix for: NETTY-114 Selectors of the NIO transport are sometimes not waken up
    * ServerSocket timeout didn't work as expected.

commit d2427cac7ad30228512e4ef5b96546441d8d5373
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Feb 1 14:50:47 2009 +0000

    First fix for: NETTY-114 Selectors of the NIO transport are sometimes not waken up
    * Made sure Selector.wakeup() is called, but it can be called more than once if unlucky. Excessive wakeups are still suppressed though.

commit 9959cdd7058a6e6132ab5cc98be5b15ac590e3e7
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 27 08:31:20 2009 +0000

    Fixed a problem where Android application dies during NIO constraint level auto-detection

commit 9b36a40a28b4148d598f0e8e924bebd5ca031722
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 12:54:19 2009 +0000

    Forgot to remove main() ... :-(

commit 48bb75b7dc1ae418709af6f2193afde4a3c0f6ba
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 12:53:41 2009 +0000

    Fixed a problem where calling Timeout.extend() generates multiple timeouts when the timeout is not expired

commit 5b27576494d86af8fecb5eeafd9ac14dc50336b2
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 12:43:28 2009 +0000

    Forgot to set the cancelled flag in cancel()

commit b4b04130712cdada1a49fcb2c7493410fc444a91
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 12:32:20 2009 +0000

    typo

commit 700c21d5637a6dceb78b1f23fc97f1d89ceefe21
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 12:18:50 2009 +0000

    Fixed indentation

commit 941de5b8679ff51919af9fc08047bdc47161399d
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 12:17:56 2009 +0000

    More constructors and sanity check

commit 6894b0f2770ab2bd6030dde5483a186b1de02899
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 12:14:29 2009 +0000

    Improved HashedWheelTimer.stop() to return a set of unprocessed timeouts

commit 5249c47da799b161a86f1f182e92c7435ef6cf13
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 11:35:04 2009 +0000

    Better thread name

commit 75d9358c03d354d3efa404fc50734eba56369aa6
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 11:07:30 2009 +0000

    Removed unnecessary synchronized modifier

commit 78f8e5b0c921a32d1856c9a3d00f5b6c61206ac6
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 11:04:27 2009 +0000

    * Changed HashedWheelTimer to accept ThreadFactory instead of Executor - this change simplifies the code significantly
    * Added Timer.stop() method
    * Timer does not implement ExternalResourceReleasable anymore

commit 84c943573be52627d8b63d4d1cbf534341bc7ea4
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 09:04:08 2009 +0000

    * Forgot to remove HashedWheelTimer.main()

commit 11f7606b6d0114a2cd9a82709301486fbc4ce860
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 09:03:31 2009 +0000

    Fixed excessive CPU consumption

commit 3e0d1f69b0ccca55d6feaaaa19a39e4c313a78f7
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 08:38:07 2009 +0000

    Minimized the number of rewind() calls

commit e4f23c16d6546a32cbeddbf7b5913b83b39d629a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 08:35:10 2009 +0000

    Added missing initialization statement

commit 11aba2161589c765073424f1038a38381e58461e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 08:15:07 2009 +0000

    A little bit more comments for easier understanding

commit a176ae4f3cad3d817e632d626a94ee2f880104f4
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 08:00:16 2009 +0000

    Replaced ConcurrentHashMap with ConcurrentIdentityHashMap wherever possible

commit b2d27d3b69e6d9d879ec7922128be49abdf8347c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 07:57:45 2009 +0000

    * Added alternative implementations of ConcurrentHashMap and replaced existing references to java.util.concurrent.ConcurrentHashMap with them
    * Added ReusableIterator to avoid Iterator creation overhead
    * Optimized HashedWheelTimer

commit 546ac3260ced42eb55b205c10bdcf050b538327c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 04:39:11 2009 +0000

    Proper logging when TimerTask fails

commit 69b4817415fdc5399c64f717ff6173b689082c58
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 04:37:26 2009 +0000

    Moved timer classes to org.jboss.netty.handler.timeout

commit ff1a08c412de9862416dde6f6691949abbc4bff7
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 04:35:33 2009 +0000

    * Forgot to remove HashedWheelTimer.main()
    * More information in HashedWheelTimeout.toString()

commit 473e765f788106a473fa31f18a60c48ece8558fa
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 04:29:58 2009 +0000

    * Replaced TimeoutListener with TimerTask
    * Prettier Timeout.toString() implementation
    * Removed HashedWheelTimer.main()

commit 1924e30482861bbfd3c9a5d97b1be655777e9ed7
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 20 04:28:26 2009 +0000

    Fixed (?) an annoying FindBugs warning in TimeBasedUuidGenerator

commit bcbd0f92387e4f07eb453aa68b2db8798e94b0fe
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 19 15:05:04 2009 +0000

    Unfinished yet mostly working implementation of HashedWheelTimer based on Hashed Timing Wheels data structure

commit c4b1e5a011a73d483ab510353967e202acfbf317
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 19 05:23:41 2009 +0000

    * Renamed ExecutorShutdownUtil to ExecutorUtil
    * Added ExternalResourceUtil

commit 5a2491576cba2f4f9fac69869c628d823fd2478f
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 19 05:02:22 2009 +0000

    * Introduced a common interface 'ExternalResourceReleasable'
    * All types that depend on an external resource (e.g. Executor specified in the constructor) implements ExternalResourceReleasable now
    * EmbeddedChannelFactory.releaseExternalResources() shouldn't throw an exception.

commit e8a18dbd123e1acc806c16adabca667d5bddc6ff
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 16 00:57:03 2009 +0000

    Added .gitignore

commit 6e1fb9c664047eca2464ea8c21d151bb5827e12c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 15 02:08:34 2009 +0000

    * Removed unreachable code blocks
    * Split large methods into smaller ones

commit ad595a3a5baed419ce93a658d2d0795a2fef5b36
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 15 02:01:19 2009 +0000

    * NioClientSocketChannel.worker doesn't need to be volatile - simplified overall code

commit 01bfefa6a4e0d33cbe0e7fdf9143f927ef59f5b7
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 15 01:33:46 2009 +0000

    * Un-deprecated NioSocketChannelConfig.receiveBufferSizePredictor to resolve the FIXME related with buffer creation
    * Removed the usage of pre-allocated buffers (reverted back to old behavior)

commit 80237f3074c1334334771bab586fe53b3467460c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 14 00:53:19 2009 +0000

    Fixed issue: NETTY-105 Update the project description in pom.xml

commit d24de31206d07eecc7f212554c0f9587d1974d40
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 13 13:00:07 2009 +0000

    Found a design flaw - marking as fixme

commit 6cac5c1fc8913d2d2184c8081ac2bc193c12c2d8
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 13 07:36:21 2009 +0000

    [maven-release-plugin] prepare for next development iteration

commit 41191dc6da8610d3590426f3776c4f1d1878368c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 13 07:35:15 2009 +0000

    [maven-release-plugin] prepare release netty-3.1.0.ALPHA3

commit dec9074e7350d4f4f10993a221f36bf2a7d3ed60
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 13 07:33:06 2009 +0000

    Excluded unnecessary dependencies

commit 6bd89335324eadae6b62e8d5e5eced43f0b88fff
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 13 07:18:38 2009 +0000

    * POM cleanup
    * Made sure OSGi logger looks up the LogService dynamically

commit 93cec1c6d59a01af0d2cc924b3075843c894c119
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 13 02:30:44 2009 +0000

    Fixed Javadoc generation

commit 0124da2eea1964dff95677bcc17f246a10e7e03d
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 13 01:46:15 2009 +0000

    Updated links to the API doc and xref in the user guide

commit 592a15aaf1b7cf65786d24d7dd0147fd98b5f631
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 13 01:30:52 2009 +0000

    No more annoying daily plugin version check (hopefully)

commit 7e3651c8034f8e660144c379a5bf005deba70711
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 12 12:09:18 2009 +0000

    Added -link options to Javadoc plugin

commit 93cdc6562fa0400516e89722685f00e5967fb76f
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 12 11:47:41 2009 +0000

    Added a Javadoc group for the container package

commit 9f37748b6345b58fe510704329806d20c3c23134
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 12 11:45:50 2009 +0000

    Added comments to XML files

commit 8aa1ed3dc2a91e6b0917e7e3491e0c59f92f3e0c
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 12 11:35:47 2009 +0000

    Related issue: NETTY-69 IoC container integration

commit a4f7c30a2b7638674cc735633a248f0a6c7e258a
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 12 11:14:31 2009 +0000

    Renamed org.jboss.netty.internal.ChannelFactoryResources to org.jboss.netty.internal.ResourceFactory

commit 733feddebb66bde3367f04292c2ec89589a4b3d7
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 12 11:04:07 2009 +0000

    Made sure NettyResourceFactory.create() returns silently if called multiple times

commit 587d6237893fc679230cc54f4c66398f1ef7af68
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 12 10:48:56 2009 +0000

    * Removed an unnecessary log statement in the OSGi BundleActivator impl
    * Added UnterminatableExecutor
    * Prohibited an attempt to release the shared resources when initialized via containers

commit 04af4356efa0854af66df68494b6560589e680ff
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 12 10:40:17 2009 +0000

    Removed unnecessary annotation implementations

commit 6e264f3bd0d0a70378b1041709a6523d9afecd0b
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 12 10:38:14 2009 +0000

    Made sure the OSGi bundle is loaded even when there's no LogService available

commit 5c02a13be01a4f82b2a48fbb09dffb5e889aaa59
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 12 10:20:44 2009 +0000

    Better OSGi integration - Netty will use OSGi LogService when it's running on top of an OSGi framework

commit d7256bc737b3a70b762bb479824caa0e7e738e42
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 12 08:51:08 2009 +0000

    Related issue: NETTY-69 IoC container integration
    * Added JBoss Microcontainer integration (needs more testing and refinement)

commit 3cf57afd3d25013f02e1583c57dd0b226d0a209b
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 12 07:04:24 2009 +0000

    Merged ChannelFactoryModule and ExecutorModule into NettyModule - advanced users can still assemble providers by themselves

commit 6f728177f862a67fbb7fa92c70dc18bcbc9a1031
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Jan 12 05:57:42 2009 +0000

    line-wrap

commit 184c7cbd5d3ff8451cdbbfeb0213fc637c05f20e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 8 13:38:45 2009 +0000

    ChannelFactoryResource annotation is documented to help a user figure out how it is used

commit b5b7be11b1b005ce5a6cf0357f6e54730b5e1fee
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 8 13:18:49 2009 +0000

    Finished Google Guice integration

commit 7de8dce654554101c10c7172babb82e461e194d6
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 8 11:23:58 2009 +0000

    Clean-up

commit 18fec46a400fc0a3b94e5bdf05607ddb63f22ff6
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 8 11:21:49 2009 +0000

    Added more registrations

commit 9645ffd2517d1551e076abb50d9240e58aa400dd
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 8 11:16:14 2009 +0000

    Renamed the OSGi bundle activator implementation

commit 0368aaed3f75b6f6e01a7c59204cc835d6e9ea90
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 8 10:50:42 2009 +0000

    * Fixed OSGi manifest file
    * Added BundleActivator implementation for easier OSGi integration

commit 10e447d25dd0d27f07df021218204e32d12f0697
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 8 10:48:49 2009 +0000

    Fixed apiviz errors

commit 8979bbbe390797ff0767c6017e9fcd4a892574f2
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 8 09:59:35 2009 +0000

    Created rooms for IoC/DI container integration

commit 61fb78c65f41d12c3ff17b65fcb4f21491b1065d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 8 05:48:10 2009 +0000

    Updated Javadoc group list

commit 5b3cb391e0830384032bcfd14818f19faaa67a67
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 8 05:47:26 2009 +0000

    Renamed org.jboss.netty.group org.jboss.netty.channel.group

commit c043e2bf1ce13fdc45002be25dbcb38925677408
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 8 05:44:33 2009 +0000

    Removed cyclic dependencies

commit 027b8b7f7352512b874852b6716dd5746e5fbd75
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 8 05:24:27 2009 +0000

    Added dependencies for container integrations

commit 148483d0b932f1bf90ba5fc7789d335a8bb190ff
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 8 00:37:46 2009 +0000

    Updated Javadoc regarding previous deprecation of interestOps value in channelInterestChanged event

commit d88246fbdad5a7238a0380c967b9abf1cb8fea10
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 8 00:29:09 2009 +0000

    Suppressed all compiler warnings in the generated code

commit 7a9c72fd7670adbe172bd40f3e732341759bc0dd
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Jan 8 00:26:41 2009 +0000

    The state value of channelInterestChanged event is useless - added the event triggering method which doesn't require a state value and deprecated the old ones

commit bd403bdb98db5f845255fd52d878d320b0e3d408
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 7 12:56:11 2009 +0000

    Fixed incorrect exception messages

commit 5a9d99743d86587b8699c2798bc746d47ddc6575
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 7 12:55:44 2009 +0000

    Sanity check

commit fc2b456b98beafc47339a97c9ca155e293bd513c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 7 12:52:53 2009 +0000

    Oops - silly mistake

commit 3d5a35e45f75b2876925a25afabe62d0522d6528
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 7 12:51:20 2009 +0000

    Added lengthIncludesLengthFieldLength option

commit e62c9c1aec2c5866251b58d436d9884e21f96440
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 7 12:48:36 2009 +0000

    Simplified the protobuf example in javadoc using LengthFieldPrepender

commit a865090d7a1c503590c4b5726cf9ee56b3cf20aa
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 7 12:08:05 2009 +0000

    Fixed an incorrect hour calculation in localtime server example

commit a59862e8d182c113d6c37258dd8fc156bca4cbfe
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 7 12:06:47 2009 +0000

    Commented out unnecessary configuration

commit 1912930e01b418d4d156875cf6c358a2c5705203
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 7 12:05:52 2009 +0000

    Fixed a problem where channelInterestOps event is fired too often

commit 8d320112759645ae0a91e6bfc1737edba65342b8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 7 09:07:35 2009 +0000

    Prettier toString()

commit 66b1960979106b148623dc5a9ff016c9965f9308
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 7 06:50:54 2009 +0000

    Fixed incorrect event order on channel closure when OrderedMemoryAwareThreadPoolExecutor is in a pipeline.

commit b0f39dc687b78302c7ef757852a047a04bbb8de8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 7 04:38:05 2009 +0000

    Implemented the localtime client/server example - yay

commit d1838f4af799190ae45d79db8f8d7d086515f137
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 7 04:06:17 2009 +0000

    Added ChannelPipelineCoverage annotation to LengthFieldPretender

commit 5f15d91c4158897a55a860878e67b7a4ca17bc9a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 7 02:14:12 2009 +0000

    Added LengthFieldPrepender to prepend a length field easily

commit 8e94c0cd604053168e17bb1d7a5059a5b9e04c7d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 7 01:48:49 2009 +0000

    Fixed wrong encoder setup in protobuf javadoc

commit c9551fea141ad0b31f4989427e2cd4f36e84f5b2
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 7 01:37:16 2009 +0000

    svn properties

commit b92357550249d3b16141f7fe58f8a6f06b61c8e5
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 7 01:36:26 2009 +0000

    Added license header

commit 0357cdf985ec7e0c9aca41628cfe53d5e6b6db8b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 7 01:32:26 2009 +0000

    Implementing a new example - localtime

commit 8ef1f9571a0cc7e8ad47f43c95ec02cb2c58bf3a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Jan 7 00:55:03 2009 +0000

    Resolved issue: NETTY-103 - Support the Android platform
    * Made sure TimeBasedUuidGenerator runs without statically importing java.lang.management package

commit 75234e4cea3e2e93f770d6f81519fc17485ac6f5
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 6 06:01:18 2009 +0000

    Updated protobuf example in javadoc

commit 8bba7ccb5b68157d5467df97ff4a7c6277ffe334
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 6 05:59:42 2009 +0000

    Merged LengthPrefixedFrameDecoder into LengthFieldBasedFrameDecoder by introducing initialBytesToStrip option

commit 73a6716c4b97425895ae5bf3d92efd80bb8afe71
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 6 05:47:41 2009 +0000

    Added LengthPrefixedFrameDecoder

commit 5d6ef046cdfe06ed4e3345a4f0f9988ed0a1fa91
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 6 05:32:44 2009 +0000

    Removed unnecessary 'else'

commit 247251420a3fbaa15bbd98f2bd3f81c4f204e3d4
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 6 05:31:59 2009 +0000

    More robust exception handling for incorrect length and too large frames

commit 7fa20dcb07efed2c8adbb0b32c6f17e1a1b60b27
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 6 05:20:16 2009 +0000

    Made sure corrupted frame data is skipped

commit 7ea187df899f70986d3ce47d8ca0f0b1e3791590
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 6 05:11:55 2009 +0000

    Resolved issue: NETTY-102: Allow DelimiterBasedFrameDecoder to include the delimiter in the frame.
    * Added stripDelimiter option
    * Much more efficient and accurate handling of discarding the frame that exceeds maxFrameLength

commit c460c90dea8a4d3b23fedc75b4c22347e3b35b18
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Jan 6 02:06:00 2009 +0000

    Fixed NETTY-101: ObjectDecoderInputStream.readObject() discards data and throws a StreamCorruptedException.
    * Removed unnecessary readFully call in readObject()

commit e9b841757acd3fef28dc417ed8fbff994eec001c
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 2 16:57:15 2009 +0000

    * Replaced duplicate executor shutdown code with ExecutorShutdownUtil.shutdown()
    * Applied the same workaround which was applied to ExecutorShutdownUtil.shutdown() to NioProviderMetadata

commit 4032940e514521c854ce17a19e5cf5af80729e42
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Jan 2 16:48:11 2009 +0000

    Resolved issue: NETTY-100 Add ExecutionHandler.terminateExecutor()

commit 61731817928420fbe9229c2797a9b2fc32fc0ee4
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 31 03:37:15 2008 +0000

    Fixed a typo in the User Guide code

commit 026fc520bb773c7a5db2809aa410c70a616ec911
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 30 02:41:09 2008 +0000

    * Moved all third party license filed into the 'license' directory
    * Beautified NOTICE.txt

commit 2e6b091ce9bf49436b9eb993da275dbc02e16d11
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 30 02:23:25 2008 +0000

    Updated license information

commit 5d7ec6134637a049fe0bbd3cb287c1788af23e08
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 30 02:15:17 2008 +0000

    Resolved issue: NETTY-97 Google Protocol Buffer codec
    * Added ProtobufEncoder and ProtobufDecoder
    * TODO: Need to write an example

commit 54828269e48adfb0f5917eb66c1d319c1ffdc3da
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 30 02:12:56 2008 +0000

    grammar

commit ac82b9fe0b5141c44c6db8d2da645ab918eda69f
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 30 02:06:00 2008 +0000

    Inserted an empty line

commit 051a6d0a07ab0f55fa47052c4d03ed15a501ba8c
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 29 11:41:34 2008 +0000

    * Modified Base64 to use ChannelBuffer instead of byte[] in most cases
    * Added a bunch of overloaded methods to Base64

commit afcd2b83154828878a6c2a13a6b3c53f4f10d5a4
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 17 11:39:45 2008 +0000

    Resolved issue: NETTY-95 Length-prefixed frame decoder
    * Added LengthFieldBasedFrameDecoder
    * Added CorruptedFrameException

commit 2cc2124653dce4e9cd688a6c441b3391478f14a4
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 17 10:29:53 2008 +0000

    Added missing SVN properties

commit 2f1f190e92009aa4be105c05337db0aa34bd7940
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 17 10:23:47 2008 +0000

    Explicitly specified minimum LGPL version in COPYRIGHT.txt

commit b368d097856a47d859557ac73a5dc0665559ca13
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 17 10:21:00 2008 +0000

    Typo

commit c42494b252b7765341bc808793f7ed29560efe23
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 17 10:06:55 2008 +0000

    Updated the license information

commit 6602f1332959d916738587983dcfb0b733d28dea
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 17 09:35:42 2008 +0000

    Fixed a bug where DefaultChannelGroupFuture is never completed when the specified future map is empty

commit c3e72364cee2bd8d6d24eedb098622ae9fdf6a2b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 17 08:59:10 2008 +0000

    Resolved issue: NETTY-94 (Base64 codec)
    * Added org.jboss.netty.handler.codec.base64

commit f996be932a5a80861493c8b1cced3d360d48cd39
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 17 08:55:57 2008 +0000

    Updated Javadoc

commit 49fb59fe32677a1d40c4f787f392c71b14d9f53a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 17 08:19:44 2008 +0000

    StringDecoder.decode() should be protected

commit 7fddc9ddfa7c90def211eaa3ce7930b2b350891c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 17 07:38:32 2008 +0000

    * Added OneToOneEncoder and OneToOneDecoder
      * Removed most duplicate code by extending them

commit f5fb85a0afc2b1dcaeaaf64e734f921bf9b725f9
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 9 07:17:37 2008 +0000

    * Fixed compilation errors
    * Made sure cumulative buffers are initialized as early as possible

commit 5eec9ac58cb4f2fe2518ef21b07845c7cf4c7b99
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 9 07:14:27 2008 +0000

    Fixed a silly mistake - LifeCycleAwareChannelHandler should implement ChannelHandler instead of ChannelHandlerContext

commit 891821788a2e5626005bbf4588cc8ba7316c816f
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 9 00:59:48 2008 +0000

    Removed OP_WRITE event which is fired when a connection is closed - totally unnecessary not that we use different write prevention mechanism

commit 6329cbe94080df5e72a398e61b3733a026be8390
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Dec 9 00:46:29 2008 +0000

    Fixed some findbugs warnings

commit afe9c3c57795bcf001970182a5c7bb4a0b5feff8
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 8 23:58:46 2008 +0000

    Fixed a findbugs warning

commit 878eda0d26f0272e2502bca479d45dd32fa3e760
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 8 23:49:21 2008 +0000

    Fixed an infinite loop in NioClientSocketPipelineSink.register() when Selector fails to open

commit f2807aaf510daa761043b2b02a55fde26f9f6fa7
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 8 23:31:45 2008 +0000

    Changed the interruption interval of ExecutorShutdownUtil just in case the I/O thread is not interrupted on time (this sometimes happens on IBM JDK)

commit f7ebba7ce47819d222cf4cb66e65458a7ac3eb9d
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 8 15:19:36 2008 +0000

    Removed unnecessary duplicate cancellation

commit cd24a10d2045399e14f09124acf7a5604bc5d51c
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 8 15:17:59 2008 +0000

    * Added FIXME
    * Fixed potential selection key leak

commit 7cbd2a272e61379399e88c2e722645c16f82c245
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 8 10:08:34 2008 +0000

    Small comment

commit 18e745e2a17526e13481793f50881cfe2e59262d
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 8 10:07:06 2008 +0000

    buffer.discardReadBytes() should not be called too often

commit 6e08f035892b67153cea7c536a9611a9b2be794a
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 8 09:50:00 2008 +0000

    endianness -> defaultEndianness

commit 95d3b145e20dd40b28024510860cbb813bd3022f
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 8 09:17:10 2008 +0000

    Deprecated receive size predictor

commit 1fa791c4a41689a72a2c7bb9dbfad631a19cc366
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 8 09:02:33 2008 +0000

    Made sure all out-of-the-box encoders and decoders respect the ChannelBufferFactory configuration

commit 22b3885fe58b5a6055fac98b17f422a769b7c259
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 8 08:24:48 2008 +0000

    Automatic code cleanup

commit 799a95774cb30225ba069e43d472f44cc60991ff
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 8 08:21:17 2008 +0000

    Added another fixme

commit fe98713cba04ee76bed85564694d00b631aa68af
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 8 08:20:34 2008 +0000

    * Added ChannelBufferFactory and its implementations
    * Made sure ChannelBuffer implementations respect the associated ChannelBufferFactory

commit 43de025c7c9ecbd242ab06b046b7c7d9aa426c00
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Dec 6 14:47:55 2008 +0000

    More accurate client shutdown time test

commit f7e7d8f52417eac4b379df67daaa925de9a91c97
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Dec 6 14:35:13 2008 +0000

    Workaround for NPE on ExecutorService.shutdownNow()

commit 414e02cb3e01ea90bc1dd46bfbbfaba785ca1b37
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Dec 6 14:19:56 2008 +0000

    Fixed a problem where ReplayingDecoderBuffer.readBytes/readSlice() and AbstractChannelBuffer.readSlice() doesn't work properly.

commit 549145687e2d5f1b5a3e4f536849082cf85e274b
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Dec 6 13:54:16 2008 +0000

    Fixed a problem where AbstractChannelBuffer.readBytes(int) does not respect the endianness of the original buffer

commit df2f9d9d50510eeffdc1e29fce74172edd2beef5
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 5 02:05:42 2008 +0000

    Removed System.out.printlns

commit 978bc83730b0989a4c2f5f07907b6c3b01e1b9e8
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 5 01:58:38 2008 +0000

    Made HttpMethod extensible

commit 5075ac9d3a636d25b62694e4730a876a301a3b8c
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 5 01:35:11 2008 +0000

    Optimized imports in HttpVersion

commit 48c28185a3685441d0aaeb131728083fa548389f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 5 01:19:15 2008 +0000

    Removed broken Javadoc tags

commit 5b69f0f5acaab837fe5cff819f7161f8e3496218
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Dec 5 01:18:18 2008 +0000

    Made HttpVersion extensible

commit cd5f5732a246ecd13ad1280fbf3b5fe4b7122217
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Dec 4 02:17:22 2008 +0000

    Added HttpMessage.setHeader(String, String)

commit f183b3d9655d028d1c3c9fd15a74c58fe2dcbd25
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 10:16:53 2008 +0000

    [maven-release-plugin] prepare for next development iteration

commit 5512550389894abae7806ae068c22d8d4fba1ac9
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 10:16:35 2008 +0000

    [maven-release-plugin] prepare release netty-3.1.0.ALPHA2

commit 10cc5c6384f683c51c7f97aef0c178bf59bb5735
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 10:08:43 2008 +0000

    * Upgraded APIviz 1.2.5.GA
    * Replaced the package diagram with the overview.html

commit 4691c5e2403b0cdd0394a267935013c62e5afe76
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 09:16:10 2008 +0000

    Moved org.jboss.netty.group to Bootstrapping utilities group

commit a1bac0c843cc9ea5acae720418d19ecd9e4a966b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 09:05:54 2008 +0000

    APIviz tagging

commit a30c36d8e2ae7ad3ea5d7577c2c1e806e24ad560
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 09:00:29 2008 +0000

    * APIviz tagging
    * Added missing @version tags

commit 748c169ee2efd834b70e52e53728564621e3bfdc
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 08:38:03 2008 +0000

    Fixed pom error
    Added APIviz markups

commit deb8f2b4c04d5eca20809431bf8520e9106ba17b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 08:36:11 2008 +0000

    Made AbstractCodecEmbedder public

commit 144c6d3da790bf9433f26da7ccf4174c25c542a1
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 08:35:09 2008 +0000

    Added the group package to Misc Javadoc group

commit cd3c0d25c8b8f825bca09bab2fd87f143b1cf581
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 08:31:17 2008 +0000

    Added ChannelHandlerContext.getChannel()

commit e6594822158cfe795739e0928c1d5a0efcbf1306
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 08:28:50 2008 +0000

    * Code clean up
    * Codec embedded now supports multiple handler combinations

commit 2bf7467726fa246466dd331742c5209167bbe869
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 08:24:31 2008 +0000

    Fixed a bug where decoder embedder doesn't work

commit f04d8ae99ad443cfa708b1a60f385a795b00f364
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 08:20:59 2008 +0000

    Made a serious design mistake - rewrote partially

commit 017dfff5273a2a37eca36f0c6e91a56fdc3a9e4b
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 08:09:10 2008 +0000

    Fixed incorrect conditional statements

commit 40ebf2b710214ee7343c195389739cc0945e8d83
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 08:00:50 2008 +0000

    Added the initial implementation of codec embedder

commit c15d930bef281716b759c292fba5ed85ae7e7607
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 07:24:13 2008 +0000

    is -> has been

commit a0a713309ecc9fc04912f456b030080d8b1e54a6
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 07:23:29 2008 +0000

    Explicitly documented the case where life cycler handlers are not called.

commit d1f0d7fb5e5acc10395417657b084218350d4bc0
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 07:20:46 2008 +0000

    One condition is enough to check if a pipeline is attached or not

commit bb137dd5eccc474790d43e1abbf8380b56a44cbc
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 07:19:18 2008 +0000

    Made sure life cycle handlers are called only when the pipeline is attached to a channel

commit f6b23a000b5dfc18dbb6b45c99230446e9dd02c2
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 07:14:22 2008 +0000

    Added ChannelPipeline.isAttached()

commit e5c42ba3f19990b0982c17292ae302d39404ebed
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 02:52:15 2008 +0000

    Made sure DefaultChannelGroup performs blocking I/O operations on server channels before performing non-blocking I/O operations on non-server channels.

commit 493aad614dc0528baffc914856bf3d8861daa304
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 02:38:32 2008 +0000

    Added ServerChannel tag interface

commit 05b326a6e60722eddec22de5681de4cbb2760767
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 00:42:10 2008 +0000

    Added ChannelLocal.<init>

commit 271c41d7322c2f62a42a839730641b255f91aadf
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 00:39:33 2008 +0000

    Resolved issue: NETTY-93 (ChannelLocal (as a counterpart of ThreadLocal))
    * Added ChannelLocal
    * Added ConcurrentWeakHashMap

commit b97a26d17601cd97cb71f8230b4a3338c6249b98
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Dec 3 00:21:41 2008 +0000

    Fixed a silly bug in ChannelGroupFactory.getGroup()

commit 49a0b8dbdbe81c0fff74217fa3a08a59d6f39486
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 1 10:07:54 2008 +0000

    Resolved issue: NETTY-90 (Add life cycle listener methods to ChannelHandler)

commit e8b1a2862e0760aeddf6b0953ca9e186bae8712a
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 1 09:41:46 2008 +0000

    Added get/setState() to ReplayingDecoder

commit 5bed9f4bc4ac77bd508842249efc3d1bba3ba136
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 1 09:34:45 2008 +0000

    Added HttpMessage.removeHeader()

commit ec33095eb71f3c5e3ae1f1324844c0157e125364
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 1 07:15:42 2008 +0000

    Added package-info for the group package

commit 969effde28fc614270ce2d1b1bbaf8605cd80ea7
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 1 07:02:47 2008 +0000

    Strict check

commit 00c7fe36f45f91f0d25f7160ad359e1e0d62d168
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 1 06:59:52 2008 +0000

    Tiny cleanup

commit 722458ef343bc59fa404d88b7a72d5bc373cea8b
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 1 06:58:21 2008 +0000

    Resolved issue: NETTY-85 (Global Channel registry)
    * Initial implementation

commit 22b23938b8f3d29b172974045695d65efe02e73e
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 1 06:08:52 2008 +0000

    Channel should implement Comparable<Channel>

commit 7d37a2f78b9b880c950adb1a4f3cd62579a19bd3
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 1 05:29:59 2008 +0000

    Added QueryStringEncoder.toString()

commit 2d92771ae6bf9f4cb89d8b723d9b6b1a0b898ff3
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 1 05:27:56 2008 +0000

    Resolved NETTY-88 (Change the HTTP codec to use String instead of URI)

commit d95f4efc4dc208b0250e73cdafb9d0111220e6d9
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Dec 1 01:22:43 2008 +0000

    Updated diagram

commit e213b54b71921c658aafbf631a1cfd154beea72a
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 30 16:29:35 2008 +0000

    Fixed a problem where HttpMessageDecoder doesn't finish decoding immediately when content-length is 0 (or there's no content)

commit 7b69bf371bcd0569f4c1c631f451c3201d750702
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 30 16:24:17 2008 +0000

    ReplayingDecoder should not complain when the state has been changed

commit d4348ab4d75c2db7befbe59b050a98f8a70a27fd
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 30 16:22:03 2008 +0000

    Fixed NETTY-86 (HttpResponseDecoder decodes the initial line incorrectly.)

commit aab28d36d92049d2edf1d71663d793bf298142ed
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 29 15:42:03 2008 +0000

    * Added ConcurrentReferenceHashMap (will be used to implement NETTY-85 Global Channel registry)
    * Updated copyright notice

commit d20d338a3a3a9323330100a5e913e76ed3217514
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 28 14:47:49 2008 +0000

    Clarification on the overhead of throwing an error

commit 1b2dfc1dd599080cbbf5ee47f9deecd8d4c1b8b0
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 28 14:41:11 2008 +0000

    Fixed typo and ambiguous expression

commit 27cd263b6aab93d3d5882bf1a46126b2fe3eec81
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 28 14:33:19 2008 +0000

    Improved Javadoc for ReplayingDecoder as requested

commit 440fdc4e7fe0e6ca888749b7bf482e25d6c4b5a0
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 28 11:22:02 2008 +0000

    Graceful shutdown for EchoClient

commit 0830444fc869fac107349ab4404f6ab6a2baf815
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 28 11:18:21 2008 +0000

    Resolved issue: NETTY-84 Replace ChannelFactory.getExternalResource() with ChannelFactory.releaseExternalResources()

commit 3e09a4ee604029ee796f6102cf65004b052d0f9c
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 28 06:57:29 2008 +0000

    allowed low water mark to be same with high water mark

commit 4e7852e29e602e6f5a2c6ded1213ee92814ad9cf
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 28 06:45:16 2008 +0000

    Fixed stack overflow error

commit 38943f3d231caac2d3e4bac36160c693029bd854
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 28 05:38:34 2008 +0000

    Code cleanup

commit 70b87f84dfbfe710a2171bc4e2270f9f553d559c
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 28 05:36:12 2008 +0000

    Elegant shutdown for DiscardClient

commit e0e282770f1ccf49367efd9fe003193ea630f062
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 28 05:28:50 2008 +0000

    Code cleanup

commit 893cab5ce84ea05f92315ab59d29a6b87d6dd7ad
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 28 03:19:31 2008 +0000

    Initial implementation of high/low water mark based write overflow prevention mechanism

commit 18ac6f925f0e577794cccdee2746963e92a4d59e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 27 16:22:20 2008 +0000

    Fixed test failure

commit 044fd23b0ba34bf06c7a178e5387184e4c41e8df
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 27 15:44:14 2008 +0000

    Fixed a bug where channelUnbound/channelDisconnected/channelClosed event is sometimes not fired

commit e7d5048440899e6f3f1d5814f0076c24a7ab0423
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 27 02:59:05 2008 +0000

    Fixed svn properties

commit 00fbf2a2f34469884597c8eee6e8a94edb930f2a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 27 01:11:53 2008 +0000

    Resource should be released in HttpClient example

commit 7a8754302089c3996b8d43dbfbe01d1f5bf29ac8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 26 10:47:25 2008 +0000

    3.0 -> 3.1

commit 9645ccb69e8245bed880d932f0a721977810f847
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 26 10:43:50 2008 +0000

    [maven-release-plugin] prepare for next development iteration

commit fa7ebe2cce81c2a635ef17a36f286586b1e53ce2
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 26 10:43:34 2008 +0000

    [maven-release-plugin] prepare release netty-3.1.0.ALPHA1

commit 78f86b2d3a2a3c9196a0a8ad30981dbdb26639d7
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 26 10:31:32 2008 +0000

    Added documentation to-dos

commit 6df482b0749ca93b86a9b82779c4276b56ef1f63
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 26 10:30:21 2008 +0000

    Added documentation to-dos

commit 0b9b2aca0bcfe80d313b2f04efc1710b11732927
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 26 10:26:50 2008 +0000

    Excluded ChannelFactoryExecutorResource from the diagram

commit 96c98f636ab0afff7b1ff1c639165789da88a33a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 26 10:22:55 2008 +0000

    Simplified some test code using ChannelFactoryResource.release()

commit 5a4e0e4d47838f7df8c31b0df354a99069a157bb
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 26 10:18:29 2008 +0000

    Resolved NETTY-82 (Provide a convenient way to shut down a service)
    * Added ChannelFactoryResource
    * Added ChannelFactory.getExternalResource()
    * Updated all client examples to use getExternalResource().release()

commit 0886c11645c25ab750cebcfd4d9ee068eea53ed3
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 26 09:23:37 2008 +0000

    More Javadoc on the return value of ChannelFuture.setSuccess and setFailure

commit 6e40f62574eb8d7fcf3d3e316de94fd466ec8858
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 26 09:21:00 2008 +0000

    * Added Channel.getCloseFuture()
    * Changed ChannelFuture.setSuccess() and setFailure() to return a boolean value

commit 6947ba086306c7b48dea4eaa1de284802638c780
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 26 09:01:18 2008 +0000

    Added package-info.java for the http package

commit 09e8a73bf2bd14dd09cac7fe128dbd9461274650
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 26 08:53:19 2008 +0000

    Removed unimplemented method (I think whether to keep-alive or not should be determined in the higher level)

commit 796238d929c0388e385e483929715c48d4c417b8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 26 08:49:33 2008 +0000

    * Renamed HttpVersion.getProtocol() to decode()
    * A little bit of code clean up

commit 1ff2b7bbc944eb76a2780f4555fb66f00f5bf291
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 26 08:44:39 2008 +0000

    FIXMEs in HTTP QueryStringEncoder/Decoder

commit 2b0ee3862f9eb3efb24e4b1d00620e9281fd5d2d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 26 08:40:04 2008 +0000

    Renamed HttpWebserverClient to HttpClient

commit be88a53b3bfadaaf216502cc62eb57d30817cd14
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 26 08:39:32 2008 +0000

    Replaced HttpClient example with more generic wget style one

commit 5c494dd045fadea588359c7a1d79663dead3ee08
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 25 02:57:04 2008 +0000

    More precise shutdown time test

commit c979563dcd64507e92ee2a9a86def61918a4c7c9
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 20 11:50:01 2008 +0000

    Trying to figure out who is failing NioServerSocketShutdownTimeTest ..

commit 8ac3b2905df3cddb36d6f76227bfa959692116e8
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 20 08:15:20 2008 +0000

    StringBuffer -> StringBuilder

commit 70151828dcccb5d9923e274195959ee03319a85c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 20 08:10:49 2008 +0000

    Resolved issue: NETTY-68 (Make MemoryAwareThreadPoolExecutor.objectSizeEstimator property mutable)

commit 678137b638cd84ab303c4db22991e273b4ba9618
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 20 06:32:04 2008 +0000

    Removed a TODO mark which is not going to be fixed (it just works and is not reusable at this moment.)

commit c6ce2c3984a22a70e2c8a5afefdaa2c5bba6a5b3
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 19 09:15:19 2008 +0000

    Fixed the issues that FindBugs raised

commit 4ac032c65752d1822ab8e15551a032f05286aece
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 19 07:22:15 2008 +0000

    Merged the HTTP branch into the trunk

commit e29ba2eed5d4ce1671abf5fa112bafae4f7438b9
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 19 01:27:55 2008 +0000

    [maven-release-plugin] prepare for next development iteration

commit 4df4b6517da13a126fd8000d489c44bd9eb9371c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Nov 19 01:27:39 2008 +0000

    [maven-release-plugin] prepare release netty-3.0.2.GA

commit 57b2d9a443d52a20777d92998af81f25281010c4
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Nov 18 09:43:53 2008 +0000

    Fixed issue: NETTY-65 (Intermittent high CPU consumption in LinkedTransferQueue)
    * Applied the latest upstream fix

commit 580f6f22847c8fb96e70a1be7313e476e7a14527
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 16 20:34:07 2008 +0000

    * Another workaround for 'missing algorithm' error in SSLEngine
    * Made handshaking non-volatile

commit 87cd22b5fd563f8367156b6709d1995297bd169f
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 16 17:59:27 2008 +0000

    More synchronization to avoid 'missing algorithm' error (not sure ..)

commit d0964a4b46ecbd6146ce56c04a0384d8bf0974d0
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 16 16:35:09 2008 +0000

    Additional synchronization condition to avoid 'missing algorithm' error

commit 0e3679e919ff6b8eb25e87486f5b2c1143d8462b
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 16 16:25:08 2008 +0000

    Fixed a problem where AbstractSocketSslEchoTest doesn't close all channels when a connection attempt fails.

commit feac0d6a3da6c3ee27ae83d31aa320d3ed3da5f6
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 16 16:22:27 2008 +0000

    Fixed a problem where AbstractSocketSslEchoTest doesn't close all channels when handshake fails.

commit 5df6229d2aae5ec20c7380249e722de18c5a12e9
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 16 15:44:05 2008 +0000

    A workaround for 'missing algorithm' error during handshake

commit 62ed58a2be1c92bb5d56e910a8a36387eb454e6e
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 16 15:14:32 2008 +0000

    Made sure unwrap is called for all NEED_UNWRAP handshake status

commit dce019966ece078e11da357f0d3019d417fdb53d
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 16 15:06:10 2008 +0000

    A workaround for 'missing algorithm' error during handshake

commit 333f45ccd5f65bf64aa6e52dfa0ed080cfd17486
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 16 15:02:01 2008 +0000

    Made sure events are propagated somehow.

commit 72ab3f04b05b56b710623327908d1ca53de9c620
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 16 14:43:49 2008 +0000

    * Removed output to stderr
    * Made sure SSLEngine is cleaned up when a handler in the downstream raises an exception.

commit 630473bf84ba548456c92b8a8cd7c0e2f534425e
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 16 13:52:47 2008 +0000

    Fixed issue: NETTY-67 (ChannelBuffer.writeBytes() and setBytes() should not throw ClosedChannelException)

commit 9aec8119cbf8bd2a185277534aacb9d9fc7e5a65
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 16 13:34:24 2008 +0000

    Used logger instead of syserr

commit 4cd9105eeb120890d51d05f015feb5ac6bc7aaae
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 16 13:30:42 2008 +0000

    Made sure all exceptions are printed (2nd try)

commit b29b5a8289a35fb6846e53f2a38b611f9d3b9e1a
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 16 11:47:35 2008 +0000

    * Reverted previous SslHandler fix that doesn't work
    * More strict handshake status check

commit ea94ea850bb4eb236ef85aea6512f0940877eebe
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 16 11:43:44 2008 +0000

    Fixed a problem where not all exceptions are logged immediately in AbstractSocketSslEchoTest

commit 834277a9ebaec7e53e85e7c37888891d1199d020
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 16 11:29:36 2008 +0000

    Potential fix for intermittent SSL test failures

commit c848b8cc582756a8d023b958439d9adb1079cb13
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 16 11:22:40 2008 +0000

    Fixed incorrect timing test due to slow MD5 algorithm initialization

commit b3f39c1bb3057f0a18ea5b019dd24c4965b0947e
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Nov 16 10:33:00 2008 +0000

    Additional debug information in AbstractSocketSslEchoTest

commit 7896ec05f6b7451ed3e019611157bcc6bc228b47
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 15 13:22:06 2008 +0000

    Fixed issue: NETTY-66 (MapUtil.isOrderedMap() blocks for a long time on a certain platform.)
    * Replaced random number generation with a pre-populated sample table

commit c0a3f3383b6ee815c9b33993aa853b6fe9c88b20
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 14 22:06:33 2008 +0000

    Removed an unused static final field

commit 90045fd487e4e81b2a6312cbd811b2a3404435e9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 14 22:01:23 2008 +0000

    Reverted my patch and applied Doug Lea's patch

commit 3b5c36782daf2a49dc21d3aa3d39a6d37f02b319
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 14 12:05:49 2008 +0000

    Fixed issue: NETTY-64 (Dead lock during SSL handshake)
    * Acquired handshakeLock explicitly when sending handshake messages and executing delegated tasks

commit 712358103878c5244c68bda4c10e85a265b2bce6
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 14 08:02:42 2008 +0000

    Comment clean up as advised

commit 09ef8e8964b0232403c38f6ec3f524eaed32382d
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 14 07:45:53 2008 +0000

    Comment clean up as advised

commit 927aaf8d1241ef916429d14024e8efb465239bf8
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 14 06:55:02 2008 +0000

    Documentation cleanup

commit 3d837680392d70329d43e93bbd03ade4d24ac020
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 14 06:32:10 2008 +0000

    Documentation cleanup

commit 8b3956b238ab16bee6174f42a54d5c7b85954ed0
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 14 06:07:56 2008 +0000

    Typo in StringDecoder Javadoc

commit b876bd8cec3d6f403a577e0094e992b8ab0a9687
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 13 14:11:59 2008 +0000

    Added a potential fix for infinite loop in LinkedTransferQueue.clean()

commit 92bbc4acec49d5805ed86ce894e7b90d6966aa64
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 10 02:31:20 2008 +0000

    [maven-release-plugin] prepare for next development iteration

commit 12d653551a8eeca23ec43e9a081e8150bcd981ea
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 10 02:31:01 2008 +0000

    [maven-release-plugin] prepare release netty-3.0.1.GA

commit 58e727f238e7373add60772e6c2824e7d2a96268
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 10 02:17:14 2008 +0000

    Typo

commit dc350cb7c78c6fe400fdd97935d416ca12b00e19
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Nov 10 02:15:40 2008 +0000

    Will release 3.0.1.GA first and then 3.1.0.Alpha1

commit 59e15efbbeb7f3aac7d96a05eb5ac701d9093be5
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 8 12:00:07 2008 +0000

    Simplified NioWorker.register() - it was too complex

commit c5a211e07a648cf3e822e8e9afc5fa61a5e84d69
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Nov 8 11:59:23 2008 +0000

    Used ExpectedError instead of Exception to tell that the failure is expected obviously

commit 9aed1addb18430e64b11afdf541013e0ab955890
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 7 17:43:44 2008 +0000

    Potential fix for NPE in NioWorker.RegisterTask.run()

commit cd3acef9e12dcf03f1ddabb1e36977a080cbaab7
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 7 17:38:02 2008 +0000

    Potention fix for NPE in NioWorker.RegisterTask.run()

commit 0976673ac23e1978a8bbdf5e6b960f41d950e5fc
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 7 17:37:10 2008 +0000

    Potention fix for NPE in NioWorker.RegisterTask.run()

commit 14a49ed04286cb325f9a21ac9b9514001a80e8f7
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 7 13:04:56 2008 +0000

    Made NIO constraint detector much more robust against indefinite blocking by enabling timeout (7 secs)

commit 288c693f62549de9d7144c8482a8fa6bad7a9f89
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 7 08:27:28 2008 +0000

    Code cleanup

commit fcc0087eb28661d928e02198d461d34a7b66fc05
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 7 08:25:52 2008 +0000

    Reverted temporary code which was mistakenly checked in

commit 87dd4adbc723c4dc53a65b7dba1fd582718bedd4
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 7 08:24:58 2008 +0000

    Adjusted regression test duration

commit b8af182e8c75ab781a39833d10ec231bb26ed3a2
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 7 08:23:15 2008 +0000

    Fixed issue: NETTY-64  Duplicate Channel IDs are generated.

commit de2ff34dc2937d476b1fdf0126aacf2ebf2808a5
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 7 03:00:19 2008 +0000

    Replaced System.currentTimeMillis() with System.nanoTime()

commit 7fe42c4c4ff70b1732799589a177fdda5deeb497
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 7 02:43:27 2008 +0000

    Increased test timeout to avoid Hudson false alarm

commit cee920f3b818957d3425e4afe11517da9418cb29
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 7 02:41:29 2008 +0000

    Workaround for the bogus FindBugs warning in ReplayingDecoderBuffer

commit f73de01a687c0848d4175565a3a29cf9aad5de90
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 7 02:36:57 2008 +0000

    Doesn't need to reject ReplayingDecoderBuffer.equals()

commit 34b9b00723765dab8ed6cf50137931be13dd19c9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 7 02:35:04 2008 +0000

    Fixed a potential concurrency issue in DefaultChannelFuture.notifyListeners(), as advised by FindBugs

commit 81d29bafc29049f5f5094ac6cd553eef60b5dee6
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 7 02:26:21 2008 +0000

    Fixed warnings reported by FindBugs

commit 9d350888019dce40a37c4723600a94a2a06da6ef
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 7 02:10:44 2008 +0000

    & -> &&

commit d8cd49c1b725a5e0a9355a25d6fa7ce887774138
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 7 02:08:36 2008 +0000

    Fixed a warning reported by FindBugs in CompositeChannelBuffer

commit 33187d0285e1c48f1fb4953f1199a53e123da6a6
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 7 02:05:09 2008 +0000

    Fixed issue: NETTY-62 ChannelBuffers.EMPTY_BUFFER is not final

commit 3a2a7a3a3c3584c9bbd20f892e4ab666a29f4820
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 7 02:00:07 2008 +0000

    Made sure NioWorker.cleanUpWriteBuffer() is called even if the worker thread is not running.

commit b50cc2b025cdf72de1a25506f748c5fc4b448d75
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Nov 7 01:50:51 2008 +0000

    Removed an unused import

commit ea1a68cb8334ed8ede2c13d9aa2e44cf15d452f4
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 6 17:31:07 2008 +0000

    Made sure that NioWorker.wakenUp is set to true only when its selector is really waken up

commit 79fe2324c9167a74df45be5c254b2e254b265962
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 6 16:21:35 2008 +0000

    Fixed RejectedExecutionException in the OIO-OIO SSL echo test

commit 7db3eacbb4f22b1eed1a2ad4a577a20412a602cd
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 6 15:56:05 2008 +0000

    Potential fix for OIO-OIO SSL echo test

commit 22f33539c1f977d098d24bc7c978bdb1c5691d99
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 6 15:01:08 2008 +0000

    Fixed a problem where NPE is thrown when NioWorker.write() is called too early

commit 85e63a2c98884bbaee249b010bdb7e036439c149
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 6 12:56:45 2008 +0000

    Potential fix for NPE during SocketChannel.register(..)

commit 59abaa1657e8fb0c1b0e50d79397d731574075c3
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 6 11:41:01 2008 +0000

    Tiny code cleanup

commit 00ec5be6ddca2985dce561ae8ce9a8fd1cbb94cd
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 6 11:39:17 2008 +0000

    Fixed a bug where NioWorker.register() hangs up with high CPU consumption when it failed to open a selector.

commit 7f1ff668f760ab2a3977abee2847296baee0c5ea
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 6 11:19:48 2008 +0000

    Fixed a bug where NioWorker.register() hangs up with high CPU consumption when it failed to open a selector.

commit 486218ab2843547da8962810a5dbf9bffbf789cd
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 6 10:55:56 2008 +0000

    Potential fix for NPE during SocketChannel.register(..)

commit b15fe51e958c7ab311920856a89717a5dacee052
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Nov 6 08:49:00 2008 +0000

    RegisterTask should be a static class.

commit 4a8bd6a1e9e35126e6b704afed4c5f9cb0cd03ea
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Oct 13 05:19:47 2008 +0000

    [maven-release-plugin] prepare for next development iteration

commit 0a149027e672352839e39cb5225a34c73ced539b
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Oct 13 05:19:29 2008 +0000

    [maven-release-plugin] prepare release netty-3.0.0.GA

commit d3f41232f9ce98023d5c84cd04bf1e80e097788c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Oct 7 13:08:41 2008 +0000

    Upgraded to APIviz 1.2.4.GA

commit 87b4f886a67e0a80a031802e3d2f1d726ae24927
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Oct 6 13:25:27 2008 +0000

    Code cleanup

commit 7a004aa4210fdd223d228f93de71575b6619744b
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Oct 3 07:08:29 2008 +0000

    [maven-release-plugin] prepare for next development iteration

commit 29ad164e5c17527188b3b795866075db0972348a
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Oct 3 07:08:10 2008 +0000

    [maven-release-plugin] prepare release netty-3.0.0.CR5

commit dddf14f79afac0e0083809c17b64112238f4e8d3
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Oct 3 02:53:57 2008 +0000

    Fixed a bug: NETTY-56 (The ChannFuture returned by SslHandler.handshake() is not completed when the associated Channel is closed during handshake.)

commit b378c083ec730eba0b3068f521081ae8f7bde305
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Oct 2 05:06:10 2008 +0000

    A little bit of rephrasing

commit 8f9769f8e9bb3a6ef00d9f2f00210be0c0dec11c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Oct 2 05:02:46 2008 +0000

    Removed unnecessary links

commit b6d9755ba561e8a89bfceb21dab45a75a70a9dd6
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Oct 2 04:58:04 2008 +0000

    Updated the getting started guide which is simpler thanks to the recent changes in SimpleChannelHandler

commit 5120c1172c749591a674ecec74d791997007273d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Oct 2 04:44:06 2008 +0000

    Simplfied the factorial example using the new SimpleChannelHandler

commit ca1f11ff67c67077b186b55d2a1fb88d0fa61feb
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Oct 2 04:43:02 2008 +0000

    Forgot to add the 'throws' clause

commit da04e2cae996492d112cc60ded80d19e07674f42
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Oct 2 04:40:46 2008 +0000

    Fixed issue: NETTY-54 (Improve SimpleChannelHandler to implement ChannelDownstreamHandler)
    Fixed issue: NETTY-55 (Channel.unbind() method is missing.)

commit 6c2230aac25d42fa6a7398ca826fd648ed2a4f67
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 1 13:14:28 2008 +0000

    Swallow AsynchronousCloseException

commit 4376cd5a913798e539696b1dc61d556a4569fccc
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 1 11:06:18 2008 +0000

    Fixed a bug: NETTY-53 (ClassNotFoundException when an ObjectDecoder with no ClassLoader specified tries to decode an object.)
    * Explicitly acquired the current thread's context class loader if a user specified no or null class loader.

commit 8d5d8fd1724d0d02c084658e7cf2bcaf0a7dfeb8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 1 08:42:26 2008 +0000

    Fixed another race condition which occurs when OP_WRITE and OP_READ flags are set/cleared at the same time

commit cfa679429232bf4d049269467949246315e32f47
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 1 05:25:01 2008 +0000

    Potential fix for NETTY-52 (IllegalArgumentException when trying to change the current interestOps)

commit 731ab2a0eb933208202c73056d24824e9d4038e5
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 1 04:55:10 2008 +0000

    Updated copyright information

commit dae3b05ebb6c5ebd188c2dcb5d485967504c0900
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 1 04:49:10 2008 +0000

    Replaced FastQueue with LinkedTransferQueue

commit 6d372c367b400be5455744e184eb3858e5048781
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Oct 1 03:18:36 2008 +0000

    Added LinkedTransferQueue

commit 2f4e20ce7afb4da2bdc53c08630cce9cae8e26e9
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 30 14:23:38 2008 +0000

    Made more generic

commit 44c409ca24bdb1721747686525ed08df7588b5d5
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 30 13:02:41 2008 +0000

    More accurate default receive buffer size predictor implementation

commit 0831b3209001e28438589297320a8c27086cbf91
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 30 06:29:16 2008 +0000

    Decreased the default maximum receive buffer size to 64KiB - it's enough for more cases.

commit 950a386d3f1bd884350ffe27dd0cd47255c4c409
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 30 01:53:24 2008 +0000

    Code cleanup

commit 7de92967c2a3f924b4bff16b0d51d9b9aa1ad58c
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 30 01:52:02 2008 +0000

    Made MemoryAwareThreadPoolExecutor.shouldCount() extensible

commit 85dc8f93f568a62fb8e7506d6acf4418441ad27e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 30 01:49:22 2008 +0000

    Fixed a bug where per-channel memory limitation didn't work correctly

commit 8c15102bc34a454da8ab421a430715f4c90fe3ad
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 30 00:42:04 2008 +0000

    Fixed issue NETTY-51 (MemoryAwareThreadPoolExecutor and its subtypes should use long instead of int to store the counters)

commit 6f18c940dd255419893a99cdc26f2df09201f533
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 30 00:31:32 2008 +0000

    Fixed issue NETTY-50 (Dead lock in MemoryAwareThreadPoolExecutor)
    * Made sure that the max memory size properties become immutable

commit 50f043fa3eb1266df9c80d211c3064b5f081110d
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 30 00:16:42 2008 +0000

    Fixed issue NETTY-50 (Dead lock in MemoryAwareThreadPoolExecutor)
    * Fixed incorrect release condition

commit d7c53437e90f27639fe2e69838d8c45964e04c80
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 29 06:51:41 2008 +0000

    Fixed errors in JavaDoc about OIO-based transport shutdown

commit 8fb2f7c7891baad75b9ada315484372264351128
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Sep 28 15:07:47 2008 +0000

    It's actually enough with a simple shutdown lock because we have only one acceptor thread.

commit dccc9f86652e32f7bd36e2888edce53534d0280f
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Sep 28 15:01:21 2008 +0000

    * Improved the throughput of the server-side accept operation
    * Added FastQueue.isEmpty()

commit 4d17db6eb1569709c81529b54adc2ffe65e53157
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Sep 28 14:21:38 2008 +0000

    Using LinkedList seems to yield same or better performance

commit 40b1f26c34b3520778f95ca28e024d75bed0ecae
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Sep 28 14:12:28 2008 +0000

    Made sure all segments are evaluated on poll for potentially better throughput (still proof-of-concept - getting better)

commit 597cbd870c994bf868bfb6b44903d1716c8cc174
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Sep 28 13:57:17 2008 +0000

    Isolated unchecked cast warning from FastQueue.poll()

commit 6611563c8c350815dab782229f82ebccccdcd264
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Sep 28 13:52:49 2008 +0000

    Fixed a race condition in FastQueue

commit 5170838e795e008330966030b584a9b2b12d5c62
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Sep 28 12:51:50 2008 +0000

    Added direct buffer support (disabled by default and can't be enabled without recompilation for now - should be fixed in 3.1.)

commit b64124efd6aaadb7bea478d8dcb74af26cf9ebea
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 27 14:22:52 2008 +0000

    * Renamed WriteMessageQueue to FastQueue, made it generic and optimized it
    * Added ConcurrentFastQueue (proof of concept yet - slow)

commit a0d132a4d8a3ce3435270eb745cf3cb1639c3fa4
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 27 11:53:00 2008 +0000

    Moved WriteMessageQueue to the util package

commit f2c1734636b2efb2c77ae91bdb63c43ea13fe4d6
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 26 12:28:09 2008 +0000

    Reduced contention between I/O thread and writer

commit 90ea9aa047cc3224ab574e042459a9fa6254bc73
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 26 09:05:41 2008 +0000

    Formatting

commit 362ecf640bf449334ccda8361776045e08e8860f
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 26 09:04:02 2008 +0000

    Fixed a bug where DiscardClient didn't work since the last optimization

commit 39086edae6afa6da9f45af9e894adfd4ab0b2f7e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 26 08:31:33 2008 +0000

    Introduced an intermediary write buffer to reduce the contention

commit 0241120ace01c73d18b441a91945b7abed39eebd
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 26 07:00:30 2008 +0000

    Optimization.. (reduced volatiles)

commit 22d79a501d85a1a0d6e22859c335fa09c0a11c9b
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 26 04:31:41 2008 +0000

    Replaced ConcurrentLinkedQueue with LinkedBlockingQueue in NioSocketChannel

commit 9f5468f7a717a145efc757f2394d6255b4c51c86
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 26 03:32:26 2008 +0000

    Made sure NioWorker.taskQueue doesn't contain the same WriteTask

commit 5f1ecc9022cd62d64cc715d25b8fe714ed43d7f4
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 26 03:02:31 2008 +0000

    Fixed throughput issue when messages are written from different threads than I/O worker threads

commit ebdcb21421b10b55875f5ddc5ae8d0e680775f22
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 26 02:57:10 2008 +0000

    Made sure StackTraceSimplifier is always loaded

commit 824e0034c48d9afcc9cce69924a0bebdb46fce31
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 26 00:43:14 2008 +0000

    A little bit of optimization

commit e1f4053d41164429df037a751a27388555b7c530
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 25 16:31:03 2008 +0000

    At last but not least

commit 33c19323532658941862665d9c12bcd6153e9a48
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 25 11:05:45 2008 +0000

    Dunno why but SocketChannel.accept() sometimes returns null.

commit bc60f01b582c22057e8287e12f344d17fa9a94ac
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 24 12:38:52 2008 +0000

    section -> chapter

commit 9c0b5d194966fc7d7429739eb5ef21f2932f68fd
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 24 12:01:50 2008 +0000

    Better table L&F

commit 87390319c89be93b9b9f1087c0dd8901ca521e1c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 24 11:28:46 2008 +0000

    Added the list of available options

commit 274fa4aac58eb48c20f1bfc712107bafe90444c2
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 24 10:49:39 2008 +0000

    A little bit of duplication to help understanding of asynchronous operation

commit d0d99ff6bc8f93831ac28ed1e4f5a9571086f57a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 24 10:46:58 2008 +0000

    More detailed explanation on ChannelFuture

commit 320b7133a2c3eb49cec2a1e95c190feeffe49a51
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 24 10:37:19 2008 +0000

    More clarification on ChannelHandlerContext

commit 92be78df4934f42cf2576e6ea12f2322c47cbc07
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 24 10:08:30 2008 +0000

    Rephrased the description of ChannelHandlerContext

commit 60eec52dabbc2093d530a2c57b4bc1d210e786a2
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 24 09:56:10 2008 +0000

    Typo

commit 0b8687cdeb2c00205d1a6670b185a3c3e80d95a7
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 24 09:55:19 2008 +0000

    More explanation on the characteristics of bootstraps

commit 008f7c394ef2a0f267bf43b6d4906e07b8cbaa9e
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 24 09:50:38 2008 +0000

    Added the PNG version of the architecture diagram

commit aaa6efcda4e3feabe0e9f5dd9025f4b815565062
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 24 09:49:23 2008 +0000

    Fires -> Sends

commit 6a759f0c63e4a632edde2cec3d6df123e8b6ce9c
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 24 09:48:32 2008 +0000

    Fixed grammar, typo, and brevity in Javadoc comments

commit ec06cbf57a50227d6f5c8931d53e55bf3bd8bbc7
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 24 05:32:43 2008 +0000

    Made the diagram more compact

commit 880a093c9f80d417cd320077e83136236e247ffb
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 24 04:45:39 2008 +0000

    Added the architecture diagram

commit 891751b396d3099cf8b861d5a40cb4b817b006e5
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 24 03:39:21 2008 +0000

    Updated XSLT to make the documentation point the correct URL

commit 705d4f183c29f14ff96949835797e923bfd48380
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 24 03:17:27 2008 +0000

    Excluded unwritten chapters temporarilly

commit 48bf1d543ac40f2c5d4d79bc14e1f35e7479b6b1
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 24 03:14:16 2008 +0000

    Better description

commit 8c2f314154a1633b76271b484e6979eb33d11115
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 24 02:30:10 2008 +0000

    Better explanation of what Netty is

commit c8ff6718677c92d3bc20dc9e81dcad82c4411db3
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 22 11:11:24 2008 +0000

    [maven-release-plugin] prepare for next development iteration

commit 7f8def862ac6c0dec2a8d3f4cec98fe2494021dc
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 22 11:10:07 2008 +0000

    [maven-release-plugin] prepare release netty-3.0.0.CR4

commit 45b6c74b84f876c8fedd9a7a24e103d969ec85e4
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 22 11:05:43 2008 +0000

    Another rephrasing

commit a85c3688a82539d17e7498213d17a39553fbce5d
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 22 11:03:49 2008 +0000

    Another rephrasing

commit 95a5af17071cf6e4735a4356c8a2a71a0ac2c448
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 22 11:02:28 2008 +0000

    Slight rephrasing

commit f206c5359bd255405f314b0d6a73774d1ecebb09
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 22 11:00:18 2008 +0000

    Finished the first chapter

commit 8d8c7c02274cf87c4d6592a2374b17ce5bb02d80
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 22 05:47:10 2008 +0000

    * Updated PDF XSL
    * proven approach for -> proven approach to
    * Keep writing the guide...

commit d3f24589a40bf38e79deefe289a8dc6845ed7017
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 22 02:10:31 2008 +0000

    * Fixed too frequent plugin update
    * Keep writing the guide...

commit da8fa65aca5669e6e6a56e1ef312569a7a017e39
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 20 10:44:51 2008 +0000

    More tweak for PDF guide

commit bacabc9a123355081f48ae60cda4f238488602e9
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 20 10:23:18 2008 +0000

    * Reformatted XSL files
    * A little bit of tweaking in PDF stylesheet

commit ea7c7e769cce94cf44e2b95da36171ce672be169
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 20 09:11:54 2008 +0000

    * Replaced callout-bug with simple co tags
    * Stylesheet update

commit 0f3edc8cd8ef10e1afddfc996848677a00be962f
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 20 06:38:56 2008 +0000

    Fixed cosmetic errors by overriding the default stylesheets

commit 6e696ffc518b23a2c60b60c5dc1dd6e052753081
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 19 11:52:30 2008 +0000

    * Added more shortcut entities

commit 3c0d4a5c400b8f8f90a61fea0f7abc0b9f9aec92
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 19 11:16:28 2008 +0000

    * Extracted common entities into custom.dtd
    * Keep writing the getting started chapter

commit 0547b35559846247f9cb550e9fbfb8fff6553f07
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 19 08:23:51 2008 +0000

    Defined four entities related with Netty

commit 032226521dc7af4f28a746cdbe3b11d81112e406
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 19 07:37:55 2008 +0000

    Fixed incorrect docbook location

commit b571bdc0e2cc31e7bdc7fef4ea9648f9b33329b5
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 19 07:28:48 2008 +0000

    * Updated to the latest version of jdocbook plugin and jbossorg styles
    * Writing the getting started chapter...

commit ac5a2a2f03490ae119271dbe45873072202d667b
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 19 06:16:14 2008 +0000

    Renamed introduction to getting started

commit d52b238d6260382d650ae8afcdac49f825d60a7c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 18 03:15:48 2008 +0000

    * Fixed issue: NETTY-46 Excessive exception creation overhead when there are many pending write requests in a closed channel
      * Added NioWorker.cleanUpWriteBuffer()
    * Fixed issue: NETTY-47 Channel is not closed immediately when write operation fails due to closure.
      * Made sure to call NioWorker.close() in NioWorker.write(Un)Fair() and to call NioWorker.cleanUpWriteBuffer() in NioWorker.close();

commit 0caeb69ae6bc0fca2220ed63607eeff98dfea3c8
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 16 12:32:31 2008 +0000

    Added a link to the project

commit a668e5066a5e5f627afe4fb27ca8d57027fee122
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 16 12:27:15 2008 +0000

    * Added 'State Management' chapter (just a placeholder for now)
    * Wrote the preface

commit 3759a9b0d61504f8156da3c8725e9876187f0280
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 16 09:24:27 2008 +0000

    A little bit of comments on how version.txt is generated

commit 38b4da7f3be6d659ec5133b91442200a3d4c8695
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 16 09:20:17 2008 +0000

    * Added cross reference to the distribution
    * Tarball and zip distribution are not attached to save deployment time

commit 989674fac9cc6cc77b4cde5a920a3deb7027f7a5
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 16 08:58:41 2008 +0000

    * More compact distribution files
    * JavaDoc is not deployed anymore (major bandwidth / space hog)
    * Renamed docbook/image to docbook/images to avoid having to image directories

commit caa5c34cbef91fe378c479bd796cd5747f1e5d82
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 16 08:17:13 2008 +0000

    * Proper DTD declaration
    * Use of XInclude
    * Fixed incorrect document version

commit 107937d5ae566cee7deaae562ea5873c6d950bac
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 11 17:25:59 2008 +0000

    Fixed typo

commit 794bd98ae63fa0d360c45c0e0ba803eab5352a7a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 11 07:10:03 2008 +0000

    Updated dtd definition

commit 77b23c97e24733fc6db0c8df55c2d5297dc1e4ac
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 10 12:37:58 2008 +0000

    Preparing to write some real guide ...

commit b14b4c8714702ea09e8bbb44ad290bf358fa7ee2
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 10 12:24:58 2008 +0000

    Incorrect option name

commit 9d4e51c7e0d0ffeefcd1d99e5e9c342ea368b9f4
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 10 12:11:40 2008 +0000

    shutdown() should be OK too

commit 20bbd3e38f74ad1d719d08d1eda946f91b99cec7
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 10 12:01:28 2008 +0000

    Workaround for blocking I/O transport write-write dead lock

commit 3a991d33d8d9c5437f2061e3fc1eef563ca32bb5
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 10 00:39:45 2008 +0000

    Upgraded to APIviz 1.2.3.GA

commit 084efdde6de434092d20f22dc7f50af8850bf007
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 9 13:42:47 2008 +0000

    Resurrected lost comments and section ordering caused by Q4E

commit 20718a2b6407adaec6ff87365426e19fa6147731
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 9 13:26:15 2008 +0000

    Fixed indentation

commit 5b08a8c2b55678ec9884534297e0602a9512c85e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 9 13:15:14 2008 +0000

    Fixed a problem where tarball doesn't include a guide

commit a94661c2fcbf7dad2070910eed1432089ef23b52
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 9 13:11:43 2008 +0000

    Added a skeletal docbook generation

commit 1a196f3cc60c5228ed4e60b41fcd2cc05e1e37a9
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 9 11:27:32 2008 +0000

    Added svn:externals that checks out docbook-support

commit e57cf78af2a5e2dd90f99651769724c53f98f94a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 9 03:52:17 2008 +0000

    Specified the sourceclasspath option explicitly

commit 57bd9373b21a7be702b1ed3cd90406d9f62240e9
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 9 03:47:10 2008 +0000

    Upgraded to APIviz 1.2.2.GA

commit 482e2c46ee5607020393c24afe5a892297128122
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 6 09:52:07 2008 +0000

    Upgraded to APIviz 1.2.1.GA

commit d39fd30f098e4d7f051c5791afc47886d9f59416
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 6 09:34:40 2008 +0000

    Suppressed more warnings

commit beb0fb0d6f486f155d6de579194f41928cd621d1
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 6 09:30:20 2008 +0000

    * Added DummyHandler for testing
    * Suppressed unnecessary warning messages

commit e34d49449664a2a35da20d0e111c8f9c050a9938
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 6 09:11:18 2008 +0000

    Fixed a bug where AbstractChannelBuffer.writeBytes() decreases the writerIndex when the specified channel is closed.

commit 33a4a9f8e17e736f82c0a7d8fb0f303b3468db51
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Sep 6 09:04:11 2008 +0000

    It's more correct to remove the connector handler in ClientBootstrap

commit b7e9fa38ece29766b12062dc87dc5ee9cadba7df
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 5 12:21:57 2008 +0000

    Upgraded to APIviz 1.2.0.GA

commit 985d260c8b518b9633601d20c0e5290716a2428d
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 5 11:54:13 2008 +0000

    Cosmetic changes related with apiviz

commit 08f006c764120dc6215986b1579482e55eea1de7
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 5 11:38:00 2008 +0000

    Cosmetic changes related with apiviz

commit b8c14720034d905c81c6675aa61874262c22d992
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 5 10:58:37 2008 +0000

    Cosmetic changes related with apiviz

commit 5e767254eabaf5381560a8837704c071626ec072
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 5 06:38:38 2008 +0000

    Tabs to spaces

commit 6c0f7b68931b4d3efd975ec43fffcf84be508f7e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 5 06:32:48 2008 +0000

    Added COPYRIGHT.txt to the JARs

commit ef6404ae0cdf32cb420dfa4cf493cc63b724a517
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 5 02:07:10 2008 +0000

    Fixed ClosedChannelException in various integration tests

commit 27cc323dcebc7b79f6498152b4a456c279c0b3c9
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 5 01:58:35 2008 +0000

    Made sure flushPendingEncryptedWrites are called only when necessary

commit ab4d7f766066421eef7b3c6362bc59fe1fff6a74
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 5 00:59:07 2008 +0000

    Fixed an instruction about graceful shutdown - should use shutdownNow instead of shutdown for faster shutdown (and it's safe yet)

commit e1709c8e4bd901409f30dd2a55b4adc064b703c3
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 5 00:57:22 2008 +0000

    * Added another test case that checks shutdown time
    * Optimized the hex dump table generation in ChannelBuffers

commit a056b9af633042738afbc06fe267f7c9e447e68b
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Sep 5 00:01:33 2008 +0000

    * Fixed randomly failing ChannelBuffers.compareTo test
    * Used shutdownNow instead of shutdown to shorten the test running time
    * Added a test case that checks shutdown time

commit 500f972367ef2d1d24af24a0730f68659df2432a
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 4 12:38:17 2008 +0000

    Missing empty line between methods

commit 79499476c119e53b4b8afe0a231cafc7e1629496
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 4 12:37:37 2008 +0000

    * Added ReadOnlyChannelBufferTest
    * Added ReadOnlyChannelBuffer.toByteBuffers

commit d9a37093e2b24cd6d5dc09bde5ac596402e6226c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 4 11:53:44 2008 +0000

    More test cases and trivial fixes

commit 1d1e88397ea4acd548fd58b28b15a0bc492e810e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 4 11:29:22 2008 +0000

    Fixed a potential race condition in AbstractSocketStringEchoTest

commit 486eff6378c512f8f6f4c812353a9c1289bb4ee1
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 4 11:25:16 2008 +0000

    Suppressed a warning log caused by AbstractSocketServerBootstrapTest

commit f2267eb39ccff3604ddadcfafb6528e1d48198cf
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 4 11:19:49 2008 +0000

    Removed unnecessary warning logs related with ClientBootstrap

commit 8b9f63e578133664df86b8a734f70fb27ec067d5
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 4 11:14:43 2008 +0000

    Fixed issue: NETTY-43 (channelBound event can be fired more than once for NIO client socket)
    * Fixed NioWorker.register() to check NioClientSocketChannel.boundManually flag

commit 384e08209e58d1a5a632a168448046f30cff213b
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 4 07:26:07 2008 +0000

    Mismatching arrow length

commit a0b75a705e4011a5c983e4ded8fe94378d23cb69
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 4 07:24:42 2008 +0000

    Added JavaDoc to the handler.execution package

commit 35678cdf7337f5d240a864f2170b25398fd4c291
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 4 06:35:06 2008 +0000

    Added JavaDoc for handler.codec.replay

commit f744de9d851d20e5b5334bae7cb1f0b86c287e5d
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 4 05:48:41 2008 +0000

    * Added JavaDoc for the handler.codec.serialization package
    * Improved JavaDoc for handler.codec.string and handler.ssl

commit f0c2c95c32bd2b6913ed523ad855a2b05554e4e4
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 4 04:55:32 2008 +0000

    Added JavaDoc to handler.ssl package

commit 5a1f62f41915080686900869043751a015ec32f6
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 4 03:19:42 2008 +0000

    Updated the package description for handler.codec.string

commit 49e62cd000e6d359403a1f36201d28b568397c9c
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 4 03:14:19 2008 +0000

    Added JavaDoc for handler.codec.string

commit 26a1d6e429364575ff0f2c8bb989c8c4791b58b8
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Sep 4 03:00:48 2008 +0000

    Added JavaDoc for handler.codec.frame package.

commit a79f3ff15942069858cb63a81f78fabaa2ec3662
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 13:04:02 2008 +0000

    Extracted some important comments in the example code to a new section

commit f86a7d224bfb39f506e71c367a80aa37a6052fa8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 12:56:30 2008 +0000

    Added JavaDoc for FrameDecoder

commit 5cde160df69171042a39aef2c45d740e6e559ad6
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 10:57:17 2008 +0000

    link -> linkplain

commit 97b252afe359fb93d999f13fc79c8180c5bc32ae
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 08:30:17 2008 +0000

    Added a link to ChannelEvent in Channel JavaDoc

commit 036abda6015d1dd3724921bac69d930d70f02727
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 07:51:25 2008 +0000

    Calculated -> Obtained

commit d96b633b5f1048ca6ef9b032d956b0be77a11e66
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 07:49:59 2008 +0000

    * Added missing constructor JavaDoc
    * Fixed description of workerCount parameter

commit 101124f8b8b32529876d967796ef26e1a03c81fa
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 07:46:33 2008 +0000

    Explicitly mentioned that the nio worker threads run in a non-blocking mode

commit 1ed7741a968003de3cf58a559cbf2acfd09d2517
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 07:44:39 2008 +0000

    Added the limitation section to oio factories

commit 7e491614cb6e0c8420840f9ac14493e3e4c80de5
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 07:41:27 2008 +0000

    Added JavaDoc for channel.socket.nio and oio

commit 9e3973415eaf5aef8b3ee311c5bc696319bed604
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 05:20:49 2008 +0000

    > -> >=

commit fd261b1044ce0caa62aa12ca4bd2f0149158ab20
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 05:19:55 2008 +0000

    Added proper author / version tags

commit 48497ce1fd6770013b422b754dc91d763411958f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 05:17:59 2008 +0000

    Added proper author / version tags

commit 54e81bde7291fa8c073cfb301a350b18a98c0dbe
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 05:13:47 2008 +0000

    JavaDoc for channel.socket package

commit bb5c59e8166a5bf8d6e5e5c9d4ba0cf1344945ad
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 04:12:40 2008 +0000

    s/propagation //

commit 6b004f861b6accb211e64a3b82cd0609fcad6c66
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 04:10:04 2008 +0000

    Filled in JavaDoc for trivial methods

commit 38b3f4fa9804f4ce14a92795047a16f01c4d859f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 04:09:46 2008 +0000

    * Added DefaultChannelPipeline.toString()
    * Filled in JavaDoc for trivial methods

commit c2f38fb6d3299cf9c479164f6f18e1e18fee6b5d
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 03:58:20 2008 +0000

    More story in ChannelPipelineFactory

commit 76c9d8eb3cd53a610a7e4248dd3e53b02621f669
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 03:50:18 2008 +0000

    Rewrote the ChannelHandlerContext explanation

commit 62fc6b211e3f7342c9fb4370aa63a558e6ace58e
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 03:46:54 2008 +0000

    Added more hint to additional resources

commit 267a8cb1d7b58a1b1faf702cb2ab593e01fa4a24
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 03:39:27 2008 +0000

    Added event name column to the table in ChannelDownstreamHandler

commit 3e21792b12ee61b2ed3fddd4c01d29c79fa95619
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 03:10:00 2008 +0000

    Simplified a sentence in ChannelPipeline explanation

commit 3e699b7f4a52aa0d51cd8978eea27c603981eab0
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 03:08:27 2008 +0000

    More JavaDoc on ChannelEvent

commit b23b9dd03b0d5ca9898cc3f63cec8f849e7004a5
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 03:04:51 2008 +0000

    More explanation + more links

commit 80d14bbb0ebf3e6a7f501ef30933ae0abeb14e48
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 02:59:25 2008 +0000

    * Improved the diagram in ChannelPipeline

commit b06323011dea3e34ce6a900930458dd27b1c46c2
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 02:54:59 2008 +0000

    * Added JavaDoc for Channels
    * Improved the diagram in ChannelPipeline

commit 78075ad7fc82e6297e42217be0c7eaa9a9f1789a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 01:48:08 2008 +0000

    Improved ChannelPipeline documentation

commit a73cdb1a4ae2484a81529e4906c7f897877a13e6
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 01:30:17 2008 +0000

    Easier example for ChannelConfig downcasting

commit b88674e43730258b97d4ecb2cbd6208ed5d3ccdc
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 01:23:57 2008 +0000

    Simplified the pipeline diagram

commit a8155f6b7f2185e0da4d688038156ac1c7036927
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 01:12:37 2008 +0000

    Reordering the sections in ChannelPipeline

commit 6c8adf3198f2669063e8bc080c5e4aef24cffe45
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 01:09:40 2008 +0000

    Added a link to ChannelConfig in Channel

commit a145d578cc8b5656f7b42cd6066e23e948d0874f
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Sep 3 01:04:33 2008 +0000

    common -> recommended

commit 82e677591c1548210e2d95d2b081bdce6f2ccc85
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 2 14:23:40 2008 +0000

    Fixed incorrect description

commit 6c8acb25076048537bcb5d24aa48ba7468058cb0
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 2 14:21:40 2008 +0000

    More JavaDoc for Channels

commit c05a337d7475e4a66da6563ebb339addc5a10356
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 2 14:12:56 2008 +0000

    Added some links into the example code

commit 92ec297756b07b3e5573c45766b74271d4fb465e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 2 13:50:54 2008 +0000

    Emphasis on new expressions

commit cb5a3752828dcd1d591c6164b63f56104473b9a1
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 2 13:46:47 2008 +0000

    Shorter enum link

commit 658b40c42e9ab53a2a26297f6a9416fab7cf5e87
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 2 13:45:14 2008 +0000

    * Simpler sentences
    * More cross references
    * Fixed incorrect explanation related with attaching a pipeline to a channel

commit eef1c1d84d536b9762a3c415469f3eb2f7329be6
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 2 13:27:40 2008 +0000

    More cross-referencing

commit f9778a8dad13e395a6b9beaba66b1597086b4bd1
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 2 13:20:03 2008 +0000

    * Reorganized JavaDoc content
    * Added more missing JavaDoc

commit ed8651701d8a694c295666820604ef441f870c08
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 2 12:04:04 2008 +0000

    More JavaDoc

commit d1be3feefc417f6ebac8f07cbf1ddb3c276db2bf
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 2 10:39:57 2008 +0000

    * Fixed a problem Channel.bind/connect allows null parameter
    * More JavaDoc

commit c344058a6ff84b42721455b791549f71b88d6912
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 2 07:33:01 2008 +0000

    * Interpretation -> Meaning
    * Added more explanation to ChannelState

commit fe7e2ea4bb11a2f7075d66ba33b99736abc89156
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 2 07:22:16 2008 +0000

    Typo, grammar, duplication ...

commit b3c76b8cbf9e0871bf1df0ddfa4727ea5599585a
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Sep 2 07:13:20 2008 +0000

    JavaDoc...

commit f203cf4e22e4f774e362559278d0385ea9e0ac22
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 1 16:06:40 2008 +0000

    More JavaDoc in the buffer package

commit f4ce86a12d6390f60924685d19125e7686d77f15
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 1 16:01:47 2008 +0000

    Disambiguation in ChannelPipelineCoverage

commit 08e828c4fbaa5ada30aea35ee9f284e2ba10bc6e
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 1 15:56:45 2008 +0000

    More links to ChannelEvent and ChannelHandler in ChannelPipeline JavaDoc

commit 9cc8c284918b0cb801c391acedcb44c9f7ab4c17
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 1 15:52:26 2008 +0000

    JavaDoc

commit 4865bb7d451b923f355035b9d4005835af7d8993
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 1 15:19:34 2008 +0000

    JavaDoc

commit 47d141ed91c0e66326105511593b0dc1ab3cb1a3
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 1 14:34:56 2008 +0000

    Shortened the first statement of ChannelHandler description

commit 3e3162da1a047717cd1d31a224cf970354815fb3
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 1 14:31:31 2008 +0000

    Added support for IBM AIX 1.5 VM

commit fefe10f2dd80df11240dacbaae0e99586acbecf5
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 1 14:29:17 2008 +0000

    JavaDoc

commit 781a93bd43e1f919e83c76d1ebac724a1376012d
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 1 09:43:49 2008 +0000

    Added missing JavaDoc for the classes in org.jboss.netty.logging

commit e5f88b536b3e1fd65ce359ed037995498e43c47e
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 1 09:41:33 2008 +0000

    Added missing JavaDoc for the classes in org.jboss.netty.util

commit e11e0f7ed584fa4868ea09ee63db2048d0123605
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 1 09:27:53 2008 +0000

    Grammar

commit 7a503f15192f258e8541caf11c7f2439ffe3a9ea
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Sep 1 07:56:24 2008 +0000

    * Added support for JRockit VMs
    * Fixed incorrect test result on Windows and Solaris for Sun VMs

commit b8c2051407f30cdf6cc3eed83e8025e106143e45
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 31 03:29:13 2008 +0000

    Added quick autodetection support for IBM JDK

commit 243264efb0adb7e1b4924c160820843d9c188376
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 31 02:59:54 2008 +0000

    NioWorker optimization
    * Use of read write lock
    * Split write into two versions (fair and unfair)

commit c0b5d93b0a68d65f1732546b73cb026593fbad46
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Aug 30 12:57:04 2008 +0000

    Added system property detection for Mac OS X

commit d2a07463ef5b2ce9be151ce1598c46c21183e366
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Aug 30 07:29:00 2008 +0000

    Added SystemPropertyUtil

commit 93c1dd58ba5d5bf9f857a4d9b494406cbfce0efe
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Aug 30 07:28:23 2008 +0000

    Improved NIO constraint level detection - should start up faster with Sun JVM

commit fd4de999bbe1210fc9230ac2f917ddd3416f05b9
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Aug 30 06:19:45 2008 +0000

    Decreased the number of wakeup() calls even when then constraint level is greater than 0

commit 90e35cfc14c71d428dd1711f7d77019aff47c511
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Aug 30 01:33:22 2008 +0000

    Typo

commit 79743b0528aab02bab662d284a37610b98e42492
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 29 00:26:54 2008 +0000

    Tiny micro optimization on test data generation

commit 8da05713fe08b226dbb6d1ee4bf6066954e29fce
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 29 00:23:47 2008 +0000

    Fixed issue: NETTY-40 (SslHandler dead lock on Oio-Oio communication)
    * More fine-grained lock acquisition

commit 57c76d348dec3ac97afeed9a52988ea35747f583
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 28 13:42:29 2008 +0000

    [maven-release-plugin] prepare for next development iteration

commit 02ec93b33a43d6c979e3923ff23466241788e5e1
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 28 13:41:07 2008 +0000

    [maven-release-plugin] prepare release netty-3.0.0.CR3

commit 921ec38d0cde165f8fb8f84c2bf601641227f5a9
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 28 13:39:49 2008 +0000

    Trying to avoid redundant deployment on release

commit 07fba7f8593822dc1b18eaad98537b03c6b56be7
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 28 13:37:26 2008 +0000

    Suppressed unnecessary warning message .. (was not fixed in the previous fix)

commit 506b7aeb0577238b66bef26bf068543a0d95bf59
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 28 12:31:39 2008 +0000

    Package renaming... (forgot to add 'codec')

commit e03ce3e6613c8522f9af6139198647f6ff3d8486
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 28 12:15:38 2008 +0000

    Decreased the test loop count

commit ea784b00b5029a6ecce3d2358a1739115c58688e
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 28 12:15:00 2008 +0000

    Fixed unnecessary exception notification on AsynchronousCloseException

commit ec8f441ea6b62f30ef1011b91af76fff6eda3277
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 28 11:49:22 2008 +0000

    Improved selector loop shutdown time

commit 7d1ec117878b63aa610410432fd713523790b0c4
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 28 11:36:26 2008 +0000

    * Fixed issue: NETTY-36 DelimiterBasedFrameDecoder can choose a wrong delimiter when more than one delimiter are specified.
    * A bunch of integration tests (78% test coverage)

commit 605ac3d35aba0cd165d9f2a34b4fb9a452eca7bb
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 28 09:07:34 2008 +0000

    * Improved socket echo integration test to check the state more strictly.
    * Fixed issue NETTY-35 (ChannelFuture returned by Channel.close() is not notified if SslHandler is in the pipeline.)

commit ddbabc98ef08505146d9fde2f723621de2d0a589
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 27 13:14:28 2008 +0000

    Integration tests (echo test)

commit c7a2e05ef23016558d7876965d8bcd5cc6bb11f8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 27 12:22:06 2008 +0000

    Typo

commit 4144017b7547ed64a02426cc5cb5d88fdd632a82
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 27 12:21:04 2008 +0000

    * Fixed a bug where CompositeChannelBuffer.order() returns a wrong order
    * Fixed a bug where ChannelBuffer.wrappedBuffer() can generate a non-EMPTY_BUFFER when the buffer is actually empty

commit 77419346011466427d129d42127b26d00f167f4a
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 27 07:17:41 2008 +0000

    More test cases..

commit deb5760801e65bb110f80a2420a373a7cfbefa21
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 27 05:45:45 2008 +0000

    Added a test case for ChannelBufferIndexFinder

commit 98f533db965d3752732971db57f9ca5d14348322
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 26 16:09:00 2008 +0000

    Improved Client/ServerBootstrapTest to run with both oio and nio socket transport

commit 94831112eea349d43675aa782144cbd9e5b79ff4
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 26 15:57:21 2008 +0000

    More test cases

commit 2878a47222e91520064c73fed7603fc744f9c268
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 26 15:39:34 2008 +0000

    Added author and version tags

commit a7c181072efaa18d12c75de7c09beca4443e6ae5
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 26 15:37:08 2008 +0000

    Fixed issue: NETTY-33 (CompositeChannelBuffer.copy() does not respect the byte order.)
    * More test cases..

commit 6f34eca0b66eb42e0579674337fd46e09c14caf9
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 26 14:15:10 2008 +0000

    More test cases

commit 3b69dd7ddb72c2708cf4ae804a8fa9afcc4a2ebc
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 26 11:08:55 2008 +0000

    Fixed issue: NETTY-32 (ChannelBuffer.duplicate() sometimes doesn't copy all properties)

commit a57e21aee738d0d4eea7c9efced510bc6f2cd907
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 26 10:54:42 2008 +0000

    More test cases

commit 834b373a9626e558c1a554a1f3ec757c49588d0f
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 26 10:52:21 2008 +0000

    Fixed issue: NETTY-31 (ChannelBuffers.equals() fails to compare the buffers with different endianness)
    * Same fix to compareTo

commit f4165b10e907eb8c69f221a7a201f70f46ef7bfe
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 26 10:35:36 2008 +0000

    Fixed issue: NETTY-31 (ChannelBuffers.equals() fails to compare the buffers with different endianness)
    * Made sure to swap the order if the two buffers have different orders

commit 48929afd60aab28574b2356773ab24f80dfa193b
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 26 07:39:39 2008 +0000

    Fixed a bug where DuplicateChannelBufferTest doesn't test DuplicateChannelBuffer

commit 57551914af578f4d4615440828394b769338ce7f
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 26 07:30:41 2008 +0000

    * More tests
    * Fixed bulk transfer bugs in the CompositeChannelBuffer

commit 8f3799c02e1026bc4f5f4bb9958fb94b57a72490
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 26 07:12:04 2008 +0000

    * More tests
    * Fixed bugs related with bulk byte transfer

commit 6801298956af84fe8d611bb9ed6d2f72e27506cc
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 26 05:43:41 2008 +0000

    More test coverage

commit 1ae53127777ee7da5fafe466658c443b25219ebb
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 13:02:02 2008 +0000

    Fixed compilation errors in JDK 1.6 and 1.5 - was using 1.7 :-(

commit db1ee352283de31472caa2b1a7e266d2e0a13678
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 12:51:54 2008 +0000

    Can't reproduce anymore (!?)

commit e5f1639f241213d45b354753a721c1600edc1fde
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 12:46:33 2008 +0000

    * JdkLogger passes null method name now - it's allowed in the specification explicitly.
    * Better failure tracking in ServerBootStrapTest (still not sure if it's reproduceable)

commit 10bc616b4b5599becbcbcc4b76d95fb2a8a4106c
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 12:06:27 2008 +0000

    Fixed issue: NETTY-30 (JDK Logging is slow.)
    * Used logp instead of log

commit 88833d9ded6949e03de3a98ccff67c67b2c6e551
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 11:45:13 2008 +0000

    Fixed issue: NETTY-29 (ChannelBufferInputStream.readFully(byte[], int, int) should throw IndexOutOfBoundsException.)
    * ChannelBufferInputstream.checkAvailable() throws IndexOutOfBoundsException instead of IllegalArgumentException now.

commit a4edbd444e3cb1afb981eef3de5b96d7f74cff3d
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 11:35:12 2008 +0000

    * Added SucceededChannelFutureTest
    * Added FailedChannelFutureTest

commit e2262e135a082122b80430d7fbe77c0685ad0db9
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 11:27:30 2008 +0000

    * Forgot to update the pom.xml
    * Added CompleteChannelFutureTest

commit a8c5f840bda6206c164f77ec269f8c9c13d527de
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 11:12:06 2008 +0000

    Fixed a problem where an executor shuts down too early

commit 4d13ccc1092b83d79980419e04392dd239b01676
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 11:04:01 2008 +0000

    Fixed failing tests

commit 9dabeb4e473d0590cef1ff5c1edaa51d18d36b3b
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 11:02:30 2008 +0000

    Added test cases for the logging package

commit f22f07ec5172ee81b4b16160c1a71ecdca1a8edc
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 10:17:17 2008 +0000

    More test coverage

commit 4f276cf52ebe159044fdd7b85172ec75a1485a36
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 10:16:56 2008 +0000

    Moved inner classes out to top level classes for easier testing

commit b4d84ce73b3209b3165b3934ca9f0ca98ff35e89
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 08:57:03 2008 +0000

    Fixed issue: NETTY-28 (Channel.compareTo() can return 0 for different channels.)
    * Changed AbstractChannel.compareTo(Channel) to use the id of the channels instead of the identity hash codes

commit 6ff5a87d01b3af3c441983a60b7e9a4c46d46106
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 08:44:35 2008 +0000

    * Removed SilentLoggerFactory which is not so useful
    * Added ClientBootstrapTest
    * Added ServerBootstrapTest
    * Fixed a unexpected behavior when null localAddress or remoteAddress is specified

commit 3dbe9737357844b4201ac70ef6e97801225d7c3d
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 06:05:21 2008 +0000

    * Simplified the SecurityManager implementation in DebugUtilTest
    * Added ThreadRenamingRunnableTest

commit 4d55da5c7e0ec262c7ea2fdd8cd99bbe6a36367f
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 05:48:45 2008 +0000

    Added StackTraceSimplifierTest

commit 60f08c5d9fa9414bf27f2f7327420b9c7fea3eb9
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 05:26:54 2008 +0000

    Added SwitchableInputStreamTest

commit 1194ac0f39e2830b7e6eef2c6727533158d8c3c4
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 05:15:33 2008 +0000

    Added MapBackedSetTest

commit 5a63b91c490de20444572e710b9486ef34fe2a39
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 05:00:13 2008 +0000

    Removed unused constructor in MapBackedSet

commit 7b8d48304451b3f97d65bd39cf407bf665a9f843
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 04:58:35 2008 +0000

    Added ImmediateExecutorTest

commit 1a5ccaf98dc81f05a7dbb8ec4900da49b0b3483c
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 04:53:52 2008 +0000

    Added DebugUtilTest

commit ca249684a6de8f214b2e6f2f3a1f364780bbedaa
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 04:42:18 2008 +0000

    * Renamed ConvertUtil to ConversionUtil
    * Added ConversionUtilTest

commit c84b1bc139839af5bafb5d5313f8858cc00f2a2f
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 04:31:44 2008 +0000

    * Added MapUtilTest
    * Added SilentLoggerFactory for a testing purpose

commit d2c157d32d41f501f9a6ff88cb4f2c81618911b4
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 04:01:07 2008 +0000

    Added one more minimal test case to TimeBasedUuidGeneratorTest

commit 6b995456fecab57823d71ebfe9d3e6d41db4c3a9
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 03:58:01 2008 +0000

    Added a test case for TimeBasedUuidGenerator

commit c95b219a56311c72b8ee8bb4b6b916cad898df23
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 25 03:38:13 2008 +0000

    * Extracted Bootstrap.isOrderedMap into util.MapUtil
    * More test coverage for Bootstrap

commit a0d9a59206ffd6fa96c26aa0f07170531f6f6fdc
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Aug 23 10:23:54 2008 +0000

    Fixed issue: NETTY-26 (Infinite blocking in old blocking I/O transport.)
    * Added a proper interrupt() call in OioWorker.close() to wake the worker thread up

commit b4c6d82be736baf971ed9c7bc1896413a0577d1e
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 22 11:39:02 2008 +0000

    Fixed issue: NETTY-25 (Unnecessarily logged exception in the blocking I/O server socket)
    * Suppressed the expected exception logging

commit abdefea7032455624699b588d00d40b636a05675
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 21 06:11:35 2008 +0000

    [maven-release-plugin] prepare for next development iteration

commit 71d876d0ddf78a42b953daa898cbf0d8e9829e62
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 21 06:11:17 2008 +0000

    [maven-release-plugin] prepare release netty-3.0.0.CR2

commit 9dd9b00851f77b9b35ca724ab785fdc29b79e492
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 21 05:54:59 2008 +0000

    Fixed issue: NETTY-24 (Move ChannelBuffer.EMPTY_BUFFER to ChannelBuffers.)

commit ff8f148990a594c8d66c5f0403ae77511317face
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 21 05:46:49 2008 +0000

    Made sure debug mode is turned off if no, false, or 0 is specified.

commit 5ac5611e5179b89c9440f3bcc3f95597dabf0610
Author: Trustin Lee <trustin@gmail.com>
Date:   Thu Aug 21 05:38:43 2008 +0000

    Resolved issue: NETTY-23 (Simplify an exception stack trace.)
    * Added DebugUtil and StackTraceSimplifier
    * DefaultExceptionEvent and InternalLoggerFactory simplifies the stack trace unless Netty debug mode is enabled.

commit 84ea01693116dc3dada13f28e10ad7b2158027a7
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 20 08:22:05 2008 +0000

    Forgot to check in ...

commit 07f17cfd4f51a397ebd058bd047ec330f8d4b572
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 20 07:06:10 2008 +0000

    Fixed silly NPE in SslHandler

commit 66f7d5a800517dcb788c736c2ef482e669c7de15
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 20 03:09:23 2008 +0000

    Fixed NETTY-21 and NETTY-22:
    * ChannelBuffer.setBytes() and writeBytes() doesn't work when a NIO channel is specified.
    * ChannelBuffer.setBytes() and writeBytes() should return -1 if the connection is closed.
    * Changed NioWorker.read() to use ChannelBuffer.writeBytes()

commit edd969b384583e63aa8e463cd8edbb4dd1380514
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 20 02:14:52 2008 +0000

    Fixed slow write performance on some circumstance

commit e9e1b0ebe6ba19f922db5a8141eec09d7a3cc6e9
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 20 01:38:21 2008 +0000

    Even more optimization in NioWorker.write()

commit 96e1cf0385ef2015c87d836ee60ba20d57d6c3fe
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 20 01:37:15 2008 +0000

    Fixed a problem with NIO constraint level detection in JRE 1.5

commit 1ec42526d5fb2afb4627872dce163c4c526a0a44
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 19 23:52:20 2008 +0000

    Related issue: NETTY-18 (Performance degradation when Channel.write() is called from outside an I/O thread (NIO transport)
    * More precise constraint level detection.

commit 4247232f51a883d8ba26ff9662a2768238ea826f
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 19 14:02:27 2008 +0000

    Updated error message

commit e53b802def234b863ca4258fb270d0f398964b67
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 19 14:01:41 2008 +0000

    Relates issue: NETTY-18 (Performance degradation when Channel.write() is called from outside an I/O thread (NIO transport)
    * Allowed a user to specify the NIO provider constraint level using the system property
    * Added detectConstraintLevel() method to implement the constraint level autodetection

commit 795b14a7b116111574d019bd38aaaa7e33f61120
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 19 13:50:42 2008 +0000

    Relates issue: NETTY-18 (Performance degradation when Channel.write() is called from outside an I/O thread (NIO transport)
    * Extracted NioWorker.WAKEUP_REQUIREMENT_LEVEL to NioProviderMetadata

commit 3828b3754a54310fcf3f2fe0940e1bdb43041309
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 19 13:21:22 2008 +0000

    Relates issue: NETTY-18 (Performance degradation when Channel.write() is called from outside an I/O thread (NIO transport)
    * The bottleneck was too frequent wakeups.  I found that recent NIO implementations don't require wakeups to get / set interestOps.

commit 07e0bf9413d08a29ab1a865a16381ede7ded8b82
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 19 10:21:04 2008 +0000

    Removed unused code in DefaultChannelFuture

commit 65eda0902d61438898fb15acc5828ff68fc2160e
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 19 10:17:00 2008 +0000

    Fixed an issue: NETTY-20 (Incorrect object length constraint in ObjectEncoder and ObjectEncoderOutputStream)

commit c76451b874dcf22962b09c3d538d978a0ae2c723
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 19 10:08:20 2008 +0000

    ObjectEncoder should allow zero estimated length as we did in DynamicChannelBuffer

commit 6460f2a70f1a2e4db294564aa787fa39a88d3f96
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 19 10:06:55 2008 +0000

    Runnable should be declared first as declared in the constructor

commit 4d17646743238dc456f99a2bd697b2a4c814327b
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 19 10:06:07 2008 +0000

    NETTY-19 Investigate if there's any copyright issue related with MINA
    * Replaced NamePreservingRunnable with a new ThreadRenamingRunnable

commit 094a4aaa8db5bbae6aa475fadabce0a933b5286a
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 18 16:51:06 2008 +0000

    Fixed issue: NETTY-17 (NioSocketChannelConfig.setWriteSpinCount() does nothing.)
    * Added an assignment statement

commit 1837b200512031991c963e935705a0447673c3be
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 18 11:30:58 2008 +0000

    Fixed an issue: NETTY-16 (SSL handshake failure should be reported to the ChannelPipeline.)
    * Added SslHandler.newHandshakeFuture() and replaced all handshake future creation code with it

commit 49bac1aa73e0c83f1d6526c95954ed3b8bcb7485
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 18 11:24:04 2008 +0000

    Fixed an issue: NETTY-15 (NullPointerException in SslHandler if handshake() method is not called explicitly.)
    * Modified SslHandler.setHandshakeSuccess/Failure(..) to create a new handshakeFuture if not created yet.

commit 2d6cfe9af6a8ed85c4ee43c435c791a0a261bb08
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 18 11:17:42 2008 +0000

    Fixed an issue: Netty-14 (IllegalArgumentException when creating a dynamic buffer with 0 estimatedLength)
    * Allowed zero initial capacity
    * Made the exception message more specific

commit a7c73d2e52535abe93e40daccbdb133bb41014fc
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 18 11:11:55 2008 +0000

    Fixed issue: NETTY-13 (Stack overflow when an exception is thrown while processing ExceptionEvent)
    * Renamed notifyException to notifyHandlerException
    * Prevented infinite recursion caused by failure on exceptionCaught

commit a05905f64a8f0c93e4e05804ecfcae119bbaa264
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 18 03:48:01 2008 +0000

    Removed PMD and Cobertura plugin from the pom.xml - IDE will take care of them

commit 4fe7536dbfc213c82adb4027c4c3c2412e4c16a9
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 18 03:39:11 2008 +0000

    Added reports directory to svn:ignore

commit a2eed846b4a1ebd1b4c623e22cbff299ed19bc6a
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 18 03:07:05 2008 +0000

    Fixed NETTY-10 (Bootstrap.getPipeline() shold throw an IllegalStateException if pipelineFactory property is in use.) and NETTY-12 (Bootstrap.setPipeline() doesn't update the pipeline property at all.)

commit bd51f12fb7d1b47af301f56e918dca5445005166
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 18 03:01:24 2008 +0000

    More test cases for Bootstrap

commit a421f94909a1f98095dd707002b4cdf3c084d815
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 18 02:54:03 2008 +0000

    A couple more test cases for Bootstrap

commit 82f4d193b11de75a30512e34ec00a7e63b55d7d1
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 18 02:46:41 2008 +0000

    Added test cases for Bootstrap

commit 866a74305c4b64eb5ffb177d7cee43638579c6f3
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 18 02:38:54 2008 +0000

    Fixed issue: NETTY-10 (DefaultChannelPipeline.removeFirst() and removeLast() throws NullPointerException)
    * Made sure NoSuchElementException is thrown when the pipeline is empty
    * Made sure NullPointerException is not thrown when the pipeline contains only one handler

commit 8e9b51a412b2e99d0456dc91c633651b2e9c361e
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 18 02:27:11 2008 +0000

    Fixed issue: NETTY-9 (DefaultChannelPipline.getFirst() and getLast() throws NullPointerException if the pipeline is empty.)
    * Added null check code in getFirst() and getLast()

commit 7e0ac9123163a238ef3102b66b703bd2a47be9ab
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 17 05:57:09 2008 +0000

    Added easymock to the test scope dependency

commit 166363d438860b03f5915ac23826f7e644768bbd
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 13 08:21:53 2008 +0000

    Fixed deployment problem

commit 1163a0eaf9eef8cdb9df95786aa0fc80b01e4eb8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 13 08:08:55 2008 +0000

    [maven-release-plugin] prepare for next development iteration

commit 807f69eaec608836d30b70dc20e09b3901fc7fb3
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 13 08:08:37 2008 +0000

    [maven-release-plugin] prepare release netty-3.0.0.CR1

commit 1b40d714b5f44cac5ca8890ff0d0bf94312ca3a8
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 13 08:07:17 2008 +0000

    Fixed last-minute problem with OSGi bundle packaging

commit 5f14fdd3481e4340adfc9778512805bd20e45813
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 13 07:20:22 2008 +0000

    [maven-release-plugin] rollback the release of netty-3.0.0.CR1

commit c92d4f72dd950426b97d06006688d3d13bf57ba9
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 13 07:05:39 2008 +0000

    [maven-release-plugin] prepare for next development iteration

commit af2bcd291fb15ed68a179d2c463a9b59d25d6414
Author: Trustin Lee <trustin@gmail.com>
Date:   Wed Aug 13 07:05:21 2008 +0000

    [maven-release-plugin] prepare release netty-3.0.0.CR1

commit 12dd5a35b33733dca1776c963da6d6e0bb729536
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 12 12:09:50 2008 +0000

    More JavaDoc for ChannelPipelineCoverage

commit 93f76ce594cb2953f22d072190537f0bd32eeccd
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 12 11:58:15 2008 +0000

    * More comments on examples
    * Added JavaDoc for ChannelPipelineCoverage which is somewhat difficult to understand.

commit 5e99787df64efa8b10dbb4d0266bfe564d5f2357
Author: Trustin Lee <trustin@gmail.com>
Date:   Tue Aug 12 10:39:53 2008 +0000

    Split DiscardHandler into DiscardClientHandler and DiscardServerHandler for easier understanding

commit 7de02097d0e71f301126c9312189deb47027b6f7
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 11 08:03:35 2008 +0000

    Added APIviz tags to the logging package

commit 31aa46874164916fd371a84948b04d2a2e45f99c
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 11 07:48:45 2008 +0000

    Polished JavaDoc

commit 27827068cdafc63e664c4371ed602bc956576c64
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 11 07:46:54 2008 +0000

    Fixed wrong explanation in ServerBootstrap

commit e5def24c8bd470984e44d30d88e49c06a81ae937
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 11 07:33:19 2008 +0000

    Added JavaDoc for ChannelFuture and its related types

commit 0d5657b923e589ac2e2d48a3deb9e8ee86261695
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 11 06:59:15 2008 +0000

    Removed an empty line

commit 24b4db3f5773cb739531f82eb6662dad9df2fe80
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 11 06:57:13 2008 +0000

    JavaDoc for the bootstrap package

commit ad805a1f703eeaa64f7af2a9be1c4994f657950a
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 11 04:10:20 2008 +0000

    Fixed a JavaDoc error in ChannelBuffer

commit b2cc6c264cd24fe3ef3c274b5467e044e6176585
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 11 04:08:41 2008 +0000

    More JavaDoc

commit 0a594a27d5584f174abd1545aed9f273c208ac81
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 11 03:36:49 2008 +0000

    Fixed another two contract violations in AbstractChannelBuffer

commit d882e4f27cb175c0a0c66ddc9e340075f746a37c
Author: Trustin Lee <trustin@gmail.com>
Date:   Mon Aug 11 03:33:25 2008 +0000

    * JavaDoc cleanup
    * Fixed contract violation in AbstractChannelBuffer.get/setBytes()

commit 298c9eda57694e9487aac14d5c290214a21ff7f1
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 15:43:04 2008 +0000

    Removed a unnecessary period

commit f34a0182184d3b3cb046064c0dd32196182c31ad
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 15:34:17 2008 +0000

    More JavaDoc

commit 5cd1d72571ccf2ddf3a8836b9b0938d8cfc758e7
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 15:26:44 2008 +0000

    * Removed a unused method in ConvertUtil
    * More JavaDoc

commit c7da1869f86c8d39d473ff7d04b9f00301b0fdf7
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 15:25:16 2008 +0000

    More JavaDoc

commit e7e22321d01601a487729ba43d6b76b4edf67369
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 15:20:26 2008 +0000

    Renamed writable space to writable bytes to avoid ambiguity

commit 6f30a4a748afced35b10f7d42290977a6eb56df2
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 15:16:02 2008 +0000

    Fixed a bug where Channel.getBytes and setBytes don't update the argument's reader/writerIndex when relative indexing is used.

commit a1c07e91228f01e88c1ae68f5db6fa557e58f5c1
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 15:10:27 2008 +0000

    * Updated ChannelBuffer JavaDoc (fixes and additions)
    * Changed ReplayingDecoderBuffer to reject more potentially dangerous operations

commit c58e224b7e63d94d9bd801c708c2b0215a8c33bf
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 14:25:13 2008 +0000

    Added even more JavaDoc

commit 1ad95d7433f67e1b888f521e27a0293b1d9c5288
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 13:29:00 2008 +0000

    * Fixed wrong parameters in AbstractChannelBuffer.getBytes(ChannelBuffer)
    * Added variants of getBytes and setBytes to AbstractChannelBuffer

commit fdde3ff7f1c610097f6763c416bd505981afaee2
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 07:41:08 2008 +0000

    Added the package-info for the util package just in case someone wants to figure out what this package is for.

commit aa2616ccce08068eb1091d0841ee0a753b7b2003
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 07:38:28 2008 +0000

    JavaDoc for the logging package

commit b3519dec05cfd3310c9a6819a00ff9d76c20ee97
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 07:11:06 2008 +0000

    Typo

commit 2d49a467aa428862d3c120b2c82fc28826492f99
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 07:08:29 2008 +0000

    More JavaDoc

commit df5b82beb4e235a9d3dcfd4cebfaa5eac7b601d6
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 07:00:51 2008 +0000

    * Added ChannelBuffers.copiedBuffer(ByteOrder, String, String)
    * More JavaDoc

commit 0c8361e21fd524a0e0c39361cd1753c31244bf64
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 06:45:47 2008 +0000

    Renamed ChannelBuffers.wrappedBuffer(String, String) to ChannelBuffers.copiedBuffer which is correct

commit ee62e8bbc0e1ccac8cd5befca27ec3ac59adc663
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 06:38:54 2008 +0000

    More JavaDoc

commit 80ab091c6e101892e65285c7f51a0be80afacf81
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 06:17:47 2008 +0000

    More JavaDoc

commit cb88eb0aefa94a8919b7cbef75d593ad5adef4a6
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 05:52:36 2008 +0000

    More JavaDoc

commit 5590fe913d0d3350fccd76627ccc7ccc473bcb9a
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 05:09:55 2008 +0000

    More JavaDoc in ChannelBuffer

commit 4710fb93deae14601a91a2d6737edfc5ba191bc3
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 01:24:44 2008 +0000

    Indentation

commit 58599fe343d637c3722ff6a5bf8c8bd11d563d59
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 01:20:30 2008 +0000

    Added more toString() variants to ChannelBuffer - makes ChannelBuffer more convenient to decode a NUL-terminated string.

commit 19fcbac57544096a98558cb07705502f31873230
Author: Trustin Lee <trustin@gmail.com>
Date:   Sun Aug 10 00:52:59 2008 +0000

    Added unsigned integer access methods

commit 289e84d69cebc9d292e247358b3e28d30dee9f7c
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Aug 9 23:47:40 2008 +0000

    Added ChannelBuffer.readSlice() methods in case a user doesn't want to copy at the risk of modified content

commit b33bbf7da77219df2773711fc8e08e528acde949
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Aug 9 23:33:52 2008 +0000

    Removed ChannelBuffer.readBytes() which is useless

commit 88b7cf3e36ddb84451fbe8ae1f60a496a2e118c5
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Aug 9 23:28:59 2008 +0000

    Renamed InternalLoggerFactory.get/setDefault to get/setDefaultFactory to clarify its meaning.

commit 7c2934c15f4f53e256a13433018265641cd6757e
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Aug 9 23:25:20 2008 +0000

    Fixed StackOverflowError in InternalLoggerFactory.getInstance()

commit e50a736c29c6af71d59a14465f985f991b6e557d
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Aug 9 15:05:53 2008 +0000

    * Moved all factory methods in InternalLogger to InternalLoggerFactory
    * Made InternalLogger an interface

commit d5d92ae04d97b91987f2ad8b75b05aa893e93618
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Aug 9 14:52:19 2008 +0000

    Renamed Logger and LoggerFactory to InternalLogger and InternalLoggerFactory to state that these classes for internal use only explicitly

commit 2740da7c70d6d47d6d0670c1bb903e974330b320
Author: Trustin Lee <trustin@gmail.com>
Date:   Sat Aug 9 04:36:27 2008 +0000

    Fixed wrong name

commit 7acc333dd9ca933623944c02577b8d4dd888fc42
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 8 10:17:26 2008 +0000

    * Added string conversion methods to ChannelBuffer
    * Added string wrapper methods to ChannelBuffers

commit 1eab02881ee8864e1e289bf07f83c1701ced51b0
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 8 08:14:32 2008 +0000

    * Renamed ChannelBuffer.writeNul() to writeZero();
    * Added ChannelBuffer.setZero()

commit aff7cd89823d4c687df7c6b3546984d82dc74142
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 8 02:18:59 2008 +0000

    More concise package description for org.jboss.netty.logging

commit 44c5860d255505550dcb7314ae2c2df2d5141934
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 8 02:07:57 2008 +0000

    Renamed ChannelBuffer.writePlaceholder to writeNul

commit fbf8ab5ea7bea54b1370c77f344d50f834bdf430
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 8 02:02:00 2008 +0000

    Removed links to the source code in JavaDoc

commit 53cc66142c9cf1a59d096423d4a4514cd4f25037
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 8 01:59:33 2008 +0000

    Fixed APIviz tag errors

commit 796379090d6e2259b08d985e5a1e19e9ef7a28ca
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 8 01:48:10 2008 +0000

    Added COPYRIGHT.* to the assembly

commit 94c91ee52921569086eb3a033350444a74fb6b18
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 8 01:45:55 2008 +0000

    * Added .settings to svn:ignore

commit 0202a01cf1e7fd383afa36756c34d1443f6b50cb
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 8 01:40:10 2008 +0000

    * Changed all package names to org.jboss.netty.*
    * Added .classpath, .project and target to svn:ignore

commit 1bc79ea2a41845133c5b97a66ba104bab80b95ab
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 8 01:27:24 2008 +0000

    * Updated all license headers
    * Added missing license headers
    * Updated mailing list address and my e-mail address

commit f812cde87f959243015bedae65de2bf5c2276b5d
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 8 00:52:35 2008 +0000

    Updated NOTICE.txt and added COPYRIGHT.txt following the JBoss.org guideline

commit aef2ab453a8b11984c4fe64ba27612a1308ee490
Author: Trustin Lee <trustin@gmail.com>
Date:   Fri Aug 8 00:37:18 2008 +0000

    Initial import.  Needs to:
    * rename packages
    * update license information
