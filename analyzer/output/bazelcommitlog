commit 34d02ef1a47cdb7847fdd12e96d7532dc7e0d7df
Author: janakr <janakr@google.com>
Date:   Tue Nov 21 05:45:25 2017 -0800

    Clear interrupted bit in thread when throwing an interrupted exception that came from an AbstractParallelEvaluator evaluation. It's against the standard Java contract to throw but still have the thread's interrupted bit set.
    
    Also get rid of some unnecessary initializeTester() calls in MemoizingEvaluatorTest: we already call it via a @Before annotation.
    
    PiperOrigin-RevId: 176496034

commit f241929014afa80a99be572275464ea126bac94e
Author: ajmichael <ajmichael@google.com>
Date:   Thu Nov 16 09:37:13 2017 -0800

    Build databinding annotation processor in host configuration.
    
    Also, add a fake databinding processor target.
    
    Bazel users will need to do something like this:
    
    # WORKSPACE
    local_repository(
        name = "databinding",
        path = "./databinding",
    )
    bind(
        name = "databinding_annotation_processor",
        actual = "@databinding//:annotation_processor",
    )
    
    # databinding/BUILD
    java_plugin(
        name = "annotation_processor",
        ...
    )
    ...
    
    https://github.com/bazelbuild/bazel/issues/2694
    
    RELNOTES: None
    PiperOrigin-RevId: 175975110

commit 617f8ff0f502e911bba61d0c33390413bef9250c
Author: brandjon <brandjon@google.com>
Date:   Fri Oct 6 06:07:13 2017 +0200

    Pass SkylarkSemantics through Skyframe instead of the options class
    
    Also remove the use of the @UsesOnlyCoreTypes annotation on SkylarkSemanticsOptions. It was only there to help mark that the options class was safe to put in Skyframe.
    
    RELNOTES: None
    PiperOrigin-RevId: 171248504

commit a7cb14e16dd4ba760b444a97a687fd65a9d7f3a7
Author: cushon <cushon@google.com>
Date:   Wed Oct 4 06:29:46 2017 +0200

    Add an explicit dependency on jsr250_annotations
    
    PiperOrigin-RevId: 170960535

commit 74776b409214846aa3fe3a41a3447c6412dc046c
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Mon Oct 2 09:58:58 2017 -0700

    Add a bootstrap tomcat_annotations_api target
    
    Change-Id: I830f42ad0fce63df504618e333a77f9cca15b7d5

commit 57d4a1e6bb5892c60890b4a4c5bd2dd22af073bf
Author: shreyax <shreyax@google.com>
Date:   Tue Sep 26 00:17:29 2017 +0200

    Don't generate the mutability annotation until necessary.
    
    PiperOrigin-RevId: 169969136

commit d22e1dea7aa6135baceee18c6eac23a7d1b3c18e
Author: Dmitry Lomov <dslomov@google.com>
Date:   Mon Sep 25 08:53:50 2017 -0400

    Check parameter types for methods when multiple types are allowed.
    
    Relanding
    https://github.com/bazelbuild/bazel/commit/17214ac78ffaec369d5d5bafe62a39730473cfaa
    with fixes to 'repository_ctx.download()' and
    'repository_ctx.download_and_extract()'.
    
    I reviewed other usages of @ParamType annotation - I do not think there
    are more issues.
    
    Fixes #3714.
    
    Change-Id: I17087ef3fc2d28ab99224740a2164675a49847d3
    PiperOrigin-RevId: 169896223

commit 987f09f0cf3c5bf2fc5157c20fe0f7979978a40b
Author: ccalvarin <ccalvarin@google.com>
Date:   Thu Aug 31 19:50:39 2017 +0200

    Move caching of OptionDefinitions to be static, and remove uncached extractions of OptionDefinitions.
    
    We already had caching of OptionsData objects, for a list of OptionsBases, but repeated the reflective work for the same OptionsBase if it appeared in different lists. Now that the @Option-annotation specific state is isolated to the OptionDefinition object, this can be trivially cached by OptionsBase.
    
    There are a few additional convenient side effects to this change. This should slightly decrease the memory use of the OptionsParser, since it already cached this map per options-base, and now only requires a single copy. It also means that parts of the code base that needed details of an option's definition no longer need to either obtain an option definition themselves or need access to an OptionsData object, which should be private to the OptionsParser anyway.
    
    PiperOrigin-RevId: 167158902

commit be6a40181efb6bcb4167328cada3d541c009c3aa
Author: nharmata <nharmata@google.com>
Date:   Wed Aug 23 21:09:11 2017 +0200

    Annotate CriticalPathComputer's Subscriber methods with @AllowConcurrentEvents so as to allow concurrently published events to be handled concurrently. The lack of this annotation means sequential @Subscriber work is a bottleneck during the execution phase.
    
    RELNOTES: None
    PiperOrigin-RevId: 166235310

commit 31599166a464a207168b9abbcc23678487253e57
Author: ccalvarin <ccalvarin@google.com>
Date:   Wed Aug 23 00:50:12 2017 +0200

    Adding compile time checks to the options parser.
    
    Keeping this simple for now, just checking that the options are declared in accepted places. Will convert static, annotation-content based checks to be done here instead of at runtime in a later change.
    
    TESTED: Added an option in a non-OptionBase, and verified that it failed to compile.
    PiperOrigin-RevId: 166126408

commit e8aae03888a44ee8d5264c3d8f6b3adaeb830df5
Author: ccalvarin <ccalvarin@google.com>
Date:   Tue Aug 22 07:17:44 2017 +0200

    Add OptionDefinition layer between the @Option annotation and its fields and the options parser.
    
    Removes any direct reads of the annotation outside of OptionDefinition. This allows for fewer manual checks for the annotation's existence, unifies error wording, and paves the way for potentially generifying the OptionsParser to accept different @Option-equivalent annotations.
    
    Also allows for cleanup of duplicate code by giving @Option-specific operations a clear home, such as sorts and default logic. In followup changes, we can eliminate some unnecessarily complex caching by instead memoizing values in the OptionDefinition. This will have the positive side effect of making sure reads come from the cached values.
    
    RELNOTES: None.
    PiperOrigin-RevId: 166019075

commit 86f6dc25a6ce8e50ce237c19a434d4e871fd0f73
Author: tomlu <tomlu@google.com>
Date:   Mon Aug 14 18:13:46 2017 +0200

    Add @CompileTimeConstant annotations to CustomCommandLine.
    
    This enforces certain memory-efficient patterns. For deliberate use of dynamic strings, explicitly named overloads are introduced, with javadoc that guides the programmer into making the right choice.
    
    This CL is a memory no-op on benchmarks, but it tries to prevent backslide by making sure programmers make conscious choices when they construct their command lines.
    
    RELNOTES: None
    PiperOrigin-RevId: 165185997

commit 941d6aa61e928bde63bce06fca9ad39e93e66433
Author: cushon <cushon@google.com>
Date:   Mon Jul 31 18:14:02 2017 +0200

    Include annotation processor names in JavaCompileAction progress messages
    
    PiperOrigin-RevId: 163701792

commit e1d3b87302cb11a4a1bad72b22cbe4b998296314
Author: laszlocsomor <laszlocsomor@google.com>
Date:   Thu Jul 20 10:10:45 2017 +0200

    Automated rollback of commit 01ddfb7bf418b371859de62f4eab2f41ea9a4a4a.
    
    This is a partial rollback.
    I restored the old flags (with PathListConverter),
    added the new ones, added deprecation warnings and
    annotations, and added code to concat the values
    of new and old.
    
    Existing released versions of Bazel should keep
    working with the new code until 2018-01-31, i.e.
    for the next ~6 months. After that I'll remove the
    old flags and the PathListConverter.
    
    *** Reason for rollback ***
    
    Fixed broken integration with release Blaze.
    
    *** Original change description ***
    
    Automated rollback of commit 5752463ece84ebb4fb074888cba57412ab8d86b3.
    
    *** Reason for rollback ***
    
    Broke too many targets.
    
    ***
    
    RELNOTES: none
    PiperOrigin-RevId: 162587548

commit f4aeaedb5f72f234711813b84e214c1edd94d643
Author: laszlocsomor <laszlocsomor@google.com>
Date:   Tue Jul 18 16:30:36 2017 +0200

    CustomCommandLine: add emptiness checks
    
    This is a semantic roll-forward of https://github.com/bazelbuild/bazel/commit/a76c94be7c56b93fc5a2f9ececfba7ac1f61f69c
    which was rolled back in https://github.com/bazelbuild/bazel/commit/33cd68e18f554b98194b4ce924580d3333ab9217 due to
    memory regressions.
    
    In this commit:
    - add @Nullable annotations to
      CustomCommandLine.Builder.add* methods where it
      makes sense
    - add Preconditions.checkNotNull for non-nullable
      arguments
    - add emptiness checks for Iterables in
      add(String, Iterable) style methods, to avoid
      adding the argument when the Iterable is empty
      and so the argument would not be followed by any
      values
    
    RELNOTES: none
    PiperOrigin-RevId: 162349842

commit 33cd68e18f554b98194b4ce924580d3333ab9217
Author: laszlocsomor <laszlocsomor@google.com>
Date:   Tue Jul 18 09:21:33 2017 +0200

    Automated rollback of commit a76c94be7c56b93fc5a2f9ececfba7ac1f61f69c.
    
    *** Reason for rollback ***
    
    Caused memory regression.
    
    *** Original change description ***
    
    CustomCommandLine.Builder: clean up its interface
    
    In this commit:
    - remove unused methods and classes
    - turn CustomCommandLine.ArgvFragment into an
      interface
    - remove the
      CustomCommandLine.TreeFileArtifactArgvFragment
      abstract class; it only had one remaining
      subclass
    - add @Nullable annotations where nulls are fine
    - add Precondition checks for non-nullable args
    - simplify the interface by removing add* methods
      that can be composed of other add* methods; this
      makes it easier to see...
    
    ***
    
    RELNOTES: none
    PiperOrigin-RevId: 162320031

commit c82a19714dac1210654640ac1f5ca4d96df716a8
Author: ccalvarin <ccalvarin@google.com>
Date:   Mon Jul 17 21:13:39 2017 +0200

    Make the @Option annotation depend on the java version of the tagging enums.
    
    The option filters proto dependency can be removed from the OptionsParser. This is in response to option parser users that want to avoid the bazel-internal proto file in their dependencies.
    
    RELNOTES: None.
    PiperOrigin-RevId: 162249778

commit a76c94be7c56b93fc5a2f9ececfba7ac1f61f69c
Author: laszlocsomor <laszlocsomor@google.com>
Date:   Fri Jul 14 17:06:05 2017 +0200

    CustomCommandLine.Builder: clean up its interface
    
    In this commit:
    - remove unused methods and classes
    - turn CustomCommandLine.ArgvFragment into an
      interface
    - remove the
      CustomCommandLine.TreeFileArtifactArgvFragment
      abstract class; it only had one remaining
      subclass
    - add @Nullable annotations where nulls are fine
    - add Precondition checks for non-nullable args
    - simplify the interface by removing add* methods
      that can be composed of other add* methods; this
      makes it easier to see what the callers do with
      the Builder
    - remove add* methods that add a single argument
      followed by a list of other elements (or a
      joined string of them); these had a bug in that
      they didn't check if the collection was empty
      (only that it was not null), and if it was empty
      then the single argument was still added though
      it was not followed by any value
    - fix call sites of add* methods where we
      previously could have added a flag with an empty
      collection
    - audit every affected call site
    
    RELNOTES: none
    PiperOrigin-RevId: 161957521

commit 3fbd7c43fe329c7052b7105d6941205680fb1a3d
Author: ulfjack <ulfjack@google.com>
Date:   Mon Jul 10 13:19:19 2017 +0200

    Reimplement RemoteSpawnStrategy on top of RemoteSpawnRunner
    
    It is intentional that RemoteSpawnStrategy no longer contains any remote
    execution specific code. My intent is to merge all SpawnStrategy
    implementations into a single class (similar to the new RemoteSpawnStrategy),
    and delegate all the specific work to SpawnRunner implementations. However,
    we're not there yet, and we still need to be able to look up SpawnStrategy
    implementations by name through the annotations, so we still need separate
    classes for now.
    
    We might also want to have a shared test suite for all SpawnRunner instances
    that checks for basic compliance with the specification.
    
    Progress on #1531.
    
    PiperOrigin-RevId: 161377751

commit 59a0e4f10bf037dcd4f257b2e21573fa1b690e93
Author: ccalvarin <ccalvarin@google.com>
Date:   Fri Jun 30 16:01:36 2017 +0200

    Enforce the new category and effect tags.
    
    All options need to explicitly list their category and effect. If they are uncategorized, this makes the lack of information obvious. Remove defaults from the annotation to enforce this.
    
    Also enforce the sanity check that no option should have UNKNOWN or NO_OP effects listed with other effect tags.
    
    Includes some last default sets for options I missed in the previous mass-setting change, and some that were added since.
    
    PiperOrigin-RevId: 160641861

commit 5dda1bed046cf96cdc191adfa09a60f77c1d3e44
Author: ccalvarin <ccalvarin@google.com>
Date:   Fri Jun 30 00:32:43 2017 +0200

    Add the rest of the categories transition values to android options.
    
    Automated formatting fixes standardize the @Option annotation.
    
    PiperOrigin-RevId: 160582653

commit db8c437ea1858bc8b9e9b2ec6838ed3916d0ce4b
Author: ccalvarin <ccalvarin@google.com>
Date:   Thu Jun 29 22:47:37 2017 +0200

    Add categories transition values to android options.
    
    Automated formatting fixes standardize the @Option annotation.
    
    PiperOrigin-RevId: 160567787

commit 3bc1547a5cd78bd6639d968b3cfddbe26b1c31d5
Author: ccalvarin <ccalvarin@google.com>
Date:   Tue Jun 27 17:58:35 2017 +0200

    Add the default category and tag to all options.
    
    Move the default from the annotation to every mention. This makes the incompleteness explicit. Will add the defaults to test targets in a separate change.
    
    Once all dependencies are cleaned up, the Option annotation will no longer allow options without the documentationCategory or effectTag, to prevent new options being added without categories while we migrate to the new option categorization.
    
    PiperOrigin-RevId: 160281252

commit a9590f2b4b052c4d1c69b9cf99cf488ee994be8d
Author: gregce <gregce@google.com>
Date:   Tue Jun 20 21:37:00 2017 +0200

    Fix Android data binding for rules with no direct resources.
    
    This essentially works by activating the annotation processor
    over such rules, even though technically that's unnecessary (since
    there are no new resources to process). But running the annotation
    processor guarantees we still process deps' resources, which
    guarantees the Java compiler references any Java classes
    mentioned in those resources.
    
    This prevents JavaBuilder's ---reduce_classpath from pruning these
    files out of the compilation classpath because "they were never used".
    
    PiperOrigin-RevId: 159597671

commit 2ba693ffbe824136a0ca5f47d34710612f6302c3
Author: cushon <cushon@google.com>
Date:   Tue Jun 20 14:10:29 2017 -0400

    Automated rollback of commit ce7c4deda60a307bba5f0c9421738e2a375cf44e.
    
    *** Reason for rollback ***
    
    See bazelbuild/bazel#3172
    
    *** Original change description ***
    
    Add an experimental flag to Turbine to indicate to annotation processors that they are running in hjar compilation
    
    PiperOrigin-RevId: 159585343

commit 4929ad79865f8c13ef3b33c827040f4a037e4afe
Author: brandjon <brandjon@google.com>
Date:   Fri Jun 16 21:27:56 2017 +0200

    Automated g4 rollback of commit 923d7df521f67d031b288180560848bd35e20976.
    
    *** Reason for rollback ***
    
    Breaks dozens of targets in the nightly with Tool Failure errors
    
    *** Original change description ***
    
    Clean up turbine action creation
    
    Support disabling javac fallback for actions without a direct
    classpath, and only use the 'JavacTurbine' mnemonic for spawns
    that require javac-turbine due to annotation processing to make
    it easier to collect metrics on that.
    
    Finally, remove --java_header_compilation_direct_classpath now
    that it has been productionized and enabled by default.
    
    PiperOrigin-RevId: 159260596

commit a6a9910ad8d5a22bfabfb20a92575090668f7a32
Author: ulfjack <ulfjack@google.com>
Date:   Tue Jun 13 17:15:45 2017 +0200

    Simplify BlazeModule.beforeCommand
    
    Don't pass the Command annotation explicitly, but add it to CommandEnvironment
    instead; most modules don't need it in the first place, so it was a lot of
    boilerplate for not much. Also change it so that the command is passed to the
    constructor.
    
    Add some documentation to the beforeCommand method.
    
    PiperOrigin-RevId: 158847128

commit 923d7df521f67d031b288180560848bd35e20976
Author: cushon <cushon@google.com>
Date:   Thu Jun 8 01:57:47 2017 -0400

    Clean up turbine action creation
    
    Support disabling javac fallback for actions without a direct
    classpath, and only use the 'JavacTurbine' mnemonic for spawns
    that require javac-turbine due to annotation processing to make
    it easier to collect metrics on that.
    
    Finally, remove --java_header_compilation_direct_classpath now
    that it has been productionized and enabled by default.
    
    PiperOrigin-RevId: 158359858

commit 54d6de7ce6d4e5ec95b94118376915df56ef06b3
Author: aehlig <aehlig@google.com>
Date:   Tue May 23 13:07:12 2017 +0200

    BEP: explicitly mark the important outputs as deprecated
    
    While the fact that they are only added temporarily is obvious
    from the comment, a machine-readable deprecation annotation is
    more likely to be honored. So add it.
    
    PiperOrigin-RevId: 156846712

commit 8db67cd3dedfbeec6ffdd19d215bcae673ca8575
Author: cnsun <cnsun@google.com>
Date:   Fri May 19 21:24:52 2017 +0200

    Keep annotations of default methods in interfaces during desugaring.
    
    RELNOTES: n/a
    PiperOrigin-RevId: 156582965

commit 40d9cb30f9f1a9b94367036b42fabe9fcdfece2e
Author: cushon <cushon@google.com>
Date:   Sat May 6 12:15:25 2017 -0400

    Allow android compilations to use type annotations
    
    PiperOrigin-RevId: 155287620

commit d74bf36232fbb1950eba32886d153767b3b9b177
Author: Stephen Twigg <twigg@google.com>
Date:   Fri May 5 15:44:40 2017 +0200

    Add compile_jars for Skylark to JavaProvider
    
    Add compile_jars Skylark accessor to JavaProvider. This outputs the
    non-recursive set of jars needed to build with this target. Allows
    Skylark tools to get the same set of compile_jars that JavaLibrary is
    getting.
    
    Added test that verifies Skylark was getting lists from both
    compile_jars and transitive_runtime_jars of the expected length. Then,
    verified (via test code) those nested sets were identical to the ones
    provided by the java_library.
    
    To reviewers:
    First, would like to add documentation flags to these fields in
    JavaProvider. Is it possible, instead of adding them to this map to
    follow use the @SkylarkCallable annotation to expose methods on
    JavaProvider instead? It would then also be nice to mark these as
    experimental since won't really know the final API until
    java_skylark_library sandwich is done.
    
    I also tested this locally via bazel build //src:bazel and then doing
    ~/bazelsandbox/bazel/bazel-bin/src/bazel test SomeTarget in a different
    repo that had a .bzl file trying to use compile_jars.
    
    Change-Id: I1779c1b6303f36e50076c3479bfcb15a25aa95d8
    PiperOrigin-RevId: 155191816

commit 902fefc347f243c42aa9444c75c7204e5e6462ac
Author: cushon <cushon@google.com>
Date:   Thu May 4 19:26:44 2017 +0200

    Use a normal SpawnAction for some header compilation actions
    
    If the compilation involves API-generating annotation processors none of the
    features in JavaHeaderCompileAction are necessary. Instead, just use a
    SpawnAction.
    
    Also set a different mnemonic (JavacTurbine) to track how often this happens,
    and to better understand the performanec breakdown between javac-turbine and
    regular turbine actions.
    
    PiperOrigin-RevId: 155094632

commit 46299b4b087222886dff4b6f2c197fb15e45acca
Author: cushon <cushon@google.com>
Date:   Thu Apr 27 22:36:54 2017 +0200

    Only create the databinding annotation file once
    
    PiperOrigin-RevId: 154462951

commit 46da1fca1b3b0b4cd4eb28c4ec4f3cb1b5a22dd4
Author: brandjon <brandjon@google.com>
Date:   Wed Apr 26 21:23:09 2017 +0200

    Add a way for options classes to mark that they are skyframe-friendly
    
    You can now use the annotation @UsesOnlyCoreTypes on a subclass of OptionsBase, to indicate that all of its options' types are restricted to a whitelist of immutable and serializable types. Subclasses of the annotated class must also follow the same restriction.
    
    RELNOTES: None
    PiperOrigin-RevId: 154328920

commit 6c906e7b08970c1b2f7e1cf6bcb3d0bddb1fa1e0
Author: Googler <noreply@google.com>
Date:   Wed Apr 5 21:53:45 2017 +0000

    Add missing @Test annotations to JUnit 4 tests, reduce the visibility of test helper methods to prevent them from being confused for tests, or add @Ignore to purposely disabled tests. This paves the way for unknown commit, which will cause Blaze to complain when methods that look like test methods are not annotated with @Test.
    
    For more details and FAQs please see:[]
    
    Tested:
        TAP --sample for global presubmit queue
        []
    
    PiperOrigin-RevId: 152309039

commit 418fcc73c0b5c553b1b945501bd10a394fa65f0d
Author: gregce <gregce@google.com>
Date:   Wed Apr 5 18:25:34 2017 +0000

    Upgrade Android data binding integration to work with newest libraries.
    
    This change makes Bazel work with data binding runtime libraries 1.3.1
    and buildtime libraries 2.3.1.
    
    The biggest change is to configure the annotation processor with javac
    annotation processor flags ("-Aflag=value") instead of directly through
    annotations in a template Java file.
    
    PiperOrigin-RevId: 152282448

commit f1309c4b699dfae293136a8adf041ee3ca4a75a4
Author: Googler <noreply@google.com>
Date:   Fri Mar 31 16:47:00 2017 +0000

    Allow protoc to emit annotation metadata files in addition to generated source.
    
    This includes the necessary changes to both CcSupport and JavaSupport to enable the protoc
    flags when enabled on the Blaze command line as well as the plumbing to the C++ rules to allow
    Kythe `.h.meta` files to be included as transitive required inputs.
    
    PiperOrigin-RevId: 151833238

commit 22d261c21748fba31797f0de8bd98fb2ff2fd2f5
Author: Jon Brandvein <brandjon@google.com>
Date:   Tue Mar 21 23:15:28 2017 +0000

    Add expansion functions to options parser
    
    This provides a way to programmatically define expansions of options based on what other options are defined for the parser. In particular, it will be used for the --incompatible_* changes mechanism, to turn on all incompatible change flags.
    
    Expansion functions are specified in the @Option annotation, similar to converters. They are computed when an OptionsParser is constructed, and inspect a preliminary version of its OptionsData to determine the expansion result. This is then cached in the final OptionsData used by the parser.
    
    Expansion information for usage strings is available, but only when the usage strings are obtained via the parser.
    
    --
    PiperOrigin-RevId: 150817553
    MOS_MIGRATED_REVID=150817553

commit 8d635fc57e37d53dceceebb3e0868005530f7d32
Author: Bazel Release System <noreply@google.com>
Date:   Thu Mar 16 13:18:30 2017 +0100

    Release 0.4.5 (2017-03-16)
    
    Baseline: 2e689c29d5fc8a747216563235e905b1b62d63b0
    
    Cherry picks:
       + a28b54033227d930672ec7f2714de52e5e0a67eb:
         Fix Cpp action caching
       + 6d1d424b4c0da724e20e14235de8012f05c470f8:
         Fix paths of binaries in .deb packages.
       + 0785cbb672357d950e0c045770c4567df9fbdc43:
         Update to guava 21.0 and Error Prone version 2.0.18-20160224
       + 30490512eb0e48a3774cc4e4ef78680e77dd4e47:
         Update to latest javac and Error Prone
       + 867d16eab3bfabae070567ecd878c291978ff338:
         Allow ' ', '(', ')' and '$' in labels
       + 7b295d34f3a4f42c13aafc1cc8afba3cb4aa2985:
         Pass through -sourcepath to the JavaBuilder
       + 14e4755ce554cdfc685fc9cc2bfb5b699a3b48f4:
         PathFragment comparisons are now platform-aware
       + ed7795234ca7ccd2567007f2c502f853cd947e50:
         Flag to import external repositories in python import path
       + 81ae08bbc13f5f4a04f18caae339ca77ae2699c1:
         Suppress error for non-exhaustive switches
       + e8d1177eef9a9798d2b971630b8cea59471eec33:
         Correctly returns null if an environment variables is missing
       + 869d52f145c077e3499b88df752cebc60af51d66:
         Fix NPE in Android{S,N}dkRepositoryFunction.
       + d72bc57b60b26245e64f5ccafe023a5ede81cc7f:
         Select the good guava jars for JDK7 build
       + 92ecbaeaf6fa11dff161254df38d743d48be8c61:
         Windows: Assist JNI builds with a target for jni_md.h.
       + 36958806f2cd38dc51e64cd7bcc557bd143bbdb6:
         Add java_common.create_provider to allow creating a
         java_common.provider
       + 8c00f398d7be863c4f502bde3f5d282b1e18f504:
         Improve handling of unknown NDK revisions in
         android_ndk_repository.
       + b6ea0d33d3ab72922c8fb3ec1ff0e437af09584d:
         Add the appropriate cxx_builtin_include_directory entries for
         clang to the Android NDK crosstool created by
         android_ndk_repository.
    
    Incompatible changes:
    
      - Depsets (former sets) are converted to strings as "depset(...)"
        instead of
        "set(...)".
      - Using --symlink_prefix is now applied to the output
        symlink (e.g. bazel-out) and the exec root symlink (e.g.
        bazel-workspace).
      - Bazel now uses the test's PATH for commands specified as
            --run_under; this can affect users who explicitly set PATH to
        a more
            restrictive value than the default, which is to forward the
        local PATH
      - It's not allowed anymore to compare objects of different types
        (i.e. a string to an integer) and objects for which comparison
        rules are not
        defined (i.e. a dict to another dict) using order operators.
    
    New features:
    
      - environ parameter to the repository_rule function let
        defines a list of environment variables for which a change of
        value
        will trigger a repository refetching.
    
    Important changes:
    
      - android_ndk_repository now supports Android NDK R13.
      - Android resource shrinking is now available for android_binary
        rules. To enable, set the attribute 'shrink_resources = 1'. See
        https://bazel.build/versions/master/docs/be/android.html#android_b
        inary.shrink_resources.
      - resolve_command/action's input_manifest return/parameter is now
        list
      - For increased compatibility with environments where UTS
        namespaces are not available, the Linux sandbox no longer hides
        the hostname of the local machine by default. Use
        --sandbox_fake_hostname to re-enable this feature.
      - proto_library: alias libraries produce empty files for descriptor
        sets.
      - Adds pkg_rpm rule for generating RPM packages.
      - Allow CROSSTOOL files to have linker flags specific to static
        shared libraries.
      - Make it mandatory for Java test suites in bazel codebase, to
        contain at least one test.
      - Support for Java 8 lambdas, method references, type annotations
        and repeated annotations in Android builds with
        --experimental_desugar_for_android.
      - Removed .xcodeproj automatic output from objc rules. It can still
        be generated by requesting it explicitly on the command line.
      - Flips --explicit_jre_deps flag on by default.
      - Activate the "dbg", "fastbuild", and "opt" features in the objc
        CROSSTOOL.
      - Remove support for configuring JDKs with filegroups; use
        java_runtime and java_runtime_suite instead
      - android_ndk_repository api_level attribute is now optional. If not
        specified, the highest api level in the ndk/platforms directory
        is used.

commit d7a780ee5ad87d2e9aa5c3b9d0ee91ea819f9b9b
Author: Googler <noreply@google.com>
Date:   Tue Mar 14 18:10:02 2017 +0000

    Type strip Python sources when building a target incompatible with inline
    annotations.
    
    --
    PiperOrigin-RevId: 150088575
    MOS_MIGRATED_REVID=150088575

commit 9954ef0354bdd0a3e74fceb7725404437c4d0c98
Author: John Cater <jcater@google.com>
Date:   Thu Mar 2 11:25:45 2017 +0000

    Adding name setting to @Parameters annotation, so that tests have consistent
    stable names, which helps when using --test_filter.
    
    --
    PiperOrigin-RevId: 148986130
    MOS_MIGRATED_REVID=148986130

commit 17db60ea7d9479975b263282004bcbfc8a0138e2
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Tue Feb 21 20:01:06 2017 +0000

    Remove javac-turbine hack to support a non-standard annotation processor
    
    --
    PiperOrigin-RevId: 148125885
    MOS_MIGRATED_REVID=148125885

commit 3a6f6297917b9d97d83d8384e346e2c725819c3d
Author: Janak Ramakrishnan <janakr@google.com>
Date:   Fri Feb 10 22:55:47 2017 +0000

    Add @Nullable annotations to PackageFunction#progressReceiver.
    
    --
    PiperOrigin-RevId: 147202629
    MOS_MIGRATED_REVID=147202629

commit 29aa0eb17c85a96e3edae8362ba93fddeed4c1e0
Author: Adam Michael <ajmichael@google.com>
Date:   Fri Feb 10 02:43:34 2017 +0000

    Open source java 8 desugarer.
    
    Fixes https://github.com/bazelbuild/bazel/issues/2222.
    
    RELNOTES: Support for Java 8 lambdas, method references, type annotations and repeated annotations in Android builds with --experimental_desugar_for_android.
    
    --
    PiperOrigin-RevId: 147109786
    MOS_MIGRATED_REVID=147109786

commit 6712cac0b3922822e297a518d988d9c5675adb29
Author: Bazel Release System <noreply@google.com>
Date:   Wed Feb 1 19:53:37 2017 +0100

    Release 0.4.4 (2017-02-01)
    
    Baseline: 4bf8cc30a
    
    Cherry picks:
       + ef1c6fd33: msvc_tools.py.tpl: Change default runtime library to
                  static
    
    Incompatible changes:
    
      - Only targets with public visibility can be bound to something in
        //external: .
      - The deprecated -x startup option has been removed.
      - docker_build: change the repository names embedded by
        docker_build. You can revert to the old behavior by setting
        legacy_repository_naming=True.
      - The string methods strip(), lstrip(), and rstrip() now
        by default remove the same whitespace characters as Python 3
        does, and accept
        None as an argument.
      - Deprecated globals HOST_CFG and DATA_CFG are removed. Use strings
        "host" and "data" instead.
      - repository_ctx environment is now affected by --action_env flag
        (value from the
        client environment will be replaced by value given on the command
        line through --action_env).
      - All executable labels must also have a cfg parameter specified.
      - Removed the cmd_helper.template function.
          The function was equivalent to:
            def template(items, template):
              return [template.format(path = i.path, short_path =
        i.short_path)
                        for i in items]
      - Tuples that end with a trailing comma must now be inside parens,
          e.g. (1,) instead of 1,
      - The traversal orders for depsets have been renamed. The old names
        are deprecated and will be removed in the future. New names:
        "stable" -> "default", "compile" -> "postorder", "link" ->
        "topological", "naive_link" -> "preorder".
    
    New features:
    
      - Skylark: you can now multiply a list by an integer to get the
        concatenation of N copies of this list, e.g. [a,b] * 3 =
        [a,b,a,b,a,b]
      - Allow Android aidl tool to add a jar to the program's classpath,
        such as if needed to support generated sources.
      - Add transitive proguard_specs when android_sdk.aidl_lib is
        specified
      - Windows: "/dev/null" is now a supported path, e.g.
        --bazelrc=/dev/null now works
    
    Important changes:
    
      - Bazel Android builds use the apksigner tool from the Android SDK
        build-tools. Bazel Android builds now require build-tools version
        24.0.3 or
        later.
      - Android SDK external bindings for support libraries, e.g.
        //external:android/appcompat_v4, are removed because the support
        library JARs that they referenced no longer ship with the Android
        SDK.
      - aar_import rule is now documented.
      - An IE bug was fixed in repository_ctx.download_and_extract
      - Update "-I" to "-isystem" in documentation to reflect current
        behavior.
      - android_sdk_repository build_tools_version is now optional. The
        highest installed build-tools will be used if none is specified.
      - New flag --sandbox_add_mount_pair to specify customized
        source:target path pairs to bind mount inside the sandbox.
      - expose proto_library descriptor set to skylark via
        <dep>.proto.descriptor_set
      - The `set` constructor is deprecated in favor of `depset`
      - Autodetect gold linker in cc_configure.bzl
      - Remove build flag --experimental_j2objc_annotation_processing. It
        is on by default now.
      - Set clang's -mwatchos-version-min correctly using the value of
        --watchos_minimum_os, not --watchos_sdk_version.
      - singlejar can now create jar files larger than 4GB.
      - android_sdk_repository and android_ndk_repository now read
        $ANDROID_HOME and $ANDROID_NDK_HOME if the path attribute is not
        set.
      - Removed broken api levels 3, 4 and 5 from Android NDK 12.
      - Default --android_dynamic_mode to off.
      - android_sdk_repository no longer requires api_level. If one is
        not specified, the highest android platform installed will be
        used. Furthermore, android_sdk's are created for all android
        platforms installed and can be specified with the --android_sdk
        flag.
      - To iterate over or test for membership in a set, prefer using the
        new to_list() method. E.g., "for x in myset.to_list():", or
        "print(x in myset.to_list())". Iteration/membership-test on the
        raw set itself is deprecated.
      - Remove support for --javawarn; use e.g. --javacopt=-Xlint:all
        instead

commit ce7c4deda60a307bba5f0c9421738e2a375cf44e
Author: Googler <noreply@google.com>
Date:   Tue Jan 24 14:56:29 2017 +0000

    Add an experimental flag to Turbine to indicate to annotation processors that they are running in hjar compilation
    
    --
    PiperOrigin-RevId: 145413255
    MOS_MIGRATED_REVID=145413255

commit afd34e072556b1565b43ebc2ba25980f595166c4
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Fri Jan 20 01:33:12 2017 +0000

    Fall back to the transitive classpath for top-level completion failures
    
    These exceptions are typically handled in javac and result in a diagnostic, but
    it's possible for them to be thrown to the top-level by plugins or annotation
    processors. If that happens they will be printed to the error output stream.
    
    --
    PiperOrigin-RevId: 145032097
    MOS_MIGRATED_REVID=145032097

commit cb21da8b2120ea39d16b949ce4267bd44c3a427e
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Fri Jan 13 17:55:30 2017 +0000

    Rollback of commit aad9b44898cf1562765755d475463145466ea7ae.
    
    *** Reason for rollback ***
    
    bazelbuild/bazel#2123 is fixed
    
    *** Original change description ***
    
    Add explicit type annotations in BlazeJavacArguments.java
    
    Fixes bazel-tests for java 7 after commit 3c5e55ff8e058b624ce26e803ff00434c70d4b91
    
    --
    PiperOrigin-RevId: 144453400
    MOS_MIGRATED_REVID=144453400

commit aad9b44898cf1562765755d475463145466ea7ae
Author: Marcel Hlopko <hlopko@google.com>
Date:   Wed Jan 11 10:00:21 2017 +0000

    Add explicit type annotations in BlazeJavacArguments.java
    
    Fixes bazel-tests for java 7 after commit 3c5e55ff8e058b624ce26e803ff00434c70d4b91
    
    --
    PiperOrigin-RevId: 144180125
    MOS_MIGRATED_REVID=144180125

commit 3c5e55ff8e058b624ce26e803ff00434c70d4b91
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Tue Jan 10 19:55:08 2017 +0000

    Invoke javac using the API, instead of main()
    
    This unifies the test and production javac invocations. Location arguments
    (e.g. classpath, sources) are now set programatically from Paths, instead
    of going through string args.
    
    The classloader masking plugin is now just a custom filemanager, since javac
    uses the same context for the entire compilation and we don't need a plugin
    to carry it across annotation processing rounds.
    
    --
    PiperOrigin-RevId: 144110025
    MOS_MIGRATED_REVID=144110025

commit 4ed99db3fbb6762556ed498d06637ca38d816d63
Author: Ulf Adams <ulfjack@google.com>
Date:   Tue Jan 10 11:17:25 2017 +0000

    Expose methods for the undeclared outputs and annotations directories
    
    This is part of a sequence of changes to update the test strategies; most of
    the actual code changes in this specific change is Google-internal, but I'm
    planning to update the external test strategies as well.
    
    --
    PiperOrigin-RevId: 144064802
    MOS_MIGRATED_REVID=144064802

commit efc117eec75f7588ffaecbc5f2eda039f6adf3b2
Author: Rumou Duan <rduan@google.com>
Date:   Tue Jan 3 15:53:55 2017 +0000

    RELNOTES:
    Remove build flag --experimental_j2objc_annotation_processing. It is on by default now.
    
    --
    PiperOrigin-RevId: 143444299
    MOS_MIGRATED_REVID=143444299

commit b91e35ee30afeb0dfb67f19b68fdada841cdca4c
Author: Nathan Harmata <nharmata@google.com>
Date:   Fri Dec 16 02:39:54 2016 +0000

    Some improvements to ParallelQueryUtils.
    
    (i) Use a CountDownLatch in ParallelQueryUtils#executeQueryTasksAndWaitInterruptibly to avoid busy-looping while waiting for query subtask completion (this busy-looping unnecessarily ties up a thread). But we still retain the fail-fast semantics we want (I renamed the method to emphasize this).
    
    (ii) Also have a special-case in ParallelQueryUtils#executeQueryTasksAndWaitInterruptibly for evaluating one query subtask so we don't wastefully use another thread.
    
    (iii) Also add ThreadSafety annotations to ParallelQueryUtils.
    
    ----
    
    (i) and (ii) combine to address the following theoretical issue. Suppose we're evaluating a query expression of the form "(e1 - e2) + (e3 - e4)". The old code would (with the worst-case FJP thread scheduling) have the following threads at the _same_ time:
    
    Main QueryCommand thread - executeQueryTasksAndWaitInterruptibly(queryTasks = [(e1 - e2), (e3 - e4)]
    FJP thread - executeQueryTasksAndWaitInterruptibly(queryTasks = [e2])
    FJP thread - eval(e2)
    FJP thread - executeQueryTasksAndWaitInterruptibly(queryTasks = [e4])
    FJP thread - eval(e4)
    
    So of those 5 concurrent threads, 3 would be doing busy-loop waiting. For more pathological query expressions, we could end up tying up lots of threads doing wasteful busy-loops.
    
    --
    PiperOrigin-RevId: 142215680
    MOS_MIGRATED_REVID=142215680

commit df12c925be1f9cb2469a8731f53dd369394be443
Author: Rumou Duan <rduan@google.com>
Date:   Mon Nov 28 18:01:34 2016 +0000

    Default flag --experimental_j2objc_annotation_processing to true.
    
    --
    MOS_MIGRATED_REVID=140369825

commit ca54283ffefd7bf4b978961959584af9714f1a05
Author: Carmi Grushko <carmi@google.com>
Date:   Wed Nov 16 20:03:39 2016 +0000

    Rollback of commit 2153790fbebaed4aef6544fea3a85a01749b0d11.
    
    *** Reason for rollback ***
    
    Causes NPEs in tests that use AutoValue, on Kokoro and CI.
    
    Bazel uses TestRunner_deploy.jar to run tests. To save time, we use the latest Bazel release to run tests. Therefore, we use a TestRunner_deploy.jar with an AutoValue 1.2 embedded.
    If the test requires AV itself, we use the one from HEAD, which is 1.4-rc1, therefore causing one-definition rule violations.
    
    Once we release a TestRunner without AV (commit 90b5b19927540fc1e1c9e1a7fbd05c816ae0e4e2), we can roll forward.
    
    
    error: @AutoValue processor threw an exception: java.lang.NullPointerException
      abstract static class AutoValuedClass implements TransitiveInfoProvider {
                      ^
      	at com.google.auto.value.processor.AutoValueProcessor.getFieldOfClasses(AutoValueProcessor.java:566)
      	at com.google.auto.value.processor.AutoValueProcessor.allMethodExcludedAnnotations(AutoValueProcessor.java:818)
      	at com.google.auto.value.processor.AutoValueProcessor.defineVarsForType(AutoValueProcessor.java:763)
      	at com.google.auto.value.processor.AutoValueProcessor.processType(AutoValueProcessor.java:488)
      	at com.google.auto.value.processor.AutoValueProcessor.process(AutoValueProcessor.java:195)
      	at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:803)
      	at com.sun.tools.javac.processing.JavacProcessingEnvironment.discoverAndRunProcs(JavacProcessingEnvironment.java:715)
      	at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$2000(JavacProcessingEnvironment.java:93)
      	at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1023)
      	at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1130)
      	at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1141)
      	at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:832)
      	at com.sun.tools.javac.main.Main.compile(Main.java:253)
      	at com.google.devtools.build.buildjar.javac.BlazeJavacMain.compile(BlazeJavacMain.java:140)
      	at com.google.devtools.build.buildjar.javac.BlazeJavacMain.compile(BlazeJavacMain.java:132)
      	at com.google.devtools.build.buildjar.AbstractJavaBuilder$1.invokeJavac(AbstractJavaBuilder.java:66)
      	at com.google.devtools.build.buildjar.ReducedClasspathJavaLibraryBuilder.compileSources(ReducedClasspathJavaLibraryBuilder.java:81)
      	at com.google.devtools.build.buildjar.AbstractJavaBuilder.compileJavaLibrary(AbstractJavaBuilder.java:69)
      	at com.google.devtools.build.buildjar.AbstractJavaBuilder.run(AbstractJavaBuilder.java:108)
      	at com.google.devtools.build.buildjar.BazelJavaBuilder.processRequest(BazelJavaBuilder.java:92)
      	at com.google.devtools.build.buildjar.BazelJavaBuilder.runPersistentWorker(BazelJavaBuilder.java:70)
      	at com.google.devtools.build.buildjar.BazelJavaBuilder.main(BazelJavaBuilder.java:47)
    
    *** Original change description ***
    
    Bazel to use AutoValue 1.4-rc1.
    The big improvement is the addition of @AutoValue.CopyAnnotations, which allows AutoValue classes to be exposed to Skylark via @SkylarkModule.
    
    --
    MOS_MIGRATED_REVID=139361042

commit 2153790fbebaed4aef6544fea3a85a01749b0d11
Author: Carmi Grushko <carmi@google.com>
Date:   Wed Nov 16 16:42:10 2016 +0000

    Bazel to use AutoValue 1.4-rc1.
    The big improvement is the addition of @AutoValue.CopyAnnotations, which allows AutoValue classes to be exposed to Skylark via @SkylarkModule.
    
    --
    MOS_MIGRATED_REVID=139336396

commit 1cb5664f0460e5572a657a00e3320d6ca2c5266d
Author: Klaus Aehlig <aehlig@google.com>
Date:   Thu Nov 10 11:34:46 2016 +0000

    Add type annotations for the benefit of Java 7
    
    --
    Change-Id: Iac9d4202e83853d9c796e517847131de3ca7c5e2
    Reviewed-on: https://bazel-review.googlesource.com/#/c/7331
    MOS_MIGRATED_REVID=138743393

commit d0761e6a641a33ca9e4ec8bf3f5c92f74a4c3c86
Author: Bazel Release System <noreply@google.com>
Date:   Wed Nov 2 13:36:35 2016 -0400

    Release 0.4.0 (2016-10-26)
    
    Baseline: 088bbc6
    
    Cherry picks:
       + b01160c: Stamp Windows release.
       + 2d6736e: Add --no-tty for gpg signing
       + 9b1dfb8: Remove .sig file before gpg signing
       + 81aede1: Reimplement whole archive on Windows
    
    Incompatible changes:
    
      - Skylark: updating list/dicts while they are being looped over is not
        allowed. Use an explicit copy if needed ("for x in list(mylist):").
      - Bazel now uses the --cpu flag to look up Jvms; it falls back
        to "default" if it can't find a Jvm matching the CPU value.
      - --command_port=-1 to use AF_UNIX for client/server communications
        is not supported anymore.
      - Sandboxed actions can access the network by default, unless their
        target has a "block-network" tag.
    
    New features:
    
      - Files now have an "extension" property in Skylark.
    
    Important changes:
    
      - Added a new flag --sandbox_tmpfs_path, which asks the sandbox to
        mount an empty, writable directory at a specified path when
        running actions. (Supported on Linux only for now.)
      - Update protoc-3.0.0-mingw.exe to a working (statically linked)
        binary
      - apple_static_library rule to create multi-architecture static
        archive files from Objc/C++/Swift dependencies on apple platforms
      - JS: Add support for localization with closure managed rules.
      - Create a flag --android_dynamic_mode to turn off dynamic mode
        during the Android split transition.
      - Darwin sandboxing is default.
      - Remove flag --experimental_zip_tree_artifact from j2objc Java
        annotation processing support.
      - A few functions are added to BUILD files for consistency (hash,
        dir,
          hasattr, getattr) with .bzl files, although they are not very
        useful.
      - --watchfs is now a command option; the startup option of the same
            name is deprecated. I.e., use bazel build --watchfs, not
        blaze --watchfs
            build.

commit 7f3ffbca55749b3720041fd9ab5b0b0962937039
Author: Laszlo Csomor <laszlocsomor@google.com>
Date:   Wed Oct 26 15:31:38 2016 +0000

    "bazel clean": prevent creation of command.log
    
    Open files cannot be deleted on Windows, thus
    `bazel clean --expunge` fails when it attemps to
    delete the `command.log` that stdout/stderr is
    tee'd into, and so does BlazeCommandDispatcher
    when it attemps to delete the `command.log` just
    before dispatching to the command implementation
    (not just `clean` but any command).
    
    This change:
    - closes `command.log` before we attempt to
      delete it
    - marks CleanCommand (through the Command
      annotation) as one that should not write to the
      command.log, thus we don't create a new instance
      of the file
    
    This change allows `bazel clean --expunge` to
    delete everything in the output base, with the
    exception of `jvm.log`. Unfortunately that file is
    opened by the C++ bazel client process, so we have
    to close it there prior to sending the clean to
    the bazel server.
    
    See https://github.com/bazelbuild/bazel/issues/1586
    
    --
    MOS_MIGRATED_REVID=137278553

commit 4f2e7d59a7b67ad587a634282b91c72ff96b9831
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Mon Oct 24 15:46:44 2016 +0000

    Prepare to remove --experimental_optimize_header_compilation_annotation_processing
    
    --
    MOS_MIGRATED_REVID=137035372

commit 3507f4947b939b3eae37c0dd04c76a80e7923aca
Author: Rumou Duan <rduan@google.com>
Date:   Thu Oct 13 21:14:24 2016 +0000

    RELNOTES: Remove flag --experimental_zip_tree_artifact from j2objc Java annotation processing support.
    
    --
    MOS_MIGRATED_REVID=136084697

commit beb00ebf7fb5223750011568019dbf80a0f3e8c5
Author: Jon Brandvein <brandjon@google.com>
Date:   Wed Oct 12 15:41:40 2016 +0000

    Remove unneeded annotation
    
    It was a temporary workaround due to client Skylark code that was sensitive to
    type(). That code has been fixed.
    
    --
    MOS_MIGRATED_REVID=135920620

commit 1171a7fb55ae9928cd976d4c3963f4874d58f60c
Author: Jon Brandvein <brandjon@google.com>
Date:   Tue Oct 11 17:51:06 2016 +0000

    Make EvalUtils.getDataTypeNameFromClass() look for @SkylarkModules in parent classes
    
    This is needed to let subclasses of @SkylarkModules have the same type() string as their superclass, without requiring a second annotation for the subclass.
    
    --
    MOS_MIGRATED_REVID=135814343

commit c79570cf340e158d5025ccdb1358c4e1548d2558
Author: Ulf Adams <ulfjack@google.com>
Date:   Tue Oct 11 12:29:40 2016 +0000

    Rollback of commit 9c25afe750a937b2152c21a93effc8b9ba82c27b.
    
    *** Reason for rollback ***
    
    Seems to break some parts of aspects.
    
    *** Original change description ***
    
    Make EvalUtils.getDataTypeNameFromClass() look for @SkylarkModules in parent classes
    
    This is needed to let subclasses of @SkylarkModules have the same type() string as their superclass, without requiring a second annotation for the subclass (which would lead to redundant documentation being generated).
    
    --
    MOS_MIGRATED_REVID=135786137

commit cc784073ca363ea25b3ee1a51c4a060ea2f5f081
Author: Googler <noreply@google.com>
Date:   Mon Oct 10 23:16:02 2016 +0000

    Rollback of commit 51417759a37e5b11003dd773d5c90ddd4c7a6aa7.
    
    *** Reason for rollback ***
    
    This CL is causing failures in one of our integration tests:
    //javatests/com/google/security/authorization/sphinx/integration:SimpleUIEditorPageE2eTest_firefox-linux
    
    [] link:
    []
    
    Note: Specifically, it looks like BinStackingShardingFilterFactory.java pointing to the branched RuntimeCost annotation is causing the failures.
    I tried to change our test to point to the branched RuntimeCost annotation but Target '//third_party/bazel/src/java_tools/junitrunner/java/com/google/testing/junit/runner/sharding/weighted:weighted' is not visible.
    
    *** Original change description ***
    
    Branched internal RuntimeCost in junitrunner.
    
    RuntimeCost class is needed by the package com.google.testing.junit.runner.sharding.weighted. I branched it from the internal code because the weighted package is now open sourced and does not have access to the previous import.
    
    This didn't break Bazel before because there was no dependency to the weighted target when building BazelTestRunner. I catched this trying to open-source junitrunner tests.
    
    --
    MOS_MIGRATED_REVID=135734237

commit a70d37391d7365f0d64be1fa0c49ce556a319094
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Fri Oct 7 13:33:44 2016 +0000

    Update Error Prone to 2.0.13
    
    http://repo1.maven.org/maven2/com/google/errorprone/error_prone_core/2.0.13/error_prone_core-2.0.13.jar
    http://repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.0.13/error_prone_annotations-2.0.13.jar
    http://repo1.maven.org/maven2/com/google/errorprone/error_prone_annotation/2.0.13/error_prone_annotation-2.0.13.jar
    
    --
    Change-Id: I4e8e8d82161860f9c758c0a957b0ccab7cbcb1bb
    Reviewed-on: https://bazel-review.googlesource.com/#/c/6210/
    MOS_MIGRATED_REVID=135470690

commit 63fd951ea79717ec539a8dbfdee37c527c770c75
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Fri Sep 23 09:36:05 2016 -0700

    Update Error Prone to 2.0.13
    
    http://repo1.maven.org/maven2/com/google/errorprone/error_prone_core/2.0.13/error_prone_core-2.0.13.jar
    http://repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.0.13/error_prone_annotations-2.0.13.jar
    http://repo1.maven.org/maven2/com/google/errorprone/error_prone_annotation/2.0.13/error_prone_annotation-2.0.13.jar
    
    Change-Id: I4e8e8d82161860f9c758c0a957b0ccab7cbcb1bb

commit 88b17775aa6857f4820efa6cae7eb5c7d124d504
Author: Klaus Aehlig <aehlig@google.com>
Date:   Wed Oct 5 09:30:33 2016 +0000

    Add more type annotations for the benefit of Java 7
    
    --
    Change-Id: I034fe094038a8fa62bcea3f410ae70174b947d79
    Reviewed-on: https://bazel-review.googlesource.com/#/c/6432
    MOS_MIGRATED_REVID=135210595

commit 2b1eec3f81881056e0ebef8df53cce4f10af447c
Author: Klaus Aehlig <aehlig@google.com>
Date:   Wed Oct 5 09:21:45 2016 +0000

    Add some type annotations for the benefit of Java 7
    
    --
    Change-Id: If2cd06ba19e1035275f30c445a99af7a7c81e1d8
    Reviewed-on: https://bazel-review.googlesource.com/#/c/6430
    MOS_MIGRATED_REVID=135210119

commit 9c25afe750a937b2152c21a93effc8b9ba82c27b
Author: Jon Brandvein <brandjon@google.com>
Date:   Tue Oct 4 22:39:39 2016 +0000

    Make EvalUtils.getDataTypeNameFromClass() look for @SkylarkModules in parent classes
    
    This is needed to let subclasses of @SkylarkModules have the same type() string as their superclass, without requiring a second annotation for the subclass (which would lead to redundant documentation being generated).
    
    --
    MOS_MIGRATED_REVID=135161653

commit 6696db2a5b880a69f14c395c0eb0af72986883a3
Author: Jon Brandvein <brandjon@google.com>
Date:   Tue Oct 4 20:18:19 2016 +0000

    Refactor getAnnotationFromParentClass() to a new SkylarkInterfaceUtils module
    
    --
    MOS_MIGRATED_REVID=135144084

commit 22ebfb834c9e79fec4f5ff39a3599af00130ca8f
Author: Jon Brandvein <brandjon@google.com>
Date:   Fri Sep 30 17:19:28 2016 +0000

    Fix NPE in skylark documentation processor
    
    Crash was triggered by overriding a @SkylarkCallable without repeating the
    annotation in the subclass's method.
    
    --
    MOS_MIGRATED_REVID=134797463

commit 95a87d0d8b26d9ca7d8d957dc23373b6a89e3d68
Author: Klaus Aehlig <aehlig@google.com>
Date:   Fri Sep 30 10:49:02 2016 +0000

    Add type annotation for the benefit of java 7
    
    Fixes #1863
    
    --
    MOS_MIGRATED_REVID=134767527

commit 03b9cfd3f9117fc22bf8ae129c316cf606b46a00
Author: Klaus Aehlig <aehlig@google.com>
Date:   Wed Sep 14 13:14:39 2016 +0000

    Add type annotations for the benefit of Java 7
    
    --
    MOS_MIGRATED_REVID=133119463

commit 15e5cdc3e4e1c931673427e1be216eee633eda57
Author: Klaus Aehlig <aehlig@google.com>
Date:   Wed Sep 14 11:22:28 2016 +0000

    Add type annotations for the benefit of Java 7
    
    --
    MOS_MIGRATED_REVID=133112586

commit 225f69fc83bf9cab6cf4ee3871e633efd96fdb33
Author: Irina Iancu <elenairina@google.com>
Date:   Thu Sep 8 12:18:35 2016 +0000

    Check in Dagger generated code to junitrunner.
    
    This is part of an initiative to remove Dagger from junitrunner. Because
    there are too many interdependent components that Dagger touches, its usage
    cannot be easily removed in small independent changes. Therefore the first step
    is to check in the code that Dagger generates (with slighty small changes, e.g.
    classes were renamed, some Dagger specific data types were changed to junitrunner internal types).
    The following steps include removing all the Dagger annotations and BUILD
    dependencies, and refactoring the generated code.
    
    --
    MOS_MIGRATED_REVID=132543906

commit f37750ab476e7ee535315d090bf48351e8cc74aa
Author: Nathan Harmata <nharmata@google.com>
Date:   Wed Sep 7 14:58:14 2016 +0000

    A bunch of small changes to prepare SkyQueryEnvironment for full-parallel evaluation:
    -Rename QueryExpression#evalConcurrently to QueryExpression#parEval. (parallelism is not concurrency! See https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/)
    -Have SkyQueryEnvironment#eval (used recursively in #evaluateQuery) dynamically call QueryExpression#parEval when appropriate.
    -Delete QueryExpression#canEvalConcurrently.
    -Add ThreadSafety annotations in a bunch of relevant places in the query codebase.
    -A bunch of testing infrastructure to test parallel query evaluation.
    -TODOs for implementing parallel evaluation of all QueryExpression nodes.
    
    --
    MOS_MIGRATED_REVID=132436340

commit 7576acc4702962af9143e49a6e0da89490449ca2
Author: Googler <noreply@google.com>
Date:   Thu Aug 25 21:33:55 2016 +0000

    Merge xmlns decls in old manifest merger to help transition
    
    The old manifest merger doesn't merge xmlns decls.
    That could be a problem if a library has xmlns:tools
    but the binary doesn't (and we don't strip tools:).
    Library manifests may end up with more xmlns:tools
    annotations while transitioning from the old manifest
    merger to the new. It would be a problem if the same
    manifest is used by both the old and new merger.
    An alternative may be to strip the tools annotations
    after merging w/ this old merger... other options?
    
    --
    MOS_MIGRATED_REVID=131332171

commit d0c5ff278a0c4cda57871f0b2a47a3c32e0c2b79
Author: Pedro Liberal Fernandez <plf@google.com>
Date:   Thu Aug 18 18:53:46 2016 +0000

    Fixes noneable annotation not being enforced in SkylarkCallable.
    
    --
    MOS_MIGRATED_REVID=130665520

commit 2d32c586cbaa61a158637224e0d2cfedb4c4b45d
Author: Damien Martin-Guillerez <dmarting@google.com>
Date:   Thu Aug 4 14:29:18 2016 +0000

    Enable named arguments for SkylarkCallable annotation
    
    This just add the support on the Skylark side, the documentation generator
    still needs to be updated.
    
    --
    Change-Id: Ic26547cdb8d2c5c01839a4014c10f1b9b209b92b
    Reviewed-on: https://bazel-review.googlesource.com/#/c/4247/
    MOS_MIGRATED_REVID=129328278

commit 70c772bc0ba2b04e00e53e36093dfa6531e2e034
Author: Bazel Release System <noreply@google.com>
Date:   Fri Jul 29 10:28:13 2016 +0200

    Release 0.3.1 (2016-07-29)
    
    Baseline: 792a9d6
    
    Cherry picks:
       + 25e5995: Rollback of commit
                  a2770334ea3f3111026eb3e1368586921468710c.
       + 2479405: Fix NPE with unset maven_jar sha1
       + 3cf2126: Rewrite the extra action info files if the data within
                  them changes.
       + 5a9c6b4: JavaBuilder: Reintroduce the -extra_checks flag.
    
    Incompatible changes:
    
      - Removed predefined Python variable "generic_cpu".
      - Skylark rules: if you set "outputs" or an attribute to a
        function, this function must now list its required attributes as
        parameters (instead of an attribute map).
      - The host_platform and target_platform entries are not written to
        the master log anymore.
      - Bazel requires Hazelcast 3.6 or higher now for remote execution
        support, because we upgraded our client library and the protocol
        it uses is incompatible with older versions.
    
    New features:
    
      - LIPO context (--lipo_context) can now also be a cc_test (in
        addition to cc_binary)
    
    Important changes:
    
      - If --android_crosstool_top is set, native code compiled for
        android will always use --android_compiler and not --compiler in
        choosing the crosstool toolchain, and will use --android_cpu if
        --fat_apk_cpu is not set.
      - Add --instrument_test_targets option.
      - apple_binary supports a new platform_type attribute, which, if
        set to "watchos", will build dependencies for Apple's watchOS2.
      - objc_binary now supports late-loaded dynamic frameworks.
      - Native Swift rules no longer pull in module maps unconditionally.
        Use --experimental_objc_enable_module_maps for that.
      - Merged manifests are guaranteed to have the application element
        as the last child of the manifest element as required by Android
        N.
      - The Android manifest merger is now available as an option for
        android_binary rules. The merger will honor tools annotations in
        AndroidManifest.xml and will perform placeholder substitutions
        using the values specified in android_binary.manifest_values. The
        merger may be selected by setting the manifest_merger attribute
        on android_binary.
      - The progress message would not clear packages that need to be
        loaded twice.
      - Remove warning for high value of --jobs.
      - Use the correct build configuration for shared native deps during
        Android split transitions.
      - When building ObjectiveC++, pass the flag -std=gnu++11.
      - use xcrun simctl instead of iossim to launch the app for "blaze
        run".
      - Glob arguments 'exclude' and 'exclude_directories' must be named
      - Bazel no longer regards an empty file as changed if its mtime has
        changed.

commit 009e05956acde1e9d61befad72f25375a5bad57b
Author: Rumou Duan <rduan@google.com>
Date:   Wed Jul 27 15:14:29 2016 +0000

    Experimental java annotation support with unpredictable action inputs/outputs in j2objc_library behind flag --experimental_j2objc_annotation_processing
    
    Also added flag --experimental_zip_tree_artifact to switch on and off the zipping implementation of tree artifact generation.
    
    --
    MOS_MIGRATED_REVID=128586669

commit 8d884216f6c6ea574ccdd3c57e07f5c9a03db3b1
Author: Rumou Duan <rduan@google.com>
Date:   Wed Jul 27 15:14:29 2016 +0000

    Experimental java annotation support with unpredictable action inputs/outputs in j2objc_library behind flag --experimental_j2objc_annotation_processing
    
    Also added flag --experimental_zip_tree_artifact to switch on and off the zipping implementation of tree artifact generation.
    
    --
    MOS_MIGRATED_REVID=128586669

commit a1a13aefe738cfa3991ae0ba89fe4488b78a1342
Author: Rumou Duan <rduan@google.com>
Date:   Tue Jul 26 17:23:26 2016 +0000

    J2ObjC wrapper support for java annotation support with unpredictable inputs/outputs.
    
    --
    MOS_MIGRATED_REVID=128485838

commit 8f5b5945379c558dfa21195ffd9a1df8ff0eccb4
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Thu Jul 21 11:12:47 2016 -0700

    Update Error Prone to 2.0.11
    
    http://repo1.maven.org/maven2/com/google/errorprone/error_prone_core/2.0.11/error_prone_core-2.0.11.jar
    http://repo1.maven.org/maven2/com/google/errorprone/error_prone_annotations/2.0.11/error_prone_annotations-2.0.11.jar
    http://repo1.maven.org/maven2/com/google/errorprone/error_prone_annotation/2.0.11/error_prone_annotation-2.0.11.jar
    
    Change-Id: I90d8d3f05d7aecf254d48db086cce0c7fa74706c

commit b2d7d26e9bbc40a40ad5f30a0e0bb800c2843028
Author: Florian Weikert <fwe@google.com>
Date:   Fri Jul 15 12:31:25 2016 +0000

    Renamed module java_annotation-processing to java_annotation_processing.
    
    --
    MOS_MIGRATED_REVID=127531480

commit c3112c2dea86cc64c6f68f4b7c9c620e014e620e
Author: David Chen <dzc@google.com>
Date:   Tue Jul 5 09:05:22 2016 +0000

    Display all allowed types for SkylarkSignature Params that allow multiple
    types.
    
    Fixes #921
    
    Certain parameters, such as the `executable` and `command` parameters of
    ctx.action, allow multiple types. However, the allowed types are not enumerated
    in the SkylarkSignature annotation, causing the generated Skylark Library
    document to not display any type information for those params.
    
    This change adds a new field, `allowedTypes`, to `SkylarkSignature` that is a
    list of `ParamType` objects. If the param can accept multiple types, then
    `type` is set to `Object.class`, and `allowedTypes` is set to the list of types
    that can be accepted.
    
    --
    MOS_MIGRATED_REVID=126617047

commit d565be110c283219f96f0c4f96fe232cb9f5b232
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Wed Jun 29 03:33:17 2016 +0000

    Add java_plugin.generates_api
    
    This attribute marks annotation processors that generate API code.
    
    If a rule uses an API-generating annotation processor, other rules depending on
    it can refer to the generated code only if their compilation actions are
    scheduled after the generating rule.
    
    In the future, annotation processors will only be considered by header
    compilation if they set generates_api=1.
    
    --
    MOS_MIGRATED_REVID=126152384

commit e1a4a812971f604d51bdf098b6117d9ba03da1c8
Author: Andrew Pellegrini <apell@google.com>
Date:   Wed Jun 22 20:46:21 2016 +0000

    Adds the Android manifest merger as an option for android_binary rules. The merger that is used (legacy or android) is controlled by the manifest_merger attribute on android_binary and the default is controlled by the --android_manifest_merger flag.
    
    RELNOTES: The Android manifest merger is now available as an option for android_binary rules. The merger will honor tools annotations in AndroidManifest.xml and will perform placeholder substitutions using the values specified in android_binary.manifest_values. The merger may be selected by setting the manifest_merger attribute on android_binary.
    
    --
    MOS_MIGRATED_REVID=125603954

commit 014388cec904f391ce8e54d323c9e9ce527ca0eb
Author: Damien Martin-Guillerez <dmarting@google.com>
Date:   Tue Jun 14 10:28:31 2016 +0000

    Use only one list of parameters for SkylarkSignature
    
    Optional and named parameters are now specified using `defaultValue`
    and `named` (and `positional`). The new structure allow for parameters
    that are both named and positional (which was forbidden before).
    
    This new structure will be used to give the @SkylarkCallable annotation
    the possibility to provide named and default arguments. It should be
    a functional no-op for Bazel users.
    
    --
    MOS_MIGRATED_REVID=124821455

commit 2ca9b721a24691670a5c9bcca8163285923f6d75
Author: Damien Martin-Guillerez <dmarting@google.com>
Date:   Thu Jun 9 17:43:55 2016 +0000

    Extract the @Param annotation from @SkylarkSignature
    
    The @SkylarkCallable annotation is very limited and to extend it
    it is best to share a similar API than the @SkylarkSignature annotation.
    
    --
    MOS_MIGRATED_REVID=124473056

commit 8ac08bab725574475e95b28c7c7fe72aa0317ba1
Author: Damien Martin-Guillerez <dmarting@google.com>
Date:   Thu Jun 9 15:51:13 2016 +0000

    Basic Java documentation of Skylark Annotations
    
    @SkylarkCallable and @SkylarkSignature were undocumented, making
    it hard for the developer to understand these annotations.
    
    This change add basic documentation for them.
    
    --
    MOS_MIGRATED_REVID=124461858

commit d48ea271593b24ece937df59da2ca96c373f7695
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Thu May 19 00:03:38 2016 +0000

    Write a -gensrc.jar even if the compilation failed
    
    The generated sources are useful for debugging annotation processors.
    
    --
    MOS_MIGRATED_REVID=122683781

commit 19350de0caaafbe3c6800c09d520d3ced82d87f9
Author: Nathan Harmata <nharmata@google.com>
Date:   Fri Apr 29 21:44:30 2016 +0000

    Memoize the OptionsData per BlazeCommand.
    
    This saves the cost of (1) collecting all Options classes and (2) getting all their @Option annotations. Note that there is no savings on reflection costs, since that's already memoized internally by OptionsParser.
    
    This saves ~250us per Blaze invocation.
    
    --
    MOS_MIGRATED_REVID=121153156

commit b1945fe6ecc62dc245cd77ec5e2d343db2ddd893
Author: Googler <noreply@google.com>
Date:   Wed Apr 20 17:31:23 2016 +0000

    Switch from relying on the Guice-specific annotations to the JSR-330 standard annotations.
    
    --
    MOS_MIGRATED_REVID=120351013

commit 10993fe27a62d5a4e683a206291c1bd44a492daf
Author: Ulf Adams <ulfjack@google.com>
Date:   Tue Apr 19 12:55:12 2016 +0000

    Review a number of action subclasses and update them according to the spec.
    
    Consists of adding @Immutable annotations, adding final modifiers, and changing
    the types of fields to immutable types.
    
    --
    MOS_MIGRATED_REVID=120221067

commit 83fce40e69ef35c90e69a57387b1f95b387ad453
Author: Ulf Adams <ulfjack@google.com>
Date:   Tue Apr 19 11:32:24 2016 +0000

    Review a number of action subclasses and update them according to the spec.
    
    Second pass.
    
    Consists of adding @Immutable annotations, adding final modifiers, and changing
    the types of fields to immutable types.
    
    --
    MOS_MIGRATED_REVID=120216592

commit 417dad0f1e0d0ed4ccd5f8e52b49eb79937da49d
Author: John Field <jfield@google.com>
Date:   Thu Apr 7 02:07:54 2016 +0000

    Rollback of commit dc0fbb42ab22ab8f3205b0884069e1ffe03677c9.
    
    *** Reason for rollback ***
    
    Changed the semantics of local .blazerc handling, requiring a Blaze release rollback ([]).
    
    *** Original change description ***
    
    
    Make specific options win over common ones
    
    When specifying which command names to parse options for, given the
    command annotation, ensure that "common" comes first, so that it can
    be overridden by more specific options.
    
    --
    MOS_MIGRATED_REVID=119227260

commit eb89cccfd3aff746b59da3feb31eb3ae528ce909
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Tue Apr 5 19:43:22 2016 +0000

    Disable tree pruning for blacklisted annotation processors
    
    Some annotation processors use non-standard APIs to examine the AST, and are
    broken by tree pruning. This change adds configuration to Turbine to allow a
    blacklist of processors to be provided, and disables tree pruning if any
    blacklisted processors are found.
    
    --
    MOS_MIGRATED_REVID=119079114

commit bd8898a52fc47ea53ae6e3238cf71a56af0c040d
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Fri Apr 1 19:13:21 2016 +0000

    Clarify that indirect deps are not necessarily transitive
    
    The compiler may implicitly load types that are direct dependencies but not
    referred to in source, e.g. in the case of package-info files where the package
    symbol is implicitly loaded to resolve annotations.
    
    --
    MOS_MIGRATED_REVID=118800795

commit 6ee1ddc65f5d27db3669d0bfb820e003a93aedad
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Fri Apr 1 03:40:18 2016 +0000

    Deduplicate annotation processor classes
    
    Also rename the build method from add* to set*.
    
    --
    MOS_MIGRATED_REVID=118746866

commit 9a2ba602382decae4838e2f8f65105023615d5bd
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Thu Mar 31 23:12:46 2016 +0000

    Track which output files are written
    
    instead of initializing all file objects to empty. Some annotation processors
    speculatively open files and handle FileNotFoundException, and we were always
    providing empty files.
    
    --
    MOS_MIGRATED_REVID=118730162

commit f4de88ba5e724fc6721feefb0e5a54ff53754a60
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Thu Mar 31 21:26:05 2016 +0000

    Handle more javacopts
    
    Previously turbine whitelisted -source and -target flags and ignored all other
    configured javacopts, including custom annotation processor options and javac
    debug flags.
    
    The change switches to allowing all javacopts, and blackisting options that are
    known to be incompatible.
    
    Also ensure that invalid flags result in an error.
    
    --
    MOS_MIGRATED_REVID=118718745

commit cadba0c2e44fe7895083b8b72ff6ce4a351772b5
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Tue Mar 29 19:02:53 2016 +0000

    Fix file object URIs in ZipOutputFileManager
    
    Avoids spurious diagnostics about annotation processor generated class names not matching the file path.
    
    --
    MOS_MIGRATED_REVID=118488628

commit 2d4631c058be532a36729b38dcbdfe5dc0eb7eaa
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Wed Mar 23 00:19:56 2016 +0000

    Record dependencies for exempt annotation processors
    
    Certain annotation processors that generate references to transitive
    dependencies are exempt from Strict Java Deps.
    
    Dagger ensures that all references to transitive types are reachable via a
    chain of direct dependencies specified in @Component interfaces. We don't
    record dependencies inside dagger-generated code, since Dagger is already
    enforcing strict dependencies. By not recording the deps we allow dependency
    management tools to remove depednencies that are only needed transitively by
    dagger.
    
    This approach doesn't work in general, since processors may generate references
    to transitive types that are not reachable via a chain of direct deps, and
    which may be subject to pruning by the reduced classpath optimization.
    
    This change causes strict deps to record dependencies (but not emit strict deps
    errors) inside code generated by exempt annotation processors other than
    Dagger.
    
    --
    MOS_MIGRATED_REVID=117882599

commit dc0fbb42ab22ab8f3205b0884069e1ffe03677c9
Author: Klaus Aehlig <aehlig@google.com>
Date:   Tue Mar 22 14:36:02 2016 +0000

    Make specific options win over common ones
    
    When specifying which command names to parse options for, given the
    command annotation, ensure that "common" comes first, so that it can
    be overridden by more specific options.
    
    --
    Change-Id: I20cd90c098e993580c32297d1e36c8a6c939873a
    Reviewed-on: https://bazel-review.googlesource.com/#/c/3091
    MOS_MIGRATED_REVID=117821257

commit ef5879c984e3105af7c47f4a39ab57a3e8f3a495
Author: Philipp Wollermann <philwo@google.com>
Date:   Thu Feb 25 15:24:52 2016 +0000

    Fix broken Bazel build due to missing dependency.
    
    ERROR: /home/ci/workspace/Bazel/JAVA_VERSION/1.8/PLATFORM_NAME/linux-x86_64/src/main/java/com/google/devtools/build/lib/BUILD:404:1: Couldn't build file src/main/java/com/google/devtools/build/lib/libjava-toolchain-parser.jar: Java compilation in rule '//src/main/java/com/google/devtools/build/lib:java-toolchain-parser' failed: namespace-sandbox failed: error executing command /home/ci/.cache/bazel/_bazel_ci/5f3cd5a16c8c04003810da50910b348c/linux-x86_64/_bin/namespace-sandbox ... (remaining 8 argument(s) skipped).
    src/main/java/com/google/devtools/build/lib/rules/java/JavaToolchainData.java:40: error: [strict] Using type javax.annotation.Nullable from an indirect dependency (TOOL_INFO: "//third_party:jsr305"). See command below **
      @Nullable private final Iterable<String> bootclasspath;
       ^
    1 error
    ** Please add the following dependencies:
      //third_party:jsr305  to //src/main/java/com/google/devtools/build/lib:java-toolchain-parser
    
    --
    MOS_MIGRATED_REVID=115559988

commit 3337e6572f702513c889332242fdfdb8fcc416fc
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Wed Feb 17 19:04:46 2016 +0000

    Fix pruning of annotation declaration fields
    
    Fields in annotation declarations are implicitly final, so are candidates for
    constant variables.
    
    --
    MOS_MIGRATED_REVID=114878247

commit b98cfefda6906f68dfc60e94bdf5b6d6435530f9
Author: Dmitry Lomov <dslomov@google.com>
Date:   Thu Feb 11 14:37:37 2016 +0000

    Expose Java annotation processing information to Skylark.
    
    Also added some features to Skylark aspect.
    
    --
    MOS_MIGRATED_REVID=114431594

commit d5ef2b4956619c44c9d17ac097857508e4d53b40
Author: Carmi Grushko <carmi@google.com>
Date:   Mon Feb 1 18:39:42 2016 +0000

    Rollback of commit f941d56acfad5f8c819c81b494f806ea74ea7fd8.
    
    *** Reason for rollback ***
    
    Breaks many targets, see []
    
    *** Original change description ***
    
    Reinstate mutable SkylarkDict
    
    Add <String, Object> annotation to optionMap invocation in SkylarkAttr,
    to make JDK 1.7 happy.
    
    Give the visible name "aspect" to class SkylarkAspect.
    
    --
    MOS_MIGRATED_REVID=113543873

commit f941d56acfad5f8c819c81b494f806ea74ea7fd8
Author: Francois-Rene Rideau <tunes@google.com>
Date:   Fri Jan 29 21:51:19 2016 +0000

    Reinstate mutable SkylarkDict
    
    Add <String, Object> annotation to optionMap invocation in SkylarkAttr,
    to make JDK 1.7 happy.
    
    Give the visible name "aspect" to class SkylarkAspect.
    
    --
    MOS_MIGRATED_REVID=113394826

commit a6658a41d7fd1668197064ace2a26b76768af753
Author: Kristina Chodorow <kchodorow@google.com>
Date:   Wed Jan 27 22:08:54 2016 +0000

    workspace() is now documented in its annotation
    
    ...and this documentation is incorrect.
    
    --
    MOS_MIGRATED_REVID=113198846

commit d55d7afc7532f6e0cb56cde4b05487c784842395
Author: Ulf Adams <ulfjack@google.com>
Date:   Tue Jan 19 11:03:22 2016 +0000

    General cleanup for the configured target / aspect creation code.
    
    - update some comments
    - add some comments to make it easier to follow
    - delete some dead code, in particular the SkyframeDependencyResolver can
      never be null; remove an non-applicable @Nullable annotation
    
    I'm trying to figure out how the error handling code works, in order to add
    support for interleaved loading+analysis, which requires handling loading
    errors in this code path.
    
    --
    MOS_MIGRATED_REVID=112456674

commit 585d1a09fdd7e24e9fca4ebb8fefa172e44599f3
Author: John Field <jfield@google.com>
Date:   Wed Dec 16 16:03:52 2015 +0000

    Move annotation classes used for referencing framework Java classes from Skylark into their own package. This allows, e.g., classes in the syntax package to access classes in the cmdline package without creating circular dependencies.
    
    While we're here:
    
    - Removed a couple of unused BUILD deps flagged in [].
    
    - Updated SkylarkRuleImplementationFunctionsTest to remove non-ASCII characters and
      clarify the intent of the test.
    
    --
    MOS_MIGRATED_REVID=110360763

commit 7cf18601671dfd482270a68417495577cf57ccd1
Author: Florian Weikert <fwe@google.com>
Date:   Thu Nov 26 15:45:50 2015 +0000

    Added missing annotations and renamed a method for consistency.
    
    --
    MOS_MIGRATED_REVID=108794773

commit d30ae4daafba3d1aad7dd15f988116ecf43a2d7f
Author: Carmi Grushko <carmi@google.com>
Date:   Thu Nov 19 14:07:21 2015 +0000

    When setting up an IntelliJ project for Bazel, point at the AutoValue annotation processor, and add its output directory to the source tree.
    
    --
    MOS_MIGRATED_REVID=108239745

commit 34f95d79a606348596c1dec0bd6b283a7514ece3
Author: Nathan Harmata <nharmata@google.com>
Date:   Mon Nov 9 22:10:56 2015 +0000

    Update @Nullable annotations for FilesystemValueChecker related stuff.
    
    --
    MOS_MIGRATED_REVID=107420673

commit 5f7e63e72a8843660e9e79d2afe994abee405bb1
Author: Alex Humesky <ahumesky@google.com>
Date:   Wed Oct 21 02:05:50 2015 +0000

    Adds an oldName attribute and a wrapperOption attribute to the @Option annotation for the options parser. oldName indicates the old name for the option, and the option will be parsed under both name and oldName. wrapperOption indicates that the option is a wrapper for other options. For example, in "--foo=--bar=baz", --foo wraps --bar=baz. With wrapperOption set to true for --foo, the options parser will "unwrap" --bar=baz and parse them as top-level flags.
    
    --
    MOS_MIGRATED_REVID=105924412

commit 22616ae8ea53df3909fd16b74e0d9210138dc2c2
Author: Googler <noreply@google.com>
Date:   Sat Sep 26 20:35:57 2015 +0000

    Add Android IDL jar outputs.
    
    These outputs are a jar and source jar for the results of aidl processing.
    
    This is used to add aidl output to IDEs separate from the source code,
    similar to annotation output (gen jars).
    
    --
    MOS_MIGRATED_REVID=104024453

commit 08be947f2b7c4b4ee828b059b61233286611cf1a
Author: Googler <noreply@google.com>
Date:   Thu Sep 24 11:18:52 2015 +0000

    Rollback of commit 402d112bc25449f1e690bbbace600bbcda834d24.
    
    *** Reason for rollback ***
    
    Rollforward with fix
    
    *** Original change description ***
    
    Automated [] rollback of [].
    
    *** Reason for rollback ***
    
    Breaks tests.
    
    *** Original change description ***
    
    Remove gen jar implicit output.
    
    This allows us to only create a jar for libraries that use annotation processing.
    It also increases our flexibility by reducing the visibility of these gen jars
    to an undocumented output group.
    
    --
    MOS_MIGRATED_REVID=103833283

commit 402d112bc25449f1e690bbbace600bbcda834d24
Author: Googler <noreply@google.com>
Date:   Thu Sep 24 00:21:04 2015 +0000

    Rollback of commit 53330510c6ea5cd6257b9981b44e52d15a9e01aa.
    
    *** Reason for rollback ***
    
    Breaks tests.
    
    *** Original change description ***
    
    Remove gen jar implicit output.
    
    This allows us to only create a jar for libraries that use annotation processing.
    It also increases our flexibility by reducing the visibility of these gen jars
    to an undocumented output group.
    
    --
    MOS_MIGRATED_REVID=103800137

commit 53330510c6ea5cd6257b9981b44e52d15a9e01aa
Author: Googler <noreply@google.com>
Date:   Wed Sep 23 22:27:19 2015 +0000

    Remove gen jar implicit output.
    
    This allows us to only create a jar for libraries that use annotation processing.
    It also increases our flexibility by reducing the visibility of these gen jars
    to an undocumented output group.
    
    --
    MOS_MIGRATED_REVID=103789186

commit 7566563a79ff1b40227d16678c191526954c10a6
Author: Carmi Grushko <carmi@google.com>
Date:   Thu Aug 27 23:19:26 2015 +0000

    Add a @deprecated annotation to Runfiles#addArtifacts.
    
    --
    MOS_MIGRATED_REVID=101730178

commit 9b38b2cdebc2bde00e85fc4ed8ed7bef400f6c8c
Author: Nathan Harmata <nharmata@google.com>
Date:   Thu Aug 27 16:11:07 2015 +0000

    Be resilient to a non-decreasing clock in BlazeRuntime#recordLastExecutionTime. Also add @Nullable annotations as appropriate.
    
    Fixes #394.
    
    --
    MOS_MIGRATED_REVID=101685096

commit 24866017148451fc468d90673d944c8fd99e1977
Author: Florian Weikert <fwe@google.com>
Date:   Wed Aug 5 17:03:20 2015 +0000

    Removed BuildConfiguration.Fragment#getName() and #isSkylarkVisible().
    
    Instead, the SkylarkModule annotation is being used to identify fragments that are visible in Skylark.
    
    --
    MOS_MIGRATED_REVID=99930512

commit ea11fc54f4224094bc3793eec1e2eaf7d397c65f
Author: Ulf Adams <ulfjack@google.com>
Date:   Tue Aug 4 14:23:58 2015 +0000

    Add more configuration fragment annotations, and a runtime check.
    
    --
    MOS_MIGRATED_REVID=99819719

commit 00e1ac9f1aa0ef64dcc5be0d9815f6b0f31a27d0
Author: Ulf Adams <ulfjack@google.com>
Date:   Mon Aug 3 13:50:43 2015 +0000

    Add configuration fragment annotations to some cc_* rules.
    
    --
    MOS_MIGRATED_REVID=99720083

commit d3f7eda5548fae0d9c022d9e1a0761b8e8ba22a6
Author: Alex Humesky <ahumesky@google.com>
Date:   Wed Jul 8 18:18:33 2015 +0000

    Adds gen jar and manifest proto outputs.
    
    Adds a jar output to Java and Android rules which contains the class files for source files generated from Java annotation processors. For a java_binary foo, the jar will be foo-gen.jar, and for a java_library foo the jar will be libfoo-gen.jar, and similarly for Android. Also adds a binary serialized proto manifest file output to Java and Android rules which describes the contents of the output class jar of those rules, which is used to create the -gen.jar. See src/main/protobuf/java_compilation.proto.
    
    --
    MOS_MIGRATED_REVID=97793715

commit 35fd8171dab46daf4b4699a1ddc787b97dec1a5c
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Tue Jun 30 01:05:25 2015 +0000

    Allow warnings to be suppressed for generated code.
    
    Adds a -XepDisableWarningsInGeneratedCode flag, which if set suppressings
    warnings from being emitted inside code annotation with @Generated. Error are
    not affected.
    
    Fixes #329
    
    --
    MOS_MIGRATED_REVID=97185343

commit 0c95d2764150ec97df105967104149c3e0a42c72
Author: Damien Martin-Guillerez <dmarting@google.com>
Date:   Fri Jun 19 11:01:41 2015 +0000

    Update Bazel's errorprone to 2.0.3
    
    It also add the annotations artifacts as the ErrorProne plugin of
    JavaBuilder now needs it.
    
    The artifacts are dowloaded from:
    https://oss.sonatype.org/content/repositories/releases/com/google/errorprone/error_prone_core/2.0.3/
    https://oss.sonatype.org/content/repositories/releases/com/google/errorprone/error_prone_annotations/2.0.3/
    
    --
    MOS_MIGRATED_REVID=96392823

commit 7a6afe8942d2d9927edc2f679aa79eb97358a4eb
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Tue Jun 16 23:48:30 2015 +0000

    Emit a 'manifest' file containing information about the compiled sources
    
    For each compilation unit, JavaBuilder will record:
    
    -source path
    -package name
    -a list of top-level class names
    -whether the file was generated by an annotation processor
    
    --
    MOS_MIGRATED_REVID=96158093

commit 438126ce44e3c5c8313329e7d579f4c13c3e210f
Author: Liam Miller-Cushon <cushon@google.com>
Date:   Mon Jun 8 21:05:29 2015 +0000

    Add --generated_class_output to JavaBuilder.
    
    If enabled, JavaBuilder will write a jar containing classes generated by
    annotation processors to the given path.
    
    --
    MOS_MIGRATED_REVID=95470914

commit 92be37dc9f3a30d2fd4e4d6a582dcf8f994635ed
Author: Kristina Chodorow <kchodorow@google.com>
Date:   Fri Jun 5 12:15:45 2015 -0400

    Add plexus component annotations
    
    Change-Id: I4eb1450d5272430bf08e656f20663c7e46848c24

commit a3ac202ec114c092221b296a2695d0aadd50031f
Author: Francois-Rene Rideau <tunes@google.com>
Date:   Mon Apr 20 18:35:05 2015 +0000

    Migrate SkylarkBuiltin annotations to SkylarkSignature instead.
    
    --
    MOS_MIGRATED_REVID=91603959

commit 0e30a5f51dde7dfa9bc38fe899b5d10fc567c63e
Author: Michajlo Matijkiw <michajlo@google.com>
Date:   Wed Apr 15 17:28:35 2015 +0000

    VisibleForTesting cleanup in Runfiles
    
    Many of the @VisibleForTesting annotations didn't actually apply. Remove
    them, apply the annotation to places where it applies, and change
    visibility of mttehods to be more restrictive.
    
    --
    MOS_MIGRATED_REVID=91208297

commit 4a8da557b5878db1bcf66da32f48a0f97ca37e7a
Author: Francois-Rene Rideau <tunes@google.com>
Date:   Fri Apr 10 18:56:21 2015 +0000

    Skylark builtin function cleanups
    
    Clean up related to Skylark builtin functions.
    
    Replace "hidden" field of some annotations with a "documented" field
    (with reversed semantics).
    
    --
    MOS_MIGRATED_REVID=90827020

commit e955287c84e4bcaf309e57ddab1bf808ce3cf046
Author: Nathan Harmata <nharmata@google.com>
Date:   Wed Apr 1 21:53:06 2015 +0000

    Thread-safety annotations for the various skyframe graph interfaces.
    
    --
    MOS_MIGRATED_REVID=90103351

commit 563f943a7a4f0311941cbda73090f9db86fe601a
Author: Francois-Rene Rideau <tunes@google.com>
Date:   Wed Mar 18 21:25:12 2015 -0400

    Add jars for auto_value and dependencies
    
    New dependencies: apache-commons-collections (a bit old: 3.2.1),
    apache-velocity, auto-common, auto-service, auto-value,
    tomcat-annotations-api (aka jsr250).

commit 4feb160bc00823d63942882904155d7dd6ebcae9
Author: Francois-Rene Rideau <tunes@google.com>
Date:   Wed Mar 18 19:49:13 2015 +0000

    New class hierarchy for Skylark functions
    
    * New hierarchy BaseFunction > UserModeFunction, BuiltinFunction.
      The old hierarchy still exists for now, to be deleted after migration:
      Function > AbstractFunction > MixedModeFunction >
        (UserModeFunction, SkylarkFunction > SimpleSkylarkFunction)
      (UserModeFunction is already migrated, and
      BaseFunction implements Function, for now.)
    
    * Function supports *args and **kwargs when calling functions, and
      mandatory named-only parameters in the style of Python 3.
      Notable difference with Python: *args binds the variable to a tuple,
      because a Skylark list would have to be monomorphic.
    
    * A better, simpler, safer FFI using reflection with BuiltinFunction.
      Handles typechecking, passes parameters in a more Java style.
      (Not used for now, will be used later.)
    
    * A new annotation @SkylarkSignature, intended to replace @SkylarkBuiltin,
      supports the full function call protocol, including default arguments.
    
    * Support for annotating function Factory-s rather than functions.
    
    --
    MOS_MIGRATED_REVID=88958581

