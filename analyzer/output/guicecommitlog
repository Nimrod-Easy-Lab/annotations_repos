commit 9908599f8b138867705a5228eb8cb10b95b1a5d4
Author: lukes <lukes@google.com>
Date:   Fri Sep 16 15:12:13 2016 -0700

    Speed up ProviderMethodsModule.getProviderMethods.
    
    Test profiling at google shows this method taking large amounts of time.  While the profile results do not provide very detailed data, from examining collected stack traces we can see that it is likely due to calculating the generic signatures of all the methods.  To improve this I have
    
    * short circuited scanning for overrides for any type >= the super-most type that declared a provider method.  This will prevent us from calculating signatures for AbstractModule
    * don't calculate any signatures for classes that don't define provider methods
    * micro optimizations to avoid allocating data structures we likely don't need. since many modules don't define any provider methods
    * make the common ModuleAnnotatedMethodScanner cache the annotations set to
      avoid generating a bunch of garbage
    
    I don't have a great way to validate that this actually improves the
    performance problem reported, since the data gathering methodology is pretty
    ad-doc.  But this should reduce the overall amount of work we are doing.
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=133433192

commit 55bb902701f6e0277fbfaedd735f4315213957bf
Author: lukes <lukes@google.com>
Date:   Mon Sep 12 10:46:15 2016 -0700

    Run google-java-format on all Guice code.
    
    configure a presubmit to ensure that it stays formatted.
    
    Highlights include:
    * simplified import order
    * method annotations are now consistently defined on the preceding line
    * javadoc reformatted to 100 chars column width
    
    One test that contained line numbers in error messages had to be modified and
    the formatter didn't like some of the more complicated preprocessor directives
    (MOE and AOP).
    
    To avoid formatting the copyright notices as javadoc i did a preprocessing step to rewrite the initial '/**' to '/*' using perl
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=132891167

commit 2a013d377eef8eb7edd904e4d856e3588d3f8dea
Author: lukes <lukes@google.com>
Date:   Mon Sep 12 10:31:52 2016 -0700

    Run google-java-format on all Guice code.
    
    configure a presubmit to ensure that it stays formatted.
    
    Highlights include:
    * simplified import order
    * method annotations are now consistently defined on the preceding line
    * javadoc reformatted to 100 chars column width
    
    One test that contained line numbers in error messages had to be modified and
    the formatter didn't like some of the more complicated preprocessor directives
    (MOE and AOP).
    
    To avoid formatting the copyright notices as javadoc i did a preprocessing step to rewrite the initial '/**' to '/*' using perl
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=132889350

commit 3137d25138690be21394fa6395cb250fe06fc29e
Author: lukes <lukes@google.com>
Date:   Fri Sep 9 14:57:12 2016 -0700

    Run google-java-format on all Guice code.
    
    configure a presubmit to ensure that it stays formatted.
    
    Highlights include:
    * simplified import order
    * method annotations are now consistently defined on the preceding line
    * javadoc reformatted to 100 chars column width
    
    One test that contained line numbers in error messages had to be modified and
    the formatter didn't like some of the more complicated preprocessor directives
    (MOE and AOP).
    
    To avoid formatting the copyright notices as javadoc i did a preprocessing step to rewrite the initial '/**' to '/*' using perl
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=132720064

commit fb54aebf29bacf6a606e3ecfde4de79e048d1676
Author: lukes <lukes@google.com>
Date:   Fri Sep 9 14:49:50 2016 -0700

    Run google-java-format on all Guice code.
    
    configure a presubmit to ensure that it stays formatted.
    
    Highlights include:
    * simplified import order
    * method annotations are now consistently defined on the preceding line
    * javadoc reformatted to 100 chars column width
    
    One test that contained line numbers in error messages had to be modified and
    the formatter didn't like some of the more complicated preprocessor directives
    (MOE and AOP).
    
    To avoid formatting the copyright notices as javadoc i did a preprocessing step to rewrite the initial '/**' to '/*' using perl
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=132719287

commit 34e7c5d7151043ddc65dc37c3912e714baae4fcb
Author: lukes <lukes@google.com>
Date:   Fri Sep 9 14:43:17 2016 -0700

    Run google-java-format on all Guice code.
    
    configure a presubmit to ensure that it stays formatted.
    
    Highlights include:
    * simplified import order
    * method annotations are now consistently defined on the preceding line
    * javadoc reformatted to 100 chars column width
    
    One test that contained line numbers in error messages had to be modified and
    the formatter didn't like some of the more complicated preprocessor directives
    (MOE and AOP).
    
    To avoid formatting the copyright notices as javadoc i did a preprocessing step to rewrite the initial '/**' to '/*' using perl
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=132718493

commit d66a07999e1f35acb07ee092dd960af023201dd1
Author: lukes <lukes@google.com>
Date:   Fri Sep 9 12:43:07 2016 -0700

    Run google-java-format on all Guice code.
    
    configure a presubmit to ensure that it stays formatted.
    
    Highlights include:
    * simplified import order
    * method annotations are now consistently defined on the preceding line
    * javadoc reformatted to 100 chars column width
    
    One test that contained line numbers in error messages had to be modified and
    the formatter didn't like some of the more complicated preprocessor directives
    (MOE and AOP).
    
    To avoid formatting the copyright notices as javadoc i did a preprocessing step to rewrite the initial '/**' to '/*' using perl
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=132704710

commit d34d64e08369749ab72c659349603dcdf7a54522
Author: lukes <lukes@google.com>
Date:   Fri Sep 9 12:42:12 2016 -0700

    Run google-java-format on all Guice code.
    
    configure a presubmit to ensure that it stays formatted.
    
    Highlights include:
    * simplified import order
    * method annotations are now consistently defined on the preceding line
    * javadoc reformatted to 100 chars column width
    
    One test that contained line numbers in error messages had to be modified and
    the formatter didn't like some of the more complicated preprocessor directives
    (MOE and AOP).
    
    To avoid formatting the copyright notices as javadoc i did a preprocessing step to rewrite the initial '/**' to '/*' using perl
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=132704632

commit 1b4022f314fc46962f45a8296e85e7e827e5ea70
Author: lukes <lukes@google.com>
Date:   Fri Sep 9 12:39:45 2016 -0700

    Run google-java-format on all Guice code.
    
    configure a presubmit to ensure that it stays formatted.
    
    Highlights include:
    * simplified import order
    * method annotations are now consistently defined on the preceding line
    * javadoc reformatted to 100 chars column width
    
    One test that contained line numbers in error messages had to be modified and
    the formatter didn't like some of the more complicated preprocessor directives
    (MOE and AOP).
    
    To avoid formatting the copyright notices as javadoc i did a preprocessing step to rewrite the initial '/**' to '/*' using perl
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=132704365

commit 27c5d3828b1b7a2a37d005b8b8363a332079520d
Author: lukes <lukes@google.com>
Date:   Fri Sep 9 11:08:11 2016 -0700

    Run google-java-format on all Guice code.
    
    configure a presubmit to ensure that it stays formatted.
    
    Highlights include:
    * simplified import order
    * method annotations are now consistently defined on the preceding line
    * javadoc reformatted to 100 chars column width
    
    One test that contained line numbers in error messages had to be modified and
    the formatter didn't like some of the more complicated preprocessor directives
    (MOE and AOP).
    
    To avoid formatting the copyright notices as javadoc i did a preprocessing step to rewrite the initial '/**' to '/*' using perl
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=132694034

commit 39eadf47e489f432b49666fd75bbb3f7cd43ec8d
Author: lukes <lukes@google.com>
Date:   Fri Sep 9 11:05:13 2016 -0700

    Run google-java-format on all Guice code.
    
    configure a presubmit to ensure that it stays formatted.
    
    Highlights include:
    * simplified import order
    * method annotations are now consistently defined on the preceding line
    * javadoc reformatted to 100 chars column width
    
    One test that contained line numbers in error messages had to be modified and
    the formatter didn't like some of the more complicated preprocessor directives
    (MOE and AOP).
    
    To avoid formatting the copyright notices as javadoc i did a preprocessing step to rewrite the initial '/**' to '/*' using perl
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=132693639

commit 462a1956a8f71f32a766f4871a5e6b56405e37f9
Author: lukes <lukes@google.com>
Date:   Fri Sep 9 11:01:51 2016 -0700

    Run google-java-format on all Guice code.
    
    configure a presubmit to ensure that it stays formatted.
    
    Highlights include:
    * simplified import order
    * method annotations are now consistently defined on the preceding line
    * javadoc reformatted to 100 chars column width
    
    One test that contained line numbers in error messages had to be modified and
    the formatter didn't like some of the more complicated preprocessor directives
    (MOE and AOP).
    
    To avoid formatting the copyright notices as javadoc i did a preprocessing step to rewrite the initial '/**' to '/*' using perl
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=132693141

commit 751b555176032e7cd2d49000b8acbb1292574781
Author: lukes <lukes@google.com>
Date:   Fri Sep 9 10:54:05 2016 -0700

    Run google-java-format on all Guice code.
    
    configure a presubmit to ensure that it stays formatted.
    
    Highlights include:
    * simplified import order
    * method annotations are now consistently defined on the preceding line
    * javadoc reformatted to 100 chars column width
    
    One test that contained line numbers in error messages had to be modified and
    the formatter didn't like some of the more complicated preprocessor directives
    (MOE and AOP).
    
    To avoid formatting the copyright notices as javadoc i did a preprocessing step to rewrite the initial '/**' to '/*' using perl
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=132692207

commit 24be2ea73c75627b110562fd196fc0effc8d1a56
Author: lukes <lukes@google.com>
Date:   Fri Sep 9 10:50:01 2016 -0700

    Run google-java-format on all Guice code.
    
    configure a presubmit to ensure that it stays formatted.
    
    Highlights include:
    * simplified import order
    * method annotations are now consistently defined on the preceding line
    * javadoc reformatted to 100 chars column width
    
    One test that contained line numbers in error messages had to be modified and
    the formatter didn't like some of the more complicated preprocessor directives
    (MOE and AOP).
    
    To avoid formatting the copyright notices as javadoc i did a preprocessing step to rewrite the initial '/**' to '/*' using perl
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=132691712

commit faa39c76ab3cdc1fc28dcdea2a220cbfaf837ad6
Author: lukes <lukes@google.com>
Date:   Fri Sep 9 10:22:08 2016 -0700

    Run google-java-format on all Guice code.
    
    configure a presubmit to ensure that it stays formatted.
    
    Highlights include:
    * simplified import order
    * method annotations are now consistently defined on the preceding line
    * javadoc reformatted to 100 chars column width
    
    One test that contained line numbers in error messages had to be modified and
    the formatter didn't like some of the more complicated preprocessor directives
    (MOE and AOP).
    
    To avoid formatting the copyright notices as javadoc i did a preprocessing step to rewrite the initial '/**' to '/*' using perl
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=132688230

commit 37c7eba60d0d17761d15c10747808d8129f3edcd
Author: lukes <lukes@google.com>
Date:   Fri Sep 9 10:22:07 2016 -0700

    Run google-java-format on all Guice code.
    
    configure a presubmit to ensure that it stays formatted.
    
    Highlights include:
    * simplified import order
    * method annotations are now consistently defined on the preceding line
    * javadoc reformatted to 100 chars column width
    
    One test that contained line numbers in error messages had to be modified and
    the formatter didn't like some of the more complicated preprocessor directives
    (MOE and AOP).
    
    To avoid formatting the copyright notices as javadoc i did a preprocessing step to rewrite the initial '/**' to '/*' using perl
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=132688224

commit c11a251dbfb752ac1ff48ac6b777a4aa57bb533c
Author: lukes <lukes@google.com>
Date:   Fri Sep 9 08:59:07 2016 -0700

    Run google-java-format on all Guice code.
    
    configure a presubmit to ensure that it stays formatted.
    
    Highlights include:
    * simplified import order
    * method annotations are now consistently defined on the preceding line
    * javadoc reformatted to 100 chars column width
    
    One test that contained line numbers in error messages had to be modified and
    the formatter didn't like some of the more complicated preprocessor directives
    (MOE and AOP).
    
    To avoid formatting the copyright notices as javadoc i did a preprocessing step to rewrite the initial '/**' to '/*' using perl
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=132679478

commit 1d036d9c1115b88d71436f600a6864ca12b6a03e
Author: lukes <lukes@google.com>
Date:   Fri Sep 9 08:53:39 2016 -0700

    Run google-java-format on all Guice code.
    
    configure a presubmit to ensure that it stays formatted.
    
    Highlights include:
    * simplified import order
    * method annotations are now consistently defined on the preceding line
    * javadoc reformatted to 100 chars column width
    
    One test that contained line numbers in error messages had to be modified and
    the formatter didn't like some of the more complicated preprocessor directives
    (MOE and AOP).
    
    To avoid formatting the copyright notices as javadoc i did a preprocessing step to rewrite the initial '/**' to '/*' using perl
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=132678966

commit e38080c898cc7dd31c4570c01b88235e402666a0
Author: lukes <lukes@google.com>
Date:   Thu Sep 8 18:27:50 2016 -0700

    Run google-java-format on all Guice code.
    
    configure a presubmit to ensure that it stays formatted.
    
    Highlights include:
    * simplified import order
    * method annotations are now consistently defined on the preceding line
    * javadoc reformatted to 100 chars column width
    
    One test that contained line numbers in error messages had to be modified and
    the formatter didn't like some of the more complicated preprocessor directives
    (MOE and AOP).
    
    To avoid formatting the copyright notices as javadoc i did a preprocessing step to rewrite the initial '/**' to '/*' using perl
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=132626673

commit 609ff5893a6296fcaa87df6913f27056891977d0
Author: lukes <lukes@google.com>
Date:   Thu Sep 8 18:20:37 2016 -0700

    Run google-java-format on all Guice code.
    
    configure a presubmit to ensure that it stays formatted.
    
    Highlights include:
    * simplified import order
    * method annotations are now consistently defined on the preceding line
    * javadoc reformatted to 100 chars column width
    
    One test that contained line numbers in error messages had to be modified and
    the formatter didn't like some of the more complicated preprocessor directives
    (MOE and AOP).
    
    To avoid formatting the copyright notices as javadoc i did a preprocessing step to rewrite the initial '/**' to '/*' using perl
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=132626164

commit 713c06cce9ccabd3acae303b047c874a3e7f0bd8
Author: lukes <lukes@google.com>
Date:   Wed Aug 31 09:47:58 2016 -0700

    Fix issues reported by errorprone
    
    99% of this is adding missing @Override annotations, in the long tail we also have
    
    * insert missing calls to Assert.fail() in tests that are testing exception behavior
    * rewrite a few cases of Foo.class.instanceof(c) to c instanceof Foo
    * rewrite Class.newInstance - > Class.getConstructor().newInstance() which doesn't break checked exception checking.
    * adding @javax.inject.Inject annotations to methods that override methods annotated with @javax.inject.Inject
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=131839622

commit 2b12d5cc63506f1a88d7f0a82519c89bdbcc5cdc
Author: mackraz <mackraz@google.com>
Date:   Thu Aug 11 11:04:10 2016 -0700

    Changed suppress warnings message to suppress Guice annotation processor error that is caused by multiple constructors annotated with @Inject to make it more clear/specific.
    
    "inject-constructors" -> "InjectMultipleAtInjectConstructors"
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=130007929

commit ff3384c101bcfd686eb0b2e9892d8e6d758d1ea7
Author: lukes <lukes@google.com>
Date:   Tue Aug 9 12:41:23 2016 -0700

    Move multibindings/RealElement.nameOf to internal/Annotations so it can be available to the new multibindering implementations that will be added to the internal package.
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=129781056

commit 2bbf0a39956ef237061f9ee3197300d9876ae238
Author: mackraz <mackraz@google.com>
Date:   Mon Aug 1 08:22:20 2016 -0700

    This CL adds @SuppressWarnings("inject-constructors") to classes that have multiple injectable constructors.
    
    Reasoning:
    I am rolling out an Annotation Processor check that fails at compile-time if you have multiple injectable constructors for a single class as this is not supported by Guice.
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=128986989

commit 113684b9d9442677317dd0396d2e1b3aa7ac0e4d
Author: mackraz <mackraz@google.com>
Date:   Fri Jul 29 11:10:31 2016 -0700

    This CL adds @SuppressWarnings("multi-scope") to classes that are annotated with multiple scoping-annotations.
    
    Reasoning:
    I am rolling out an Annotation Processor check that fails at compile-time if you annotated a class with multiple scoping-annotations as this is not supported by Guice.
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=128826347

commit 97695d94f4bbdddf64bf636784bdd32984f1bb55
Author: geiersbach <geiersbach@google.com>
Date:   Mon Jun 6 14:06:03 2016 -0700

    Remove dep on //third_party/java/jsr305_annotations accidentally added
    earlier.
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=124175277

commit c92acd701caed7f0257f0c726c59e7ebaaffd1af
Author: geiersbach <geiersbach@google.com>
Date:   Tue May 31 13:37:21 2016 -0700

    Respect @Nullable in BoundFieldModule.
    
    Fields annotated with some @Nullable annotation are allowed to have null values bound for testing, following how Guice works with null (https://github.com/google/guice/wiki/UseNullable)
    
    This allows for easy testing of null cases without resorting to SettableProvider.
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=123677621

commit 444117b54ca9a1e24f6492cbf508ce34ee3f9355
Author: ronshapiro <ronshapiro@google.com>
Date:   Wed May 18 07:10:53 2016 -0700

    Migrate @Provides(type = Provides.Type) to new Dagger multibinding annotations. Also migrate @Produces(type = ...)
    
    -------------
    Created by MOE: https://github.com/google/moe
    MOE_MIGRATED_REVID=122627878

commit 54da0e3ca924a5040e88a1c067f9f6760a14b20b
Author: sameb <sameb@google.com>
Date:   Thu Feb 19 18:36:52 2015 -0800

    Rework the public API into scanning for additional @Provides-like annotations.
    Instead of requiring each scanner to explicitly wrap the modules to-be-scanned,
    we add a Binder.scanModulesForAnnotatedMethods method that takes a scanner,
    and we scan every installed module.
    -------------
    Created by MOE: http://code.google.com/p/moe-java
    MOE_MIGRATED_REVID=86751798

commit 9867f9c2142355ae958f9eeb8fb96811082c8812
Author: sameb <sameb@google.com>
Date:   Mon Feb 2 12:45:25 2015 -0800

    Implement my old patch for issue #366, with some tweaks.  This does the
    following:
    * Fixes @Provides injection so that parameters are checked for nullability.
    By default this will error.  The flag is named:
    guice_check_nullable_provides_params and can be set to ERROR, WARNING or IGNORE.
    * Adds InjectionPoint.forMethod to build an InjectionPoint off an arbitrary
    method.
    * Adds Binder.getProvider(Dependency) to a get a Provider for a given
    dependency (with all its nullability & injection points maintained).
    * Update ProviderLookup to accept a Dependency in addition to a Key.
    
    This is in preparation for two things:
    1) Allowing multibindings/mapbindings/optionalbindings to be specified as
    annotations on methods in a module.
    2) Adding a dagger compatibility module.
    ... the general idea will be that I'll also add a hook into
    ProvidesMethodModule somehow to look at arbitrary other annotations and let
    folks process them specially.
    -------------
    Created by MOE: http://code.google.com/p/moe-java
    MOE_MIGRATED_REVID=85353820

commit f11bf2d26ccd07e72805b789b33d855e223b1ed7
Author: dweis <dweis@google.com>
Date:   Mon Jan 26 18:17:50 2015 -0800

    Make Guice ignore validation of scope annotations on abstract types for types annotated with @Component. This allows one to provide Dagger Components with Guice Injectors.
    -------------
    Created by MOE: http://code.google.com/p/moe-java
    MOE_MIGRATED_REVID=84836495

commit c34e0185fcf508a890c6cd13bdafeb505c3e9e8a
Author: Sam Berlin <sameb@google.com>
Date:   Wed Aug 6 11:56:26 2014 -0400

    Implement binding deduplication for multibinder & mapbinder in a different way.
    Instead of relying on Guice binding deduplication (and hacking up RealElement
    to break the annotation contract to do so, causing weirdness in WeakKeySet &
    forcing us to care about "rehashing keys"), we instead deduplicate within
    Multibinder.  The downside of this is that toInstance or toProvider(instance)
    bindings that are deduplicated will remain in the object graph but effectively
    be unreachable.  However, that's a downside I'm willing to live with to remove
    this hack.
    -------------
    Created by MOE: http://code.google.com/p/moe-java
    MOE_MIGRATED_REVID=72570932

commit 6b3086dc7ca0b0f9d664fb7cc1f4664e4a4df640
Author: Sam Berlin <sberlin@gmail.com>
Date:   Sun Jul 20 13:03:09 2014 -0400

    Cleanup javadocs.  This makes the following changes:
      1) Stop using doclava.  It has too many bugs (like dropping annotations).
      2) Tell javadoc not to doclint.  Java8 does it and errs if it fails.
      3) Link to appropriate third parties from javadoc.
      4) Split extensions into separate groups in ant javadoc.
      5) Cleanup code that had javadoc warnings.

commit 08125e9287e577e167ca1186eeff9e14c51250c4
Author: Sam Berlin <sameb@google.com>
Date:   Thu Jul 10 16:31:47 2014 -0400

    Fix equal comparison against generated/system annotations.  This should never
    happen in practice, but some things generate annotations based on user input in
    order to compare against Guice bindings.
    -------------
    Created by MOE: http://code.google.com/p/moe-java
    MOE_MIGRATED_REVID=70843442

commit a5b2b1fc374c9d5945fa3d9b101b591dc88710ab
Author: Sam Berlin <sameb@google.com>
Date:   Thu Apr 10 19:17:11 2014 -0400

    Suppress compiler errors reported by an error-prone checker ([]) for tests.
    
    I wrote an error-prone checker([]) to check that injected constructors are not annotated with @Inject(optional=true) or with binding annotations. This CL annotates the intentional tests for such cases with @SuppressWarnings.
    -------------
    Created by MOE: http://code.google.com/p/moe-java
    MOE_MIGRATED_REVID=64575706

commit 10f305d9d4328edd2819396dcbf039e86e8e24b1
Author: Sam Berlin <sameb@google.com>
Date:   Mon Mar 10 12:51:17 2014 -0400

    This change removes final from fields annotated with @Inject.  In addition to being discouraged due to weak semantics [1], it is incompatible with the standard javax.inject.Inject annotation [2].
    
    Refactoring: https://code.google.com/p/error-prone/wiki/GuiceInjectOnFinalField
    
    [1] https://code.google.com/p/google-guice/wiki/Injections#Field_Injection
    [2] https://code.google.com/p/google-guice/wiki/JSR330
    -------------
    Created by MOE: http://code.google.com/p/moe-java
    MOE_MIGRATED_REVID=62760764

commit 33736ecd7a00d7fa3292bee6c1329b8edee670cc
Author: Christian Edward Gruber <cgruber@google.com>
Date:   Wed Sep 18 10:59:00 2013 -0700

    Because error-prone treats more than one scope annotation on a class as a compile-time error, existing builds that upgrade to error prone will fail.  To support that, given that these are tests of the run-time version of the failure, add a supporession to the usages.
    -------------
    Created by MOE: http://code.google.com/p/moe-java
    MOE_MIGRATED_REVID=51282197
    MOE_MIGRATED_REVID=51282207

commit 96e81ba55441fd11c189d903ee2bd1806a23bd70
Author: Christian Edward Gruber <cgruber@google.com>
Date:   Wed Sep 18 10:55:21 2013 -0700

    An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us.
    
    This CL includes a noteworthy adaptation of an earlier attempt which caused timeouts in some client tests, forcing a rollback ([]). Because Key caches its hashCode, we were inadvertently inserting every binding for a given multibound set into the same hashmap bucket, causing at best O(n^2) behaviour (and possibly worse, depending on how HashMap is implemented). To fix this, this CL adds changes to core Guice to recompute the Key's hashCode at injector construction time. (In fact, at the end of every Elements.getElements call, so any SPI-based code gets the same benefits.)
    -------------
    Created by MOE: http://code.google.com/p/moe-java
    MOE_MIGRATED_REVID=51233981

commit 6c69bcf53d4122b0f05f44783c0d8a61afd83911
Author: Christian Edward Gruber <cgruber@google.com>
Date:   Wed Sep 18 10:55:21 2013 -0700

    An alternative way to support ShareableModule, Modules.override and Multibinder: use annotations that compare equal iff the binding strategy matches, so Guice will dedupe for us.
    -------------
    Created by MOE: http://code.google.com/p/moe-java
    MOE_MIGRATED_REVID=50556753

commit 7839f29c2559fa100851777a79774e85f0dadeaf
Author: Christian Edward Gruber <cgruber@google.com>
Date:   Fri Aug 9 11:07:36 2013 -0700

    Fix typo in comment for Provides annotation.
    -------------
    Created by MOE: http://code.google.com/p/moe-java
    MOE_MIGRATED_REVID=50518753

commit 8f196358f5a494f974a741b5a982f96f03171223
Author: Christian Edward Gruber <cgruber@google.com>
Date:   Thu May 16 11:13:21 2013 -0700

    Add logging for when AssistedInject falls into non-optimized mode, so people can take action and fix it.
    
    An @Assisted Provider in a class param:
    WARNING: AssistedInject factory com.google.inject.assistedinject.FactoryProvider2Test$ColoredCarFactory will be slow because class com.google.inject.assistedinject.FactoryProvider2Test$Subaru has Assisted Provider dependencies or injects the Injector. Stop injecting Assisted Provider<T> (instead use Assisted T) or Injector to speed things up. (It will be a ~6500% speed bump!)  The exact offending deps are: [Key[type=com.google.inject.Provider<com.google.inject.assistedinject.FactoryProvider2Test$Color>, annotation=@com.google.inject.assistedinject.Assisted(value=)]@com.google.inject.assistedinject.FactoryProvider2Test$Subaru.colorProvider]
    
    The injector in class param:
    WARNING: AssistedInject factory com.google.inject.assistedinject.FactoryProvider2Test$ColoredCarFactory will be slow because class com.google.inject.assistedinject.FactoryProvider2Test$Segway has Assisted Provider dependencies or injects the Injector. Stop injecting Assisted Provider<T> (instead use Assisted T) or Injector to speed things up. (It will be a ~6500% speed bump!)  The exact offending deps are: [Key[type=com.google.inject.Injector, annotation=[none]]@com.google.inject.assistedinject.FactoryProvider2Test$Segway.injector]
    
    An @Assisted Provider in a constructor arg:
    WARNING: AssistedInject factory com.google.inject.assistedinject.FactoryProvider2Test$ColoredCarFactory will be slow because class com.google.inject.assistedinject.FactoryProvider2Test$Flamingbird has Assisted Provider dependencies or injects the Injector. Stop injecting Assisted Provider<T> (instead use Assisted T) or Injector to speed things up. (It will be a ~6500% speed bump!)  The exact offending deps are: [Key[type=com.google.inject.Provider<com.google.inject.assistedinject.FactoryProvider2Test$Color>, annotation=@com.google.inject.assistedinject.Assisted(value=)]@com.google.inject.assistedinject.FactoryProvider2Test$Flamingbird.<init>()[1]]
    
    ----------------
    Manually Synced.
    COMMIT=45725763

commit 9f8b438b370a688cd393983abf29aa00344795a4
Author: Christian Edward Gruber <cgruber@google.com>
Date:   Thu May 16 11:06:08 2013 -0700

    Use a single UniqueAnnotation instead of creating a new one each time.
    
    -----------------
    Manually Synced.
    COMMIT=45708839

commit e39158525475eca7971966c667494d240be7e242
Author: Christian Edward Gruber <cgruber@google.com>
Date:   Thu May 16 11:00:54 2013 -0700

    Change Key so that it upgrades Annotation classes where all methods have default values into an instance of the Annotation with the defaults as values, so that:
      @Retention(RUNTIME)
      @BindingAnnotation @interface AllDefaults {
        int hasDefault() default 1;
      }
    
      @AllDefaults class Foo {}
    
      void testKey() {
        assertEquals(Key.get(Foo.class, Foo.class.getAnnotation(AllDefaults.class)),
                     Key.get(Foo.class, AllDefaults.class));
      }
    
    Also adds an option to "require exact binding annotations", which disables the error-prone fallback built into Guice whereby a binding for @Named Foo can substitute for @Named("foo") Foo if the latter doesn't exist but the former does.
    
    -----------------
    Manually Synced.
    COMMIT=45600016

commit 45d86df69be98dc64a455e397ae6c492f803771e
Author: Christian Edward Gruber <cgruber@google.com>
Date:   Wed May 15 19:11:47 2013 -0700

    Fix http://code.google.com/p/google-guice/issues/detail?id=742 by having assistedinject fail if the target implementation class has a scop
    ing annotation on it.  Scope annotations on assistedinject targets were always ignored by Guice, and allowing them on the classes led to lots of confusion when reading code.  The new behavior makes for much more readable code.
    
    This could potentially cause runtime errors at injector creation time if you accidentally had scoping annotations on the implementation class.  The fix is just to remove that scoping annotation -- there will be no change in behavior, because the scope was ignored.
    
    There is an extreme edge case where this change may cause a problem, but it creates sufficiently confusing code that we are OK with turning it into a failure: You used assistedinject yet had no assisted parameters, and sometimes injected the object directly and other times constructed it through the factory.  When injecting directly, it would adhere to the scope, but when constructing through the factory it would create a new instance every time.  ... If you *really* wanted this behavior, the workaround would be to bind using toConstructor in Scopes.NO_SCOPE to a named(unscoped) version of the class, which is also more expressive.  (But, more often than not, what you really wanted was to *not do this*.)
    
    ------------------
    Manually Synced.
    COMMIT=43242119

commit c756777526309dc6c9ff2b5df80a8f811d390c09
Author: Sam Berlin <sameb@google.com>
Date:   Thu May 31 19:54:04 2012 -0400

    Add Binder.requireAtInjectOnConstructors, to force Guice to require @Inject annotations on constructors.
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=4906

commit 45ef01760942b9575a6094effeb4eb034db9a113
Author: Sam Berlin <sameb@google.com>
Date:   Fri Jan 13 18:22:35 2012 -0500

    Cleanup a few things:
    1) Remove invalid annotation.
    2) Update to Guava 11.0.1, from r9.
    3) Remove some unused files.
    4) Forcibly keep Throwables, since servlet uses it but core doesn't (so jarjar
    was wiping it).
    5) Disable failing Multibinder test.
    
    R=jessewilson
    DELTA=193  (10 added, 174 deleted, 9 changed)
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=4087

commit 8a539da6824f7e2c43a7dd47df608ec50bf5c987
Author: Stuart McCulloch <mcculls@gmail.com>
Date:   Fri Dec 23 10:19:41 2011 +0000

    Remove @MediumTest annotation since it is not available on the build classpath

commit c9d97cf1048498269fabbeb0f2ae2a921f53abf8
Author: crazyboblee <crazyboblee@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Wed Dec 15 21:42:11 2010 +0000

    Cache annotation lookups.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@1461 d779f126-a31b-0410-b53b-1d3aecad763e

commit 7f6067d38877588c51473029fdef1994b61a9a1d
Author: sberlin <sberlin@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Fri Oct 29 03:01:12 2010 +0000

    Update test to make sure custom @Nullable annotations work, in addition to c.g.i.i.util.Nullable.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@1326 d779f126-a31b-0410-b53b-1d3aecad763e

commit 982f83e9d87049ccfcc2775c4b446c6a6f22d22d
Author: sberlin <sberlin@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Wed Oct 27 02:40:07 2010 +0000

    fix Nullability to check for "$Nullable" (the jarjar renamed "Nullable"), and fix jarjar to build using asm-3.3 (it was using 3.1, and using 3.3 fixes http://code.google.com/p/jarjar/issues/detail?id=21, where annotations on methods that are remapped are loss)
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@1324 d779f126-a31b-0410-b53b-1d3aecad763e

commit ee446ca42d2918e8bfee95df2415b6178721347a
Author: sberlin <sberlin@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Sun Oct 24 21:36:39 2010 +0000

    update ThrowingProvider to support an @ThrowingProvides annotation, much like @Provides.  update the internals of the class to give more explicit error messaging & use bind.addError instead of throwing exceptions.  added lots & lots of tests.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@1312 d779f126-a31b-0410-b53b-1d3aecad763e

commit 0693a15423ec35824472a79b98983c3113c4da36
Author: dhanji <dhanji@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Mon Sep 20 18:25:29 2010 +0000

    Support for custom request scopes overloaded onto the @RequestScoped annotation.
    
    Also added ability to seed a scope map for both continuing HTTP request scopes as well as custom request scopes.
    
    Also changed continuing HTTP requests in other request threads to fail if they happen to run in an HTTP request thread as per sberlin's recommendation. See tests for details
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@1254 d779f126-a31b-0410-b53b-1d3aecad763e

commit 24f5f134bbb7f25055503590e6f9eb4d1b86c5f8
Author: limpbizkit@gmail.com <limpbizkit@gmail.com@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Mon Sep 13 07:25:39 2010 +0000

    Remove support for com.google.inject annotations from miniguice. Relying on JSR-330 classes only is simpler, and aligned with the goals for the project.
    
    Also fixing bugs where supertype fields weren't injected.
    
    Also improving error reporting when an injection fails to include the requiring injection. Otherwise things like "Expected injection of String" fails miserably.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@1229 d779f126-a31b-0410-b53b-1d3aecad763e

commit 70248eafa90cd70a68b293763e53f6aec656e73c
Author: limpbizkit@gmail.com <limpbizkit@gmail.com@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Sat Sep 11 08:46:08 2010 +0000

    MiniGuice, a proof of concept.
    
    The standard Guice injector hits a diverse set of use cases with a small core. It has advanced features to make developers productive and it's very fast. And it scales to extremely large teams very well. In a world of JavaEE aircraft carriers, Guice is a sports car.
    
    To contrast, MiniGuice (placeholder name) is roller skates. It has barely any features and can't do anything but the bare essentials: field & constructor injection, provider methods, provider injections, singletons, and binding annotations. It's intended for use in tiny dozen-file projects maintained by a single developer in leisure time. It's only features are its compact size and implementation simplicity.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@1225 d779f126-a31b-0410-b53b-1d3aecad763e

commit c7b2e2f74f77e165d68d51f240dd2273c2efe09c
Author: limpbizkit@gmail.com <limpbizkit@gmail.com@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Sat Jul 3 15:12:19 2010 +0000

    Linking referenced methods in Toolable annotation doc.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@1181 d779f126-a31b-0410-b53b-1d3aecad763e

commit f51c690e4898365f50fde33cc94e756874f3f7f0
Author: sberlin@gmail.com <sberlin@gmail.com@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Tue Jun 22 17:20:57 2010 +0000

    Change behavior of method overriding if any methods in the call stack had @com.google.inject.Inject.  The new behavior is..
     * If subclass' method in question does not have any @Inject annotation, then:
        - If any overridden methods contained @com.google.inect.Inject, the method is still injected.
        - If the overriden methods only contained @javax.inject.Inject, the method is *not* injected, per the JSR spec.
    
     This change reverts back to a Guice 1.0 & 2.0 behavior (preserving the existing fix so the injection point isn't called twice).
    
     This is a functional difference between com.google.inject.Inject and javax.inject.Inject, but one we're willing to live with.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@1176 d779f126-a31b-0410-b53b-1d3aecad763e

commit 680c8b527ea94df6161aa9a61f00563338221e64
Author: sberlin <sberlin@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Fri Jun 11 19:11:13 2010 +0000

    fixes issue 490 -- sets using marker annotations don't work properly all the time.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@1173 d779f126-a31b-0410-b53b-1d3aecad763e

commit b5ec94a953eb64b773e56658f50e728f47519288
Author: sberlin <sberlin@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Sat Mar 27 20:36:13 2010 +0000

    patch AssistedInject extension to support multi-constructor injection with FactoryModuleBuilder.  reuses @AssistedInject annotation to mark valid constructors.  undeprecates @AssistedInject.  deprecates FactoryProvider in favor of FactoryModuleBuilder now that all functionality is matched and performance problems are fixed.  you can still get the "old" behavior (ordered matching of parameters, non-guiced objects, etc..) by using @AssistedInject+FactoryProvider, but using @Inject or @AssistedInject with FactoryModuleBuilder will give you the new behavior.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@1148 d779f126-a31b-0410-b53b-1d3aecad763e

commit 97c2271b505bec77f509e1f190695cc6a2997427
Author: sberlin <sberlin@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Fri Feb 5 21:12:05 2010 +0000

    issue 454 - add an annotation to mark @Injectable methods as wanting injection during Stage.TOOL.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@1140 d779f126-a31b-0410-b53b-1d3aecad763e

commit 365f83483b550d95bae2f90bc16439d24713a124
Author: limpbizkit <limpbizkit@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Mon Sep 7 21:00:57 2009 +0000

    First effort at support for JSR 330.
    
    This checkin supports:
       @javax.inject.Inject to mark classes
       @javax.inject.Qualifier to identify binding annotations
       javax.inject.Provider injections
       A new Jsr330 utility class
    
    Still outstanding:
       JSR 330 is more strict about where its annotations are applied. These restrictions are not yet enforced.
       @Scope
       @Singleton
    
    Notable change:
       When the user injects a javax.inject.Provider<T>, we canonicalize the dependency, and treat it exactly as if they injected a com.google.inject.Provider<T>. This is slightly weird! For example, these two keys are equal:
    Key.get(new TypeLiteral<javax.inject.Provider<String>>() {})
    Key.get(new TypeLiteral<com.google.inject.Provider<String>>() {})
       This is convenient, particularly for SPI users. And it means we don't need a linked binding between the Providers. But it could be quite surprising. I'm still trying to decide the right long term solution here...
    
    
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@1077 d779f126-a31b-0410-b53b-1d3aecad763e

commit 179a4cd33f22b73d10354a887e328a4369d9a080
Author: limpbizkit <limpbizkit@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Sun Jun 21 17:28:03 2009 +0000

    New tests for toConstructor().
    
    I found one bug - we were looking for scoping annotations on the bind source type rather than the bind target type. This is fixed now.
    
    One weird behaviour - @Singleton is per-binding, not per-type. Check the scoping test for an illustration.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@1024 d779f126-a31b-0410-b53b-1d3aecad763e

commit 39634cf94fed60c5dc1180724357fe8408c95fee
Author: limpbizkit <limpbizkit@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Thu Jun 11 06:48:54 2009 +0000

    Adding the METHOD target to the @ScopeAnnotation meta-annotation
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@1012 d779f126-a31b-0410-b53b-1d3aecad763e

commit 50581d1c21373c293922b39c71f45908abe5f6f0
Author: limpbizkit <limpbizkit@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Fri Apr 24 18:19:41 2009 +0000

    Greg Kick's fix to use UniqueAnnotations in the servlets module
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@934 d779f126-a31b-0410-b53b-1d3aecad763e

commit 76c24b172e5c4c4b6d51c10dd5c1f491a4033157
Author: limpbizkit <limpbizkit@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Thu Dec 25 04:32:41 2008 +0000

    This should be the last big refactoring before Guice 2 final...
    
    - Restored Bob's binding interfaces - LinkedBinding, InstanceBinding, etc.
    - Moved Binding implementation classes to internal/ so the implementations could  be shared by both Injector bindings and Module bindings
    - Added HasDependencies interface, implemented it for ProviderMethods
    - Cleaned up our internal model of scopes to use the 'Scoping' class, which is like scope annotation/instance + eager/lazy.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@739 d779f126-a31b-0410-b53b-1d3aecad763e

commit 2d633cd04273a80a31c920f24fc1d3c5f1f8e7df
Author: limpbizkit <limpbizkit@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Tue Dec 9 06:26:00 2008 +0000

    Big API change to AssistedInject Deluxe.
    
    I unified the API - both old and new use the same API, and the code detects which to use (by looking for the presence or absence of an @AssistedInject annotation)
    
    This means that:
     - Upgrading from new to old is extremely easy
     - Unified Javadocs for old and new. The new Javadocs just have a section pointing out the differences when @AssistedInject is used instead of @Assisted
     - It's a little clumsier to make sure you're getting the right one. This is mitigated by some new checks on the factory interface to ensure the old constructor isn't used with the newer factories.
    
    Also applying local variable naming fixes to InjectionPoint, as pointed out by Brian Harris.
    
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@723 d779f126-a31b-0410-b53b-1d3aecad763e

commit 9bf6585ff7d92828390833edfc5fbf9cf7e3a14b
Author: limpbizkit <limpbizkit@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Sat Nov 29 22:01:13 2008 +0000

    Fix for bug 242.
    
    We warn if the user misplaces a binding annotation. In Scala, binding annotations are applied to accessor methods automatically, and there's nothing the user can do (to suppress the warning). So we special case it and don't warn. There might be a tiny number of false negatives; this shouldn't really be a problem.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@707 d779f126-a31b-0410-b53b-1d3aecad763e

commit 96d2164784328d48ff2e4e4f3026a516f99d0c35
Author: limpbizkit <limpbizkit@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Fri Jul 18 23:49:43 2008 +0000

    Added tests for a few cases where we could detect a misplaced annotation (but we don't currently)
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@563 d779f126-a31b-0410-b53b-1d3aecad763e

commit 185d2a2e0c718d592a712592f0d1320632d5ab75
Author: limpbizkit <limpbizkit@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Mon Jun 16 07:22:47 2008 +0000

    Added some new error messages:
    
     - when a method or constructor has a binding annotation, rather than its parameters
    
     - when a type has a scope annotation, but that scope is not bound
    
     - when a scope annotation is applied to an abstract type or interface
    
    I suspect these will find lots of bugs!
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@523 d779f126-a31b-0410-b53b-1d3aecad763e

commit bb58ce2bfee9f0b68eb330c9bfc469aebf59dd8f
Author: limpbizkit <limpbizkit@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Sat May 31 17:35:35 2008 +0000

    New tests that make sure we blow up when there's misplaced annotations. These features aren't yet implemented...
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@493 d779f126-a31b-0410-b53b-1d3aecad763e

commit 56400ca666836e8a47c43802ba4f6ed1d82ed781
Author: limpbizkit <limpbizkit@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Fri May 23 19:20:08 2008 +0000

    A bunch of assorted changes:
    
    Fixing AllTests to include missing tests.
    
    Fixing LineNumbersTest to use the new error message. I'm not sure whether this message is a good choice - we should go over all messages before 2.0.
    
    Fixing a bug in UniqueAnnotations where it was returning the wrong hashCode.
    
    Adding tests that show that we don't wrap user exceptions from Provider instances. This needs fixing before 2.0. These tests fail.
    
    Adding tests for serializing various Guice types. In particular, we definitely want our exception types to serialize properly. I'm not sure what our strategy should be for serializing other types, but it seems like we should support it if doing so isn't too difficult. For example, I think Key should be serializable.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@487 d779f126-a31b-0410-b53b-1d3aecad763e

commit 7c533acbed7ce9c051e847a290dd2060915e91aa
Author: limpbizkit <limpbizkit@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Thu May 1 14:17:53 2008 +0000

    There was a pretty horrible bug in Multibinder where collections were checked for annotation but not element type.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@457 d779f126-a31b-0410-b53b-1d3aecad763e

commit c8784819c3dad4d8d1b0b97f7409c73f66892c4d
Author: limpbizkit <limpbizkit@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Wed Mar 26 07:20:04 2008 +0000

    Unifying unique annotations, used for creating unique keys
    
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@429 d779f126-a31b-0410-b53b-1d3aecad763e

commit e39d8d86616199a22df068a06202366a57fe30fd
Author: limpbizkit <limpbizkit@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Wed Mar 26 07:19:25 2008 +0000

    Unifying unique annotations, used for creating unique keys
    
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@428 d779f126-a31b-0410-b53b-1d3aecad763e

commit 0197f9d60dc57722f990a3c00fd9a99b9640c0f2
Author: limpbizkit <limpbizkit@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Wed Mar 26 07:09:15 2008 +0000

    Fixing a bug in the unique annotation in throwingproviderbinder
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@427 d779f126-a31b-0410-b53b-1d3aecad763e

commit ade7be4cc85c534adce75692ae2988f056463d2b
Author: kevinb9n <kevinb9n@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Tue Apr 24 21:47:15 2007 +0000

    (thanks dhalem!) Issue 76: Matchers.annotatedWith() should require annotation to have runtime retention
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@321 d779f126-a31b-0410-b53b-1d3aecad763e

commit 3854582f67fc8e16e20ac93b8962e1168173b334
Author: crazyboblee <crazyboblee@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Thu Mar 1 23:33:48 2007 +0000

    Renamed default impl and provider annotations.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@252 d779f126-a31b-0410-b53b-1d3aecad763e

commit c3e88492c6ce1d5f452545af6dc73e54582ed9bb
Author: crazyboblee <crazyboblee@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Sun Feb 25 22:36:58 2007 +0000

    If we can't find a binding to an annotation with given attribute values, we look for a binding to the annotation type. Added check to make sure binding annotations are annotated with @BindingAnnotation.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@219 d779f126-a31b-0410-b53b-1d3aecad763e

commit 0f09fe379ec7c6641e7547489b611d37702deea2
Author: crazyboblee <crazyboblee@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Fri Feb 23 23:43:57 2007 +0000

    Added checks to ensure annotations are retained at runtime.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@212 d779f126-a31b-0410-b53b-1d3aecad763e

commit 97b2cacb2aedd4c1450f5cafd068a5354c97f5dd
Author: crazyboblee <crazyboblee@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Fri Feb 23 22:31:30 2007 +0000

    Added @ScopeAnnotation. Added Binder.addError(). Removed Scopes.DEFAULT. We now refer to this as 'no' scope.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@211 d779f126-a31b-0410-b53b-1d3aecad763e

commit be2a67fab538548f580477d8a6aca41297fe083c
Author: crazyboblee <crazyboblee@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Wed Feb 21 23:58:40 2007 +0000

    Added Binder.getStage(). Added Matchers.annotatedWith(Annotation). Added support for generic arrays to TypeLiteral.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@207 d779f126-a31b-0410-b53b-1d3aecad763e

commit c0c12ea61414709600577bb547e1e77b4a405691
Author: kevinb9n <kevinb9n@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Tue Feb 20 04:46:01 2007 +0000

    @Binder -> @BindingAnnotation
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@183 d779f126-a31b-0410-b53b-1d3aecad763e

commit b1f2e68ac52659cdffd16396f9075fe6909e07ac
Author: crazyboblee <crazyboblee@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Thu Feb 15 05:14:32 2007 +0000

    Modified scope binding to bind to scope annotations directly. No more strings.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@144 d779f126-a31b-0410-b53b-1d3aecad763e

commit 4602a6fe08692b38cf36aa3cdb5c4e340e6929d7
Author: crazyboblee <crazyboblee@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Thu Feb 15 02:45:18 2007 +0000

    Added support for binding to annotations instead of names.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@142 d779f126-a31b-0410-b53b-1d3aecad763e

commit 698a6c8d88ccde8d5821ff94f04c2888ca7b21da
Author: crazyboblee <crazyboblee@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Tue Feb 13 21:55:29 2007 +0000

    Added support for surrogate injection annotations.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@132 d779f126-a31b-0410-b53b-1d3aecad763e

commit 6b931bdebcc1e07da6ff1cbcbd4037baed30995b
Author: crazyboblee <crazyboblee@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Tue Feb 13 21:02:41 2007 +0000

    Updated scoping logic to use surrogate annotations.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@128 d779f126-a31b-0410-b53b-1d3aecad763e

commit 013aacd92cc2d33bb62703d7e3c1fd46b1e92e25
Author: crazyboblee <crazyboblee@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Tue Feb 13 20:53:02 2007 +0000

    Added support for surrogate annotations.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@127 d779f126-a31b-0410-b53b-1d3aecad763e

commit f33d23ef116bf6450998cefd7ad8def6b3f41874
Author: crazyboblee <crazyboblee@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Mon Feb 12 04:17:48 2007 +0000

    Refactored scope handling. Allows overriding annotations with in(). Improved error reporting.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@117 d779f126-a31b-0410-b53b-1d3aecad763e

commit e5fbbb0939eccd8e8dff78cd83cfb2f34ef2ed57
Author: crazyboblee <crazyboblee@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Mon Feb 5 07:00:27 2007 +0000

    Added overloaded methods which accept a name to Container. Re-implemented the built-in scopes as an enum. Added ContainerBuilder.scope(Enum). Added support for custom scope annotations.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@95 d779f126-a31b-0410-b53b-1d3aecad763e

commit 1596921346cfbcf6dfe7ad683b33e08600bf29cd
Author: crazyboblee <crazyboblee@d779f126-a31b-0410-b53b-1d3aecad763e>
Date:   Thu Feb 1 02:01:59 2007 +0000

    Added parameter index to context. This will be useful if a custom factory wants to change behavior based on annotations on parameters.
    
    git-svn-id: https://google-guice.googlecode.com/svn/trunk@48 d779f126-a31b-0410-b53b-1d3aecad763e

